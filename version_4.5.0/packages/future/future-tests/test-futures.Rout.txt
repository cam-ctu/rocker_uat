
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-futures.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("futures")
Test ‘futures’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-futures.R’

> library(future)
[08:08:20.614] Option 'future.startup.script': TRUE
[08:08:20.615] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:08:20.615] Future startup scripts found: <none>

> library(listenv)

> dims <- list(NULL, c(1, 6), c(2, 3), c(2, 3, 1), c(2, 
+     1, 3, 1))

> message("*** futures() / resolved() / value() ...")
*** futures() / resolved() / value() ...

> for (cores in 1:availCores) {
+     message(sprintf("Testing with %d cores ...", cores))
+     options(mc.cores = cores)
+     for (type in c("list" .... [TRUNCATED] 
Testing with 1 cores ...
Type of object: list
Type of future: sequential
[08:08:20.656] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.656] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:20.656] | : all.equal() for FutureStrategyList ...
[08:08:20.656] | : . New stack:
[08:08:20.656] | : . List of 1
[08:08:20.656] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.656] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.656] | : .   ..- attr(*, "init")= logi TRUE
[08:08:20.656] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.656] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.656] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.656] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:20.656] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.661] | : . Old stack:
[08:08:20.661] | : . List of 1
[08:08:20.661] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.661] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.661] | : .   ..- attr(*, "init")= logi TRUE
[08:08:20.661] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.661] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.661] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.661] | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:20.661] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.663] | : . Not identical
[08:08:20.663] | : . all.equal() for future ...
[08:08:20.663] | : . ' List of 2
[08:08:20.663] | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.663] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.663] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:20.663] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.663] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.663] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.663] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:20.663] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.663] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.663] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:20.663] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.663] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.663] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.663] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:08:20.668] | : . all.equal() for future ... done
[08:08:20.668] | : all.equal() for FutureStrategyList ... done
[08:08:20.668] | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:20.668] | : List of future strategies:
[08:08:20.668] | : 1. sequential:
[08:08:20.668] | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:20.668] | :    - tweaked: FALSE
[08:08:20.668] | :    - call: plan(sequential)
[08:08:20.669] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:20.669] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Dimensions: NULL
[08:08:20.669] future(..., label = NULL) ...
[08:08:20.669] | lazy: FALSE
[08:08:20.669] | stdout: TRUE
[08:08:20.669] | conditions: [n=1] ‘condition’
[08:08:20.669] | gc: FALSE
[08:08:20.670] | earlySignal: FALSE
[08:08:20.670] | getGlobalsAndPackages() ...
[08:08:20.670] | : Searching for globals ...
[08:08:20.678] | : . globals found: [0] 
[08:08:20.678] | : Searching for globals ... done
[08:08:20.678] | : globals: [0] <none>
[08:08:20.679] | : packages: [0] <none>
[08:08:20.679] | getGlobalsAndPackages() ... done
[08:08:20.679] | run() for ‘Future’ (<unnamed-1>) ...
[08:08:20.679] | : state: ‘created’
[08:08:20.680] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.680] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:20.680] | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.680] | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.680] | : . '  - attr(*, "init")= logi TRUE
[08:08:20.680] | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.680] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.680] | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.680] | : . '  - attr(*, "call")= language plan(sequential)
[08:08:20.682] | : . ' init: TRUE
[08:08:20.682] | : . ' makeFutureBackend(<sequential>) ...
[08:08:20.682] | : . ' , Backend function: <‘NULL’>
[08:08:20.682] | : . ' , Evaluator tweak arguments: [n=0]
[08:08:20.682] | : . ' ,  list()
[08:08:20.683] | : . ' , Evaluator formal arguments: [n=2]
[08:08:20.683] | : . ' ,  list()
[08:08:20.683] | : . ' , Backend factory arguments: [n=2]
[08:08:20.683] | : . ' , Dotted pair list of 2
[08:08:20.683] | : . ' ,  $ gc         : logi FALSE
[08:08:20.683] | : . ' ,  $ earlySignal: logi FALSE
[08:08:20.684] | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:20.684] | : . ' makeFutureBackend(<sequential>) ... done
[08:08:20.684] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:20.684] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.685] | : Using SequentialFutureBackend ...
[08:08:20.685] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:20.685] | : . Launching futures ...
[08:08:20.685] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:20.685] | : . ' , getFutureData() ...
[08:08:20.685] | : . ' , ; getFutureCore() ...
[08:08:20.686] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:20.686] | : . ' , ; getFutureCore() ... done
[08:08:20.686] | : . ' , ; getFutureCapture() ...
[08:08:20.686] | : . ' , ; getFutureCapture() ... done
[08:08:20.686] | : . ' , ; getFutureContext() ...
[08:08:20.686] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.686] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:20.687] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.687] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:20.687] | : . ' , ; getFutureContext() ... done
[08:08:20.687] | : . ' , getFutureData() ... done
[08:08:20.689] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.689] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:20.690] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.690] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.690] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:20.690] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:20.690] | : . ' , ; ` | New stack:
[08:08:20.690] | : . ' , ; ` | List of 1
[08:08:20.690] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.690] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.690] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:20.690] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.690] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.690] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.690] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:20.690] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.693] | : . ' , ; ` | Old stack:
[08:08:20.693] | : . ' , ; ` | List of 1
[08:08:20.693] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.693] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.693] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:20.693] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.693] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.693] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.693] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:20.693] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:20.693] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.693] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.693] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.696] | : . ' , ; ` | Not identical
[08:08:20.696] | : . ' , ; ` | all.equal() for future ...
[08:08:20.696] | : . ' , ; ` | : List of 2
[08:08:20.696] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.696] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.696] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:20.696] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.696] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.696] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.696] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:20.696] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.696] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.696] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.696] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.696] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.696] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.696] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.696] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:20.696] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.696] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.703] | : . ' , ; ` | all.equal() for future ... done
[08:08:20.703] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:20.703] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:20.703] | : . ' , ; ` List of future strategies:
[08:08:20.703] | : . ' , ; ` 1. sequential:
[08:08:20.703] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:20.703] | : . ' , ; `    - tweaked: FALSE
[08:08:20.703] | : . ' , ; `    - call: plan(sequential)
[08:08:20.704] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:20.704] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.706] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.706] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.706] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:20.707] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:20.707] | : . ' , ; ` | : New stack:
[08:08:20.707] | : . ' , ; ` | : List of 1
[08:08:20.707] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.707] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.707] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.707] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.707] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.707] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.707] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.707] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:20.707] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.707] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.707] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.710] | : . ' , ; ` | : Old stack:
[08:08:20.710] | : . ' , ; ` | : List of 1
[08:08:20.710] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.710] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.710] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.710] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.710] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.710] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.710] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.710] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:20.710] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.710] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.710] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.713] | : . ' , ; ` | : Identical
[08:08:20.713] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:20.713] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:20.713] | : . ' , ; ` | List of future strategies:
[08:08:20.713] | : . ' , ; ` | 1. sequential:
[08:08:20.713] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:20.713] | : . ' , ; ` |    - tweaked: FALSE
[08:08:20.713] | : . ' , ; ` |    - call: plan(sequential)
[08:08:20.714] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:20.714] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.714] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.717] | : . ' , SequentialFuture started (and completed)
[08:08:20.717] | : . ' , signalConditions() ...
[08:08:20.717] | : . ' , ; include = ‘immediateCondition’
[08:08:20.717] | : . ' , ; exclude = 
[08:08:20.717] | : . ' , ; resignal = FALSE
[08:08:20.718] | : . ' , ; Number of conditions: 6
[08:08:20.718] | : . ' , ;  int 6
[08:08:20.718] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.718] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.718] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.718] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.718] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.719] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.719] | : . ' , signalConditions() ... done
[08:08:20.719] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:20.719] | : . Launching futures ... done
[08:08:20.719] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:20.719] | : Using SequentialFutureBackend ... done
[08:08:20.719] | run() for ‘Future’ (<unnamed-1>) ... done
[08:08:20.719] future(..., label = NULL) ... done
[08:08:20.719] future(..., label = NULL) ...
[08:08:20.720] | lazy: FALSE
[08:08:20.720] | stdout: TRUE
[08:08:20.720] | conditions: [n=1] ‘condition’
[08:08:20.720] | gc: FALSE
[08:08:20.720] | earlySignal: FALSE
[08:08:20.720] | getGlobalsAndPackages() ...
[08:08:20.720] | : Searching for globals ...
[08:08:20.721] | : . globals found: [0] 
[08:08:20.721] | : Searching for globals ... done
[08:08:20.721] | : globals: [0] <none>
[08:08:20.722] | : packages: [0] <none>
[08:08:20.722] | getGlobalsAndPackages() ... done
[08:08:20.722] | run() for ‘Future’ (<unnamed-2>) ...
[08:08:20.722] | : state: ‘created’
[08:08:20.722] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.722] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.722] | : Using SequentialFutureBackend ...
[08:08:20.722] | : . Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:08:20.723] | : . Launching futures ...
[08:08:20.724] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:20.724] | : . ' , getFutureData() ...
[08:08:20.724] | : . ' , ; getFutureCore() ...
[08:08:20.724] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:20.724] | : . ' , ; getFutureCore() ... done
[08:08:20.724] | : . ' , ; getFutureCapture() ...
[08:08:20.724] | : . ' , ; getFutureCapture() ... done
[08:08:20.724] | : . ' , ; getFutureContext() ...
[08:08:20.724] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.725] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:20.725] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.725] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:20.725] | : . ' , ; getFutureContext() ... done
[08:08:20.725] | : . ' , getFutureData() ... done
[08:08:20.726] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.726] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:20.726] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.727] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.727] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:20.727] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:20.727] | : . ' , ; ` | New stack:
[08:08:20.727] | : . ' , ; ` | List of 1
[08:08:20.727] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.727] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.727] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:20.727] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.727] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.727] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.727] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:20.727] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.730] | : . ' , ; ` | Old stack:
[08:08:20.730] | : . ' , ; ` | List of 1
[08:08:20.730] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.730] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.730] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:20.730] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.730] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.730] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.730] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:20.730] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:20.730] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.730] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.730] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.733] | : . ' , ; ` | Not identical
[08:08:20.733] | : . ' , ; ` | all.equal() for future ...
[08:08:20.733] | : . ' , ; ` | : List of 2
[08:08:20.733] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.733] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.733] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:20.733] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.733] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.733] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.733] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:20.733] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.733] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.733] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.733] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.733] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.733] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.733] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.733] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:20.733] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.733] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.738] | : . ' , ; ` | all.equal() for future ... done
[08:08:20.738] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:20.738] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:20.738] | : . ' , ; ` List of future strategies:
[08:08:20.738] | : . ' , ; ` 1. sequential:
[08:08:20.738] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:20.738] | : . ' , ; `    - tweaked: FALSE
[08:08:20.738] | : . ' , ; `    - call: plan(sequential)
[08:08:20.739] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:20.739] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.740] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.740] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.740] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:20.741] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:20.741] | : . ' , ; ` | : New stack:
[08:08:20.741] | : . ' , ; ` | : List of 1
[08:08:20.741] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.741] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.741] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.741] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.741] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.741] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.741] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.741] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:20.741] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.741] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.741] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.745] | : . ' , ; ` | : Old stack:
[08:08:20.745] | : . ' , ; ` | : List of 1
[08:08:20.745] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.745] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.745] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.745] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.745] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.745] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.745] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.745] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:20.745] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.745] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.745] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.748] | : . ' , ; ` | : Identical
[08:08:20.748] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:20.748] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:20.748] | : . ' , ; ` | List of future strategies:
[08:08:20.748] | : . ' , ; ` | 1. sequential:
[08:08:20.748] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:20.748] | : . ' , ; ` |    - tweaked: FALSE
[08:08:20.748] | : . ' , ; ` |    - call: plan(sequential)
[08:08:20.748] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:20.749] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.749] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.749] | : . ' , SequentialFuture started (and completed)
[08:08:20.749] | : . ' , signalConditions() ...
[08:08:20.749] | : . ' , ; include = ‘immediateCondition’
[08:08:20.749] | : . ' , ; exclude = 
[08:08:20.749] | : . ' , ; resignal = FALSE
[08:08:20.749] | : . ' , ; Number of conditions: 6
[08:08:20.750] | : . ' , ;  int 6
[08:08:20.750] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.750] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.750] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.750] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.750] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.750] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.751] | : . ' , signalConditions() ... done
[08:08:20.751] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:20.751] | : . Launching futures ... done
[08:08:20.751] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:20.751] | : Using SequentialFutureBackend ... done
[08:08:20.751] | run() for ‘Future’ (<unnamed-2>) ... done
[08:08:20.751] future(..., label = NULL) ... done
List of 6
 $ a: num 1
 $ b:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x5643005d8908> 
 $ c:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x564302953f70> 
 $  : NULL
 $  : NULL
 $  : num 6
List of 6
 $ a: num 1
 $ b:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x5643005d8908> 
 $ c:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x564302953f70> 
 $  : NULL
 $  : NULL
 $  : num 6
[08:08:20.755] resolved() for list ...
[08:08:20.755] | Number of elements: 6
[08:08:20.755] | Number of futures: 6
[08:08:20.755] | resolved() for SequentialFuture (<unnamed-1>) ...
[08:08:20.755] | : state: ‘finished’
[08:08:20.755] | : run: TRUE
[08:08:20.756] | : result: ‘FutureResult’
[08:08:20.756] | resolved() for SequentialFuture (<unnamed-1>) ... done
[08:08:20.756] | resolved() for SequentialFuture (<unnamed-2>) ...
[08:08:20.756] | : state: ‘finished’
[08:08:20.756] | : run: TRUE
[08:08:20.756] | : result: ‘FutureResult’
[08:08:20.756] | resolved() for SequentialFuture (<unnamed-2>) ... done
[08:08:20.756] resolved() for list ... done
 Named logi [1:6] TRUE TRUE TRUE TRUE TRUE TRUE
 - attr(*, "names")= chr [1:6] "a" "b" "c" "" ...
[08:08:20.757] value() for list ...
[08:08:20.758] | recursive: 0
[08:08:20.758] | reduce: FALSE
[08:08:20.758] | length: 6
[08:08:20.758] | elements: ‘a’, ‘b’, ‘c’, ‘’, ‘’, ‘’
[08:08:20.758] | Number of remaining objects: 6
[08:08:20.758] | checking value #1:
[08:08:20.758] | 'obj' is atomic
[08:08:20.758] | signalConditionsASAP(numeric, pos=1) ...
[08:08:20.759] | : nx: 6
[08:08:20.759] | : relay: TRUE
[08:08:20.759] | : stdout: TRUE
[08:08:20.759] | : signal: TRUE
[08:08:20.759] | : resignal: FALSE
[08:08:20.759] | : force: TRUE
[08:08:20.759] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:20.759] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:20.759] | : until=2
[08:08:20.759] | : relaying element #2
[08:08:20.759] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:20.760] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:20.760] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:20.760] | length: 5 (resolved future 1)
[08:08:20.760] value() for list ... done
[08:08:20.760] checking value #2:
[08:08:20.760] 'obj' is SequentialFuture
[08:08:20.760] resolved() for SequentialFuture (<unnamed-1>) ...
[08:08:20.760] | state: ‘finished’
[08:08:20.760] | run: TRUE
[08:08:20.760] | result: ‘FutureResult’
[08:08:20.760] resolved() for SequentialFuture (<unnamed-1>) ... done
[08:08:20.761] SequentialFuture #2
[08:08:20.761] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:20.761] | nx: 6
[08:08:20.761] | relay: TRUE
[08:08:20.761] | stdout: TRUE
[08:08:20.761] | signal: TRUE
[08:08:20.761] | resignal: FALSE
[08:08:20.761] | force: TRUE
[08:08:20.761] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:20.761] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:20.761] | until=2
[08:08:20.762] | relaying element #2
[08:08:20.762] | value() for SequentialFuture (<unnamed-1>) ...
[08:08:20.762] | : signalConditions() ...
[08:08:20.762] | : . include = ‘immediateCondition’
[08:08:20.762] | : . exclude = 
[08:08:20.762] | : . resignal = FALSE
[08:08:20.762] | : . Number of conditions: 6
[08:08:20.763] | : .  int 6
[08:08:20.763] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.763] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.763] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.763] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.763] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.763] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.764] | : signalConditions() ... done
[08:08:20.764] | : relay stdout ...
[08:08:20.765] | : relay stdout ... done
[08:08:20.765] | : check for misuse ...
[08:08:20.765] | : check for misuse ... done
[08:08:20.765] | value() for SequentialFuture (<unnamed-1>) ... done
[08:08:20.765] | signalConditions() ...
[08:08:20.765] | : include = ‘immediateCondition’
[08:08:20.765] | : exclude = 
[08:08:20.765] | : resignal = FALSE
[08:08:20.765] | : Number of conditions: 6
[08:08:20.766] | :  int 6
[08:08:20.766] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.766] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.766] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.766] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.766] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.766] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.767] | signalConditions() ... done
[08:08:20.767] | signalConditions() ...
[08:08:20.767] | : include = ‘condition’
[08:08:20.767] | : exclude = ‘error’, ‘immediateCondition’
[08:08:20.767] | : resignal = TRUE
[08:08:20.767] | : Number of conditions: 6
[08:08:20.767] | :  int 6
[08:08:20.768] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.768] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.688] | : . ' , attachPackages() ...
[08:08:20.768] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.768] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.688] | : . ' , ; packages: [n=1] ‘future’
[08:08:20.768] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.768] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.689] | : . ' , attachPackages() ... done
[08:08:20.768] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.768] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.689] | : . ' , attachPackages() ...
[08:08:20.768] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.769] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.689] | : . ' , ; packages: [n=0] 
[08:08:20.769] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.769] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.689] | : . ' , attachPackages() ... done
[08:08:20.769] | signalConditions() ... done
[08:08:20.769] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:20.769] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:20.769] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:20.769] value(<SequentialFuture>, ...) ...
[08:08:20.769] value(<SequentialFuture>, ...) ... done
[08:08:20.770] value() for SequentialFuture (<unnamed-1>) ...
[08:08:20.770] | signalConditions() ...
[08:08:20.770] | : include = ‘immediateCondition’
[08:08:20.770] | : exclude = 
[08:08:20.770] | : resignal = FALSE
[08:08:20.770] | : Number of conditions: 6
[08:08:20.770] | :  int 6
[08:08:20.770] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.771] | : already signaled, skipping
[08:08:20.771] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.771] | : already signaled, skipping
[08:08:20.771] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.771] | : already signaled, skipping
[08:08:20.771] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.771] | : already signaled, skipping
[08:08:20.771] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.771] | : already signaled, skipping
[08:08:20.771] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.772] | : already signaled, skipping
[08:08:20.772] | signalConditions() ... done
[08:08:20.772] | check for misuse ...
[08:08:20.772] | check for misuse ... done
[08:08:20.772] value() for SequentialFuture (<unnamed-1>) ... done
[08:08:20.772] value: <numeric>
[08:08:20.772] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:20.772] | nx: 6
[08:08:20.772] | relay: TRUE
[08:08:20.772] | stdout: TRUE
[08:08:20.772] | signal: TRUE
[08:08:20.773] | resignal: FALSE
[08:08:20.773] | force: TRUE
[08:08:20.773] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:20.773] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:20.773] | until=3
[08:08:20.773] | relaying element #3
[08:08:20.773] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:20.773] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:20.773] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:20.773] resolve() for SequentialFuture ...
[08:08:20.774] resolve() for SequentialFuture ... done
[08:08:20.774] length: 4 (resolved future 2)

[08:08:20.774] checking value #3:
[08:08:20.774] 'obj' is SequentialFuture
[08:08:20.774] resolved() for SequentialFuture (<unnamed-2>) ...
[08:08:20.774] | state: ‘finished’
[08:08:20.774] | run: TRUE
[08:08:20.774] | result: ‘FutureResult’
[08:08:20.774] resolved() for SequentialFuture (<unnamed-2>) ... done
[08:08:20.774] SequentialFuture #3
[08:08:20.775] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:20.775] | nx: 6
[08:08:20.775] | relay: TRUE
[08:08:20.775] | stdout: TRUE
[08:08:20.775] | signal: TRUE
[08:08:20.775] | resignal: FALSE
[08:08:20.775] | force: TRUE
[08:08:20.775] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:20.775] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:20.775] | until=3
[08:08:20.775] | relaying element #3
[08:08:20.776] | value() for SequentialFuture (<unnamed-2>) ...
[08:08:20.776] | : signalConditions() ...
[08:08:20.776] | : . include = ‘immediateCondition’
[08:08:20.776] | : . exclude = 
[08:08:20.776] | : . resignal = FALSE
[08:08:20.776] | : . Number of conditions: 6
[08:08:20.776] | : .  int 6
[08:08:20.777] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.777] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.777] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.777] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.777] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.777] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.777] | : signalConditions() ... done
[08:08:20.777] | : relay stdout ...
[08:08:20.777] | : relay stdout ... done
[08:08:20.777] | : check for misuse ...
[08:08:20.778] | : check for misuse ... done
[08:08:20.778] | value() for SequentialFuture (<unnamed-2>) ... done
[08:08:20.778] | signalConditions() ...
[08:08:20.778] | : include = ‘immediateCondition’
[08:08:20.778] | : exclude = 
[08:08:20.778] | : resignal = FALSE
[08:08:20.778] | : Number of conditions: 6
[08:08:20.778] | :  int 6
[08:08:20.779] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.779] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.779] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.779] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.779] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.779] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.779] | signalConditions() ... done
[08:08:20.779] | signalConditions() ...
[08:08:20.779] | : include = ‘condition’
[08:08:20.780] | : exclude = ‘error’, ‘immediateCondition’
[08:08:20.780] | : resignal = TRUE
[08:08:20.780] | : Number of conditions: 6
[08:08:20.780] | :  int 6
[08:08:20.780] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.780] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.725] | : . ' , attachPackages() ...
[08:08:20.780] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.781] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.725] | : . ' , ; packages: [n=1] ‘future’
[08:08:20.781] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.781] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.725] | : . ' , attachPackages() ... done
[08:08:20.781] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.781] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.726] | : . ' , attachPackages() ...
[08:08:20.781] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.781] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.726] | : . ' , ; packages: [n=0] 
[08:08:20.781] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.781] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.726] | : . ' , attachPackages() ... done
[08:08:20.782] | signalConditions() ... done
[08:08:20.782] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.782] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.782] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:20.782] value(<SequentialFuture>, ...) ...
[08:08:20.782] value(<SequentialFuture>, ...) ... done
[08:08:20.782] value() for SequentialFuture (<unnamed-2>) ...
[08:08:20.782] | signalConditions() ...
[08:08:20.782] | : include = ‘immediateCondition’
[08:08:20.782] | : exclude = 
[08:08:20.783] | : resignal = FALSE
[08:08:20.783] | : Number of conditions: 6
[08:08:20.783] | :  int 6
[08:08:20.783] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.783] | : already signaled, skipping
[08:08:20.784] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.784] | : already signaled, skipping
[08:08:20.784] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.784] | : already signaled, skipping
[08:08:20.784] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.785] | : already signaled, skipping
[08:08:20.785] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.785] | : already signaled, skipping
[08:08:20.785] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.785] | : already signaled, skipping
[08:08:20.785] | signalConditions() ... done
[08:08:20.785] | check for misuse ...
[08:08:20.785] | check for misuse ... done
[08:08:20.785] value() for SequentialFuture (<unnamed-2>) ... done
[08:08:20.785] value: <NULL>
[08:08:20.786] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:20.786] | nx: 6
[08:08:20.786] | relay: TRUE
[08:08:20.786] | stdout: TRUE
[08:08:20.786] | signal: TRUE
[08:08:20.786] | resignal: FALSE
[08:08:20.786] | force: TRUE
[08:08:20.786] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.786] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.786] | until=4
[08:08:20.786] | relaying element #4
[08:08:20.786] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.787] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.787] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:20.787] resolve() for SequentialFuture ...
[08:08:20.787] resolve() for SequentialFuture ... done
[08:08:20.787] length: 3 (resolved future 3)

[08:08:20.787] checking value #4:
[08:08:20.787] 'obj' is NULL
[08:08:20.787] signalConditionsASAP(NULL, pos=4) ...
[08:08:20.787] | nx: 6
[08:08:20.787] | relay: TRUE
[08:08:20.788] | stdout: TRUE
[08:08:20.788] | signal: TRUE
[08:08:20.788] | resignal: FALSE
[08:08:20.788] | force: TRUE
[08:08:20.788] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.788] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.788] | until=5
[08:08:20.788] | relaying element #5
[08:08:20.788] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:20.788] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.788] signalConditionsASAP(NULL, pos=4) ... done
[08:08:20.789] signalConditionsASAP(NULL, pos=4) ...
[08:08:20.789] | nx: 6
[08:08:20.789] | relay: TRUE
[08:08:20.789] | stdout: TRUE
[08:08:20.789] | signal: TRUE
[08:08:20.789] | resignal: FALSE
[08:08:20.789] | force: TRUE
[08:08:20.789] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:20.789] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.789] | until=5
[08:08:20.789] | relaying element #5
[08:08:20.789] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:20.790] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.790] signalConditionsASAP(NULL, pos=4) ... done
[08:08:20.790] length: 2 (resolved future 4)

[08:08:20.790] checking value #5:
[08:08:20.790] 'obj' is NULL
[08:08:20.790] signalConditionsASAP(NULL, pos=5) ...
[08:08:20.790] | nx: 6
[08:08:20.790] | relay: TRUE
[08:08:20.790] | stdout: TRUE
[08:08:20.790] | signal: TRUE
[08:08:20.791] | resignal: FALSE
[08:08:20.791] | force: TRUE
[08:08:20.791] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:20.791] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.791] | until=6
[08:08:20.791] | relaying element #6
[08:08:20.791] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:20.791] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.791] signalConditionsASAP(NULL, pos=5) ... done
[08:08:20.791] signalConditionsASAP(NULL, pos=5) ...
[08:08:20.791] | nx: 6
[08:08:20.792] | relay: TRUE
[08:08:20.792] | stdout: TRUE
[08:08:20.792] | signal: TRUE
[08:08:20.792] | resignal: FALSE
[08:08:20.792] | force: TRUE
[08:08:20.792] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:20.792] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.792] | until=6
[08:08:20.792] | relaying element #6
[08:08:20.792] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:20.792] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.792] signalConditionsASAP(NULL, pos=5) ... done
[08:08:20.793] length: 1 (resolved future 5)

[08:08:20.793] checking value #6:
[08:08:20.793] 'obj' is atomic
[08:08:20.793] signalConditionsASAP(numeric, pos=6) ...
[08:08:20.793] | nx: 6
[08:08:20.793] | relay: TRUE
[08:08:20.793] | stdout: TRUE
[08:08:20.793] | signal: TRUE
[08:08:20.793] | resignal: FALSE
[08:08:20.793] | force: TRUE
[08:08:20.794] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:20.794] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.794] | until=6
[08:08:20.794] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:20.794] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.794] signalConditionsASAP(numeric, pos=6) ... done
[08:08:20.794] length: 0 (resolved future 6)

[08:08:20.794] Relaying remaining futures ...
[08:08:20.794] | signalConditionsASAP(NULL, pos=0) ...
[08:08:20.794] | : nx: 6
[08:08:20.795] | : relay: TRUE
[08:08:20.795] | : stdout: TRUE
[08:08:20.795] | : signal: TRUE
[08:08:20.795] | : resignal: FALSE
[08:08:20.795] | : force: TRUE
[08:08:20.795] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:20.795] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
 - flush all
[08:08:20.795] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:20.795] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.795] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:20.795] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $  : NULL
 $  : NULL
 $  : num 6
Dimensions: c(1, 6)
[08:08:20.797] future(..., label = NULL) ...
[08:08:20.798] | lazy: FALSE
[08:08:20.798] | stdout: TRUE
[08:08:20.798] | conditions: [n=1] ‘condition’
[08:08:20.798] | gc: FALSE
[08:08:20.798] | earlySignal: FALSE
[08:08:20.798] | getGlobalsAndPackages() ...
[08:08:20.798] | : Searching for globals ...
[08:08:20.799] | : . globals found: [0] 
[08:08:20.799] | : Searching for globals ... done
[08:08:20.799] | : globals: [0] <none>
[08:08:20.800] | : packages: [0] <none>
[08:08:20.800] | getGlobalsAndPackages() ... done
[08:08:20.800] | run() for ‘Future’ (<unnamed-3>) ...
[08:08:20.800] | : state: ‘created’
[08:08:20.800] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.800] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.800] | : Using SequentialFutureBackend ...
[08:08:20.800] | : . Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:08:20.800] | : . Launching futures ...
[08:08:20.801] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:20.801] | : . ' , getFutureData() ...
[08:08:20.801] | : . ' , ; getFutureCore() ...
[08:08:20.801] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:20.801] | : . ' , ; getFutureCore() ... done
[08:08:20.801] | : . ' , ; getFutureCapture() ...
[08:08:20.801] | : . ' , ; getFutureCapture() ... done
[08:08:20.801] | : . ' , ; getFutureContext() ...
[08:08:20.801] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.802] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:20.802] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.802] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:20.802] | : . ' , ; getFutureContext() ... done
[08:08:20.803] | : . ' , getFutureData() ... done
[08:08:20.804] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.804] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:20.804] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.804] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.804] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:20.805] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:20.805] | : . ' , ; ` | New stack:
[08:08:20.805] | : . ' , ; ` | List of 1
[08:08:20.805] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.805] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.805] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:20.805] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.805] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.805] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.805] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:20.805] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.807] | : . ' , ; ` | Old stack:
[08:08:20.807] | : . ' , ; ` | List of 1
[08:08:20.807] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.807] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.807] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:20.807] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.807] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.807] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.807] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:20.807] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:20.807] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.807] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.807] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.810] | : . ' , ; ` | Not identical
[08:08:20.810] | : . ' , ; ` | all.equal() for future ...
[08:08:20.811] | : . ' , ; ` | : List of 2
[08:08:20.811] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.811] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.811] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:20.811] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.811] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.811] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.811] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:20.811] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.811] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.811] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.811] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.811] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.811] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.811] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.811] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:20.811] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.811] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.815] | : . ' , ; ` | all.equal() for future ... done
[08:08:20.816] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:20.816] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:20.816] | : . ' , ; ` List of future strategies:
[08:08:20.816] | : . ' , ; ` 1. sequential:
[08:08:20.816] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:20.816] | : . ' , ; `    - tweaked: FALSE
[08:08:20.816] | : . ' , ; `    - call: plan(sequential)
[08:08:20.816] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:20.816] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.818] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.818] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.818] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:20.818] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:20.818] | : . ' , ; ` | : New stack:
[08:08:20.818] | : . ' , ; ` | : List of 1
[08:08:20.818] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.818] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.818] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.818] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.818] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.818] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.818] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.818] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:20.818] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.818] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.818] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.822] | : . ' , ; ` | : Old stack:
[08:08:20.822] | : . ' , ; ` | : List of 1
[08:08:20.822] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.822] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.822] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.822] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.822] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.822] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.822] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.822] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:20.822] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.822] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.822] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.825] | : . ' , ; ` | : Identical
[08:08:20.825] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:20.825] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:20.826] | : . ' , ; ` | List of future strategies:
[08:08:20.826] | : . ' , ; ` | 1. sequential:
[08:08:20.826] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:20.826] | : . ' , ; ` |    - tweaked: FALSE
[08:08:20.826] | : . ' , ; ` |    - call: plan(sequential)
[08:08:20.826] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:20.826] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.826] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.826] | : . ' , SequentialFuture started (and completed)
[08:08:20.827] | : . ' , signalConditions() ...
[08:08:20.827] | : . ' , ; include = ‘immediateCondition’
[08:08:20.827] | : . ' , ; exclude = 
[08:08:20.827] | : . ' , ; resignal = FALSE
[08:08:20.827] | : . ' , ; Number of conditions: 6
[08:08:20.827] | : . ' , ;  int 6
[08:08:20.827] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.828] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.828] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.828] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.828] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.828] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.828] | : . ' , signalConditions() ... done
[08:08:20.828] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:20.828] | : . Launching futures ... done
[08:08:20.828] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:20.828] | : Using SequentialFutureBackend ... done
[08:08:20.829] | run() for ‘Future’ (<unnamed-3>) ... done
[08:08:20.829] future(..., label = NULL) ... done
[08:08:20.829] future(..., label = NULL) ...
[08:08:20.829] | lazy: FALSE
[08:08:20.829] | stdout: TRUE
[08:08:20.829] | conditions: [n=1] ‘condition’
[08:08:20.829] | gc: FALSE
[08:08:20.829] | earlySignal: FALSE
[08:08:20.829] | getGlobalsAndPackages() ...
[08:08:20.829] | : Searching for globals ...
[08:08:20.830] | : . globals found: [0] 
[08:08:20.831] | : Searching for globals ... done
[08:08:20.831] | : globals: [0] <none>
[08:08:20.831] | : packages: [0] <none>
[08:08:20.831] | getGlobalsAndPackages() ... done
[08:08:20.831] | run() for ‘Future’ (<unnamed-4>) ...
[08:08:20.831] | : state: ‘created’
[08:08:20.831] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.831] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.831] | : Using SequentialFutureBackend ...
[08:08:20.832] | : . Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:08:20.832] | : . Launching futures ...
[08:08:20.832] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:20.832] | : . ' , getFutureData() ...
[08:08:20.832] | : . ' , ; getFutureCore() ...
[08:08:20.832] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:20.832] | : . ' , ; getFutureCore() ... done
[08:08:20.832] | : . ' , ; getFutureCapture() ...
[08:08:20.832] | : . ' , ; getFutureCapture() ... done
[08:08:20.832] | : . ' , ; getFutureContext() ...
[08:08:20.833] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.833] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:20.833] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.833] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:20.833] | : . ' , ; getFutureContext() ... done
[08:08:20.833] | : . ' , getFutureData() ... done
[08:08:20.834] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.834] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:20.835] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.835] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.835] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:20.835] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:20.835] | : . ' , ; ` | New stack:
[08:08:20.835] | : . ' , ; ` | List of 1
[08:08:20.835] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.835] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.835] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:20.835] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.835] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.835] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.835] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:20.835] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.838] | : . ' , ; ` | Old stack:
[08:08:20.838] | : . ' , ; ` | List of 1
[08:08:20.838] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.838] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.838] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:20.838] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.838] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.838] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.838] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:20.838] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:20.838] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.838] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.838] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.842] | : . ' , ; ` | Not identical
[08:08:20.842] | : . ' , ; ` | all.equal() for future ...
[08:08:20.842] | : . ' , ; ` | : List of 2
[08:08:20.842] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.842] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.842] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:20.842] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.842] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.842] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.842] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:20.842] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.842] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.842] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.842] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.842] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.842] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.842] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.842] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:20.842] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.842] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.847] | : . ' , ; ` | all.equal() for future ... done
[08:08:20.847] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:20.847] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:20.847] | : . ' , ; ` List of future strategies:
[08:08:20.847] | : . ' , ; ` 1. sequential:
[08:08:20.847] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:20.847] | : . ' , ; `    - tweaked: FALSE
[08:08:20.847] | : . ' , ; `    - call: plan(sequential)
[08:08:20.848] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:20.848] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.849] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.849] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.849] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:20.849] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:20.850] | : . ' , ; ` | : New stack:
[08:08:20.850] | : . ' , ; ` | : List of 1
[08:08:20.850] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.850] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.850] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.850] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.850] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.850] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.850] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.850] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:20.850] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.850] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.850] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.853] | : . ' , ; ` | : Old stack:
[08:08:20.853] | : . ' , ; ` | : List of 1
[08:08:20.853] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.853] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.853] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.853] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.853] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.853] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.853] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.853] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:20.853] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.853] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.853] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.856] | : . ' , ; ` | : Identical
[08:08:20.856] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:20.856] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:20.856] | : . ' , ; ` | List of future strategies:
[08:08:20.856] | : . ' , ; ` | 1. sequential:
[08:08:20.856] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:20.856] | : . ' , ; ` |    - tweaked: FALSE
[08:08:20.856] | : . ' , ; ` |    - call: plan(sequential)
[08:08:20.857] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:20.857] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.857] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.857] | : . ' , SequentialFuture started (and completed)
[08:08:20.857] | : . ' , signalConditions() ...
[08:08:20.857] | : . ' , ; include = ‘immediateCondition’
[08:08:20.857] | : . ' , ; exclude = 
[08:08:20.858] | : . ' , ; resignal = FALSE
[08:08:20.858] | : . ' , ; Number of conditions: 6
[08:08:20.858] | : . ' , ;  int 6
[08:08:20.858] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.858] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.858] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.859] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.860] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.860] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.860] | : . ' , signalConditions() ... done
[08:08:20.860] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:20.860] | : . Launching futures ... done
[08:08:20.860] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:20.860] | : Using SequentialFutureBackend ... done
[08:08:20.860] | run() for ‘Future’ (<unnamed-4>) ... done
[08:08:20.860] future(..., label = NULL) ... done
List of 6
 $ a: num 1
 $ b:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x5643024ee580> 
 $ c:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x564301bfa718> 
 $  : NULL
 $  : NULL
 $  : num 6
List of 6
 $ a: num 1
 $ b:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x5643024ee580> 
 $ c:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x564301bfa718> 
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 1 6
 - attr(*, "dimnames")=List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
[08:08:20.865] resolved() for matrix ...
[08:08:20.865] | Number of elements: 6
[08:08:20.866] | Number of futures: 6
[08:08:20.866] | resolved() for SequentialFuture (<unnamed-3>) ...
[08:08:20.866] | : state: ‘finished’
[08:08:20.866] | : run: TRUE
[08:08:20.866] | : result: ‘FutureResult’
[08:08:20.866] | resolved() for SequentialFuture (<unnamed-3>) ... done
[08:08:20.866] | resolved() for SequentialFuture (<unnamed-4>) ...
[08:08:20.866] | : state: ‘finished’
[08:08:20.866] | : run: TRUE
[08:08:20.866] | : result: ‘FutureResult’
[08:08:20.867] | resolved() for SequentialFuture (<unnamed-4>) ... done
[08:08:20.867] resolved() for matrix ... done
 logi [1, 1:6] TRUE TRUE TRUE TRUE TRUE TRUE
 - attr(*, "dimnames")=List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
 - attr(*, "names")= chr [1:6] "a" "b" "c" "" ...
[08:08:20.868] value() for matrix ...
[08:08:20.868] | recursive: 0
[08:08:20.868] | reduce: FALSE
[08:08:20.869] | length: 6
[08:08:20.869] | elements: ‘a’, ‘b’, ‘c’, ‘’, ‘’, ‘’
[08:08:20.869] | Number of remaining objects: 6
[08:08:20.869] | checking value #1:
[08:08:20.869] | 'obj' is atomic
[08:08:20.869] | signalConditionsASAP(numeric, pos=1) ...
[08:08:20.869] | : nx: 6
[08:08:20.869] | : relay: TRUE
[08:08:20.870] | : stdout: TRUE
[08:08:20.870] | : signal: TRUE
[08:08:20.870] | : resignal: FALSE
[08:08:20.870] | : force: TRUE
[08:08:20.870] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:20.870] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:20.870] | : until=2
[08:08:20.870] | : relaying element #2
[08:08:20.870] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:20.870] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:20.870] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:20.871] | length: 5 (resolved future 1)
[08:08:20.871] value() for matrix ... done
[08:08:20.871] checking value #2:
[08:08:20.871] 'obj' is SequentialFuture
[08:08:20.871] resolved() for SequentialFuture (<unnamed-3>) ...
[08:08:20.871] | state: ‘finished’
[08:08:20.871] | run: TRUE
[08:08:20.871] | result: ‘FutureResult’
[08:08:20.871] resolved() for SequentialFuture (<unnamed-3>) ... done
[08:08:20.871] SequentialFuture #2
[08:08:20.871] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:20.872] | nx: 6
[08:08:20.872] | relay: TRUE
[08:08:20.872] | stdout: TRUE
[08:08:20.872] | signal: TRUE
[08:08:20.872] | resignal: FALSE
[08:08:20.872] | force: TRUE
[08:08:20.872] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:20.872] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:20.872] | until=2
[08:08:20.872] | relaying element #2
[08:08:20.872] | value() for SequentialFuture (<unnamed-3>) ...
[08:08:20.873] | : signalConditions() ...
[08:08:20.873] | : . include = ‘immediateCondition’
[08:08:20.873] | : . exclude = 
[08:08:20.873] | : . resignal = FALSE
[08:08:20.873] | : . Number of conditions: 6
[08:08:20.873] | : .  int 6
[08:08:20.873] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.874] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.874] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.874] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.874] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.874] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.874] | : signalConditions() ... done
[08:08:20.874] | : relay stdout ...
[08:08:20.874] | : relay stdout ... done
[08:08:20.874] | : check for misuse ...
[08:08:20.874] | : check for misuse ... done
[08:08:20.875] | value() for SequentialFuture (<unnamed-3>) ... done
[08:08:20.875] | signalConditions() ...
[08:08:20.875] | : include = ‘immediateCondition’
[08:08:20.875] | : exclude = 
[08:08:20.875] | : resignal = FALSE
[08:08:20.875] | : Number of conditions: 6
[08:08:20.875] | :  int 6
[08:08:20.876] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.876] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.876] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.876] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.876] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.876] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.876] | signalConditions() ... done
[08:08:20.876] | signalConditions() ...
[08:08:20.876] | : include = ‘condition’
[08:08:20.876] | : exclude = ‘error’, ‘immediateCondition’
[08:08:20.877] | : resignal = TRUE
[08:08:20.877] | : Number of conditions: 6
[08:08:20.877] | :  int 6
[08:08:20.877] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.877] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.803] | : . ' , attachPackages() ...
[08:08:20.877] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.877] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.803] | : . ' , ; packages: [n=1] ‘future’
[08:08:20.878] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.878] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.803] | : . ' , attachPackages() ... done
[08:08:20.878] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.879] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.803] | : . ' , attachPackages() ...
[08:08:20.879] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.879] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.803] | : . ' , ; packages: [n=0] 
[08:08:20.879] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.879] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.804] | : . ' , attachPackages() ... done
[08:08:20.879] | signalConditions() ... done
[08:08:20.879] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:20.880] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:20.880] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:20.880] value(<SequentialFuture>, ...) ...
[08:08:20.880] value(<SequentialFuture>, ...) ... done
[08:08:20.880] value() for SequentialFuture (<unnamed-3>) ...
[08:08:20.880] | signalConditions() ...
[08:08:20.880] | : include = ‘immediateCondition’
[08:08:20.880] | : exclude = 
[08:08:20.880] | : resignal = FALSE
[08:08:20.880] | : Number of conditions: 6
[08:08:20.881] | :  int 6
[08:08:20.881] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.881] | : already signaled, skipping
[08:08:20.881] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.881] | : already signaled, skipping
[08:08:20.881] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.881] | : already signaled, skipping
[08:08:20.881] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.882] | : already signaled, skipping
[08:08:20.882] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.882] | : already signaled, skipping
[08:08:20.882] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.882] | : already signaled, skipping
[08:08:20.882] | signalConditions() ... done
[08:08:20.882] | check for misuse ...
[08:08:20.882] | check for misuse ... done
[08:08:20.882] value() for SequentialFuture (<unnamed-3>) ... done
[08:08:20.882] value: <numeric>
[08:08:20.883] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:20.883] | nx: 6
[08:08:20.883] | relay: TRUE
[08:08:20.883] | stdout: TRUE
[08:08:20.883] | signal: TRUE
[08:08:20.883] | resignal: FALSE
[08:08:20.883] | force: TRUE
[08:08:20.883] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:20.883] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:20.883] | until=3
[08:08:20.883] | relaying element #3
[08:08:20.883] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:20.884] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:20.884] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:20.884] resolve() for SequentialFuture ...
[08:08:20.884] resolve() for SequentialFuture ... done
[08:08:20.884] length: 4 (resolved future 2)

[08:08:20.884] checking value #3:
[08:08:20.884] 'obj' is SequentialFuture
[08:08:20.884] resolved() for SequentialFuture (<unnamed-4>) ...
[08:08:20.884] | state: ‘finished’
[08:08:20.884] | run: TRUE
[08:08:20.885] | result: ‘FutureResult’
[08:08:20.885] resolved() for SequentialFuture (<unnamed-4>) ... done
[08:08:20.885] SequentialFuture #3
[08:08:20.885] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:20.885] | nx: 6
[08:08:20.885] | relay: TRUE
[08:08:20.885] | stdout: TRUE
[08:08:20.885] | signal: TRUE
[08:08:20.885] | resignal: FALSE
[08:08:20.885] | force: TRUE
[08:08:20.885] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:20.886] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:20.886] | until=3
[08:08:20.886] | relaying element #3
[08:08:20.886] | value() for SequentialFuture (<unnamed-4>) ...
[08:08:20.886] | : signalConditions() ...
[08:08:20.886] | : . include = ‘immediateCondition’
[08:08:20.886] | : . exclude = 
[08:08:20.886] | : . resignal = FALSE
[08:08:20.886] | : . Number of conditions: 6
[08:08:20.886] | : .  int 6
[08:08:20.887] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.887] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.887] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.887] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.887] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.887] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.887] | : signalConditions() ... done
[08:08:20.888] | : relay stdout ...
[08:08:20.888] | : relay stdout ... done
[08:08:20.888] | : check for misuse ...
[08:08:20.888] | : check for misuse ... done
[08:08:20.888] | value() for SequentialFuture (<unnamed-4>) ... done
[08:08:20.888] | signalConditions() ...
[08:08:20.888] | : include = ‘immediateCondition’
[08:08:20.888] | : exclude = 
[08:08:20.888] | : resignal = FALSE
[08:08:20.888] | : Number of conditions: 6
[08:08:20.888] | :  int 6
[08:08:20.889] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.889] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.889] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.889] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.889] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.889] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.889] | signalConditions() ... done
[08:08:20.890] | signalConditions() ...
[08:08:20.890] | : include = ‘condition’
[08:08:20.890] | : exclude = ‘error’, ‘immediateCondition’
[08:08:20.890] | : resignal = TRUE
[08:08:20.890] | : Number of conditions: 6
[08:08:20.890] | :  int 6
[08:08:20.890] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.890] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.833] | : . ' , attachPackages() ...
[08:08:20.891] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.891] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.833] | : . ' , ; packages: [n=1] ‘future’
[08:08:20.891] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.891] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.834] | : . ' , attachPackages() ... done
[08:08:20.891] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.891] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.834] | : . ' , attachPackages() ...
[08:08:20.891] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.891] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.834] | : . ' , ; packages: [n=0] 
[08:08:20.892] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.892] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.834] | : . ' , attachPackages() ... done
[08:08:20.892] | signalConditions() ... done
[08:08:20.892] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.892] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.892] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:20.892] value(<SequentialFuture>, ...) ...
[08:08:20.892] value(<SequentialFuture>, ...) ... done
[08:08:20.892] value() for SequentialFuture (<unnamed-4>) ...
[08:08:20.892] | signalConditions() ...
[08:08:20.893] | : include = ‘immediateCondition’
[08:08:20.893] | : exclude = 
[08:08:20.893] | : resignal = FALSE
[08:08:20.893] | : Number of conditions: 6
[08:08:20.893] | :  int 6
[08:08:20.893] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.893] | : already signaled, skipping
[08:08:20.893] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.894] | : already signaled, skipping
[08:08:20.894] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.894] | : already signaled, skipping
[08:08:20.894] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.894] | : already signaled, skipping
[08:08:20.894] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.894] | : already signaled, skipping
[08:08:20.894] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.894] | : already signaled, skipping
[08:08:20.894] | signalConditions() ... done
[08:08:20.895] | check for misuse ...
[08:08:20.895] | check for misuse ... done
[08:08:20.895] value() for SequentialFuture (<unnamed-4>) ... done
[08:08:20.895] value: <NULL>
[08:08:20.895] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:20.895] | nx: 6
[08:08:20.895] | relay: TRUE
[08:08:20.895] | stdout: TRUE
[08:08:20.895] | signal: TRUE
[08:08:20.895] | resignal: FALSE
[08:08:20.896] | force: TRUE
[08:08:20.896] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.896] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.896] | until=4
[08:08:20.896] | relaying element #4
[08:08:20.896] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.896] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.896] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:20.896] resolve() for SequentialFuture ...
[08:08:20.896] resolve() for SequentialFuture ... done
[08:08:20.897] length: 3 (resolved future 3)

[08:08:20.897] checking value #4:
[08:08:20.897] 'obj' is NULL
[08:08:20.898] signalConditionsASAP(NULL, pos=4) ...
[08:08:20.898] | nx: 6
[08:08:20.898] | relay: TRUE
[08:08:20.898] | stdout: TRUE
[08:08:20.898] | signal: TRUE
[08:08:20.898] | resignal: FALSE
[08:08:20.898] | force: TRUE
[08:08:20.898] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.898] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.898] | until=5
[08:08:20.898] | relaying element #5
[08:08:20.898] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:20.899] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.899] signalConditionsASAP(NULL, pos=4) ... done
[08:08:20.899] signalConditionsASAP(NULL, pos=4) ...
[08:08:20.899] | nx: 6
[08:08:20.899] | relay: TRUE
[08:08:20.899] | stdout: TRUE
[08:08:20.899] | signal: TRUE
[08:08:20.899] | resignal: FALSE
[08:08:20.899] | force: TRUE
[08:08:20.899] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:20.899] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.900] | until=5
[08:08:20.900] | relaying element #5
[08:08:20.900] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:20.900] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.900] signalConditionsASAP(NULL, pos=4) ... done
[08:08:20.900] length: 2 (resolved future 4)

[08:08:20.900] checking value #5:
[08:08:20.900] 'obj' is NULL
[08:08:20.900] signalConditionsASAP(NULL, pos=5) ...
[08:08:20.900] | nx: 6
[08:08:20.901] | relay: TRUE
[08:08:20.901] | stdout: TRUE
[08:08:20.901] | signal: TRUE
[08:08:20.901] | resignal: FALSE
[08:08:20.901] | force: TRUE
[08:08:20.901] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:20.901] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.901] | until=6
[08:08:20.901] | relaying element #6
[08:08:20.901] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:20.901] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.901] signalConditionsASAP(NULL, pos=5) ... done
[08:08:20.902] signalConditionsASAP(NULL, pos=5) ...
[08:08:20.902] | nx: 6
[08:08:20.902] | relay: TRUE
[08:08:20.902] | stdout: TRUE
[08:08:20.902] | signal: TRUE
[08:08:20.902] | resignal: FALSE
[08:08:20.902] | force: TRUE
[08:08:20.902] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:20.902] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.902] | until=6
[08:08:20.902] | relaying element #6
[08:08:20.903] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:20.903] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.903] signalConditionsASAP(NULL, pos=5) ... done
[08:08:20.903] length: 1 (resolved future 5)

[08:08:20.903] checking value #6:
[08:08:20.903] 'obj' is atomic
[08:08:20.903] signalConditionsASAP(numeric, pos=6) ...
[08:08:20.903] | nx: 6
[08:08:20.903] | relay: TRUE
[08:08:20.903] | stdout: TRUE
[08:08:20.903] | signal: TRUE
[08:08:20.904] | resignal: FALSE
[08:08:20.904] | force: TRUE
[08:08:20.904] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:20.904] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.904] | until=6
[08:08:20.904] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:20.904] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.904] signalConditionsASAP(numeric, pos=6) ... done
[08:08:20.904] length: 0 (resolved future 6)

[08:08:20.904] Relaying remaining futures ...
[08:08:20.905] | signalConditionsASAP(NULL, pos=0) ...
[08:08:20.905] | : nx: 6
[08:08:20.905] | : relay: TRUE
[08:08:20.905] | : stdout: TRUE
[08:08:20.905] | : signal: TRUE
[08:08:20.905] | : resignal: FALSE
[08:08:20.905] | : force: TRUE
[08:08:20.905] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:20.905] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
 - flush all
[08:08:20.905] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:20.906] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:20.906] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:20.906] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 1 6
 - attr(*, "dimnames")=List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
Dimensions: c(2, 3)
[08:08:20.909] future(..., label = NULL) ...
[08:08:20.909] | lazy: FALSE
[08:08:20.909] | stdout: TRUE
[08:08:20.909] | conditions: [n=1] ‘condition’
[08:08:20.909] | gc: FALSE
[08:08:20.909] | earlySignal: FALSE
[08:08:20.909] | getGlobalsAndPackages() ...
[08:08:20.909] | : Searching for globals ...
[08:08:20.910] | : . globals found: [0] 
[08:08:20.911] | : Searching for globals ... done
[08:08:20.911] | : globals: [0] <none>
[08:08:20.911] | : packages: [0] <none>
[08:08:20.911] | getGlobalsAndPackages() ... done
[08:08:20.911] | run() for ‘Future’ (<unnamed-5>) ...
[08:08:20.911] | : state: ‘created’
[08:08:20.911] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.911] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.912] | : Using SequentialFutureBackend ...
[08:08:20.912] | : . Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:08:20.912] | : . Launching futures ...
[08:08:20.912] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:20.912] | : . ' , getFutureData() ...
[08:08:20.912] | : . ' , ; getFutureCore() ...
[08:08:20.912] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:20.912] | : . ' , ; getFutureCore() ... done
[08:08:20.912] | : . ' , ; getFutureCapture() ...
[08:08:20.913] | : . ' , ; getFutureCapture() ... done
[08:08:20.913] | : . ' , ; getFutureContext() ...
[08:08:20.913] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.913] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:20.913] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.913] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:20.913] | : . ' , ; getFutureContext() ... done
[08:08:20.913] | : . ' , getFutureData() ... done
[08:08:20.914] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.915] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:20.915] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.916] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.916] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:20.916] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:20.916] | : . ' , ; ` | New stack:
[08:08:20.916] | : . ' , ; ` | List of 1
[08:08:20.916] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.916] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.916] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:20.916] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.916] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.916] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.916] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:20.916] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.919] | : . ' , ; ` | Old stack:
[08:08:20.919] | : . ' , ; ` | List of 1
[08:08:20.919] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.919] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.919] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:20.919] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.919] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.919] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.919] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:20.919] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:20.919] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.919] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.919] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.922] | : . ' , ; ` | Not identical
[08:08:20.922] | : . ' , ; ` | all.equal() for future ...
[08:08:20.922] | : . ' , ; ` | : List of 2
[08:08:20.922] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.922] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.922] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:20.922] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.922] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.922] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.922] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:20.922] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.922] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.922] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.922] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.922] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.922] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.922] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.922] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:20.922] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.922] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.927] | : . ' , ; ` | all.equal() for future ... done
[08:08:20.927] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:20.927] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:20.927] | : . ' , ; ` List of future strategies:
[08:08:20.927] | : . ' , ; ` 1. sequential:
[08:08:20.927] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:20.927] | : . ' , ; `    - tweaked: FALSE
[08:08:20.927] | : . ' , ; `    - call: plan(sequential)
[08:08:20.928] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:20.928] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.929] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.929] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.929] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:20.929] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:20.930] | : . ' , ; ` | : New stack:
[08:08:20.930] | : . ' , ; ` | : List of 1
[08:08:20.930] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.930] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.930] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.930] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.930] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.930] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.930] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.930] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:20.930] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.930] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.930] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.933] | : . ' , ; ` | : Old stack:
[08:08:20.934] | : . ' , ; ` | : List of 1
[08:08:20.934] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.934] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.934] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.934] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.934] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.934] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.934] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.934] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:20.934] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.934] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.934] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.937] | : . ' , ; ` | : Identical
[08:08:20.937] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:20.937] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:20.937] | : . ' , ; ` | List of future strategies:
[08:08:20.937] | : . ' , ; ` | 1. sequential:
[08:08:20.937] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:20.937] | : . ' , ; ` |    - tweaked: FALSE
[08:08:20.937] | : . ' , ; ` |    - call: plan(sequential)
[08:08:20.937] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:20.937] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.938] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.938] | : . ' , SequentialFuture started (and completed)
[08:08:20.938] | : . ' , signalConditions() ...
[08:08:20.938] | : . ' , ; include = ‘immediateCondition’
[08:08:20.938] | : . ' , ; exclude = 
[08:08:20.938] | : . ' , ; resignal = FALSE
[08:08:20.938] | : . ' , ; Number of conditions: 6
[08:08:20.938] | : . ' , ;  int 6
[08:08:20.939] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.939] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.939] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.939] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.939] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.939] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.939] | : . ' , signalConditions() ... done
[08:08:20.939] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:20.940] | : . Launching futures ... done
[08:08:20.940] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:20.940] | : Using SequentialFutureBackend ... done
[08:08:20.940] | run() for ‘Future’ (<unnamed-5>) ... done
[08:08:20.940] future(..., label = NULL) ... done
[08:08:20.940] future(..., label = NULL) ...
[08:08:20.940] | lazy: FALSE
[08:08:20.940] | stdout: TRUE
[08:08:20.940] | conditions: [n=1] ‘condition’
[08:08:20.940] | gc: FALSE
[08:08:20.941] | earlySignal: FALSE
[08:08:20.941] | getGlobalsAndPackages() ...
[08:08:20.941] | : Searching for globals ...
[08:08:20.942] | : . globals found: [0] 
[08:08:20.942] | : Searching for globals ... done
[08:08:20.942] | : globals: [0] <none>
[08:08:20.942] | : packages: [0] <none>
[08:08:20.942] | getGlobalsAndPackages() ... done
[08:08:20.942] | run() for ‘Future’ (<unnamed-6>) ...
[08:08:20.942] | : state: ‘created’
[08:08:20.943] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.943] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.943] | : Using SequentialFutureBackend ...
[08:08:20.943] | : . Number of futures since start: 5 (5 created, 5 launched, 5 finished)
[08:08:20.943] | : . Launching futures ...
[08:08:20.943] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:20.943] | : . ' , getFutureData() ...
[08:08:20.943] | : . ' , ; getFutureCore() ...
[08:08:20.943] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:20.944] | : . ' , ; getFutureCore() ... done
[08:08:20.944] | : . ' , ; getFutureCapture() ...
[08:08:20.944] | : . ' , ; getFutureCapture() ... done
[08:08:20.944] | : . ' , ; getFutureContext() ...
[08:08:20.944] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.944] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:20.944] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.944] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:20.944] | : . ' , ; getFutureContext() ... done
[08:08:20.944] | : . ' , getFutureData() ... done
[08:08:20.946] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.946] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:20.946] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.946] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.946] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:20.946] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:20.946] | : . ' , ; ` | New stack:
[08:08:20.947] | : . ' , ; ` | List of 1
[08:08:20.947] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.947] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.947] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:20.947] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.947] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.947] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.947] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:20.947] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.949] | : . ' , ; ` | Old stack:
[08:08:20.949] | : . ' , ; ` | List of 1
[08:08:20.949] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.949] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.949] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:20.949] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.949] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.949] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.949] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:20.949] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:20.949] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.949] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.949] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.953] | : . ' , ; ` | Not identical
[08:08:20.953] | : . ' , ; ` | all.equal() for future ...
[08:08:20.953] | : . ' , ; ` | : List of 2
[08:08:20.953] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.953] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.953] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:20.953] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.953] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.953] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.953] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:20.953] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.953] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.953] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.953] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.953] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.953] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.953] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.953] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:20.953] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.953] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.958] | : . ' , ; ` | all.equal() for future ... done
[08:08:20.958] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:20.958] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:20.958] | : . ' , ; ` List of future strategies:
[08:08:20.958] | : . ' , ; ` 1. sequential:
[08:08:20.958] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:20.958] | : . ' , ; `    - tweaked: FALSE
[08:08:20.958] | : . ' , ; `    - call: plan(sequential)
[08:08:20.959] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:20.959] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.960] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.960] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.961] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:20.961] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:20.961] | : . ' , ; ` | : New stack:
[08:08:20.961] | : . ' , ; ` | : List of 1
[08:08:20.961] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.961] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.961] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.961] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.961] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.961] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.961] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.961] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:20.961] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.961] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.961] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.964] | : . ' , ; ` | : Old stack:
[08:08:20.964] | : . ' , ; ` | : List of 1
[08:08:20.964] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.964] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.964] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.964] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.964] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.964] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.964] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.964] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:20.964] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.964] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.964] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.967] | : . ' , ; ` | : Identical
[08:08:20.967] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:20.967] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:20.967] | : . ' , ; ` | List of future strategies:
[08:08:20.967] | : . ' , ; ` | 1. sequential:
[08:08:20.967] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:20.967] | : . ' , ; ` |    - tweaked: FALSE
[08:08:20.967] | : . ' , ; ` |    - call: plan(sequential)
[08:08:20.968] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:20.968] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.968] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.968] | : . ' , SequentialFuture started (and completed)
[08:08:20.968] | : . ' , signalConditions() ...
[08:08:20.968] | : . ' , ; include = ‘immediateCondition’
[08:08:20.969] | : . ' , ; exclude = 
[08:08:20.969] | : . ' , ; resignal = FALSE
[08:08:20.969] | : . ' , ; Number of conditions: 6
[08:08:20.970] | : . ' , ;  int 6
[08:08:20.970] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.970] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.970] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.970] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.970] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.970] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.971] | : . ' , signalConditions() ... done
[08:08:20.971] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:20.971] | : . Launching futures ... done
[08:08:20.971] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:20.971] | : Using SequentialFutureBackend ... done
[08:08:20.971] | run() for ‘Future’ (<unnamed-6>) ... done
[08:08:20.971] future(..., label = NULL) ... done
List of 6
 $ a: num 1
 $ b:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x5643023f4418> 
 $ c:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x564301bd1a90> 
 $  : NULL
 $  : NULL
 $  : num 6
List of 6
 $ a: num 1
 $ b:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x5643023f4418> 
 $ c:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x564301bd1a90> 
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 2 3
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
[08:08:20.976] resolved() for matrix ...
[08:08:20.976] | Number of elements: 6
[08:08:20.976] | Number of futures: 6
[08:08:20.976] | resolved() for SequentialFuture (<unnamed-5>) ...
[08:08:20.976] | : state: ‘finished’
[08:08:20.976] | : run: TRUE
[08:08:20.977] | : result: ‘FutureResult’
[08:08:20.977] | resolved() for SequentialFuture (<unnamed-5>) ... done
[08:08:20.977] | resolved() for SequentialFuture (<unnamed-6>) ...
[08:08:20.977] | : state: ‘finished’
[08:08:20.977] | : run: TRUE
[08:08:20.977] | : result: ‘FutureResult’
[08:08:20.977] | resolved() for SequentialFuture (<unnamed-6>) ... done
[08:08:20.977] resolved() for matrix ... done
 logi [1:2, 1:3] TRUE TRUE TRUE TRUE TRUE TRUE
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
 - attr(*, "names")= chr [1:6] "a" "b" "c" "" ...
[08:08:20.979] value() for matrix ...
[08:08:20.979] | recursive: 0
[08:08:20.979] | reduce: FALSE
[08:08:20.979] | length: 6
[08:08:20.979] | elements: ‘a’, ‘b’, ‘c’, ‘’, ‘’, ‘’
[08:08:20.979] | Number of remaining objects: 6
[08:08:20.979] | checking value #1:
[08:08:20.979] | 'obj' is atomic
[08:08:20.980] | signalConditionsASAP(numeric, pos=1) ...
[08:08:20.980] | : nx: 6
[08:08:20.980] | : relay: TRUE
[08:08:20.980] | : stdout: TRUE
[08:08:20.980] | : signal: TRUE
[08:08:20.980] | : resignal: FALSE
[08:08:20.980] | : force: TRUE
[08:08:20.980] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:20.980] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:20.980] | : until=2
[08:08:20.980] | : relaying element #2
[08:08:20.981] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:20.981] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:20.981] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:20.981] | length: 5 (resolved future 1)
[08:08:20.981] value() for matrix ... done
[08:08:20.981] checking value #2:
[08:08:20.981] 'obj' is SequentialFuture
[08:08:20.981] resolved() for SequentialFuture (<unnamed-5>) ...
[08:08:20.981] | state: ‘finished’
[08:08:20.981] | run: TRUE
[08:08:20.982] | result: ‘FutureResult’
[08:08:20.982] resolved() for SequentialFuture (<unnamed-5>) ... done
[08:08:20.982] SequentialFuture #2
[08:08:20.982] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:20.982] | nx: 6
[08:08:20.982] | relay: TRUE
[08:08:20.982] | stdout: TRUE
[08:08:20.982] | signal: TRUE
[08:08:20.982] | resignal: FALSE
[08:08:20.982] | force: TRUE
[08:08:20.982] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:20.982] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:20.983] | until=2
[08:08:20.983] | relaying element #2
[08:08:20.983] | value() for SequentialFuture (<unnamed-5>) ...
[08:08:20.983] | : signalConditions() ...
[08:08:20.983] | : . include = ‘immediateCondition’
[08:08:20.983] | : . exclude = 
[08:08:20.983] | : . resignal = FALSE
[08:08:20.983] | : . Number of conditions: 6
[08:08:20.983] | : .  int 6
[08:08:20.984] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.984] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.984] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.984] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.984] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.984] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.984] | : signalConditions() ... done
[08:08:20.984] | : relay stdout ...
[08:08:20.985] | : relay stdout ... done
[08:08:20.985] | : check for misuse ...
[08:08:20.985] | : check for misuse ... done
[08:08:20.985] | value() for SequentialFuture (<unnamed-5>) ... done
[08:08:20.985] | signalConditions() ...
[08:08:20.985] | : include = ‘immediateCondition’
[08:08:20.985] | : exclude = 
[08:08:20.985] | : resignal = FALSE
[08:08:20.985] | : Number of conditions: 6
[08:08:20.985] | :  int 6
[08:08:20.986] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.986] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.986] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.986] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.986] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.986] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.986] | signalConditions() ... done
[08:08:20.987] | signalConditions() ...
[08:08:20.987] | : include = ‘condition’
[08:08:20.987] | : exclude = ‘error’, ‘immediateCondition’
[08:08:21.012] | : resignal = TRUE
[08:08:21.013] | : Number of conditions: 6
[08:08:21.013] | :  int 6
[08:08:21.013] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.013] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.913] | : . ' , attachPackages() ...
[08:08:21.013] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.014] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.914] | : . ' , ; packages: [n=1] ‘future’
[08:08:21.014] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.014] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.914] | : . ' , attachPackages() ... done
[08:08:21.014] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.014] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.914] | : . ' , attachPackages() ...
[08:08:21.014] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.014] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.914] | : . ' , ; packages: [n=0] 
[08:08:21.015] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.015] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.914] | : . ' , attachPackages() ... done
[08:08:21.015] | signalConditions() ... done
[08:08:21.015] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:21.015] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:21.015] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:21.015] value(<SequentialFuture>, ...) ...
[08:08:21.015] value(<SequentialFuture>, ...) ... done
[08:08:21.015] value() for SequentialFuture (<unnamed-5>) ...
[08:08:21.016] | signalConditions() ...
[08:08:21.016] | : include = ‘immediateCondition’
[08:08:21.016] | : exclude = 
[08:08:21.016] | : resignal = FALSE
[08:08:21.016] | : Number of conditions: 6
[08:08:21.016] | :  int 6
[08:08:21.017] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.017] | : already signaled, skipping
[08:08:21.017] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.017] | : already signaled, skipping
[08:08:21.017] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.017] | : already signaled, skipping
[08:08:21.017] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.017] | : already signaled, skipping
[08:08:21.017] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.017] | : already signaled, skipping
[08:08:21.018] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.018] | : already signaled, skipping
[08:08:21.018] | signalConditions() ... done
[08:08:21.018] | check for misuse ...
[08:08:21.018] | check for misuse ... done
[08:08:21.018] value() for SequentialFuture (<unnamed-5>) ... done
[08:08:21.018] value: <numeric>
[08:08:21.018] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:21.018] | nx: 6
[08:08:21.018] | relay: TRUE
[08:08:21.019] | stdout: TRUE
[08:08:21.019] | signal: TRUE
[08:08:21.019] | resignal: FALSE
[08:08:21.019] | force: TRUE
[08:08:21.019] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:21.019] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:21.019] | until=3
[08:08:21.019] | relaying element #3
[08:08:21.019] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:21.019] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:21.019] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:21.020] resolve() for SequentialFuture ...
[08:08:21.020] resolve() for SequentialFuture ... done
[08:08:21.020] length: 4 (resolved future 2)

[08:08:21.020] checking value #3:
[08:08:21.020] 'obj' is SequentialFuture
[08:08:21.020] resolved() for SequentialFuture (<unnamed-6>) ...
[08:08:21.020] | state: ‘finished’
[08:08:21.020] | run: TRUE
[08:08:21.020] | result: ‘FutureResult’
[08:08:21.021] resolved() for SequentialFuture (<unnamed-6>) ... done
[08:08:21.021] SequentialFuture #3
[08:08:21.021] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:21.021] | nx: 6
[08:08:21.021] | relay: TRUE
[08:08:21.021] | stdout: TRUE
[08:08:21.021] | signal: TRUE
[08:08:21.021] | resignal: FALSE
[08:08:21.021] | force: TRUE
[08:08:21.021] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:21.021] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:21.022] | until=3
[08:08:21.022] | relaying element #3
[08:08:21.022] | value() for SequentialFuture (<unnamed-6>) ...
[08:08:21.022] | : signalConditions() ...
[08:08:21.022] | : . include = ‘immediateCondition’
[08:08:21.022] | : . exclude = 
[08:08:21.022] | : . resignal = FALSE
[08:08:21.022] | : . Number of conditions: 6
[08:08:21.022] | : .  int 6
[08:08:21.023] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.023] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.023] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.023] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.023] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.023] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.023] | : signalConditions() ... done
[08:08:21.024] | : relay stdout ...
[08:08:21.024] | : relay stdout ... done
[08:08:21.024] | : check for misuse ...
[08:08:21.024] | : check for misuse ... done
[08:08:21.024] | value() for SequentialFuture (<unnamed-6>) ... done
[08:08:21.024] | signalConditions() ...
[08:08:21.024] | : include = ‘immediateCondition’
[08:08:21.024] | : exclude = 
[08:08:21.024] | : resignal = FALSE
[08:08:21.024] | : Number of conditions: 6
[08:08:21.025] | :  int 6
[08:08:21.025] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.025] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.025] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.025] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.025] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.025] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.026] | signalConditions() ... done
[08:08:21.026] | signalConditions() ...
[08:08:21.026] | : include = ‘condition’
[08:08:21.026] | : exclude = ‘error’, ‘immediateCondition’
[08:08:21.026] | : resignal = TRUE
[08:08:21.026] | : Number of conditions: 6
[08:08:21.026] | :  int 6
[08:08:21.027] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.027] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.945] | : . ' , attachPackages() ...
[08:08:21.027] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.027] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.945] | : . ' , ; packages: [n=1] ‘future’
[08:08:21.027] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.027] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.945] | : . ' , attachPackages() ... done
[08:08:21.027] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.027] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.945] | : . ' , attachPackages() ...
[08:08:21.028] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.028] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.945] | : . ' , ; packages: [n=0] 
[08:08:21.028] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.028] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:20.945] | : . ' , attachPackages() ... done
[08:08:21.028] | signalConditions() ... done
[08:08:21.028] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.028] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.028] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:21.028] value(<SequentialFuture>, ...) ...
[08:08:21.029] value(<SequentialFuture>, ...) ... done
[08:08:21.029] value() for SequentialFuture (<unnamed-6>) ...
[08:08:21.029] | signalConditions() ...
[08:08:21.029] | : include = ‘immediateCondition’
[08:08:21.029] | : exclude = 
[08:08:21.029] | : resignal = FALSE
[08:08:21.029] | : Number of conditions: 6
[08:08:21.029] | :  int 6
[08:08:21.030] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.030] | : already signaled, skipping
[08:08:21.030] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.030] | : already signaled, skipping
[08:08:21.030] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.030] | : already signaled, skipping
[08:08:21.030] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.030] | : already signaled, skipping
[08:08:21.030] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.031] | : already signaled, skipping
[08:08:21.031] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.031] | : already signaled, skipping
[08:08:21.031] | signalConditions() ... done
[08:08:21.031] | check for misuse ...
[08:08:21.031] | check for misuse ... done
[08:08:21.031] value() for SequentialFuture (<unnamed-6>) ... done
[08:08:21.031] value: <NULL>
[08:08:21.031] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:21.031] | nx: 6
[08:08:21.032] | relay: TRUE
[08:08:21.032] | stdout: TRUE
[08:08:21.032] | signal: TRUE
[08:08:21.032] | resignal: FALSE
[08:08:21.032] | force: TRUE
[08:08:21.032] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.032] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.032] | until=4
[08:08:21.032] | relaying element #4
[08:08:21.032] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.032] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.033] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:21.033] resolve() for SequentialFuture ...
[08:08:21.033] resolve() for SequentialFuture ... done
[08:08:21.033] length: 3 (resolved future 3)

[08:08:21.033] checking value #4:
[08:08:21.033] 'obj' is NULL
[08:08:21.033] signalConditionsASAP(NULL, pos=4) ...
[08:08:21.034] | nx: 6
[08:08:21.034] | relay: TRUE
[08:08:21.034] | stdout: TRUE
[08:08:21.034] | signal: TRUE
[08:08:21.034] | resignal: FALSE
[08:08:21.034] | force: TRUE
[08:08:21.035] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.035] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.035] | until=5
[08:08:21.035] | relaying element #5
[08:08:21.035] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:21.035] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.035] signalConditionsASAP(NULL, pos=4) ... done
[08:08:21.035] signalConditionsASAP(NULL, pos=4) ...
[08:08:21.035] | nx: 6
[08:08:21.035] | relay: TRUE
[08:08:21.036] | stdout: TRUE
[08:08:21.036] | signal: TRUE
[08:08:21.036] | resignal: FALSE
[08:08:21.036] | force: TRUE
[08:08:21.036] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:21.036] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.036] | until=5
[08:08:21.036] | relaying element #5
[08:08:21.036] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:21.036] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.036] signalConditionsASAP(NULL, pos=4) ... done
[08:08:21.037] length: 2 (resolved future 4)

[08:08:21.037] checking value #5:
[08:08:21.037] 'obj' is NULL
[08:08:21.037] signalConditionsASAP(NULL, pos=5) ...
[08:08:21.037] | nx: 6
[08:08:21.037] | relay: TRUE
[08:08:21.037] | stdout: TRUE
[08:08:21.037] | signal: TRUE
[08:08:21.037] | resignal: FALSE
[08:08:21.037] | force: TRUE
[08:08:21.037] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:21.038] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.038] | until=6
[08:08:21.038] | relaying element #6
[08:08:21.038] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:21.038] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.038] signalConditionsASAP(NULL, pos=5) ... done
[08:08:21.038] signalConditionsASAP(NULL, pos=5) ...
[08:08:21.038] | nx: 6
[08:08:21.038] | relay: TRUE
[08:08:21.038] | stdout: TRUE
[08:08:21.038] | signal: TRUE
[08:08:21.039] | resignal: FALSE
[08:08:21.039] | force: TRUE
[08:08:21.039] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:21.039] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.039] | until=6
[08:08:21.039] | relaying element #6
[08:08:21.039] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:21.039] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.039] signalConditionsASAP(NULL, pos=5) ... done
[08:08:21.039] length: 1 (resolved future 5)

[08:08:21.040] checking value #6:
[08:08:21.040] 'obj' is atomic
[08:08:21.040] signalConditionsASAP(numeric, pos=6) ...
[08:08:21.040] | nx: 6
[08:08:21.040] | relay: TRUE
[08:08:21.040] | stdout: TRUE
[08:08:21.040] | signal: TRUE
[08:08:21.040] | resignal: FALSE
[08:08:21.040] | force: TRUE
[08:08:21.040] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:21.040] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.040] | until=6
[08:08:21.041] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:21.041] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.041] signalConditionsASAP(numeric, pos=6) ... done
[08:08:21.041] length: 0 (resolved future 6)

[08:08:21.041] Relaying remaining futures ...
[08:08:21.041] | signalConditionsASAP(NULL, pos=0) ...
[08:08:21.041] | : nx: 6
[08:08:21.041] | : relay: TRUE
[08:08:21.041] | : stdout: TRUE
[08:08:21.041] | : signal: TRUE
[08:08:21.042] | : resignal: FALSE
[08:08:21.042] | : force: TRUE
[08:08:21.042] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:21.042] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
 - flush all
[08:08:21.042] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:21.042] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.042] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:21.042] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 2 3
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
Dimensions: c(2, 3, 1)
[08:08:21.045] future(..., label = NULL) ...
[08:08:21.045] | lazy: FALSE
[08:08:21.046] | stdout: TRUE
[08:08:21.046] | conditions: [n=1] ‘condition’
[08:08:21.046] | gc: FALSE
[08:08:21.046] | earlySignal: FALSE
[08:08:21.046] | getGlobalsAndPackages() ...
[08:08:21.046] | : Searching for globals ...
[08:08:21.047] | : . globals found: [0] 
[08:08:21.047] | : Searching for globals ... done
[08:08:21.047] | : globals: [0] <none>
[08:08:21.048] | : packages: [0] <none>
[08:08:21.048] | getGlobalsAndPackages() ... done
[08:08:21.048] | run() for ‘Future’ (<unnamed-7>) ...
[08:08:21.048] | : state: ‘created’
[08:08:21.048] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.048] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.048] | : Using SequentialFutureBackend ...
[08:08:21.048] | : . Number of futures since start: 6 (6 created, 6 launched, 6 finished)
[08:08:21.049] | : . Launching futures ...
[08:08:21.049] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:21.049] | : . ' , getFutureData() ...
[08:08:21.049] | : . ' , ; getFutureCore() ...
[08:08:21.049] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:21.049] | : . ' , ; getFutureCore() ... done
[08:08:21.049] | : . ' , ; getFutureCapture() ...
[08:08:21.049] | : . ' , ; getFutureCapture() ... done
[08:08:21.049] | : . ' , ; getFutureContext() ...
[08:08:21.050] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.050] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:21.050] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.050] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:21.050] | : . ' , ; getFutureContext() ... done
[08:08:21.050] | : . ' , getFutureData() ... done
[08:08:21.051] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.051] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:21.052] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.052] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.052] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.052] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:21.052] | : . ' , ; ` | New stack:
[08:08:21.052] | : . ' , ; ` | List of 1
[08:08:21.052] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.052] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.052] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:21.052] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.052] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.052] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.052] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.052] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.056] | : . ' , ; ` | Old stack:
[08:08:21.056] | : . ' , ; ` | List of 1
[08:08:21.056] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.056] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.056] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:21.056] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.056] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.056] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.056] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:21.056] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.056] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.056] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.056] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.059] | : . ' , ; ` | Not identical
[08:08:21.059] | : . ' , ; ` | all.equal() for future ...
[08:08:21.059] | : . ' , ; ` | : List of 2
[08:08:21.059] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.059] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.059] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:21.059] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.059] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.059] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.059] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.059] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.059] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.059] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.059] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.059] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.059] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.059] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.059] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.059] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.059] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.064] | : . ' , ; ` | all.equal() for future ... done
[08:08:21.064] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:21.064] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.064] | : . ' , ; ` List of future strategies:
[08:08:21.064] | : . ' , ; ` 1. sequential:
[08:08:21.064] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.064] | : . ' , ; `    - tweaked: FALSE
[08:08:21.064] | : . ' , ; `    - call: plan(sequential)
[08:08:21.065] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.065] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.066] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.067] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.067] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.067] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:21.067] | : . ' , ; ` | : New stack:
[08:08:21.067] | : . ' , ; ` | : List of 1
[08:08:21.067] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.067] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.067] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.067] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.067] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.067] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.067] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.067] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.067] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.067] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.067] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.070] | : . ' , ; ` | : Old stack:
[08:08:21.070] | : . ' , ; ` | : List of 1
[08:08:21.070] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.070] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.070] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.070] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.070] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.070] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.070] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.070] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.070] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.070] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.070] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.073] | : . ' , ; ` | : Identical
[08:08:21.073] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:21.073] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.074] | : . ' , ; ` | List of future strategies:
[08:08:21.074] | : . ' , ; ` | 1. sequential:
[08:08:21.074] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.074] | : . ' , ; ` |    - tweaked: FALSE
[08:08:21.074] | : . ' , ; ` |    - call: plan(sequential)
[08:08:21.075] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.075] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.075] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.075] | : . ' , SequentialFuture started (and completed)
[08:08:21.075] | : . ' , signalConditions() ...
[08:08:21.075] | : . ' , ; include = ‘immediateCondition’
[08:08:21.075] | : . ' , ; exclude = 
[08:08:21.076] | : . ' , ; resignal = FALSE
[08:08:21.076] | : . ' , ; Number of conditions: 6
[08:08:21.076] | : . ' , ;  int 6
[08:08:21.076] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.076] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.076] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.077] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.077] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.077] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.077] | : . ' , signalConditions() ... done
[08:08:21.077] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:21.077] | : . Launching futures ... done
[08:08:21.077] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:21.077] | : Using SequentialFutureBackend ... done
[08:08:21.077] | run() for ‘Future’ (<unnamed-7>) ... done
[08:08:21.077] future(..., label = NULL) ... done
[08:08:21.078] future(..., label = NULL) ...
[08:08:21.078] | lazy: FALSE
[08:08:21.078] | stdout: TRUE
[08:08:21.078] | conditions: [n=1] ‘condition’
[08:08:21.078] | gc: FALSE
[08:08:21.078] | earlySignal: FALSE
[08:08:21.078] | getGlobalsAndPackages() ...
[08:08:21.078] | : Searching for globals ...
[08:08:21.079] | : . globals found: [0] 
[08:08:21.079] | : Searching for globals ... done
[08:08:21.080] | : globals: [0] <none>
[08:08:21.080] | : packages: [0] <none>
[08:08:21.080] | getGlobalsAndPackages() ... done
[08:08:21.080] | run() for ‘Future’ (<unnamed-8>) ...
[08:08:21.080] | : state: ‘created’
[08:08:21.080] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.080] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.080] | : Using SequentialFutureBackend ...
[08:08:21.080] | : . Number of futures since start: 7 (7 created, 7 launched, 7 finished)
[08:08:21.081] | : . Launching futures ...
[08:08:21.081] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:21.081] | : . ' , getFutureData() ...
[08:08:21.081] | : . ' , ; getFutureCore() ...
[08:08:21.081] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:21.081] | : . ' , ; getFutureCore() ... done
[08:08:21.081] | : . ' , ; getFutureCapture() ...
[08:08:21.081] | : . ' , ; getFutureCapture() ... done
[08:08:21.081] | : . ' , ; getFutureContext() ...
[08:08:21.081] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.082] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:21.082] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.082] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:21.082] | : . ' , ; getFutureContext() ... done
[08:08:21.082] | : . ' , getFutureData() ... done
[08:08:21.083] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.083] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:21.083] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.084] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.084] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.084] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:21.084] | : . ' , ; ` | New stack:
[08:08:21.084] | : . ' , ; ` | List of 1
[08:08:21.084] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.084] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.084] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:21.084] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.084] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.084] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.084] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.084] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.087] | : . ' , ; ` | Old stack:
[08:08:21.087] | : . ' , ; ` | List of 1
[08:08:21.087] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.087] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.087] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:21.087] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.087] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.087] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.087] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:21.087] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.087] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.087] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.087] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.090] | : . ' , ; ` | Not identical
[08:08:21.090] | : . ' , ; ` | all.equal() for future ...
[08:08:21.090] | : . ' , ; ` | : List of 2
[08:08:21.090] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.090] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.090] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:21.090] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.090] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.090] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.090] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.090] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.090] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.090] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.090] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.090] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.090] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.090] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.090] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.090] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.090] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.096] | : . ' , ; ` | all.equal() for future ... done
[08:08:21.096] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:21.096] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.096] | : . ' , ; ` List of future strategies:
[08:08:21.096] | : . ' , ; ` 1. sequential:
[08:08:21.096] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.096] | : . ' , ; `    - tweaked: FALSE
[08:08:21.096] | : . ' , ; `    - call: plan(sequential)
[08:08:21.096] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.097] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.098] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.098] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.098] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.098] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:21.098] | : . ' , ; ` | : New stack:
[08:08:21.099] | : . ' , ; ` | : List of 1
[08:08:21.099] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.099] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.099] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.099] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.099] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.099] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.099] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.099] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.099] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.099] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.099] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.102] | : . ' , ; ` | : Old stack:
[08:08:21.102] | : . ' , ; ` | : List of 1
[08:08:21.102] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.102] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.102] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.102] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.102] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.102] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.102] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.102] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.102] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.102] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.102] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.105] | : . ' , ; ` | : Identical
[08:08:21.105] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:21.105] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.105] | : . ' , ; ` | List of future strategies:
[08:08:21.105] | : . ' , ; ` | 1. sequential:
[08:08:21.105] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.105] | : . ' , ; ` |    - tweaked: FALSE
[08:08:21.105] | : . ' , ; ` |    - call: plan(sequential)
[08:08:21.106] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.106] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.106] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.106] | : . ' , SequentialFuture started (and completed)
[08:08:21.106] | : . ' , signalConditions() ...
[08:08:21.106] | : . ' , ; include = ‘immediateCondition’
[08:08:21.106] | : . ' , ; exclude = 
[08:08:21.106] | : . ' , ; resignal = FALSE
[08:08:21.106] | : . ' , ; Number of conditions: 6
[08:08:21.107] | : . ' , ;  int 6
[08:08:21.107] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.107] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.107] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.107] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.107] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.108] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.108] | : . ' , signalConditions() ... done
[08:08:21.108] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:21.108] | : . Launching futures ... done
[08:08:21.108] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:21.108] | : Using SequentialFutureBackend ... done
[08:08:21.108] | run() for ‘Future’ (<unnamed-8>) ... done
[08:08:21.108] future(..., label = NULL) ... done
List of 6
 $ a: num 1
 $ b:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x5643021b9960> 
 $ c:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x5642ffe6d7a0> 
 $  : NULL
 $  : NULL
 $  : num 6
List of 6
 $ a: num 1
 $ b:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x5643021b9960> 
 $ c:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x5642ffe6d7a0> 
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:3] 2 3 1
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
[08:08:21.113] resolved() for array ...
[08:08:21.113] | Number of elements: 6
[08:08:21.113] | Number of futures: 6
[08:08:21.113] | resolved() for SequentialFuture (<unnamed-7>) ...
[08:08:21.114] | : state: ‘finished’
[08:08:21.114] | : run: TRUE
[08:08:21.114] | : result: ‘FutureResult’
[08:08:21.114] | resolved() for SequentialFuture (<unnamed-7>) ... done
[08:08:21.115] | resolved() for SequentialFuture (<unnamed-8>) ...
[08:08:21.115] | : state: ‘finished’
[08:08:21.115] | : run: TRUE
[08:08:21.115] | : result: ‘FutureResult’
[08:08:21.115] | resolved() for SequentialFuture (<unnamed-8>) ... done
[08:08:21.115] resolved() for array ... done
 logi [1:2, 1:3, 1] TRUE TRUE TRUE TRUE TRUE TRUE
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
 - attr(*, "names")= chr [1:6] "a" "b" "c" "" ...
[08:08:21.117] value() for array ...
[08:08:21.117] | recursive: 0
[08:08:21.117] | reduce: FALSE
[08:08:21.117] | length: 6
[08:08:21.117] | elements: ‘a’, ‘b’, ‘c’, ‘’, ‘’, ‘’
[08:08:21.118] | Number of remaining objects: 6
[08:08:21.118] | checking value #1:
[08:08:21.118] | 'obj' is atomic
[08:08:21.118] | signalConditionsASAP(numeric, pos=1) ...
[08:08:21.118] | : nx: 6
[08:08:21.118] | : relay: TRUE
[08:08:21.118] | : stdout: TRUE
[08:08:21.118] | : signal: TRUE
[08:08:21.118] | : resignal: FALSE
[08:08:21.118] | : force: TRUE
[08:08:21.118] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:21.118] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:21.119] | : until=2
[08:08:21.119] | : relaying element #2
[08:08:21.119] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:21.119] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:21.119] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:21.119] | length: 5 (resolved future 1)
[08:08:21.119] value() for array ... done
[08:08:21.119] checking value #2:
[08:08:21.119] 'obj' is SequentialFuture
[08:08:21.119] resolved() for SequentialFuture (<unnamed-7>) ...
[08:08:21.120] | state: ‘finished’
[08:08:21.120] | run: TRUE
[08:08:21.120] | result: ‘FutureResult’
[08:08:21.120] resolved() for SequentialFuture (<unnamed-7>) ... done
[08:08:21.120] SequentialFuture #2
[08:08:21.120] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:21.120] | nx: 6
[08:08:21.120] | relay: TRUE
[08:08:21.120] | stdout: TRUE
[08:08:21.120] | signal: TRUE
[08:08:21.120] | resignal: FALSE
[08:08:21.121] | force: TRUE
[08:08:21.121] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:21.121] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:21.121] | until=2
[08:08:21.121] | relaying element #2
[08:08:21.121] | value() for SequentialFuture (<unnamed-7>) ...
[08:08:21.121] | : signalConditions() ...
[08:08:21.121] | : . include = ‘immediateCondition’
[08:08:21.121] | : . exclude = 
[08:08:21.121] | : . resignal = FALSE
[08:08:21.121] | : . Number of conditions: 6
[08:08:21.122] | : .  int 6
[08:08:21.122] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.122] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.122] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.122] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.122] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.122] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.123] | : signalConditions() ... done
[08:08:21.123] | : relay stdout ...
[08:08:21.123] | : relay stdout ... done
[08:08:21.123] | : check for misuse ...
[08:08:21.123] | : check for misuse ... done
[08:08:21.123] | value() for SequentialFuture (<unnamed-7>) ... done
[08:08:21.123] | signalConditions() ...
[08:08:21.123] | : include = ‘immediateCondition’
[08:08:21.123] | : exclude = 
[08:08:21.123] | : resignal = FALSE
[08:08:21.124] | : Number of conditions: 6
[08:08:21.124] | :  int 6
[08:08:21.124] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.124] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.124] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.124] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.124] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.125] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.125] | signalConditions() ... done
[08:08:21.125] | signalConditions() ...
[08:08:21.125] | : include = ‘condition’
[08:08:21.125] | : exclude = ‘error’, ‘immediateCondition’
[08:08:21.125] | : resignal = TRUE
[08:08:21.125] | : Number of conditions: 6
[08:08:21.125] | :  int 6
[08:08:21.126] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.126] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.050] | : . ' , attachPackages() ...
[08:08:21.126] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.126] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.050] | : . ' , ; packages: [n=1] ‘future’
[08:08:21.126] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.126] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.051] | : . ' , attachPackages() ... done
[08:08:21.126] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.126] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.051] | : . ' , attachPackages() ...
[08:08:21.127] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.127] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.051] | : . ' , ; packages: [n=0] 
[08:08:21.127] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.127] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.051] | : . ' , attachPackages() ... done
[08:08:21.127] | signalConditions() ... done
[08:08:21.127] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:21.127] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:21.127] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:21.127] value(<SequentialFuture>, ...) ...
[08:08:21.128] value(<SequentialFuture>, ...) ... done
[08:08:21.128] value() for SequentialFuture (<unnamed-7>) ...
[08:08:21.128] | signalConditions() ...
[08:08:21.128] | : include = ‘immediateCondition’
[08:08:21.128] | : exclude = 
[08:08:21.128] | : resignal = FALSE
[08:08:21.128] | : Number of conditions: 6
[08:08:21.128] | :  int 6
[08:08:21.129] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.129] | : already signaled, skipping
[08:08:21.129] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.129] | : already signaled, skipping
[08:08:21.129] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.129] | : already signaled, skipping
[08:08:21.129] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.129] | : already signaled, skipping
[08:08:21.129] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.129] | : already signaled, skipping
[08:08:21.130] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.130] | : already signaled, skipping
[08:08:21.130] | signalConditions() ... done
[08:08:21.130] | check for misuse ...
[08:08:21.130] | check for misuse ... done
[08:08:21.130] value() for SequentialFuture (<unnamed-7>) ... done
[08:08:21.130] value: <numeric>
[08:08:21.130] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:21.130] | nx: 6
[08:08:21.130] | relay: TRUE
[08:08:21.130] | stdout: TRUE
[08:08:21.131] | signal: TRUE
[08:08:21.131] | resignal: FALSE
[08:08:21.131] | force: TRUE
[08:08:21.131] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:21.131] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:21.131] | until=3
[08:08:21.131] | relaying element #3
[08:08:21.131] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:21.131] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:21.131] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:21.131] resolve() for SequentialFuture ...
[08:08:21.132] resolve() for SequentialFuture ... done
[08:08:21.132] length: 4 (resolved future 2)

[08:08:21.132] checking value #3:
[08:08:21.132] 'obj' is SequentialFuture
[08:08:21.132] resolved() for SequentialFuture (<unnamed-8>) ...
[08:08:21.132] | state: ‘finished’
[08:08:21.132] | run: TRUE
[08:08:21.132] | result: ‘FutureResult’
[08:08:21.132] resolved() for SequentialFuture (<unnamed-8>) ... done
[08:08:21.132] SequentialFuture #3
[08:08:21.133] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:21.133] | nx: 6
[08:08:21.133] | relay: TRUE
[08:08:21.133] | stdout: TRUE
[08:08:21.133] | signal: TRUE
[08:08:21.133] | resignal: FALSE
[08:08:21.133] | force: TRUE
[08:08:21.133] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:21.133] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:21.133] | until=3
[08:08:21.133] | relaying element #3
[08:08:21.133] | value() for SequentialFuture (<unnamed-8>) ...
[08:08:21.134] | : signalConditions() ...
[08:08:21.134] | : . include = ‘immediateCondition’
[08:08:21.134] | : . exclude = 
[08:08:21.135] | : . resignal = FALSE
[08:08:21.135] | : . Number of conditions: 6
[08:08:21.135] | : .  int 6
[08:08:21.135] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.135] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.135] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.135] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.136] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.136] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.136] | : signalConditions() ... done
[08:08:21.136] | : relay stdout ...
[08:08:21.136] | : relay stdout ... done
[08:08:21.136] | : check for misuse ...
[08:08:21.136] | : check for misuse ... done
[08:08:21.136] | value() for SequentialFuture (<unnamed-8>) ... done
[08:08:21.136] | signalConditions() ...
[08:08:21.137] | : include = ‘immediateCondition’
[08:08:21.137] | : exclude = 
[08:08:21.137] | : resignal = FALSE
[08:08:21.137] | : Number of conditions: 6
[08:08:21.137] | :  int 6
[08:08:21.137] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.137] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.138] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.138] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.138] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.138] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.138] | signalConditions() ... done
[08:08:21.138] | signalConditions() ...
[08:08:21.138] | : include = ‘condition’
[08:08:21.138] | : exclude = ‘error’, ‘immediateCondition’
[08:08:21.138] | : resignal = TRUE
[08:08:21.138] | : Number of conditions: 6
[08:08:21.138] | :  int 6
[08:08:21.139] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.139] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.082] | : . ' , attachPackages() ...
[08:08:21.139] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.139] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.082] | : . ' , ; packages: [n=1] ‘future’
[08:08:21.139] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.139] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.083] | : . ' , attachPackages() ... done
[08:08:21.140] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.140] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.083] | : . ' , attachPackages() ...
[08:08:21.140] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.140] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.083] | : . ' , ; packages: [n=0] 
[08:08:21.140] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.140] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.083] | : . ' , attachPackages() ... done
[08:08:21.140] | signalConditions() ... done
[08:08:21.140] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.141] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.141] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:21.141] value(<SequentialFuture>, ...) ...
[08:08:21.141] value(<SequentialFuture>, ...) ... done
[08:08:21.141] value() for SequentialFuture (<unnamed-8>) ...
[08:08:21.141] | signalConditions() ...
[08:08:21.141] | : include = ‘immediateCondition’
[08:08:21.141] | : exclude = 
[08:08:21.141] | : resignal = FALSE
[08:08:21.141] | : Number of conditions: 6
[08:08:21.141] | :  int 6
[08:08:21.142] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.142] | : already signaled, skipping
[08:08:21.142] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.142] | : already signaled, skipping
[08:08:21.142] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.142] | : already signaled, skipping
[08:08:21.142] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.143] | : already signaled, skipping
[08:08:21.143] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.143] | : already signaled, skipping
[08:08:21.143] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.143] | : already signaled, skipping
[08:08:21.143] | signalConditions() ... done
[08:08:21.143] | check for misuse ...
[08:08:21.143] | check for misuse ... done
[08:08:21.143] value() for SequentialFuture (<unnamed-8>) ... done
[08:08:21.143] value: <NULL>
[08:08:21.143] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:21.144] | nx: 6
[08:08:21.144] | relay: TRUE
[08:08:21.144] | stdout: TRUE
[08:08:21.144] | signal: TRUE
[08:08:21.144] | resignal: FALSE
[08:08:21.144] | force: TRUE
[08:08:21.144] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.144] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.144] | until=4
[08:08:21.144] | relaying element #4
[08:08:21.144] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.145] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.145] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:21.145] resolve() for SequentialFuture ...
[08:08:21.145] resolve() for SequentialFuture ... done
[08:08:21.145] length: 3 (resolved future 3)

[08:08:21.145] checking value #4:
[08:08:21.145] 'obj' is NULL
[08:08:21.145] signalConditionsASAP(NULL, pos=4) ...
[08:08:21.145] | nx: 6
[08:08:21.146] | relay: TRUE
[08:08:21.146] | stdout: TRUE
[08:08:21.146] | signal: TRUE
[08:08:21.146] | resignal: FALSE
[08:08:21.146] | force: TRUE
[08:08:21.146] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.146] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.146] | until=5
[08:08:21.146] | relaying element #5
[08:08:21.146] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:21.146] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.146] signalConditionsASAP(NULL, pos=4) ... done
[08:08:21.147] signalConditionsASAP(NULL, pos=4) ...
[08:08:21.147] | nx: 6
[08:08:21.147] | relay: TRUE
[08:08:21.147] | stdout: TRUE
[08:08:21.147] | signal: TRUE
[08:08:21.147] | resignal: FALSE
[08:08:21.147] | force: TRUE
[08:08:21.147] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:21.147] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.147] | until=5
[08:08:21.147] | relaying element #5
[08:08:21.148] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:21.148] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.148] signalConditionsASAP(NULL, pos=4) ... done
[08:08:21.148] length: 2 (resolved future 4)

[08:08:21.148] checking value #5:
[08:08:21.148] 'obj' is NULL
[08:08:21.148] signalConditionsASAP(NULL, pos=5) ...
[08:08:21.148] | nx: 6
[08:08:21.148] | relay: TRUE
[08:08:21.148] | stdout: TRUE
[08:08:21.149] | signal: TRUE
[08:08:21.149] | resignal: FALSE
[08:08:21.149] | force: TRUE
[08:08:21.149] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:21.149] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.149] | until=6
[08:08:21.149] | relaying element #6
[08:08:21.149] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:21.149] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.149] signalConditionsASAP(NULL, pos=5) ... done
[08:08:21.149] signalConditionsASAP(NULL, pos=5) ...
[08:08:21.149] | nx: 6
[08:08:21.150] | relay: TRUE
[08:08:21.150] | stdout: TRUE
[08:08:21.150] | signal: TRUE
[08:08:21.150] | resignal: FALSE
[08:08:21.150] | force: TRUE
[08:08:21.150] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:21.150] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.150] | until=6
[08:08:21.150] | relaying element #6
[08:08:21.150] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:21.150] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.151] signalConditionsASAP(NULL, pos=5) ... done
[08:08:21.151] length: 1 (resolved future 5)

[08:08:21.151] checking value #6:
[08:08:21.151] 'obj' is atomic
[08:08:21.151] signalConditionsASAP(numeric, pos=6) ...
[08:08:21.151] | nx: 6
[08:08:21.151] | relay: TRUE
[08:08:21.151] | stdout: TRUE
[08:08:21.151] | signal: TRUE
[08:08:21.151] | resignal: FALSE
[08:08:21.152] | force: TRUE
[08:08:21.152] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:21.152] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.152] | until=6
[08:08:21.152] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:21.152] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.152] signalConditionsASAP(numeric, pos=6) ... done
[08:08:21.152] length: 0 (resolved future 6)

[08:08:21.152] Relaying remaining futures ...
[08:08:21.152] | signalConditionsASAP(NULL, pos=0) ...
[08:08:21.153] | : nx: 6
[08:08:21.153] | : relay: TRUE
[08:08:21.153] | : stdout: TRUE
[08:08:21.153] | : signal: TRUE
[08:08:21.153] | : resignal: FALSE
[08:08:21.153] | : force: TRUE
[08:08:21.153] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:21.154] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
 - flush all
[08:08:21.154] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:21.154] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.154] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:21.154] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:3] 2 3 1
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
Dimensions: c(2, 1, 3, 1)
[08:08:21.158] future(..., label = NULL) ...
[08:08:21.158] | lazy: FALSE
[08:08:21.158] | stdout: TRUE
[08:08:21.158] | conditions: [n=1] ‘condition’
[08:08:21.158] | gc: FALSE
[08:08:21.158] | earlySignal: FALSE
[08:08:21.158] | getGlobalsAndPackages() ...
[08:08:21.158] | : Searching for globals ...
[08:08:21.159] | : . globals found: [0] 
[08:08:21.160] | : Searching for globals ... done
[08:08:21.160] | : globals: [0] <none>
[08:08:21.160] | : packages: [0] <none>
[08:08:21.160] | getGlobalsAndPackages() ... done
[08:08:21.160] | run() for ‘Future’ (<unnamed-9>) ...
[08:08:21.160] | : state: ‘created’
[08:08:21.160] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.160] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.161] | : Using SequentialFutureBackend ...
[08:08:21.161] | : . Number of futures since start: 8 (8 created, 8 launched, 8 finished)
[08:08:21.161] | : . Launching futures ...
[08:08:21.161] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:21.161] | : . ' , getFutureData() ...
[08:08:21.161] | : . ' , ; getFutureCore() ...
[08:08:21.161] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:21.161] | : . ' , ; getFutureCore() ... done
[08:08:21.161] | : . ' , ; getFutureCapture() ...
[08:08:21.161] | : . ' , ; getFutureCapture() ... done
[08:08:21.162] | : . ' , ; getFutureContext() ...
[08:08:21.162] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.162] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:21.162] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.162] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:21.162] | : . ' , ; getFutureContext() ... done
[08:08:21.162] | : . ' , getFutureData() ... done
[08:08:21.163] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.164] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:21.164] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.164] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.164] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.164] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:21.164] | : . ' , ; ` | New stack:
[08:08:21.164] | : . ' , ; ` | List of 1
[08:08:21.164] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.164] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.164] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:21.164] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.164] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.164] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.164] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.164] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.167] | : . ' , ; ` | Old stack:
[08:08:21.167] | : . ' , ; ` | List of 1
[08:08:21.167] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.167] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.167] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:21.167] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.167] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.167] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.167] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:21.167] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.167] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.167] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.167] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.170] | : . ' , ; ` | Not identical
[08:08:21.170] | : . ' , ; ` | all.equal() for future ...
[08:08:21.170] | : . ' , ; ` | : List of 2
[08:08:21.170] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.170] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.170] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:21.170] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.170] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.170] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.170] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.170] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.170] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.170] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.170] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.170] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.170] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.170] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.170] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.170] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.170] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.176] | : . ' , ; ` | all.equal() for future ... done
[08:08:21.176] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:21.176] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.176] | : . ' , ; ` List of future strategies:
[08:08:21.176] | : . ' , ; ` 1. sequential:
[08:08:21.176] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.176] | : . ' , ; `    - tweaked: FALSE
[08:08:21.176] | : . ' , ; `    - call: plan(sequential)
[08:08:21.177] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.177] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.178] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.178] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.178] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.179] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:21.179] | : . ' , ; ` | : New stack:
[08:08:21.179] | : . ' , ; ` | : List of 1
[08:08:21.179] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.179] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.179] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.179] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.179] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.179] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.179] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.179] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.179] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.179] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.179] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.182] | : . ' , ; ` | : Old stack:
[08:08:21.182] | : . ' , ; ` | : List of 1
[08:08:21.182] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.182] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.182] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.182] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.182] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.182] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.182] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.182] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.182] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.182] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.182] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.185] | : . ' , ; ` | : Identical
[08:08:21.185] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:21.185] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.185] | : . ' , ; ` | List of future strategies:
[08:08:21.185] | : . ' , ; ` | 1. sequential:
[08:08:21.185] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.185] | : . ' , ; ` |    - tweaked: FALSE
[08:08:21.185] | : . ' , ; ` |    - call: plan(sequential)
[08:08:21.186] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.186] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.186] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.186] | : . ' , SequentialFuture started (and completed)
[08:08:21.186] | : . ' , signalConditions() ...
[08:08:21.186] | : . ' , ; include = ‘immediateCondition’
[08:08:21.186] | : . ' , ; exclude = 
[08:08:21.186] | : . ' , ; resignal = FALSE
[08:08:21.187] | : . ' , ; Number of conditions: 6
[08:08:21.187] | : . ' , ;  int 6
[08:08:21.187] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.187] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.187] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.187] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.187] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.188] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.188] | : . ' , signalConditions() ... done
[08:08:21.188] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:21.188] | : . Launching futures ... done
[08:08:21.188] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:21.188] | : Using SequentialFutureBackend ... done
[08:08:21.188] | run() for ‘Future’ (<unnamed-9>) ... done
[08:08:21.188] future(..., label = NULL) ... done
[08:08:21.188] future(..., label = NULL) ...
[08:08:21.188] | lazy: FALSE
[08:08:21.189] | stdout: TRUE
[08:08:21.189] | conditions: [n=1] ‘condition’
[08:08:21.189] | gc: FALSE
[08:08:21.189] | earlySignal: FALSE
[08:08:21.189] | getGlobalsAndPackages() ...
[08:08:21.189] | : Searching for globals ...
[08:08:21.190] | : . globals found: [0] 
[08:08:21.190] | : Searching for globals ... done
[08:08:21.190] | : globals: [0] <none>
[08:08:21.190] | : packages: [0] <none>
[08:08:21.190] | getGlobalsAndPackages() ... done
[08:08:21.191] | run() for ‘Future’ (<unnamed-10>) ...
[08:08:21.191] | : state: ‘created’
[08:08:21.191] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.191] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.191] | : Using SequentialFutureBackend ...
[08:08:21.191] | : . Number of futures since start: 9 (9 created, 9 launched, 9 finished)
[08:08:21.191] | : . Launching futures ...
[08:08:21.191] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:21.192] | : . ' , getFutureData() ...
[08:08:21.192] | : . ' , ; getFutureCore() ...
[08:08:21.192] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:21.192] | : . ' , ; getFutureCore() ... done
[08:08:21.192] | : . ' , ; getFutureCapture() ...
[08:08:21.192] | : . ' , ; getFutureCapture() ... done
[08:08:21.192] | : . ' , ; getFutureContext() ...
[08:08:21.193] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.193] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:21.193] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.193] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:21.193] | : . ' , ; getFutureContext() ... done
[08:08:21.194] | : . ' , getFutureData() ... done
[08:08:21.195] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.195] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:21.195] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.195] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.195] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.196] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:21.196] | : . ' , ; ` | New stack:
[08:08:21.196] | : . ' , ; ` | List of 1
[08:08:21.196] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.196] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.196] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:21.196] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.196] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.196] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.196] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.196] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.198] | : . ' , ; ` | Old stack:
[08:08:21.198] | : . ' , ; ` | List of 1
[08:08:21.198] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.198] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.198] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:21.198] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.198] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.198] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.198] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:21.198] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.198] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.198] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.198] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.201] | : . ' , ; ` | Not identical
[08:08:21.201] | : . ' , ; ` | all.equal() for future ...
[08:08:21.201] | : . ' , ; ` | : List of 2
[08:08:21.201] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.201] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.201] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:21.201] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.201] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.201] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.201] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.201] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.201] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.201] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.201] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.201] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.201] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.201] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.201] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.201] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.201] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.206] | : . ' , ; ` | all.equal() for future ... done
[08:08:21.206] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:21.207] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.207] | : . ' , ; ` List of future strategies:
[08:08:21.207] | : . ' , ; ` 1. sequential:
[08:08:21.207] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.207] | : . ' , ; `    - tweaked: FALSE
[08:08:21.207] | : . ' , ; `    - call: plan(sequential)
[08:08:21.207] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.207] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.209] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.209] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.209] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.209] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:21.209] | : . ' , ; ` | : New stack:
[08:08:21.209] | : . ' , ; ` | : List of 1
[08:08:21.209] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.209] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.209] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.209] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.209] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.209] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.209] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.209] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.209] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.209] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.209] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.213] | : . ' , ; ` | : Old stack:
[08:08:21.213] | : . ' , ; ` | : List of 1
[08:08:21.213] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.213] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.213] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.213] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.213] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.213] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.213] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.213] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.213] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.213] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.213] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.216] | : . ' , ; ` | : Identical
[08:08:21.216] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:21.216] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.217] | : . ' , ; ` | List of future strategies:
[08:08:21.217] | : . ' , ; ` | 1. sequential:
[08:08:21.217] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.217] | : . ' , ; ` |    - tweaked: FALSE
[08:08:21.217] | : . ' , ; ` |    - call: plan(sequential)
[08:08:21.217] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.217] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.217] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.217] | : . ' , SequentialFuture started (and completed)
[08:08:21.218] | : . ' , signalConditions() ...
[08:08:21.218] | : . ' , ; include = ‘immediateCondition’
[08:08:21.218] | : . ' , ; exclude = 
[08:08:21.218] | : . ' , ; resignal = FALSE
[08:08:21.218] | : . ' , ; Number of conditions: 6
[08:08:21.218] | : . ' , ;  int 6
[08:08:21.218] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.219] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.219] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.219] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.219] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.219] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.219] | : . ' , signalConditions() ... done
[08:08:21.219] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:21.219] | : . Launching futures ... done
[08:08:21.219] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:21.219] | : Using SequentialFutureBackend ... done
[08:08:21.220] | run() for ‘Future’ (<unnamed-10>) ... done
[08:08:21.220] future(..., label = NULL) ... done
List of 6
 $ a: num 1
 $ b:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x5642ffcd4f30> 
 $ c:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x56430252cda8> 
 $  : NULL
 $  : NULL
 $  : num 6
List of 6
 $ a: num 1
 $ b:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x5642ffcd4f30> 
 $ c:Classes 'SequentialFuture', 'UniprocessFuture', 'Future' <environment: 0x56430252cda8> 
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:4] 2 1 3 1
 - attr(*, "dimnames")=List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
[08:08:21.225] resolved() for array ...
[08:08:21.225] | Number of elements: 6
[08:08:21.225] | Number of futures: 6
[08:08:21.225] | resolved() for SequentialFuture (<unnamed-9>) ...
[08:08:21.225] | : state: ‘finished’
[08:08:21.225] | : run: TRUE
[08:08:21.225] | : result: ‘FutureResult’
[08:08:21.226] | resolved() for SequentialFuture (<unnamed-9>) ... done
[08:08:21.226] | resolved() for SequentialFuture (<unnamed-10>) ...
[08:08:21.226] | : state: ‘finished’
[08:08:21.226] | : run: TRUE
[08:08:21.226] | : result: ‘FutureResult’
[08:08:21.226] | resolved() for SequentialFuture (<unnamed-10>) ... done
[08:08:21.226] resolved() for array ... done
 logi [1:2, 1, 1:3, 1] TRUE TRUE TRUE TRUE TRUE TRUE
 - attr(*, "dimnames")=List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
 - attr(*, "names")= chr [1:6] "a" "b" "c" "" ...
[08:08:21.228] value() for array ...
[08:08:21.228] | recursive: 0
[08:08:21.228] | reduce: FALSE
[08:08:21.228] | length: 6
[08:08:21.229] | elements: ‘a’, ‘b’, ‘c’, ‘’, ‘’, ‘’
[08:08:21.229] | Number of remaining objects: 6
[08:08:21.229] | checking value #1:
[08:08:21.229] | 'obj' is atomic
[08:08:21.229] | signalConditionsASAP(numeric, pos=1) ...
[08:08:21.229] | : nx: 6
[08:08:21.229] | : relay: TRUE
[08:08:21.229] | : stdout: TRUE
[08:08:21.229] | : signal: TRUE
[08:08:21.229] | : resignal: FALSE
[08:08:21.229] | : force: TRUE
[08:08:21.230] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:21.230] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:21.230] | : until=2
[08:08:21.230] | : relaying element #2
[08:08:21.230] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:21.230] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:21.230] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:21.230] | length: 5 (resolved future 1)
[08:08:21.230] value() for array ... done
[08:08:21.230] checking value #2:
[08:08:21.231] 'obj' is SequentialFuture
[08:08:21.231] resolved() for SequentialFuture (<unnamed-9>) ...
[08:08:21.231] | state: ‘finished’
[08:08:21.232] | run: TRUE
[08:08:21.232] | result: ‘FutureResult’
[08:08:21.232] resolved() for SequentialFuture (<unnamed-9>) ... done
[08:08:21.232] SequentialFuture #2
[08:08:21.232] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:21.232] | nx: 6
[08:08:21.232] | relay: TRUE
[08:08:21.232] | stdout: TRUE
[08:08:21.232] | signal: TRUE
[08:08:21.232] | resignal: FALSE
[08:08:21.232] | force: TRUE
[08:08:21.233] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:21.233] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:21.233] | until=2
[08:08:21.233] | relaying element #2
[08:08:21.233] | value() for SequentialFuture (<unnamed-9>) ...
[08:08:21.233] | : signalConditions() ...
[08:08:21.233] | : . include = ‘immediateCondition’
[08:08:21.233] | : . exclude = 
[08:08:21.233] | : . resignal = FALSE
[08:08:21.233] | : . Number of conditions: 6
[08:08:21.234] | : .  int 6
[08:08:21.234] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.234] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.234] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.234] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.234] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.234] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.235] | : signalConditions() ... done
[08:08:21.235] | : relay stdout ...
[08:08:21.235] | : relay stdout ... done
[08:08:21.235] | : check for misuse ...
[08:08:21.235] | : check for misuse ... done
[08:08:21.235] | value() for SequentialFuture (<unnamed-9>) ... done
[08:08:21.235] | signalConditions() ...
[08:08:21.235] | : include = ‘immediateCondition’
[08:08:21.235] | : exclude = 
[08:08:21.236] | : resignal = FALSE
[08:08:21.236] | : Number of conditions: 6
[08:08:21.236] | :  int 6
[08:08:21.236] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.236] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.236] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.236] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.236] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.237] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.237] | signalConditions() ... done
[08:08:21.237] | signalConditions() ...
[08:08:21.237] | : include = ‘condition’
[08:08:21.237] | : exclude = ‘error’, ‘immediateCondition’
[08:08:21.237] | : resignal = TRUE
[08:08:21.237] | : Number of conditions: 6
[08:08:21.237] | :  int 6
[08:08:21.238] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.238] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.162] | : . ' , attachPackages() ...
[08:08:21.238] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.238] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.163] | : . ' , ; packages: [n=1] ‘future’
[08:08:21.238] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.238] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.163] | : . ' , attachPackages() ... done
[08:08:21.238] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.239] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.163] | : . ' , attachPackages() ...
[08:08:21.239] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.239] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.163] | : . ' , ; packages: [n=0] 
[08:08:21.239] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.239] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.163] | : . ' , attachPackages() ... done
[08:08:21.239] | signalConditions() ... done
[08:08:21.239] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:21.239] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:21.239] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:21.240] value(<SequentialFuture>, ...) ...
[08:08:21.240] value(<SequentialFuture>, ...) ... done
[08:08:21.240] value() for SequentialFuture (<unnamed-9>) ...
[08:08:21.240] | signalConditions() ...
[08:08:21.240] | : include = ‘immediateCondition’
[08:08:21.240] | : exclude = 
[08:08:21.240] | : resignal = FALSE
[08:08:21.240] | : Number of conditions: 6
[08:08:21.240] | :  int 6
[08:08:21.241] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.241] | : already signaled, skipping
[08:08:21.241] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.241] | : already signaled, skipping
[08:08:21.241] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.241] | : already signaled, skipping
[08:08:21.241] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.241] | : already signaled, skipping
[08:08:21.241] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.242] | : already signaled, skipping
[08:08:21.242] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.242] | : already signaled, skipping
[08:08:21.242] | signalConditions() ... done
[08:08:21.242] | check for misuse ...
[08:08:21.242] | check for misuse ... done
[08:08:21.242] value() for SequentialFuture (<unnamed-9>) ... done
[08:08:21.242] value: <numeric>
[08:08:21.242] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:21.242] | nx: 6
[08:08:21.242] | relay: TRUE
[08:08:21.243] | stdout: TRUE
[08:08:21.243] | signal: TRUE
[08:08:21.243] | resignal: FALSE
[08:08:21.243] | force: TRUE
[08:08:21.243] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:21.243] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:21.243] | until=3
[08:08:21.243] | relaying element #3
[08:08:21.243] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:21.243] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:21.243] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:21.244] resolve() for SequentialFuture ...
[08:08:21.244] resolve() for SequentialFuture ... done
[08:08:21.244] length: 4 (resolved future 2)

[08:08:21.244] checking value #3:
[08:08:21.244] 'obj' is SequentialFuture
[08:08:21.244] resolved() for SequentialFuture (<unnamed-10>) ...
[08:08:21.244] | state: ‘finished’
[08:08:21.244] | run: TRUE
[08:08:21.244] | result: ‘FutureResult’
[08:08:21.245] resolved() for SequentialFuture (<unnamed-10>) ... done
[08:08:21.245] SequentialFuture #3
[08:08:21.245] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:21.245] | nx: 6
[08:08:21.245] | relay: TRUE
[08:08:21.245] | stdout: TRUE
[08:08:21.245] | signal: TRUE
[08:08:21.245] | resignal: FALSE
[08:08:21.245] | force: TRUE
[08:08:21.245] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:21.245] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:21.245] | until=3
[08:08:21.246] | relaying element #3
[08:08:21.246] | value() for SequentialFuture (<unnamed-10>) ...
[08:08:21.246] | : signalConditions() ...
[08:08:21.246] | : . include = ‘immediateCondition’
[08:08:21.246] | : . exclude = 
[08:08:21.246] | : . resignal = FALSE
[08:08:21.246] | : . Number of conditions: 6
[08:08:21.246] | : .  int 6
[08:08:21.247] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.247] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.247] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.247] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.247] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.247] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.247] | : signalConditions() ... done
[08:08:21.247] | : relay stdout ...
[08:08:21.247] | : relay stdout ... done
[08:08:21.248] | : check for misuse ...
[08:08:21.248] | : check for misuse ... done
[08:08:21.248] | value() for SequentialFuture (<unnamed-10>) ... done
[08:08:21.248] | signalConditions() ...
[08:08:21.248] | : include = ‘immediateCondition’
[08:08:21.248] | : exclude = 
[08:08:21.248] | : resignal = FALSE
[08:08:21.248] | : Number of conditions: 6
[08:08:21.248] | :  int 6
[08:08:21.249] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.249] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.249] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.249] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.249] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.249] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.249] | signalConditions() ... done
[08:08:21.249] | signalConditions() ...
[08:08:21.250] | : include = ‘condition’
[08:08:21.250] | : exclude = ‘error’, ‘immediateCondition’
[08:08:21.250] | : resignal = TRUE
[08:08:21.250] | : Number of conditions: 6
[08:08:21.250] | :  int 6
[08:08:21.251] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.251] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.194] | : . ' , attachPackages() ...
[08:08:21.251] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.251] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.194] | : . ' , ; packages: [n=1] ‘future’
[08:08:21.252] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.252] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.194] | : . ' , attachPackages() ... done
[08:08:21.252] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.252] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.194] | : . ' , attachPackages() ...
[08:08:21.252] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.252] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.194] | : . ' , ; packages: [n=0] 
[08:08:21.252] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.252] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.195] | : . ' , attachPackages() ... done
[08:08:21.253] | signalConditions() ... done
[08:08:21.253] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.253] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.253] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:21.253] value(<SequentialFuture>, ...) ...
[08:08:21.253] value(<SequentialFuture>, ...) ... done
[08:08:21.253] value() for SequentialFuture (<unnamed-10>) ...
[08:08:21.253] | signalConditions() ...
[08:08:21.253] | : include = ‘immediateCondition’
[08:08:21.253] | : exclude = 
[08:08:21.253] | : resignal = FALSE
[08:08:21.254] | : Number of conditions: 6
[08:08:21.254] | :  int 6
[08:08:21.254] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.254] | : already signaled, skipping
[08:08:21.254] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.254] | : already signaled, skipping
[08:08:21.254] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.255] | : already signaled, skipping
[08:08:21.255] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.255] | : already signaled, skipping
[08:08:21.255] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.255] | : already signaled, skipping
[08:08:21.255] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.255] | : already signaled, skipping
[08:08:21.255] | signalConditions() ... done
[08:08:21.255] | check for misuse ...
[08:08:21.255] | check for misuse ... done
[08:08:21.256] value() for SequentialFuture (<unnamed-10>) ... done
[08:08:21.256] value: <NULL>
[08:08:21.256] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:21.256] | nx: 6
[08:08:21.256] | relay: TRUE
[08:08:21.256] | stdout: TRUE
[08:08:21.256] | signal: TRUE
[08:08:21.256] | resignal: FALSE
[08:08:21.256] | force: TRUE
[08:08:21.256] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.256] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.257] | until=4
[08:08:21.257] | relaying element #4
[08:08:21.257] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.257] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.257] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:21.257] resolve() for SequentialFuture ...
[08:08:21.257] resolve() for SequentialFuture ... done
[08:08:21.257] length: 3 (resolved future 3)

[08:08:21.257] checking value #4:
[08:08:21.257] 'obj' is NULL
[08:08:21.258] signalConditionsASAP(NULL, pos=4) ...
[08:08:21.258] | nx: 6
[08:08:21.258] | relay: TRUE
[08:08:21.258] | stdout: TRUE
[08:08:21.258] | signal: TRUE
[08:08:21.258] | resignal: FALSE
[08:08:21.258] | force: TRUE
[08:08:21.258] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.258] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.258] | until=5
[08:08:21.258] | relaying element #5
[08:08:21.259] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:21.259] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.259] signalConditionsASAP(NULL, pos=4) ... done
[08:08:21.259] signalConditionsASAP(NULL, pos=4) ...
[08:08:21.259] | nx: 6
[08:08:21.259] | relay: TRUE
[08:08:21.259] | stdout: TRUE
[08:08:21.259] | signal: TRUE
[08:08:21.259] | resignal: FALSE
[08:08:21.259] | force: TRUE
[08:08:21.259] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:21.260] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.260] | until=5
[08:08:21.260] | relaying element #5
[08:08:21.260] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:21.260] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.260] signalConditionsASAP(NULL, pos=4) ... done
[08:08:21.260] length: 2 (resolved future 4)

[08:08:21.260] checking value #5:
[08:08:21.260] 'obj' is NULL
[08:08:21.260] signalConditionsASAP(NULL, pos=5) ...
[08:08:21.261] | nx: 6
[08:08:21.261] | relay: TRUE
[08:08:21.261] | stdout: TRUE
[08:08:21.261] | signal: TRUE
[08:08:21.261] | resignal: FALSE
[08:08:21.261] | force: TRUE
[08:08:21.261] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:21.261] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.261] | until=6
[08:08:21.261] | relaying element #6
[08:08:21.261] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:21.261] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.262] signalConditionsASAP(NULL, pos=5) ... done
[08:08:21.262] signalConditionsASAP(NULL, pos=5) ...
[08:08:21.262] | nx: 6
[08:08:21.262] | relay: TRUE
[08:08:21.262] | stdout: TRUE
[08:08:21.262] | signal: TRUE
[08:08:21.262] | resignal: FALSE
[08:08:21.262] | force: TRUE
[08:08:21.262] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:21.262] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.262] | until=6
[08:08:21.263] | relaying element #6
[08:08:21.263] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:21.263] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.263] signalConditionsASAP(NULL, pos=5) ... done
[08:08:21.263] length: 1 (resolved future 5)

[08:08:21.263] checking value #6:
[08:08:21.263] 'obj' is atomic
[08:08:21.263] signalConditionsASAP(numeric, pos=6) ...
[08:08:21.263] | nx: 6
[08:08:21.263] | relay: TRUE
[08:08:21.264] | stdout: TRUE
[08:08:21.264] | signal: TRUE
[08:08:21.264] | resignal: FALSE
[08:08:21.264] | force: TRUE
[08:08:21.264] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:21.264] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.264] | until=6
[08:08:21.264] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:21.264] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.264] signalConditionsASAP(numeric, pos=6) ... done
[08:08:21.264] length: 0 (resolved future 6)

[08:08:21.265] Relaying remaining futures ...
[08:08:21.265] | signalConditionsASAP(NULL, pos=0) ...
[08:08:21.265] | : nx: 6
[08:08:21.265] | : relay: TRUE
[08:08:21.265] | : stdout: TRUE
[08:08:21.265] | : signal: TRUE
[08:08:21.265] | : resignal: FALSE
[08:08:21.265] | : force: TRUE
[08:08:21.265] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:21.265] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
 - flush all
[08:08:21.266] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:21.266] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:21.266] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:21.266] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:4] 2 1 3 1
 - attr(*, "dimnames")=List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
*** futures() - list ... DONE
Type of object: environment
Type of future: sequential
[08:08:21.271] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.271] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:21.271] | : all.equal() for FutureStrategyList ...
[08:08:21.271] | : . New stack:
[08:08:21.271] | : . List of 1
[08:08:21.271] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.271] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.271] | : .   ..- attr(*, "init")= logi TRUE
[08:08:21.271] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.271] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.271] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.271] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:21.271] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.274] | : . Old stack:
[08:08:21.274] | : . List of 1
[08:08:21.274] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.274] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.274] | : .   ..- attr(*, "init")= chr "done"
[08:08:21.274] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.274] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.274] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.274] | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:21.274] | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.274] | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.274] | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.274] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.277] | : . Not identical
[08:08:21.277] | : . all.equal() for future ...
[08:08:21.277] | : . ' List of 2
[08:08:21.277] | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.277] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.277] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:21.277] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.277] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.277] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.277] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:21.277] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.277] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.277] | : . '   ..- attr(*, "init")= chr "done"
[08:08:21.277] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.277] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.277] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.277] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:08:21.277] | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.277] | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.277] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.282] | : . all.equal() for future ... done
[08:08:21.282] | : all.equal() for FutureStrategyList ... done
[08:08:21.282] | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.282] | : List of future strategies:
[08:08:21.282] | : 1. sequential:
[08:08:21.282] | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.282] | :    - tweaked: FALSE
[08:08:21.282] | :    - call: plan(sequential)
[08:08:21.283] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:21.283] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Dimensions: NULL
[08:08:21.283] future(..., label = NULL) ...
[08:08:21.283] | lazy: FALSE
[08:08:21.283] | stdout: TRUE
[08:08:21.283] | conditions: [n=1] ‘condition’
[08:08:21.283] | gc: FALSE
[08:08:21.283] | earlySignal: FALSE
[08:08:21.283] | getGlobalsAndPackages() ...
[08:08:21.284] | : Searching for globals ...
[08:08:21.285] | : . globals found: [0] 
[08:08:21.285] | : Searching for globals ... done
[08:08:21.285] | : globals: [0] <none>
[08:08:21.285] | : packages: [0] <none>
[08:08:21.285] | getGlobalsAndPackages() ... done
[08:08:21.285] | run() for ‘Future’ (<unnamed-11>) ...
[08:08:21.285] | : state: ‘created’
[08:08:21.286] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.286] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.286] | : Using SequentialFutureBackend ...
[08:08:21.286] | : . Number of futures since start: 10 (10 created, 10 launched, 10 finished)
[08:08:21.286] | : . Launching futures ...
[08:08:21.286] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:21.286] | : . ' , getFutureData() ...
[08:08:21.286] | : . ' , ; getFutureCore() ...
[08:08:21.286] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:21.287] | : . ' , ; getFutureCore() ... done
[08:08:21.287] | : . ' , ; getFutureCapture() ...
[08:08:21.287] | : . ' , ; getFutureCapture() ... done
[08:08:21.287] | : . ' , ; getFutureContext() ...
[08:08:21.287] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.287] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:21.287] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.287] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:21.287] | : . ' , ; getFutureContext() ... done
[08:08:21.288] | : . ' , getFutureData() ... done
[08:08:21.290] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.290] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:21.290] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.291] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.291] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.291] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:21.291] | : . ' , ; ` | New stack:
[08:08:21.291] | : . ' , ; ` | List of 1
[08:08:21.291] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.291] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.291] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:21.291] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.291] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.291] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.291] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.291] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.294] | : . ' , ; ` | Old stack:
[08:08:21.294] | : . ' , ; ` | List of 1
[08:08:21.294] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.294] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.294] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:21.294] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.294] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.294] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.294] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:21.294] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.294] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.294] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.294] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.297] | : . ' , ; ` | Not identical
[08:08:21.297] | : . ' , ; ` | all.equal() for future ...
[08:08:21.297] | : . ' , ; ` | : List of 2
[08:08:21.297] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.297] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.297] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:21.297] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.297] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.297] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.297] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.297] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.297] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.297] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.297] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.297] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.297] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.297] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.297] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.297] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.297] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.302] | : . ' , ; ` | all.equal() for future ... done
[08:08:21.302] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:21.302] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.303] | : . ' , ; ` List of future strategies:
[08:08:21.303] | : . ' , ; ` 1. sequential:
[08:08:21.303] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.303] | : . ' , ; `    - tweaked: FALSE
[08:08:21.303] | : . ' , ; `    - call: plan(sequential)
[08:08:21.303] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.303] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.305] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.305] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.305] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.305] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:21.305] | : . ' , ; ` | : New stack:
[08:08:21.305] | : . ' , ; ` | : List of 1
[08:08:21.305] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.305] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.305] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.305] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.305] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.305] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.305] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.305] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.305] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.305] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.305] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.310] | : . ' , ; ` | : Old stack:
[08:08:21.310] | : . ' , ; ` | : List of 1
[08:08:21.310] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.310] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.310] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.310] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.310] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.310] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.310] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.310] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.310] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.310] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.310] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.313] | : . ' , ; ` | : Identical
[08:08:21.313] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:21.313] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.313] | : . ' , ; ` | List of future strategies:
[08:08:21.313] | : . ' , ; ` | 1. sequential:
[08:08:21.313] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.313] | : . ' , ; ` |    - tweaked: FALSE
[08:08:21.313] | : . ' , ; ` |    - call: plan(sequential)
[08:08:21.314] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.314] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.314] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.314] | : . ' , SequentialFuture started (and completed)
[08:08:21.314] | : . ' , signalConditions() ...
[08:08:21.314] | : . ' , ; include = ‘immediateCondition’
[08:08:21.315] | : . ' , ; exclude = 
[08:08:21.315] | : . ' , ; resignal = FALSE
[08:08:21.315] | : . ' , ; Number of conditions: 6
[08:08:21.315] | : . ' , ;  int 6
[08:08:21.315] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.315] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.315] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.316] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.316] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.316] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.316] | : . ' , signalConditions() ... done
[08:08:21.316] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:21.316] | : . Launching futures ... done
[08:08:21.316] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:21.316] | : Using SequentialFutureBackend ... done
[08:08:21.316] | run() for ‘Future’ (<unnamed-11>) ... done
[08:08:21.317] future(..., label = NULL) ... done
[08:08:21.317] future(..., label = NULL) ...
[08:08:21.317] | lazy: FALSE
[08:08:21.317] | stdout: TRUE
[08:08:21.317] | conditions: [n=1] ‘condition’
[08:08:21.317] | gc: FALSE
[08:08:21.317] | earlySignal: FALSE
[08:08:21.317] | getGlobalsAndPackages() ...
[08:08:21.317] | : Searching for globals ...
[08:08:21.318] | : . globals found: [0] 
[08:08:21.319] | : Searching for globals ... done
[08:08:21.319] | : globals: [0] <none>
[08:08:21.319] | : packages: [0] <none>
[08:08:21.319] | getGlobalsAndPackages() ... done
[08:08:21.319] | run() for ‘Future’ (<unnamed-12>) ...
[08:08:21.319] | : state: ‘created’
[08:08:21.319] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.319] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.319] | : Using SequentialFutureBackend ...
[08:08:21.320] | : . Number of futures since start: 11 (11 created, 11 launched, 11 finished)
[08:08:21.320] | : . Launching futures ...
[08:08:21.320] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:21.320] | : . ' , getFutureData() ...
[08:08:21.320] | : . ' , ; getFutureCore() ...
[08:08:21.320] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:21.320] | : . ' , ; getFutureCore() ... done
[08:08:21.320] | : . ' , ; getFutureCapture() ...
[08:08:21.320] | : . ' , ; getFutureCapture() ... done
[08:08:21.321] | : . ' , ; getFutureContext() ...
[08:08:21.321] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.321] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:21.321] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.321] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:21.321] | : . ' , ; getFutureContext() ... done
[08:08:21.321] | : . ' , getFutureData() ... done
[08:08:21.322] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.323] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:21.323] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.323] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.323] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.323] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:21.323] | : . ' , ; ` | New stack:
[08:08:21.323] | : . ' , ; ` | List of 1
[08:08:21.323] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.323] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.323] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:21.323] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.323] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.323] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.323] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.323] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.326] | : . ' , ; ` | Old stack:
[08:08:21.326] | : . ' , ; ` | List of 1
[08:08:21.326] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.326] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.326] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:21.326] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.326] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.326] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.326] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:21.326] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.326] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.326] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.326] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.330] | : . ' , ; ` | Not identical
[08:08:21.330] | : . ' , ; ` | all.equal() for future ...
[08:08:21.331] | : . ' , ; ` | : List of 2
[08:08:21.331] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.331] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.331] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:21.331] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.331] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.331] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.331] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.331] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.331] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.331] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.331] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.331] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.331] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.331] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.331] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.331] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.331] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.336] | : . ' , ; ` | all.equal() for future ... done
[08:08:21.336] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:21.336] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.336] | : . ' , ; ` List of future strategies:
[08:08:21.336] | : . ' , ; ` 1. sequential:
[08:08:21.336] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.336] | : . ' , ; `    - tweaked: FALSE
[08:08:21.336] | : . ' , ; `    - call: plan(sequential)
[08:08:21.337] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.337] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.339] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.339] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.339] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.339] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:21.339] | : . ' , ; ` | : New stack:
[08:08:21.340] | : . ' , ; ` | : List of 1
[08:08:21.340] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.340] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.340] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.340] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.340] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.340] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.340] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.340] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.340] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.340] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.340] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.343] | : . ' , ; ` | : Old stack:
[08:08:21.343] | : . ' , ; ` | : List of 1
[08:08:21.343] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.343] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.343] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.343] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.343] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.343] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.343] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.343] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.343] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.343] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.343] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.346] | : . ' , ; ` | : Identical
[08:08:21.346] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:21.346] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.347] | : . ' , ; ` | List of future strategies:
[08:08:21.347] | : . ' , ; ` | 1. sequential:
[08:08:21.347] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.347] | : . ' , ; ` |    - tweaked: FALSE
[08:08:21.347] | : . ' , ; ` |    - call: plan(sequential)
[08:08:21.347] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.347] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.347] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.348] | : . ' , SequentialFuture started (and completed)
[08:08:21.348] | : . ' , signalConditions() ...
[08:08:21.348] | : . ' , ; include = ‘immediateCondition’
[08:08:21.348] | : . ' , ; exclude = 
[08:08:21.348] | : . ' , ; resignal = FALSE
[08:08:21.348] | : . ' , ; Number of conditions: 6
[08:08:21.348] | : . ' , ;  int 6
[08:08:21.349] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.350] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.351] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.351] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.351] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.351] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.351] | : . ' , signalConditions() ... done
[08:08:21.351] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:21.351] | : . Launching futures ... done
[08:08:21.352] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:21.352] | : Using SequentialFutureBackend ... done
[08:08:21.352] | run() for ‘Future’ (<unnamed-12>) ... done
[08:08:21.352] future(..., label = NULL) ... done
[08:08:21.353] future(..., label = NULL) ...
[08:08:21.353] | lazy: FALSE
[08:08:21.353] | stdout: TRUE
[08:08:21.353] | conditions: [n=1] ‘condition’
[08:08:21.353] | gc: FALSE
[08:08:21.354] | earlySignal: FALSE
[08:08:21.354] | getGlobalsAndPackages() ...
[08:08:21.354] | : Searching for globals ...
[08:08:21.357] | : . globals found: [1] ‘{’
[08:08:21.358] | : Searching for globals ... done
[08:08:21.358] | : Resolving globals: FALSE
[08:08:21.358] | : Search for packages associated with the globals ...
[08:08:21.358] | : . Packages associated with globals: [1] ‘base’
[08:08:21.358] | : . Packages: [1] ‘base’
[08:08:21.359] | : Search for packages associated with the globals ... done
[08:08:21.359] | : Packages after dropping 'base': [0] 
[08:08:21.359] | : globals: [0] 
[08:08:21.359] | : packages: [0] 
[08:08:21.359] | getGlobalsAndPackages() ... done
[08:08:21.359] | run() for ‘Future’ (<unnamed-13>) ...
[08:08:21.359] | : state: ‘created’
[08:08:21.359] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.360] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.360] | : Using SequentialFutureBackend ...
[08:08:21.360] | : . Number of futures since start: 12 (12 created, 12 launched, 12 finished)
[08:08:21.360] | : . Launching futures ...
[08:08:21.360] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:21.360] | : . ' , getFutureData() ...
[08:08:21.360] | : . ' , ; getFutureCore() ...
[08:08:21.360] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:21.361] | : . ' , ; getFutureCore() ... done
[08:08:21.361] | : . ' , ; getFutureCapture() ...
[08:08:21.361] | : . ' , ; getFutureCapture() ... done
[08:08:21.361] | : . ' , ; getFutureContext() ...
[08:08:21.361] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.361] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:21.361] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.361] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:21.361] | : . ' , ; getFutureContext() ... done
[08:08:21.362] | : . ' , getFutureData() ... done
[08:08:21.363] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.363] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:21.363] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.363] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.363] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.364] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:21.364] | : . ' , ; ` | New stack:
[08:08:21.364] | : . ' , ; ` | List of 1
[08:08:21.364] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.364] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.364] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:21.364] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.364] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.364] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.364] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.364] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.366] | : . ' , ; ` | Old stack:
[08:08:21.366] | : . ' , ; ` | List of 1
[08:08:21.366] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.366] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.366] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:21.366] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.366] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.366] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.366] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:21.366] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.366] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.366] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.366] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.369] | : . ' , ; ` | Not identical
[08:08:21.370] | : . ' , ; ` | all.equal() for future ...
[08:08:21.370] | : . ' , ; ` | : List of 2
[08:08:21.370] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.370] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.370] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:21.370] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.370] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.370] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.370] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.370] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.370] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.370] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.370] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.370] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.370] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.370] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.370] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.370] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.370] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.376] | : . ' , ; ` | all.equal() for future ... done
[08:08:21.376] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:21.376] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.376] | : . ' , ; ` List of future strategies:
[08:08:21.376] | : . ' , ; ` 1. sequential:
[08:08:21.376] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.376] | : . ' , ; `    - tweaked: FALSE
[08:08:21.376] | : . ' , ; `    - call: plan(sequential)
[08:08:21.377] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.377] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.378] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.379] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.379] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.379] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:21.379] | : . ' , ; ` | : New stack:
[08:08:21.379] | : . ' , ; ` | : List of 1
[08:08:21.379] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.379] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.379] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.379] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.379] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.379] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.379] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.379] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.379] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.379] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.379] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.382] | : . ' , ; ` | : Old stack:
[08:08:21.382] | : . ' , ; ` | : List of 1
[08:08:21.382] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.382] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.382] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.382] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.382] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.382] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.382] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.382] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.382] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.382] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.382] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.385] | : . ' , ; ` | : Identical
[08:08:21.385] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:21.386] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.386] | : . ' , ; ` | List of future strategies:
[08:08:21.386] | : . ' , ; ` | 1. sequential:
[08:08:21.386] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.386] | : . ' , ; ` |    - tweaked: FALSE
[08:08:21.386] | : . ' , ; ` |    - call: plan(sequential)
[08:08:21.386] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.386] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.386] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.387] | : . ' , SequentialFuture started (and completed)
[08:08:21.387] | : . ' , signalConditions() ...
[08:08:21.387] | : . ' , ; include = ‘immediateCondition’
[08:08:21.387] | : . ' , ; exclude = 
[08:08:21.387] | : . ' , ; resignal = FALSE
[08:08:21.387] | : . ' , ; Number of conditions: 6
[08:08:21.387] | : . ' , ;  int 6
[08:08:21.388] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.388] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.388] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.388] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.388] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.388] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.389] | : . ' , signalConditions() ... done
[08:08:21.389] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:21.389] | : . Launching futures ... done
[08:08:21.389] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:21.389] | : Using SequentialFutureBackend ... done
[08:08:21.390] | run() for ‘Future’ (<unnamed-13>) ... done
[08:08:21.390] future(..., label = NULL) ... done
<environment: 0x5643021f0820> 
<environment: 0x5643015ad230> 
[08:08:21.391] resolved() for environment ...
[08:08:21.391] | resolved() for list ...
[08:08:21.391] | : Number of elements: 4
[08:08:21.391] | : Number of futures: 4
[08:08:21.391] | : resolved() for SequentialFuture (<unnamed-11>) ...
[08:08:21.392] | : . state: ‘finished’
[08:08:21.392] | : . run: TRUE
[08:08:21.392] | : . result: ‘FutureResult’
[08:08:21.392] | : resolved() for SequentialFuture (<unnamed-11>) ... done
[08:08:21.392] | : resolved() for SequentialFuture (<unnamed-12>) ...
[08:08:21.392] | : . state: ‘finished’
[08:08:21.392] | : . run: TRUE
[08:08:21.392] | : . result: ‘FutureResult’
[08:08:21.392] | : resolved() for SequentialFuture (<unnamed-12>) ... done
[08:08:21.392] | : resolved() for SequentialFuture (<unnamed-13>) ...
[08:08:21.393] | : . state: ‘finished’
[08:08:21.393] | : . run: TRUE
[08:08:21.393] | : . result: ‘FutureResult’
[08:08:21.393] | : resolved() for SequentialFuture (<unnamed-13>) ... done
[08:08:21.393] | resolved() for list ... done
[08:08:21.393] resolved() for environment ... done
 Named logi [1:4] TRUE TRUE TRUE TRUE
 - attr(*, "names")= chr [1:4] "a" "b" "c" "d"
[08:08:21.394] value() for SequentialFuture (<unnamed-13>) ...
[08:08:21.394] | signalConditions() ...
[08:08:21.394] | : include = ‘immediateCondition’
[08:08:21.394] | : exclude = 
[08:08:21.394] | : resignal = FALSE
[08:08:21.394] | : Number of conditions: 6
[08:08:21.394] | :  int 6
[08:08:21.395] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.395] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.395] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.395] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.395] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.395] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.395] | signalConditions() ... done
[08:08:21.396] | relay stdout ...
[08:08:21.396] | relay stdout ... done
[08:08:21.396] | check for misuse ...
[08:08:21.396] | check for misuse ... done
[08:08:21.396] | relay conditions ...
[08:08:21.396] | : Future state: ‘finished’
[08:08:21.396] | : signalConditions() ...
[08:08:21.396] | : . include = ‘condition’
[08:08:21.396] | : . exclude = ‘immediateCondition’
[08:08:21.396] | : . resignal = TRUE
[08:08:21.397] | : . Number of conditions: 6
[08:08:21.397] | : .  int 6
[08:08:21.397] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.397] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.362] | : . ' , attachPackages() ...
[08:08:21.397] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.397] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.362] | : . ' , ; packages: [n=1] ‘future’
[08:08:21.397] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.398] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.362] | : . ' , attachPackages() ... done
[08:08:21.398] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.398] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.362] | : . ' , attachPackages() ...
[08:08:21.398] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.398] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.362] | : . ' , ; packages: [n=0] 
[08:08:21.398] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.398] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.362] | : . ' , attachPackages() ... done
[08:08:21.398] | : signalConditions() ... done
[08:08:21.399] | relay conditions ... done
[08:08:21.399] value() for SequentialFuture (<unnamed-13>) ... done
[08:08:21.400] value() for listenv ...
[08:08:21.400] | recursive: 0
[08:08:21.400] | reduce: FALSE
[08:08:21.401] | length: 4
[08:08:21.401] | elements: ‘a’, ‘b’, ‘c’, ‘d’
[08:08:21.401] | Number of remaining objects: 4
[08:08:21.401] | checking value #1:
[08:08:21.401] | 'obj' is atomic
[08:08:21.401] | signalConditionsASAP(numeric, pos=1) ...
[08:08:21.401] | : nx: 4
[08:08:21.401] | : relay: TRUE
[08:08:21.401] | : stdout: TRUE
[08:08:21.401] | : signal: TRUE
[08:08:21.402] | : resignal: FALSE
[08:08:21.402] | : force: TRUE
[08:08:21.402] | : relayed: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:21.402] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:21.402] | : until=2
[08:08:21.402] | : relaying element #2
[08:08:21.402] | : relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:21.402] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:21.402] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:21.403] | length: 3 (resolved future 1)
[08:08:21.403] value() for listenv ... done
[08:08:21.403] checking value #2:
[08:08:21.403] 'obj' is SequentialFuture
[08:08:21.403] resolved() for SequentialFuture (<unnamed-11>) ...
[08:08:21.403] | state: ‘finished’
[08:08:21.403] | run: TRUE
[08:08:21.403] | result: ‘FutureResult’
[08:08:21.404] resolved() for SequentialFuture (<unnamed-11>) ... done
[08:08:21.404] SequentialFuture #2
[08:08:21.404] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:21.404] | nx: 4
[08:08:21.404] | relay: TRUE
[08:08:21.404] | stdout: TRUE
[08:08:21.404] | signal: TRUE
[08:08:21.404] | resignal: FALSE
[08:08:21.404] | force: TRUE
[08:08:21.404] | relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:21.404] | queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:21.405] | until=2
[08:08:21.405] | relaying element #2
[08:08:21.405] | value() for SequentialFuture (<unnamed-11>) ...
[08:08:21.405] | : signalConditions() ...
[08:08:21.405] | : . include = ‘immediateCondition’
[08:08:21.405] | : . exclude = 
[08:08:21.405] | : . resignal = FALSE
[08:08:21.405] | : . Number of conditions: 6
[08:08:21.405] | : .  int 6
[08:08:21.406] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.406] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.406] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.406] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.406] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.406] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.406] | : signalConditions() ... done
[08:08:21.407] | : relay stdout ...
[08:08:21.407] | : relay stdout ... done
[08:08:21.408] | : check for misuse ...
[08:08:21.408] | : check for misuse ... done
[08:08:21.408] | value() for SequentialFuture (<unnamed-11>) ... done
[08:08:21.408] | signalConditions() ...
[08:08:21.408] | : include = ‘immediateCondition’
[08:08:21.408] | : exclude = 
[08:08:21.408] | : resignal = FALSE
[08:08:21.408] | : Number of conditions: 6
[08:08:21.408] | :  int 6
[08:08:21.409] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.409] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.409] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.409] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.409] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.409] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.409] | signalConditions() ... done
[08:08:21.410] | signalConditions() ...
[08:08:21.410] | : include = ‘condition’
[08:08:21.410] | : exclude = ‘error’, ‘immediateCondition’
[08:08:21.410] | : resignal = TRUE
[08:08:21.410] | : Number of conditions: 6
[08:08:21.410] | :  int 6
[08:08:21.410] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.411] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.288] | : . ' , attachPackages() ...
[08:08:21.411] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.411] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.288] | : . ' , ; packages: [n=1] ‘future’
[08:08:21.411] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.411] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.289] | : . ' , attachPackages() ... done
[08:08:21.411] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.411] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.289] | : . ' , attachPackages() ...
[08:08:21.411] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.411] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.289] | : . ' , ; packages: [n=0] 
[08:08:21.412] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.412] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.290] | : . ' , attachPackages() ... done
[08:08:21.412] | signalConditions() ... done
[08:08:21.412] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:21.412] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:21.412] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:21.412] value(<SequentialFuture>, ...) ...
[08:08:21.412] value(<SequentialFuture>, ...) ... done
[08:08:21.412] value() for SequentialFuture (<unnamed-11>) ...
[08:08:21.413] | signalConditions() ...
[08:08:21.413] | : include = ‘immediateCondition’
[08:08:21.413] | : exclude = 
[08:08:21.413] | : resignal = FALSE
[08:08:21.413] | : Number of conditions: 6
[08:08:21.413] | :  int 6
[08:08:21.413] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.413] | : already signaled, skipping
[08:08:21.414] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.414] | : already signaled, skipping
[08:08:21.414] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.414] | : already signaled, skipping
[08:08:21.414] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.414] | : already signaled, skipping
[08:08:21.414] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.414] | : already signaled, skipping
[08:08:21.414] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.414] | : already signaled, skipping
[08:08:21.415] | signalConditions() ... done
[08:08:21.415] | check for misuse ...
[08:08:21.415] | check for misuse ... done
[08:08:21.415] value() for SequentialFuture (<unnamed-11>) ... done
[08:08:21.415] value: <numeric>
[08:08:21.415] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:21.415] | nx: 4
[08:08:21.415] | relay: TRUE
[08:08:21.415] | stdout: TRUE
[08:08:21.415] | signal: TRUE
[08:08:21.415] | resignal: FALSE
[08:08:21.416] | force: TRUE
[08:08:21.416] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:21.416] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:21.416] | until=3
[08:08:21.416] | relaying element #3
[08:08:21.416] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:21.416] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:21.416] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:21.416] resolve() for SequentialFuture ...
[08:08:21.416] resolve() for SequentialFuture ... done
[08:08:21.417] length: 2 (resolved future 2)

[08:08:21.417] checking value #3:
[08:08:21.417] 'obj' is SequentialFuture
[08:08:21.417] resolved() for SequentialFuture (<unnamed-12>) ...
[08:08:21.417] | state: ‘finished’
[08:08:21.417] | run: TRUE
[08:08:21.417] | result: ‘FutureResult’
[08:08:21.417] resolved() for SequentialFuture (<unnamed-12>) ... done
[08:08:21.417] SequentialFuture #3
[08:08:21.417] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:21.418] | nx: 4
[08:08:21.418] | relay: TRUE
[08:08:21.418] | stdout: TRUE
[08:08:21.418] | signal: TRUE
[08:08:21.418] | resignal: FALSE
[08:08:21.418] | force: TRUE
[08:08:21.418] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:21.418] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:21.418] | until=3
[08:08:21.418] | relaying element #3
[08:08:21.418] | value() for SequentialFuture (<unnamed-12>) ...
[08:08:21.419] | : signalConditions() ...
[08:08:21.419] | : . include = ‘immediateCondition’
[08:08:21.419] | : . exclude = 
[08:08:21.419] | : . resignal = FALSE
[08:08:21.419] | : . Number of conditions: 6
[08:08:21.419] | : .  int 6
[08:08:21.419] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.419] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.420] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.420] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.420] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.420] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.420] | : signalConditions() ... done
[08:08:21.420] | : relay stdout ...
[08:08:21.420] | : relay stdout ... done
[08:08:21.420] | : check for misuse ...
[08:08:21.420] | : check for misuse ... done
[08:08:21.420] | value() for SequentialFuture (<unnamed-12>) ... done
[08:08:21.421] | signalConditions() ...
[08:08:21.421] | : include = ‘immediateCondition’
[08:08:21.421] | : exclude = 
[08:08:21.421] | : resignal = FALSE
[08:08:21.421] | : Number of conditions: 6
[08:08:21.421] | :  int 6
[08:08:21.421] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.422] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.422] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.422] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.422] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.422] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.422] | signalConditions() ... done
[08:08:21.422] | signalConditions() ...
[08:08:21.422] | : include = ‘condition’
[08:08:21.422] | : exclude = ‘error’, ‘immediateCondition’
[08:08:21.422] | : resignal = TRUE
[08:08:21.423] | : Number of conditions: 6
[08:08:21.423] | :  int 6
[08:08:21.423] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.423] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.321] | : . ' , attachPackages() ...
[08:08:21.423] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.423] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.322] | : . ' , ; packages: [n=1] ‘future’
[08:08:21.424] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.425] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.322] | : . ' , attachPackages() ... done
[08:08:21.426] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.426] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.322] | : . ' , attachPackages() ...
[08:08:21.426] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.426] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.322] | : . ' , ; packages: [n=0] 
[08:08:21.426] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.426] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.322] | : . ' , attachPackages() ... done
[08:08:21.426] | signalConditions() ... done
[08:08:21.426] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:21.427] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:21.427] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:21.427] value(<SequentialFuture>, ...) ...
[08:08:21.427] value(<SequentialFuture>, ...) ... done
[08:08:21.427] value() for SequentialFuture (<unnamed-12>) ...
[08:08:21.427] | signalConditions() ...
[08:08:21.427] | : include = ‘immediateCondition’
[08:08:21.427] | : exclude = 
[08:08:21.427] | : resignal = FALSE
[08:08:21.427] | : Number of conditions: 6
[08:08:21.428] | :  int 6
[08:08:21.428] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.428] | : already signaled, skipping
[08:08:21.428] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.428] | : already signaled, skipping
[08:08:21.428] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.428] | : already signaled, skipping
[08:08:21.429] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.429] | : already signaled, skipping
[08:08:21.429] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.429] | : already signaled, skipping
[08:08:21.429] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.429] | : already signaled, skipping
[08:08:21.429] | signalConditions() ... done
[08:08:21.429] | check for misuse ...
[08:08:21.429] | check for misuse ... done
[08:08:21.429] value() for SequentialFuture (<unnamed-12>) ... done
[08:08:21.429] value: <NULL>
[08:08:21.430] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:21.430] | nx: 4
[08:08:21.430] | relay: TRUE
[08:08:21.430] | stdout: TRUE
[08:08:21.430] | signal: TRUE
[08:08:21.430] | resignal: FALSE
[08:08:21.430] | force: TRUE
[08:08:21.430] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:21.430] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:21.430] | until=4
[08:08:21.431] | relaying element #4
[08:08:21.431] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:21.431] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:21.431] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:21.431] resolve() for SequentialFuture ...
[08:08:21.431] resolve() for SequentialFuture ... done
[08:08:21.431] length: 1 (resolved future 3)

[08:08:21.431] checking value #4:
[08:08:21.431] 'obj' is atomic
[08:08:21.431] signalConditionsASAP(numeric, pos=4) ...
[08:08:21.432] | nx: 4
[08:08:21.432] | relay: TRUE
[08:08:21.432] | stdout: TRUE
[08:08:21.432] | signal: TRUE
[08:08:21.432] | resignal: FALSE
[08:08:21.432] | force: TRUE
[08:08:21.432] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:21.432] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:21.432] | until=4
[08:08:21.432] | relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:21.432] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:21.433] signalConditionsASAP(numeric, pos=4) ... done
[08:08:21.433] length: 0 (resolved future 4)

[08:08:21.433] Relaying remaining futures ...
[08:08:21.433] | signalConditionsASAP(NULL, pos=0) ...
[08:08:21.433] | : nx: 4
[08:08:21.433] | : relay: TRUE
[08:08:21.433] | : stdout: TRUE
[08:08:21.433] | : signal: TRUE
[08:08:21.433] | : resignal: FALSE
[08:08:21.434] | : force: TRUE
[08:08:21.434] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:21.434] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
 - flush all
[08:08:21.434] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:21.434] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:21.434] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:21.434] Relaying remaining futures ... done

List of 4
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
Dimensions: c(1, 6)
[08:08:21.436] future(..., label = NULL) ...
[08:08:21.436] | lazy: FALSE
[08:08:21.436] | stdout: TRUE
[08:08:21.436] | conditions: [n=1] ‘condition’
[08:08:21.436] | gc: FALSE
[08:08:21.436] | earlySignal: FALSE
[08:08:21.436] | getGlobalsAndPackages() ...
[08:08:21.436] | : Searching for globals ...
[08:08:21.438] | : . globals found: [0] 
[08:08:21.438] | : Searching for globals ... done
[08:08:21.438] | : globals: [0] <none>
[08:08:21.438] | : packages: [0] <none>
[08:08:21.438] | getGlobalsAndPackages() ... done
[08:08:21.438] | run() for ‘Future’ (<unnamed-14>) ...
[08:08:21.438] | : state: ‘created’
[08:08:21.438] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.439] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.439] | : Using SequentialFutureBackend ...
[08:08:21.439] | : . Number of futures since start: 13 (13 created, 13 launched, 13 finished)
[08:08:21.439] | : . Launching futures ...
[08:08:21.439] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:21.439] | : . ' , getFutureData() ...
[08:08:21.439] | : . ' , ; getFutureCore() ...
[08:08:21.439] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:21.439] | : . ' , ; getFutureCore() ... done
[08:08:21.439] | : . ' , ; getFutureCapture() ...
[08:08:21.440] | : . ' , ; getFutureCapture() ... done
[08:08:21.440] | : . ' , ; getFutureContext() ...
[08:08:21.440] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.440] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:21.440] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.440] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:21.440] | : . ' , ; getFutureContext() ... done
[08:08:21.440] | : . ' , getFutureData() ... done
[08:08:21.442] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.442] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:21.442] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.442] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.442] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.442] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:21.442] | : . ' , ; ` | New stack:
[08:08:21.442] | : . ' , ; ` | List of 1
[08:08:21.442] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.442] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.442] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:21.442] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.442] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.442] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.442] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.442] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.446] | : . ' , ; ` | Old stack:
[08:08:21.446] | : . ' , ; ` | List of 1
[08:08:21.446] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.446] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.446] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:21.446] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.446] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.446] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.446] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:21.446] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.446] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.446] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.446] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.449] | : . ' , ; ` | Not identical
[08:08:21.449] | : . ' , ; ` | all.equal() for future ...
[08:08:21.449] | : . ' , ; ` | : List of 2
[08:08:21.449] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.449] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.449] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:21.449] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.449] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.449] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.449] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.449] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.449] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.449] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.449] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.449] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.449] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.449] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.449] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.449] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.449] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.454] | : . ' , ; ` | all.equal() for future ... done
[08:08:21.454] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:21.454] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.455] | : . ' , ; ` List of future strategies:
[08:08:21.455] | : . ' , ; ` 1. sequential:
[08:08:21.455] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.455] | : . ' , ; `    - tweaked: FALSE
[08:08:21.455] | : . ' , ; `    - call: plan(sequential)
[08:08:21.455] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.455] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.457] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.457] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.457] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.457] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:21.457] | : . ' , ; ` | : New stack:
[08:08:21.457] | : . ' , ; ` | : List of 1
[08:08:21.457] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.457] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.457] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.457] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.457] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.457] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.457] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.457] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.457] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.457] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.457] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.460] | : . ' , ; ` | : Old stack:
[08:08:21.460] | : . ' , ; ` | : List of 1
[08:08:21.460] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.460] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.460] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.460] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.460] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.460] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.460] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.460] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.460] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.460] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.460] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.464] | : . ' , ; ` | : Identical
[08:08:21.465] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:21.465] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.465] | : . ' , ; ` | List of future strategies:
[08:08:21.465] | : . ' , ; ` | 1. sequential:
[08:08:21.465] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.465] | : . ' , ; ` |    - tweaked: FALSE
[08:08:21.465] | : . ' , ; ` |    - call: plan(sequential)
[08:08:21.465] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.465] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.465] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.466] | : . ' , SequentialFuture started (and completed)
[08:08:21.466] | : . ' , signalConditions() ...
[08:08:21.466] | : . ' , ; include = ‘immediateCondition’
[08:08:21.466] | : . ' , ; exclude = 
[08:08:21.466] | : . ' , ; resignal = FALSE
[08:08:21.466] | : . ' , ; Number of conditions: 6
[08:08:21.466] | : . ' , ;  int 6
[08:08:21.467] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.467] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.467] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.467] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.467] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.467] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.467] | : . ' , signalConditions() ... done
[08:08:21.467] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:21.468] | : . Launching futures ... done
[08:08:21.468] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:21.468] | : Using SequentialFutureBackend ... done
[08:08:21.468] | run() for ‘Future’ (<unnamed-14>) ... done
[08:08:21.468] future(..., label = NULL) ... done
[08:08:21.468] future(..., label = NULL) ...
[08:08:21.468] | lazy: FALSE
[08:08:21.468] | stdout: TRUE
[08:08:21.468] | conditions: [n=1] ‘condition’
[08:08:21.468] | gc: FALSE
[08:08:21.468] | earlySignal: FALSE
[08:08:21.469] | getGlobalsAndPackages() ...
[08:08:21.469] | : Searching for globals ...
[08:08:21.470] | : . globals found: [0] 
[08:08:21.470] | : Searching for globals ... done
[08:08:21.470] | : globals: [0] <none>
[08:08:21.470] | : packages: [0] <none>
[08:08:21.470] | getGlobalsAndPackages() ... done
[08:08:21.470] | run() for ‘Future’ (<unnamed-15>) ...
[08:08:21.470] | : state: ‘created’
[08:08:21.471] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.471] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.471] | : Using SequentialFutureBackend ...
[08:08:21.471] | : . Number of futures since start: 14 (14 created, 14 launched, 14 finished)
[08:08:21.471] | : . Launching futures ...
[08:08:21.471] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:21.471] | : . ' , getFutureData() ...
[08:08:21.471] | : . ' , ; getFutureCore() ...
[08:08:21.471] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:21.471] | : . ' , ; getFutureCore() ... done
[08:08:21.472] | : . ' , ; getFutureCapture() ...
[08:08:21.472] | : . ' , ; getFutureCapture() ... done
[08:08:21.472] | : . ' , ; getFutureContext() ...
[08:08:21.472] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.472] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:21.472] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.472] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:21.472] | : . ' , ; getFutureContext() ... done
[08:08:21.472] | : . ' , getFutureData() ... done
[08:08:21.474] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.474] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:21.474] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.474] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.474] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.474] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:21.474] | : . ' , ; ` | New stack:
[08:08:21.475] | : . ' , ; ` | List of 1
[08:08:21.475] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.475] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.475] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:21.475] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.475] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.475] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.475] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.475] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.477] | : . ' , ; ` | Old stack:
[08:08:21.477] | : . ' , ; ` | List of 1
[08:08:21.477] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.477] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.477] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:21.477] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.477] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.477] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.477] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:21.477] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.477] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.477] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.477] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.481] | : . ' , ; ` | Not identical
[08:08:21.481] | : . ' , ; ` | all.equal() for future ...
[08:08:21.481] | : . ' , ; ` | : List of 2
[08:08:21.481] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.481] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.481] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:21.481] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.481] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.481] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.481] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.481] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.481] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.481] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.481] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.481] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.481] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.481] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.481] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.481] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.481] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.486] | : . ' , ; ` | all.equal() for future ... done
[08:08:21.487] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:21.487] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.487] | : . ' , ; ` List of future strategies:
[08:08:21.487] | : . ' , ; ` 1. sequential:
[08:08:21.487] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.487] | : . ' , ; `    - tweaked: FALSE
[08:08:21.487] | : . ' , ; `    - call: plan(sequential)
[08:08:21.487] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.487] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.489] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.489] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.489] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.489] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:21.489] | : . ' , ; ` | : New stack:
[08:08:21.489] | : . ' , ; ` | : List of 1
[08:08:21.489] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.489] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.489] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.489] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.489] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.489] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.489] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.489] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.489] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.489] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.489] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.492] | : . ' , ; ` | : Old stack:
[08:08:21.493] | : . ' , ; ` | : List of 1
[08:08:21.493] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.493] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.493] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.493] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.493] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.493] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.493] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.493] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.493] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.493] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.493] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.496] | : . ' , ; ` | : Identical
[08:08:21.496] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:21.496] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.496] | : . ' , ; ` | List of future strategies:
[08:08:21.496] | : . ' , ; ` | 1. sequential:
[08:08:21.496] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.496] | : . ' , ; ` |    - tweaked: FALSE
[08:08:21.496] | : . ' , ; ` |    - call: plan(sequential)
[08:08:21.496] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.496] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.496] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.497] | : . ' , SequentialFuture started (and completed)
[08:08:21.497] | : . ' , signalConditions() ...
[08:08:21.497] | : . ' , ; include = ‘immediateCondition’
[08:08:21.497] | : . ' , ; exclude = 
[08:08:21.498] | : . ' , ; resignal = FALSE
[08:08:21.498] | : . ' , ; Number of conditions: 6
[08:08:21.498] | : . ' , ;  int 6
[08:08:21.499] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.499] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.499] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.499] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.499] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.499] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.499] | : . ' , signalConditions() ... done
[08:08:21.499] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:21.500] | : . Launching futures ... done
[08:08:21.500] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:21.500] | : Using SequentialFutureBackend ... done
[08:08:21.500] | run() for ‘Future’ (<unnamed-15>) ... done
[08:08:21.500] future(..., label = NULL) ... done
[08:08:21.500] future(..., label = NULL) ...
[08:08:21.500] | lazy: FALSE
[08:08:21.501] | stdout: TRUE
[08:08:21.501] | conditions: [n=1] ‘condition’
[08:08:21.501] | gc: FALSE
[08:08:21.501] | earlySignal: FALSE
[08:08:21.501] | getGlobalsAndPackages() ...
[08:08:21.501] | : Searching for globals ...
[08:08:21.504] | : . globals found: [1] ‘{’
[08:08:21.504] | : Searching for globals ... done
[08:08:21.504] | : Resolving globals: FALSE
[08:08:21.504] | : Search for packages associated with the globals ...
[08:08:21.504] | : . Packages associated with globals: [1] ‘base’
[08:08:21.505] | : . Packages: [1] ‘base’
[08:08:21.505] | : Search for packages associated with the globals ... done
[08:08:21.505] | : Packages after dropping 'base': [0] 
[08:08:21.505] | : globals: [0] 
[08:08:21.505] | : packages: [0] 
[08:08:21.505] | getGlobalsAndPackages() ... done
[08:08:21.505] | run() for ‘Future’ (<unnamed-16>) ...
[08:08:21.506] | : state: ‘created’
[08:08:21.506] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.506] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.506] | : Using SequentialFutureBackend ...
[08:08:21.506] | : . Number of futures since start: 15 (15 created, 15 launched, 15 finished)
[08:08:21.506] | : . Launching futures ...
[08:08:21.506] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:21.506] | : . ' , getFutureData() ...
[08:08:21.507] | : . ' , ; getFutureCore() ...
[08:08:21.507] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:21.507] | : . ' , ; getFutureCore() ... done
[08:08:21.507] | : . ' , ; getFutureCapture() ...
[08:08:21.507] | : . ' , ; getFutureCapture() ... done
[08:08:21.507] | : . ' , ; getFutureContext() ...
[08:08:21.507] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.507] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:21.507] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.508] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:21.508] | : . ' , ; getFutureContext() ... done
[08:08:21.508] | : . ' , getFutureData() ... done
[08:08:21.509] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.509] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:21.509] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.510] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.510] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.510] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:21.510] | : . ' , ; ` | New stack:
[08:08:21.510] | : . ' , ; ` | List of 1
[08:08:21.510] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.510] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.510] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:21.510] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.510] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.510] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.510] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.510] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.513] | : . ' , ; ` | Old stack:
[08:08:21.513] | : . ' , ; ` | List of 1
[08:08:21.513] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.513] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.513] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:21.513] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.513] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.513] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.513] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:21.513] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.513] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.513] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.513] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.518] | : . ' , ; ` | Not identical
[08:08:21.518] | : . ' , ; ` | all.equal() for future ...
[08:08:21.518] | : . ' , ; ` | : List of 2
[08:08:21.518] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.518] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.518] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:21.518] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.518] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.518] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.518] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.518] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.518] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.518] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.518] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.518] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.518] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.518] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.518] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.518] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.518] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.524] | : . ' , ; ` | all.equal() for future ... done
[08:08:21.524] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:21.524] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.524] | : . ' , ; ` List of future strategies:
[08:08:21.524] | : . ' , ; ` 1. sequential:
[08:08:21.524] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.524] | : . ' , ; `    - tweaked: FALSE
[08:08:21.524] | : . ' , ; `    - call: plan(sequential)
[08:08:21.524] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.524] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.526] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.526] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.526] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.526] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:21.526] | : . ' , ; ` | : New stack:
[08:08:21.527] | : . ' , ; ` | : List of 1
[08:08:21.527] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.527] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.527] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.527] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.527] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.527] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.527] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.527] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.527] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.527] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.527] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.530] | : . ' , ; ` | : Old stack:
[08:08:21.530] | : . ' , ; ` | : List of 1
[08:08:21.530] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.530] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.530] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.530] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.530] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.530] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.530] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.530] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.530] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.530] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.530] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.533] | : . ' , ; ` | : Identical
[08:08:21.533] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:21.533] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.533] | : . ' , ; ` | List of future strategies:
[08:08:21.533] | : . ' , ; ` | 1. sequential:
[08:08:21.533] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.533] | : . ' , ; ` |    - tweaked: FALSE
[08:08:21.533] | : . ' , ; ` |    - call: plan(sequential)
[08:08:21.534] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.534] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.534] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.534] | : . ' , SequentialFuture started (and completed)
[08:08:21.535] | : . ' , signalConditions() ...
[08:08:21.535] | : . ' , ; include = ‘immediateCondition’
[08:08:21.535] | : . ' , ; exclude = 
[08:08:21.535] | : . ' , ; resignal = FALSE
[08:08:21.535] | : . ' , ; Number of conditions: 6
[08:08:21.535] | : . ' , ;  int 6
[08:08:21.536] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.537] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.537] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.537] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.537] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.537] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.537] | : . ' , signalConditions() ... done
[08:08:21.537] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:21.537] | : . Launching futures ... done
[08:08:21.537] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:21.538] | : Using SequentialFutureBackend ... done
[08:08:21.538] | run() for ‘Future’ (<unnamed-16>) ... done
[08:08:21.538] future(..., label = NULL) ... done
<environment: 0x564301953e60> 
<environment: 0x564300361790> 
[08:08:21.539] resolved() for environment ...
[08:08:21.539] | resolved() for list ...
[08:08:21.539] | : Number of elements: 4
[08:08:21.539] | : Number of futures: 4
[08:08:21.539] | : resolved() for SequentialFuture (<unnamed-14>) ...
[08:08:21.540] | : . state: ‘finished’
[08:08:21.540] | : . run: TRUE
[08:08:21.540] | : . result: ‘FutureResult’
[08:08:21.540] | : resolved() for SequentialFuture (<unnamed-14>) ... done
[08:08:21.540] | : resolved() for SequentialFuture (<unnamed-15>) ...
[08:08:21.540] | : . state: ‘finished’
[08:08:21.540] | : . run: TRUE
[08:08:21.540] | : . result: ‘FutureResult’
[08:08:21.540] | : resolved() for SequentialFuture (<unnamed-15>) ... done
[08:08:21.540] | : resolved() for SequentialFuture (<unnamed-16>) ...
[08:08:21.541] | : . state: ‘finished’
[08:08:21.541] | : . run: TRUE
[08:08:21.541] | : . result: ‘FutureResult’
[08:08:21.541] | : resolved() for SequentialFuture (<unnamed-16>) ... done
[08:08:21.541] | resolved() for list ... done
[08:08:21.541] resolved() for environment ... done
 Named logi [1:4] TRUE TRUE TRUE TRUE
 - attr(*, "names")= chr [1:4] "a" "b" "c" "d"
[08:08:21.542] value() for SequentialFuture (<unnamed-16>) ...
[08:08:21.542] | signalConditions() ...
[08:08:21.542] | : include = ‘immediateCondition’
[08:08:21.542] | : exclude = 
[08:08:21.542] | : resignal = FALSE
[08:08:21.542] | : Number of conditions: 6
[08:08:21.542] | :  int 6
[08:08:21.543] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.543] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.543] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.543] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.543] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.543] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.543] | signalConditions() ... done
[08:08:21.544] | relay stdout ...
[08:08:21.544] | relay stdout ... done
[08:08:21.544] | check for misuse ...
[08:08:21.544] | check for misuse ... done
[08:08:21.544] | relay conditions ...
[08:08:21.544] | : Future state: ‘finished’
[08:08:21.544] | : signalConditions() ...
[08:08:21.544] | : . include = ‘condition’
[08:08:21.544] | : . exclude = ‘immediateCondition’
[08:08:21.544] | : . resignal = TRUE
[08:08:21.545] | : . Number of conditions: 6
[08:08:21.545] | : .  int 6
[08:08:21.545] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.545] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.508] | : . ' , attachPackages() ...
[08:08:21.545] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.545] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.508] | : . ' , ; packages: [n=1] ‘future’
[08:08:21.545] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.546] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.508] | : . ' , attachPackages() ... done
[08:08:21.546] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.546] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.508] | : . ' , attachPackages() ...
[08:08:21.546] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.546] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.509] | : . ' , ; packages: [n=0] 
[08:08:21.546] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.546] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.509] | : . ' , attachPackages() ... done
[08:08:21.546] | : signalConditions() ... done
[08:08:21.547] | relay conditions ... done
[08:08:21.547] value() for SequentialFuture (<unnamed-16>) ... done
[08:08:21.547] value() for listenv ...
[08:08:21.547] | recursive: 0
[08:08:21.547] | reduce: FALSE
[08:08:21.548] | length: 4
[08:08:21.548] | elements: ‘a’, ‘b’, ‘c’, ‘d’
[08:08:21.548] | Number of remaining objects: 4
[08:08:21.548] | checking value #1:
[08:08:21.548] | 'obj' is atomic
[08:08:21.548] | signalConditionsASAP(numeric, pos=1) ...
[08:08:21.548] | : nx: 4
[08:08:21.548] | : relay: TRUE
[08:08:21.548] | : stdout: TRUE
[08:08:21.549] | : signal: TRUE
[08:08:21.549] | : resignal: FALSE
[08:08:21.549] | : force: TRUE
[08:08:21.549] | : relayed: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:21.549] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:21.549] | : until=2
[08:08:21.549] | : relaying element #2
[08:08:21.549] | : relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:21.549] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:21.549] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:21.550] | length: 3 (resolved future 1)
[08:08:21.550] value() for listenv ... done
[08:08:21.550] checking value #2:
[08:08:21.550] 'obj' is SequentialFuture
[08:08:21.550] resolved() for SequentialFuture (<unnamed-14>) ...
[08:08:21.550] | state: ‘finished’
[08:08:21.550] | run: TRUE
[08:08:21.550] | result: ‘FutureResult’
[08:08:21.550] resolved() for SequentialFuture (<unnamed-14>) ... done
[08:08:21.550] SequentialFuture #2
[08:08:21.551] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:21.551] | nx: 4
[08:08:21.551] | relay: TRUE
[08:08:21.551] | stdout: TRUE
[08:08:21.551] | signal: TRUE
[08:08:21.551] | resignal: FALSE
[08:08:21.551] | force: TRUE
[08:08:21.551] | relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:21.551] | queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:21.551] | until=2
[08:08:21.551] | relaying element #2
[08:08:21.552] | value() for SequentialFuture (<unnamed-14>) ...
[08:08:21.552] | : signalConditions() ...
[08:08:21.552] | : . include = ‘immediateCondition’
[08:08:21.552] | : . exclude = 
[08:08:21.552] | : . resignal = FALSE
[08:08:21.552] | : . Number of conditions: 6
[08:08:21.552] | : .  int 6
[08:08:21.553] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.553] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.553] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.553] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.553] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.553] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.553] | : signalConditions() ... done
[08:08:21.553] | : relay stdout ...
[08:08:21.553] | : relay stdout ... done
[08:08:21.554] | : check for misuse ...
[08:08:21.555] | : check for misuse ... done
[08:08:21.555] | value() for SequentialFuture (<unnamed-14>) ... done
[08:08:21.555] | signalConditions() ...
[08:08:21.555] | : include = ‘immediateCondition’
[08:08:21.555] | : exclude = 
[08:08:21.555] | : resignal = FALSE
[08:08:21.555] | : Number of conditions: 6
[08:08:21.555] | :  int 6
[08:08:21.556] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.556] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.556] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.556] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.556] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.556] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.556] | signalConditions() ... done
[08:08:21.556] | signalConditions() ...
[08:08:21.557] | : include = ‘condition’
[08:08:21.557] | : exclude = ‘error’, ‘immediateCondition’
[08:08:21.557] | : resignal = TRUE
[08:08:21.557] | : Number of conditions: 6
[08:08:21.557] | :  int 6
[08:08:21.557] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.557] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.441] | : . ' , attachPackages() ...
[08:08:21.558] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.558] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.441] | : . ' , ; packages: [n=1] ‘future’
[08:08:21.558] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.558] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.441] | : . ' , attachPackages() ... done
[08:08:21.558] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.558] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.441] | : . ' , attachPackages() ...
[08:08:21.558] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.558] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.441] | : . ' , ; packages: [n=0] 
[08:08:21.559] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.559] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.441] | : . ' , attachPackages() ... done
[08:08:21.559] | signalConditions() ... done
[08:08:21.559] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:21.559] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:21.559] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:21.559] value(<SequentialFuture>, ...) ...
[08:08:21.559] value(<SequentialFuture>, ...) ... done
[08:08:21.559] value() for SequentialFuture (<unnamed-14>) ...
[08:08:21.560] | signalConditions() ...
[08:08:21.560] | : include = ‘immediateCondition’
[08:08:21.560] | : exclude = 
[08:08:21.560] | : resignal = FALSE
[08:08:21.560] | : Number of conditions: 6
[08:08:21.560] | :  int 6
[08:08:21.560] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.560] | : already signaled, skipping
[08:08:21.561] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.561] | : already signaled, skipping
[08:08:21.561] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.561] | : already signaled, skipping
[08:08:21.561] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.561] | : already signaled, skipping
[08:08:21.561] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.561] | : already signaled, skipping
[08:08:21.561] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.561] | : already signaled, skipping
[08:08:21.562] | signalConditions() ... done
[08:08:21.562] | check for misuse ...
[08:08:21.562] | check for misuse ... done
[08:08:21.562] value() for SequentialFuture (<unnamed-14>) ... done
[08:08:21.562] value: <numeric>
[08:08:21.562] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:21.562] | nx: 4
[08:08:21.562] | relay: TRUE
[08:08:21.562] | stdout: TRUE
[08:08:21.562] | signal: TRUE
[08:08:21.563] | resignal: FALSE
[08:08:21.563] | force: TRUE
[08:08:21.563] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:21.563] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:21.563] | until=3
[08:08:21.563] | relaying element #3
[08:08:21.563] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:21.563] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:21.563] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:21.563] resolve() for SequentialFuture ...
[08:08:21.563] resolve() for SequentialFuture ... done
[08:08:21.564] length: 2 (resolved future 2)

[08:08:21.564] checking value #3:
[08:08:21.564] 'obj' is SequentialFuture
[08:08:21.564] resolved() for SequentialFuture (<unnamed-15>) ...
[08:08:21.564] | state: ‘finished’
[08:08:21.564] | run: TRUE
[08:08:21.564] | result: ‘FutureResult’
[08:08:21.564] resolved() for SequentialFuture (<unnamed-15>) ... done
[08:08:21.564] SequentialFuture #3
[08:08:21.565] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:21.565] | nx: 4
[08:08:21.565] | relay: TRUE
[08:08:21.565] | stdout: TRUE
[08:08:21.565] | signal: TRUE
[08:08:21.565] | resignal: FALSE
[08:08:21.565] | force: TRUE
[08:08:21.565] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:21.565] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:21.565] | until=3
[08:08:21.565] | relaying element #3
[08:08:21.566] | value() for SequentialFuture (<unnamed-15>) ...
[08:08:21.566] | : signalConditions() ...
[08:08:21.566] | : . include = ‘immediateCondition’
[08:08:21.566] | : . exclude = 
[08:08:21.566] | : . resignal = FALSE
[08:08:21.566] | : . Number of conditions: 6
[08:08:21.566] | : .  int 6
[08:08:21.567] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.567] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.567] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.567] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.567] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.567] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.567] | : signalConditions() ... done
[08:08:21.567] | : relay stdout ...
[08:08:21.567] | : relay stdout ... done
[08:08:21.568] | : check for misuse ...
[08:08:21.568] | : check for misuse ... done
[08:08:21.568] | value() for SequentialFuture (<unnamed-15>) ... done
[08:08:21.568] | signalConditions() ...
[08:08:21.568] | : include = ‘immediateCondition’
[08:08:21.568] | : exclude = 
[08:08:21.568] | : resignal = FALSE
[08:08:21.568] | : Number of conditions: 6
[08:08:21.568] | :  int 6
[08:08:21.569] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.569] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.569] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.569] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.569] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.569] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.569] | signalConditions() ... done
[08:08:21.570] | signalConditions() ...
[08:08:21.570] | : include = ‘condition’
[08:08:21.570] | : exclude = ‘error’, ‘immediateCondition’
[08:08:21.570] | : resignal = TRUE
[08:08:21.570] | : Number of conditions: 6
[08:08:21.570] | :  int 6
[08:08:21.570] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.570] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.473] | : . ' , attachPackages() ...
[08:08:21.571] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.571] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.473] | : . ' , ; packages: [n=1] ‘future’
[08:08:21.571] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.571] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.473] | : . ' , attachPackages() ... done
[08:08:21.571] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.571] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.473] | : . ' , attachPackages() ...
[08:08:21.571] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.571] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.473] | : . ' , ; packages: [n=0] 
[08:08:21.572] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.573] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.473] | : . ' , attachPackages() ... done
[08:08:21.573] | signalConditions() ... done
[08:08:21.573] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:21.573] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:21.573] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:21.573] value(<SequentialFuture>, ...) ...
[08:08:21.574] value(<SequentialFuture>, ...) ... done
[08:08:21.574] value() for SequentialFuture (<unnamed-15>) ...
[08:08:21.574] | signalConditions() ...
[08:08:21.574] | : include = ‘immediateCondition’
[08:08:21.574] | : exclude = 
[08:08:21.574] | : resignal = FALSE
[08:08:21.574] | : Number of conditions: 6
[08:08:21.574] | :  int 6
[08:08:21.575] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.575] | : already signaled, skipping
[08:08:21.575] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.575] | : already signaled, skipping
[08:08:21.575] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.575] | : already signaled, skipping
[08:08:21.575] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.575] | : already signaled, skipping
[08:08:21.576] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.576] | : already signaled, skipping
[08:08:21.576] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.576] | : already signaled, skipping
[08:08:21.576] | signalConditions() ... done
[08:08:21.576] | check for misuse ...
[08:08:21.576] | check for misuse ... done
[08:08:21.576] value() for SequentialFuture (<unnamed-15>) ... done
[08:08:21.576] value: <NULL>
[08:08:21.577] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:21.577] | nx: 4
[08:08:21.577] | relay: TRUE
[08:08:21.577] | stdout: TRUE
[08:08:21.577] | signal: TRUE
[08:08:21.577] | resignal: FALSE
[08:08:21.577] | force: TRUE
[08:08:21.577] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:21.577] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:21.577] | until=4
[08:08:21.577] | relaying element #4
[08:08:21.578] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:21.578] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:21.578] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:21.578] resolve() for SequentialFuture ...
[08:08:21.578] resolve() for SequentialFuture ... done
[08:08:21.578] length: 1 (resolved future 3)

[08:08:21.578] checking value #4:
[08:08:21.578] 'obj' is atomic
[08:08:21.578] signalConditionsASAP(numeric, pos=4) ...
[08:08:21.578] | nx: 4
[08:08:21.579] | relay: TRUE
[08:08:21.579] | stdout: TRUE
[08:08:21.579] | signal: TRUE
[08:08:21.579] | resignal: FALSE
[08:08:21.579] | force: TRUE
[08:08:21.579] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:21.579] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:21.579] | until=4
[08:08:21.579] | relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:21.579] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:21.579] signalConditionsASAP(numeric, pos=4) ... done
[08:08:21.580] length: 0 (resolved future 4)

[08:08:21.580] Relaying remaining futures ...
[08:08:21.580] | signalConditionsASAP(NULL, pos=0) ...
[08:08:21.580] | : nx: 4
[08:08:21.580] | : relay: TRUE
[08:08:21.580] | : stdout: TRUE
[08:08:21.580] | : signal: TRUE
[08:08:21.580] | : resignal: FALSE
[08:08:21.580] | : force: TRUE
[08:08:21.581] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:21.581] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
 - flush all
[08:08:21.581] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:21.581] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:21.581] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:21.581] Relaying remaining futures ... done

List of 4
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
Dimensions: c(2, 3)
[08:08:21.583] future(..., label = NULL) ...
[08:08:21.583] | lazy: FALSE
[08:08:21.583] | stdout: TRUE
[08:08:21.583] | conditions: [n=1] ‘condition’
[08:08:21.583] | gc: FALSE
[08:08:21.583] | earlySignal: FALSE
[08:08:21.583] | getGlobalsAndPackages() ...
[08:08:21.583] | : Searching for globals ...
[08:08:21.585] | : . globals found: [0] 
[08:08:21.585] | : Searching for globals ... done
[08:08:21.585] | : globals: [0] <none>
[08:08:21.585] | : packages: [0] <none>
[08:08:21.585] | getGlobalsAndPackages() ... done
[08:08:21.585] | run() for ‘Future’ (<unnamed-17>) ...
[08:08:21.585] | : state: ‘created’
[08:08:21.586] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.586] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.586] | : Using SequentialFutureBackend ...
[08:08:21.586] | : . Number of futures since start: 16 (16 created, 16 launched, 16 finished)
[08:08:21.586] | : . Launching futures ...
[08:08:21.586] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:21.586] | : . ' , getFutureData() ...
[08:08:21.586] | : . ' , ; getFutureCore() ...
[08:08:21.586] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:21.586] | : . ' , ; getFutureCore() ... done
[08:08:21.587] | : . ' , ; getFutureCapture() ...
[08:08:21.587] | : . ' , ; getFutureCapture() ... done
[08:08:21.587] | : . ' , ; getFutureContext() ...
[08:08:21.587] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.587] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:21.587] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.587] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:21.587] | : . ' , ; getFutureContext() ... done
[08:08:21.587] | : . ' , getFutureData() ... done
[08:08:21.589] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.589] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:21.589] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.589] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.589] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.589] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:21.590] | : . ' , ; ` | New stack:
[08:08:21.590] | : . ' , ; ` | List of 1
[08:08:21.590] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.590] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.590] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:21.590] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.590] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.590] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.590] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.590] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.593] | : . ' , ; ` | Old stack:
[08:08:21.593] | : . ' , ; ` | List of 1
[08:08:21.593] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.593] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.593] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:21.593] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.593] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.593] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.593] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:21.593] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.593] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.593] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.593] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.597] | : . ' , ; ` | Not identical
[08:08:21.597] | : . ' , ; ` | all.equal() for future ...
[08:08:21.597] | : . ' , ; ` | : List of 2
[08:08:21.597] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.597] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.597] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:21.597] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.597] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.597] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.597] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.597] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.597] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.597] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.597] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.597] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.597] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.597] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.597] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.597] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.597] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.602] | : . ' , ; ` | all.equal() for future ... done
[08:08:21.602] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:21.602] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.602] | : . ' , ; ` List of future strategies:
[08:08:21.602] | : . ' , ; ` 1. sequential:
[08:08:21.602] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.602] | : . ' , ; `    - tweaked: FALSE
[08:08:21.602] | : . ' , ; `    - call: plan(sequential)
[08:08:21.603] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.603] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.604] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.604] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.605] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.605] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:21.605] | : . ' , ; ` | : New stack:
[08:08:21.605] | : . ' , ; ` | : List of 1
[08:08:21.605] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.605] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.605] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.605] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.605] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.605] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.605] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.605] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.605] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.605] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.605] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.609] | : . ' , ; ` | : Old stack:
[08:08:21.609] | : . ' , ; ` | : List of 1
[08:08:21.609] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.609] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.609] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.609] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.609] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.609] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.609] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.609] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.609] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.609] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.609] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.612] | : . ' , ; ` | : Identical
[08:08:21.612] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:21.613] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.613] | : . ' , ; ` | List of future strategies:
[08:08:21.613] | : . ' , ; ` | 1. sequential:
[08:08:21.613] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.613] | : . ' , ; ` |    - tweaked: FALSE
[08:08:21.613] | : . ' , ; ` |    - call: plan(sequential)
[08:08:21.613] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.613] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.613] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.614] | : . ' , SequentialFuture started (and completed)
[08:08:21.614] | : . ' , signalConditions() ...
[08:08:21.614] | : . ' , ; include = ‘immediateCondition’
[08:08:21.614] | : . ' , ; exclude = 
[08:08:21.614] | : . ' , ; resignal = FALSE
[08:08:21.614] | : . ' , ; Number of conditions: 6
[08:08:21.614] | : . ' , ;  int 6
[08:08:21.615] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.615] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.615] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.615] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.615] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.615] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.615] | : . ' , signalConditions() ... done
[08:08:21.615] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:21.615] | : . Launching futures ... done
[08:08:21.616] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:21.616] | : Using SequentialFutureBackend ... done
[08:08:21.616] | run() for ‘Future’ (<unnamed-17>) ... done
[08:08:21.616] future(..., label = NULL) ... done
[08:08:21.616] future(..., label = NULL) ...
[08:08:21.616] | lazy: FALSE
[08:08:21.616] | stdout: TRUE
[08:08:21.616] | conditions: [n=1] ‘condition’
[08:08:21.616] | gc: FALSE
[08:08:21.616] | earlySignal: FALSE
[08:08:21.617] | getGlobalsAndPackages() ...
[08:08:21.617] | : Searching for globals ...
[08:08:21.618] | : . globals found: [0] 
[08:08:21.618] | : Searching for globals ... done
[08:08:21.618] | : globals: [0] <none>
[08:08:21.618] | : packages: [0] <none>
[08:08:21.618] | getGlobalsAndPackages() ... done
[08:08:21.618] | run() for ‘Future’ (<unnamed-18>) ...
[08:08:21.618] | : state: ‘created’
[08:08:21.619] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.619] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.619] | : Using SequentialFutureBackend ...
[08:08:21.619] | : . Number of futures since start: 17 (17 created, 17 launched, 17 finished)
[08:08:21.619] | : . Launching futures ...
[08:08:21.619] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:21.619] | : . ' , getFutureData() ...
[08:08:21.619] | : . ' , ; getFutureCore() ...
[08:08:21.619] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:21.620] | : . ' , ; getFutureCore() ... done
[08:08:21.620] | : . ' , ; getFutureCapture() ...
[08:08:21.620] | : . ' , ; getFutureCapture() ... done
[08:08:21.620] | : . ' , ; getFutureContext() ...
[08:08:21.620] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.620] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:21.620] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.620] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:21.620] | : . ' , ; getFutureContext() ... done
[08:08:21.620] | : . ' , getFutureData() ... done
[08:08:21.622] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.622] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:21.622] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.622] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.622] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.622] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:21.623] | : . ' , ; ` | New stack:
[08:08:21.623] | : . ' , ; ` | List of 1
[08:08:21.623] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.623] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.623] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:21.623] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.623] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.623] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.623] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.623] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.625] | : . ' , ; ` | Old stack:
[08:08:21.625] | : . ' , ; ` | List of 1
[08:08:21.625] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.625] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.625] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:21.625] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.625] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.625] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.625] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:21.625] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.625] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.625] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.625] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.629] | : . ' , ; ` | Not identical
[08:08:21.629] | : . ' , ; ` | all.equal() for future ...
[08:08:21.629] | : . ' , ; ` | : List of 2
[08:08:21.629] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.629] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.629] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:21.629] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.629] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.629] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.629] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.629] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.629] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.629] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.629] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.629] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.629] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.629] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.629] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.629] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.629] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.635] | : . ' , ; ` | all.equal() for future ... done
[08:08:21.635] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:21.635] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.635] | : . ' , ; ` List of future strategies:
[08:08:21.635] | : . ' , ; ` 1. sequential:
[08:08:21.635] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.635] | : . ' , ; `    - tweaked: FALSE
[08:08:21.635] | : . ' , ; `    - call: plan(sequential)
[08:08:21.635] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.635] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.637] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.637] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.637] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.637] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:21.637] | : . ' , ; ` | : New stack:
[08:08:21.638] | : . ' , ; ` | : List of 1
[08:08:21.638] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.638] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.638] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.638] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.638] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.638] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.638] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.638] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.638] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.638] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.638] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.641] | : . ' , ; ` | : Old stack:
[08:08:21.641] | : . ' , ; ` | : List of 1
[08:08:21.641] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.641] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.641] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.641] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.641] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.641] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.641] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.641] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.641] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.641] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.641] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.645] | : . ' , ; ` | : Identical
[08:08:21.645] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:21.645] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.645] | : . ' , ; ` | List of future strategies:
[08:08:21.645] | : . ' , ; ` | 1. sequential:
[08:08:21.645] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.645] | : . ' , ; ` |    - tweaked: FALSE
[08:08:21.645] | : . ' , ; ` |    - call: plan(sequential)
[08:08:21.646] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.646] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.646] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.646] | : . ' , SequentialFuture started (and completed)
[08:08:21.647] | : . ' , signalConditions() ...
[08:08:21.647] | : . ' , ; include = ‘immediateCondition’
[08:08:21.647] | : . ' , ; exclude = 
[08:08:21.647] | : . ' , ; resignal = FALSE
[08:08:21.647] | : . ' , ; Number of conditions: 6
[08:08:21.647] | : . ' , ;  int 6
[08:08:21.647] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.648] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.648] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.648] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.648] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.648] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.648] | : . ' , signalConditions() ... done
[08:08:21.648] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:21.648] | : . Launching futures ... done
[08:08:21.648] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:21.649] | : Using SequentialFutureBackend ... done
[08:08:21.649] | run() for ‘Future’ (<unnamed-18>) ... done
[08:08:21.649] future(..., label = NULL) ... done
[08:08:21.649] future(..., label = NULL) ...
[08:08:21.649] | lazy: FALSE
[08:08:21.649] | stdout: TRUE
[08:08:21.649] | conditions: [n=1] ‘condition’
[08:08:21.649] | gc: FALSE
[08:08:21.650] | earlySignal: FALSE
[08:08:21.650] | getGlobalsAndPackages() ...
[08:08:21.650] | : Searching for globals ...
[08:08:21.652] | : . globals found: [1] ‘{’
[08:08:21.653] | : Searching for globals ... done
[08:08:21.653] | : Resolving globals: FALSE
[08:08:21.653] | : Search for packages associated with the globals ...
[08:08:21.653] | : . Packages associated with globals: [1] ‘base’
[08:08:21.653] | : . Packages: [1] ‘base’
[08:08:21.653] | : Search for packages associated with the globals ... done
[08:08:21.653] | : Packages after dropping 'base': [0] 
[08:08:21.654] | : globals: [0] 
[08:08:21.654] | : packages: [0] 
[08:08:21.654] | getGlobalsAndPackages() ... done
[08:08:21.654] | run() for ‘Future’ (<unnamed-19>) ...
[08:08:21.654] | : state: ‘created’
[08:08:21.654] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.654] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.654] | : Using SequentialFutureBackend ...
[08:08:21.655] | : . Number of futures since start: 18 (18 created, 18 launched, 18 finished)
[08:08:21.655] | : . Launching futures ...
[08:08:21.655] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:21.655] | : . ' , getFutureData() ...
[08:08:21.655] | : . ' , ; getFutureCore() ...
[08:08:21.655] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:21.655] | : . ' , ; getFutureCore() ... done
[08:08:21.655] | : . ' , ; getFutureCapture() ...
[08:08:21.655] | : . ' , ; getFutureCapture() ... done
[08:08:21.655] | : . ' , ; getFutureContext() ...
[08:08:21.656] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.656] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:21.656] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.656] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:21.656] | : . ' , ; getFutureContext() ... done
[08:08:21.656] | : . ' , getFutureData() ... done
[08:08:21.657] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.657] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:21.658] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.658] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.658] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.658] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:21.658] | : . ' , ; ` | New stack:
[08:08:21.658] | : . ' , ; ` | List of 1
[08:08:21.658] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.658] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.658] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:21.658] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.658] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.658] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.658] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.658] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.662] | : . ' , ; ` | Old stack:
[08:08:21.662] | : . ' , ; ` | List of 1
[08:08:21.662] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.662] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.662] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:21.662] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.662] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.662] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.662] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:21.662] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.662] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.662] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.662] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.665] | : . ' , ; ` | Not identical
[08:08:21.665] | : . ' , ; ` | all.equal() for future ...
[08:08:21.666] | : . ' , ; ` | : List of 2
[08:08:21.666] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.666] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.666] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:21.666] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.666] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.666] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.666] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.666] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.666] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.666] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.666] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.666] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.666] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.666] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.666] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.666] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.666] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.671] | : . ' , ; ` | all.equal() for future ... done
[08:08:21.671] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:21.671] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.671] | : . ' , ; ` List of future strategies:
[08:08:21.671] | : . ' , ; ` 1. sequential:
[08:08:21.671] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.671] | : . ' , ; `    - tweaked: FALSE
[08:08:21.671] | : . ' , ; `    - call: plan(sequential)
[08:08:21.671] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.672] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.673] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.673] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.673] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.673] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:21.674] | : . ' , ; ` | : New stack:
[08:08:21.674] | : . ' , ; ` | : List of 1
[08:08:21.674] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.674] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.674] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.674] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.674] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.674] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.674] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.674] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.674] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.674] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.674] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.677] | : . ' , ; ` | : Old stack:
[08:08:21.677] | : . ' , ; ` | : List of 1
[08:08:21.677] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.677] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.677] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.677] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.677] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.677] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.677] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.677] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.677] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.677] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.677] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.682] | : . ' , ; ` | : Identical
[08:08:21.682] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:21.682] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.683] | : . ' , ; ` | List of future strategies:
[08:08:21.683] | : . ' , ; ` | 1. sequential:
[08:08:21.683] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.683] | : . ' , ; ` |    - tweaked: FALSE
[08:08:21.683] | : . ' , ; ` |    - call: plan(sequential)
[08:08:21.683] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.683] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.683] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.684] | : . ' , SequentialFuture started (and completed)
[08:08:21.684] | : . ' , signalConditions() ...
[08:08:21.684] | : . ' , ; include = ‘immediateCondition’
[08:08:21.684] | : . ' , ; exclude = 
[08:08:21.684] | : . ' , ; resignal = FALSE
[08:08:21.684] | : . ' , ; Number of conditions: 6
[08:08:21.684] | : . ' , ;  int 6
[08:08:21.685] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.685] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.685] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.685] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.685] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.685] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.685] | : . ' , signalConditions() ... done
[08:08:21.685] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:21.686] | : . Launching futures ... done
[08:08:21.686] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:21.686] | : Using SequentialFutureBackend ... done
[08:08:21.686] | run() for ‘Future’ (<unnamed-19>) ... done
[08:08:21.686] future(..., label = NULL) ... done
<environment: 0x5643018defd0> 
<environment: 0x5642ffcde450> 
[08:08:21.687] resolved() for environment ...
[08:08:21.687] | resolved() for list ...
[08:08:21.687] | : Number of elements: 4
[08:08:21.688] | : Number of futures: 4
[08:08:21.688] | : resolved() for SequentialFuture (<unnamed-17>) ...
[08:08:21.688] | : . state: ‘finished’
[08:08:21.688] | : . run: TRUE
[08:08:21.688] | : . result: ‘FutureResult’
[08:08:21.688] | : resolved() for SequentialFuture (<unnamed-17>) ... done
[08:08:21.688] | : resolved() for SequentialFuture (<unnamed-18>) ...
[08:08:21.688] | : . state: ‘finished’
[08:08:21.688] | : . run: TRUE
[08:08:21.689] | : . result: ‘FutureResult’
[08:08:21.689] | : resolved() for SequentialFuture (<unnamed-18>) ... done
[08:08:21.689] | : resolved() for SequentialFuture (<unnamed-19>) ...
[08:08:21.689] | : . state: ‘finished’
[08:08:21.689] | : . run: TRUE
[08:08:21.689] | : . result: ‘FutureResult’
[08:08:21.689] | : resolved() for SequentialFuture (<unnamed-19>) ... done
[08:08:21.689] | resolved() for list ... done
[08:08:21.689] resolved() for environment ... done
 Named logi [1:4] TRUE TRUE TRUE TRUE
 - attr(*, "names")= chr [1:4] "a" "b" "c" "d"
[08:08:21.690] value() for SequentialFuture (<unnamed-19>) ...
[08:08:21.690] | signalConditions() ...
[08:08:21.690] | : include = ‘immediateCondition’
[08:08:21.690] | : exclude = 
[08:08:21.691] | : resignal = FALSE
[08:08:21.691] | : Number of conditions: 6
[08:08:21.691] | :  int 6
[08:08:21.691] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.691] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.691] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.691] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.692] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.692] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.692] | signalConditions() ... done
[08:08:21.692] | relay stdout ...
[08:08:21.692] | relay stdout ... done
[08:08:21.692] | check for misuse ...
[08:08:21.692] | check for misuse ... done
[08:08:21.692] | relay conditions ...
[08:08:21.692] | : Future state: ‘finished’
[08:08:21.693] | : signalConditions() ...
[08:08:21.693] | : . include = ‘condition’
[08:08:21.693] | : . exclude = ‘immediateCondition’
[08:08:21.693] | : . resignal = TRUE
[08:08:21.693] | : . Number of conditions: 6
[08:08:21.693] | : .  int 6
[08:08:21.693] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.694] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.656] | : . ' , attachPackages() ...
[08:08:21.694] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.694] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.656] | : . ' , ; packages: [n=1] ‘future’
[08:08:21.694] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.694] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.657] | : . ' , attachPackages() ... done
[08:08:21.694] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.694] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.657] | : . ' , attachPackages() ...
[08:08:21.694] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.695] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.657] | : . ' , ; packages: [n=0] 
[08:08:21.695] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.695] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.657] | : . ' , attachPackages() ... done
[08:08:21.695] | : signalConditions() ... done
[08:08:21.695] | relay conditions ... done
[08:08:21.695] value() for SequentialFuture (<unnamed-19>) ... done
[08:08:21.695] value() for listenv ...
[08:08:21.695] | recursive: 0
[08:08:21.696] | reduce: FALSE
[08:08:21.696] | length: 4
[08:08:21.697] | elements: ‘a’, ‘b’, ‘c’, ‘d’
[08:08:21.698] | Number of remaining objects: 4
[08:08:21.698] | checking value #1:
[08:08:21.698] | 'obj' is atomic
[08:08:21.698] | signalConditionsASAP(numeric, pos=1) ...
[08:08:21.698] | : nx: 4
[08:08:21.698] | : relay: TRUE
[08:08:21.698] | : stdout: TRUE
[08:08:21.698] | : signal: TRUE
[08:08:21.698] | : resignal: FALSE
[08:08:21.698] | : force: TRUE
[08:08:21.699] | : relayed: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:21.699] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:21.699] | : until=2
[08:08:21.699] | : relaying element #2
[08:08:21.699] | : relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:21.699] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:21.699] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:21.699] | length: 3 (resolved future 1)
[08:08:21.700] value() for listenv ... done
[08:08:21.700] checking value #2:
[08:08:21.700] 'obj' is SequentialFuture
[08:08:21.700] resolved() for SequentialFuture (<unnamed-17>) ...
[08:08:21.700] | state: ‘finished’
[08:08:21.700] | run: TRUE
[08:08:21.700] | result: ‘FutureResult’
[08:08:21.700] resolved() for SequentialFuture (<unnamed-17>) ... done
[08:08:21.700] SequentialFuture #2
[08:08:21.701] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:21.701] | nx: 4
[08:08:21.701] | relay: TRUE
[08:08:21.701] | stdout: TRUE
[08:08:21.701] | signal: TRUE
[08:08:21.701] | resignal: FALSE
[08:08:21.701] | force: TRUE
[08:08:21.701] | relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:21.701] | queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:21.701] | until=2
[08:08:21.701] | relaying element #2
[08:08:21.702] | value() for SequentialFuture (<unnamed-17>) ...
[08:08:21.702] | : signalConditions() ...
[08:08:21.702] | : . include = ‘immediateCondition’
[08:08:21.702] | : . exclude = 
[08:08:21.702] | : . resignal = FALSE
[08:08:21.702] | : . Number of conditions: 6
[08:08:21.702] | : .  int 6
[08:08:21.703] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.703] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.703] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.703] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.703] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.703] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.703] | : signalConditions() ... done
[08:08:21.703] | : relay stdout ...
[08:08:21.703] | : relay stdout ... done
[08:08:21.704] | : check for misuse ...
[08:08:21.704] | : check for misuse ... done
[08:08:21.704] | value() for SequentialFuture (<unnamed-17>) ... done
[08:08:21.704] | signalConditions() ...
[08:08:21.704] | : include = ‘immediateCondition’
[08:08:21.704] | : exclude = 
[08:08:21.704] | : resignal = FALSE
[08:08:21.704] | : Number of conditions: 6
[08:08:21.704] | :  int 6
[08:08:21.705] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.705] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.705] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.705] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.705] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.705] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.705] | signalConditions() ... done
[08:08:21.706] | signalConditions() ...
[08:08:21.706] | : include = ‘condition’
[08:08:21.706] | : exclude = ‘error’, ‘immediateCondition’
[08:08:21.706] | : resignal = TRUE
[08:08:21.706] | : Number of conditions: 6
[08:08:21.706] | :  int 6
[08:08:21.706] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.707] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.588] | : . ' , attachPackages() ...
[08:08:21.707] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.707] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.588] | : . ' , ; packages: [n=1] ‘future’
[08:08:21.707] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.707] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.588] | : . ' , attachPackages() ... done
[08:08:21.707] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.707] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.588] | : . ' , attachPackages() ...
[08:08:21.707] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.708] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.588] | : . ' , ; packages: [n=0] 
[08:08:21.708] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.708] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.588] | : . ' , attachPackages() ... done
[08:08:21.708] | signalConditions() ... done
[08:08:21.708] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:21.708] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:21.708] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:21.708] value(<SequentialFuture>, ...) ...
[08:08:21.708] value(<SequentialFuture>, ...) ... done
[08:08:21.709] value() for SequentialFuture (<unnamed-17>) ...
[08:08:21.709] | signalConditions() ...
[08:08:21.709] | : include = ‘immediateCondition’
[08:08:21.709] | : exclude = 
[08:08:21.709] | : resignal = FALSE
[08:08:21.709] | : Number of conditions: 6
[08:08:21.709] | :  int 6
[08:08:21.710] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.710] | : already signaled, skipping
[08:08:21.710] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.710] | : already signaled, skipping
[08:08:21.710] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.710] | : already signaled, skipping
[08:08:21.710] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.710] | : already signaled, skipping
[08:08:21.710] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.711] | : already signaled, skipping
[08:08:21.711] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.711] | : already signaled, skipping
[08:08:21.711] | signalConditions() ... done
[08:08:21.711] | check for misuse ...
[08:08:21.711] | check for misuse ... done
[08:08:21.711] value() for SequentialFuture (<unnamed-17>) ... done
[08:08:21.711] value: <numeric>
[08:08:21.712] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:21.712] | nx: 4
[08:08:21.712] | relay: TRUE
[08:08:21.712] | stdout: TRUE
[08:08:21.712] | signal: TRUE
[08:08:21.712] | resignal: FALSE
[08:08:21.712] | force: TRUE
[08:08:21.712] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:21.712] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:21.712] | until=3
[08:08:21.713] | relaying element #3
[08:08:21.713] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:21.713] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:21.713] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:21.713] resolve() for SequentialFuture ...
[08:08:21.713] resolve() for SequentialFuture ... done
[08:08:21.713] length: 2 (resolved future 2)

[08:08:21.713] checking value #3:
[08:08:21.713] 'obj' is SequentialFuture
[08:08:21.714] resolved() for SequentialFuture (<unnamed-18>) ...
[08:08:21.714] | state: ‘finished’
[08:08:21.714] | run: TRUE
[08:08:21.714] | result: ‘FutureResult’
[08:08:21.714] resolved() for SequentialFuture (<unnamed-18>) ... done
[08:08:21.714] SequentialFuture #3
[08:08:21.714] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:21.714] | nx: 4
[08:08:21.716] | relay: TRUE
[08:08:21.716] | stdout: TRUE
[08:08:21.716] | signal: TRUE
[08:08:21.717] | resignal: FALSE
[08:08:21.717] | force: TRUE
[08:08:21.717] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:21.717] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:21.717] | until=3
[08:08:21.717] | relaying element #3
[08:08:21.717] | value() for SequentialFuture (<unnamed-18>) ...
[08:08:21.718] | : signalConditions() ...
[08:08:21.718] | : . include = ‘immediateCondition’
[08:08:21.718] | : . exclude = 
[08:08:21.718] | : . resignal = FALSE
[08:08:21.718] | : . Number of conditions: 6
[08:08:21.718] | : .  int 6
[08:08:21.719] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.719] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.719] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.719] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.719] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.719] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.719] | : signalConditions() ... done
[08:08:21.720] | : relay stdout ...
[08:08:21.720] | : relay stdout ... done
[08:08:21.720] | : check for misuse ...
[08:08:21.720] | : check for misuse ... done
[08:08:21.720] | value() for SequentialFuture (<unnamed-18>) ... done
[08:08:21.720] | signalConditions() ...
[08:08:21.720] | : include = ‘immediateCondition’
[08:08:21.720] | : exclude = 
[08:08:21.720] | : resignal = FALSE
[08:08:21.721] | : Number of conditions: 6
[08:08:21.721] | :  int 6
[08:08:21.721] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.721] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.721] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.721] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.721] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.722] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.722] | signalConditions() ... done
[08:08:21.722] | signalConditions() ...
[08:08:21.722] | : include = ‘condition’
[08:08:21.722] | : exclude = ‘error’, ‘immediateCondition’
[08:08:21.722] | : resignal = TRUE
[08:08:21.722] | : Number of conditions: 6
[08:08:21.722] | :  int 6
[08:08:21.723] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.723] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.621] | : . ' , attachPackages() ...
[08:08:21.723] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.723] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.621] | : . ' , ; packages: [n=1] ‘future’
[08:08:21.723] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.723] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.621] | : . ' , attachPackages() ... done
[08:08:21.723] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.724] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.621] | : . ' , attachPackages() ...
[08:08:21.724] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.724] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.621] | : . ' , ; packages: [n=0] 
[08:08:21.724] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.724] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.621] | : . ' , attachPackages() ... done
[08:08:21.724] | signalConditions() ... done
[08:08:21.724] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:21.724] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:21.724] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:21.725] value(<SequentialFuture>, ...) ...
[08:08:21.725] value(<SequentialFuture>, ...) ... done
[08:08:21.725] value() for SequentialFuture (<unnamed-18>) ...
[08:08:21.725] | signalConditions() ...
[08:08:21.725] | : include = ‘immediateCondition’
[08:08:21.725] | : exclude = 
[08:08:21.725] | : resignal = FALSE
[08:08:21.725] | : Number of conditions: 6
[08:08:21.725] | :  int 6
[08:08:21.726] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.726] | : already signaled, skipping
[08:08:21.726] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.726] | : already signaled, skipping
[08:08:21.726] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.726] | : already signaled, skipping
[08:08:21.726] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.726] | : already signaled, skipping
[08:08:21.727] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.727] | : already signaled, skipping
[08:08:21.727] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.727] | : already signaled, skipping
[08:08:21.727] | signalConditions() ... done
[08:08:21.727] | check for misuse ...
[08:08:21.727] | check for misuse ... done
[08:08:21.727] value() for SequentialFuture (<unnamed-18>) ... done
[08:08:21.727] value: <NULL>
[08:08:21.728] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:21.728] | nx: 4
[08:08:21.728] | relay: TRUE
[08:08:21.728] | stdout: TRUE
[08:08:21.728] | signal: TRUE
[08:08:21.728] | resignal: FALSE
[08:08:21.728] | force: TRUE
[08:08:21.728] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:21.728] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:21.728] | until=4
[08:08:21.728] | relaying element #4
[08:08:21.729] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:21.729] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:21.729] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:21.729] resolve() for SequentialFuture ...
[08:08:21.729] resolve() for SequentialFuture ... done
[08:08:21.729] length: 1 (resolved future 3)

[08:08:21.729] checking value #4:
[08:08:21.729] 'obj' is atomic
[08:08:21.730] signalConditionsASAP(numeric, pos=4) ...
[08:08:21.730] | nx: 4
[08:08:21.730] | relay: TRUE
[08:08:21.730] | stdout: TRUE
[08:08:21.730] | signal: TRUE
[08:08:21.730] | resignal: FALSE
[08:08:21.730] | force: TRUE
[08:08:21.730] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:21.730] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:21.730] | until=4
[08:08:21.730] | relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:21.731] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:21.731] signalConditionsASAP(numeric, pos=4) ... done
[08:08:21.731] length: 0 (resolved future 4)

[08:08:21.731] Relaying remaining futures ...
[08:08:21.731] | signalConditionsASAP(NULL, pos=0) ...
[08:08:21.731] | : nx: 4
[08:08:21.731] | : relay: TRUE
[08:08:21.731] | : stdout: TRUE
[08:08:21.732] | : signal: TRUE
[08:08:21.732] | : resignal: FALSE
[08:08:21.732] | : force: TRUE
[08:08:21.732] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:21.732] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
 - flush all
[08:08:21.732] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:21.732] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:21.732] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:21.732] Relaying remaining futures ... done

List of 4
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
Dimensions: c(2, 3, 1)
[08:08:21.736] future(..., label = NULL) ...
[08:08:21.736] | lazy: FALSE
[08:08:21.736] | stdout: TRUE
[08:08:21.736] | conditions: [n=1] ‘condition’
[08:08:21.736] | gc: FALSE
[08:08:21.736] | earlySignal: FALSE
[08:08:21.737] | getGlobalsAndPackages() ...
[08:08:21.737] | : Searching for globals ...
[08:08:21.738] | : . globals found: [0] 
[08:08:21.738] | : Searching for globals ... done
[08:08:21.738] | : globals: [0] <none>
[08:08:21.738] | : packages: [0] <none>
[08:08:21.738] | getGlobalsAndPackages() ... done
[08:08:21.739] | run() for ‘Future’ (<unnamed-20>) ...
[08:08:21.739] | : state: ‘created’
[08:08:21.739] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.739] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.739] | : Using SequentialFutureBackend ...
[08:08:21.739] | : . Number of futures since start: 19 (19 created, 19 launched, 19 finished)
[08:08:21.739] | : . Launching futures ...
[08:08:21.740] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:21.740] | : . ' , getFutureData() ...
[08:08:21.740] | : . ' , ; getFutureCore() ...
[08:08:21.740] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:21.740] | : . ' , ; getFutureCore() ... done
[08:08:21.740] | : . ' , ; getFutureCapture() ...
[08:08:21.740] | : . ' , ; getFutureCapture() ... done
[08:08:21.740] | : . ' , ; getFutureContext() ...
[08:08:21.740] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.740] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:21.741] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.741] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:21.741] | : . ' , ; getFutureContext() ... done
[08:08:21.741] | : . ' , getFutureData() ... done
[08:08:21.742] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.742] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:21.743] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.743] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.743] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.743] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:21.743] | : . ' , ; ` | New stack:
[08:08:21.743] | : . ' , ; ` | List of 1
[08:08:21.743] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.743] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.743] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:21.743] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.743] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.743] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.743] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.743] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.746] | : . ' , ; ` | Old stack:
[08:08:21.746] | : . ' , ; ` | List of 1
[08:08:21.746] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.746] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.746] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:21.746] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.746] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.746] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.746] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:21.746] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.746] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.746] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.746] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.749] | : . ' , ; ` | Not identical
[08:08:21.749] | : . ' , ; ` | all.equal() for future ...
[08:08:21.749] | : . ' , ; ` | : List of 2
[08:08:21.749] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.749] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.749] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:21.749] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.749] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.749] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.749] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.749] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.749] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.749] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.749] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.749] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.749] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.749] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.749] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.749] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.749] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.756] | : . ' , ; ` | all.equal() for future ... done
[08:08:21.756] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:21.756] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.756] | : . ' , ; ` List of future strategies:
[08:08:21.756] | : . ' , ; ` 1. sequential:
[08:08:21.756] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.756] | : . ' , ; `    - tweaked: FALSE
[08:08:21.756] | : . ' , ; `    - call: plan(sequential)
[08:08:21.757] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.757] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.759] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.759] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.759] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.759] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:21.759] | : . ' , ; ` | : New stack:
[08:08:21.759] | : . ' , ; ` | : List of 1
[08:08:21.759] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.759] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.759] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.759] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.759] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.759] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.759] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.759] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.759] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.759] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.759] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.762] | : . ' , ; ` | : Old stack:
[08:08:21.762] | : . ' , ; ` | : List of 1
[08:08:21.762] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.762] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.762] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.762] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.762] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.762] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.762] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.762] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.762] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.762] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.762] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.765] | : . ' , ; ` | : Identical
[08:08:21.766] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:21.766] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.766] | : . ' , ; ` | List of future strategies:
[08:08:21.766] | : . ' , ; ` | 1. sequential:
[08:08:21.766] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.766] | : . ' , ; ` |    - tweaked: FALSE
[08:08:21.766] | : . ' , ; ` |    - call: plan(sequential)
[08:08:21.766] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.766] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.766] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.767] | : . ' , SequentialFuture started (and completed)
[08:08:21.767] | : . ' , signalConditions() ...
[08:08:21.767] | : . ' , ; include = ‘immediateCondition’
[08:08:21.767] | : . ' , ; exclude = 
[08:08:21.767] | : . ' , ; resignal = FALSE
[08:08:21.767] | : . ' , ; Number of conditions: 6
[08:08:21.767] | : . ' , ;  int 6
[08:08:21.768] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.768] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.768] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.768] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.768] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.768] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.768] | : . ' , signalConditions() ... done
[08:08:21.769] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:21.769] | : . Launching futures ... done
[08:08:21.769] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:21.769] | : Using SequentialFutureBackend ... done
[08:08:21.769] | run() for ‘Future’ (<unnamed-20>) ... done
[08:08:21.770] future(..., label = NULL) ... done
[08:08:21.770] future(..., label = NULL) ...
[08:08:21.770] | lazy: FALSE
[08:08:21.770] | stdout: TRUE
[08:08:21.770] | conditions: [n=1] ‘condition’
[08:08:21.771] | gc: FALSE
[08:08:21.771] | earlySignal: FALSE
[08:08:21.771] | getGlobalsAndPackages() ...
[08:08:21.771] | : Searching for globals ...
[08:08:21.772] | : . globals found: [0] 
[08:08:21.772] | : Searching for globals ... done
[08:08:21.772] | : globals: [0] <none>
[08:08:21.772] | : packages: [0] <none>
[08:08:21.772] | getGlobalsAndPackages() ... done
[08:08:21.773] | run() for ‘Future’ (<unnamed-21>) ...
[08:08:21.773] | : state: ‘created’
[08:08:21.773] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.773] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.773] | : Using SequentialFutureBackend ...
[08:08:21.773] | : . Number of futures since start: 20 (20 created, 20 launched, 20 finished)
[08:08:21.773] | : . Launching futures ...
[08:08:21.773] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:21.774] | : . ' , getFutureData() ...
[08:08:21.774] | : . ' , ; getFutureCore() ...
[08:08:21.774] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:21.774] | : . ' , ; getFutureCore() ... done
[08:08:21.774] | : . ' , ; getFutureCapture() ...
[08:08:21.774] | : . ' , ; getFutureCapture() ... done
[08:08:21.774] | : . ' , ; getFutureContext() ...
[08:08:21.774] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.774] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:21.774] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.775] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:21.775] | : . ' , ; getFutureContext() ... done
[08:08:21.775] | : . ' , getFutureData() ... done
[08:08:21.776] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.776] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:21.776] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.776] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.777] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.777] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:21.777] | : . ' , ; ` | New stack:
[08:08:21.777] | : . ' , ; ` | List of 1
[08:08:21.777] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.777] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.777] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:21.777] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.777] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.777] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.777] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.777] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.779] | : . ' , ; ` | Old stack:
[08:08:21.780] | : . ' , ; ` | List of 1
[08:08:21.780] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.780] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.780] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:21.780] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.780] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.780] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.780] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:21.780] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.780] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.780] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.780] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.783] | : . ' , ; ` | Not identical
[08:08:21.783] | : . ' , ; ` | all.equal() for future ...
[08:08:21.783] | : . ' , ; ` | : List of 2
[08:08:21.783] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.783] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.783] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:21.783] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.783] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.783] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.783] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.783] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.783] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.783] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.783] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.783] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.783] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.783] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.783] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.783] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.783] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.789] | : . ' , ; ` | all.equal() for future ... done
[08:08:21.789] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:21.789] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.789] | : . ' , ; ` List of future strategies:
[08:08:21.789] | : . ' , ; ` 1. sequential:
[08:08:21.789] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.789] | : . ' , ; `    - tweaked: FALSE
[08:08:21.789] | : . ' , ; `    - call: plan(sequential)
[08:08:21.790] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.790] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.791] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.791] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.791] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.792] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:21.792] | : . ' , ; ` | : New stack:
[08:08:21.792] | : . ' , ; ` | : List of 1
[08:08:21.792] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.792] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.792] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.792] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.792] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.792] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.792] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.792] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.792] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.792] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.792] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.795] | : . ' , ; ` | : Old stack:
[08:08:21.795] | : . ' , ; ` | : List of 1
[08:08:21.795] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.795] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.795] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.795] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.795] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.795] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.795] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.795] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.795] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.795] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.795] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.798] | : . ' , ; ` | : Identical
[08:08:21.798] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:21.798] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.798] | : . ' , ; ` | List of future strategies:
[08:08:21.798] | : . ' , ; ` | 1. sequential:
[08:08:21.798] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.798] | : . ' , ; ` |    - tweaked: FALSE
[08:08:21.798] | : . ' , ; ` |    - call: plan(sequential)
[08:08:21.799] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.799] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.799] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.799] | : . ' , SequentialFuture started (and completed)
[08:08:21.799] | : . ' , signalConditions() ...
[08:08:21.799] | : . ' , ; include = ‘immediateCondition’
[08:08:21.799] | : . ' , ; exclude = 
[08:08:21.800] | : . ' , ; resignal = FALSE
[08:08:21.800] | : . ' , ; Number of conditions: 6
[08:08:21.800] | : . ' , ;  int 6
[08:08:21.800] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.800] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.800] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.800] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.801] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.801] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.801] | : . ' , signalConditions() ... done
[08:08:21.801] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:21.801] | : . Launching futures ... done
[08:08:21.801] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:21.801] | : Using SequentialFutureBackend ... done
[08:08:21.801] | run() for ‘Future’ (<unnamed-21>) ... done
[08:08:21.801] future(..., label = NULL) ... done
[08:08:21.803] future(..., label = NULL) ...
[08:08:21.803] | lazy: FALSE
[08:08:21.803] | stdout: TRUE
[08:08:21.803] | conditions: [n=1] ‘condition’
[08:08:21.804] | gc: FALSE
[08:08:21.804] | earlySignal: FALSE
[08:08:21.804] | getGlobalsAndPackages() ...
[08:08:21.804] | : Searching for globals ...
[08:08:21.807] | : . globals found: [1] ‘{’
[08:08:21.807] | : Searching for globals ... done
[08:08:21.807] | : Resolving globals: FALSE
[08:08:21.807] | : Search for packages associated with the globals ...
[08:08:21.807] | : . Packages associated with globals: [1] ‘base’
[08:08:21.808] | : . Packages: [1] ‘base’
[08:08:21.808] | : Search for packages associated with the globals ... done
[08:08:21.808] | : Packages after dropping 'base': [0] 
[08:08:21.808] | : globals: [0] 
[08:08:21.808] | : packages: [0] 
[08:08:21.808] | getGlobalsAndPackages() ... done
[08:08:21.808] | run() for ‘Future’ (<unnamed-22>) ...
[08:08:21.808] | : state: ‘created’
[08:08:21.809] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.809] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.809] | : Using SequentialFutureBackend ...
[08:08:21.809] | : . Number of futures since start: 21 (21 created, 21 launched, 21 finished)
[08:08:21.809] | : . Launching futures ...
[08:08:21.809] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:21.809] | : . ' , getFutureData() ...
[08:08:21.809] | : . ' , ; getFutureCore() ...
[08:08:21.809] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:21.809] | : . ' , ; getFutureCore() ... done
[08:08:21.810] | : . ' , ; getFutureCapture() ...
[08:08:21.810] | : . ' , ; getFutureCapture() ... done
[08:08:21.810] | : . ' , ; getFutureContext() ...
[08:08:21.810] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.810] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:21.810] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.810] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:21.810] | : . ' , ; getFutureContext() ... done
[08:08:21.810] | : . ' , getFutureData() ... done
[08:08:21.812] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.812] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:21.812] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.812] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.812] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.812] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:21.812] | : . ' , ; ` | New stack:
[08:08:21.813] | : . ' , ; ` | List of 1
[08:08:21.813] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.813] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.813] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:21.813] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.813] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.813] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.813] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.813] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.815] | : . ' , ; ` | Old stack:
[08:08:21.815] | : . ' , ; ` | List of 1
[08:08:21.815] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.815] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.815] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:21.815] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.815] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.815] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.815] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:21.815] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.815] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.815] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.815] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.818] | : . ' , ; ` | Not identical
[08:08:21.818] | : . ' , ; ` | all.equal() for future ...
[08:08:21.818] | : . ' , ; ` | : List of 2
[08:08:21.818] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.818] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.818] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:21.818] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.818] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.818] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.818] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.818] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.818] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.818] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.818] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.818] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.818] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.818] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.818] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.818] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.818] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.824] | : . ' , ; ` | all.equal() for future ... done
[08:08:21.824] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:21.824] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.825] | : . ' , ; ` List of future strategies:
[08:08:21.825] | : . ' , ; ` 1. sequential:
[08:08:21.825] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.825] | : . ' , ; `    - tweaked: FALSE
[08:08:21.825] | : . ' , ; `    - call: plan(sequential)
[08:08:21.825] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.825] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.827] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.827] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.827] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.827] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:21.827] | : . ' , ; ` | : New stack:
[08:08:21.827] | : . ' , ; ` | : List of 1
[08:08:21.827] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.827] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.827] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.827] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.827] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.827] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.827] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.827] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.827] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.827] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.827] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.830] | : . ' , ; ` | : Old stack:
[08:08:21.830] | : . ' , ; ` | : List of 1
[08:08:21.830] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.830] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.830] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.830] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.830] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.830] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.830] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.830] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.830] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.830] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.830] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.833] | : . ' , ; ` | : Identical
[08:08:21.833] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:21.834] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.834] | : . ' , ; ` | List of future strategies:
[08:08:21.834] | : . ' , ; ` | 1. sequential:
[08:08:21.834] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.834] | : . ' , ; ` |    - tweaked: FALSE
[08:08:21.834] | : . ' , ; ` |    - call: plan(sequential)
[08:08:21.834] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.834] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.834] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.835] | : . ' , SequentialFuture started (and completed)
[08:08:21.835] | : . ' , signalConditions() ...
[08:08:21.835] | : . ' , ; include = ‘immediateCondition’
[08:08:21.835] | : . ' , ; exclude = 
[08:08:21.835] | : . ' , ; resignal = FALSE
[08:08:21.835] | : . ' , ; Number of conditions: 6
[08:08:21.835] | : . ' , ;  int 6
[08:08:21.836] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.836] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.836] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.836] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.836] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.836] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.836] | : . ' , signalConditions() ... done
[08:08:21.836] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:21.836] | : . Launching futures ... done
[08:08:21.837] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:21.837] | : Using SequentialFutureBackend ... done
[08:08:21.837] | run() for ‘Future’ (<unnamed-22>) ... done
[08:08:21.837] future(..., label = NULL) ... done
<environment: 0x5643028d6cf0> 
<environment: 0x5643024e0350> 
[08:08:21.838] resolved() for environment ...
[08:08:21.839] | resolved() for list ...
[08:08:21.839] | : Number of elements: 4
[08:08:21.839] | : Number of futures: 4
[08:08:21.839] | : resolved() for SequentialFuture (<unnamed-20>) ...
[08:08:21.839] | : . state: ‘finished’
[08:08:21.839] | : . run: TRUE
[08:08:21.840] | : . result: ‘FutureResult’
[08:08:21.840] | : resolved() for SequentialFuture (<unnamed-20>) ... done
[08:08:21.840] | : resolved() for SequentialFuture (<unnamed-21>) ...
[08:08:21.840] | : . state: ‘finished’
[08:08:21.840] | : . run: TRUE
[08:08:21.840] | : . result: ‘FutureResult’
[08:08:21.840] | : resolved() for SequentialFuture (<unnamed-21>) ... done
[08:08:21.840] | : resolved() for SequentialFuture (<unnamed-22>) ...
[08:08:21.840] | : . state: ‘finished’
[08:08:21.840] | : . run: TRUE
[08:08:21.841] | : . result: ‘FutureResult’
[08:08:21.841] | : resolved() for SequentialFuture (<unnamed-22>) ... done
[08:08:21.841] | resolved() for list ... done
[08:08:21.841] resolved() for environment ... done
 Named logi [1:4] TRUE TRUE TRUE TRUE
 - attr(*, "names")= chr [1:4] "a" "b" "c" "d"
[08:08:21.842] value() for SequentialFuture (<unnamed-22>) ...
[08:08:21.842] | signalConditions() ...
[08:08:21.842] | : include = ‘immediateCondition’
[08:08:21.842] | : exclude = 
[08:08:21.842] | : resignal = FALSE
[08:08:21.842] | : Number of conditions: 6
[08:08:21.842] | :  int 6
[08:08:21.843] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.843] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.843] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.843] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.843] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.843] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.843] | signalConditions() ... done
[08:08:21.843] | relay stdout ...
[08:08:21.844] | relay stdout ... done
[08:08:21.844] | check for misuse ...
[08:08:21.844] | check for misuse ... done
[08:08:21.844] | relay conditions ...
[08:08:21.844] | : Future state: ‘finished’
[08:08:21.844] | : signalConditions() ...
[08:08:21.844] | : . include = ‘condition’
[08:08:21.844] | : . exclude = ‘immediateCondition’
[08:08:21.844] | : . resignal = TRUE
[08:08:21.844] | : . Number of conditions: 6
[08:08:21.844] | : .  int 6
[08:08:21.845] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.845] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.811] | : . ' , attachPackages() ...
[08:08:21.845] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.845] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.811] | : . ' , ; packages: [n=1] ‘future’
[08:08:21.845] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.845] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.811] | : . ' , attachPackages() ... done
[08:08:21.846] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.846] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.811] | : . ' , attachPackages() ...
[08:08:21.846] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.846] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.811] | : . ' , ; packages: [n=0] 
[08:08:21.846] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.846] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.811] | : . ' , attachPackages() ... done
[08:08:21.846] | : signalConditions() ... done
[08:08:21.846] | relay conditions ... done
[08:08:21.846] value() for SequentialFuture (<unnamed-22>) ... done
[08:08:21.847] value() for listenv ...
[08:08:21.847] | recursive: 0
[08:08:21.847] | reduce: FALSE
[08:08:21.848] | length: 4
[08:08:21.848] | elements: ‘a’, ‘b’, ‘c’, ‘d’
[08:08:21.848] | Number of remaining objects: 4
[08:08:21.848] | checking value #1:
[08:08:21.848] | 'obj' is atomic
[08:08:21.848] | signalConditionsASAP(numeric, pos=1) ...
[08:08:21.848] | : nx: 4
[08:08:21.848] | : relay: TRUE
[08:08:21.848] | : stdout: TRUE
[08:08:21.848] | : signal: TRUE
[08:08:21.849] | : resignal: FALSE
[08:08:21.849] | : force: TRUE
[08:08:21.849] | : relayed: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:21.849] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:21.849] | : until=2
[08:08:21.849] | : relaying element #2
[08:08:21.849] | : relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:21.849] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:21.849] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:21.849] | length: 3 (resolved future 1)
[08:08:21.850] value() for listenv ... done
[08:08:21.850] checking value #2:
[08:08:21.850] 'obj' is SequentialFuture
[08:08:21.850] resolved() for SequentialFuture (<unnamed-20>) ...
[08:08:21.850] | state: ‘finished’
[08:08:21.850] | run: TRUE
[08:08:21.850] | result: ‘FutureResult’
[08:08:21.850] resolved() for SequentialFuture (<unnamed-20>) ... done
[08:08:21.850] SequentialFuture #2
[08:08:21.850] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:21.851] | nx: 4
[08:08:21.851] | relay: TRUE
[08:08:21.851] | stdout: TRUE
[08:08:21.851] | signal: TRUE
[08:08:21.851] | resignal: FALSE
[08:08:21.851] | force: TRUE
[08:08:21.851] | relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:21.851] | queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:21.851] | until=2
[08:08:21.851] | relaying element #2
[08:08:21.851] | value() for SequentialFuture (<unnamed-20>) ...
[08:08:21.852] | : signalConditions() ...
[08:08:21.852] | : . include = ‘immediateCondition’
[08:08:21.852] | : . exclude = 
[08:08:21.852] | : . resignal = FALSE
[08:08:21.852] | : . Number of conditions: 6
[08:08:21.852] | : .  int 6
[08:08:21.852] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.852] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.853] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.853] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.853] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.853] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.853] | : signalConditions() ... done
[08:08:21.853] | : relay stdout ...
[08:08:21.853] | : relay stdout ... done
[08:08:21.853] | : check for misuse ...
[08:08:21.853] | : check for misuse ... done
[08:08:21.854] | value() for SequentialFuture (<unnamed-20>) ... done
[08:08:21.854] | signalConditions() ...
[08:08:21.854] | : include = ‘immediateCondition’
[08:08:21.854] | : exclude = 
[08:08:21.854] | : resignal = FALSE
[08:08:21.854] | : Number of conditions: 6
[08:08:21.854] | :  int 6
[08:08:21.854] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.855] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.855] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.855] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.855] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.855] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.855] | signalConditions() ... done
[08:08:21.855] | signalConditions() ...
[08:08:21.856] | : include = ‘condition’
[08:08:21.856] | : exclude = ‘error’, ‘immediateCondition’
[08:08:21.856] | : resignal = TRUE
[08:08:21.857] | : Number of conditions: 6
[08:08:21.857] | :  int 6
[08:08:21.857] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.857] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.741] | : . ' , attachPackages() ...
[08:08:21.857] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.857] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.741] | : . ' , ; packages: [n=1] ‘future’
[08:08:21.858] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.858] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.742] | : . ' , attachPackages() ... done
[08:08:21.858] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.858] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.742] | : . ' , attachPackages() ...
[08:08:21.858] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.858] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.742] | : . ' , ; packages: [n=0] 
[08:08:21.858] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.858] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.742] | : . ' , attachPackages() ... done
[08:08:21.859] | signalConditions() ... done
[08:08:21.859] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:21.859] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:21.859] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:21.859] value(<SequentialFuture>, ...) ...
[08:08:21.859] value(<SequentialFuture>, ...) ... done
[08:08:21.859] value() for SequentialFuture (<unnamed-20>) ...
[08:08:21.859] | signalConditions() ...
[08:08:21.859] | : include = ‘immediateCondition’
[08:08:21.859] | : exclude = 
[08:08:21.860] | : resignal = FALSE
[08:08:21.860] | : Number of conditions: 6
[08:08:21.860] | :  int 6
[08:08:21.860] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.860] | : already signaled, skipping
[08:08:21.860] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.861] | : already signaled, skipping
[08:08:21.861] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.861] | : already signaled, skipping
[08:08:21.861] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.861] | : already signaled, skipping
[08:08:21.861] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.861] | : already signaled, skipping
[08:08:21.861] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.861] | : already signaled, skipping
[08:08:21.862] | signalConditions() ... done
[08:08:21.862] | check for misuse ...
[08:08:21.862] | check for misuse ... done
[08:08:21.862] value() for SequentialFuture (<unnamed-20>) ... done
[08:08:21.862] value: <numeric>
[08:08:21.862] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:21.862] | nx: 4
[08:08:21.862] | relay: TRUE
[08:08:21.862] | stdout: TRUE
[08:08:21.863] | signal: TRUE
[08:08:21.863] | resignal: FALSE
[08:08:21.863] | force: TRUE
[08:08:21.863] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:21.863] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:21.863] | until=3
[08:08:21.863] | relaying element #3
[08:08:21.863] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:21.863] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:21.863] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:21.863] resolve() for SequentialFuture ...
[08:08:21.864] resolve() for SequentialFuture ... done
[08:08:21.864] length: 2 (resolved future 2)

[08:08:21.864] checking value #3:
[08:08:21.864] 'obj' is SequentialFuture
[08:08:21.864] resolved() for SequentialFuture (<unnamed-21>) ...
[08:08:21.864] | state: ‘finished’
[08:08:21.864] | run: TRUE
[08:08:21.864] | result: ‘FutureResult’
[08:08:21.864] resolved() for SequentialFuture (<unnamed-21>) ... done
[08:08:21.865] SequentialFuture #3
[08:08:21.865] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:21.865] | nx: 4
[08:08:21.865] | relay: TRUE
[08:08:21.865] | stdout: TRUE
[08:08:21.865] | signal: TRUE
[08:08:21.865] | resignal: FALSE
[08:08:21.865] | force: TRUE
[08:08:21.865] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:21.865] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:21.865] | until=3
[08:08:21.865] | relaying element #3
[08:08:21.866] | value() for SequentialFuture (<unnamed-21>) ...
[08:08:21.866] | : signalConditions() ...
[08:08:21.866] | : . include = ‘immediateCondition’
[08:08:21.866] | : . exclude = 
[08:08:21.866] | : . resignal = FALSE
[08:08:21.866] | : . Number of conditions: 6
[08:08:21.866] | : .  int 6
[08:08:21.867] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.867] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.867] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.867] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.867] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.867] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.867] | : signalConditions() ... done
[08:08:21.867] | : relay stdout ...
[08:08:21.867] | : relay stdout ... done
[08:08:21.868] | : check for misuse ...
[08:08:21.868] | : check for misuse ... done
[08:08:21.868] | value() for SequentialFuture (<unnamed-21>) ... done
[08:08:21.868] | signalConditions() ...
[08:08:21.868] | : include = ‘immediateCondition’
[08:08:21.868] | : exclude = 
[08:08:21.868] | : resignal = FALSE
[08:08:21.868] | : Number of conditions: 6
[08:08:21.868] | :  int 6
[08:08:21.869] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.869] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.869] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.869] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.869] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.869] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.869] | signalConditions() ... done
[08:08:21.869] | signalConditions() ...
[08:08:21.870] | : include = ‘condition’
[08:08:21.870] | : exclude = ‘error’, ‘immediateCondition’
[08:08:21.870] | : resignal = TRUE
[08:08:21.870] | : Number of conditions: 6
[08:08:21.870] | :  int 6
[08:08:21.870] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.870] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.775] | : . ' , attachPackages() ...
[08:08:21.871] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.871] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.775] | : . ' , ; packages: [n=1] ‘future’
[08:08:21.871] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.871] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.775] | : . ' , attachPackages() ... done
[08:08:21.871] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.871] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.775] | : . ' , attachPackages() ...
[08:08:21.871] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.871] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.776] | : . ' , ; packages: [n=0] 
[08:08:21.872] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.872] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.776] | : . ' , attachPackages() ... done
[08:08:21.872] | signalConditions() ... done
[08:08:21.872] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:21.872] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:21.872] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:21.872] value(<SequentialFuture>, ...) ...
[08:08:21.872] value(<SequentialFuture>, ...) ... done
[08:08:21.872] value() for SequentialFuture (<unnamed-21>) ...
[08:08:21.872] | signalConditions() ...
[08:08:21.873] | : include = ‘immediateCondition’
[08:08:21.873] | : exclude = 
[08:08:21.873] | : resignal = FALSE
[08:08:21.873] | : Number of conditions: 6
[08:08:21.873] | :  int 6
[08:08:21.873] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.873] | : already signaled, skipping
[08:08:21.874] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.875] | : already signaled, skipping
[08:08:21.875] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.875] | : already signaled, skipping
[08:08:21.875] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.875] | : already signaled, skipping
[08:08:21.875] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.875] | : already signaled, skipping
[08:08:21.875] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.875] | : already signaled, skipping
[08:08:21.876] | signalConditions() ... done
[08:08:21.876] | check for misuse ...
[08:08:21.876] | check for misuse ... done
[08:08:21.876] value() for SequentialFuture (<unnamed-21>) ... done
[08:08:21.876] value: <NULL>
[08:08:21.876] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:21.876] | nx: 4
[08:08:21.876] | relay: TRUE
[08:08:21.876] | stdout: TRUE
[08:08:21.877] | signal: TRUE
[08:08:21.877] | resignal: FALSE
[08:08:21.877] | force: TRUE
[08:08:21.877] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:21.877] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:21.877] | until=4
[08:08:21.877] | relaying element #4
[08:08:21.877] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:21.877] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:21.877] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:21.878] resolve() for SequentialFuture ...
[08:08:21.878] resolve() for SequentialFuture ... done
[08:08:21.878] length: 1 (resolved future 3)

[08:08:21.878] checking value #4:
[08:08:21.878] 'obj' is atomic
[08:08:21.878] signalConditionsASAP(numeric, pos=4) ...
[08:08:21.878] | nx: 4
[08:08:21.878] | relay: TRUE
[08:08:21.878] | stdout: TRUE
[08:08:21.879] | signal: TRUE
[08:08:21.879] | resignal: FALSE
[08:08:21.879] | force: TRUE
[08:08:21.879] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:21.879] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:21.879] | until=4
[08:08:21.879] | relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:21.879] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:21.879] signalConditionsASAP(numeric, pos=4) ... done
[08:08:21.880] length: 0 (resolved future 4)

[08:08:21.880] Relaying remaining futures ...
[08:08:21.880] | signalConditionsASAP(NULL, pos=0) ...
[08:08:21.880] | : nx: 4
[08:08:21.880] | : relay: TRUE
[08:08:21.880] | : stdout: TRUE
[08:08:21.880] | : signal: TRUE
[08:08:21.880] | : resignal: FALSE
[08:08:21.880] | : force: TRUE
[08:08:21.880] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:21.881] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
 - flush all
[08:08:21.881] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:21.881] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:21.881] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:21.881] Relaying remaining futures ... done

List of 4
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
Dimensions: c(2, 1, 3, 1)
[08:08:21.883] future(..., label = NULL) ...
[08:08:21.883] | lazy: FALSE
[08:08:21.883] | stdout: TRUE
[08:08:21.883] | conditions: [n=1] ‘condition’
[08:08:21.883] | gc: FALSE
[08:08:21.883] | earlySignal: FALSE
[08:08:21.883] | getGlobalsAndPackages() ...
[08:08:21.883] | : Searching for globals ...
[08:08:21.884] | : . globals found: [0] 
[08:08:21.885] | : Searching for globals ... done
[08:08:21.885] | : globals: [0] <none>
[08:08:21.885] | : packages: [0] <none>
[08:08:21.885] | getGlobalsAndPackages() ... done
[08:08:21.885] | run() for ‘Future’ (<unnamed-23>) ...
[08:08:21.885] | : state: ‘created’
[08:08:21.885] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.885] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.885] | : Using SequentialFutureBackend ...
[08:08:21.886] | : . Number of futures since start: 22 (22 created, 22 launched, 22 finished)
[08:08:21.886] | : . Launching futures ...
[08:08:21.886] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:21.886] | : . ' , getFutureData() ...
[08:08:21.886] | : . ' , ; getFutureCore() ...
[08:08:21.886] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:21.886] | : . ' , ; getFutureCore() ... done
[08:08:21.886] | : . ' , ; getFutureCapture() ...
[08:08:21.886] | : . ' , ; getFutureCapture() ... done
[08:08:21.887] | : . ' , ; getFutureContext() ...
[08:08:21.887] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.887] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:21.887] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.887] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:21.887] | : . ' , ; getFutureContext() ... done
[08:08:21.887] | : . ' , getFutureData() ... done
[08:08:21.888] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.889] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:21.889] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.889] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.889] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.889] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:21.889] | : . ' , ; ` | New stack:
[08:08:21.889] | : . ' , ; ` | List of 1
[08:08:21.889] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.889] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.889] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:21.889] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.889] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.889] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.889] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.889] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.892] | : . ' , ; ` | Old stack:
[08:08:21.892] | : . ' , ; ` | List of 1
[08:08:21.892] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.892] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.892] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:21.892] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.892] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.892] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.892] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:21.892] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.892] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.892] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.892] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.896] | : . ' , ; ` | Not identical
[08:08:21.896] | : . ' , ; ` | all.equal() for future ...
[08:08:21.896] | : . ' , ; ` | : List of 2
[08:08:21.896] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.896] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.896] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:21.896] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.896] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.896] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.896] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.896] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.896] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.896] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.896] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.896] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.896] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.896] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.896] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.896] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.896] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.901] | : . ' , ; ` | all.equal() for future ... done
[08:08:21.901] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:21.901] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.902] | : . ' , ; ` List of future strategies:
[08:08:21.902] | : . ' , ; ` 1. sequential:
[08:08:21.902] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.902] | : . ' , ; `    - tweaked: FALSE
[08:08:21.902] | : . ' , ; `    - call: plan(sequential)
[08:08:21.902] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.902] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.903] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.904] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.904] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.904] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:21.904] | : . ' , ; ` | : New stack:
[08:08:21.904] | : . ' , ; ` | : List of 1
[08:08:21.904] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.904] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.904] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.904] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.904] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.904] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.904] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.904] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.904] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.904] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.904] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.907] | : . ' , ; ` | : Old stack:
[08:08:21.907] | : . ' , ; ` | : List of 1
[08:08:21.907] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.907] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.907] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.907] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.907] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.907] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.907] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.907] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.907] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.907] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.907] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.911] | : . ' , ; ` | : Identical
[08:08:21.911] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:21.911] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.912] | : . ' , ; ` | List of future strategies:
[08:08:21.912] | : . ' , ; ` | 1. sequential:
[08:08:21.912] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.912] | : . ' , ; ` |    - tweaked: FALSE
[08:08:21.912] | : . ' , ; ` |    - call: plan(sequential)
[08:08:21.912] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.912] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.912] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.912] | : . ' , SequentialFuture started (and completed)
[08:08:21.913] | : . ' , signalConditions() ...
[08:08:21.913] | : . ' , ; include = ‘immediateCondition’
[08:08:21.913] | : . ' , ; exclude = 
[08:08:21.913] | : . ' , ; resignal = FALSE
[08:08:21.913] | : . ' , ; Number of conditions: 6
[08:08:21.913] | : . ' , ;  int 6
[08:08:21.913] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.914] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.914] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.914] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.914] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.914] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.914] | : . ' , signalConditions() ... done
[08:08:21.914] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:21.914] | : . Launching futures ... done
[08:08:21.914] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:21.915] | : Using SequentialFutureBackend ... done
[08:08:21.915] | run() for ‘Future’ (<unnamed-23>) ... done
[08:08:21.915] future(..., label = NULL) ... done
[08:08:21.915] future(..., label = NULL) ...
[08:08:21.915] | lazy: FALSE
[08:08:21.915] | stdout: TRUE
[08:08:21.915] | conditions: [n=1] ‘condition’
[08:08:21.915] | gc: FALSE
[08:08:21.915] | earlySignal: FALSE
[08:08:21.915] | getGlobalsAndPackages() ...
[08:08:21.916] | : Searching for globals ...
[08:08:21.917] | : . globals found: [0] 
[08:08:21.917] | : Searching for globals ... done
[08:08:21.917] | : globals: [0] <none>
[08:08:21.917] | : packages: [0] <none>
[08:08:21.917] | getGlobalsAndPackages() ... done
[08:08:21.917] | run() for ‘Future’ (<unnamed-24>) ...
[08:08:21.917] | : state: ‘created’
[08:08:21.917] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.918] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.918] | : Using SequentialFutureBackend ...
[08:08:21.918] | : . Number of futures since start: 23 (23 created, 23 launched, 23 finished)
[08:08:21.918] | : . Launching futures ...
[08:08:21.918] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:21.918] | : . ' , getFutureData() ...
[08:08:21.918] | : . ' , ; getFutureCore() ...
[08:08:21.918] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:21.918] | : . ' , ; getFutureCore() ... done
[08:08:21.918] | : . ' , ; getFutureCapture() ...
[08:08:21.919] | : . ' , ; getFutureCapture() ... done
[08:08:21.919] | : . ' , ; getFutureContext() ...
[08:08:21.919] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.919] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:21.919] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.919] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:21.919] | : . ' , ; getFutureContext() ... done
[08:08:21.919] | : . ' , getFutureData() ... done
[08:08:21.921] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.921] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:21.921] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.921] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.921] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.921] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:21.921] | : . ' , ; ` | New stack:
[08:08:21.921] | : . ' , ; ` | List of 1
[08:08:21.921] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.921] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.921] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:21.921] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.921] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.921] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.921] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.921] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.924] | : . ' , ; ` | Old stack:
[08:08:21.924] | : . ' , ; ` | List of 1
[08:08:21.924] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.924] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.924] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:21.924] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.924] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.924] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.924] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:21.924] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.924] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.924] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.924] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.928] | : . ' , ; ` | Not identical
[08:08:21.928] | : . ' , ; ` | all.equal() for future ...
[08:08:21.928] | : . ' , ; ` | : List of 2
[08:08:21.928] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.928] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.928] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:21.928] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.928] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.928] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.928] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.928] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.928] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.928] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.928] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.928] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.928] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.928] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.928] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.928] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.928] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.934] | : . ' , ; ` | all.equal() for future ... done
[08:08:21.934] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:21.934] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.934] | : . ' , ; ` List of future strategies:
[08:08:21.934] | : . ' , ; ` 1. sequential:
[08:08:21.934] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.934] | : . ' , ; `    - tweaked: FALSE
[08:08:21.934] | : . ' , ; `    - call: plan(sequential)
[08:08:21.935] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.935] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.936] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.936] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.936] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.936] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:21.937] | : . ' , ; ` | : New stack:
[08:08:21.937] | : . ' , ; ` | : List of 1
[08:08:21.937] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.937] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.937] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.937] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.937] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.937] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.937] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.937] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.937] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.937] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.937] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.940] | : . ' , ; ` | : Old stack:
[08:08:21.940] | : . ' , ; ` | : List of 1
[08:08:21.940] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.940] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.940] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.940] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.940] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.940] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.940] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.940] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.940] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.940] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.940] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.943] | : . ' , ; ` | : Identical
[08:08:21.943] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:21.943] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.943] | : . ' , ; ` | List of future strategies:
[08:08:21.943] | : . ' , ; ` | 1. sequential:
[08:08:21.943] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.943] | : . ' , ; ` |    - tweaked: FALSE
[08:08:21.943] | : . ' , ; ` |    - call: plan(sequential)
[08:08:21.944] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.945] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.945] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.945] | : . ' , SequentialFuture started (and completed)
[08:08:21.945] | : . ' , signalConditions() ...
[08:08:21.945] | : . ' , ; include = ‘immediateCondition’
[08:08:21.945] | : . ' , ; exclude = 
[08:08:21.945] | : . ' , ; resignal = FALSE
[08:08:21.946] | : . ' , ; Number of conditions: 6
[08:08:21.946] | : . ' , ;  int 6
[08:08:21.946] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.946] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.946] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.946] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.947] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.947] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.947] | : . ' , signalConditions() ... done
[08:08:21.947] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:21.947] | : . Launching futures ... done
[08:08:21.947] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:21.947] | : Using SequentialFutureBackend ... done
[08:08:21.947] | run() for ‘Future’ (<unnamed-24>) ... done
[08:08:21.947] future(..., label = NULL) ... done
[08:08:21.948] future(..., label = NULL) ...
[08:08:21.948] | lazy: FALSE
[08:08:21.948] | stdout: TRUE
[08:08:21.948] | conditions: [n=1] ‘condition’
[08:08:21.948] | gc: FALSE
[08:08:21.948] | earlySignal: FALSE
[08:08:21.948] | getGlobalsAndPackages() ...
[08:08:21.948] | : Searching for globals ...
[08:08:21.951] | : . globals found: [1] ‘{’
[08:08:21.951] | : Searching for globals ... done
[08:08:21.951] | : Resolving globals: FALSE
[08:08:21.952] | : Search for packages associated with the globals ...
[08:08:21.952] | : . Packages associated with globals: [1] ‘base’
[08:08:21.952] | : . Packages: [1] ‘base’
[08:08:21.952] | : Search for packages associated with the globals ... done
[08:08:21.952] | : Packages after dropping 'base': [0] 
[08:08:21.952] | : globals: [0] 
[08:08:21.952] | : packages: [0] 
[08:08:21.952] | getGlobalsAndPackages() ... done
[08:08:21.953] | run() for ‘Future’ (<unnamed-25>) ...
[08:08:21.953] | : state: ‘created’
[08:08:21.953] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.953] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.953] | : Using SequentialFutureBackend ...
[08:08:21.953] | : . Number of futures since start: 24 (24 created, 24 launched, 24 finished)
[08:08:21.953] | : . Launching futures ...
[08:08:21.953] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:21.954] | : . ' , getFutureData() ...
[08:08:21.954] | : . ' , ; getFutureCore() ...
[08:08:21.954] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:21.954] | : . ' , ; getFutureCore() ... done
[08:08:21.954] | : . ' , ; getFutureCapture() ...
[08:08:21.954] | : . ' , ; getFutureCapture() ... done
[08:08:21.954] | : . ' , ; getFutureContext() ...
[08:08:21.954] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.954] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:21.954] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.955] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:21.955] | : . ' , ; getFutureContext() ... done
[08:08:21.955] | : . ' , getFutureData() ... done
[08:08:21.956] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:21.956] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:21.956] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:21.956] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.957] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.957] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:21.957] | : . ' , ; ` | New stack:
[08:08:21.957] | : . ' , ; ` | List of 1
[08:08:21.957] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.957] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.957] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:21.957] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.957] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.957] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.957] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.957] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.959] | : . ' , ; ` | Old stack:
[08:08:21.959] | : . ' , ; ` | List of 1
[08:08:21.959] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.959] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.959] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:21.959] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.959] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.959] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.959] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:21.959] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.959] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.959] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.959] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.964] | : . ' , ; ` | Not identical
[08:08:21.964] | : . ' , ; ` | all.equal() for future ...
[08:08:21.964] | : . ' , ; ` | : List of 2
[08:08:21.964] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.964] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.964] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:21.964] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.964] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.964] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.964] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:21.964] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.964] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.964] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.964] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.964] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.964] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.964] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.964] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.964] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.964] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.969] | : . ' , ; ` | all.equal() for future ... done
[08:08:21.969] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:21.969] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.969] | : . ' , ; ` List of future strategies:
[08:08:21.969] | : . ' , ; ` 1. sequential:
[08:08:21.969] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.969] | : . ' , ; `    - tweaked: FALSE
[08:08:21.969] | : . ' , ; `    - call: plan(sequential)
[08:08:21.970] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.970] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.971] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.971] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:21.971] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:21.972] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:21.972] | : . ' , ; ` | : New stack:
[08:08:21.972] | : . ' , ; ` | : List of 1
[08:08:21.972] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.972] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.972] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.972] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.972] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.972] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.972] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.972] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.972] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.972] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.972] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.975] | : . ' , ; ` | : Old stack:
[08:08:21.975] | : . ' , ; ` | : List of 1
[08:08:21.975] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:21.975] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:21.975] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:21.975] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.975] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.975] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.975] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:21.975] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:21.975] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:21.975] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:21.975] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:21.979] | : . ' , ; ` | : Identical
[08:08:21.979] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:21.979] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:21.979] | : . ' , ; ` | List of future strategies:
[08:08:21.979] | : . ' , ; ` | 1. sequential:
[08:08:21.979] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:21.979] | : . ' , ; ` |    - tweaked: FALSE
[08:08:21.979] | : . ' , ; ` |    - call: plan(sequential)
[08:08:21.980] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:21.980] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.980] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:21.980] | : . ' , SequentialFuture started (and completed)
[08:08:21.980] | : . ' , signalConditions() ...
[08:08:21.980] | : . ' , ; include = ‘immediateCondition’
[08:08:21.981] | : . ' , ; exclude = 
[08:08:21.981] | : . ' , ; resignal = FALSE
[08:08:21.981] | : . ' , ; Number of conditions: 6
[08:08:21.981] | : . ' , ;  int 6
[08:08:21.981] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.981] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.981] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.982] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.982] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.982] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.982] | : . ' , signalConditions() ... done
[08:08:21.982] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:21.982] | : . Launching futures ... done
[08:08:21.982] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:21.982] | : Using SequentialFutureBackend ... done
[08:08:21.982] | run() for ‘Future’ (<unnamed-25>) ... done
[08:08:21.983] future(..., label = NULL) ... done
<environment: 0x5642ffd47d38> 
<environment: 0x5643015a9ea8> 
[08:08:21.983] resolved() for environment ...
[08:08:21.984] | resolved() for list ...
[08:08:21.984] | : Number of elements: 4
[08:08:21.984] | : Number of futures: 4
[08:08:21.984] | : resolved() for SequentialFuture (<unnamed-23>) ...
[08:08:21.984] | : . state: ‘finished’
[08:08:21.984] | : . run: TRUE
[08:08:21.984] | : . result: ‘FutureResult’
[08:08:21.985] | : resolved() for SequentialFuture (<unnamed-23>) ... done
[08:08:21.985] | : resolved() for SequentialFuture (<unnamed-24>) ...
[08:08:21.985] | : . state: ‘finished’
[08:08:21.985] | : . run: TRUE
[08:08:21.985] | : . result: ‘FutureResult’
[08:08:21.985] | : resolved() for SequentialFuture (<unnamed-24>) ... done
[08:08:21.985] | : resolved() for SequentialFuture (<unnamed-25>) ...
[08:08:21.985] | : . state: ‘finished’
[08:08:21.985] | : . run: TRUE
[08:08:21.985] | : . result: ‘FutureResult’
[08:08:21.986] | : resolved() for SequentialFuture (<unnamed-25>) ... done
[08:08:21.986] | resolved() for list ... done
[08:08:21.986] resolved() for environment ... done
 Named logi [1:4] TRUE TRUE TRUE TRUE
 - attr(*, "names")= chr [1:4] "a" "b" "c" "d"
[08:08:21.986] value() for SequentialFuture (<unnamed-25>) ...
[08:08:21.987] | signalConditions() ...
[08:08:21.987] | : include = ‘immediateCondition’
[08:08:21.987] | : exclude = 
[08:08:21.987] | : resignal = FALSE
[08:08:21.987] | : Number of conditions: 6
[08:08:21.987] | :  int 6
[08:08:21.987] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.987] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.988] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.988] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.988] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.988] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.988] | signalConditions() ... done
[08:08:21.988] | relay stdout ...
[08:08:21.988] | relay stdout ... done
[08:08:21.988] | check for misuse ...
[08:08:21.988] | check for misuse ... done
[08:08:21.989] | relay conditions ...
[08:08:21.989] | : Future state: ‘finished’
[08:08:21.989] | : signalConditions() ...
[08:08:21.989] | : . include = ‘condition’
[08:08:21.989] | : . exclude = ‘immediateCondition’
[08:08:21.989] | : . resignal = TRUE
[08:08:21.989] | : . Number of conditions: 6
[08:08:21.989] | : .  int 6
[08:08:21.990] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.990] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.955] | : . ' , attachPackages() ...
[08:08:21.990] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.990] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.955] | : . ' , ; packages: [n=1] ‘future’
[08:08:21.990] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.990] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.955] | : . ' , attachPackages() ... done
[08:08:21.990] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.990] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.955] | : . ' , attachPackages() ...
[08:08:21.991] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.991] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.956] | : . ' , ; packages: [n=0] 
[08:08:21.991] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.991] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.956] | : . ' , attachPackages() ... done
[08:08:21.991] | : signalConditions() ... done
[08:08:21.991] | relay conditions ... done
[08:08:21.991] value() for SequentialFuture (<unnamed-25>) ... done
[08:08:21.991] value() for listenv ...
[08:08:21.992] | recursive: 0
[08:08:21.992] | reduce: FALSE
[08:08:21.992] | length: 4
[08:08:21.992] | elements: ‘a’, ‘b’, ‘c’, ‘d’
[08:08:21.993] | Number of remaining objects: 4
[08:08:21.993] | checking value #1:
[08:08:21.993] | 'obj' is atomic
[08:08:21.993] | signalConditionsASAP(numeric, pos=1) ...
[08:08:21.993] | : nx: 4
[08:08:21.993] | : relay: TRUE
[08:08:21.993] | : stdout: TRUE
[08:08:21.993] | : signal: TRUE
[08:08:21.993] | : resignal: FALSE
[08:08:21.993] | : force: TRUE
[08:08:21.993] | : relayed: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:21.994] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:21.994] | : until=2
[08:08:21.994] | : relaying element #2
[08:08:21.994] | : relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:21.994] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:21.994] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:21.994] | length: 3 (resolved future 1)
[08:08:21.994] value() for listenv ... done
[08:08:21.994] checking value #2:
[08:08:21.995] 'obj' is SequentialFuture
[08:08:21.995] resolved() for SequentialFuture (<unnamed-23>) ...
[08:08:21.996] | state: ‘finished’
[08:08:21.996] | run: TRUE
[08:08:21.996] | result: ‘FutureResult’
[08:08:21.996] resolved() for SequentialFuture (<unnamed-23>) ... done
[08:08:21.996] SequentialFuture #2
[08:08:21.996] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:21.996] | nx: 4
[08:08:21.996] | relay: TRUE
[08:08:21.997] | stdout: TRUE
[08:08:21.997] | signal: TRUE
[08:08:21.997] | resignal: FALSE
[08:08:21.997] | force: TRUE
[08:08:21.997] | relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:21.997] | queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:21.997] | until=2
[08:08:21.997] | relaying element #2
[08:08:21.997] | value() for SequentialFuture (<unnamed-23>) ...
[08:08:21.997] | : signalConditions() ...
[08:08:21.998] | : . include = ‘immediateCondition’
[08:08:21.998] | : . exclude = 
[08:08:21.998] | : . resignal = FALSE
[08:08:21.998] | : . Number of conditions: 6
[08:08:21.998] | : .  int 6
[08:08:21.998] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.998] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.999] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.999] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.999] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.999] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:21.999] | : signalConditions() ... done
[08:08:21.999] | : relay stdout ...
[08:08:21.999] | : relay stdout ... done
[08:08:21.999] | : check for misuse ...
[08:08:22.000] | : check for misuse ... done
[08:08:22.000] | value() for SequentialFuture (<unnamed-23>) ... done
[08:08:22.000] | signalConditions() ...
[08:08:22.000] | : include = ‘immediateCondition’
[08:08:22.000] | : exclude = 
[08:08:22.000] | : resignal = FALSE
[08:08:22.000] | : Number of conditions: 6
[08:08:22.000] | :  int 6
[08:08:22.001] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.001] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.001] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.001] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.001] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.001] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.001] | signalConditions() ... done
[08:08:22.001] | signalConditions() ...
[08:08:22.001] | : include = ‘condition’
[08:08:22.002] | : exclude = ‘error’, ‘immediateCondition’
[08:08:22.002] | : resignal = TRUE
[08:08:22.002] | : Number of conditions: 6
[08:08:22.002] | :  int 6
[08:08:22.002] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.002] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.887] | : . ' , attachPackages() ...
[08:08:22.002] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.003] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.888] | : . ' , ; packages: [n=1] ‘future’
[08:08:22.003] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.003] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.888] | : . ' , attachPackages() ... done
[08:08:22.003] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.003] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.888] | : . ' , attachPackages() ...
[08:08:22.003] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.003] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.888] | : . ' , ; packages: [n=0] 
[08:08:22.003] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.003] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.888] | : . ' , attachPackages() ... done
[08:08:22.004] | signalConditions() ... done
[08:08:22.004] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:22.004] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:22.004] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:22.004] value(<SequentialFuture>, ...) ...
[08:08:22.004] value(<SequentialFuture>, ...) ... done
[08:08:22.004] value() for SequentialFuture (<unnamed-23>) ...
[08:08:22.004] | signalConditions() ...
[08:08:22.004] | : include = ‘immediateCondition’
[08:08:22.004] | : exclude = 
[08:08:22.005] | : resignal = FALSE
[08:08:22.005] | : Number of conditions: 6
[08:08:22.005] | :  int 6
[08:08:22.005] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.005] | : already signaled, skipping
[08:08:22.005] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.005] | : already signaled, skipping
[08:08:22.006] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.006] | : already signaled, skipping
[08:08:22.006] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.006] | : already signaled, skipping
[08:08:22.006] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.006] | : already signaled, skipping
[08:08:22.006] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.006] | : already signaled, skipping
[08:08:22.006] | signalConditions() ... done
[08:08:22.006] | check for misuse ...
[08:08:22.006] | check for misuse ... done
[08:08:22.007] value() for SequentialFuture (<unnamed-23>) ... done
[08:08:22.007] value: <numeric>
[08:08:22.007] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:22.007] | nx: 4
[08:08:22.007] | relay: TRUE
[08:08:22.007] | stdout: TRUE
[08:08:22.007] | signal: TRUE
[08:08:22.007] | resignal: FALSE
[08:08:22.007] | force: TRUE
[08:08:22.007] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:22.007] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:22.008] | until=3
[08:08:22.008] | relaying element #3
[08:08:22.008] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:22.008] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:22.008] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:22.008] resolve() for SequentialFuture ...
[08:08:22.008] resolve() for SequentialFuture ... done
[08:08:22.008] length: 2 (resolved future 2)

[08:08:22.009] checking value #3:
[08:08:22.009] 'obj' is SequentialFuture
[08:08:22.009] resolved() for SequentialFuture (<unnamed-24>) ...
[08:08:22.009] | state: ‘finished’
[08:08:22.009] | run: TRUE
[08:08:22.009] | result: ‘FutureResult’
[08:08:22.010] resolved() for SequentialFuture (<unnamed-24>) ... done
[08:08:22.010] SequentialFuture #3
[08:08:22.010] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:22.010] | nx: 4
[08:08:22.010] | relay: TRUE
[08:08:22.010] | stdout: TRUE
[08:08:22.010] | signal: TRUE
[08:08:22.010] | resignal: FALSE
[08:08:22.010] | force: TRUE
[08:08:22.010] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:22.010] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:22.010] | until=3
[08:08:22.011] | relaying element #3
[08:08:22.011] | value() for SequentialFuture (<unnamed-24>) ...
[08:08:22.011] | : signalConditions() ...
[08:08:22.011] | : . include = ‘immediateCondition’
[08:08:22.011] | : . exclude = 
[08:08:22.012] | : . resignal = FALSE
[08:08:22.012] | : . Number of conditions: 6
[08:08:22.012] | : .  int 6
[08:08:22.012] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.012] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.013] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.013] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.013] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.014] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.014] | : signalConditions() ... done
[08:08:22.014] | : relay stdout ...
[08:08:22.014] | : relay stdout ... done
[08:08:22.014] | : check for misuse ...
[08:08:22.014] | : check for misuse ... done
[08:08:22.014] | value() for SequentialFuture (<unnamed-24>) ... done
[08:08:22.015] | signalConditions() ...
[08:08:22.015] | : include = ‘immediateCondition’
[08:08:22.015] | : exclude = 
[08:08:22.015] | : resignal = FALSE
[08:08:22.015] | : Number of conditions: 6
[08:08:22.015] | :  int 6
[08:08:22.015] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.016] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.016] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.016] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.016] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.016] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.016] | signalConditions() ... done
[08:08:22.016] | signalConditions() ...
[08:08:22.016] | : include = ‘condition’
[08:08:22.016] | : exclude = ‘error’, ‘immediateCondition’
[08:08:22.017] | : resignal = TRUE
[08:08:22.017] | : Number of conditions: 6
[08:08:22.017] | :  int 6
[08:08:22.017] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.017] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.920] | : . ' , attachPackages() ...
[08:08:22.018] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.018] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.920] | : . ' , ; packages: [n=1] ‘future’
[08:08:22.018] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.018] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.920] | : . ' , attachPackages() ... done
[08:08:22.019] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.019] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.920] | : . ' , attachPackages() ...
[08:08:22.019] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.019] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.920] | : . ' , ; packages: [n=0] 
[08:08:22.019] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.020] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:21.920] | : . ' , attachPackages() ... done
[08:08:22.020] | signalConditions() ... done
[08:08:22.020] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:22.020] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:22.020] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:22.020] value(<SequentialFuture>, ...) ...
[08:08:22.020] value(<SequentialFuture>, ...) ... done
[08:08:22.020] value() for SequentialFuture (<unnamed-24>) ...
[08:08:22.021] | signalConditions() ...
[08:08:22.021] | : include = ‘immediateCondition’
[08:08:22.021] | : exclude = 
[08:08:22.021] | : resignal = FALSE
[08:08:22.021] | : Number of conditions: 6
[08:08:22.021] | :  int 6
[08:08:22.022] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.022] | : already signaled, skipping
[08:08:22.022] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.022] | : already signaled, skipping
[08:08:22.022] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.022] | : already signaled, skipping
[08:08:22.022] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.022] | : already signaled, skipping
[08:08:22.022] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.023] | : already signaled, skipping
[08:08:22.023] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.023] | : already signaled, skipping
[08:08:22.023] | signalConditions() ... done
[08:08:22.023] | check for misuse ...
[08:08:22.023] | check for misuse ... done
[08:08:22.023] value() for SequentialFuture (<unnamed-24>) ... done
[08:08:22.023] value: <NULL>
[08:08:22.023] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:22.023] | nx: 4
[08:08:22.024] | relay: TRUE
[08:08:22.024] | stdout: TRUE
[08:08:22.024] | signal: TRUE
[08:08:22.024] | resignal: FALSE
[08:08:22.024] | force: TRUE
[08:08:22.024] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:22.024] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:22.024] | until=4
[08:08:22.024] | relaying element #4
[08:08:22.024] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:22.024] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:22.025] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:22.025] resolve() for SequentialFuture ...
[08:08:22.025] resolve() for SequentialFuture ... done
[08:08:22.025] length: 1 (resolved future 3)

[08:08:22.025] checking value #4:
[08:08:22.025] 'obj' is atomic
[08:08:22.025] signalConditionsASAP(numeric, pos=4) ...
[08:08:22.025] | nx: 4
[08:08:22.025] | relay: TRUE
[08:08:22.025] | stdout: TRUE
[08:08:22.026] | signal: TRUE
[08:08:22.026] | resignal: FALSE
[08:08:22.026] | force: TRUE
[08:08:22.026] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:22.026] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:22.026] | until=4
[08:08:22.026] | relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:22.026] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:22.026] signalConditionsASAP(numeric, pos=4) ... done
[08:08:22.026] length: 0 (resolved future 4)

[08:08:22.027] Relaying remaining futures ...
[08:08:22.027] | signalConditionsASAP(NULL, pos=0) ...
[08:08:22.027] | : nx: 4
[08:08:22.027] | : relay: TRUE
[08:08:22.027] | : stdout: TRUE
[08:08:22.027] | : signal: TRUE
[08:08:22.027] | : resignal: FALSE
[08:08:22.027] | : force: TRUE
[08:08:22.027] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:22.027] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
 - flush all
[08:08:22.028] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:22.028] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:22.028] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:22.028] Relaying remaining futures ... done

List of 4
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
*** futures() - environment ... DONE
Type of object: listenv
Type of future: sequential
[08:08:22.030] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.030] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:22.030] | : all.equal() for FutureStrategyList ...
[08:08:22.030] | : . New stack:
[08:08:22.030] | : . List of 1
[08:08:22.030] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.030] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.030] | : .   ..- attr(*, "init")= logi TRUE
[08:08:22.030] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.030] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.030] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.030] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:22.030] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.034] | : . Old stack:
[08:08:22.034] | : . List of 1
[08:08:22.034] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.034] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.034] | : .   ..- attr(*, "init")= chr "done"
[08:08:22.034] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.034] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.034] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.034] | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:22.034] | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.034] | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.034] | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.034] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.037] | : . Not identical
[08:08:22.037] | : . all.equal() for future ...
[08:08:22.037] | : . ' List of 2
[08:08:22.037] | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.037] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.037] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:22.037] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.037] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.037] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.037] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:22.037] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.037] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.037] | : . '   ..- attr(*, "init")= chr "done"
[08:08:22.037] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.037] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.037] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.037] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:08:22.037] | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.037] | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.037] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.042] | : . all.equal() for future ... done
[08:08:22.042] | : all.equal() for FutureStrategyList ... done
[08:08:22.043] | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:22.043] | : List of future strategies:
[08:08:22.043] | : 1. sequential:
[08:08:22.043] | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.043] | :    - tweaked: FALSE
[08:08:22.043] | :    - call: plan(sequential)
[08:08:22.043] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:22.043] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Dimensions: NULL
[08:08:22.043] future(..., label = NULL) ...
[08:08:22.044] | lazy: FALSE
[08:08:22.044] | stdout: TRUE
[08:08:22.044] | conditions: [n=1] ‘condition’
[08:08:22.044] | gc: FALSE
[08:08:22.044] | earlySignal: FALSE
[08:08:22.044] | getGlobalsAndPackages() ...
[08:08:22.044] | : Searching for globals ...
[08:08:22.045] | : . globals found: [0] 
[08:08:22.045] | : Searching for globals ... done
[08:08:22.046] | : globals: [0] <none>
[08:08:22.046] | : packages: [0] <none>
[08:08:22.046] | getGlobalsAndPackages() ... done
[08:08:22.046] | run() for ‘Future’ (<unnamed-26>) ...
[08:08:22.046] | : state: ‘created’
[08:08:22.046] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.046] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.046] | : Using SequentialFutureBackend ...
[08:08:22.046] | : . Number of futures since start: 25 (25 created, 25 launched, 25 finished)
[08:08:22.047] | : . Launching futures ...
[08:08:22.047] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:22.047] | : . ' , getFutureData() ...
[08:08:22.047] | : . ' , ; getFutureCore() ...
[08:08:22.047] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:22.047] | : . ' , ; getFutureCore() ... done
[08:08:22.047] | : . ' , ; getFutureCapture() ...
[08:08:22.047] | : . ' , ; getFutureCapture() ... done
[08:08:22.047] | : . ' , ; getFutureContext() ...
[08:08:22.048] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.048] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:22.049] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.049] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:22.049] | : . ' , ; getFutureContext() ... done
[08:08:22.049] | : . ' , getFutureData() ... done
[08:08:22.050] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.050] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:22.051] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.051] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.051] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.051] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:22.051] | : . ' , ; ` | New stack:
[08:08:22.051] | : . ' , ; ` | List of 1
[08:08:22.051] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.051] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.051] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:22.051] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.051] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.051] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.051] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.051] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.054] | : . ' , ; ` | Old stack:
[08:08:22.054] | : . ' , ; ` | List of 1
[08:08:22.054] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.054] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.054] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:22.054] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.054] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.054] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.054] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:22.054] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.054] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.054] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.054] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.057] | : . ' , ; ` | Not identical
[08:08:22.057] | : . ' , ; ` | all.equal() for future ...
[08:08:22.057] | : . ' , ; ` | : List of 2
[08:08:22.057] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.057] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.057] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:22.057] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.057] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.057] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.057] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.057] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.057] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.057] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.057] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.057] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.057] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.057] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.057] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.057] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.057] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.062] | : . ' , ; ` | all.equal() for future ... done
[08:08:22.062] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:22.062] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:22.062] | : . ' , ; ` List of future strategies:
[08:08:22.062] | : . ' , ; ` 1. sequential:
[08:08:22.062] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.062] | : . ' , ; `    - tweaked: FALSE
[08:08:22.062] | : . ' , ; `    - call: plan(sequential)
[08:08:22.063] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.063] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.065] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.065] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.065] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.066] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:22.066] | : . ' , ; ` | : New stack:
[08:08:22.066] | : . ' , ; ` | : List of 1
[08:08:22.066] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.066] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.066] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.066] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.066] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.066] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.066] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.066] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.066] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.066] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.066] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.069] | : . ' , ; ` | : Old stack:
[08:08:22.069] | : . ' , ; ` | : List of 1
[08:08:22.069] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.069] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.069] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.069] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.069] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.069] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.069] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.069] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.069] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.069] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.069] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.072] | : . ' , ; ` | : Identical
[08:08:22.072] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:22.073] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:22.073] | : . ' , ; ` | List of future strategies:
[08:08:22.073] | : . ' , ; ` | 1. sequential:
[08:08:22.073] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.073] | : . ' , ; ` |    - tweaked: FALSE
[08:08:22.073] | : . ' , ; ` |    - call: plan(sequential)
[08:08:22.073] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.073] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.073] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.073] | : . ' , SequentialFuture started (and completed)
[08:08:22.074] | : . ' , signalConditions() ...
[08:08:22.074] | : . ' , ; include = ‘immediateCondition’
[08:08:22.074] | : . ' , ; exclude = 
[08:08:22.074] | : . ' , ; resignal = FALSE
[08:08:22.074] | : . ' , ; Number of conditions: 6
[08:08:22.074] | : . ' , ;  int 6
[08:08:22.074] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.075] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.075] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.075] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.075] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.075] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.075] | : . ' , signalConditions() ... done
[08:08:22.075] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:22.075] | : . Launching futures ... done
[08:08:22.075] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:22.076] | : Using SequentialFutureBackend ... done
[08:08:22.076] | run() for ‘Future’ (<unnamed-26>) ... done
[08:08:22.076] future(..., label = NULL) ... done
[08:08:22.076] future(..., label = NULL) ...
[08:08:22.076] | lazy: FALSE
[08:08:22.076] | stdout: TRUE
[08:08:22.076] | conditions: [n=1] ‘condition’
[08:08:22.076] | gc: FALSE
[08:08:22.076] | earlySignal: FALSE
[08:08:22.076] | getGlobalsAndPackages() ...
[08:08:22.077] | : Searching for globals ...
[08:08:22.078] | : . globals found: [0] 
[08:08:22.078] | : Searching for globals ... done
[08:08:22.078] | : globals: [0] <none>
[08:08:22.078] | : packages: [0] <none>
[08:08:22.078] | getGlobalsAndPackages() ... done
[08:08:22.078] | run() for ‘Future’ (<unnamed-27>) ...
[08:08:22.078] | : state: ‘created’
[08:08:22.078] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.079] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.079] | : Using SequentialFutureBackend ...
[08:08:22.079] | : . Number of futures since start: 26 (26 created, 26 launched, 26 finished)
[08:08:22.079] | : . Launching futures ...
[08:08:22.079] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:22.079] | : . ' , getFutureData() ...
[08:08:22.079] | : . ' , ; getFutureCore() ...
[08:08:22.079] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:22.079] | : . ' , ; getFutureCore() ... done
[08:08:22.079] | : . ' , ; getFutureCapture() ...
[08:08:22.080] | : . ' , ; getFutureCapture() ... done
[08:08:22.080] | : . ' , ; getFutureContext() ...
[08:08:22.080] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.080] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:22.080] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.080] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:22.080] | : . ' , ; getFutureContext() ... done
[08:08:22.081] | : . ' , getFutureData() ... done
[08:08:22.082] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.083] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:22.083] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.083] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.083] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.083] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:22.083] | : . ' , ; ` | New stack:
[08:08:22.083] | : . ' , ; ` | List of 1
[08:08:22.083] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.083] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.083] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:22.083] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.083] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.083] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.083] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.083] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.086] | : . ' , ; ` | Old stack:
[08:08:22.086] | : . ' , ; ` | List of 1
[08:08:22.086] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.086] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.086] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:22.086] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.086] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.086] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.086] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:22.086] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.086] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.086] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.086] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.089] | : . ' , ; ` | Not identical
[08:08:22.089] | : . ' , ; ` | all.equal() for future ...
[08:08:22.089] | : . ' , ; ` | : List of 2
[08:08:22.089] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.089] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.089] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:22.089] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.089] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.089] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.089] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.089] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.089] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.089] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.089] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.089] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.089] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.089] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.089] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.089] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.089] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.094] | : . ' , ; ` | all.equal() for future ... done
[08:08:22.095] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:22.095] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:22.095] | : . ' , ; ` List of future strategies:
[08:08:22.095] | : . ' , ; ` 1. sequential:
[08:08:22.095] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.095] | : . ' , ; `    - tweaked: FALSE
[08:08:22.095] | : . ' , ; `    - call: plan(sequential)
[08:08:22.095] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.095] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.098] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.098] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.098] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.098] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:22.098] | : . ' , ; ` | : New stack:
[08:08:22.098] | : . ' , ; ` | : List of 1
[08:08:22.098] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.098] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.098] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.098] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.098] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.098] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.098] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.098] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.098] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.098] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.098] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.101] | : . ' , ; ` | : Old stack:
[08:08:22.102] | : . ' , ; ` | : List of 1
[08:08:22.102] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.102] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.102] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.102] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.102] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.102] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.102] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.102] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.102] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.102] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.102] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.105] | : . ' , ; ` | : Identical
[08:08:22.105] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:22.105] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:22.105] | : . ' , ; ` | List of future strategies:
[08:08:22.105] | : . ' , ; ` | 1. sequential:
[08:08:22.105] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.105] | : . ' , ; ` |    - tweaked: FALSE
[08:08:22.105] | : . ' , ; ` |    - call: plan(sequential)
[08:08:22.105] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.105] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.106] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.106] | : . ' , SequentialFuture started (and completed)
[08:08:22.106] | : . ' , signalConditions() ...
[08:08:22.106] | : . ' , ; include = ‘immediateCondition’
[08:08:22.106] | : . ' , ; exclude = 
[08:08:22.106] | : . ' , ; resignal = FALSE
[08:08:22.106] | : . ' , ; Number of conditions: 6
[08:08:22.106] | : . ' , ;  int 6
[08:08:22.107] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.107] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.107] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.107] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.107] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.107] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.107] | : . ' , signalConditions() ... done
[08:08:22.108] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:22.108] | : . Launching futures ... done
[08:08:22.108] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:22.108] | : Using SequentialFutureBackend ... done
[08:08:22.108] | run() for ‘Future’ (<unnamed-27>) ... done
[08:08:22.108] future(..., label = NULL) ... done
[08:08:22.109] future(..., label = NULL) ...
[08:08:22.109] | lazy: FALSE
[08:08:22.109] | stdout: TRUE
[08:08:22.109] | conditions: [n=1] ‘condition’
[08:08:22.109] | gc: FALSE
[08:08:22.109] | earlySignal: FALSE
[08:08:22.109] | getGlobalsAndPackages() ...
[08:08:22.109] | : Searching for globals ...
[08:08:22.112] | : . globals found: [1] ‘{’
[08:08:22.112] | : Searching for globals ... done
[08:08:22.112] | : Resolving globals: FALSE
[08:08:22.114] | : Search for packages associated with the globals ...
[08:08:22.114] | : . Packages associated with globals: [1] ‘base’
[08:08:22.114] | : . Packages: [1] ‘base’
[08:08:22.114] | : Search for packages associated with the globals ... done
[08:08:22.114] | : Packages after dropping 'base': [0] 
[08:08:22.114] | : globals: [0] 
[08:08:22.115] | : packages: [0] 
[08:08:22.115] | getGlobalsAndPackages() ... done
[08:08:22.115] | run() for ‘Future’ (<unnamed-28>) ...
[08:08:22.115] | : state: ‘created’
[08:08:22.115] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.115] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.115] | : Using SequentialFutureBackend ...
[08:08:22.115] | : . Number of futures since start: 27 (27 created, 27 launched, 27 finished)
[08:08:22.115] | : . Launching futures ...
[08:08:22.116] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:22.116] | : . ' , getFutureData() ...
[08:08:22.116] | : . ' , ; getFutureCore() ...
[08:08:22.116] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:22.116] | : . ' , ; getFutureCore() ... done
[08:08:22.116] | : . ' , ; getFutureCapture() ...
[08:08:22.116] | : . ' , ; getFutureCapture() ... done
[08:08:22.116] | : . ' , ; getFutureContext() ...
[08:08:22.116] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.117] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:22.117] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.117] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:22.117] | : . ' , ; getFutureContext() ... done
[08:08:22.117] | : . ' , getFutureData() ... done
[08:08:22.118] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.118] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:22.119] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.119] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.119] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.119] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:22.119] | : . ' , ; ` | New stack:
[08:08:22.119] | : . ' , ; ` | List of 1
[08:08:22.119] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.119] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.119] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:22.119] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.119] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.119] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.119] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.119] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.122] | : . ' , ; ` | Old stack:
[08:08:22.122] | : . ' , ; ` | List of 1
[08:08:22.122] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.122] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.122] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:22.122] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.122] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.122] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.122] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:22.122] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.122] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.122] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.122] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.125] | : . ' , ; ` | Not identical
[08:08:22.125] | : . ' , ; ` | all.equal() for future ...
[08:08:22.125] | : . ' , ; ` | : List of 2
[08:08:22.125] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.125] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.125] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:22.125] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.125] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.125] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.125] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.125] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.125] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.125] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.125] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.125] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.125] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.125] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.125] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.125] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.125] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.131] | : . ' , ; ` | all.equal() for future ... done
[08:08:22.131] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:22.131] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:22.132] | : . ' , ; ` List of future strategies:
[08:08:22.132] | : . ' , ; ` 1. sequential:
[08:08:22.132] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.132] | : . ' , ; `    - tweaked: FALSE
[08:08:22.132] | : . ' , ; `    - call: plan(sequential)
[08:08:22.132] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.132] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.134] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.134] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.134] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.134] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:22.134] | : . ' , ; ` | : New stack:
[08:08:22.134] | : . ' , ; ` | : List of 1
[08:08:22.134] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.134] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.134] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.134] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.134] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.134] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.134] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.134] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.134] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.134] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.134] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.137] | : . ' , ; ` | : Old stack:
[08:08:22.138] | : . ' , ; ` | : List of 1
[08:08:22.138] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.138] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.138] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.138] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.138] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.138] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.138] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.138] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.138] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.138] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.138] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.141] | : . ' , ; ` | : Identical
[08:08:22.141] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:22.141] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:22.141] | : . ' , ; ` | List of future strategies:
[08:08:22.141] | : . ' , ; ` | 1. sequential:
[08:08:22.141] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.141] | : . ' , ; ` |    - tweaked: FALSE
[08:08:22.141] | : . ' , ; ` |    - call: plan(sequential)
[08:08:22.141] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.141] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.142] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.142] | : . ' , SequentialFuture started (and completed)
[08:08:22.142] | : . ' , signalConditions() ...
[08:08:22.142] | : . ' , ; include = ‘immediateCondition’
[08:08:22.142] | : . ' , ; exclude = 
[08:08:22.142] | : . ' , ; resignal = FALSE
[08:08:22.142] | : . ' , ; Number of conditions: 6
[08:08:22.142] | : . ' , ;  int 6
[08:08:22.143] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.143] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.143] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.143] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.143] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.143] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.143] | : . ' , signalConditions() ... done
[08:08:22.144] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:22.144] | : . Launching futures ... done
[08:08:22.144] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:22.144] | : Using SequentialFutureBackend ... done
[08:08:22.144] | run() for ‘Future’ (<unnamed-28>) ... done
[08:08:22.144] future(..., label = NULL) ... done
Classes 'listenv', 'environment' <environment: 0x564301bf09f0> 
Classes 'listenv', 'environment' <environment: 0x564301cad950> 
[08:08:22.145] resolved() for listenv ...
[08:08:22.146] | resolved() for list ...
[08:08:22.146] | : Number of elements: 6
[08:08:22.147] | : Number of futures: 6
[08:08:22.147] | : resolved() for SequentialFuture (<unnamed-26>) ...
[08:08:22.147] | : . state: ‘finished’
[08:08:22.147] | : . run: TRUE
[08:08:22.147] | : . result: ‘FutureResult’
[08:08:22.147] | : resolved() for SequentialFuture (<unnamed-26>) ... done
[08:08:22.147] | : resolved() for SequentialFuture (<unnamed-27>) ...
[08:08:22.147] | : . state: ‘finished’
[08:08:22.147] | : . run: TRUE
[08:08:22.147] | : . result: ‘FutureResult’
[08:08:22.148] | : resolved() for SequentialFuture (<unnamed-27>) ... done
[08:08:22.148] | : resolved() for SequentialFuture (<unnamed-28>) ...
[08:08:22.149] | : . state: ‘finished’
[08:08:22.149] | : . run: TRUE
[08:08:22.149] | : . result: ‘FutureResult’
[08:08:22.149] | : resolved() for SequentialFuture (<unnamed-28>) ... done
[08:08:22.149] | resolved() for list ... done
[08:08:22.149] resolved() for listenv ... done
 Named logi [1:6] TRUE TRUE TRUE TRUE TRUE TRUE
 - attr(*, "names")= chr [1:6] "a" "b" "c" "d" ...
[08:08:22.150] value() for listenv ...
[08:08:22.150] | recursive: 0
[08:08:22.150] | reduce: FALSE
[08:08:22.151] | length: 6
[08:08:22.151] | elements: ‘a’, ‘b’, ‘c’, ‘d’, ‘’, ‘’
[08:08:22.151] | Number of remaining objects: 6
[08:08:22.151] | checking value #1:
[08:08:22.151] | 'obj' is atomic
[08:08:22.151] | signalConditionsASAP(numeric, pos=1) ...
[08:08:22.152] | : nx: 6
[08:08:22.152] | : relay: TRUE
[08:08:22.152] | : stdout: TRUE
[08:08:22.152] | : signal: TRUE
[08:08:22.152] | : resignal: FALSE
[08:08:22.152] | : force: TRUE
[08:08:22.152] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.152] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.152] | : until=2
[08:08:22.152] | : relaying element #2
[08:08:22.152] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.153] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.153] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:22.153] | length: 5 (resolved future 1)
[08:08:22.153] value() for listenv ... done
[08:08:22.153] checking value #2:
[08:08:22.153] 'obj' is SequentialFuture
[08:08:22.153] resolved() for SequentialFuture (<unnamed-26>) ...
[08:08:22.153] | state: ‘finished’
[08:08:22.153] | run: TRUE
[08:08:22.154] | result: ‘FutureResult’
[08:08:22.154] resolved() for SequentialFuture (<unnamed-26>) ... done
[08:08:22.154] SequentialFuture #2
[08:08:22.154] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:22.154] | nx: 6
[08:08:22.154] | relay: TRUE
[08:08:22.154] | stdout: TRUE
[08:08:22.154] | signal: TRUE
[08:08:22.154] | resignal: FALSE
[08:08:22.154] | force: TRUE
[08:08:22.154] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.155] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.155] | until=2
[08:08:22.155] | relaying element #2
[08:08:22.155] | value() for SequentialFuture (<unnamed-26>) ...
[08:08:22.155] | : signalConditions() ...
[08:08:22.155] | : . include = ‘immediateCondition’
[08:08:22.155] | : . exclude = 
[08:08:22.155] | : . resignal = FALSE
[08:08:22.155] | : . Number of conditions: 6
[08:08:22.155] | : .  int 6
[08:08:22.156] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.156] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.156] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.156] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.156] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.156] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.156] | : signalConditions() ... done
[08:08:22.157] | : relay stdout ...
[08:08:22.157] | : relay stdout ... done
[08:08:22.157] | : check for misuse ...
[08:08:22.157] | : check for misuse ... done
[08:08:22.157] | value() for SequentialFuture (<unnamed-26>) ... done
[08:08:22.157] | signalConditions() ...
[08:08:22.157] | : include = ‘immediateCondition’
[08:08:22.157] | : exclude = 
[08:08:22.157] | : resignal = FALSE
[08:08:22.157] | : Number of conditions: 6
[08:08:22.158] | :  int 6
[08:08:22.158] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.158] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.158] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.158] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.158] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.158] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.159] | signalConditions() ... done
[08:08:22.159] | signalConditions() ...
[08:08:22.159] | : include = ‘condition’
[08:08:22.159] | : exclude = ‘error’, ‘immediateCondition’
[08:08:22.159] | : resignal = TRUE
[08:08:22.159] | : Number of conditions: 6
[08:08:22.159] | :  int 6
[08:08:22.159] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.160] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.049] | : . ' , attachPackages() ...
[08:08:22.160] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.160] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.049] | : . ' , ; packages: [n=1] ‘future’
[08:08:22.160] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.160] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.050] | : . ' , attachPackages() ... done
[08:08:22.160] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.160] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.050] | : . ' , attachPackages() ...
[08:08:22.160] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.161] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.050] | : . ' , ; packages: [n=0] 
[08:08:22.161] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.161] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.050] | : . ' , attachPackages() ... done
[08:08:22.161] | signalConditions() ... done
[08:08:22.161] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.161] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.161] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:22.161] value(<SequentialFuture>, ...) ...
[08:08:22.161] value(<SequentialFuture>, ...) ... done
[08:08:22.161] value() for SequentialFuture (<unnamed-26>) ...
[08:08:22.162] | signalConditions() ...
[08:08:22.162] | : include = ‘immediateCondition’
[08:08:22.162] | : exclude = 
[08:08:22.162] | : resignal = FALSE
[08:08:22.162] | : Number of conditions: 6
[08:08:22.162] | :  int 6
[08:08:22.162] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.163] | : already signaled, skipping
[08:08:22.163] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.163] | : already signaled, skipping
[08:08:22.163] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.163] | : already signaled, skipping
[08:08:22.163] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.163] | : already signaled, skipping
[08:08:22.163] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.163] | : already signaled, skipping
[08:08:22.163] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.164] | : already signaled, skipping
[08:08:22.164] | signalConditions() ... done
[08:08:22.164] | check for misuse ...
[08:08:22.164] | check for misuse ... done
[08:08:22.164] value() for SequentialFuture (<unnamed-26>) ... done
[08:08:22.164] value: <numeric>
[08:08:22.164] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:22.164] | nx: 6
[08:08:22.164] | relay: TRUE
[08:08:22.164] | stdout: TRUE
[08:08:22.165] | signal: TRUE
[08:08:22.165] | resignal: FALSE
[08:08:22.166] | force: TRUE
[08:08:22.166] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.166] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.166] | until=3
[08:08:22.166] | relaying element #3
[08:08:22.166] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.166] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.166] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:22.166] resolve() for SequentialFuture ...
[08:08:22.166] resolve() for SequentialFuture ... done
[08:08:22.167] length: 4 (resolved future 2)

[08:08:22.167] checking value #3:
[08:08:22.167] 'obj' is SequentialFuture
[08:08:22.167] resolved() for SequentialFuture (<unnamed-27>) ...
[08:08:22.167] | state: ‘finished’
[08:08:22.167] | run: TRUE
[08:08:22.167] | result: ‘FutureResult’
[08:08:22.167] resolved() for SequentialFuture (<unnamed-27>) ... done
[08:08:22.167] SequentialFuture #3
[08:08:22.168] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:22.168] | nx: 6
[08:08:22.168] | relay: TRUE
[08:08:22.168] | stdout: TRUE
[08:08:22.168] | signal: TRUE
[08:08:22.168] | resignal: FALSE
[08:08:22.168] | force: TRUE
[08:08:22.168] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.168] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.168] | until=3
[08:08:22.168] | relaying element #3
[08:08:22.169] | value() for SequentialFuture (<unnamed-27>) ...
[08:08:22.169] | : signalConditions() ...
[08:08:22.169] | : . include = ‘immediateCondition’
[08:08:22.169] | : . exclude = 
[08:08:22.169] | : . resignal = FALSE
[08:08:22.169] | : . Number of conditions: 6
[08:08:22.169] | : .  int 6
[08:08:22.170] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.170] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.170] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.170] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.170] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.170] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.170] | : signalConditions() ... done
[08:08:22.170] | : relay stdout ...
[08:08:22.170] | : relay stdout ... done
[08:08:22.171] | : check for misuse ...
[08:08:22.171] | : check for misuse ... done
[08:08:22.171] | value() for SequentialFuture (<unnamed-27>) ... done
[08:08:22.171] | signalConditions() ...
[08:08:22.171] | : include = ‘immediateCondition’
[08:08:22.171] | : exclude = 
[08:08:22.171] | : resignal = FALSE
[08:08:22.171] | : Number of conditions: 6
[08:08:22.171] | :  int 6
[08:08:22.172] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.172] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.172] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.172] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.172] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.172] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.172] | signalConditions() ... done
[08:08:22.172] | signalConditions() ...
[08:08:22.173] | : include = ‘condition’
[08:08:22.173] | : exclude = ‘error’, ‘immediateCondition’
[08:08:22.173] | : resignal = TRUE
[08:08:22.173] | : Number of conditions: 6
[08:08:22.173] | :  int 6
[08:08:22.173] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.173] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.081] | : . ' , attachPackages() ...
[08:08:22.174] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.174] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.082] | : . ' , ; packages: [n=1] ‘future’
[08:08:22.174] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.174] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.082] | : . ' , attachPackages() ... done
[08:08:22.174] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.174] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.082] | : . ' , attachPackages() ...
[08:08:22.174] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.174] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.082] | : . ' , ; packages: [n=0] 
[08:08:22.174] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.175] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.082] | : . ' , attachPackages() ... done
[08:08:22.175] | signalConditions() ... done
[08:08:22.175] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.175] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.175] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:22.175] value(<SequentialFuture>, ...) ...
[08:08:22.175] value(<SequentialFuture>, ...) ... done
[08:08:22.175] value() for SequentialFuture (<unnamed-27>) ...
[08:08:22.175] | signalConditions() ...
[08:08:22.175] | : include = ‘immediateCondition’
[08:08:22.176] | : exclude = 
[08:08:22.176] | : resignal = FALSE
[08:08:22.176] | : Number of conditions: 6
[08:08:22.176] | :  int 6
[08:08:22.176] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.176] | : already signaled, skipping
[08:08:22.176] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.177] | : already signaled, skipping
[08:08:22.177] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.177] | : already signaled, skipping
[08:08:22.177] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.177] | : already signaled, skipping
[08:08:22.177] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.177] | : already signaled, skipping
[08:08:22.177] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.177] | : already signaled, skipping
[08:08:22.177] | signalConditions() ... done
[08:08:22.177] | check for misuse ...
[08:08:22.178] | check for misuse ... done
[08:08:22.178] value() for SequentialFuture (<unnamed-27>) ... done
[08:08:22.178] value: <NULL>
[08:08:22.178] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:22.178] | nx: 6
[08:08:22.178] | relay: TRUE
[08:08:22.178] | stdout: TRUE
[08:08:22.178] | signal: TRUE
[08:08:22.178] | resignal: FALSE
[08:08:22.178] | force: TRUE
[08:08:22.179] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.179] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.179] | until=4
[08:08:22.179] | relaying element #4
[08:08:22.179] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.179] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.179] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:22.179] resolve() for SequentialFuture ...
[08:08:22.179] resolve() for SequentialFuture ... done
[08:08:22.179] length: 3 (resolved future 3)

[08:08:22.180] checking value #4:
[08:08:22.180] 'obj' is SequentialFuture
[08:08:22.180] resolved() for SequentialFuture (<unnamed-28>) ...
[08:08:22.180] | state: ‘finished’
[08:08:22.180] | run: TRUE
[08:08:22.180] | result: ‘FutureResult’
[08:08:22.180] resolved() for SequentialFuture (<unnamed-28>) ... done
[08:08:22.180] SequentialFuture #4
[08:08:22.180] signalConditionsASAP(SequentialFuture, pos=4) ...
[08:08:22.180] | nx: 6
[08:08:22.181] | relay: TRUE
[08:08:22.181] | stdout: TRUE
[08:08:22.181] | signal: TRUE
[08:08:22.181] | resignal: FALSE
[08:08:22.181] | force: TRUE
[08:08:22.181] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.181] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.181] | until=4
[08:08:22.181] | relaying element #4
[08:08:22.181] | value() for SequentialFuture (<unnamed-28>) ...
[08:08:22.181] | : signalConditions() ...
[08:08:22.182] | : . include = ‘immediateCondition’
[08:08:22.182] | : . exclude = 
[08:08:22.183] | : . resignal = FALSE
[08:08:22.183] | : . Number of conditions: 6
[08:08:22.183] | : .  int 6
[08:08:22.183] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.183] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.183] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.184] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.184] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.184] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.184] | : signalConditions() ... done
[08:08:22.184] | : relay stdout ...
[08:08:22.184] | : relay stdout ... done
[08:08:22.184] | : check for misuse ...
[08:08:22.184] | : check for misuse ... done
[08:08:22.184] | value() for SequentialFuture (<unnamed-28>) ... done
[08:08:22.184] | signalConditions() ...
[08:08:22.185] | : include = ‘immediateCondition’
[08:08:22.185] | : exclude = 
[08:08:22.185] | : resignal = FALSE
[08:08:22.185] | : Number of conditions: 6
[08:08:22.185] | :  int 6
[08:08:22.185] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.185] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.186] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.186] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.186] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.186] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.186] | signalConditions() ... done
[08:08:22.186] | signalConditions() ...
[08:08:22.186] | : include = ‘condition’
[08:08:22.186] | : exclude = ‘error’, ‘immediateCondition’
[08:08:22.186] | : resignal = TRUE
[08:08:22.186] | : Number of conditions: 6
[08:08:22.187] | :  int 6
[08:08:22.187] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.187] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.117] | : . ' , attachPackages() ...
[08:08:22.187] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.187] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.117] | : . ' , ; packages: [n=1] ‘future’
[08:08:22.187] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.188] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.118] | : . ' , attachPackages() ... done
[08:08:22.188] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.188] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.118] | : . ' , attachPackages() ...
[08:08:22.188] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.188] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.118] | : . ' , ; packages: [n=0] 
[08:08:22.188] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.188] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.118] | : . ' , attachPackages() ... done
[08:08:22.188] | signalConditions() ... done
[08:08:22.188] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.189] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.189] signalConditionsASAP(SequentialFuture, pos=4) ... done
[08:08:22.189] value(<SequentialFuture>, ...) ...
[08:08:22.189] value(<SequentialFuture>, ...) ... done
[08:08:22.189] value() for SequentialFuture (<unnamed-28>) ...
[08:08:22.189] | signalConditions() ...
[08:08:22.189] | : include = ‘immediateCondition’
[08:08:22.189] | : exclude = 
[08:08:22.189] | : resignal = FALSE
[08:08:22.189] | : Number of conditions: 6
[08:08:22.190] | :  int 6
[08:08:22.190] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.190] | : already signaled, skipping
[08:08:22.190] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.190] | : already signaled, skipping
[08:08:22.190] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.190] | : already signaled, skipping
[08:08:22.190] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.191] | : already signaled, skipping
[08:08:22.191] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.191] | : already signaled, skipping
[08:08:22.191] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.191] | : already signaled, skipping
[08:08:22.191] | signalConditions() ... done
[08:08:22.191] | check for misuse ...
[08:08:22.191] | check for misuse ... done
[08:08:22.191] value() for SequentialFuture (<unnamed-28>) ... done
[08:08:22.191] value: <numeric>
[08:08:22.192] signalConditionsASAP(SequentialFuture, pos=4) ...
[08:08:22.192] | nx: 6
[08:08:22.192] | relay: TRUE
[08:08:22.192] | stdout: TRUE
[08:08:22.192] | signal: TRUE
[08:08:22.192] | resignal: FALSE
[08:08:22.192] | force: TRUE
[08:08:22.192] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.192] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.192] | until=5
[08:08:22.192] | relaying element #5
[08:08:22.193] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.193] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.193] signalConditionsASAP(SequentialFuture, pos=4) ... done
[08:08:22.193] resolve() for SequentialFuture ...
[08:08:22.193] resolve() for SequentialFuture ... done
[08:08:22.193] length: 2 (resolved future 4)

[08:08:22.193] checking value #5:
[08:08:22.193] 'obj' is NULL
[08:08:22.193] signalConditionsASAP(NULL, pos=5) ...
[08:08:22.193] | nx: 6
[08:08:22.194] | relay: TRUE
[08:08:22.194] | stdout: TRUE
[08:08:22.194] | signal: TRUE
[08:08:22.194] | resignal: FALSE
[08:08:22.194] | force: TRUE
[08:08:22.194] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.194] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.194] | until=6
[08:08:22.194] | relaying element #6
[08:08:22.194] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:22.194] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.195] signalConditionsASAP(NULL, pos=5) ... done
[08:08:22.195] signalConditionsASAP(NULL, pos=5) ...
[08:08:22.195] | nx: 6
[08:08:22.195] | relay: TRUE
[08:08:22.195] | stdout: TRUE
[08:08:22.195] | signal: TRUE
[08:08:22.195] | resignal: FALSE
[08:08:22.195] | force: TRUE
[08:08:22.195] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:22.195] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.196] | until=6
[08:08:22.196] | relaying element #6
[08:08:22.196] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:22.196] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.196] signalConditionsASAP(NULL, pos=5) ... done
[08:08:22.196] length: 1 (resolved future 5)

[08:08:22.196] checking value #6:
[08:08:22.196] 'obj' is atomic
[08:08:22.196] signalConditionsASAP(numeric, pos=6) ...
[08:08:22.196] | nx: 6
[08:08:22.197] | relay: TRUE
[08:08:22.197] | stdout: TRUE
[08:08:22.197] | signal: TRUE
[08:08:22.197] | resignal: FALSE
[08:08:22.197] | force: TRUE
[08:08:22.197] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:22.197] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.197] | until=6
[08:08:22.197] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:22.197] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.197] signalConditionsASAP(numeric, pos=6) ... done
[08:08:22.198] length: 0 (resolved future 6)

[08:08:22.198] Relaying remaining futures ...
[08:08:22.198] | signalConditionsASAP(NULL, pos=0) ...
[08:08:22.198] | : nx: 6
[08:08:22.198] | : relay: TRUE
[08:08:22.198] | : stdout: TRUE
[08:08:22.198] | : signal: TRUE
[08:08:22.228] | : resignal: FALSE
[08:08:22.228] | : force: TRUE
[08:08:22.228] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:22.228] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
 - flush all
[08:08:22.228] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:22.228] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.228] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:22.228] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
 $  : NULL
 $  : num 6
Dimensions: c(1, 6)
[08:08:22.231] future(..., label = NULL) ...
[08:08:22.231] | lazy: FALSE
[08:08:22.231] | stdout: TRUE
[08:08:22.231] | conditions: [n=1] ‘condition’
[08:08:22.231] | gc: FALSE
[08:08:22.231] | earlySignal: FALSE
[08:08:22.231] | getGlobalsAndPackages() ...
[08:08:22.232] | : Searching for globals ...
[08:08:22.233] | : . globals found: [0] 
[08:08:22.233] | : Searching for globals ... done
[08:08:22.233] | : globals: [0] <none>
[08:08:22.233] | : packages: [0] <none>
[08:08:22.233] | getGlobalsAndPackages() ... done
[08:08:22.233] | run() for ‘Future’ (<unnamed-29>) ...
[08:08:22.233] | : state: ‘created’
[08:08:22.234] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.234] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.234] | : Using SequentialFutureBackend ...
[08:08:22.234] | : . Number of futures since start: 28 (28 created, 28 launched, 28 finished)
[08:08:22.234] | : . Launching futures ...
[08:08:22.234] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:22.234] | : . ' , getFutureData() ...
[08:08:22.234] | : . ' , ; getFutureCore() ...
[08:08:22.234] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:22.234] | : . ' , ; getFutureCore() ... done
[08:08:22.235] | : . ' , ; getFutureCapture() ...
[08:08:22.235] | : . ' , ; getFutureCapture() ... done
[08:08:22.235] | : . ' , ; getFutureContext() ...
[08:08:22.235] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.235] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:22.235] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.235] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:22.235] | : . ' , ; getFutureContext() ... done
[08:08:22.235] | : . ' , getFutureData() ... done
[08:08:22.237] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.237] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:22.237] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.237] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.237] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.237] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:22.238] | : . ' , ; ` | New stack:
[08:08:22.238] | : . ' , ; ` | List of 1
[08:08:22.238] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.238] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.238] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:22.238] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.238] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.238] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.238] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.238] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.240] | : . ' , ; ` | Old stack:
[08:08:22.240] | : . ' , ; ` | List of 1
[08:08:22.240] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.240] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.240] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:22.240] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.240] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.240] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.240] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:22.240] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.240] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.240] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.240] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.244] | : . ' , ; ` | Not identical
[08:08:22.244] | : . ' , ; ` | all.equal() for future ...
[08:08:22.244] | : . ' , ; ` | : List of 2
[08:08:22.244] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.244] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.244] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:22.244] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.244] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.244] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.244] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.244] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.244] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.244] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.244] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.244] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.244] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.244] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.244] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.244] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.244] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.249] | : . ' , ; ` | all.equal() for future ... done
[08:08:22.249] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:22.249] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:22.249] | : . ' , ; ` List of future strategies:
[08:08:22.249] | : . ' , ; ` 1. sequential:
[08:08:22.249] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.249] | : . ' , ; `    - tweaked: FALSE
[08:08:22.249] | : . ' , ; `    - call: plan(sequential)
[08:08:22.250] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.250] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.251] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.251] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.251] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.252] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:22.252] | : . ' , ; ` | : New stack:
[08:08:22.252] | : . ' , ; ` | : List of 1
[08:08:22.252] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.252] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.252] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.252] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.252] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.252] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.252] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.252] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.252] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.252] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.252] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.255] | : . ' , ; ` | : Old stack:
[08:08:22.255] | : . ' , ; ` | : List of 1
[08:08:22.255] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.255] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.255] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.255] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.255] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.255] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.255] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.255] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.255] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.255] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.255] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.259] | : . ' , ; ` | : Identical
[08:08:22.259] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:22.259] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:22.259] | : . ' , ; ` | List of future strategies:
[08:08:22.259] | : . ' , ; ` | 1. sequential:
[08:08:22.259] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.259] | : . ' , ; ` |    - tweaked: FALSE
[08:08:22.259] | : . ' , ; ` |    - call: plan(sequential)
[08:08:22.260] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.260] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.260] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.261] | : . ' , SequentialFuture started (and completed)
[08:08:22.261] | : . ' , signalConditions() ...
[08:08:22.261] | : . ' , ; include = ‘immediateCondition’
[08:08:22.261] | : . ' , ; exclude = 
[08:08:22.261] | : . ' , ; resignal = FALSE
[08:08:22.261] | : . ' , ; Number of conditions: 6
[08:08:22.261] | : . ' , ;  int 6
[08:08:22.262] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.262] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.262] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.262] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.262] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.263] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.263] | : . ' , signalConditions() ... done
[08:08:22.263] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:22.263] | : . Launching futures ... done
[08:08:22.263] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:22.263] | : Using SequentialFutureBackend ... done
[08:08:22.263] | run() for ‘Future’ (<unnamed-29>) ... done
[08:08:22.264] future(..., label = NULL) ... done
[08:08:22.264] future(..., label = NULL) ...
[08:08:22.264] | lazy: FALSE
[08:08:22.264] | stdout: TRUE
[08:08:22.264] | conditions: [n=1] ‘condition’
[08:08:22.264] | gc: FALSE
[08:08:22.264] | earlySignal: FALSE
[08:08:22.264] | getGlobalsAndPackages() ...
[08:08:22.265] | : Searching for globals ...
[08:08:22.266] | : . globals found: [0] 
[08:08:22.266] | : Searching for globals ... done
[08:08:22.266] | : globals: [0] <none>
[08:08:22.266] | : packages: [0] <none>
[08:08:22.266] | getGlobalsAndPackages() ... done
[08:08:22.267] | run() for ‘Future’ (<unnamed-30>) ...
[08:08:22.267] | : state: ‘created’
[08:08:22.267] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.267] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.267] | : Using SequentialFutureBackend ...
[08:08:22.267] | : . Number of futures since start: 29 (29 created, 29 launched, 29 finished)
[08:08:22.268] | : . Launching futures ...
[08:08:22.268] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:22.268] | : . ' , getFutureData() ...
[08:08:22.268] | : . ' , ; getFutureCore() ...
[08:08:22.268] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:22.268] | : . ' , ; getFutureCore() ... done
[08:08:22.268] | : . ' , ; getFutureCapture() ...
[08:08:22.269] | : . ' , ; getFutureCapture() ... done
[08:08:22.269] | : . ' , ; getFutureContext() ...
[08:08:22.269] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.269] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:22.269] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.269] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:22.269] | : . ' , ; getFutureContext() ... done
[08:08:22.270] | : . ' , getFutureData() ... done
[08:08:22.271] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.271] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:22.272] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.272] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.272] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.272] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:22.272] | : . ' , ; ` | New stack:
[08:08:22.272] | : . ' , ; ` | List of 1
[08:08:22.272] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.272] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.272] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:22.272] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.272] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.272] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.272] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.272] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.276] | : . ' , ; ` | Old stack:
[08:08:22.276] | : . ' , ; ` | List of 1
[08:08:22.276] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.276] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.276] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:22.276] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.276] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.276] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.276] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:22.276] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.276] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.276] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.276] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.280] | : . ' , ; ` | Not identical
[08:08:22.280] | : . ' , ; ` | all.equal() for future ...
[08:08:22.280] | : . ' , ; ` | : List of 2
[08:08:22.280] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.280] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.280] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:22.280] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.280] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.280] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.280] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.280] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.280] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.280] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.280] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.280] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.280] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.280] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.280] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.280] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.280] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.287] | : . ' , ; ` | all.equal() for future ... done
[08:08:22.287] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:22.287] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:22.287] | : . ' , ; ` List of future strategies:
[08:08:22.287] | : . ' , ; ` 1. sequential:
[08:08:22.287] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.287] | : . ' , ; `    - tweaked: FALSE
[08:08:22.287] | : . ' , ; `    - call: plan(sequential)
[08:08:22.288] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.288] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.290] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.290] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.290] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.291] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:22.291] | : . ' , ; ` | : New stack:
[08:08:22.291] | : . ' , ; ` | : List of 1
[08:08:22.291] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.291] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.291] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.291] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.291] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.291] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.291] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.291] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.291] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.291] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.291] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.295] | : . ' , ; ` | : Old stack:
[08:08:22.295] | : . ' , ; ` | : List of 1
[08:08:22.295] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.295] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.295] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.295] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.295] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.295] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.295] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.295] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.295] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.295] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.295] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.299] | : . ' , ; ` | : Identical
[08:08:22.299] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:22.299] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:22.299] | : . ' , ; ` | List of future strategies:
[08:08:22.299] | : . ' , ; ` | 1. sequential:
[08:08:22.299] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.299] | : . ' , ; ` |    - tweaked: FALSE
[08:08:22.299] | : . ' , ; ` |    - call: plan(sequential)
[08:08:22.300] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.300] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.300] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.301] | : . ' , SequentialFuture started (and completed)
[08:08:22.301] | : . ' , signalConditions() ...
[08:08:22.301] | : . ' , ; include = ‘immediateCondition’
[08:08:22.301] | : . ' , ; exclude = 
[08:08:22.301] | : . ' , ; resignal = FALSE
[08:08:22.301] | : . ' , ; Number of conditions: 6
[08:08:22.302] | : . ' , ;  int 6
[08:08:22.302] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.302] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.302] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.302] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.303] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.303] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.303] | : . ' , signalConditions() ... done
[08:08:22.303] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:22.303] | : . Launching futures ... done
[08:08:22.303] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:22.303] | : Using SequentialFutureBackend ... done
[08:08:22.304] | run() for ‘Future’ (<unnamed-30>) ... done
[08:08:22.304] future(..., label = NULL) ... done
[08:08:22.304] future(..., label = NULL) ...
[08:08:22.304] | lazy: FALSE
[08:08:22.304] | stdout: TRUE
[08:08:22.305] | conditions: [n=1] ‘condition’
[08:08:22.305] | gc: FALSE
[08:08:22.305] | earlySignal: FALSE
[08:08:22.305] | getGlobalsAndPackages() ...
[08:08:22.305] | : Searching for globals ...
[08:08:22.309] | : . globals found: [1] ‘{’
[08:08:22.309] | : Searching for globals ... done
[08:08:22.309] | : Resolving globals: FALSE
[08:08:22.309] | : Search for packages associated with the globals ...
[08:08:22.310] | : . Packages associated with globals: [1] ‘base’
[08:08:22.310] | : . Packages: [1] ‘base’
[08:08:22.310] | : Search for packages associated with the globals ... done
[08:08:22.310] | : Packages after dropping 'base': [0] 
[08:08:22.310] | : globals: [0] 
[08:08:22.311] | : packages: [0] 
[08:08:22.311] | getGlobalsAndPackages() ... done
[08:08:22.311] | run() for ‘Future’ (<unnamed-31>) ...
[08:08:22.311] | : state: ‘created’
[08:08:22.311] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.311] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.312] | : Using SequentialFutureBackend ...
[08:08:22.312] | : . Number of futures since start: 30 (30 created, 30 launched, 30 finished)
[08:08:22.312] | : . Launching futures ...
[08:08:22.314] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:22.314] | : . ' , getFutureData() ...
[08:08:22.314] | : . ' , ; getFutureCore() ...
[08:08:22.314] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:22.314] | : . ' , ; getFutureCore() ... done
[08:08:22.314] | : . ' , ; getFutureCapture() ...
[08:08:22.314] | : . ' , ; getFutureCapture() ... done
[08:08:22.314] | : . ' , ; getFutureContext() ...
[08:08:22.315] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.315] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:22.315] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.315] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:22.315] | : . ' , ; getFutureContext() ... done
[08:08:22.315] | : . ' , getFutureData() ... done
[08:08:22.316] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.316] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:22.317] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.317] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.317] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.317] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:22.317] | : . ' , ; ` | New stack:
[08:08:22.317] | : . ' , ; ` | List of 1
[08:08:22.317] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.317] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.317] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:22.317] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.317] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.317] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.317] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.317] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.320] | : . ' , ; ` | Old stack:
[08:08:22.320] | : . ' , ; ` | List of 1
[08:08:22.320] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.320] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.320] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:22.320] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.320] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.320] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.320] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:22.320] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.320] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.320] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.320] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.323] | : . ' , ; ` | Not identical
[08:08:22.323] | : . ' , ; ` | all.equal() for future ...
[08:08:22.323] | : . ' , ; ` | : List of 2
[08:08:22.323] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.323] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.323] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:22.323] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.323] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.323] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.323] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.323] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.323] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.323] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.323] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.323] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.323] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.323] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.323] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.323] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.323] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.328] | : . ' , ; ` | all.equal() for future ... done
[08:08:22.329] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:22.329] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:22.329] | : . ' , ; ` List of future strategies:
[08:08:22.329] | : . ' , ; ` 1. sequential:
[08:08:22.329] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.329] | : . ' , ; `    - tweaked: FALSE
[08:08:22.329] | : . ' , ; `    - call: plan(sequential)
[08:08:22.329] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.329] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.331] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.331] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.331] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.331] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:22.331] | : . ' , ; ` | : New stack:
[08:08:22.332] | : . ' , ; ` | : List of 1
[08:08:22.332] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.332] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.332] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.332] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.332] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.332] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.332] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.332] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.332] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.332] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.332] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.335] | : . ' , ; ` | : Old stack:
[08:08:22.335] | : . ' , ; ` | : List of 1
[08:08:22.335] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.335] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.335] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.335] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.335] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.335] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.335] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.335] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.335] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.335] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.335] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.338] | : . ' , ; ` | : Identical
[08:08:22.338] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:22.338] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:22.338] | : . ' , ; ` | List of future strategies:
[08:08:22.338] | : . ' , ; ` | 1. sequential:
[08:08:22.338] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.338] | : . ' , ; ` |    - tweaked: FALSE
[08:08:22.338] | : . ' , ; ` |    - call: plan(sequential)
[08:08:22.339] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.339] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.339] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.339] | : . ' , SequentialFuture started (and completed)
[08:08:22.340] | : . ' , signalConditions() ...
[08:08:22.340] | : . ' , ; include = ‘immediateCondition’
[08:08:22.340] | : . ' , ; exclude = 
[08:08:22.340] | : . ' , ; resignal = FALSE
[08:08:22.340] | : . ' , ; Number of conditions: 6
[08:08:22.340] | : . ' , ;  int 6
[08:08:22.340] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.341] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.341] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.341] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.341] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.341] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.341] | : . ' , signalConditions() ... done
[08:08:22.341] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:22.341] | : . Launching futures ... done
[08:08:22.341] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:22.342] | : Using SequentialFutureBackend ... done
[08:08:22.342] | run() for ‘Future’ (<unnamed-31>) ... done
[08:08:22.342] future(..., label = NULL) ... done
Classes 'listenv', 'environment' <environment: 0x564302b2b6e0> 
Classes 'listenv', 'environment' <environment: 0x5643034467b0> 
 - attr(*, "dim.")= int [1:2] 1 6
 - attr(*, "dimnames.")=List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
[08:08:22.344] resolved() for listenv ...
[08:08:22.345] | resolved() for matrix ...
[08:08:22.346] | : Number of elements: 6
[08:08:22.346] | : Number of futures: 6
[08:08:22.346] | : resolved() for SequentialFuture (<unnamed-29>) ...
[08:08:22.346] | : . state: ‘finished’
[08:08:22.346] | : . run: TRUE
[08:08:22.346] | : . result: ‘FutureResult’
[08:08:22.346] | : resolved() for SequentialFuture (<unnamed-29>) ... done
[08:08:22.346] | : resolved() for SequentialFuture (<unnamed-30>) ...
[08:08:22.346] | : . state: ‘finished’
[08:08:22.346] | : . run: TRUE
[08:08:22.347] | : . result: ‘FutureResult’
[08:08:22.347] | : resolved() for SequentialFuture (<unnamed-30>) ... done
[08:08:22.347] | : resolved() for SequentialFuture (<unnamed-31>) ...
[08:08:22.347] | : . state: ‘finished’
[08:08:22.347] | : . run: TRUE
[08:08:22.347] | : . result: ‘FutureResult’
[08:08:22.347] | : resolved() for SequentialFuture (<unnamed-31>) ... done
[08:08:22.347] | resolved() for matrix ... done
[08:08:22.347] resolved() for listenv ... done
 logi [1, 1:6] TRUE TRUE TRUE TRUE TRUE TRUE
 - attr(*, "dimnames")=List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
 - attr(*, "names")= chr [1:6] "a" "b" "c" "d" ...
[08:08:22.349] value() for listenv ...
[08:08:22.349] | recursive: 0
[08:08:22.349] | reduce: FALSE
[08:08:22.350] | length: 6
[08:08:22.350] | elements: ‘a’, ‘b’, ‘c’, ‘d’, ‘’, ‘’
[08:08:22.350] | Number of remaining objects: 6
[08:08:22.350] | checking value #1:
[08:08:22.350] | 'obj' is atomic
[08:08:22.351] | signalConditionsASAP(numeric, pos=1) ...
[08:08:22.351] | : nx: 6
[08:08:22.351] | : relay: TRUE
[08:08:22.351] | : stdout: TRUE
[08:08:22.351] | : signal: TRUE
[08:08:22.351] | : resignal: FALSE
[08:08:22.351] | : force: TRUE
[08:08:22.351] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.351] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.351] | : until=2
[08:08:22.352] | : relaying element #2
[08:08:22.352] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.352] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.352] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:22.352] | length: 5 (resolved future 1)
[08:08:22.352] value() for listenv ... done
[08:08:22.352] checking value #2:
[08:08:22.352] 'obj' is SequentialFuture
[08:08:22.352] resolved() for SequentialFuture (<unnamed-29>) ...
[08:08:22.353] | state: ‘finished’
[08:08:22.353] | run: TRUE
[08:08:22.353] | result: ‘FutureResult’
[08:08:22.353] resolved() for SequentialFuture (<unnamed-29>) ... done
[08:08:22.353] SequentialFuture #2
[08:08:22.353] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:22.353] | nx: 6
[08:08:22.353] | relay: TRUE
[08:08:22.353] | stdout: TRUE
[08:08:22.353] | signal: TRUE
[08:08:22.353] | resignal: FALSE
[08:08:22.354] | force: TRUE
[08:08:22.354] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.354] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.354] | until=2
[08:08:22.354] | relaying element #2
[08:08:22.354] | value() for SequentialFuture (<unnamed-29>) ...
[08:08:22.354] | : signalConditions() ...
[08:08:22.354] | : . include = ‘immediateCondition’
[08:08:22.354] | : . exclude = 
[08:08:22.354] | : . resignal = FALSE
[08:08:22.355] | : . Number of conditions: 6
[08:08:22.355] | : .  int 6
[08:08:22.355] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.355] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.355] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.355] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.355] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.356] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.356] | : signalConditions() ... done
[08:08:22.356] | : relay stdout ...
[08:08:22.356] | : relay stdout ... done
[08:08:22.356] | : check for misuse ...
[08:08:22.356] | : check for misuse ... done
[08:08:22.356] | value() for SequentialFuture (<unnamed-29>) ... done
[08:08:22.356] | signalConditions() ...
[08:08:22.356] | : include = ‘immediateCondition’
[08:08:22.357] | : exclude = 
[08:08:22.357] | : resignal = FALSE
[08:08:22.357] | : Number of conditions: 6
[08:08:22.357] | :  int 6
[08:08:22.357] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.357] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.357] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.358] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.358] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.358] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.358] | signalConditions() ... done
[08:08:22.358] | signalConditions() ...
[08:08:22.358] | : include = ‘condition’
[08:08:22.358] | : exclude = ‘error’, ‘immediateCondition’
[08:08:22.358] | : resignal = TRUE
[08:08:22.358] | : Number of conditions: 6
[08:08:22.359] | :  int 6
[08:08:22.359] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.359] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.236] | : . ' , attachPackages() ...
[08:08:22.359] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.359] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.236] | : . ' , ; packages: [n=1] ‘future’
[08:08:22.359] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.360] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.236] | : . ' , attachPackages() ... done
[08:08:22.360] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.360] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.236] | : . ' , attachPackages() ...
[08:08:22.360] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.360] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.236] | : . ' , ; packages: [n=0] 
[08:08:22.360] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.360] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.236] | : . ' , attachPackages() ... done
[08:08:22.360] | signalConditions() ... done
[08:08:22.361] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.361] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.361] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:22.361] value(<SequentialFuture>, ...) ...
[08:08:22.361] value(<SequentialFuture>, ...) ... done
[08:08:22.361] value() for SequentialFuture (<unnamed-29>) ...
[08:08:22.361] | signalConditions() ...
[08:08:22.361] | : include = ‘immediateCondition’
[08:08:22.361] | : exclude = 
[08:08:22.362] | : resignal = FALSE
[08:08:22.362] | : Number of conditions: 6
[08:08:22.362] | :  int 6
[08:08:22.362] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.362] | : already signaled, skipping
[08:08:22.362] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.362] | : already signaled, skipping
[08:08:22.363] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.363] | : already signaled, skipping
[08:08:22.363] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.363] | : already signaled, skipping
[08:08:22.363] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.363] | : already signaled, skipping
[08:08:22.363] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.363] | : already signaled, skipping
[08:08:22.363] | signalConditions() ... done
[08:08:22.364] | check for misuse ...
[08:08:22.364] | check for misuse ... done
[08:08:22.364] value() for SequentialFuture (<unnamed-29>) ... done
[08:08:22.364] value: <numeric>
[08:08:22.364] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:22.364] | nx: 6
[08:08:22.364] | relay: TRUE
[08:08:22.364] | stdout: TRUE
[08:08:22.364] | signal: TRUE
[08:08:22.364] | resignal: FALSE
[08:08:22.365] | force: TRUE
[08:08:22.365] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.365] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.365] | until=3
[08:08:22.365] | relaying element #3
[08:08:22.365] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.365] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.365] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:22.365] resolve() for SequentialFuture ...
[08:08:22.365] resolve() for SequentialFuture ... done
[08:08:22.366] length: 4 (resolved future 2)

[08:08:22.366] checking value #3:
[08:08:22.366] 'obj' is SequentialFuture
[08:08:22.366] resolved() for SequentialFuture (<unnamed-30>) ...
[08:08:22.366] | state: ‘finished’
[08:08:22.366] | run: TRUE
[08:08:22.366] | result: ‘FutureResult’
[08:08:22.366] resolved() for SequentialFuture (<unnamed-30>) ... done
[08:08:22.366] SequentialFuture #3
[08:08:22.367] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:22.367] | nx: 6
[08:08:22.367] | relay: TRUE
[08:08:22.367] | stdout: TRUE
[08:08:22.367] | signal: TRUE
[08:08:22.367] | resignal: FALSE
[08:08:22.367] | force: TRUE
[08:08:22.367] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.367] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.367] | until=3
[08:08:22.367] | relaying element #3
[08:08:22.368] | value() for SequentialFuture (<unnamed-30>) ...
[08:08:22.368] | : signalConditions() ...
[08:08:22.368] | : . include = ‘immediateCondition’
[08:08:22.368] | : . exclude = 
[08:08:22.368] | : . resignal = FALSE
[08:08:22.368] | : . Number of conditions: 6
[08:08:22.368] | : .  int 6
[08:08:22.369] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.369] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.369] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.369] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.369] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.369] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.369] | : signalConditions() ... done
[08:08:22.369] | : relay stdout ...
[08:08:22.369] | : relay stdout ... done
[08:08:22.370] | : check for misuse ...
[08:08:22.370] | : check for misuse ... done
[08:08:22.370] | value() for SequentialFuture (<unnamed-30>) ... done
[08:08:22.370] | signalConditions() ...
[08:08:22.370] | : include = ‘immediateCondition’
[08:08:22.370] | : exclude = 
[08:08:22.370] | : resignal = FALSE
[08:08:22.370] | : Number of conditions: 6
[08:08:22.370] | :  int 6
[08:08:22.371] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.371] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.371] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.371] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.371] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.371] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.371] | signalConditions() ... done
[08:08:22.372] | signalConditions() ...
[08:08:22.372] | : include = ‘condition’
[08:08:22.372] | : exclude = ‘error’, ‘immediateCondition’
[08:08:22.372] | : resignal = TRUE
[08:08:22.372] | : Number of conditions: 6
[08:08:22.372] | :  int 6
[08:08:22.372] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.373] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.270] | : . ' , attachPackages() ...
[08:08:22.373] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.373] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.270] | : . ' , ; packages: [n=1] ‘future’
[08:08:22.373] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.373] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.270] | : . ' , attachPackages() ... done
[08:08:22.373] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.373] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.270] | : . ' , attachPackages() ...
[08:08:22.373] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.374] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.271] | : . ' , ; packages: [n=0] 
[08:08:22.374] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.374] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.271] | : . ' , attachPackages() ... done
[08:08:22.374] | signalConditions() ... done
[08:08:22.374] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.374] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.374] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:22.374] value(<SequentialFuture>, ...) ...
[08:08:22.374] value(<SequentialFuture>, ...) ... done
[08:08:22.375] value() for SequentialFuture (<unnamed-30>) ...
[08:08:22.375] | signalConditions() ...
[08:08:22.375] | : include = ‘immediateCondition’
[08:08:22.375] | : exclude = 
[08:08:22.375] | : resignal = FALSE
[08:08:22.375] | : Number of conditions: 6
[08:08:22.375] | :  int 6
[08:08:22.375] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.376] | : already signaled, skipping
[08:08:22.376] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.376] | : already signaled, skipping
[08:08:22.376] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.376] | : already signaled, skipping
[08:08:22.376] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.376] | : already signaled, skipping
[08:08:22.376] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.376] | : already signaled, skipping
[08:08:22.376] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.377] | : already signaled, skipping
[08:08:22.377] | signalConditions() ... done
[08:08:22.377] | check for misuse ...
[08:08:22.377] | check for misuse ... done
[08:08:22.377] value() for SequentialFuture (<unnamed-30>) ... done
[08:08:22.377] value: <NULL>
[08:08:22.377] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:22.377] | nx: 6
[08:08:22.377] | relay: TRUE
[08:08:22.378] | stdout: TRUE
[08:08:22.378] | signal: TRUE
[08:08:22.378] | resignal: FALSE
[08:08:22.378] | force: TRUE
[08:08:22.378] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.378] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.378] | until=4
[08:08:22.378] | relaying element #4
[08:08:22.378] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.378] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.379] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:22.379] resolve() for SequentialFuture ...
[08:08:22.379] resolve() for SequentialFuture ... done
[08:08:22.379] length: 3 (resolved future 3)

[08:08:22.379] checking value #4:
[08:08:22.379] 'obj' is SequentialFuture
[08:08:22.379] resolved() for SequentialFuture (<unnamed-31>) ...
[08:08:22.379] | state: ‘finished’
[08:08:22.379] | run: TRUE
[08:08:22.380] | result: ‘FutureResult’
[08:08:22.380] resolved() for SequentialFuture (<unnamed-31>) ... done
[08:08:22.380] SequentialFuture #4
[08:08:22.380] signalConditionsASAP(SequentialFuture, pos=4) ...
[08:08:22.380] | nx: 6
[08:08:22.380] | relay: TRUE
[08:08:22.380] | stdout: TRUE
[08:08:22.380] | signal: TRUE
[08:08:22.380] | resignal: FALSE
[08:08:22.380] | force: TRUE
[08:08:22.380] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.381] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.381] | until=4
[08:08:22.381] | relaying element #4
[08:08:22.381] | value() for SequentialFuture (<unnamed-31>) ...
[08:08:22.381] | : signalConditions() ...
[08:08:22.381] | : . include = ‘immediateCondition’
[08:08:22.381] | : . exclude = 
[08:08:22.381] | : . resignal = FALSE
[08:08:22.381] | : . Number of conditions: 6
[08:08:22.381] | : .  int 6
[08:08:22.382] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.382] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.382] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.382] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.382] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.382] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.383] | : signalConditions() ... done
[08:08:22.383] | : relay stdout ...
[08:08:22.383] | : relay stdout ... done
[08:08:22.383] | : check for misuse ...
[08:08:22.383] | : check for misuse ... done
[08:08:22.383] | value() for SequentialFuture (<unnamed-31>) ... done
[08:08:22.383] | signalConditions() ...
[08:08:22.383] | : include = ‘immediateCondition’
[08:08:22.383] | : exclude = 
[08:08:22.384] | : resignal = FALSE
[08:08:22.384] | : Number of conditions: 6
[08:08:22.384] | :  int 6
[08:08:22.384] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.384] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.384] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.385] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.385] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.385] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.385] | signalConditions() ... done
[08:08:22.385] | signalConditions() ...
[08:08:22.385] | : include = ‘condition’
[08:08:22.385] | : exclude = ‘error’, ‘immediateCondition’
[08:08:22.385] | : resignal = TRUE
[08:08:22.385] | : Number of conditions: 6
[08:08:22.385] | :  int 6
[08:08:22.386] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.386] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.315] | : . ' , attachPackages() ...
[08:08:22.388] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.388] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.315] | : . ' , ; packages: [n=1] ‘future’
[08:08:22.388] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.388] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.316] | : . ' , attachPackages() ... done
[08:08:22.388] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.388] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.316] | : . ' , attachPackages() ...
[08:08:22.389] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.389] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.316] | : . ' , ; packages: [n=0] 
[08:08:22.389] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.389] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.316] | : . ' , attachPackages() ... done
[08:08:22.389] | signalConditions() ... done
[08:08:22.389] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.389] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.389] signalConditionsASAP(SequentialFuture, pos=4) ... done
[08:08:22.389] value(<SequentialFuture>, ...) ...
[08:08:22.389] value(<SequentialFuture>, ...) ... done
[08:08:22.390] value() for SequentialFuture (<unnamed-31>) ...
[08:08:22.390] | signalConditions() ...
[08:08:22.390] | : include = ‘immediateCondition’
[08:08:22.390] | : exclude = 
[08:08:22.390] | : resignal = FALSE
[08:08:22.390] | : Number of conditions: 6
[08:08:22.390] | :  int 6
[08:08:22.391] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.391] | : already signaled, skipping
[08:08:22.391] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.391] | : already signaled, skipping
[08:08:22.391] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.391] | : already signaled, skipping
[08:08:22.391] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.391] | : already signaled, skipping
[08:08:22.391] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.391] | : already signaled, skipping
[08:08:22.392] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.392] | : already signaled, skipping
[08:08:22.392] | signalConditions() ... done
[08:08:22.392] | check for misuse ...
[08:08:22.392] | check for misuse ... done
[08:08:22.392] value() for SequentialFuture (<unnamed-31>) ... done
[08:08:22.392] value: <numeric>
[08:08:22.392] signalConditionsASAP(SequentialFuture, pos=4) ...
[08:08:22.392] | nx: 6
[08:08:22.392] | relay: TRUE
[08:08:22.393] | stdout: TRUE
[08:08:22.393] | signal: TRUE
[08:08:22.393] | resignal: FALSE
[08:08:22.393] | force: TRUE
[08:08:22.393] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.393] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.393] | until=5
[08:08:22.393] | relaying element #5
[08:08:22.393] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.393] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.393] signalConditionsASAP(SequentialFuture, pos=4) ... done
[08:08:22.394] resolve() for SequentialFuture ...
[08:08:22.394] resolve() for SequentialFuture ... done
[08:08:22.394] length: 2 (resolved future 4)

[08:08:22.394] checking value #5:
[08:08:22.394] 'obj' is NULL
[08:08:22.394] signalConditionsASAP(NULL, pos=5) ...
[08:08:22.394] | nx: 6
[08:08:22.394] | relay: TRUE
[08:08:22.394] | stdout: TRUE
[08:08:22.395] | signal: TRUE
[08:08:22.395] | resignal: FALSE
[08:08:22.395] | force: TRUE
[08:08:22.395] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.395] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.395] | until=6
[08:08:22.395] | relaying element #6
[08:08:22.395] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:22.395] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.395] signalConditionsASAP(NULL, pos=5) ... done
[08:08:22.396] signalConditionsASAP(NULL, pos=5) ...
[08:08:22.396] | nx: 6
[08:08:22.396] | relay: TRUE
[08:08:22.396] | stdout: TRUE
[08:08:22.396] | signal: TRUE
[08:08:22.396] | resignal: FALSE
[08:08:22.396] | force: TRUE
[08:08:22.396] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:22.396] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.396] | until=6
[08:08:22.396] | relaying element #6
[08:08:22.397] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:22.397] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.397] signalConditionsASAP(NULL, pos=5) ... done
[08:08:22.397] length: 1 (resolved future 5)

[08:08:22.397] checking value #6:
[08:08:22.397] 'obj' is atomic
[08:08:22.397] signalConditionsASAP(numeric, pos=6) ...
[08:08:22.397] | nx: 6
[08:08:22.397] | relay: TRUE
[08:08:22.397] | stdout: TRUE
[08:08:22.398] | signal: TRUE
[08:08:22.398] | resignal: FALSE
[08:08:22.398] | force: TRUE
[08:08:22.398] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:22.398] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.398] | until=6
[08:08:22.398] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:22.398] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.398] signalConditionsASAP(numeric, pos=6) ... done
[08:08:22.398] length: 0 (resolved future 6)

[08:08:22.399] Relaying remaining futures ...
[08:08:22.399] | signalConditionsASAP(NULL, pos=0) ...
[08:08:22.399] | : nx: 6
[08:08:22.399] | : relay: TRUE
[08:08:22.399] | : stdout: TRUE
[08:08:22.399] | : signal: TRUE
[08:08:22.399] | : resignal: FALSE
[08:08:22.399] | : force: TRUE
[08:08:22.399] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:22.399] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
 - flush all
[08:08:22.400] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:22.400] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.400] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:22.400] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 1 6
 - attr(*, "dimnames")=List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
Dimensions: c(2, 3)
[08:08:22.403] future(..., label = NULL) ...
[08:08:22.403] | lazy: FALSE
[08:08:22.404] | stdout: TRUE
[08:08:22.404] | conditions: [n=1] ‘condition’
[08:08:22.404] | gc: FALSE
[08:08:22.404] | earlySignal: FALSE
[08:08:22.404] | getGlobalsAndPackages() ...
[08:08:22.404] | : Searching for globals ...
[08:08:22.405] | : . globals found: [0] 
[08:08:22.405] | : Searching for globals ... done
[08:08:22.405] | : globals: [0] <none>
[08:08:22.406] | : packages: [0] <none>
[08:08:22.406] | getGlobalsAndPackages() ... done
[08:08:22.406] | run() for ‘Future’ (<unnamed-32>) ...
[08:08:22.406] | : state: ‘created’
[08:08:22.406] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.406] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.406] | : Using SequentialFutureBackend ...
[08:08:22.406] | : . Number of futures since start: 31 (31 created, 31 launched, 31 finished)
[08:08:22.407] | : . Launching futures ...
[08:08:22.407] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:22.407] | : . ' , getFutureData() ...
[08:08:22.407] | : . ' , ; getFutureCore() ...
[08:08:22.407] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:22.407] | : . ' , ; getFutureCore() ... done
[08:08:22.407] | : . ' , ; getFutureCapture() ...
[08:08:22.407] | : . ' , ; getFutureCapture() ... done
[08:08:22.407] | : . ' , ; getFutureContext() ...
[08:08:22.408] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.408] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:22.408] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.408] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:22.408] | : . ' , ; getFutureContext() ... done
[08:08:22.408] | : . ' , getFutureData() ... done
[08:08:22.409] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.410] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:22.410] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.410] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.410] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.410] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:22.410] | : . ' , ; ` | New stack:
[08:08:22.410] | : . ' , ; ` | List of 1
[08:08:22.410] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.410] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.410] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:22.410] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.410] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.410] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.410] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.410] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.413] | : . ' , ; ` | Old stack:
[08:08:22.413] | : . ' , ; ` | List of 1
[08:08:22.413] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.413] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.413] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:22.413] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.413] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.413] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.413] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:22.413] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.413] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.413] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.413] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.416] | : . ' , ; ` | Not identical
[08:08:22.416] | : . ' , ; ` | all.equal() for future ...
[08:08:22.416] | : . ' , ; ` | : List of 2
[08:08:22.416] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.416] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.416] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:22.416] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.416] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.416] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.416] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.416] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.416] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.416] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.416] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.416] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.416] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.416] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.416] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.416] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.416] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.422] | : . ' , ; ` | all.equal() for future ... done
[08:08:22.422] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:22.422] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:22.422] | : . ' , ; ` List of future strategies:
[08:08:22.422] | : . ' , ; ` 1. sequential:
[08:08:22.422] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.422] | : . ' , ; `    - tweaked: FALSE
[08:08:22.422] | : . ' , ; `    - call: plan(sequential)
[08:08:22.422] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.422] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.424] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.424] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.424] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.424] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:22.424] | : . ' , ; ` | : New stack:
[08:08:22.425] | : . ' , ; ` | : List of 1
[08:08:22.425] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.425] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.425] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.425] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.425] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.425] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.425] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.425] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.425] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.425] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.425] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.428] | : . ' , ; ` | : Old stack:
[08:08:22.428] | : . ' , ; ` | : List of 1
[08:08:22.428] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.428] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.428] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.428] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.428] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.428] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.428] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.428] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.428] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.428] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.428] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.431] | : . ' , ; ` | : Identical
[08:08:22.431] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:22.431] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:22.431] | : . ' , ; ` | List of future strategies:
[08:08:22.431] | : . ' , ; ` | 1. sequential:
[08:08:22.431] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.431] | : . ' , ; ` |    - tweaked: FALSE
[08:08:22.431] | : . ' , ; ` |    - call: plan(sequential)
[08:08:22.432] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.432] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.432] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.432] | : . ' , SequentialFuture started (and completed)
[08:08:22.432] | : . ' , signalConditions() ...
[08:08:22.433] | : . ' , ; include = ‘immediateCondition’
[08:08:22.433] | : . ' , ; exclude = 
[08:08:22.433] | : . ' , ; resignal = FALSE
[08:08:22.433] | : . ' , ; Number of conditions: 6
[08:08:22.433] | : . ' , ;  int 6
[08:08:22.433] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.434] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.434] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.434] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.434] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.434] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.434] | : . ' , signalConditions() ... done
[08:08:22.434] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:22.434] | : . Launching futures ... done
[08:08:22.434] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:22.434] | : Using SequentialFutureBackend ... done
[08:08:22.435] | run() for ‘Future’ (<unnamed-32>) ... done
[08:08:22.435] future(..., label = NULL) ... done
[08:08:22.435] future(..., label = NULL) ...
[08:08:22.435] | lazy: FALSE
[08:08:22.435] | stdout: TRUE
[08:08:22.435] | conditions: [n=1] ‘condition’
[08:08:22.435] | gc: FALSE
[08:08:22.435] | earlySignal: FALSE
[08:08:22.435] | getGlobalsAndPackages() ...
[08:08:22.435] | : Searching for globals ...
[08:08:22.437] | : . globals found: [0] 
[08:08:22.437] | : Searching for globals ... done
[08:08:22.437] | : globals: [0] <none>
[08:08:22.437] | : packages: [0] <none>
[08:08:22.437] | getGlobalsAndPackages() ... done
[08:08:22.437] | run() for ‘Future’ (<unnamed-33>) ...
[08:08:22.437] | : state: ‘created’
[08:08:22.437] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.438] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.438] | : Using SequentialFutureBackend ...
[08:08:22.438] | : . Number of futures since start: 32 (32 created, 32 launched, 32 finished)
[08:08:22.438] | : . Launching futures ...
[08:08:22.438] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:22.438] | : . ' , getFutureData() ...
[08:08:22.438] | : . ' , ; getFutureCore() ...
[08:08:22.438] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:22.438] | : . ' , ; getFutureCore() ... done
[08:08:22.439] | : . ' , ; getFutureCapture() ...
[08:08:22.439] | : . ' , ; getFutureCapture() ... done
[08:08:22.439] | : . ' , ; getFutureContext() ...
[08:08:22.439] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.439] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:22.439] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.439] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:22.439] | : . ' , ; getFutureContext() ... done
[08:08:22.439] | : . ' , getFutureData() ... done
[08:08:22.441] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.441] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:22.441] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.441] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.441] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.441] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:22.442] | : . ' , ; ` | New stack:
[08:08:22.442] | : . ' , ; ` | List of 1
[08:08:22.442] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.442] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.442] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:22.442] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.442] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.442] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.442] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.442] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.444] | : . ' , ; ` | Old stack:
[08:08:22.444] | : . ' , ; ` | List of 1
[08:08:22.444] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.444] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.444] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:22.444] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.444] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.444] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.444] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:22.444] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.444] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.444] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.444] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.447] | : . ' , ; ` | Not identical
[08:08:22.448] | : . ' , ; ` | all.equal() for future ...
[08:08:22.448] | : . ' , ; ` | : List of 2
[08:08:22.448] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.448] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.448] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:22.448] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.448] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.448] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.448] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.448] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.448] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.448] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.448] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.448] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.448] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.448] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.448] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.448] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.448] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.453] | : . ' , ; ` | all.equal() for future ... done
[08:08:22.453] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:22.453] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:22.453] | : . ' , ; ` List of future strategies:
[08:08:22.453] | : . ' , ; ` 1. sequential:
[08:08:22.453] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.453] | : . ' , ; `    - tweaked: FALSE
[08:08:22.453] | : . ' , ; `    - call: plan(sequential)
[08:08:22.454] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.454] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.455] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.455] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.455] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.456] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:22.456] | : . ' , ; ` | : New stack:
[08:08:22.456] | : . ' , ; ` | : List of 1
[08:08:22.456] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.456] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.456] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.456] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.456] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.456] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.456] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.456] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.456] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.456] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.456] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.461] | : . ' , ; ` | : Old stack:
[08:08:22.461] | : . ' , ; ` | : List of 1
[08:08:22.461] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.461] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.461] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.461] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.461] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.461] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.461] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.461] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.461] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.461] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.461] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.464] | : . ' , ; ` | : Identical
[08:08:22.464] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:22.464] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:22.464] | : . ' , ; ` | List of future strategies:
[08:08:22.464] | : . ' , ; ` | 1. sequential:
[08:08:22.464] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.464] | : . ' , ; ` |    - tweaked: FALSE
[08:08:22.464] | : . ' , ; ` |    - call: plan(sequential)
[08:08:22.465] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.465] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.465] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.465] | : . ' , SequentialFuture started (and completed)
[08:08:22.465] | : . ' , signalConditions() ...
[08:08:22.465] | : . ' , ; include = ‘immediateCondition’
[08:08:22.465] | : . ' , ; exclude = 
[08:08:22.465] | : . ' , ; resignal = FALSE
[08:08:22.466] | : . ' , ; Number of conditions: 6
[08:08:22.466] | : . ' , ;  int 6
[08:08:22.466] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.466] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.466] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.466] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.467] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.467] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.467] | : . ' , signalConditions() ... done
[08:08:22.467] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:22.467] | : . Launching futures ... done
[08:08:22.467] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:22.467] | : Using SequentialFutureBackend ... done
[08:08:22.467] | run() for ‘Future’ (<unnamed-33>) ... done
[08:08:22.467] future(..., label = NULL) ... done
[08:08:22.468] future(..., label = NULL) ...
[08:08:22.468] | lazy: FALSE
[08:08:22.468] | stdout: TRUE
[08:08:22.468] | conditions: [n=1] ‘condition’
[08:08:22.468] | gc: FALSE
[08:08:22.468] | earlySignal: FALSE
[08:08:22.468] | getGlobalsAndPackages() ...
[08:08:22.468] | : Searching for globals ...
[08:08:22.471] | : . globals found: [1] ‘{’
[08:08:22.471] | : Searching for globals ... done
[08:08:22.471] | : Resolving globals: FALSE
[08:08:22.472] | : Search for packages associated with the globals ...
[08:08:22.472] | : . Packages associated with globals: [1] ‘base’
[08:08:22.472] | : . Packages: [1] ‘base’
[08:08:22.472] | : Search for packages associated with the globals ... done
[08:08:22.472] | : Packages after dropping 'base': [0] 
[08:08:22.472] | : globals: [0] 
[08:08:22.472] | : packages: [0] 
[08:08:22.473] | getGlobalsAndPackages() ... done
[08:08:22.473] | run() for ‘Future’ (<unnamed-34>) ...
[08:08:22.473] | : state: ‘created’
[08:08:22.473] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.473] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.473] | : Using SequentialFutureBackend ...
[08:08:22.473] | : . Number of futures since start: 33 (33 created, 33 launched, 33 finished)
[08:08:22.473] | : . Launching futures ...
[08:08:22.474] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:22.474] | : . ' , getFutureData() ...
[08:08:22.474] | : . ' , ; getFutureCore() ...
[08:08:22.474] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:22.474] | : . ' , ; getFutureCore() ... done
[08:08:22.474] | : . ' , ; getFutureCapture() ...
[08:08:22.474] | : . ' , ; getFutureCapture() ... done
[08:08:22.474] | : . ' , ; getFutureContext() ...
[08:08:22.474] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.475] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:22.475] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.475] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:22.475] | : . ' , ; getFutureContext() ... done
[08:08:22.475] | : . ' , getFutureData() ... done
[08:08:22.476] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.476] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:22.476] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.477] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.477] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.477] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:22.477] | : . ' , ; ` | New stack:
[08:08:22.477] | : . ' , ; ` | List of 1
[08:08:22.477] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.477] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.477] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:22.477] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.477] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.477] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.477] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.477] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.480] | : . ' , ; ` | Old stack:
[08:08:22.480] | : . ' , ; ` | List of 1
[08:08:22.480] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.480] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.480] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:22.480] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.480] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.480] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.480] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:22.480] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.480] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.480] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.480] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.483] | : . ' , ; ` | Not identical
[08:08:22.483] | : . ' , ; ` | all.equal() for future ...
[08:08:22.483] | : . ' , ; ` | : List of 2
[08:08:22.483] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.483] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.483] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:22.483] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.483] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.483] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.483] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.483] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.483] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.483] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.483] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.483] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.483] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.483] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.483] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.483] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.483] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.488] | : . ' , ; ` | all.equal() for future ... done
[08:08:22.488] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:22.489] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:22.489] | : . ' , ; ` List of future strategies:
[08:08:22.489] | : . ' , ; ` 1. sequential:
[08:08:22.489] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.489] | : . ' , ; `    - tweaked: FALSE
[08:08:22.489] | : . ' , ; `    - call: plan(sequential)
[08:08:22.489] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.489] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.491] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.491] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.491] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.491] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:22.491] | : . ' , ; ` | : New stack:
[08:08:22.491] | : . ' , ; ` | : List of 1
[08:08:22.491] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.491] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.491] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.491] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.491] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.491] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.491] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.491] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.491] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.491] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.491] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.494] | : . ' , ; ` | : Old stack:
[08:08:22.495] | : . ' , ; ` | : List of 1
[08:08:22.495] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.495] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.495] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.495] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.495] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.495] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.495] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.495] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.495] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.495] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.495] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.498] | : . ' , ; ` | : Identical
[08:08:22.498] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:22.498] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:22.498] | : . ' , ; ` | List of future strategies:
[08:08:22.498] | : . ' , ; ` | 1. sequential:
[08:08:22.498] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.498] | : . ' , ; ` |    - tweaked: FALSE
[08:08:22.498] | : . ' , ; ` |    - call: plan(sequential)
[08:08:22.498] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.499] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.499] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.499] | : . ' , SequentialFuture started (and completed)
[08:08:22.499] | : . ' , signalConditions() ...
[08:08:22.499] | : . ' , ; include = ‘immediateCondition’
[08:08:22.499] | : . ' , ; exclude = 
[08:08:22.499] | : . ' , ; resignal = FALSE
[08:08:22.499] | : . ' , ; Number of conditions: 6
[08:08:22.500] | : . ' , ;  int 6
[08:08:22.500] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.500] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.500] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.500] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.500] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.501] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.501] | : . ' , signalConditions() ... done
[08:08:22.501] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:22.501] | : . Launching futures ... done
[08:08:22.501] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:22.501] | : Using SequentialFutureBackend ... done
[08:08:22.501] | run() for ‘Future’ (<unnamed-34>) ... done
[08:08:22.501] future(..., label = NULL) ... done
Classes 'listenv', 'environment' <environment: 0x5643018bae80> 
Classes 'listenv', 'environment' <environment: 0x564303a88258> 
 - attr(*, "dim.")= int [1:2] 2 3
 - attr(*, "dimnames.")=List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
[08:08:22.504] resolved() for listenv ...
[08:08:22.505] | resolved() for matrix ...
[08:08:22.505] | : Number of elements: 6
[08:08:22.505] | : Number of futures: 6
[08:08:22.505] | : resolved() for SequentialFuture (<unnamed-32>) ...
[08:08:22.505] | : . state: ‘finished’
[08:08:22.505] | : . run: TRUE
[08:08:22.506] | : . result: ‘FutureResult’
[08:08:22.506] | : resolved() for SequentialFuture (<unnamed-32>) ... done
[08:08:22.506] | : resolved() for SequentialFuture (<unnamed-33>) ...
[08:08:22.506] | : . state: ‘finished’
[08:08:22.506] | : . run: TRUE
[08:08:22.506] | : . result: ‘FutureResult’
[08:08:22.506] | : resolved() for SequentialFuture (<unnamed-33>) ... done
[08:08:22.506] | : resolved() for SequentialFuture (<unnamed-34>) ...
[08:08:22.506] | : . state: ‘finished’
[08:08:22.506] | : . run: TRUE
[08:08:22.507] | : . result: ‘FutureResult’
[08:08:22.507] | : resolved() for SequentialFuture (<unnamed-34>) ... done
[08:08:22.507] | resolved() for matrix ... done
[08:08:22.507] resolved() for listenv ... done
 logi [1:2, 1:3] TRUE TRUE TRUE TRUE TRUE TRUE
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
 - attr(*, "names")= chr [1:6] "a" "b" "c" "d" ...
[08:08:22.508] value() for listenv ...
[08:08:22.508] | recursive: 0
[08:08:22.509] | reduce: FALSE
[08:08:22.510] | length: 6
[08:08:22.510] | elements: ‘a’, ‘b’, ‘c’, ‘d’, ‘’, ‘’
[08:08:22.510] | Number of remaining objects: 6
[08:08:22.510] | checking value #1:
[08:08:22.510] | 'obj' is atomic
[08:08:22.510] | signalConditionsASAP(numeric, pos=1) ...
[08:08:22.510] | : nx: 6
[08:08:22.510] | : relay: TRUE
[08:08:22.510] | : stdout: TRUE
[08:08:22.510] | : signal: TRUE
[08:08:22.510] | : resignal: FALSE
[08:08:22.511] | : force: TRUE
[08:08:22.511] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.511] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.511] | : until=2
[08:08:22.511] | : relaying element #2
[08:08:22.511] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.511] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.511] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:22.511] | length: 5 (resolved future 1)
[08:08:22.512] value() for listenv ... done
[08:08:22.512] checking value #2:
[08:08:22.512] 'obj' is SequentialFuture
[08:08:22.512] resolved() for SequentialFuture (<unnamed-32>) ...
[08:08:22.512] | state: ‘finished’
[08:08:22.512] | run: TRUE
[08:08:22.512] | result: ‘FutureResult’
[08:08:22.512] resolved() for SequentialFuture (<unnamed-32>) ... done
[08:08:22.512] SequentialFuture #2
[08:08:22.512] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:22.513] | nx: 6
[08:08:22.513] | relay: TRUE
[08:08:22.513] | stdout: TRUE
[08:08:22.513] | signal: TRUE
[08:08:22.513] | resignal: FALSE
[08:08:22.513] | force: TRUE
[08:08:22.513] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.513] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.513] | until=2
[08:08:22.513] | relaying element #2
[08:08:22.514] | value() for SequentialFuture (<unnamed-32>) ...
[08:08:22.514] | : signalConditions() ...
[08:08:22.514] | : . include = ‘immediateCondition’
[08:08:22.514] | : . exclude = 
[08:08:22.514] | : . resignal = FALSE
[08:08:22.514] | : . Number of conditions: 6
[08:08:22.514] | : .  int 6
[08:08:22.515] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.515] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.515] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.515] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.515] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.515] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.515] | : signalConditions() ... done
[08:08:22.515] | : relay stdout ...
[08:08:22.515] | : relay stdout ... done
[08:08:22.516] | : check for misuse ...
[08:08:22.516] | : check for misuse ... done
[08:08:22.516] | value() for SequentialFuture (<unnamed-32>) ... done
[08:08:22.516] | signalConditions() ...
[08:08:22.516] | : include = ‘immediateCondition’
[08:08:22.516] | : exclude = 
[08:08:22.516] | : resignal = FALSE
[08:08:22.516] | : Number of conditions: 6
[08:08:22.516] | :  int 6
[08:08:22.517] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.517] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.517] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.517] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.517] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.517] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.517] | signalConditions() ... done
[08:08:22.518] | signalConditions() ...
[08:08:22.518] | : include = ‘condition’
[08:08:22.518] | : exclude = ‘error’, ‘immediateCondition’
[08:08:22.518] | : resignal = TRUE
[08:08:22.518] | : Number of conditions: 6
[08:08:22.518] | :  int 6
[08:08:22.518] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.518] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.408] | : . ' , attachPackages() ...
[08:08:22.519] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.519] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.408] | : . ' , ; packages: [n=1] ‘future’
[08:08:22.519] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.519] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.409] | : . ' , attachPackages() ... done
[08:08:22.519] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.519] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.409] | : . ' , attachPackages() ...
[08:08:22.519] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.519] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.409] | : . ' , ; packages: [n=0] 
[08:08:22.520] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.520] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.409] | : . ' , attachPackages() ... done
[08:08:22.520] | signalConditions() ... done
[08:08:22.520] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.520] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.520] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:22.520] value(<SequentialFuture>, ...) ...
[08:08:22.520] value(<SequentialFuture>, ...) ... done
[08:08:22.520] value() for SequentialFuture (<unnamed-32>) ...
[08:08:22.521] | signalConditions() ...
[08:08:22.521] | : include = ‘immediateCondition’
[08:08:22.521] | : exclude = 
[08:08:22.521] | : resignal = FALSE
[08:08:22.521] | : Number of conditions: 6
[08:08:22.521] | :  int 6
[08:08:22.521] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.522] | : already signaled, skipping
[08:08:22.522] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.522] | : already signaled, skipping
[08:08:22.522] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.522] | : already signaled, skipping
[08:08:22.522] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.522] | : already signaled, skipping
[08:08:22.522] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.522] | : already signaled, skipping
[08:08:22.522] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.523] | : already signaled, skipping
[08:08:22.523] | signalConditions() ... done
[08:08:22.523] | check for misuse ...
[08:08:22.523] | check for misuse ... done
[08:08:22.523] value() for SequentialFuture (<unnamed-32>) ... done
[08:08:22.523] value: <numeric>
[08:08:22.523] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:22.523] | nx: 6
[08:08:22.523] | relay: TRUE
[08:08:22.523] | stdout: TRUE
[08:08:22.524] | signal: TRUE
[08:08:22.524] | resignal: FALSE
[08:08:22.524] | force: TRUE
[08:08:22.524] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.524] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.524] | until=3
[08:08:22.524] | relaying element #3
[08:08:22.524] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.524] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.524] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:22.524] resolve() for SequentialFuture ...
[08:08:22.525] resolve() for SequentialFuture ... done
[08:08:22.525] length: 4 (resolved future 2)

[08:08:22.525] checking value #3:
[08:08:22.525] 'obj' is SequentialFuture
[08:08:22.525] resolved() for SequentialFuture (<unnamed-33>) ...
[08:08:22.525] | state: ‘finished’
[08:08:22.525] | run: TRUE
[08:08:22.525] | result: ‘FutureResult’
[08:08:22.525] resolved() for SequentialFuture (<unnamed-33>) ... done
[08:08:22.526] SequentialFuture #3
[08:08:22.526] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:22.526] | nx: 6
[08:08:22.526] | relay: TRUE
[08:08:22.526] | stdout: TRUE
[08:08:22.526] | signal: TRUE
[08:08:22.526] | resignal: FALSE
[08:08:22.526] | force: TRUE
[08:08:22.526] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.526] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.527] | until=3
[08:08:22.527] | relaying element #3
[08:08:22.527] | value() for SequentialFuture (<unnamed-33>) ...
[08:08:22.527] | : signalConditions() ...
[08:08:22.527] | : . include = ‘immediateCondition’
[08:08:22.527] | : . exclude = 
[08:08:22.527] | : . resignal = FALSE
[08:08:22.527] | : . Number of conditions: 6
[08:08:22.527] | : .  int 6
[08:08:22.528] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.528] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.528] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.528] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.528] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.528] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.528] | : signalConditions() ... done
[08:08:22.528] | : relay stdout ...
[08:08:22.529] | : relay stdout ... done
[08:08:22.529] | : check for misuse ...
[08:08:22.529] | : check for misuse ... done
[08:08:22.529] | value() for SequentialFuture (<unnamed-33>) ... done
[08:08:22.529] | signalConditions() ...
[08:08:22.529] | : include = ‘immediateCondition’
[08:08:22.529] | : exclude = 
[08:08:22.529] | : resignal = FALSE
[08:08:22.529] | : Number of conditions: 6
[08:08:22.529] | :  int 6
[08:08:22.530] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.530] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.530] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.530] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.530] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.530] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.531] | signalConditions() ... done
[08:08:22.531] | signalConditions() ...
[08:08:22.531] | : include = ‘condition’
[08:08:22.531] | : exclude = ‘error’, ‘immediateCondition’
[08:08:22.532] | : resignal = TRUE
[08:08:22.532] | : Number of conditions: 6
[08:08:22.533] | :  int 6
[08:08:22.533] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.533] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.440] | : . ' , attachPackages() ...
[08:08:22.533] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.533] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.440] | : . ' , ; packages: [n=1] ‘future’
[08:08:22.533] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.534] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.440] | : . ' , attachPackages() ... done
[08:08:22.534] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.534] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.440] | : . ' , attachPackages() ...
[08:08:22.534] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.534] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.440] | : . ' , ; packages: [n=0] 
[08:08:22.534] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.534] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.440] | : . ' , attachPackages() ... done
[08:08:22.534] | signalConditions() ... done
[08:08:22.535] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.535] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.535] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:22.535] value(<SequentialFuture>, ...) ...
[08:08:22.535] value(<SequentialFuture>, ...) ... done
[08:08:22.535] value() for SequentialFuture (<unnamed-33>) ...
[08:08:22.535] | signalConditions() ...
[08:08:22.535] | : include = ‘immediateCondition’
[08:08:22.535] | : exclude = 
[08:08:22.535] | : resignal = FALSE
[08:08:22.535] | : Number of conditions: 6
[08:08:22.536] | :  int 6
[08:08:22.536] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.536] | : already signaled, skipping
[08:08:22.536] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.536] | : already signaled, skipping
[08:08:22.536] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.536] | : already signaled, skipping
[08:08:22.537] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.537] | : already signaled, skipping
[08:08:22.537] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.537] | : already signaled, skipping
[08:08:22.537] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.537] | : already signaled, skipping
[08:08:22.537] | signalConditions() ... done
[08:08:22.537] | check for misuse ...
[08:08:22.537] | check for misuse ... done
[08:08:22.537] value() for SequentialFuture (<unnamed-33>) ... done
[08:08:22.537] value: <NULL>
[08:08:22.538] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:22.538] | nx: 6
[08:08:22.538] | relay: TRUE
[08:08:22.538] | stdout: TRUE
[08:08:22.538] | signal: TRUE
[08:08:22.538] | resignal: FALSE
[08:08:22.538] | force: TRUE
[08:08:22.538] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.538] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.538] | until=4
[08:08:22.539] | relaying element #4
[08:08:22.539] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.539] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.539] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:22.539] resolve() for SequentialFuture ...
[08:08:22.539] resolve() for SequentialFuture ... done
[08:08:22.539] length: 3 (resolved future 3)

[08:08:22.539] checking value #4:
[08:08:22.539] 'obj' is SequentialFuture
[08:08:22.540] resolved() for SequentialFuture (<unnamed-34>) ...
[08:08:22.540] | state: ‘finished’
[08:08:22.540] | run: TRUE
[08:08:22.540] | result: ‘FutureResult’
[08:08:22.540] resolved() for SequentialFuture (<unnamed-34>) ... done
[08:08:22.540] SequentialFuture #4
[08:08:22.540] signalConditionsASAP(SequentialFuture, pos=4) ...
[08:08:22.540] | nx: 6
[08:08:22.540] | relay: TRUE
[08:08:22.540] | stdout: TRUE
[08:08:22.540] | signal: TRUE
[08:08:22.541] | resignal: FALSE
[08:08:22.541] | force: TRUE
[08:08:22.541] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.541] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.541] | until=4
[08:08:22.541] | relaying element #4
[08:08:22.541] | value() for SequentialFuture (<unnamed-34>) ...
[08:08:22.541] | : signalConditions() ...
[08:08:22.541] | : . include = ‘immediateCondition’
[08:08:22.541] | : . exclude = 
[08:08:22.542] | : . resignal = FALSE
[08:08:22.542] | : . Number of conditions: 6
[08:08:22.542] | : .  int 6
[08:08:22.542] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.542] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.542] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.542] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.543] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.543] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.543] | : signalConditions() ... done
[08:08:22.543] | : relay stdout ...
[08:08:22.543] | : relay stdout ... done
[08:08:22.543] | : check for misuse ...
[08:08:22.543] | : check for misuse ... done
[08:08:22.543] | value() for SequentialFuture (<unnamed-34>) ... done
[08:08:22.543] | signalConditions() ...
[08:08:22.543] | : include = ‘immediateCondition’
[08:08:22.544] | : exclude = 
[08:08:22.544] | : resignal = FALSE
[08:08:22.544] | : Number of conditions: 6
[08:08:22.544] | :  int 6
[08:08:22.544] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.544] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.544] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.545] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.545] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.545] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.545] | signalConditions() ... done
[08:08:22.545] | signalConditions() ...
[08:08:22.545] | : include = ‘condition’
[08:08:22.545] | : exclude = ‘error’, ‘immediateCondition’
[08:08:22.545] | : resignal = TRUE
[08:08:22.545] | : Number of conditions: 6
[08:08:22.545] | :  int 6
[08:08:22.546] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.546] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.475] | : . ' , attachPackages() ...
[08:08:22.546] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.546] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.475] | : . ' , ; packages: [n=1] ‘future’
[08:08:22.546] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.546] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.476] | : . ' , attachPackages() ... done
[08:08:22.547] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.547] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.476] | : . ' , attachPackages() ...
[08:08:22.547] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.547] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.476] | : . ' , ; packages: [n=0] 
[08:08:22.547] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.547] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.476] | : . ' , attachPackages() ... done
[08:08:22.547] | signalConditions() ... done
[08:08:22.547] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.548] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.548] signalConditionsASAP(SequentialFuture, pos=4) ... done
[08:08:22.548] value(<SequentialFuture>, ...) ...
[08:08:22.548] value(<SequentialFuture>, ...) ... done
[08:08:22.548] value() for SequentialFuture (<unnamed-34>) ...
[08:08:22.548] | signalConditions() ...
[08:08:22.548] | : include = ‘immediateCondition’
[08:08:22.548] | : exclude = 
[08:08:22.548] | : resignal = FALSE
[08:08:22.548] | : Number of conditions: 6
[08:08:22.548] | :  int 6
[08:08:22.549] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.549] | : already signaled, skipping
[08:08:22.549] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.549] | : already signaled, skipping
[08:08:22.549] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.549] | : already signaled, skipping
[08:08:22.549] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.550] | : already signaled, skipping
[08:08:22.550] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.550] | : already signaled, skipping
[08:08:22.550] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.550] | : already signaled, skipping
[08:08:22.550] | signalConditions() ... done
[08:08:22.550] | check for misuse ...
[08:08:22.550] | check for misuse ... done
[08:08:22.550] value() for SequentialFuture (<unnamed-34>) ... done
[08:08:22.550] value: <numeric>
[08:08:22.551] signalConditionsASAP(SequentialFuture, pos=4) ...
[08:08:22.551] | nx: 6
[08:08:22.551] | relay: TRUE
[08:08:22.551] | stdout: TRUE
[08:08:22.551] | signal: TRUE
[08:08:22.551] | resignal: FALSE
[08:08:22.551] | force: TRUE
[08:08:22.551] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.551] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.551] | until=5
[08:08:22.552] | relaying element #5
[08:08:22.552] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.552] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.552] signalConditionsASAP(SequentialFuture, pos=4) ... done
[08:08:22.552] resolve() for SequentialFuture ...
[08:08:22.552] resolve() for SequentialFuture ... done
[08:08:22.552] length: 2 (resolved future 4)

[08:08:22.552] checking value #5:
[08:08:22.552] 'obj' is NULL
[08:08:22.553] signalConditionsASAP(NULL, pos=5) ...
[08:08:22.553] | nx: 6
[08:08:22.553] | relay: TRUE
[08:08:22.553] | stdout: TRUE
[08:08:22.553] | signal: TRUE
[08:08:22.553] | resignal: FALSE
[08:08:22.553] | force: TRUE
[08:08:22.553] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.553] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.553] | until=6
[08:08:22.553] | relaying element #6
[08:08:22.554] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:22.554] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.554] signalConditionsASAP(NULL, pos=5) ... done
[08:08:22.554] signalConditionsASAP(NULL, pos=5) ...
[08:08:22.554] | nx: 6
[08:08:22.554] | relay: TRUE
[08:08:22.554] | stdout: TRUE
[08:08:22.554] | signal: TRUE
[08:08:22.554] | resignal: FALSE
[08:08:22.554] | force: TRUE
[08:08:22.555] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:22.555] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.555] | until=6
[08:08:22.555] | relaying element #6
[08:08:22.555] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:22.555] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.555] signalConditionsASAP(NULL, pos=5) ... done
[08:08:22.555] length: 1 (resolved future 5)

[08:08:22.555] checking value #6:
[08:08:22.555] 'obj' is atomic
[08:08:22.556] signalConditionsASAP(numeric, pos=6) ...
[08:08:22.556] | nx: 6
[08:08:22.556] | relay: TRUE
[08:08:22.556] | stdout: TRUE
[08:08:22.556] | signal: TRUE
[08:08:22.556] | resignal: FALSE
[08:08:22.556] | force: TRUE
[08:08:22.556] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:22.556] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.556] | until=6
[08:08:22.556] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:22.557] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.557] signalConditionsASAP(numeric, pos=6) ... done
[08:08:22.557] length: 0 (resolved future 6)

[08:08:22.557] Relaying remaining futures ...
[08:08:22.557] | signalConditionsASAP(NULL, pos=0) ...
[08:08:22.557] | : nx: 6
[08:08:22.557] | : relay: TRUE
[08:08:22.557] | : stdout: TRUE
[08:08:22.558] | : signal: TRUE
[08:08:22.558] | : resignal: FALSE
[08:08:22.558] | : force: TRUE
[08:08:22.558] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:22.558] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
 - flush all
[08:08:22.558] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:22.558] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.558] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:22.558] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 2 3
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
Dimensions: c(2, 3, 1)
[08:08:22.562] future(..., label = NULL) ...
[08:08:22.562] | lazy: FALSE
[08:08:22.562] | stdout: TRUE
[08:08:22.562] | conditions: [n=1] ‘condition’
[08:08:22.562] | gc: FALSE
[08:08:22.562] | earlySignal: FALSE
[08:08:22.562] | getGlobalsAndPackages() ...
[08:08:22.562] | : Searching for globals ...
[08:08:22.563] | : . globals found: [0] 
[08:08:22.564] | : Searching for globals ... done
[08:08:22.564] | : globals: [0] <none>
[08:08:22.564] | : packages: [0] <none>
[08:08:22.564] | getGlobalsAndPackages() ... done
[08:08:22.564] | run() for ‘Future’ (<unnamed-35>) ...
[08:08:22.564] | : state: ‘created’
[08:08:22.564] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.564] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.565] | : Using SequentialFutureBackend ...
[08:08:22.565] | : . Number of futures since start: 34 (34 created, 34 launched, 34 finished)
[08:08:22.565] | : . Launching futures ...
[08:08:22.565] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:22.565] | : . ' , getFutureData() ...
[08:08:22.565] | : . ' , ; getFutureCore() ...
[08:08:22.565] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:22.565] | : . ' , ; getFutureCore() ... done
[08:08:22.565] | : . ' , ; getFutureCapture() ...
[08:08:22.566] | : . ' , ; getFutureCapture() ... done
[08:08:22.566] | : . ' , ; getFutureContext() ...
[08:08:22.566] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.566] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:22.566] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.566] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:22.566] | : . ' , ; getFutureContext() ... done
[08:08:22.566] | : . ' , getFutureData() ... done
[08:08:22.568] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.568] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:22.568] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.568] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.568] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.568] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:22.569] | : . ' , ; ` | New stack:
[08:08:22.569] | : . ' , ; ` | List of 1
[08:08:22.569] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.569] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.569] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:22.569] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.569] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.569] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.569] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.569] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.571] | : . ' , ; ` | Old stack:
[08:08:22.571] | : . ' , ; ` | List of 1
[08:08:22.571] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.571] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.571] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:22.571] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.571] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.571] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.571] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:22.571] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.571] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.571] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.571] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.574] | : . ' , ; ` | Not identical
[08:08:22.575] | : . ' , ; ` | all.equal() for future ...
[08:08:22.575] | : . ' , ; ` | : List of 2
[08:08:22.575] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.575] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.575] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:22.575] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.575] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.575] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.575] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.575] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.575] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.575] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.575] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.575] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.575] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.575] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.575] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.575] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.575] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.580] | : . ' , ; ` | all.equal() for future ... done
[08:08:22.580] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:22.580] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:22.580] | : . ' , ; ` List of future strategies:
[08:08:22.580] | : . ' , ; ` 1. sequential:
[08:08:22.580] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.580] | : . ' , ; `    - tweaked: FALSE
[08:08:22.580] | : . ' , ; `    - call: plan(sequential)
[08:08:22.581] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.581] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.582] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.582] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.583] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.583] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:22.583] | : . ' , ; ` | : New stack:
[08:08:22.583] | : . ' , ; ` | : List of 1
[08:08:22.583] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.583] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.583] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.583] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.583] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.583] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.583] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.583] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.583] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.583] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.583] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.586] | : . ' , ; ` | : Old stack:
[08:08:22.586] | : . ' , ; ` | : List of 1
[08:08:22.586] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.586] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.586] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.586] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.586] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.586] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.586] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.586] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.586] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.586] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.586] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.589] | : . ' , ; ` | : Identical
[08:08:22.589] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:22.590] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:22.590] | : . ' , ; ` | List of future strategies:
[08:08:22.590] | : . ' , ; ` | 1. sequential:
[08:08:22.590] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.590] | : . ' , ; ` |    - tweaked: FALSE
[08:08:22.590] | : . ' , ; ` |    - call: plan(sequential)
[08:08:22.590] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.590] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.590] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.591] | : . ' , SequentialFuture started (and completed)
[08:08:22.591] | : . ' , signalConditions() ...
[08:08:22.591] | : . ' , ; include = ‘immediateCondition’
[08:08:22.591] | : . ' , ; exclude = 
[08:08:22.591] | : . ' , ; resignal = FALSE
[08:08:22.591] | : . ' , ; Number of conditions: 6
[08:08:22.591] | : . ' , ;  int 6
[08:08:22.592] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.592] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.592] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.592] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.592] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.592] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.592] | : . ' , signalConditions() ... done
[08:08:22.592] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:22.592] | : . Launching futures ... done
[08:08:22.593] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:22.593] | : Using SequentialFutureBackend ... done
[08:08:22.593] | run() for ‘Future’ (<unnamed-35>) ... done
[08:08:22.593] future(..., label = NULL) ... done
[08:08:22.593] future(..., label = NULL) ...
[08:08:22.593] | lazy: FALSE
[08:08:22.593] | stdout: TRUE
[08:08:22.593] | conditions: [n=1] ‘condition’
[08:08:22.593] | gc: FALSE
[08:08:22.594] | earlySignal: FALSE
[08:08:22.594] | getGlobalsAndPackages() ...
[08:08:22.594] | : Searching for globals ...
[08:08:22.595] | : . globals found: [0] 
[08:08:22.595] | : Searching for globals ... done
[08:08:22.595] | : globals: [0] <none>
[08:08:22.595] | : packages: [0] <none>
[08:08:22.595] | getGlobalsAndPackages() ... done
[08:08:22.595] | run() for ‘Future’ (<unnamed-36>) ...
[08:08:22.596] | : state: ‘created’
[08:08:22.596] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.596] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.596] | : Using SequentialFutureBackend ...
[08:08:22.596] | : . Number of futures since start: 35 (35 created, 35 launched, 35 finished)
[08:08:22.596] | : . Launching futures ...
[08:08:22.596] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:22.596] | : . ' , getFutureData() ...
[08:08:22.597] | : . ' , ; getFutureCore() ...
[08:08:22.597] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:22.597] | : . ' , ; getFutureCore() ... done
[08:08:22.597] | : . ' , ; getFutureCapture() ...
[08:08:22.597] | : . ' , ; getFutureCapture() ... done
[08:08:22.597] | : . ' , ; getFutureContext() ...
[08:08:22.597] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.597] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:22.597] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.597] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:22.598] | : . ' , ; getFutureContext() ... done
[08:08:22.598] | : . ' , getFutureData() ... done
[08:08:22.599] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.599] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:22.599] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.599] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.600] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.600] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:22.600] | : . ' , ; ` | New stack:
[08:08:22.600] | : . ' , ; ` | List of 1
[08:08:22.600] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.600] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.600] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:22.600] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.600] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.600] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.600] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.600] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.603] | : . ' , ; ` | Old stack:
[08:08:22.603] | : . ' , ; ` | List of 1
[08:08:22.603] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.603] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.603] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:22.603] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.603] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.603] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.603] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:22.603] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.603] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.603] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.603] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.607] | : . ' , ; ` | Not identical
[08:08:22.607] | : . ' , ; ` | all.equal() for future ...
[08:08:22.607] | : . ' , ; ` | : List of 2
[08:08:22.607] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.607] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.607] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:22.607] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.607] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.607] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.607] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.607] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.607] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.607] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.607] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.607] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.607] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.607] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.607] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.607] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.607] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.613] | : . ' , ; ` | all.equal() for future ... done
[08:08:22.613] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:22.613] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:22.613] | : . ' , ; ` List of future strategies:
[08:08:22.613] | : . ' , ; ` 1. sequential:
[08:08:22.613] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.613] | : . ' , ; `    - tweaked: FALSE
[08:08:22.613] | : . ' , ; `    - call: plan(sequential)
[08:08:22.613] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.613] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.615] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.615] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.615] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.615] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:22.615] | : . ' , ; ` | : New stack:
[08:08:22.616] | : . ' , ; ` | : List of 1
[08:08:22.616] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.616] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.616] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.616] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.616] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.616] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.616] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.616] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.616] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.616] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.616] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.619] | : . ' , ; ` | : Old stack:
[08:08:22.619] | : . ' , ; ` | : List of 1
[08:08:22.619] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.619] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.619] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.619] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.619] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.619] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.619] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.619] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.619] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.619] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.619] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.622] | : . ' , ; ` | : Identical
[08:08:22.622] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:22.622] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:22.622] | : . ' , ; ` | List of future strategies:
[08:08:22.622] | : . ' , ; ` | 1. sequential:
[08:08:22.622] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.622] | : . ' , ; ` |    - tweaked: FALSE
[08:08:22.622] | : . ' , ; ` |    - call: plan(sequential)
[08:08:22.623] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.623] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.623] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.623] | : . ' , SequentialFuture started (and completed)
[08:08:22.623] | : . ' , signalConditions() ...
[08:08:22.624] | : . ' , ; include = ‘immediateCondition’
[08:08:22.624] | : . ' , ; exclude = 
[08:08:22.624] | : . ' , ; resignal = FALSE
[08:08:22.624] | : . ' , ; Number of conditions: 6
[08:08:22.624] | : . ' , ;  int 6
[08:08:22.624] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.624] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.625] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.625] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.625] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.625] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.625] | : . ' , signalConditions() ... done
[08:08:22.625] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:22.625] | : . Launching futures ... done
[08:08:22.625] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:22.625] | : Using SequentialFutureBackend ... done
[08:08:22.626] | run() for ‘Future’ (<unnamed-36>) ... done
[08:08:22.626] future(..., label = NULL) ... done
[08:08:22.626] future(..., label = NULL) ...
[08:08:22.626] | lazy: FALSE
[08:08:22.626] | stdout: TRUE
[08:08:22.626] | conditions: [n=1] ‘condition’
[08:08:22.626] | gc: FALSE
[08:08:22.627] | earlySignal: FALSE
[08:08:22.627] | getGlobalsAndPackages() ...
[08:08:22.627] | : Searching for globals ...
[08:08:22.630] | : . globals found: [1] ‘{’
[08:08:22.630] | : Searching for globals ... done
[08:08:22.630] | : Resolving globals: FALSE
[08:08:22.630] | : Search for packages associated with the globals ...
[08:08:22.630] | : . Packages associated with globals: [1] ‘base’
[08:08:22.630] | : . Packages: [1] ‘base’
[08:08:22.630] | : Search for packages associated with the globals ... done
[08:08:22.631] | : Packages after dropping 'base': [0] 
[08:08:22.631] | : globals: [0] 
[08:08:22.631] | : packages: [0] 
[08:08:22.631] | getGlobalsAndPackages() ... done
[08:08:22.631] | run() for ‘Future’ (<unnamed-37>) ...
[08:08:22.631] | : state: ‘created’
[08:08:22.631] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.631] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.632] | : Using SequentialFutureBackend ...
[08:08:22.632] | : . Number of futures since start: 36 (36 created, 36 launched, 36 finished)
[08:08:22.632] | : . Launching futures ...
[08:08:22.632] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:22.632] | : . ' , getFutureData() ...
[08:08:22.632] | : . ' , ; getFutureCore() ...
[08:08:22.632] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:22.632] | : . ' , ; getFutureCore() ... done
[08:08:22.632] | : . ' , ; getFutureCapture() ...
[08:08:22.633] | : . ' , ; getFutureCapture() ... done
[08:08:22.633] | : . ' , ; getFutureContext() ...
[08:08:22.633] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.633] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:22.633] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.633] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:22.633] | : . ' , ; getFutureContext() ... done
[08:08:22.633] | : . ' , getFutureData() ... done
[08:08:22.635] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.635] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:22.635] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.635] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.635] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.635] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:22.635] | : . ' , ; ` | New stack:
[08:08:22.636] | : . ' , ; ` | List of 1
[08:08:22.636] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.636] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.636] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:22.636] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.636] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.636] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.636] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.636] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.638] | : . ' , ; ` | Old stack:
[08:08:22.638] | : . ' , ; ` | List of 1
[08:08:22.638] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.638] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.638] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:22.638] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.638] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.638] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.638] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:22.638] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.638] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.638] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.638] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.642] | : . ' , ; ` | Not identical
[08:08:22.642] | : . ' , ; ` | all.equal() for future ...
[08:08:22.642] | : . ' , ; ` | : List of 2
[08:08:22.642] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.642] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.642] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:22.642] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.642] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.642] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.642] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.642] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.642] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.642] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.642] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.642] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.642] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.642] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.642] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.642] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.642] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.647] | : . ' , ; ` | all.equal() for future ... done
[08:08:22.647] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:22.647] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:22.647] | : . ' , ; ` List of future strategies:
[08:08:22.647] | : . ' , ; ` 1. sequential:
[08:08:22.647] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.647] | : . ' , ; `    - tweaked: FALSE
[08:08:22.647] | : . ' , ; `    - call: plan(sequential)
[08:08:22.648] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.648] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.649] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.649] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.650] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.650] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:22.650] | : . ' , ; ` | : New stack:
[08:08:22.650] | : . ' , ; ` | : List of 1
[08:08:22.650] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.650] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.650] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.650] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.650] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.650] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.650] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.650] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.650] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.650] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.650] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.653] | : . ' , ; ` | : Old stack:
[08:08:22.653] | : . ' , ; ` | : List of 1
[08:08:22.653] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.653] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.653] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.653] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.653] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.653] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.653] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.653] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.653] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.653] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.653] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.656] | : . ' , ; ` | : Identical
[08:08:22.657] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:22.657] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:22.657] | : . ' , ; ` | List of future strategies:
[08:08:22.657] | : . ' , ; ` | 1. sequential:
[08:08:22.657] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.657] | : . ' , ; ` |    - tweaked: FALSE
[08:08:22.657] | : . ' , ; ` |    - call: plan(sequential)
[08:08:22.657] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.657] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.657] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.658] | : . ' , SequentialFuture started (and completed)
[08:08:22.658] | : . ' , signalConditions() ...
[08:08:22.658] | : . ' , ; include = ‘immediateCondition’
[08:08:22.658] | : . ' , ; exclude = 
[08:08:22.658] | : . ' , ; resignal = FALSE
[08:08:22.658] | : . ' , ; Number of conditions: 6
[08:08:22.658] | : . ' , ;  int 6
[08:08:22.659] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.659] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.659] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.659] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.659] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.659] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.659] | : . ' , signalConditions() ... done
[08:08:22.660] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:22.660] | : . Launching futures ... done
[08:08:22.660] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:22.660] | : Using SequentialFutureBackend ... done
[08:08:22.660] | run() for ‘Future’ (<unnamed-37>) ... done
[08:08:22.660] future(..., label = NULL) ... done
Classes 'listenv', 'environment' <environment: 0x56430347abb0> 
Classes 'listenv', 'environment' <environment: 0x564304192688> 
 - attr(*, "dim.")= int [1:3] 2 3 1
 - attr(*, "dimnames.")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
[08:08:22.663] resolved() for listenv ...
[08:08:22.664] | resolved() for array ...
[08:08:22.664] | : Number of elements: 6
[08:08:22.664] | : Number of futures: 6
[08:08:22.664] | : resolved() for SequentialFuture (<unnamed-35>) ...
[08:08:22.664] | : . state: ‘finished’
[08:08:22.664] | : . run: TRUE
[08:08:22.665] | : . result: ‘FutureResult’
[08:08:22.665] | : resolved() for SequentialFuture (<unnamed-35>) ... done
[08:08:22.665] | : resolved() for SequentialFuture (<unnamed-36>) ...
[08:08:22.665] | : . state: ‘finished’
[08:08:22.665] | : . run: TRUE
[08:08:22.665] | : . result: ‘FutureResult’
[08:08:22.665] | : resolved() for SequentialFuture (<unnamed-36>) ... done
[08:08:22.665] | : resolved() for SequentialFuture (<unnamed-37>) ...
[08:08:22.665] | : . state: ‘finished’
[08:08:22.666] | : . run: TRUE
[08:08:22.666] | : . result: ‘FutureResult’
[08:08:22.666] | : resolved() for SequentialFuture (<unnamed-37>) ... done
[08:08:22.666] | resolved() for array ... done
[08:08:22.666] resolved() for listenv ... done
 logi [1:2, 1:3, 1] TRUE TRUE TRUE TRUE TRUE TRUE
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
 - attr(*, "names")= chr [1:6] "a" "b" "c" "d" ...
[08:08:22.668] value() for listenv ...
[08:08:22.668] | recursive: 0
[08:08:22.668] | reduce: FALSE
[08:08:22.669] | length: 6
[08:08:22.669] | elements: ‘a’, ‘b’, ‘c’, ‘d’, ‘’, ‘’
[08:08:22.669] | Number of remaining objects: 6
[08:08:22.669] | checking value #1:
[08:08:22.669] | 'obj' is atomic
[08:08:22.669] | signalConditionsASAP(numeric, pos=1) ...
[08:08:22.670] | : nx: 6
[08:08:22.670] | : relay: TRUE
[08:08:22.670] | : stdout: TRUE
[08:08:22.670] | : signal: TRUE
[08:08:22.670] | : resignal: FALSE
[08:08:22.670] | : force: TRUE
[08:08:22.670] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.670] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.670] | : until=2
[08:08:22.670] | : relaying element #2
[08:08:22.671] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.671] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.671] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:22.671] | length: 5 (resolved future 1)
[08:08:22.671] value() for listenv ... done
[08:08:22.671] checking value #2:
[08:08:22.671] 'obj' is SequentialFuture
[08:08:22.671] resolved() for SequentialFuture (<unnamed-35>) ...
[08:08:22.671] | state: ‘finished’
[08:08:22.672] | run: TRUE
[08:08:22.672] | result: ‘FutureResult’
[08:08:22.672] resolved() for SequentialFuture (<unnamed-35>) ... done
[08:08:22.672] SequentialFuture #2
[08:08:22.672] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:22.672] | nx: 6
[08:08:22.672] | relay: TRUE
[08:08:22.672] | stdout: TRUE
[08:08:22.672] | signal: TRUE
[08:08:22.672] | resignal: FALSE
[08:08:22.673] | force: TRUE
[08:08:22.673] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.673] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.673] | until=2
[08:08:22.673] | relaying element #2
[08:08:22.673] | value() for SequentialFuture (<unnamed-35>) ...
[08:08:22.673] | : signalConditions() ...
[08:08:22.673] | : . include = ‘immediateCondition’
[08:08:22.673] | : . exclude = 
[08:08:22.673] | : . resignal = FALSE
[08:08:22.674] | : . Number of conditions: 6
[08:08:22.674] | : .  int 6
[08:08:22.674] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.674] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.674] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.674] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.675] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.675] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.675] | : signalConditions() ... done
[08:08:22.675] | : relay stdout ...
[08:08:22.675] | : relay stdout ... done
[08:08:22.677] | : check for misuse ...
[08:08:22.677] | : check for misuse ... done
[08:08:22.677] | value() for SequentialFuture (<unnamed-35>) ... done
[08:08:22.677] | signalConditions() ...
[08:08:22.677] | : include = ‘immediateCondition’
[08:08:22.677] | : exclude = 
[08:08:22.677] | : resignal = FALSE
[08:08:22.677] | : Number of conditions: 6
[08:08:22.678] | :  int 6
[08:08:22.678] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.678] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.678] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.678] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.678] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.678] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.679] | signalConditions() ... done
[08:08:22.679] | signalConditions() ...
[08:08:22.679] | : include = ‘condition’
[08:08:22.679] | : exclude = ‘error’, ‘immediateCondition’
[08:08:22.679] | : resignal = TRUE
[08:08:22.679] | : Number of conditions: 6
[08:08:22.679] | :  int 6
[08:08:22.680] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.680] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.567] | : . ' , attachPackages() ...
[08:08:22.680] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.680] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.567] | : . ' , ; packages: [n=1] ‘future’
[08:08:22.680] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.680] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.567] | : . ' , attachPackages() ... done
[08:08:22.680] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.680] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.567] | : . ' , attachPackages() ...
[08:08:22.681] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.681] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.567] | : . ' , ; packages: [n=0] 
[08:08:22.681] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.681] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.567] | : . ' , attachPackages() ... done
[08:08:22.681] | signalConditions() ... done
[08:08:22.681] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.681] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.681] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:22.681] value(<SequentialFuture>, ...) ...
[08:08:22.681] value(<SequentialFuture>, ...) ... done
[08:08:22.682] value() for SequentialFuture (<unnamed-35>) ...
[08:08:22.682] | signalConditions() ...
[08:08:22.682] | : include = ‘immediateCondition’
[08:08:22.682] | : exclude = 
[08:08:22.682] | : resignal = FALSE
[08:08:22.682] | : Number of conditions: 6
[08:08:22.682] | :  int 6
[08:08:22.683] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.683] | : already signaled, skipping
[08:08:22.683] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.683] | : already signaled, skipping
[08:08:22.683] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.683] | : already signaled, skipping
[08:08:22.683] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.683] | : already signaled, skipping
[08:08:22.683] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.683] | : already signaled, skipping
[08:08:22.684] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.684] | : already signaled, skipping
[08:08:22.684] | signalConditions() ... done
[08:08:22.684] | check for misuse ...
[08:08:22.684] | check for misuse ... done
[08:08:22.684] value() for SequentialFuture (<unnamed-35>) ... done
[08:08:22.684] value: <numeric>
[08:08:22.684] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:22.684] | nx: 6
[08:08:22.684] | relay: TRUE
[08:08:22.685] | stdout: TRUE
[08:08:22.685] | signal: TRUE
[08:08:22.685] | resignal: FALSE
[08:08:22.685] | force: TRUE
[08:08:22.685] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.685] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.685] | until=3
[08:08:22.685] | relaying element #3
[08:08:22.685] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.685] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.685] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:22.686] resolve() for SequentialFuture ...
[08:08:22.686] resolve() for SequentialFuture ... done
[08:08:22.686] length: 4 (resolved future 2)

[08:08:22.686] checking value #3:
[08:08:22.686] 'obj' is SequentialFuture
[08:08:22.686] resolved() for SequentialFuture (<unnamed-36>) ...
[08:08:22.686] | state: ‘finished’
[08:08:22.686] | run: TRUE
[08:08:22.687] | result: ‘FutureResult’
[08:08:22.687] resolved() for SequentialFuture (<unnamed-36>) ... done
[08:08:22.687] SequentialFuture #3
[08:08:22.687] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:22.687] | nx: 6
[08:08:22.687] | relay: TRUE
[08:08:22.687] | stdout: TRUE
[08:08:22.687] | signal: TRUE
[08:08:22.687] | resignal: FALSE
[08:08:22.687] | force: TRUE
[08:08:22.687] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.688] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.688] | until=3
[08:08:22.688] | relaying element #3
[08:08:22.688] | value() for SequentialFuture (<unnamed-36>) ...
[08:08:22.688] | : signalConditions() ...
[08:08:22.688] | : . include = ‘immediateCondition’
[08:08:22.688] | : . exclude = 
[08:08:22.688] | : . resignal = FALSE
[08:08:22.688] | : . Number of conditions: 6
[08:08:22.688] | : .  int 6
[08:08:22.689] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.689] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.689] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.689] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.689] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.689] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.689] | : signalConditions() ... done
[08:08:22.690] | : relay stdout ...
[08:08:22.690] | : relay stdout ... done
[08:08:22.690] | : check for misuse ...
[08:08:22.690] | : check for misuse ... done
[08:08:22.690] | value() for SequentialFuture (<unnamed-36>) ... done
[08:08:22.690] | signalConditions() ...
[08:08:22.690] | : include = ‘immediateCondition’
[08:08:22.690] | : exclude = 
[08:08:22.690] | : resignal = FALSE
[08:08:22.690] | : Number of conditions: 6
[08:08:22.691] | :  int 6
[08:08:22.691] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.691] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.691] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.691] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.691] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.692] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.692] | signalConditions() ... done
[08:08:22.692] | signalConditions() ...
[08:08:22.692] | : include = ‘condition’
[08:08:22.692] | : exclude = ‘error’, ‘immediateCondition’
[08:08:22.692] | : resignal = TRUE
[08:08:22.692] | : Number of conditions: 6
[08:08:22.692] | :  int 6
[08:08:22.693] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.693] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.598] | : . ' , attachPackages() ...
[08:08:22.693] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.693] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.598] | : . ' , ; packages: [n=1] ‘future’
[08:08:22.693] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.693] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.598] | : . ' , attachPackages() ... done
[08:08:22.693] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.693] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.598] | : . ' , attachPackages() ...
[08:08:22.694] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.694] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.599] | : . ' , ; packages: [n=0] 
[08:08:22.694] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.694] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.599] | : . ' , attachPackages() ... done
[08:08:22.694] | signalConditions() ... done
[08:08:22.694] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.694] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.694] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:22.694] value(<SequentialFuture>, ...) ...
[08:08:22.695] value(<SequentialFuture>, ...) ... done
[08:08:22.695] value() for SequentialFuture (<unnamed-36>) ...
[08:08:22.695] | signalConditions() ...
[08:08:22.695] | : include = ‘immediateCondition’
[08:08:22.695] | : exclude = 
[08:08:22.695] | : resignal = FALSE
[08:08:22.695] | : Number of conditions: 6
[08:08:22.695] | :  int 6
[08:08:22.696] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.696] | : already signaled, skipping
[08:08:22.696] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.696] | : already signaled, skipping
[08:08:22.696] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.696] | : already signaled, skipping
[08:08:22.696] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.696] | : already signaled, skipping
[08:08:22.696] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.697] | : already signaled, skipping
[08:08:22.697] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.697] | : already signaled, skipping
[08:08:22.697] | signalConditions() ... done
[08:08:22.697] | check for misuse ...
[08:08:22.697] | check for misuse ... done
[08:08:22.697] value() for SequentialFuture (<unnamed-36>) ... done
[08:08:22.697] value: <NULL>
[08:08:22.697] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:22.698] | nx: 6
[08:08:22.698] | relay: TRUE
[08:08:22.698] | stdout: TRUE
[08:08:22.698] | signal: TRUE
[08:08:22.698] | resignal: FALSE
[08:08:22.698] | force: TRUE
[08:08:22.698] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.698] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.698] | until=4
[08:08:22.698] | relaying element #4
[08:08:22.698] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.699] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.699] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:22.699] resolve() for SequentialFuture ...
[08:08:22.699] resolve() for SequentialFuture ... done
[08:08:22.699] length: 3 (resolved future 3)

[08:08:22.699] checking value #4:
[08:08:22.699] 'obj' is SequentialFuture
[08:08:22.699] resolved() for SequentialFuture (<unnamed-37>) ...
[08:08:22.699] | state: ‘finished’
[08:08:22.700] | run: TRUE
[08:08:22.700] | result: ‘FutureResult’
[08:08:22.700] resolved() for SequentialFuture (<unnamed-37>) ... done
[08:08:22.700] SequentialFuture #4
[08:08:22.700] signalConditionsASAP(SequentialFuture, pos=4) ...
[08:08:22.700] | nx: 6
[08:08:22.700] | relay: TRUE
[08:08:22.700] | stdout: TRUE
[08:08:22.700] | signal: TRUE
[08:08:22.700] | resignal: FALSE
[08:08:22.700] | force: TRUE
[08:08:22.701] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.701] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.701] | until=4
[08:08:22.701] | relaying element #4
[08:08:22.701] | value() for SequentialFuture (<unnamed-37>) ...
[08:08:22.701] | : signalConditions() ...
[08:08:22.701] | : . include = ‘immediateCondition’
[08:08:22.701] | : . exclude = 
[08:08:22.701] | : . resignal = FALSE
[08:08:22.701] | : . Number of conditions: 6
[08:08:22.702] | : .  int 6
[08:08:22.702] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.702] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.702] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.702] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.702] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.702] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.703] | : signalConditions() ... done
[08:08:22.703] | : relay stdout ...
[08:08:22.703] | : relay stdout ... done
[08:08:22.703] | : check for misuse ...
[08:08:22.703] | : check for misuse ... done
[08:08:22.703] | value() for SequentialFuture (<unnamed-37>) ... done
[08:08:22.703] | signalConditions() ...
[08:08:22.703] | : include = ‘immediateCondition’
[08:08:22.703] | : exclude = 
[08:08:22.703] | : resignal = FALSE
[08:08:22.704] | : Number of conditions: 6
[08:08:22.704] | :  int 6
[08:08:22.704] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.704] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.704] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.704] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.704] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.705] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.705] | signalConditions() ... done
[08:08:22.705] | signalConditions() ...
[08:08:22.705] | : include = ‘condition’
[08:08:22.705] | : exclude = ‘error’, ‘immediateCondition’
[08:08:22.705] | : resignal = TRUE
[08:08:22.705] | : Number of conditions: 6
[08:08:22.705] | :  int 6
[08:08:22.706] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.706] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.634] | : . ' , attachPackages() ...
[08:08:22.706] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.706] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.634] | : . ' , ; packages: [n=1] ‘future’
[08:08:22.706] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.706] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.634] | : . ' , attachPackages() ... done
[08:08:22.706] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.707] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.634] | : . ' , attachPackages() ...
[08:08:22.707] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.707] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.634] | : . ' , ; packages: [n=0] 
[08:08:22.707] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.707] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.634] | : . ' , attachPackages() ... done
[08:08:22.707] | signalConditions() ... done
[08:08:22.707] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.707] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.707] signalConditionsASAP(SequentialFuture, pos=4) ... done
[08:08:22.708] value(<SequentialFuture>, ...) ...
[08:08:22.708] value(<SequentialFuture>, ...) ... done
[08:08:22.708] value() for SequentialFuture (<unnamed-37>) ...
[08:08:22.708] | signalConditions() ...
[08:08:22.708] | : include = ‘immediateCondition’
[08:08:22.708] | : exclude = 
[08:08:22.708] | : resignal = FALSE
[08:08:22.708] | : Number of conditions: 6
[08:08:22.708] | :  int 6
[08:08:22.709] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.709] | : already signaled, skipping
[08:08:22.709] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.709] | : already signaled, skipping
[08:08:22.709] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.709] | : already signaled, skipping
[08:08:22.709] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.709] | : already signaled, skipping
[08:08:22.710] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.710] | : already signaled, skipping
[08:08:22.710] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.710] | : already signaled, skipping
[08:08:22.710] | signalConditions() ... done
[08:08:22.710] | check for misuse ...
[08:08:22.710] | check for misuse ... done
[08:08:22.710] value() for SequentialFuture (<unnamed-37>) ... done
[08:08:22.710] value: <numeric>
[08:08:22.711] signalConditionsASAP(SequentialFuture, pos=4) ...
[08:08:22.711] | nx: 6
[08:08:22.711] | relay: TRUE
[08:08:22.711] | stdout: TRUE
[08:08:22.711] | signal: TRUE
[08:08:22.711] | resignal: FALSE
[08:08:22.711] | force: TRUE
[08:08:22.711] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.711] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.712] | until=5
[08:08:22.712] | relaying element #5
[08:08:22.712] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.712] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.712] signalConditionsASAP(SequentialFuture, pos=4) ... done
[08:08:22.712] resolve() for SequentialFuture ...
[08:08:22.712] resolve() for SequentialFuture ... done
[08:08:22.712] length: 2 (resolved future 4)

[08:08:22.713] checking value #5:
[08:08:22.713] 'obj' is NULL
[08:08:22.713] signalConditionsASAP(NULL, pos=5) ...
[08:08:22.713] | nx: 6
[08:08:22.713] | relay: TRUE
[08:08:22.713] | stdout: TRUE
[08:08:22.713] | signal: TRUE
[08:08:22.713] | resignal: FALSE
[08:08:22.713] | force: TRUE
[08:08:22.713] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.713] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.714] | until=6
[08:08:22.714] | relaying element #6
[08:08:22.714] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:22.714] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.714] signalConditionsASAP(NULL, pos=5) ... done
[08:08:22.714] signalConditionsASAP(NULL, pos=5) ...
[08:08:22.714] | nx: 6
[08:08:22.714] | relay: TRUE
[08:08:22.714] | stdout: TRUE
[08:08:22.714] | signal: TRUE
[08:08:22.715] | resignal: FALSE
[08:08:22.715] | force: TRUE
[08:08:22.715] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:22.715] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.715] | until=6
[08:08:22.715] | relaying element #6
[08:08:22.715] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:22.715] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.715] signalConditionsASAP(NULL, pos=5) ... done
[08:08:22.715] length: 1 (resolved future 5)

[08:08:22.716] checking value #6:
[08:08:22.716] 'obj' is atomic
[08:08:22.716] signalConditionsASAP(numeric, pos=6) ...
[08:08:22.716] | nx: 6
[08:08:22.716] | relay: TRUE
[08:08:22.716] | stdout: TRUE
[08:08:22.716] | signal: TRUE
[08:08:22.716] | resignal: FALSE
[08:08:22.716] | force: TRUE
[08:08:22.716] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:22.717] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.717] | until=6
[08:08:22.717] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:22.717] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.717] signalConditionsASAP(numeric, pos=6) ... done
[08:08:22.717] length: 0 (resolved future 6)

[08:08:22.717] Relaying remaining futures ...
[08:08:22.717] | signalConditionsASAP(NULL, pos=0) ...
[08:08:22.718] | : nx: 6
[08:08:22.718] | : relay: TRUE
[08:08:22.718] | : stdout: TRUE
[08:08:22.718] | : signal: TRUE
[08:08:22.718] | : resignal: FALSE
[08:08:22.718] | : force: TRUE
[08:08:22.718] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:22.718] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
 - flush all
[08:08:22.718] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:22.718] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.719] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:22.719] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:3] 2 3 1
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
Dimensions: c(2, 1, 3, 1)
[08:08:22.722] future(..., label = NULL) ...
[08:08:22.723] | lazy: FALSE
[08:08:22.723] | stdout: TRUE
[08:08:22.723] | conditions: [n=1] ‘condition’
[08:08:22.723] | gc: FALSE
[08:08:22.723] | earlySignal: FALSE
[08:08:22.723] | getGlobalsAndPackages() ...
[08:08:22.723] | : Searching for globals ...
[08:08:22.724] | : . globals found: [0] 
[08:08:22.725] | : Searching for globals ... done
[08:08:22.725] | : globals: [0] <none>
[08:08:22.725] | : packages: [0] <none>
[08:08:22.725] | getGlobalsAndPackages() ... done
[08:08:22.725] | run() for ‘Future’ (<unnamed-38>) ...
[08:08:22.725] | : state: ‘created’
[08:08:22.725] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.726] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.726] | : Using SequentialFutureBackend ...
[08:08:22.726] | : . Number of futures since start: 37 (37 created, 37 launched, 37 finished)
[08:08:22.726] | : . Launching futures ...
[08:08:22.726] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:22.726] | : . ' , getFutureData() ...
[08:08:22.726] | : . ' , ; getFutureCore() ...
[08:08:22.726] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:22.726] | : . ' , ; getFutureCore() ... done
[08:08:22.727] | : . ' , ; getFutureCapture() ...
[08:08:22.727] | : . ' , ; getFutureCapture() ... done
[08:08:22.727] | : . ' , ; getFutureContext() ...
[08:08:22.727] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.727] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:22.727] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.727] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:22.727] | : . ' , ; getFutureContext() ... done
[08:08:22.727] | : . ' , getFutureData() ... done
[08:08:22.729] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.729] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:22.729] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.729] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.730] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.730] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:22.730] | : . ' , ; ` | New stack:
[08:08:22.730] | : . ' , ; ` | List of 1
[08:08:22.730] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.730] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.730] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:22.730] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.730] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.730] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.730] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.730] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.733] | : . ' , ; ` | Old stack:
[08:08:22.733] | : . ' , ; ` | List of 1
[08:08:22.733] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.733] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.733] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:22.733] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.733] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.733] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.733] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:22.733] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.733] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.733] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.733] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.736] | : . ' , ; ` | Not identical
[08:08:22.736] | : . ' , ; ` | all.equal() for future ...
[08:08:22.736] | : . ' , ; ` | : List of 2
[08:08:22.736] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.736] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.736] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:22.736] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.736] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.736] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.736] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.736] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.736] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.736] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.736] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.736] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.736] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.736] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.736] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.736] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.736] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.742] | : . ' , ; ` | all.equal() for future ... done
[08:08:22.742] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:22.742] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:22.742] | : . ' , ; ` List of future strategies:
[08:08:22.742] | : . ' , ; ` 1. sequential:
[08:08:22.742] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.742] | : . ' , ; `    - tweaked: FALSE
[08:08:22.742] | : . ' , ; `    - call: plan(sequential)
[08:08:22.742] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.743] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.744] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.744] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.744] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.745] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:22.745] | : . ' , ; ` | : New stack:
[08:08:22.745] | : . ' , ; ` | : List of 1
[08:08:22.745] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.745] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.745] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.745] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.745] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.745] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.745] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.745] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.745] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.745] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.745] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.748] | : . ' , ; ` | : Old stack:
[08:08:22.748] | : . ' , ; ` | : List of 1
[08:08:22.748] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.748] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.748] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.748] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.748] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.748] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.748] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.748] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.748] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.748] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.748] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.753] | : . ' , ; ` | : Identical
[08:08:22.753] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:22.753] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:22.754] | : . ' , ; ` | List of future strategies:
[08:08:22.754] | : . ' , ; ` | 1. sequential:
[08:08:22.754] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.754] | : . ' , ; ` |    - tweaked: FALSE
[08:08:22.754] | : . ' , ; ` |    - call: plan(sequential)
[08:08:22.754] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.754] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.754] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.755] | : . ' , SequentialFuture started (and completed)
[08:08:22.755] | : . ' , signalConditions() ...
[08:08:22.755] | : . ' , ; include = ‘immediateCondition’
[08:08:22.755] | : . ' , ; exclude = 
[08:08:22.755] | : . ' , ; resignal = FALSE
[08:08:22.755] | : . ' , ; Number of conditions: 6
[08:08:22.755] | : . ' , ;  int 6
[08:08:22.756] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.756] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.756] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.756] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.756] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.756] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.756] | : . ' , signalConditions() ... done
[08:08:22.756] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:22.756] | : . Launching futures ... done
[08:08:22.757] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:22.757] | : Using SequentialFutureBackend ... done
[08:08:22.757] | run() for ‘Future’ (<unnamed-38>) ... done
[08:08:22.757] future(..., label = NULL) ... done
[08:08:22.757] future(..., label = NULL) ...
[08:08:22.757] | lazy: FALSE
[08:08:22.757] | stdout: TRUE
[08:08:22.757] | conditions: [n=1] ‘condition’
[08:08:22.757] | gc: FALSE
[08:08:22.757] | earlySignal: FALSE
[08:08:22.758] | getGlobalsAndPackages() ...
[08:08:22.758] | : Searching for globals ...
[08:08:22.759] | : . globals found: [0] 
[08:08:22.759] | : Searching for globals ... done
[08:08:22.759] | : globals: [0] <none>
[08:08:22.759] | : packages: [0] <none>
[08:08:22.759] | getGlobalsAndPackages() ... done
[08:08:22.759] | run() for ‘Future’ (<unnamed-39>) ...
[08:08:22.760] | : state: ‘created’
[08:08:22.760] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.760] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.760] | : Using SequentialFutureBackend ...
[08:08:22.760] | : . Number of futures since start: 38 (38 created, 38 launched, 38 finished)
[08:08:22.760] | : . Launching futures ...
[08:08:22.760] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:22.760] | : . ' , getFutureData() ...
[08:08:22.761] | : . ' , ; getFutureCore() ...
[08:08:22.761] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:22.761] | : . ' , ; getFutureCore() ... done
[08:08:22.761] | : . ' , ; getFutureCapture() ...
[08:08:22.761] | : . ' , ; getFutureCapture() ... done
[08:08:22.761] | : . ' , ; getFutureContext() ...
[08:08:22.761] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.761] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:22.761] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.761] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:22.762] | : . ' , ; getFutureContext() ... done
[08:08:22.762] | : . ' , getFutureData() ... done
[08:08:22.763] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.763] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:22.763] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.763] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.764] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.764] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:22.764] | : . ' , ; ` | New stack:
[08:08:22.764] | : . ' , ; ` | List of 1
[08:08:22.764] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.764] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.764] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:22.764] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.764] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.764] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.764] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.764] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.766] | : . ' , ; ` | Old stack:
[08:08:22.767] | : . ' , ; ` | List of 1
[08:08:22.767] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.767] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.767] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:22.767] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.767] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.767] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.767] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:22.767] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.767] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.767] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.767] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.770] | : . ' , ; ` | Not identical
[08:08:22.770] | : . ' , ; ` | all.equal() for future ...
[08:08:22.770] | : . ' , ; ` | : List of 2
[08:08:22.770] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.770] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.770] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:22.770] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.770] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.770] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.770] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.770] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.770] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.770] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.770] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.770] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.770] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.770] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.770] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.770] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.770] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.775] | : . ' , ; ` | all.equal() for future ... done
[08:08:22.775] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:22.775] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:22.776] | : . ' , ; ` List of future strategies:
[08:08:22.776] | : . ' , ; ` 1. sequential:
[08:08:22.776] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.776] | : . ' , ; `    - tweaked: FALSE
[08:08:22.776] | : . ' , ; `    - call: plan(sequential)
[08:08:22.776] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.776] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.778] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.778] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.778] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.778] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:22.778] | : . ' , ; ` | : New stack:
[08:08:22.778] | : . ' , ; ` | : List of 1
[08:08:22.778] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.778] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.778] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.778] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.778] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.778] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.778] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.778] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.778] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.778] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.778] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.781] | : . ' , ; ` | : Old stack:
[08:08:22.782] | : . ' , ; ` | : List of 1
[08:08:22.782] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.782] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.782] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.782] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.782] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.782] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.782] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.782] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.782] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.782] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.782] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.785] | : . ' , ; ` | : Identical
[08:08:22.785] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:22.785] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:22.785] | : . ' , ; ` | List of future strategies:
[08:08:22.785] | : . ' , ; ` | 1. sequential:
[08:08:22.785] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.785] | : . ' , ; ` |    - tweaked: FALSE
[08:08:22.785] | : . ' , ; ` |    - call: plan(sequential)
[08:08:22.786] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.786] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.786] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.786] | : . ' , SequentialFuture started (and completed)
[08:08:22.786] | : . ' , signalConditions() ...
[08:08:22.786] | : . ' , ; include = ‘immediateCondition’
[08:08:22.786] | : . ' , ; exclude = 
[08:08:22.786] | : . ' , ; resignal = FALSE
[08:08:22.787] | : . ' , ; Number of conditions: 6
[08:08:22.787] | : . ' , ;  int 6
[08:08:22.787] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.787] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.787] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.787] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.787] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.788] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.788] | : . ' , signalConditions() ... done
[08:08:22.788] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:22.788] | : . Launching futures ... done
[08:08:22.788] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:22.788] | : Using SequentialFutureBackend ... done
[08:08:22.788] | run() for ‘Future’ (<unnamed-39>) ... done
[08:08:22.788] future(..., label = NULL) ... done
[08:08:22.789] future(..., label = NULL) ...
[08:08:22.789] | lazy: FALSE
[08:08:22.789] | stdout: TRUE
[08:08:22.789] | conditions: [n=1] ‘condition’
[08:08:22.789] | gc: FALSE
[08:08:22.789] | earlySignal: FALSE
[08:08:22.789] | getGlobalsAndPackages() ...
[08:08:22.789] | : Searching for globals ...
[08:08:22.792] | : . globals found: [1] ‘{’
[08:08:22.792] | : Searching for globals ... done
[08:08:22.793] | : Resolving globals: FALSE
[08:08:22.793] | : Search for packages associated with the globals ...
[08:08:22.793] | : . Packages associated with globals: [1] ‘base’
[08:08:22.793] | : . Packages: [1] ‘base’
[08:08:22.793] | : Search for packages associated with the globals ... done
[08:08:22.793] | : Packages after dropping 'base': [0] 
[08:08:22.793] | : globals: [0] 
[08:08:22.794] | : packages: [0] 
[08:08:22.794] | getGlobalsAndPackages() ... done
[08:08:22.794] | run() for ‘Future’ (<unnamed-40>) ...
[08:08:22.794] | : state: ‘created’
[08:08:22.794] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.794] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.794] | : Using SequentialFutureBackend ...
[08:08:22.794] | : . Number of futures since start: 39 (39 created, 39 launched, 39 finished)
[08:08:22.795] | : . Launching futures ...
[08:08:22.795] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:22.795] | : . ' , getFutureData() ...
[08:08:22.795] | : . ' , ; getFutureCore() ...
[08:08:22.795] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:22.795] | : . ' , ; getFutureCore() ... done
[08:08:22.795] | : . ' , ; getFutureCapture() ...
[08:08:22.795] | : . ' , ; getFutureCapture() ... done
[08:08:22.795] | : . ' , ; getFutureContext() ...
[08:08:22.796] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.796] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:22.796] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.796] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:22.796] | : . ' , ; getFutureContext() ... done
[08:08:22.796] | : . ' , getFutureData() ... done
[08:08:22.797] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.798] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:22.798] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.798] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.798] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.798] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:22.798] | : . ' , ; ` | New stack:
[08:08:22.798] | : . ' , ; ` | List of 1
[08:08:22.798] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.798] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.798] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:22.798] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.798] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.798] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.798] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.798] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.801] | : . ' , ; ` | Old stack:
[08:08:22.801] | : . ' , ; ` | List of 1
[08:08:22.801] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.801] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.801] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:22.801] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.801] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.801] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.801] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:22.801] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.801] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.801] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.801] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.804] | : . ' , ; ` | Not identical
[08:08:22.804] | : . ' , ; ` | all.equal() for future ...
[08:08:22.804] | : . ' , ; ` | : List of 2
[08:08:22.804] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.804] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.804] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:22.804] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.804] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.804] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.804] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.804] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.804] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.804] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.804] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.804] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.804] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.804] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.804] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.804] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.804] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.810] | : . ' , ; ` | all.equal() for future ... done
[08:08:22.810] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:22.810] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:22.810] | : . ' , ; ` List of future strategies:
[08:08:22.810] | : . ' , ; ` 1. sequential:
[08:08:22.810] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.810] | : . ' , ; `    - tweaked: FALSE
[08:08:22.810] | : . ' , ; `    - call: plan(sequential)
[08:08:22.810] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.811] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.812] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.812] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.812] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.812] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:22.813] | : . ' , ; ` | : New stack:
[08:08:22.813] | : . ' , ; ` | : List of 1
[08:08:22.813] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.813] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.813] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.813] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.813] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.813] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.813] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.813] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.813] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.813] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.813] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.816] | : . ' , ; ` | : Old stack:
[08:08:22.816] | : . ' , ; ` | : List of 1
[08:08:22.816] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.816] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.816] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.816] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.816] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.816] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.816] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:22.816] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.816] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.816] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.816] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.819] | : . ' , ; ` | : Identical
[08:08:22.819] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:22.820] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:22.820] | : . ' , ; ` | List of future strategies:
[08:08:22.820] | : . ' , ; ` | 1. sequential:
[08:08:22.820] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.820] | : . ' , ; ` |    - tweaked: FALSE
[08:08:22.820] | : . ' , ; ` |    - call: plan(sequential)
[08:08:22.820] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.820] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.820] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.821] | : . ' , SequentialFuture started (and completed)
[08:08:22.821] | : . ' , signalConditions() ...
[08:08:22.821] | : . ' , ; include = ‘immediateCondition’
[08:08:22.821] | : . ' , ; exclude = 
[08:08:22.821] | : . ' , ; resignal = FALSE
[08:08:22.823] | : . ' , ; Number of conditions: 6
[08:08:22.823] | : . ' , ;  int 6
[08:08:22.823] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.824] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.824] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.824] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.824] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.824] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.824] | : . ' , signalConditions() ... done
[08:08:22.824] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:22.824] | : . Launching futures ... done
[08:08:22.824] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:22.825] | : Using SequentialFutureBackend ... done
[08:08:22.825] | run() for ‘Future’ (<unnamed-40>) ... done
[08:08:22.825] future(..., label = NULL) ... done
Classes 'listenv', 'environment' <environment: 0x564303bbc500> 
Classes 'listenv', 'environment' <environment: 0x564302b5cc60> 
 - attr(*, "dim.")= int [1:4] 2 1 3 1
 - attr(*, "dimnames.")=List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
[08:08:22.828] resolved() for listenv ...
[08:08:22.829] | resolved() for array ...
[08:08:22.829] | : Number of elements: 6
[08:08:22.829] | : Number of futures: 6
[08:08:22.829] | : resolved() for SequentialFuture (<unnamed-38>) ...
[08:08:22.829] | : . state: ‘finished’
[08:08:22.829] | : . run: TRUE
[08:08:22.829] | : . result: ‘FutureResult’
[08:08:22.829] | : resolved() for SequentialFuture (<unnamed-38>) ... done
[08:08:22.830] | : resolved() for SequentialFuture (<unnamed-39>) ...
[08:08:22.830] | : . state: ‘finished’
[08:08:22.830] | : . run: TRUE
[08:08:22.830] | : . result: ‘FutureResult’
[08:08:22.830] | : resolved() for SequentialFuture (<unnamed-39>) ... done
[08:08:22.830] | : resolved() for SequentialFuture (<unnamed-40>) ...
[08:08:22.830] | : . state: ‘finished’
[08:08:22.830] | : . run: TRUE
[08:08:22.830] | : . result: ‘FutureResult’
[08:08:22.831] | : resolved() for SequentialFuture (<unnamed-40>) ... done
[08:08:22.831] | resolved() for array ... done
[08:08:22.831] resolved() for listenv ... done
 logi [1:2, 1, 1:3, 1] TRUE TRUE TRUE TRUE TRUE TRUE
 - attr(*, "dimnames")=List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
 - attr(*, "names")= chr [1:6] "a" "b" "c" "d" ...
[08:08:22.833] value() for listenv ...
[08:08:22.833] | recursive: 0
[08:08:22.833] | reduce: FALSE
[08:08:22.834] | length: 6
[08:08:22.834] | elements: ‘a’, ‘b’, ‘c’, ‘d’, ‘’, ‘’
[08:08:22.834] | Number of remaining objects: 6
[08:08:22.834] | checking value #1:
[08:08:22.834] | 'obj' is atomic
[08:08:22.834] | signalConditionsASAP(numeric, pos=1) ...
[08:08:22.834] | : nx: 6
[08:08:22.835] | : relay: TRUE
[08:08:22.835] | : stdout: TRUE
[08:08:22.835] | : signal: TRUE
[08:08:22.835] | : resignal: FALSE
[08:08:22.835] | : force: TRUE
[08:08:22.835] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.835] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.835] | : until=2
[08:08:22.835] | : relaying element #2
[08:08:22.835] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.835] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.836] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:22.836] | length: 5 (resolved future 1)
[08:08:22.836] value() for listenv ... done
[08:08:22.836] checking value #2:
[08:08:22.836] 'obj' is SequentialFuture
[08:08:22.836] resolved() for SequentialFuture (<unnamed-38>) ...
[08:08:22.836] | state: ‘finished’
[08:08:22.836] | run: TRUE
[08:08:22.836] | result: ‘FutureResult’
[08:08:22.837] resolved() for SequentialFuture (<unnamed-38>) ... done
[08:08:22.837] SequentialFuture #2
[08:08:22.837] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:22.837] | nx: 6
[08:08:22.837] | relay: TRUE
[08:08:22.837] | stdout: TRUE
[08:08:22.837] | signal: TRUE
[08:08:22.837] | resignal: FALSE
[08:08:22.837] | force: TRUE
[08:08:22.837] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.837] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.838] | until=2
[08:08:22.838] | relaying element #2
[08:08:22.838] | value() for SequentialFuture (<unnamed-38>) ...
[08:08:22.838] | : signalConditions() ...
[08:08:22.838] | : . include = ‘immediateCondition’
[08:08:22.838] | : . exclude = 
[08:08:22.838] | : . resignal = FALSE
[08:08:22.838] | : . Number of conditions: 6
[08:08:22.838] | : .  int 6
[08:08:22.839] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.839] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.839] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.839] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.839] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.839] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.839] | : signalConditions() ... done
[08:08:22.840] | : relay stdout ...
[08:08:22.840] | : relay stdout ... done
[08:08:22.840] | : check for misuse ...
[08:08:22.840] | : check for misuse ... done
[08:08:22.840] | value() for SequentialFuture (<unnamed-38>) ... done
[08:08:22.840] | signalConditions() ...
[08:08:22.840] | : include = ‘immediateCondition’
[08:08:22.840] | : exclude = 
[08:08:22.840] | : resignal = FALSE
[08:08:22.841] | : Number of conditions: 6
[08:08:22.841] | :  int 6
[08:08:22.841] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.841] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.841] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.841] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.841] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.842] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.842] | signalConditions() ... done
[08:08:22.842] | signalConditions() ...
[08:08:22.842] | : include = ‘condition’
[08:08:22.842] | : exclude = ‘error’, ‘immediateCondition’
[08:08:22.842] | : resignal = TRUE
[08:08:22.842] | : Number of conditions: 6
[08:08:22.842] | :  int 6
[08:08:22.843] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.843] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.728] | : . ' , attachPackages() ...
[08:08:22.843] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.843] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.728] | : . ' , ; packages: [n=1] ‘future’
[08:08:22.843] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.843] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.728] | : . ' , attachPackages() ... done
[08:08:22.843] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.844] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.728] | : . ' , attachPackages() ...
[08:08:22.844] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.844] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.728] | : . ' , ; packages: [n=0] 
[08:08:22.844] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.844] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.728] | : . ' , attachPackages() ... done
[08:08:22.844] | signalConditions() ... done
[08:08:22.844] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.844] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.844] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:22.845] value(<SequentialFuture>, ...) ...
[08:08:22.845] value(<SequentialFuture>, ...) ... done
[08:08:22.845] value() for SequentialFuture (<unnamed-38>) ...
[08:08:22.845] | signalConditions() ...
[08:08:22.845] | : include = ‘immediateCondition’
[08:08:22.845] | : exclude = 
[08:08:22.845] | : resignal = FALSE
[08:08:22.845] | : Number of conditions: 6
[08:08:22.845] | :  int 6
[08:08:22.846] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.846] | : already signaled, skipping
[08:08:22.846] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.846] | : already signaled, skipping
[08:08:22.846] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.846] | : already signaled, skipping
[08:08:22.846] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.846] | : already signaled, skipping
[08:08:22.847] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.847] | : already signaled, skipping
[08:08:22.847] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.847] | : already signaled, skipping
[08:08:22.847] | signalConditions() ... done
[08:08:22.847] | check for misuse ...
[08:08:22.847] | check for misuse ... done
[08:08:22.847] value() for SequentialFuture (<unnamed-38>) ... done
[08:08:22.847] value: <numeric>
[08:08:22.848] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:08:22.848] | nx: 6
[08:08:22.848] | relay: TRUE
[08:08:22.848] | stdout: TRUE
[08:08:22.848] | signal: TRUE
[08:08:22.848] | resignal: FALSE
[08:08:22.848] | force: TRUE
[08:08:22.848] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.848] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.848] | until=3
[08:08:22.848] | relaying element #3
[08:08:22.849] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.849] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.849] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:08:22.849] resolve() for SequentialFuture ...
[08:08:22.849] resolve() for SequentialFuture ... done
[08:08:22.849] length: 4 (resolved future 2)

[08:08:22.849] checking value #3:
[08:08:22.849] 'obj' is SequentialFuture
[08:08:22.849] resolved() for SequentialFuture (<unnamed-39>) ...
[08:08:22.850] | state: ‘finished’
[08:08:22.850] | run: TRUE
[08:08:22.850] | result: ‘FutureResult’
[08:08:22.850] resolved() for SequentialFuture (<unnamed-39>) ... done
[08:08:22.850] SequentialFuture #3
[08:08:22.850] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:22.850] | nx: 6
[08:08:22.850] | relay: TRUE
[08:08:22.850] | stdout: TRUE
[08:08:22.850] | signal: TRUE
[08:08:22.850] | resignal: FALSE
[08:08:22.851] | force: TRUE
[08:08:22.851] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.851] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:22.851] | until=3
[08:08:22.851] | relaying element #3
[08:08:22.851] | value() for SequentialFuture (<unnamed-39>) ...
[08:08:22.851] | : signalConditions() ...
[08:08:22.851] | : . include = ‘immediateCondition’
[08:08:22.851] | : . exclude = 
[08:08:22.851] | : . resignal = FALSE
[08:08:22.852] | : . Number of conditions: 6
[08:08:22.852] | : .  int 6
[08:08:22.852] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.852] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.852] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.852] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.853] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.853] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.853] | : signalConditions() ... done
[08:08:22.853] | : relay stdout ...
[08:08:22.853] | : relay stdout ... done
[08:08:22.853] | : check for misuse ...
[08:08:22.853] | : check for misuse ... done
[08:08:22.853] | value() for SequentialFuture (<unnamed-39>) ... done
[08:08:22.853] | signalConditions() ...
[08:08:22.853] | : include = ‘immediateCondition’
[08:08:22.854] | : exclude = 
[08:08:22.854] | : resignal = FALSE
[08:08:22.854] | : Number of conditions: 6
[08:08:22.854] | :  int 6
[08:08:22.854] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.854] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.854] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.855] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.855] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.855] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.855] | signalConditions() ... done
[08:08:22.855] | signalConditions() ...
[08:08:22.855] | : include = ‘condition’
[08:08:22.855] | : exclude = ‘error’, ‘immediateCondition’
[08:08:22.855] | : resignal = TRUE
[08:08:22.855] | : Number of conditions: 6
[08:08:22.856] | :  int 6
[08:08:22.856] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.856] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.762] | : . ' , attachPackages() ...
[08:08:22.856] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.856] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.762] | : . ' , ; packages: [n=1] ‘future’
[08:08:22.856] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.857] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.762] | : . ' , attachPackages() ... done
[08:08:22.857] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.857] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.762] | : . ' , attachPackages() ...
[08:08:22.857] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.857] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.763] | : . ' , ; packages: [n=0] 
[08:08:22.857] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.857] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.763] | : . ' , attachPackages() ... done
[08:08:22.857] | signalConditions() ... done
[08:08:22.858] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.858] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.858] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:22.858] value(<SequentialFuture>, ...) ...
[08:08:22.858] value(<SequentialFuture>, ...) ... done
[08:08:22.858] value() for SequentialFuture (<unnamed-39>) ...
[08:08:22.858] | signalConditions() ...
[08:08:22.858] | : include = ‘immediateCondition’
[08:08:22.858] | : exclude = 
[08:08:22.858] | : resignal = FALSE
[08:08:22.859] | : Number of conditions: 6
[08:08:22.859] | :  int 6
[08:08:22.859] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.859] | : already signaled, skipping
[08:08:22.859] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.859] | : already signaled, skipping
[08:08:22.860] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.860] | : already signaled, skipping
[08:08:22.860] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.860] | : already signaled, skipping
[08:08:22.860] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.860] | : already signaled, skipping
[08:08:22.860] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.860] | : already signaled, skipping
[08:08:22.860] | signalConditions() ... done
[08:08:22.860] | check for misuse ...
[08:08:22.861] | check for misuse ... done
[08:08:22.861] value() for SequentialFuture (<unnamed-39>) ... done
[08:08:22.861] value: <NULL>
[08:08:22.861] signalConditionsASAP(SequentialFuture, pos=3) ...
[08:08:22.861] | nx: 6
[08:08:22.861] | relay: TRUE
[08:08:22.861] | stdout: TRUE
[08:08:22.861] | signal: TRUE
[08:08:22.861] | resignal: FALSE
[08:08:22.861] | force: TRUE
[08:08:22.862] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.862] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.862] | until=4
[08:08:22.862] | relaying element #4
[08:08:22.862] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.862] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.862] signalConditionsASAP(SequentialFuture, pos=3) ... done
[08:08:22.862] resolve() for SequentialFuture ...
[08:08:22.862] resolve() for SequentialFuture ... done
[08:08:22.863] length: 3 (resolved future 3)

[08:08:22.863] checking value #4:
[08:08:22.863] 'obj' is SequentialFuture
[08:08:22.863] resolved() for SequentialFuture (<unnamed-40>) ...
[08:08:22.863] | state: ‘finished’
[08:08:22.863] | run: TRUE
[08:08:22.863] | result: ‘FutureResult’
[08:08:22.863] resolved() for SequentialFuture (<unnamed-40>) ... done
[08:08:22.863] SequentialFuture #4
[08:08:22.864] signalConditionsASAP(SequentialFuture, pos=4) ...
[08:08:22.864] | nx: 6
[08:08:22.864] | relay: TRUE
[08:08:22.864] | stdout: TRUE
[08:08:22.864] | signal: TRUE
[08:08:22.864] | resignal: FALSE
[08:08:22.864] | force: TRUE
[08:08:22.864] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.864] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:22.864] | until=4
[08:08:22.864] | relaying element #4
[08:08:22.865] | value() for SequentialFuture (<unnamed-40>) ...
[08:08:22.865] | : signalConditions() ...
[08:08:22.865] | : . include = ‘immediateCondition’
[08:08:22.865] | : . exclude = 
[08:08:22.865] | : . resignal = FALSE
[08:08:22.865] | : . Number of conditions: 6
[08:08:22.865] | : .  int 6
[08:08:22.866] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.866] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.866] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.866] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.866] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.866] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.866] | : signalConditions() ... done
[08:08:22.866] | : relay stdout ...
[08:08:22.866] | : relay stdout ... done
[08:08:22.867] | : check for misuse ...
[08:08:22.867] | : check for misuse ... done
[08:08:22.867] | value() for SequentialFuture (<unnamed-40>) ... done
[08:08:22.867] | signalConditions() ...
[08:08:22.867] | : include = ‘immediateCondition’
[08:08:22.867] | : exclude = 
[08:08:22.867] | : resignal = FALSE
[08:08:22.867] | : Number of conditions: 6
[08:08:22.867] | :  int 6
[08:08:22.868] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.868] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.868] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.868] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.868] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.868] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.868] | signalConditions() ... done
[08:08:22.869] | signalConditions() ...
[08:08:22.869] | : include = ‘condition’
[08:08:22.869] | : exclude = ‘error’, ‘immediateCondition’
[08:08:22.869] | : resignal = TRUE
[08:08:22.869] | : Number of conditions: 6
[08:08:22.869] | :  int 6
[08:08:22.869] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.870] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.796] | : . ' , attachPackages() ...
[08:08:22.870] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.870] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.797] | : . ' , ; packages: [n=1] ‘future’
[08:08:22.870] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.870] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.797] | : . ' , attachPackages() ... done
[08:08:22.870] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.870] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.797] | : . ' , attachPackages() ...
[08:08:22.870] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.871] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.797] | : . ' , ; packages: [n=0] 
[08:08:22.871] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.871] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.797] | : . ' , attachPackages() ... done
[08:08:22.871] | signalConditions() ... done
[08:08:22.871] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.871] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.871] signalConditionsASAP(SequentialFuture, pos=4) ... done
[08:08:22.871] value(<SequentialFuture>, ...) ...
[08:08:22.871] value(<SequentialFuture>, ...) ... done
[08:08:22.872] value() for SequentialFuture (<unnamed-40>) ...
[08:08:22.872] | signalConditions() ...
[08:08:22.872] | : include = ‘immediateCondition’
[08:08:22.872] | : exclude = 
[08:08:22.872] | : resignal = FALSE
[08:08:22.872] | : Number of conditions: 6
[08:08:22.872] | :  int 6
[08:08:22.873] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.873] | : already signaled, skipping
[08:08:22.873] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.873] | : already signaled, skipping
[08:08:22.873] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.873] | : already signaled, skipping
[08:08:22.873] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.873] | : already signaled, skipping
[08:08:22.873] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.873] | : already signaled, skipping
[08:08:22.874] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.874] | : already signaled, skipping
[08:08:22.874] | signalConditions() ... done
[08:08:22.874] | check for misuse ...
[08:08:22.874] | check for misuse ... done
[08:08:22.874] value() for SequentialFuture (<unnamed-40>) ... done
[08:08:22.874] value: <numeric>
[08:08:22.874] signalConditionsASAP(SequentialFuture, pos=4) ...
[08:08:22.874] | nx: 6
[08:08:22.874] | relay: TRUE
[08:08:22.875] | stdout: TRUE
[08:08:22.875] | signal: TRUE
[08:08:22.875] | resignal: FALSE
[08:08:22.875] | force: TRUE
[08:08:22.875] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.875] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.875] | until=5
[08:08:22.875] | relaying element #5
[08:08:22.875] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.875] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.876] signalConditionsASAP(SequentialFuture, pos=4) ... done
[08:08:22.876] resolve() for SequentialFuture ...
[08:08:22.876] resolve() for SequentialFuture ... done
[08:08:22.876] length: 2 (resolved future 4)

[08:08:22.876] checking value #5:
[08:08:22.876] 'obj' is NULL
[08:08:22.876] signalConditionsASAP(NULL, pos=5) ...
[08:08:22.876] | nx: 6
[08:08:22.876] | relay: TRUE
[08:08:22.876] | stdout: TRUE
[08:08:22.877] | signal: TRUE
[08:08:22.877] | resignal: FALSE
[08:08:22.877] | force: TRUE
[08:08:22.877] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.877] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.877] | until=6
[08:08:22.877] | relaying element #6
[08:08:22.877] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:22.877] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.877] signalConditionsASAP(NULL, pos=5) ... done
[08:08:22.878] signalConditionsASAP(NULL, pos=5) ...
[08:08:22.878] | nx: 6
[08:08:22.878] | relay: TRUE
[08:08:22.878] | stdout: TRUE
[08:08:22.878] | signal: TRUE
[08:08:22.878] | resignal: FALSE
[08:08:22.878] | force: TRUE
[08:08:22.878] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:22.878] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.878] | until=6
[08:08:22.879] | relaying element #6
[08:08:22.879] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:22.879] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.879] signalConditionsASAP(NULL, pos=5) ... done
[08:08:22.879] length: 1 (resolved future 5)

[08:08:22.879] checking value #6:
[08:08:22.879] 'obj' is atomic
[08:08:22.879] signalConditionsASAP(numeric, pos=6) ...
[08:08:22.879] | nx: 6
[08:08:22.879] | relay: TRUE
[08:08:22.880] | stdout: TRUE
[08:08:22.880] | signal: TRUE
[08:08:22.880] | resignal: FALSE
[08:08:22.880] | force: TRUE
[08:08:22.880] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:22.880] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.880] | until=6
[08:08:22.880] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:22.880] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.880] signalConditionsASAP(numeric, pos=6) ... done
[08:08:22.881] length: 0 (resolved future 6)

[08:08:22.881] Relaying remaining futures ...
[08:08:22.881] | signalConditionsASAP(NULL, pos=0) ...
[08:08:22.881] | : nx: 6
[08:08:22.881] | : relay: TRUE
[08:08:22.881] | : stdout: TRUE
[08:08:22.881] | : signal: TRUE
[08:08:22.881] | : resignal: FALSE
[08:08:22.881] | : force: TRUE
[08:08:22.882] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:22.882] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
 - flush all
[08:08:22.882] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:22.882] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:22.882] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:22.882] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:4] 2 1 3 1
 - attr(*, "dimnames")=List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
*** futures() - listenv ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
Type of object: list
Type of future: multicore
[08:08:22.886] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.887] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:22.887] | : all.equal() for FutureStrategyList ...
[08:08:22.887] | : . New stack:
[08:08:22.887] | : . List of 1
[08:08:22.887] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:22.887] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:22.887] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:22.887] | : .   ..- attr(*, "init")= logi TRUE
[08:08:22.887] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:22.887] | : .     ...)  
[08:08:22.887] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.887] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.887] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:22.887] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.890] | : . Old stack:
[08:08:22.890] | : . List of 1
[08:08:22.890] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.890] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.890] | : .   ..- attr(*, "init")= chr "done"
[08:08:22.890] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.890] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.890] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.890] | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:22.890] | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.890] | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.890] | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.890] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.893] | : . Not identical
[08:08:22.895] | : . all.equal() for future ...
[08:08:22.895] | : . ' List of 2
[08:08:22.895] | : . '  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:22.895] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:08:22.895] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:22.895] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:22.895] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:22.895] | : . '     ...)  
[08:08:22.895] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.895] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.895] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:22.895] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.895] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.895] | : . '   ..- attr(*, "init")= chr "done"
[08:08:22.895] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.895] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.895] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.895] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:08:22.895] | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564300942678> 
[08:08:22.895] | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.895] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.900] | : . ' Formals differ
[08:08:22.900] | : . all.equal() for future ... done
[08:08:22.900] | : . Future strategies differ at level 1
[08:08:22.900] | : all.equal() for FutureStrategyList ... done
[08:08:22.900] | : plan(): Setting new future backend stack:
[08:08:22.901] | : List of future strategies:
[08:08:22.901] | : 1. multicore:
[08:08:22.901] | :    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:22.901] | :    - tweaked: FALSE
[08:08:22.901] | :    - call: plan(strategy)
[08:08:22.901] | : List of 1
[08:08:22.901] | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:22.901] | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:22.901] | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:22.901] | :   ..- attr(*, "init")= logi TRUE
[08:08:22.901] | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:22.901] | :     ...)  
[08:08:22.901] | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.901] | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.901] | :   ..- attr(*, "call")= language plan(strategy)
[08:08:22.901] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.904] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:08:22.904] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.904] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:22.904] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.904] | : . Legacy shutdown of cluster workers ...
[08:08:22.904] | : . ' Stopping existing cluster ...
[08:08:22.904] | : . ' , No pre-existing cluster. Skipping
[08:08:22.905] | : . ' Stopping existing cluster ... done
[08:08:22.905] | : . Legacy shutdown of cluster workers ... done
[08:08:22.905] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:08:22.905] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:08:22.905] | : . function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:22.905] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:22.905] | : .  - attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:22.905] | : .  - attr(*, "init")= logi TRUE
[08:08:22.905] | : .  - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:22.905] | : .     ...)  
[08:08:22.905] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.905] | : .  - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.905] | : .  - attr(*, "call")= language plan(strategy)
[08:08:22.907] | : . init: TRUE
[08:08:22.907] | : . makeFutureBackend(<multicore>) ...
[08:08:22.907] | : . ' Backend function: <‘NULL’>
[08:08:22.907] | : . ' Evaluator tweak arguments: [n=0]
[08:08:22.907] | : . '  list()
[08:08:22.908] | : . ' Evaluator formal arguments: [n=3]
[08:08:22.908] | : . '  list()
[08:08:22.908] | : . ' Backend factory arguments: [n=3]
[08:08:22.908] | : . ' Dotted pair list of 3
[08:08:22.908] | : . '  $ workers    : language availableCores(constraints = "multicore")
[08:08:22.908] | : . '  $ gc         : logi FALSE
[08:08:22.908] | : . '  $ earlySignal: logi FALSE
[08:08:22.911] | : . ' Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:22.911] | : . makeFutureBackend(<multicore>) ... done
[08:08:22.912] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:08:22.912] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.912] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.912] | : plan(): nbrOfWorkers() = 2
[08:08:22.912] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:22.912] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Dimensions: NULL
[08:08:22.912] future(..., label = NULL) ...
[08:08:22.912] | lazy: FALSE
[08:08:22.913] | stdout: TRUE
[08:08:22.913] | conditions: [n=1] ‘condition’
[08:08:22.913] | gc: FALSE
[08:08:22.913] | earlySignal: FALSE
[08:08:22.913] | getGlobalsAndPackages() ...
[08:08:22.913] | : Searching for globals ...
[08:08:22.914] | : . globals found: [0] 
[08:08:22.914] | : Searching for globals ... done
[08:08:22.914] | : globals: [0] <none>
[08:08:22.915] | : packages: [0] <none>
[08:08:22.915] | getGlobalsAndPackages() ... done
[08:08:22.915] | run() for ‘Future’ (<unnamed-41>) ...
[08:08:22.915] | : state: ‘created’
[08:08:22.915] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.915] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.915] | : Using MulticoreFutureBackend ...
[08:08:22.915] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:22.916] | : . Launching futures ...
[08:08:22.916] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:22.916] | : . ' , getFutureData() ...
[08:08:22.916] | : . ' , ; getFutureCore() ...
[08:08:22.916] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:22.916] | : . ' , ; getFutureCore() ... done
[08:08:22.916] | : . ' , ; getFutureCapture() ...
[08:08:22.917] | : . ' , ; getFutureCapture() ... done
[08:08:22.917] | : . ' , ; getFutureContext() ...
[08:08:22.917] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.917] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:22.917] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.917] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:22.917] | : . ' , ; getFutureContext() ... done
[08:08:22.918] | : . ' , getFutureData() ... done
[08:08:22.918] | : . ' , requestCore(..., workers = 2) ...
[08:08:22.918] | : . ' , requestCore(..., workers = 2) ... done
[08:08:22.921] | : . ' , MulticoreFuture started
[08:08:22.922] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:22.922] | : . Launching futures ... done
[08:08:22.922] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:22.923] | : Using MulticoreFutureBackend ... done
[08:08:22.923] | run() for ‘Future’ (<unnamed-41>) ... done
[08:08:22.923] future(..., label = NULL) ... done
[08:08:22.923] future(..., label = NULL) ...
[08:08:22.924] | lazy: FALSE
[08:08:22.924] | stdout: TRUE
[08:08:22.924] | conditions: [n=1] ‘condition’
[08:08:22.924] | gc: FALSE
[08:08:22.924] | earlySignal: FALSE
[08:08:22.924] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.925] | getGlobalsAndPackages() ...
[08:08:22.925] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:22.925] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.925] | : Searching for globals ...
[08:08:22.925] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.925] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.926] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:22.926] | : . ' , ; ` | New stack:
[08:08:22.928] | : . globals found: [0] 
[08:08:22.928] | : Searching for globals ... done
[08:08:22.928] | : globals: [0] <none>
[08:08:22.928] | : packages: [0] <none>
[08:08:22.928] | getGlobalsAndPackages() ... done
[08:08:22.929] | run() for ‘Future’ (<unnamed-42>) ...
[08:08:22.929] | : state: ‘created’
[08:08:22.929] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.929] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.930] | : Using MulticoreFutureBackend ...
[08:08:22.930] | : . Number of futures since start: 1 (1 created, 1 launched, 0 finished)
[08:08:22.930] | : . Launching futures ...
[08:08:22.930] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:22.926] | : . ' , ; ` | List of 1
[08:08:22.926] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.926] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.926] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:22.926] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.926] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.926] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.926] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.926] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.930] | : . ' , getFutureData() ...
[08:08:22.930] | : . ' , ; ` | Old stack:
[08:08:22.931] | : . ' , ; getFutureCore() ...
[08:08:22.931] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:22.931] | : . ' , ; getFutureCore() ... done
[08:08:22.931] | : . ' , ; getFutureCapture() ...
[08:08:22.931] | : . ' , ; getFutureCapture() ... done
[08:08:22.931] | : . ' , ; getFutureContext() ...
[08:08:22.932] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.932] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:22.932] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.932] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:22.932] | : . ' , ; getFutureContext() ... done
[08:08:22.933] | : . ' , getFutureData() ... done
[08:08:22.933] | : . ' , requestCore(..., workers = 2) ...
[08:08:22.933] | : . ' , requestCore(..., workers = 2) ... done
[08:08:22.931] | : . ' , ; ` | List of 1
[08:08:22.931] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:22.931] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:22.931] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:22.931] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:22.931] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:22.931] | : . ' , ; ` |     ...)  
[08:08:22.931] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.931] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.931] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:22.931] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:22.931] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:22.931] | : . ' , ; ` |     ...)  
[08:08:22.931] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.931] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.935] | : . ' , ; ` | Not identical
[08:08:22.935] | : . ' , ; ` | all.equal() for future ...
[08:08:22.936] | : . ' , MulticoreFuture started
[08:08:22.937] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:22.937] | : . Launching futures ... done
[08:08:22.938] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:22.938] | : Using MulticoreFutureBackend ... done
[08:08:22.938] | run() for ‘Future’ (<unnamed-42>) ... done
[08:08:22.939] future(..., label = NULL) ... done
List of 6
 $ a:[08:08:22.941] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
 num 1
 $ b:[08:08:22.941] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:22.941] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x56430156a570> 
[08:08:22.942] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
 $ c:[08:08:22.936] | : . ' , ; ` | : List of 2
[08:08:22.936] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.936] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.936] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:22.936] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.936] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.936] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.936] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.936] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:22.936] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:22.936] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:22.936] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.936] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:22.936] | : . ' , ; ` | :     ...)  
[08:08:22.936] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.936] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.936] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:22.936] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:22.936] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:22.936] | : . ' , ; ` | :     ...)  
[08:08:22.936] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.942] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x564302f793b0> 
 $  :[08:08:22.943] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:22.943] | : . ' , ; ` | New stack:
[08:08:22.943] | : . ' , ; ` | : Formals differ
 NULL
 $  :[08:08:22.943] | : . ' , ; ` | all.equal() for future ... done
[08:08:22.943] | : . ' , ; ` | Future strategies differ at level 1
[08:08:22.944] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:22.944] | : . ' , ; ` plan(): Setting new future backend stack:
 NULL
 $  :[08:08:22.944] | : . ' , ; ` List of future strategies:
[08:08:22.944] | : . ' , ; ` 1. sequential:
[08:08:22.944] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.944] | : . ' , ; `    - tweaked: FALSE
[08:08:22.944] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
 num 6
List of 6
 $ a: num 1
 $ b:Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x56430156a570> 
 $ c:Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x564302f793b0> 
 $  : NULL
 $  :[08:08:22.945] | : . ' , ; ` List of 1
[08:08:22.945] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.945] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.945] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:22.945] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.945] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.945] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.945] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.945] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
 NULL
 $  :[08:08:22.948] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:22.948] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:22.949] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.949] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
 num 6
[08:08:22.943] | : . ' , ; ` | List of 1
[08:08:22.943] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.943] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.943] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:22.943] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.943] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.943] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.943] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.943] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.949] | : . ' , ; ` | Old stack:
[08:08:22.949] resolved() for list ...
[08:08:22.949] | Number of elements: 6
[08:08:22.950] | Number of futures: 6
[08:08:22.949] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.949] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.949] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:22.949] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.949] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.949] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.949] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.952] | : . ' , ; ` | : init: TRUE
[08:08:22.952] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:22.952] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:22.952] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:22.953] | : . ' , ; ` | : .  list()
[08:08:22.953] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:22.953] | : . ' , ; ` | : .  list()
[08:08:22.953] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:22.949] | : . ' , ; ` | List of 1
[08:08:22.949] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:22.949] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:22.949] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:22.949] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:22.949] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:22.949] | : . ' , ; ` |     ...)  
[08:08:22.949] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.949] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.949] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:22.949] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:22.949] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:22.949] | : . ' , ; ` |     ...)  
[08:08:22.949] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.949] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.955] | : . ' , ; ` | Not identical
[08:08:22.955] | : . ' , ; ` | all.equal() for future ...
[08:08:22.954] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:22.954] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:22.954] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:22.955] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:22.955] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:22.956] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:22.956] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.956] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:22.956] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.956] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.959] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.959] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.959] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.960] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:22.960] | : . ' , ; ` | : New stack:
[08:08:22.962] | readImmediateCondition() ...
[08:08:22.962] | : Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:22.962] | : Number of RDS files: 0
[08:08:22.955] | : . ' , ; ` | : List of 2
[08:08:22.955] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.955] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.955] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:22.955] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.955] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.955] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.955] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.955] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:22.955] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:22.955] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:22.955] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.955] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:22.955] | : . ' , ; ` | :     ...)  
[08:08:22.955] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.955] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.955] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:22.955] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:22.955] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:22.955] | : . ' , ; ` | :     ...)  
[08:08:22.955] | : . ' , ; ` | :   .. .. ..- attr(*, "[08:08:22.962] | : Returned conditions set:
tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.962] | :  list()
[08:08:22.963] | readImmediateCondition() ... done
[08:08:22.963] | : . ' , ; ` | : Formals differ
[08:08:22.964] | : . ' , ; ` | all.equal() for future ... done
[08:08:22.964] | : . ' , ; ` | Future strategies differ at level 1
[08:08:22.964] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:22.964] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:22.960] | : . ' , ; ` | : List of 1
[08:08:22.960] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:22.960] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:22.960] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:22.960] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.960] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:22.960] | : . ' , ; ` | :     ...)  
[08:08:22.960] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.960] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.960] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:22.960] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:22.960] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:22.960] | : . ' , ; ` | :     ...)  
[08:08:22.960] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.960] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.964] | : . ' , ; ` | : Old stack:
[08:08:22.964] | : . ' , ; ` List of future strategies:
[08:08:22.964] | : . ' , ; ` 1. sequential:
[08:08:22.964] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:22.964] | : . ' , ; `    - tweaked: FALSE
[08:08:22.964] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.965] | : . ' , ; ` List of 1
[08:08:22.965] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.965] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.965] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:22.965] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.965] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.965] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.965] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.965] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.968] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:22.964] | : . ' , ; ` | : List of 1
[08:08:22.964] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, [08:08:22.969] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = Fenvir = parent.frame())  
[08:08:22.964] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" ALSE) ... done
"function"
[08:08:22.964] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.964] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.964] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.964] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.964] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.964] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303afb008> 
[08:08:22.964] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.964] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.964] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.969] | : . ' , ; ` | : Not identical
[08:08:22.969] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.969] | : . ' , ; ` | : all.equal() for future ...
[08:08:22.969] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:22.969] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.969] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.969] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:22.969] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.969] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.969] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.969] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.972] | : . ' , ; ` | : init: TRUE
[08:08:22.972] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:22.972] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:22.972] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:22.972] | : . ' , ; ` | : .  list()
[08:08:22.973] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:22.973] | : . ' , ; ` | : .  list()
[08:08:22.973] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:22.973] | readImmediateCondition() ...
[08:08:22.974] | : Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:22.974] | : Number of RDS files: 0
[08:08:22.974] | : Returned conditions set:
[08:08:22.974] | :  list()
[08:08:22.975] | readImmediateCondition() ... done
[08:08:22.975] resolved() for list ... done
 Named logi [1:6] TRUE FALSE FALSE TRUE TRUE TRUE
 - attr(*, "names")=[08:08:22.974] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:22.974] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:22.974] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:22.976] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
 chr [1:6] "a" "b" "c" "" ...
[08:08:22.976] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:22.976] value() for list ...
[08:08:22.969] | : . ' , ; ` | : . List of 2
[08:08:22.969] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:22.969] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:22.969] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:22.969] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:22.969] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:22.969] | : . ' , ; ` | : .     ...)  
[08:08:22.969] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.969] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.969] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:22.969] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:22.969] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:22.969] | : . ' , ; ` | : .     ...)  
[08:08:22.969] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.969] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.969] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.969] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:22.969] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.969] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.969] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.969] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.969] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303afb008> 
[08:08:22.969] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.969] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.976] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:22.976] | recursive: 0
[08:08:22.977] | reduce: FALSE
[08:08:22.977] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.977] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:22.977] | length: 6
[08:08:22.977] | : . ' , ; ` | : . Formals differ
[08:08:22.977] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.977] | : . ' , ; ` | : all.equal() for future ... done
[08:08:22.977] | elements: ‘a’, ‘b’, ‘c’, ‘’, ‘’, ‘’
[08:08:22.977] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:22.977] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.977] | Number of remaining objects: 6
[08:08:22.978] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:22.978] | checking value #1:
[08:08:22.978] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:22.978] | 'obj' is atomic
[08:08:22.978] | signalConditionsASAP(numeric, pos=1) ...
[08:08:22.978] | : . ' , ; ` | List of future strategies:
[08:08:22.978] | : . ' , ; ` | 1. multicore:
[08:08:22.978] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:22.978] | : . ' , ; ` |    - tweaked: FALSE
[08:08:22.978] | : . ' , ; ` |    - call: plan(strategy)
[08:08:22.978] | : nx: 6
[08:08:22.978] | : relay: TRUE
[08:08:22.978] | : stdout: TRUE
[08:08:22.979] | : signal: TRUE
[08:08:22.979] | : resignal: FALSE
[08:08:22.979] | : force: TRUE
[08:08:22.979] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.979] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.980] | : until=2
[08:08:22.980] | : relaying element #2
[08:08:22.980] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.980] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.981] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:22.981] | length: 5 (resolved future 1)
[08:08:22.981] value() for list ... done
[08:08:22.981] checking value #2:
[08:08:22.981] 'obj' is MulticoreFuture
[08:08:22.982] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.982] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:22.982] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:22.982] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:22.982] | : . ' , ; ` | : New stack:
[08:08:22.978] | : . ' , ; ` | List of 1
[08:08:22.978] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:22.978] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:22.978] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:22.978] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:22.978] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:22.978] | : . ' , ; ` |     ...)  
[08:08:22.978] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.978] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.978] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:22.978] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:22.978] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:22.978] | : . ' , ; ` |     ...)  
[08:08:22.978] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.978] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.983] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:22.983] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:22.983] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:22.983] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:22.983] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:22.984] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:22.984] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.984] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:22.984] readImmediateCondition() ...
[08:08:22.984] | Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:22.985] | Number of RDS files: 0
[08:08:22.985] | Returned conditions set:
[08:08:22.985] |  list()
[08:08:22.986] readImmediateCondition() ... done
[08:08:22.986] MulticoreFuture #2
[08:08:22.986] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:22.986] | nx: 6
[08:08:22.986] | relay: TRUE
[08:08:22.987] | stdout: TRUE
[08:08:22.987] | signal: TRUE
[08:08:22.987] | resignal: FALSE
[08:08:22.987] | force: TRUE
[08:08:22.987] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.987] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:22.988] | until=2
[08:08:22.988] | relaying element #2
[08:08:22.988] | value() for MulticoreFuture (<unnamed-41>) ...
[08:08:22.983] | : . ' , ; ` | : List of 1
[08:08:22.983] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:22.983] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:22.983] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:22.983] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.983] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:22.983] | : . ' , ; ` | :     ...)  
[08:08:22.983] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.983] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.983] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:22.983] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:22.983] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:22.983] | : . ' , ; ` | :     ...)  
[08:08:22.983] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.983] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.989] | : . ' , ; ` | : Old stack:
[08:08:22.990] | : result() for MulticoreFuture ...
[08:08:22.991] | : . readImmediateCondition() ...
[08:08:22.992] | : . ' Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:22.992] | : . ' Number of RDS files: 0
[08:08:22.992] | : . ' Returned conditions set:
[08:08:22.992] | : . '  list()
[08:08:22.993] | : . readImmediateCondition() ... done
[08:08:22.993] | : . result() for MulticoreFuture ...
[08:08:22.994] | : . result() for MulticoreFuture ... done
[08:08:22.994] | : . signalConditions() ...
[08:08:22.994] | : . ' include = ‘immediateCondition’
[08:08:22.994] | : . ' exclude = 
[08:08:22.994] | : . ' resignal = FALSE
[08:08:22.995] | : . ' Number of conditions: 6
[08:08:22.995] | : . '  int 6
[08:08:22.995] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.996] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.989] | : . ' , ; ` | : List of 1
[08:08:22.989] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.989] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.989] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:22.989] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.989] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.989] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.989] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:22.989] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303da1990> 
[08:08:22.989] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.989] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.989] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:22.996] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.996] | : . ' , ; ` | : Not identical
[08:08:22.996] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.996] | : . ' , ; ` | : all.equal() for future ...
[08:08:22.996] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.997] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:22.997] | : . signalConditions() ... done
[08:08:22.997] | : result() for MulticoreFuture ... done
[08:08:22.997] | : result() for MulticoreFuture ...
[08:08:22.998] | : result() for MulticoreFuture ... done
[08:08:22.998] | : signalConditions() ...
[08:08:22.998] | : . include = ‘immediateCondition’
[08:08:22.998] | : . exclude = 
[08:08:22.998] | : . resignal = FALSE
[08:08:22.998] | : . Number of conditions: 6
[08:08:22.999] | : .  int 6
[08:08:22.999] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.000] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.000] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.000] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.000] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.000] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.001] | : signalConditions() ... done
[08:08:23.001] | : relay stdout ...
[08:08:23.001] | : relay stdout ... done
[08:08:23.001] | : check for misuse ...
[08:08:23.002] | : check for misuse ... done
[08:08:23.002] | value() for MulticoreFuture (<unnamed-41>) ... done
[08:08:23.002] | result() for MulticoreFuture ...
[08:08:23.002] | result() for MulticoreFuture ... done
[08:08:23.002] | signalConditions() ...
[08:08:23.003] | : include = ‘immediateCondition’
[08:08:23.003] | : exclude = 
[08:08:23.003] | : resignal = FALSE
[08:08:23.003] | : Number of conditions: 6
[08:08:23.003] | :  int 6
[08:08:23.004] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.004] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.004] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.005] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.005] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.005] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.005] | signalConditions() ... done
[08:08:23.006] | result() for MulticoreFuture ...
[08:08:23.006] | result() for MulticoreFuture ... done
[08:08:23.006] | signalConditions() ...
[08:08:23.006] | : include = ‘condition’
[08:08:23.006] | : exclude = ‘error’, ‘immediateCondition’
[08:08:23.007] | : resignal = TRUE
[08:08:23.007] | : Number of conditions: 6
[08:08:23.007] | :  int 6
[08:08:23.008] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.008] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.922] | : . ' , attachPackages() ...
[08:08:23.008] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.008] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.997] | : . ' , ; ` | : . List of 2
[08:08:22.997] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:22.997] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:22.997] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:22.997] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:22.997] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:22.997] | : . ' , ; ` | : .     ...)  
[08:08:22.997] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.997] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.997] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:22.997] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:22.997] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:22.997] | : . ' , ; ` | : .     ...)  
[08:08:22.997] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:22.997] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:22.997] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:22.997] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:22.997] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.997] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.997] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:22.997] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE[08:08:22.922] | : . ' , ; packages: [n=1] ‘future’
)
[08:08:22.997] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303da1990> 
[08:08:22.997] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:22.997] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.009] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.009] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.923] | : . ' , attachPackages() ... done
[08:08:23.009] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.009] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.009] | : . ' , ; ` | : . Formals differ
[08:08:22.923] | : . ' , attachPackages() ...
[08:08:23.010] | : . ' , ; ` | : all.equal() for future ... done
[08:08:23.010] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.010] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:23.010] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.923] | : . ' , ; packages: [n=0] 
[08:08:23.010] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:23.010] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.010] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:23.010] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.924] | : . ' , attachPackages() ... done
[08:08:23.011] | signalConditions() ... done
[08:08:23.011] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.010] | : . ' , ; ` | List of future strategies:
[08:08:23.010] | : . ' , ; ` | 1. multicore:
[08:08:23.010] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:23.010] | : . ' , ; ` |    - tweaked: FALSE
[08:08:23.010] | : . ' , ; ` |    - call: plan(strategy)
[08:08:23.011] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.011] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:23.011] value(<MulticoreFuture>, ...) ...
[08:08:23.012] value(<MulticoreFuture>, ...) ... done
[08:08:23.012] value() for MulticoreFuture (<unnamed-41>) ...
[08:08:23.012] | result() for MulticoreFuture ...
[08:08:23.012] | result() for MulticoreFuture ... done
[08:08:23.012] | result() for MulticoreFuture ...
[08:08:23.013] | result() for MulticoreFuture ... done
[08:08:23.013] | signalConditions() ...
[08:08:23.013] | : include = ‘immediateCondition’
[08:08:23.013] | : exclude = 
[08:08:23.013] | : resignal = FALSE
[08:08:23.014] | : Number of conditions: 6
[08:08:23.014] | :  int 6
[08:08:23.014] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.015] | : already signaled, skipping
[08:08:23.015] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.015] | : already signaled, skipping
[08:08:23.015] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.015] | : already signaled, skipping
[08:08:23.015] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.015] | : already signaled, skipping
[08:08:23.015] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.016] | : already signaled, skipping
[08:08:23.016] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.016] | : already signaled, skipping
[08:08:23.016] | signalConditions() ... done
[08:08:23.016] | check for misuse ...
[08:08:23.016] | check for misuse ... done
[08:08:23.016] value() for MulticoreFuture (<unnamed-41>) ... done
[08:08:23.016] value: <numeric>
[08:08:23.017] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:23.017] | nx: 6
[08:08:23.017] | relay: TRUE
[08:08:23.017] | stdout: TRUE
[08:08:23.017] | signal: TRUE
[08:08:23.017] | resignal: FALSE
[08:08:23.017] | force: TRUE
[08:08:23.017] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.011] | : . ' , ; ` | List of 1
[08:08:23.011] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.011] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.011] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.011] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:23.011] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.011] | : . ' , ; ` |     ...)  
[08:08:23.011] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.011] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.011] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:23.011] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.011] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.011] | : . ' , ; ` |     ...)  
[08:08:23.011] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.011] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.017] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.018] | until=3
[08:08:23.018] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:23.018] | relaying element #3
[08:08:23.018] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.018] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:23.018] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.018] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:23.018] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.018] resolve() for MulticoreFuture ...
[08:08:23.018] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.018] resolve() for MulticoreFuture ... done
[08:08:23.019] length: 4 (resolved future 2)
[08:08:23.018] | : . ' , ; ` | plan(): nbrOfWorkers() = 2

[08:08:23.019] checking value #3:
[08:08:23.019] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:23.019] 'obj' is MulticoreFuture
[08:08:23.019] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:23.019] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:23.019] readImmediateCondition() ...
[08:08:23.020] | Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:23.020] | Number of RDS files: 0
[08:08:23.020] | Returned conditions set:
[08:08:23.020] |  list()
[08:08:23.020] readImmediateCondition() ... done
[08:08:23.020] MulticoreFuture #3
[08:08:23.021] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:23.021] | nx: 6
[08:08:23.021] | relay: TRUE
[08:08:23.021] | stdout: TRUE
[08:08:23.021] | signal: TRUE
[08:08:23.021] | resignal: FALSE
[08:08:23.021] | force: TRUE
[08:08:23.021] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.021] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.022] | until=3
[08:08:23.022] | relaying element #3
[08:08:23.022] | value() for MulticoreFuture (<unnamed-42>) ...
[08:08:23.022] | : result() for MulticoreFuture ...
[08:08:23.022] | : . readImmediateCondition() ...
[08:08:23.023] | : . ' Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:23.023] | : . ' Number of RDS files: 0
[08:08:23.023] | : . ' Returned conditions set:
[08:08:23.023] | : . '  list()
[08:08:23.023] | : . readImmediateCondition() ... done
[08:08:23.024] | : . result() for MulticoreFuture ...
[08:08:23.024] | : . result() for MulticoreFuture ... done
[08:08:23.024] | : . signalConditions() ...
[08:08:23.024] | : . ' include = ‘immediateCondition’
[08:08:23.024] | : . ' exclude = 
[08:08:23.024] | : . ' resignal = FALSE
[08:08:23.024] | : . ' Number of conditions: 6
[08:08:23.024] | : . '  int 6
[08:08:23.025] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.025] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.025] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.025] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.025] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.026] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.026] | : . signalConditions() ... done
[08:08:23.026] | : result() for MulticoreFuture ... done
[08:08:23.026] | : result() for MulticoreFuture ...
[08:08:23.026] | : result() for MulticoreFuture ... done
[08:08:23.026] | : signalConditions() ...
[08:08:23.026] | : . include = ‘immediateCondition’
[08:08:23.027] | : . exclude = 
[08:08:23.027] | : . resignal = FALSE
[08:08:23.027] | : . Number of conditions: 6
[08:08:23.027] | : .  int 6
[08:08:23.027] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.027] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.028] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.028] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.028] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.028] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.028] | : signalConditions() ... done
[08:08:23.028] | : relay stdout ...
[08:08:23.028] | : relay stdout ... done
[08:08:23.029] | : check for misuse ...
[08:08:23.029] | : check for misuse ... done
[08:08:23.029] | value() for MulticoreFuture (<unnamed-42>) ... done
[08:08:23.029] | result() for MulticoreFuture ...
[08:08:23.029] | result() for MulticoreFuture ... done
[08:08:23.029] | signalConditions() ...
[08:08:23.029] | : include = ‘immediateCondition’
[08:08:23.029] | : exclude = 
[08:08:23.029] | : resignal = FALSE
[08:08:23.030] | : Number of conditions: 6
[08:08:23.030] | :  int 6
[08:08:23.030] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.030] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.030] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.031] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.031] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.031] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.031] | signalConditions() ... done
[08:08:23.031] | result() for MulticoreFuture ...
[08:08:23.031] | result() for MulticoreFuture ... done
[08:08:23.031] | signalConditions() ...
[08:08:23.031] | : include = ‘condition’
[08:08:23.032] | : exclude = ‘error’, ‘immediateCondition’
[08:08:23.032] | : resignal = TRUE
[08:08:23.032] | : Number of conditions: 6
[08:08:23.032] | :  int 6
[08:08:23.032] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.032] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.937] | : . ' , attachPackages() ...
[08:08:23.033] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.033] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.938] | : . ' , ; packages: [n=1] ‘future’
[08:08:23.033] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.033] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.938] | : . ' , attachPackages() ... done
[08:08:23.033] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.033] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.939] | : . ' , attachPackages() ...
[08:08:23.033] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.034] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.939] | : . ' , ; packages: [n=0] 
[08:08:23.034] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.034] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:22.939] | : . ' , attachPackages() ... done
[08:08:23.034] | signalConditions() ... done
[08:08:23.034] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.034] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.034] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:23.035] value(<MulticoreFuture>, ...) ...
[08:08:23.035] value(<MulticoreFuture>, ...) ... done
[08:08:23.035] value() for MulticoreFuture (<unnamed-42>) ...
[08:08:23.035] | result() for MulticoreFuture ...
[08:08:23.035] | result() for MulticoreFuture ... done
[08:08:23.035] | result() for MulticoreFuture ...
[08:08:23.035] | result() for MulticoreFuture ... done
[08:08:23.035] | signalConditions() ...
[08:08:23.035] | : include = ‘immediateCondition’
[08:08:23.036] | : exclude = 
[08:08:23.036] | : resignal = FALSE
[08:08:23.036] | : Number of conditions: 6
[08:08:23.036] | :  int 6
[08:08:23.036] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.037] | : already signaled, skipping
[08:08:23.037] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.037] | : already signaled, skipping
[08:08:23.037] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.037] | : already signaled, skipping
[08:08:23.037] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.037] | : already signaled, skipping
[08:08:23.037] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.037] | : already signaled, skipping
[08:08:23.038] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.038] | : already signaled, skipping
[08:08:23.038] | signalConditions() ... done
[08:08:23.038] | check for misuse ...
[08:08:23.041] | check for misuse ... done
[08:08:23.041] value() for MulticoreFuture (<unnamed-42>) ... done
[08:08:23.041] value: <NULL>
[08:08:23.041] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:23.041] | nx: 6
[08:08:23.041] | relay: TRUE
[08:08:23.041] | stdout: TRUE
[08:08:23.041] | signal: TRUE
[08:08:23.042] | resignal: FALSE
[08:08:23.042] | force: TRUE
[08:08:23.042] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.042] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.042] | until=4
[08:08:23.042] | relaying element #4
[08:08:23.042] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.042] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.042] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:23.043] resolve() for MulticoreFuture ...
[08:08:23.043] resolve() for MulticoreFuture ... done
[08:08:23.043] length: 3 (resolved future 3)

[08:08:23.043] checking value #4:
[08:08:23.043] 'obj' is NULL
[08:08:23.043] signalConditionsASAP(NULL, pos=4) ...
[08:08:23.043] | nx: 6
[08:08:23.043] | relay: TRUE
[08:08:23.044] | stdout: TRUE
[08:08:23.044] | signal: TRUE
[08:08:23.044] | resignal: FALSE
[08:08:23.044] | force: TRUE
[08:08:23.044] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.044] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.044] | until=5
[08:08:23.044] | relaying element #5
[08:08:23.044] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:23.045] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.045] signalConditionsASAP(NULL, pos=4) ... done
[08:08:23.045] signalConditionsASAP(NULL, pos=4) ...
[08:08:23.045] | nx: 6
[08:08:23.045] | relay: TRUE
[08:08:23.045] | stdout: TRUE
[08:08:23.045] | signal: TRUE
[08:08:23.045] | resignal: FALSE
[08:08:23.045] | force: TRUE
[08:08:23.045] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:23.046] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.046] | until=5
[08:08:23.046] | relaying element #5
[08:08:23.046] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:23.046] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.046] signalConditionsASAP(NULL, pos=4) ... done
[08:08:23.046] length: 2 (resolved future 4)

[08:08:23.047] checking value #5:
[08:08:23.047] 'obj' is NULL
[08:08:23.047] signalConditionsASAP(NULL, pos=5) ...
[08:08:23.047] | nx: 6
[08:08:23.047] | relay: TRUE
[08:08:23.047] | stdout: TRUE
[08:08:23.047] | signal: TRUE
[08:08:23.047] | resignal: FALSE
[08:08:23.047] | force: TRUE
[08:08:23.048] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:23.048] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.048] | until=6
[08:08:23.048] | relaying element #6
[08:08:23.048] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:23.048] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.048] signalConditionsASAP(NULL, pos=5) ... done
[08:08:23.048] signalConditionsASAP(NULL, pos=5) ...
[08:08:23.048] | nx: 6
[08:08:23.049] | relay: TRUE
[08:08:23.049] | stdout: TRUE
[08:08:23.049] | signal: TRUE
[08:08:23.049] | resignal: FALSE
[08:08:23.049] | force: TRUE
[08:08:23.049] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:23.049] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.049] | until=6
[08:08:23.049] | relaying element #6
[08:08:23.050] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:23.050] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.050] signalConditionsASAP(NULL, pos=5) ... done
[08:08:23.050] length: 1 (resolved future 5)

[08:08:23.050] checking value #6:
[08:08:23.050] 'obj' is atomic
[08:08:23.050] signalConditionsASAP(numeric, pos=6) ...
[08:08:23.051] | nx: 6
[08:08:23.051] | relay: TRUE
[08:08:23.051] | stdout: TRUE
[08:08:23.051] | signal: TRUE
[08:08:23.051] | resignal: FALSE
[08:08:23.051] | force: TRUE
[08:08:23.051] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:23.051] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.051] | until=6
[08:08:23.052] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:23.052] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.052] signalConditionsASAP(numeric, pos=6) ... done
[08:08:23.052] length: 0 (resolved future 6)

[08:08:23.052] Relaying remaining futures ...
[08:08:23.052] | signalConditionsASAP(NULL, pos=0) ...
[08:08:23.052] | : nx: 6
[08:08:23.052] | : relay: TRUE
[08:08:23.053] | : stdout: TRUE
[08:08:23.053] | : signal: TRUE
[08:08:23.053] | : resignal: FALSE
[08:08:23.053] | : force: TRUE
[08:08:23.053] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:23.053] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
 - flush all
[08:08:23.053] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:23.053] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.054] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:23.054] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $  : NULL
 $  : NULL
 $  : num 6
Dimensions: c(1, 6)
[08:08:23.056] future(..., label = NULL) ...
[08:08:23.056] | lazy: FALSE
[08:08:23.057] | stdout: TRUE
[08:08:23.057] | conditions: [n=1] ‘condition’
[08:08:23.057] | gc: FALSE
[08:08:23.057] | earlySignal: FALSE
[08:08:23.057] | getGlobalsAndPackages() ...
[08:08:23.057] | : Searching for globals ...
[08:08:23.059] | : . globals found: [0] 
[08:08:23.059] | : Searching for globals ... done
[08:08:23.059] | : globals: [0] <none>
[08:08:23.059] | : packages: [0] <none>
[08:08:23.059] | getGlobalsAndPackages() ... done
[08:08:23.060] | run() for ‘Future’ (<unnamed-43>) ...
[08:08:23.060] | : state: ‘created’
[08:08:23.060] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.060] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.060] | : Using MulticoreFutureBackend ...
[08:08:23.060] | : . Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:08:23.060] | : . Launching futures ...
[08:08:23.061] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:23.061] | : . ' , getFutureData() ...
[08:08:23.061] | : . ' , ; getFutureCore() ...
[08:08:23.061] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:23.061] | : . ' , ; getFutureCore() ... done
[08:08:23.061] | : . ' , ; getFutureCapture() ...
[08:08:23.061] | : . ' , ; getFutureCapture() ... done
[08:08:23.061] | : . ' , ; getFutureContext() ...
[08:08:23.062] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.062] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:23.062] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.062] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:23.062] | : . ' , ; getFutureContext() ... done
[08:08:23.062] | : . ' , getFutureData() ... done
[08:08:23.063] | : . ' , requestCore(..., workers = 2) ...
[08:08:23.063] | : . ' , requestCore(..., workers = 2) ... done
[08:08:23.065] | : . ' , MulticoreFuture started
[08:08:23.065] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:23.066] | : . Launching futures ... done
[08:08:23.066] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:23.066] | : Using MulticoreFutureBackend ... done
[08:08:23.066] | run() for ‘Future’ (<unnamed-43>) ... done
[08:08:23.067] future(..., label = NULL) ... done
[08:08:23.067] future(..., label = NULL) ...
[08:08:23.067] | lazy: FALSE
[08:08:23.067] | stdout: TRUE
[08:08:23.067] | conditions: [n=1] ‘condition’
[08:08:23.067] | gc: FALSE
[08:08:23.067] | earlySignal: FALSE
[08:08:23.068] | getGlobalsAndPackages() ...
[08:08:23.068] | : Searching for globals ...
[08:08:23.068] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.068] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:23.068] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.069] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:23.069] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:23.069] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:23.070] | : . ' , ; ` | New stack:
[08:08:23.071] | : . globals found: [0] 
[08:08:23.071] | : Searching for globals ... done
[08:08:23.071] | : globals: [0] <none>
[08:08:23.071] | : packages: [0] <none>
[08:08:23.071] | getGlobalsAndPackages() ... done
[08:08:23.072] | run() for ‘Future’ (<unnamed-44>) ...
[08:08:23.072] | : state: ‘created’
[08:08:23.072] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.072] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.073] | : Using MulticoreFutureBackend ...
[08:08:23.073] | : . Number of futures since start: 3 (3 created, 3 launched, 2 finished)
[08:08:23.073] | : . Launching futures ...
[08:08:23.073] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:23.073] | : . ' , getFutureData() ...
[08:08:23.073] | : . ' , ; getFutureCore() ...
[08:08:23.074] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:23.074] | : . ' , ; getFutureCore() ... done
[08:08:23.074] | : . ' , ; getFutureCapture() ...
[08:08:23.070] | : . ' , ; ` | List of 1
[08:08:23.070] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.070] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.070] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:23.070] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.070] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.070] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.070] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.070] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.074] | : . ' , ; getFutureCapture() ... done
[08:08:23.074] | : . ' , ; ` | Old stack:
[08:08:23.074] | : . ' , ; getFutureContext() ...
[08:08:23.074] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.075] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:23.075] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.075] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:23.075] | : . ' , ; getFutureContext() ... done
[08:08:23.075] | : . ' , getFutureData() ... done
[08:08:23.075] | : . ' , requestCore(..., workers = 2) ...
[08:08:23.076] | : . ' , requestCore(..., workers = 2) ... done
[08:08:23.078] | : . ' , MulticoreFuture started
[08:08:23.079] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:23.079] | : . Launching futures ... done
[08:08:23.074] | : . ' , ; ` | List of 1
[08:08:23.074] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.074] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.074] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.074] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:23.074] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.074] | : . ' , ; ` |     ...)  
[08:08:23.074] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.074] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.074] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:23.074] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.074] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.074] | : . ' , ; ` |     ...)  
[08:08:23.074] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.074] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.079] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:23.079] | : . ' , ; ` | Not identical
[08:08:23.080] | : . ' , ; ` | all.equal() for future ...
[08:08:23.079] | : Using MulticoreFutureBackend ... done
[08:08:23.080] | run() for ‘Future’ (<unnamed-44>) ... done
[08:08:23.080] future(..., label = NULL) ... done
List of 6
 $ a: num 1
 $ b:[08:08:23.082] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x5643018e0438> 
 [08:08:23.082] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
$ c:[08:08:23.083] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x5642fff9bc30> 
 $  :[08:08:23.083] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:23.084] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
 NULL
 $  :[08:08:23.084] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:23.084] | : . ' , ; ` | New stack:
 NULL
 $  : num 6
List of 6
 $ a: num 1
 $ b:[08:08:23.080] | : . ' , ; ` | : List of 2
[08:08:23.080] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.080] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.080] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:23.080] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.080] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.080] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.080] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.080] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.080] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.080] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.080] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:23.080] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.080] | : . ' , ; ` | :     ...)  
[08:08:23.080] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.080] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.080] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:23.080] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.080] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.080] | : . ' , ; ` | :     ...)  
[08:08:23.080] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x5643018e0438> 
 $ c:Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x5642fff9bc30> [08:08:23.087] | : . ' , ; ` | : Formals differ

 $  :[08:08:23.088] | : . ' , ; ` | all.equal() for future ... done
[08:08:23.088] | : . ' , ; ` | Future strategies differ at level 1
[08:08:23.088] | : . ' , ; ` all.equal() for FutureStrategyList ... done
 NULL
 $  :[08:08:23.088] | : . ' , ; ` plan(): Setting new future backend stack:
 NULL
 $  :[08:08:23.088] | : . ' , ; ` List of future strategies:
[08:08:23.088] | : . ' , ; ` 1. sequential:
[08:08:23.088] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:23.088] | : . ' , ; `    - tweaked: FALSE
[08:08:23.088] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
 num 6
 - attr(*, "dim")= int [1:2] 1 6
[08:08:23.085] | : . ' , ; ` | List of 1
[08:08:23.085] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.085] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "funct ion"
[08:08:23.085] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:23.085] | : . ' , ; ` |   ..- attr(*, "factory")=fun- attr(*, "dimnames")=ction (..., maxSizeOfObjects = +Inf)  
[08:08:23.085] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.085] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.085] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.085] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.090] | : . ' , ; ` | Old stack:
List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
[08:08:23.092] resolved() for matrix ...
[08:08:23.092] | Number of elements: 6
[08:08:23.092] | Number of futures: 6
[08:08:23.089] | : . ' , ; ` List of 1
[08:08:23.089] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.089] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.089] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:23.089] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.089] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.089] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.089] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.089] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.093] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:23.093] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:23.093] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.093] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:23.090] | : . ' , ; ` | List of 1
[08:08:23.090] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.090] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.090] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.090] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:23.090] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.090] | : . ' , ; ` |     ...)  
[08:08:23.090] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.090] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.090] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:23.090] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.090] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.090] | : . ' , ; ` |     ...)  
[08:08:23.090] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.090] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.096] | : . ' , ; ` | Not identical
[08:08:23.096] | : . ' , ; ` | all.equal() for future ...
[08:08:23.093] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.093] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.093] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:23.093] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.093] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.093] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.093] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.096] | : . ' , ; ` | : init: TRUE
[08:08:23.097] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:23.097] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:23.097] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:23.097] | : . ' , ; ` | : .  list()
[08:08:23.097] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:23.098] | : . ' , ; ` | : .  list()
[08:08:23.098] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:23.098] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:23.098] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:23.098] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:23.100] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:23.100] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:23.100] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:23.100] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.100] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:23.101] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:23.101] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:23.103] | readImmediateCondition() ...
[08:08:23.103] | : Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:23.103] | : Number of RDS files: 0
[08:08:23.104] | : Returned conditions set:
[08:08:23.104] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:23.096] | : . ' , ; ` | : List of 2
[08:08:23.096] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.096] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.096] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:23.096] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.096] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.096] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.096] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.096] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.096] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.096] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.096] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:23.096] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.096] | : . ' , ; ` | :     ...)  
[08:08:23.096] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.096] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.096] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:23.096] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.096] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.096] | : . ' , ; ` | :     ...)  
[08:08:23.096] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.104] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:23.104] | :  list()
[08:08:23.104] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:23.104] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:23.104] | readImmediateCondition() ... done
[08:08:23.104] | : . ' , ; ` | : New stack:
[08:08:23.105] | : . ' , ; ` | : Formals differ
[08:08:23.105] | : . ' , ; ` | all.equal() for future ... done
[08:08:23.105] | : . ' , ; ` | Future strategies differ at level 1
[08:08:23.105] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:23.106] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:23.106] | : . ' , ; ` List of future strategies:
[08:08:23.106] | : . ' , ; ` 1. sequential:
[08:08:23.106] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:23.106] | : . ' , ; `    - tweaked: FALSE
[08:08:23.106] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.105] | : . ' , ; ` | : List of 1
[08:08:23.105] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.105] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.105] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.105] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:23.105] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.105] | : . ' , ; ` | :     ...)  
[08:08:23.105] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.105] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.105] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:23.105] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.105] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.105] | : . ' , ; ` | :     ...)  
[08:08:23.105] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.105] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.109] | : . ' , ; ` | : Old stack:
[08:08:23.106] | : . ' , ; ` List of 1
[08:08:23.106] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.106] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.106] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:23.106] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.106] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.106] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.106] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.106] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.110] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:23.110] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:23.110] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.111] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:23.111] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.111] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.111] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:23.111] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.111] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.111] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.111] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.109] | : . ' , ; ` | : List of 1
[08:08:23.109] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.109] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.109] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:23.109] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.109] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.109] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.109] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.109] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643039bc7d8> 
[08:08:23.109] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.109] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.109] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.113] | : . ' , ; ` | : init: TRUE
[08:08:23.114] | : . ' , ; ` | : Not identical
[08:08:23.114] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:23.114] | : . ' , ; ` | : all.equal() for future ...
[08:08:23.114] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:23.114] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:23.114] | : . ' , ; ` | : .  list()
[08:08:23.114] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:23.115] | readImmediateCondition() ...
[08:08:23.115] | : Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:23.115] | : . ' , ; ` | : .  list()
[08:08:23.115] | : Number of RDS files: 0
[08:08:23.115] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:23.115] | : Returned conditions set:
[08:08:23.116] | :  list()
[08:08:23.116] | readImmediateCondition() ... done
[08:08:23.116] resolved() for matrix ... done
 logi [1, 1:6] TRUE FALSE FALSE TRUE TRUE TRUE
 - attr(*, "dimnames")=[08:08:23.115] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:23.115] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:23.115] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
List of 2
  ..$ :[08:08:23.118] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
 chr "a"
  ..$ :[08:08:23.118] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:23.118] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
 chr [1:6] "a" "b" "c" "d" ...
 - attr(*, "names")=[08:08:23.118] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.119] | : . ' , ; ` plan(): nbrOfWorkers() = 1
 chr [1:6] "a" "b" "c" "" ...
[08:08:23.119] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:23.119] value() for matrix ...
[08:08:23.119] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:23.119] | recursive: 0
[08:08:23.120] | reduce: FALSE
[08:08:23.120] | length: 6
[08:08:23.120] | elements: ‘a’, ‘b’, ‘c’, ‘’, ‘’, ‘’
[08:08:23.121] | Number of remaining objects: 6
[08:08:23.121] | checking value #1:
[08:08:23.121] | 'obj' is atomic
[08:08:23.114] | : . ' , ; ` | : . List of 2
[08:08:23.114] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.114] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.114] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.114] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:23.114] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.114] | : . ' , ; ` | : .     ...)  
[08:08:23.114] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.114] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.114] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:23.114] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.114] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.114] | : . ' , ; ` | : .     ...)  
[08:08:23.114] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.114] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.114] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.114] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:23.114] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.114] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.114] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.114] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.114] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643039bc7d8> 
[08:08:23.114] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.114] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.121] | signalConditionsASAP(numeric, pos=1) ...
[08:08:23.121] | : nx: 6
[08:08:23.122] | : relay: TRUE
[08:08:23.122] | : . ' , ; ` | : . Formals differ
[08:08:23.122] | : stdout: TRUE
[08:08:23.122] | : . ' , ; ` | : all.equal() for future ... done
[08:08:23.122] | : signal: TRUE
[08:08:23.122] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:23.122] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:23.122] | : resignal: FALSE
[08:08:23.122] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:23.122] | : force: TRUE
[08:08:23.123] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:23.123] | : . ' , ; ` | List of future strategies:
[08:08:23.123] | : . ' , ; ` | 1. multicore:
[08:08:23.123] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:23.123] | : . ' , ; ` |    - tweaked: FALSE
[08:08:23.123] | : . ' , ; ` |    - call: plan(strategy)
[08:08:23.123] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:23.123] | : until=2
[08:08:23.123] | : relaying element #2
[08:08:23.123] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:23.124] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:23.124] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:23.124] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:23.124] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:23.124] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:23.124] | length: 5 (resolved future 1)
[08:08:23.124] value() for matrix ... done
[08:08:23.124] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:23.125] checking value #2:
[08:08:23.125] | : . ' , ; ` | : New stack:
[08:08:23.125] 'obj' is MulticoreFuture
[08:08:23.123] | : . ' , ; ` | List of 1
[08:08:23.123] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.123] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.123] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.123] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:23.123] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.123] | : . ' , ; ` |     ...)  
[08:08:23.123] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.123] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.123] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:23.123] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.123] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.123] | : . ' , ; ` |     ...)  
[08:08:23.123] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.123] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.127] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:23.128] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:23.128] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.128] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.128] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:23.128] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:23.128] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:23.129] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:23.129] readImmediateCondition() ...
[08:08:23.129] | Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:23.129] | Number of RDS files: 0
[08:08:23.125] | : . ' , ; ` | : List of 1
[08:08:23.125] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.125] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.125] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.125] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:23.125] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.125] | : . ' , ; ` | :     ...)  
[08:08:23.125] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.125] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.125] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:23.125] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.125] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.125] | : . ' , ; ` | :     ...)  
[08:08:23.125] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.125] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.130] | Returned conditions set:
[08:08:23.130] | : . ' , ; ` | : Old stack:
[08:08:23.130] |  list()
[08:08:23.130] readImmediateCondition() ... done
[08:08:23.131] MulticoreFuture #2
[08:08:23.131] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:23.131] | nx: 6
[08:08:23.131] | relay: TRUE
[08:08:23.131] | stdout: TRUE
[08:08:23.132] | signal: TRUE
[08:08:23.132] | resignal: FALSE
[08:08:23.132] | force: TRUE
[08:08:23.132] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:23.132] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:23.133] | until=2
[08:08:23.133] | relaying element #2
[08:08:23.133] | value() for MulticoreFuture (<unnamed-43>) ...
[08:08:23.133] | : result() for MulticoreFuture ...
[08:08:23.134] | : . readImmediateCondition() ...
[08:08:23.134] | : . ' Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:23.135] | : . ' Number of RDS files: 0
[08:08:23.135] | : . ' Returned conditions set:
[08:08:23.135] | : . '  list()
[08:08:23.136] | : . readImmediateCondition() ... done
[08:08:23.136] | : . result() for MulticoreFuture ...
[08:08:23.136] | : . result() for MulticoreFuture ... done
[08:08:23.137] | : . signalConditions() ...
[08:08:23.130] | : . ' , ; ` | : List of 1
[08:08:23.130] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.130] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.130] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:23.130] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.130] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.130] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.130] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.130] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303c57c28> 
[08:08:23.130] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.130] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.130] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.137] | : . ' include = ‘immediateCondition’
[08:08:23.137] | : . ' , ; ` | : Not identical
[08:08:23.137] | : . ' exclude = 
[08:08:23.137] | : . ' resignal = FALSE
[08:08:23.137] | : . ' , ; ` | : all.equal() for future ...
[08:08:23.137] | : . ' Number of conditions: 6
[08:08:23.138] | : . '  int 6
[08:08:23.138] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.139] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.139] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.139] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.139] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.139] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.140] | : . signalConditions() ... done
[08:08:23.140] | : result() for MulticoreFuture ... done
[08:08:23.140] | : result() for MulticoreFuture ...
[08:08:23.140] | : result() for MulticoreFuture ... done
[08:08:23.141] | : signalConditions() ...
[08:08:23.141] | : . include = ‘immediateCondition’
[08:08:23.141] | : . exclude = 
[08:08:23.141] | : . resignal = FALSE
[08:08:23.141] | : . Number of conditions: 6
[08:08:23.142] | : .  int 6
[08:08:23.142] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.143] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.143] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.143] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.143] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.143] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.144] | : signalConditions() ... done
[08:08:23.144] | : relay stdout ...
[08:08:23.144] | : relay stdout ... done
[08:08:23.144] | : check for misuse ...
[08:08:23.145] | : check for misuse ... done
[08:08:23.145] | value() for MulticoreFuture (<unnamed-43>) ... done
[08:08:23.145] | result() for MulticoreFuture ...
[08:08:23.145] | result() for MulticoreFuture ... done
[08:08:23.145] | signalConditions() ...
[08:08:23.146] | : include = ‘immediateCondition’
[08:08:23.146] | : exclude = 
[08:08:23.146] | : resignal = FALSE
[08:08:23.146] | : Number of conditions: 6
[08:08:23.146] | :  int 6
[08:08:23.147] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.147] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.147] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.148] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.148] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.148] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.148] | signalConditions() ... done
[08:08:23.149] | result() for MulticoreFuture ...
[08:08:23.149] | result() for MulticoreFuture ... done
[08:08:23.149] | signalConditions() ...
[08:08:23.149] | : include = ‘condition’
[08:08:23.149] | : exclude = ‘error’, ‘immediateCondition’
[08:08:23.137] | : . ' , ; ` | : . List of 2
[08:08:23.137] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.137] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.137] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.137] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:23.137] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.137] | : . ' , ; ` | : .     ...)  
[08:08:23.137] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.137] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.137] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:23.137] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.137] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.137] | : . ' , ; ` | : .     ...)  
[08:08:23.137] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.137] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.137] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.137] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:23.137] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.137] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.137] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.137] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.137] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303c57c28> 
[08:08:23.137] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.137] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.150] | : resignal = TRUE
[08:08:23.150] | : Number of conditions: 6
[08:08:23.150] | :  int 6
[08:08:23.150] | : . ' , ; ` | : . Formals differ
[08:08:23.151] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.151] | : . ' , ; ` | : all.equal() for future ... done
[08:08:23.151] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:23.151] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.066] | : . ' , attachPackages() ...
[08:08:23.151] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:23.151] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.151] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:23.151] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.066] | : . ' , ; packages: [n=1] ‘future’
[08:08:23.152] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.152] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.067] | : . ' , attachPackages() ... done
[08:08:23.151] | : . ' , ; ` | List of future strategies:
[08:08:23.151] | : . ' , ; ` | 1. multicore:
[08:08:23.151] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:23.151] | : . ' , ; ` |    - tweaked: FALSE
[08:08:23.151] | : . ' , ; ` |    - call: plan(strategy)
[08:08:23.152] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.152] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.067] | : . ' , attachPackages() ...
[08:08:23.153] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.153] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.067] | : . ' , ; packages: [n=0] 
[08:08:23.153] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.153] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.067] | : . ' , attachPackages() ... done
[08:08:23.154] | signalConditions() ... done
[08:08:23.154] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.154] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.154] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:23.154] value(<MulticoreFuture>, ...) ...
[08:08:23.155] value(<MulticoreFuture>, ...) ... done
[08:08:23.155] value() for MulticoreFuture (<unnamed-43>) ...
[08:08:23.155] | result() for MulticoreFuture ...
[08:08:23.155] | result() for MulticoreFuture ... done
[08:08:23.155] | result() for MulticoreFuture ...
[08:08:23.156] | result() for MulticoreFuture ... done
[08:08:23.156] | signalConditions() ...
[08:08:23.156] | : include = ‘immediateCondition’
[08:08:23.156] | : exclude = 
[08:08:23.156] | : resignal = FALSE
[08:08:23.157] | : Number of conditions: 6
[08:08:23.157] | :  int 6
[08:08:23.157] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.158] | : already signaled, skipping
[08:08:23.158] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.158] | : already signaled, skipping
[08:08:23.158] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.158] | : already signaled, skipping
[08:08:23.159] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.159] | : already signaled, skipping
[08:08:23.159] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.159] | : already signaled, skipping
[08:08:23.159] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.152] | : . ' , ; ` | List of 1
[08:08:23.152] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.152] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.152] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.152] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:23.152] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.152] | : . ' , ; ` |     ...)  
[08:08:23.152] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.152] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.152] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:23.152] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.152] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.152] | : . ' , ; ` |     ...)  
[08:08:23.152] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.152] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.159] | : already signaled, skipping
[08:08:23.159] | signalConditions() ... done
[08:08:23.159] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:23.159] | check for misuse ...
[08:08:23.159] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:23.160] | check for misuse ... done
[08:08:23.160] value() for MulticoreFuture (<unnamed-43>) ... done
[08:08:23.160] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.160] value: <numeric>
[08:08:23.160] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:23.160] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.160] | nx: 6
[08:08:23.160] | relay: TRUE
[08:08:23.160] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:23.160] | stdout: TRUE
[08:08:23.160] | signal: TRUE
[08:08:23.160] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:23.160] | resignal: FALSE
[08:08:23.160] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:23.161] | force: TRUE
[08:08:23.161] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.161] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:23.161] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.161] | until=3
[08:08:23.161] | relaying element #3
[08:08:23.161] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.161] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.161] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:23.162] resolve() for MulticoreFuture ...
[08:08:23.162] resolve() for MulticoreFuture ... done
[08:08:23.162] length: 4 (resolved future 2)

[08:08:23.162] checking value #3:
[08:08:23.162] 'obj' is MulticoreFuture
[08:08:23.162] readImmediateCondition() ...
[08:08:23.162] | Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:23.163] | Number of RDS files: 0
[08:08:23.163] | Returned conditions set:
[08:08:23.163] |  list()
[08:08:23.163] readImmediateCondition() ... done
[08:08:23.163] MulticoreFuture #3
[08:08:23.163] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:23.163] | nx: 6
[08:08:23.164] | relay: TRUE
[08:08:23.164] | stdout: TRUE
[08:08:23.164] | signal: TRUE
[08:08:23.164] | resignal: FALSE
[08:08:23.164] | force: TRUE
[08:08:23.164] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.164] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.164] | until=3
[08:08:23.164] | relaying element #3
[08:08:23.165] | value() for MulticoreFuture (<unnamed-44>) ...
[08:08:23.165] | : result() for MulticoreFuture ...
[08:08:23.165] | : . readImmediateCondition() ...
[08:08:23.165] | : . ' Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:23.166] | : . ' Number of RDS files: 0
[08:08:23.166] | : . ' Returned conditions set:
[08:08:23.166] | : . '  list()
[08:08:23.166] | : . readImmediateCondition() ... done
[08:08:23.166] | : . result() for MulticoreFuture ...
[08:08:23.167] | : . result() for MulticoreFuture ... done
[08:08:23.167] | : . signalConditions() ...
[08:08:23.167] | : . ' include = ‘immediateCondition’
[08:08:23.167] | : . ' exclude = 
[08:08:23.167] | : . ' resignal = FALSE
[08:08:23.167] | : . ' Number of conditions: 6
[08:08:23.167] | : . '  int 6
[08:08:23.168] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.168] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.168] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.168] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.168] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.168] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.169] | : . signalConditions() ... done
[08:08:23.169] | : result() for MulticoreFuture ... done
[08:08:23.169] | : result() for MulticoreFuture ...
[08:08:23.169] | : result() for MulticoreFuture ... done
[08:08:23.169] | : signalConditions() ...
[08:08:23.169] | : . include = ‘immediateCondition’
[08:08:23.169] | : . exclude = 
[08:08:23.169] | : . resignal = FALSE
[08:08:23.170] | : . Number of conditions: 6
[08:08:23.170] | : .  int 6
[08:08:23.170] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.170] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.170] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.171] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.171] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.171] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.171] | : signalConditions() ... done
[08:08:23.171] | : relay stdout ...
[08:08:23.171] | : relay stdout ... done
[08:08:23.171] | : check for misuse ...
[08:08:23.171] | : check for misuse ... done
[08:08:23.172] | value() for MulticoreFuture (<unnamed-44>) ... done
[08:08:23.172] | result() for MulticoreFuture ...
[08:08:23.172] | result() for MulticoreFuture ... done
[08:08:23.172] | signalConditions() ...
[08:08:23.172] | : include = ‘immediateCondition’
[08:08:23.172] | : exclude = 
[08:08:23.172] | : resignal = FALSE
[08:08:23.172] | : Number of conditions: 6
[08:08:23.172] | :  int 6
[08:08:23.173] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.173] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.173] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.173] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.173] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.174] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.174] | signalConditions() ... done
[08:08:23.174] | result() for MulticoreFuture ...
[08:08:23.174] | result() for MulticoreFuture ... done
[08:08:23.174] | signalConditions() ...
[08:08:23.174] | : include = ‘condition’
[08:08:23.174] | : exclude = ‘error’, ‘immediateCondition’
[08:08:23.174] | : resignal = TRUE
[08:08:23.175] | : Number of conditions: 6
[08:08:23.175] | :  int 6
[08:08:23.175] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.175] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.079] | : . ' , attachPackages() ...
[08:08:23.175] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.176] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.080] | : . ' , ; packages: [n=1] ‘future’
[08:08:23.176] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.176] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.080] | : . ' , attachPackages() ... done
[08:08:23.176] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.176] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.081] | : . ' , attachPackages() ...
[08:08:23.176] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.176] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.081] | : . ' , ; packages: [n=0] 
[08:08:23.177] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.177] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.081] | : . ' , attachPackages() ... done
[08:08:23.177] | signalConditions() ... done
[08:08:23.177] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.177] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.177] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:23.177] value(<MulticoreFuture>, ...) ...
[08:08:23.177] value(<MulticoreFuture>, ...) ... done
[08:08:23.178] value() for MulticoreFuture (<unnamed-44>) ...
[08:08:23.178] | result() for MulticoreFuture ...
[08:08:23.178] | result() for MulticoreFuture ... done
[08:08:23.178] | result() for MulticoreFuture ...
[08:08:23.178] | result() for MulticoreFuture ... done
[08:08:23.178] | signalConditions() ...
[08:08:23.178] | : include = ‘immediateCondition’
[08:08:23.178] | : exclude = 
[08:08:23.178] | : resignal = FALSE
[08:08:23.179] | : Number of conditions: 6
[08:08:23.179] | :  int 6
[08:08:23.179] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.179] | : already signaled, skipping
[08:08:23.179] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.179] | : already signaled, skipping
[08:08:23.180] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.180] | : already signaled, skipping
[08:08:23.180] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.180] | : already signaled, skipping
[08:08:23.180] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.180] | : already signaled, skipping
[08:08:23.180] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.180] | : already signaled, skipping
[08:08:23.180] | signalConditions() ... done
[08:08:23.181] | check for misuse ...
[08:08:23.181] | check for misuse ... done
[08:08:23.181] value() for MulticoreFuture (<unnamed-44>) ... done
[08:08:23.181] value: <NULL>
[08:08:23.181] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:23.181] | nx: 6
[08:08:23.181] | relay: TRUE
[08:08:23.181] | stdout: TRUE
[08:08:23.182] | signal: TRUE
[08:08:23.182] | resignal: FALSE
[08:08:23.184] | force: TRUE
[08:08:23.184] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.184] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.184] | until=4
[08:08:23.184] | relaying element #4
[08:08:23.184] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.185] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.185] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:23.185] resolve() for MulticoreFuture ...
[08:08:23.185] resolve() for MulticoreFuture ... done
[08:08:23.185] length: 3 (resolved future 3)

[08:08:23.185] checking value #4:
[08:08:23.185] 'obj' is NULL
[08:08:23.185] signalConditionsASAP(NULL, pos=4) ...
[08:08:23.186] | nx: 6
[08:08:23.186] | relay: TRUE
[08:08:23.186] | stdout: TRUE
[08:08:23.186] | signal: TRUE
[08:08:23.186] | resignal: FALSE
[08:08:23.186] | force: TRUE
[08:08:23.186] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.186] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.186] | until=5
[08:08:23.187] | relaying element #5
[08:08:23.187] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:23.187] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.187] signalConditionsASAP(NULL, pos=4) ... done
[08:08:23.187] signalConditionsASAP(NULL, pos=4) ...
[08:08:23.187] | nx: 6
[08:08:23.187] | relay: TRUE
[08:08:23.187] | stdout: TRUE
[08:08:23.187] | signal: TRUE
[08:08:23.188] | resignal: FALSE
[08:08:23.188] | force: TRUE
[08:08:23.188] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:23.188] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.188] | until=5
[08:08:23.188] | relaying element #5
[08:08:23.188] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:23.188] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.188] signalConditionsASAP(NULL, pos=4) ... done
[08:08:23.189] length: 2 (resolved future 4)

[08:08:23.189] checking value #5:
[08:08:23.189] 'obj' is NULL
[08:08:23.189] signalConditionsASAP(NULL, pos=5) ...
[08:08:23.189] | nx: 6
[08:08:23.189] | relay: TRUE
[08:08:23.189] | stdout: TRUE
[08:08:23.189] | signal: TRUE
[08:08:23.189] | resignal: FALSE
[08:08:23.190] | force: TRUE
[08:08:23.190] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:23.190] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.190] | until=6
[08:08:23.190] | relaying element #6
[08:08:23.190] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:23.190] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.190] signalConditionsASAP(NULL, pos=5) ... done
[08:08:23.191] signalConditionsASAP(NULL, pos=5) ...
[08:08:23.191] | nx: 6
[08:08:23.191] | relay: TRUE
[08:08:23.191] | stdout: TRUE
[08:08:23.191] | signal: TRUE
[08:08:23.191] | resignal: FALSE
[08:08:23.191] | force: TRUE
[08:08:23.191] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:23.191] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.192] | until=6
[08:08:23.192] | relaying element #6
[08:08:23.192] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:23.192] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.192] signalConditionsASAP(NULL, pos=5) ... done
[08:08:23.192] length: 1 (resolved future 5)

[08:08:23.192] checking value #6:
[08:08:23.193] 'obj' is atomic
[08:08:23.193] signalConditionsASAP(numeric, pos=6) ...
[08:08:23.193] | nx: 6
[08:08:23.193] | relay: TRUE
[08:08:23.193] | stdout: TRUE
[08:08:23.193] | signal: TRUE
[08:08:23.193] | resignal: FALSE
[08:08:23.193] | force: TRUE
[08:08:23.193] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:23.193] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.194] | until=6
[08:08:23.194] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:23.194] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.194] signalConditionsASAP(numeric, pos=6) ... done
[08:08:23.194] length: 0 (resolved future 6)

[08:08:23.194] Relaying remaining futures ...
[08:08:23.194] | signalConditionsASAP(NULL, pos=0) ...
[08:08:23.194] | : nx: 6
[08:08:23.195] | : relay: TRUE
[08:08:23.195] | : stdout: TRUE
[08:08:23.195] | : signal: TRUE
[08:08:23.195] | : resignal: FALSE
[08:08:23.195] | : force: TRUE
[08:08:23.195] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:23.195] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
 - flush all
[08:08:23.195] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:23.196] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.196] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:23.196] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 1 6
 - attr(*, "dimnames")=List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
Dimensions: c(2, 3)
[08:08:23.200] future(..., label = NULL) ...
[08:08:23.200] | lazy: FALSE
[08:08:23.200] | stdout: TRUE
[08:08:23.200] | conditions: [n=1] ‘condition’
[08:08:23.200] | gc: FALSE
[08:08:23.200] | earlySignal: FALSE
[08:08:23.201] | getGlobalsAndPackages() ...
[08:08:23.201] | : Searching for globals ...
[08:08:23.202] | : . globals found: [0] 
[08:08:23.202] | : Searching for globals ... done
[08:08:23.203] | : globals: [0] <none>
[08:08:23.203] | : packages: [0] <none>
[08:08:23.203] | getGlobalsAndPackages() ... done
[08:08:23.203] | run() for ‘Future’ (<unnamed-45>) ...
[08:08:23.203] | : state: ‘created’
[08:08:23.203] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.204] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.204] | : Using MulticoreFutureBackend ...
[08:08:23.204] | : . Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:08:23.204] | : . Launching futures ...
[08:08:23.204] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:23.204] | : . ' , getFutureData() ...
[08:08:23.204] | : . ' , ; getFutureCore() ...
[08:08:23.205] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:23.205] | : . ' , ; getFutureCore() ... done
[08:08:23.205] | : . ' , ; getFutureCapture() ...
[08:08:23.205] | : . ' , ; getFutureCapture() ... done
[08:08:23.205] | : . ' , ; getFutureContext() ...
[08:08:23.205] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.205] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:23.206] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.206] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:23.206] | : . ' , ; getFutureContext() ... done
[08:08:23.206] | : . ' , getFutureData() ... done
[08:08:23.206] | : . ' , requestCore(..., workers = 2) ...
[08:08:23.207] | : . ' , requestCore(..., workers = 2) ... done
[08:08:23.209] | : . ' , MulticoreFuture started
[08:08:23.209] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:23.209] | : . Launching futures ... done
[08:08:23.210] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:23.210] | : Using MulticoreFutureBackend ... done
[08:08:23.210] | run() for ‘Future’ (<unnamed-45>) ... done
[08:08:23.210] future(..., label = NULL) ... done
[08:08:23.210] future(..., label = NULL) ...
[08:08:23.211] | lazy: FALSE
[08:08:23.211] | stdout: TRUE
[08:08:23.211] | conditions: [n=1] ‘condition’
[08:08:23.211] | gc: FALSE
[08:08:23.211] | earlySignal: FALSE
[08:08:23.212] | getGlobalsAndPackages() ...
[08:08:23.212] | : Searching for globals ...
[08:08:23.212] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.212] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:23.212] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.213] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:23.213] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:23.213] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:23.213] | : . ' , ; ` | New stack:
[08:08:23.214] | : . globals found: [0] 
[08:08:23.215] | : Searching for globals ... done
[08:08:23.215] | : globals: [0] <none>
[08:08:23.215] | : packages: [0] <none>
[08:08:23.215] | getGlobalsAndPackages() ... done
[08:08:23.216] | run() for ‘Future’ (<unnamed-46>) ...
[08:08:23.216] | : state: ‘created’
[08:08:23.216] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.216] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.216] | : Using MulticoreFutureBackend ...
[08:08:23.217] | : . Number of futures since start: 5 (5 created, 5 launched, 4 finished)
[08:08:23.217] | : . Launching futures ...
[08:08:23.217] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:23.217] | : . ' , getFutureData() ...
[08:08:23.217] | : . ' , ; getFutureCore() ...
[08:08:23.217] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:23.218] | : . ' , ; getFutureCore() ... done
[08:08:23.218] | : . ' , ; getFutureCapture() ...
[08:08:23.214] | : . ' , ; ` | List of 1
[08:08:23.214] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.214] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.214] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:23.214] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.214] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.214] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.214] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.214] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.218] | : . ' , ; getFutureCapture() ... done
[08:08:23.218] | : . ' , ; ` | Old stack:
[08:08:23.218] | : . ' , ; getFutureContext() ...
[08:08:23.218] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.218] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:23.219] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.219] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:23.219] | : . ' , ; getFutureContext() ... done
[08:08:23.219] | : . ' , getFutureData() ... done
[08:08:23.219] | : . ' , requestCore(..., workers = 2) ...
[08:08:23.220] | : . ' , requestCore(..., workers = 2) ... done
[08:08:23.222] | : . ' , MulticoreFuture started
[08:08:23.222] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:23.223] | : . Launching futures ... done
[08:08:23.218] | : . ' , ; ` | List of 1
[08:08:23.218] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.218] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.218] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.218] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:23.218] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.218] | : . ' , ; ` |     ...)  
[08:08:23.218] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.218] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.218] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:23.218] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.218] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.218] | : . ' , ; ` |     ...)  
[08:08:23.218] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.218] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.223] | : . ' , ; ` | Not identical
[08:08:23.223] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:23.223] | : . ' , ; ` | all.equal() for future ...
[08:08:23.223] | : Using MulticoreFutureBackend ... done
[08:08:23.224] | run() for ‘Future’ (<unnamed-46>) ... done
[08:08:23.224] future(..., label = NULL) ... done
List of 6
 $ a: num 1
 $ b:[08:08:23.226] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x564301876ce8> 
 $ c:[08:08:23.226] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:23.227] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x5642ffe33a10> 
 $  :[08:08:23.227] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
 NULL
 $  :[08:08:23.228] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:23.228] | : . ' , ; ` all.equal() for FutureStrategyList ...
 NULL
 $  :[08:08:23.228] | : . ' , ; ` | New stack:
 num 6
List of 6
 $ a: num 1
 $ b:[08:08:23.223] | : . ' , ; ` | : List of 2
[08:08:23.223] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.223] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.223] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:23.223] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.223] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.223] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.223] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.223] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.223] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.223] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.223] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:23.223] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.223] | : . ' , ; ` | :     ...)  
[08:08:23.223] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.223] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.223] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:23.223] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.223] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.223] | : . ' , ; ` | :     ...)  
[08:08:23.223] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x564301876ce8> 
 $ c:Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x5642ffe33a10> 
 $  :[08:08:23.231] | : . ' , ; ` | : Formals differ
[08:08:23.231] | : . ' , ; ` | all.equal() for future ... done
[08:08:23.232] | : . ' , ; ` | Future strategies differ at level 1
 NULL
[08:08:23.232] | : . ' , ; ` all.equal() for FutureStrategyList ... done
 $  :[08:08:23.232] | : . ' , ; ` plan(): Setting new future backend stack:
 NULL
 $  :[08:08:23.232] | : . ' , ; ` List of future strategies:
[08:08:23.232] | : . ' , ; ` 1. sequential:
[08:08:23.232] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:23.232] | : . ' , ; `    - tweaked: FALSE
[08:08:23.232] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
 num 6
 - attr(*, "dim")=[08:08:23.228] | : . ' , ; ` | List of 1
[08:08:23.228] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.228] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.228] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:23.228] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.228] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.228] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.228] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.228] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
 int [1:2] 2 3
 - attr(*, "dimnames")=[08:08:23.234] | : . ' , ; ` | Old stack:
List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
[08:08:23.236] resolved() for matrix ...
[08:08:23.236] | Number of elements: 6
[08:08:23.236] | Number of futures: 6
[08:08:23.233] | : . ' , ; ` List of 1
[08:08:23.233] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.233] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.233] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:23.233] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.233] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.233] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.233] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.233] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.236] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:23.237] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:23.237] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.237] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:23.234] | : . ' , ; ` | List of 1
[08:08:23.234] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.234] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.234] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.234] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:23.234] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.234] | : . ' , ; ` |     ...)  
[08:08:23.234] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.234] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.234] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:23.234] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.234] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.234] | : . ' , ; ` |     ...)  
[08:08:23.234] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.234] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.240] | : . ' , ; ` | Not identical
[08:08:23.240] | : . ' , ; ` | all.equal() for future ...
[08:08:23.237] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.237] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.237] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:23.237] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.237] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.237] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.237] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.240] | : . ' , ; ` | : init: TRUE
[08:08:23.240] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:23.241] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:23.241] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:23.241] | : . ' , ; ` | : .  list()
[08:08:23.241] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:23.242] | : . ' , ; ` | : .  list()
[08:08:23.242] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:23.242] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:23.242] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:23.242] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:23.244] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:23.244] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:23.244] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:23.244] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.244] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:23.245] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:23.245] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:23.247] | readImmediateCondition() ...
[08:08:23.247] | : Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:23.247] | : Number of RDS files: 0
[08:08:23.247] | : Returned conditions set:
[08:08:23.248] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:23.248] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:23.240] | : . ' , ; ` | : List of 2
[08:08:23.240] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.240] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.240] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:23.240] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.240] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.240] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.240] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.240] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.240] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.240] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.240] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:23.240] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.240] | : . ' , ; ` | :     ...)  
[08:08:23.240] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.240] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.240] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:23.240] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.240] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.240] | : . ' , ; ` | :     ...)  
[08:08:23.240] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.248] | :  list()
[08:08:23.248] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:23.248] | readImmediateCondition() ... done
[08:08:23.248] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:23.248] | : . ' , ; ` | : New stack:
[08:08:23.249] | : . ' , ; ` | : Formals differ
[08:08:23.249] | : . ' , ; ` | all.equal() for future ... done
[08:08:23.249] | : . ' , ; ` | Future strategies differ at level 1
[08:08:23.249] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:23.249] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:23.250] | : . ' , ; ` List of future strategies:
[08:08:23.250] | : . ' , ; ` 1. sequential:
[08:08:23.250] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:23.250] | : . ' , ; `    - tweaked: FALSE
[08:08:23.250] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.248] | : . ' , ; ` | : List of 1
[08:08:23.248] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.248] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.248] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.248] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:23.248] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.248] | : . ' , ; ` | :     ...)  
[08:08:23.248] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.248] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.248] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:23.248] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.248] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.248] | : . ' , ; ` | :     ...)  
[08:08:23.248] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.248] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.253] | : . ' , ; ` | : Old stack:
[08:08:23.250] | : . ' , ; ` List of 1
[08:08:23.250] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.250] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.250] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:23.250] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.250] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.250] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.250] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.250] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.254] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:23.254] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:23.254] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.255] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:23.255] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.255] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.255] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:23.255] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.255] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.255] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.255] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.253] | : . ' , ; ` | : List of 1
[08:08:23.253] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.253] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.253] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:23.253] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.253] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.253] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.253] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.253] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643039f2858> 
[08:08:23.253] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.253] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.253] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.258] | : . ' , ; ` | : init: TRUE
[08:08:23.258] | : . ' , ; ` | : Not identical
[08:08:23.258] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:23.258] | : . ' , ; ` | : all.equal() for future ...
[08:08:23.258] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:23.258] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:23.258] | : . ' , ; ` | : .  list()
[08:08:23.258] | readImmediateCondition() ...
[08:08:23.259] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:23.259] | : Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:23.259] | : Number of RDS files: 0
[08:08:23.259] | : Returned conditions set:
[08:08:23.259] | : . ' , ; ` | : .  list()
[08:08:23.259] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:23.259] | :  list()
[08:08:23.260] | readImmediateCondition() ... done
[08:08:23.260] resolved() for matrix ... done
 logi [1:2, 1:3] TRUE FALSE FALSE TRUE TRUE TRUE
 - attr(*, "dimnames")=List of 2
  ..$ :[08:08:23.260] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:23.260] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:23.260] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
 chr [1:2] "a" "b"
  ..$ :[08:08:23.262] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:23.262] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
 chr [1:3] "a" "b" "c"
 - attr(*, "names")=[08:08:23.262] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:23.263] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
 chr [1:6] "a" "b" "c" "" ...
[08:08:23.263] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:23.263] value() for matrix ...
[08:08:23.263] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:23.263] | recursive: 0
[08:08:23.263] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:23.264] | reduce: FALSE
[08:08:23.264] | length: 6
[08:08:23.264] | elements: ‘a’, ‘b’, ‘c’, ‘’, ‘’, ‘’
[08:08:23.265] | Number of remaining objects: 6
[08:08:23.265] | checking value #1:
[08:08:23.265] | 'obj' is atomic
[08:08:23.265] | signalConditionsASAP(numeric, pos=1) ...
[08:08:23.258] | : . ' , ; ` | : . List of 2
[08:08:23.258] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.258] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.258] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.258] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:23.258] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.258] | : . ' , ; ` | : .     ...)  
[08:08:23.258] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.258] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.258] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:23.258] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.258] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.258] | : . ' , ; ` | : .     ...)  
[08:08:23.258] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.258] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.258] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.258] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:23.258] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.258] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.258] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.258] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.258] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643039f2858> 
[08:08:23.258] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.258] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.265] | : nx: 6
[08:08:23.266] | : relay: TRUE
[08:08:23.266] | : stdout: TRUE
[08:08:23.266] | : . ' , ; ` | : . Formals differ
[08:08:23.266] | : signal: TRUE
[08:08:23.266] | : . ' , ; ` | : all.equal() for future ... done
[08:08:23.266] | : resignal: FALSE
[08:08:23.266] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:23.266] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:23.266] | : force: TRUE
[08:08:23.267] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:23.267] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:23.267] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:23.267] | : . ' , ; ` | List of future strategies:
[08:08:23.267] | : . ' , ; ` | 1. multicore:
[08:08:23.267] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:23.267] | : . ' , ; ` |    - tweaked: FALSE
[08:08:23.267] | : . ' , ; ` |    - call: plan(strategy)
[08:08:23.267] | : until=2
[08:08:23.267] | : relaying element #2
[08:08:23.267] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:23.268] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:23.268] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:23.268] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:23.268] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:23.268] | length: 5 (resolved future 1)
[08:08:23.268] value() for matrix ... done
[08:08:23.268] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:23.269] checking value #2:
[08:08:23.269] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:23.269] 'obj' is MulticoreFuture
[08:08:23.269] | : . ' , ; ` | : New stack:
[08:08:23.267] | : . ' , ; ` | List of 1
[08:08:23.267] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.267] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.267] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.267] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:23.267] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.267] | : . ' , ; ` |     ...)  
[08:08:23.267] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.267] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.267] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:23.267] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.267] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.267] | : . ' , ; ` |     ...)  
[08:08:23.267] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.267] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.272] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:23.272] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:23.272] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.272] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.272] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:23.272] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:23.273] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:23.273] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:23.273] readImmediateCondition() ...
[08:08:23.273] | Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:23.274] | Number of RDS files: 0
[08:08:23.269] | : . ' , ; ` | : List of 1
[08:08:23.269] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.269] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.269] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.269] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:23.269] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.269] | : . ' , ; ` | :     ...)  
[08:08:23.269] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.269] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.269] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:23.269] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.269] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.269] | : . ' , ; ` | :     ...)  
[08:08:23.269] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.269] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.274] | Returned conditions set:
[08:08:23.274] | : . ' , ; ` | : Old stack:
[08:08:23.274] |  list()
[08:08:23.275] readImmediateCondition() ... done
[08:08:23.275] MulticoreFuture #2
[08:08:23.275] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:23.275] | nx: 6
[08:08:23.275] | relay: TRUE
[08:08:23.276] | stdout: TRUE
[08:08:23.276] | signal: TRUE
[08:08:23.276] | resignal: FALSE
[08:08:23.276] | force: TRUE
[08:08:23.276] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:23.276] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:23.277] | until=2
[08:08:23.277] | relaying element #2
[08:08:23.277] | value() for MulticoreFuture (<unnamed-45>) ...
[08:08:23.277] | : result() for MulticoreFuture ...
[08:08:23.278] | : . readImmediateCondition() ...
[08:08:23.279] | : . ' Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:23.279] | : . ' Number of RDS files: 0
[08:08:23.279] | : . ' Returned conditions set:
[08:08:23.279] | : . '  list()
[08:08:23.280] | : . readImmediateCondition() ... done
[08:08:23.280] | : . result() for MulticoreFuture ...
[08:08:23.281] | : . result() for MulticoreFuture ... done
[08:08:23.274] | : . ' , ; ` | : List of 1
[08:08:23.274] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.274] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.274] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:23.274] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.274] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.274] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.274] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.274] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303c8da40> 
[08:08:23.274] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.274] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.274] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.281] | : . signalConditions() ...
[08:08:23.281] | : . ' , ; ` | : Not identical
[08:08:23.281] | : . ' include = ‘immediateCondition’
[08:08:23.281] | : . ' , ; ` | : all.equal() for future ...
[08:08:23.281] | : . ' exclude = 
[08:08:23.281] | : . ' resignal = FALSE
[08:08:23.282] | : . ' Number of conditions: 6
[08:08:23.282] | : . '  int 6
[08:08:23.283] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.283] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.283] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.283] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.283] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.284] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.284] | : . signalConditions() ... done
[08:08:23.284] | : result() for MulticoreFuture ... done
[08:08:23.284] | : result() for MulticoreFuture ...
[08:08:23.285] | : result() for MulticoreFuture ... done
[08:08:23.285] | : signalConditions() ...
[08:08:23.285] | : . include = ‘immediateCondition’
[08:08:23.285] | : . exclude = 
[08:08:23.285] | : . resignal = FALSE
[08:08:23.286] | : . Number of conditions: 6
[08:08:23.286] | : .  int 6
[08:08:23.286] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.287] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.287] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.287] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.287] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.288] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.288] | : signalConditions() ... done
[08:08:23.288] | : relay stdout ...
[08:08:23.288] | : relay stdout ... done
[08:08:23.288] | : check for misuse ...
[08:08:23.289] | : check for misuse ... done
[08:08:23.289] | value() for MulticoreFuture (<unnamed-45>) ... done
[08:08:23.289] | result() for MulticoreFuture ...
[08:08:23.289] | result() for MulticoreFuture ... done
[08:08:23.289] | signalConditions() ...
[08:08:23.290] | : include = ‘immediateCondition’
[08:08:23.290] | : exclude = 
[08:08:23.290] | : resignal = FALSE
[08:08:23.290] | : Number of conditions: 6
[08:08:23.290] | :  int 6
[08:08:23.291] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.291] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.292] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.292] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.292] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.292] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.292] | signalConditions() ... done
[08:08:23.293] | result() for MulticoreFuture ...
[08:08:23.293] | result() for MulticoreFuture ... done
[08:08:23.293] | signalConditions() ...
[08:08:23.293] | : include = ‘condition’
[08:08:23.281] | : . ' , ; ` | : . List of 2
[08:08:23.281] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.281] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.281] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.281] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:23.281] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.281] | : . ' , ; ` | : .     ...)  
[08:08:23.281] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.281] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.281] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:23.281] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.281] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.281] | : . ' , ; ` | : .     ...)  
[08:08:23.281] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.281] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.281] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.281] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:23.281] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.281] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.281] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.281] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.281] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303c8da40> 
[08:08:23.281] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.281] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.293] | : exclude = ‘error’, ‘immediateCondition’
[08:08:23.294] | : resignal = TRUE
[08:08:23.294] | : Number of conditions: 6
[08:08:23.294] | :  int 6
[08:08:23.294] | : . ' , ; ` | : . Formals differ
[08:08:23.294] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.294] | : . ' , ; ` | : all.equal() for future ... done
[08:08:23.294] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.210] | : . ' , attachPackages() ...
[08:08:23.295] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:23.295] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.295] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:23.295] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.210] | : . ' , ; packages: [n=1] ‘future’
[08:08:23.295] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:23.295] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.295] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.211] | : . ' , attachPackages() ... done
[08:08:23.295] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.295] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.211] | : . ' , attachPackages() ...
[08:08:23.296] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.295] | : . ' , ; ` | List of future strategies:
[08:08:23.295] | : . ' , ; ` | 1. multicore:
[08:08:23.295] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:23.295] | : . ' , ; ` |    - tweaked: FALSE
[08:08:23.295] | : . ' , ; ` |    - call: plan(strategy)
[08:08:23.296] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.211] | : . ' , ; packages: [n=0] 
[08:08:23.296] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.296] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.211] | : . ' , attachPackages() ... done
[08:08:23.296] | signalConditions() ... done
[08:08:23.296] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.296] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.297] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:23.297] value(<MulticoreFuture>, ...) ...
[08:08:23.297] value(<MulticoreFuture>, ...) ... done
[08:08:23.297] value() for MulticoreFuture (<unnamed-45>) ...
[08:08:23.297] | result() for MulticoreFuture ...
[08:08:23.297] | result() for MulticoreFuture ... done
[08:08:23.297] | result() for MulticoreFuture ...
[08:08:23.297] | result() for MulticoreFuture ... done
[08:08:23.297] | signalConditions() ...
[08:08:23.298] | : include = ‘immediateCondition’
[08:08:23.298] | : exclude = 
[08:08:23.298] | : resignal = FALSE
[08:08:23.298] | : Number of conditions: 6
[08:08:23.298] | :  int 6
[08:08:23.299] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.299] | : already signaled, skipping
[08:08:23.299] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.299] | : already signaled, skipping
[08:08:23.299] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.299] | : already signaled, skipping
[08:08:23.299] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.299] | : already signaled, skipping
[08:08:23.300] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.300] | : already signaled, skipping
[08:08:23.300] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.300] | : already signaled, skipping
[08:08:23.300] | signalConditions() ... done
[08:08:23.300] | check for misuse ...
[08:08:23.300] | check for misuse ... done
[08:08:23.300] value() for MulticoreFuture (<unnamed-45>) ... done
[08:08:23.301] value: <numeric>
[08:08:23.301] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:23.301] | nx: 6
[08:08:23.301] | relay: TRUE
[08:08:23.296] | : . ' , ; ` | List of 1
[08:08:23.296] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.296] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.296] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.296] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:23.296] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.296] | : . ' , ; ` |     ...)  
[08:08:23.296] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.296] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.296] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:23.296] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.296] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.296] | : . ' , ; ` |     ...)  
[08:08:23.296] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.296] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.301] | stdout: TRUE
[08:08:23.301] | signal: TRUE
[08:08:23.301] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:23.301] | resignal: FALSE
[08:08:23.301] | force: TRUE
[08:08:23.301] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:23.301] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.302] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.302] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.302] | until=3
[08:08:23.302] | relaying element #3
[08:08:23.302] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.302] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.302] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.302] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:23.302] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:23.302] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:23.302] resolve() for MulticoreFuture ...
[08:08:23.302] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:23.302] resolve() for MulticoreFuture ... done
[08:08:23.302] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:23.303] length: 4 (resolved future 2)

[08:08:23.303] checking value #3:
[08:08:23.303] 'obj' is MulticoreFuture
[08:08:23.303] readImmediateCondition() ...
[08:08:23.303] | Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:23.303] | Number of RDS files: 0
[08:08:23.303] | Returned conditions set:
[08:08:23.304] |  list()
[08:08:23.304] readImmediateCondition() ... done
[08:08:23.304] MulticoreFuture #3
[08:08:23.304] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:23.304] | nx: 6
[08:08:23.304] | relay: TRUE
[08:08:23.304] | stdout: TRUE
[08:08:23.305] | signal: TRUE
[08:08:23.305] | resignal: FALSE
[08:08:23.305] | force: TRUE
[08:08:23.305] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.305] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.305] | until=3
[08:08:23.305] | relaying element #3
[08:08:23.305] | value() for MulticoreFuture (<unnamed-46>) ...
[08:08:23.306] | : result() for MulticoreFuture ...
[08:08:23.306] | : . readImmediateCondition() ...
[08:08:23.306] | : . ' Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:23.306] | : . ' Number of RDS files: 0
[08:08:23.306] | : . ' Returned conditions set:
[08:08:23.307] | : . '  list()
[08:08:23.307] | : . readImmediateCondition() ... done
[08:08:23.307] | : . result() for MulticoreFuture ...
[08:08:23.307] | : . result() for MulticoreFuture ... done
[08:08:23.308] | : . signalConditions() ...
[08:08:23.308] | : . ' include = ‘immediateCondition’
[08:08:23.308] | : . ' exclude = 
[08:08:23.308] | : . ' resignal = FALSE
[08:08:23.308] | : . ' Number of conditions: 6
[08:08:23.308] | : . '  int 6
[08:08:23.309] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.309] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.309] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.309] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.309] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.309] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.309] | : . signalConditions() ... done
[08:08:23.310] | : result() for MulticoreFuture ... done
[08:08:23.310] | : result() for MulticoreFuture ...
[08:08:23.310] | : result() for MulticoreFuture ... done
[08:08:23.310] | : signalConditions() ...
[08:08:23.310] | : . include = ‘immediateCondition’
[08:08:23.310] | : . exclude = 
[08:08:23.310] | : . resignal = FALSE
[08:08:23.310] | : . Number of conditions: 6
[08:08:23.310] | : .  int 6
[08:08:23.311] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.311] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.311] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.311] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.312] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.312] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.312] | : signalConditions() ... done
[08:08:23.312] | : relay stdout ...
[08:08:23.312] | : relay stdout ... done
[08:08:23.312] | : check for misuse ...
[08:08:23.312] | : check for misuse ... done
[08:08:23.312] | value() for MulticoreFuture (<unnamed-46>) ... done
[08:08:23.313] | result() for MulticoreFuture ...
[08:08:23.313] | result() for MulticoreFuture ... done
[08:08:23.313] | signalConditions() ...
[08:08:23.313] | : include = ‘immediateCondition’
[08:08:23.313] | : exclude = 
[08:08:23.313] | : resignal = FALSE
[08:08:23.313] | : Number of conditions: 6
[08:08:23.313] | :  int 6
[08:08:23.314] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.314] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.314] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.314] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.314] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.314] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.315] | signalConditions() ... done
[08:08:23.315] | result() for MulticoreFuture ...
[08:08:23.315] | result() for MulticoreFuture ... done
[08:08:23.315] | signalConditions() ...
[08:08:23.315] | : include = ‘condition’
[08:08:23.315] | : exclude = ‘error’, ‘immediateCondition’
[08:08:23.315] | : resignal = TRUE
[08:08:23.315] | : Number of conditions: 6
[08:08:23.316] | :  int 6
[08:08:23.316] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.316] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.223] | : . ' , attachPackages() ...
[08:08:23.316] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.316] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.224] | : . ' , ; packages: [n=1] ‘future’
[08:08:23.317] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.317] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.224] | : . ' , attachPackages() ... done
[08:08:23.317] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.317] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.224] | : . ' , attachPackages() ...
[08:08:23.317] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.317] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.225] | : . ' , ; packages: [n=0] 
[08:08:23.317] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.318] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.225] | : . ' , attachPackages() ... done
[08:08:23.318] | signalConditions() ... done
[08:08:23.318] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.318] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.318] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:23.318] value(<MulticoreFuture>, ...) ...
[08:08:23.318] value(<MulticoreFuture>, ...) ... done
[08:08:23.318] value() for MulticoreFuture (<unnamed-46>) ...
[08:08:23.319] | result() for MulticoreFuture ...
[08:08:23.319] | result() for MulticoreFuture ... done
[08:08:23.319] | result() for MulticoreFuture ...
[08:08:23.319] | result() for MulticoreFuture ... done
[08:08:23.319] | signalConditions() ...
[08:08:23.319] | : include = ‘immediateCondition’
[08:08:23.319] | : exclude = 
[08:08:23.319] | : resignal = FALSE
[08:08:23.320] | : Number of conditions: 6
[08:08:23.320] | :  int 6
[08:08:23.320] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.320] | : already signaled, skipping
[08:08:23.320] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.320] | : already signaled, skipping
[08:08:23.321] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.321] | : already signaled, skipping
[08:08:23.321] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.321] | : already signaled, skipping
[08:08:23.321] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.321] | : already signaled, skipping
[08:08:23.321] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.321] | : already signaled, skipping
[08:08:23.322] | signalConditions() ... done
[08:08:23.322] | check for misuse ...
[08:08:23.322] | check for misuse ... done
[08:08:23.322] value() for MulticoreFuture (<unnamed-46>) ... done
[08:08:23.324] value: <NULL>
[08:08:23.325] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:23.325] | nx: 6
[08:08:23.325] | relay: TRUE
[08:08:23.325] | stdout: TRUE
[08:08:23.325] | signal: TRUE
[08:08:23.325] | resignal: FALSE
[08:08:23.325] | force: TRUE
[08:08:23.325] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.325] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.325] | until=4
[08:08:23.326] | relaying element #4
[08:08:23.326] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.326] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.326] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:23.326] resolve() for MulticoreFuture ...
[08:08:23.326] resolve() for MulticoreFuture ... done
[08:08:23.326] length: 3 (resolved future 3)

[08:08:23.327] checking value #4:
[08:08:23.327] 'obj' is NULL
[08:08:23.327] signalConditionsASAP(NULL, pos=4) ...
[08:08:23.327] | nx: 6
[08:08:23.327] | relay: TRUE
[08:08:23.327] | stdout: TRUE
[08:08:23.327] | signal: TRUE
[08:08:23.327] | resignal: FALSE
[08:08:23.327] | force: TRUE
[08:08:23.328] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.328] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.328] | until=5
[08:08:23.328] | relaying element #5
[08:08:23.328] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:23.328] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.328] signalConditionsASAP(NULL, pos=4) ... done
[08:08:23.328] signalConditionsASAP(NULL, pos=4) ...
[08:08:23.328] | nx: 6
[08:08:23.329] | relay: TRUE
[08:08:23.329] | stdout: TRUE
[08:08:23.329] | signal: TRUE
[08:08:23.329] | resignal: FALSE
[08:08:23.329] | force: TRUE
[08:08:23.329] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:23.329] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.329] | until=5
[08:08:23.329] | relaying element #5
[08:08:23.330] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:23.330] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.330] signalConditionsASAP(NULL, pos=4) ... done
[08:08:23.330] length: 2 (resolved future 4)

[08:08:23.330] checking value #5:
[08:08:23.330] 'obj' is NULL
[08:08:23.330] signalConditionsASAP(NULL, pos=5) ...
[08:08:23.330] | nx: 6
[08:08:23.331] | relay: TRUE
[08:08:23.331] | stdout: TRUE
[08:08:23.331] | signal: TRUE
[08:08:23.331] | resignal: FALSE
[08:08:23.331] | force: TRUE
[08:08:23.331] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:23.331] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.331] | until=6
[08:08:23.332] | relaying element #6
[08:08:23.332] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:23.332] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.332] signalConditionsASAP(NULL, pos=5) ... done
[08:08:23.332] signalConditionsASAP(NULL, pos=5) ...
[08:08:23.332] | nx: 6
[08:08:23.332] | relay: TRUE
[08:08:23.332] | stdout: TRUE
[08:08:23.332] | signal: TRUE
[08:08:23.333] | resignal: FALSE
[08:08:23.333] | force: TRUE
[08:08:23.333] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:23.333] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.333] | until=6
[08:08:23.333] | relaying element #6
[08:08:23.333] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:23.333] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.333] signalConditionsASAP(NULL, pos=5) ... done
[08:08:23.334] length: 1 (resolved future 5)

[08:08:23.334] checking value #6:
[08:08:23.334] 'obj' is atomic
[08:08:23.334] signalConditionsASAP(numeric, pos=6) ...
[08:08:23.334] | nx: 6
[08:08:23.334] | relay: TRUE
[08:08:23.334] | stdout: TRUE
[08:08:23.334] | signal: TRUE
[08:08:23.335] | resignal: FALSE
[08:08:23.335] | force: TRUE
[08:08:23.335] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:23.335] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.335] | until=6
[08:08:23.335] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:23.335] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.335] signalConditionsASAP(numeric, pos=6) ... done
[08:08:23.336] length: 0 (resolved future 6)

[08:08:23.336] Relaying remaining futures ...
[08:08:23.336] | signalConditionsASAP(NULL, pos=0) ...
[08:08:23.336] | : nx: 6
[08:08:23.336] | : relay: TRUE
[08:08:23.336] | : stdout: TRUE
[08:08:23.336] | : signal: TRUE
[08:08:23.337] | : resignal: FALSE
[08:08:23.337] | : force: TRUE
[08:08:23.337] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:23.337] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
 - flush all
[08:08:23.337] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:23.337] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.337] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:23.337] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 2 3
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
Dimensions: c(2, 3, 1)
[08:08:23.342] future(..., label = NULL) ...
[08:08:23.342] | lazy: FALSE
[08:08:23.342] | stdout: TRUE
[08:08:23.342] | conditions: [n=1] ‘condition’
[08:08:23.342] | gc: FALSE
[08:08:23.342] | earlySignal: FALSE
[08:08:23.342] | getGlobalsAndPackages() ...
[08:08:23.342] | : Searching for globals ...
[08:08:23.344] | : . globals found: [0] 
[08:08:23.344] | : Searching for globals ... done
[08:08:23.344] | : globals: [0] <none>
[08:08:23.344] | : packages: [0] <none>
[08:08:23.345] | getGlobalsAndPackages() ... done
[08:08:23.345] | run() for ‘Future’ (<unnamed-47>) ...
[08:08:23.345] | : state: ‘created’
[08:08:23.345] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.345] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.345] | : Using MulticoreFutureBackend ...
[08:08:23.346] | : . Number of futures since start: 6 (6 created, 6 launched, 6 finished)
[08:08:23.346] | : . Launching futures ...
[08:08:23.346] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:23.346] | : . ' , getFutureData() ...
[08:08:23.346] | : . ' , ; getFutureCore() ...
[08:08:23.346] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:23.346] | : . ' , ; getFutureCore() ... done
[08:08:23.347] | : . ' , ; getFutureCapture() ...
[08:08:23.347] | : . ' , ; getFutureCapture() ... done
[08:08:23.347] | : . ' , ; getFutureContext() ...
[08:08:23.347] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.347] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:23.347] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.347] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:23.348] | : . ' , ; getFutureContext() ... done
[08:08:23.348] | : . ' , getFutureData() ... done
[08:08:23.348] | : . ' , requestCore(..., workers = 2) ...
[08:08:23.348] | : . ' , requestCore(..., workers = 2) ... done
[08:08:23.350] | : . ' , MulticoreFuture started
[08:08:23.351] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:23.351] | : . Launching futures ... done
[08:08:23.351] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:23.352] | : Using MulticoreFutureBackend ... done
[08:08:23.352] | run() for ‘Future’ (<unnamed-47>) ... done
[08:08:23.352] future(..., label = NULL) ... done
[08:08:23.352] future(..., label = NULL) ...
[08:08:23.353] | lazy: FALSE
[08:08:23.353] | stdout: TRUE
[08:08:23.353] | conditions: [n=1] ‘condition’
[08:08:23.353] | gc: FALSE
[08:08:23.353] | earlySignal: FALSE
[08:08:23.354] | getGlobalsAndPackages() ...
[08:08:23.354] | : Searching for globals ...
[08:08:23.354] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.354] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:23.354] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.355] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:23.355] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:23.355] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:23.356] | : . ' , ; ` | New stack:
[08:08:23.357] | : . globals found: [0] 
[08:08:23.357] | : Searching for globals ... done
[08:08:23.357] | : globals: [0] <none>
[08:08:23.357] | : packages: [0] <none>
[08:08:23.357] | getGlobalsAndPackages() ... done
[08:08:23.358] | run() for ‘Future’ (<unnamed-48>) ...
[08:08:23.358] | : state: ‘created’
[08:08:23.358] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.358] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.359] | : Using MulticoreFutureBackend ...
[08:08:23.359] | : . Number of futures since start: 7 (7 created, 7 launched, 6 finished)
[08:08:23.359] | : . Launching futures ...
[08:08:23.359] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:23.359] | : . ' , getFutureData() ...
[08:08:23.359] | : . ' , ; getFutureCore() ...
[08:08:23.360] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:23.360] | : . ' , ; getFutureCore() ... done
[08:08:23.360] | : . ' , ; getFutureCapture() ...
[08:08:23.356] | : . ' , ; ` | List of 1
[08:08:23.356] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.356] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.356] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:23.356] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.356] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.356] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.356] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.356] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.360] | : . ' , ; getFutureCapture() ... done
[08:08:23.360] | : . ' , ; ` | Old stack:
[08:08:23.360] | : . ' , ; getFutureContext() ...
[08:08:23.360] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.361] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:23.361] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.361] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:23.361] | : . ' , ; getFutureContext() ... done
[08:08:23.361] | : . ' , getFutureData() ... done
[08:08:23.362] | : . ' , requestCore(..., workers = 2) ...
[08:08:23.362] | : . ' , requestCore(..., workers = 2) ... done
[08:08:23.364] | : . ' , MulticoreFuture started
[08:08:23.365] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:23.365] | : . Launching futures ... done
[08:08:23.360] | : . ' , ; ` | List of 1
[08:08:23.360] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.360] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.360] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.360] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:23.360] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.360] | : . ' , ; ` |     ...)  
[08:08:23.360] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.360] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.360] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:23.360] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.360] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.360] | : . ' , ; ` |     ...)  
[08:08:23.360] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.360] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.365] | : . ' , ; ` | Not identical
[08:08:23.365] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:23.366] | : . ' , ; ` | all.equal() for future ...
[08:08:23.366] | : Using MulticoreFutureBackend ... done
[08:08:23.366] | run() for ‘Future’ (<unnamed-48>) ... done
[08:08:23.366] future(..., label = NULL) ... done
List of 6
 $ a: num 1
 $ b:[08:08:23.369] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x564300501b40> 
 $ c:[08:08:23.369] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:23.369] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x5642ffd467b8> 
 $  :[08:08:23.370] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
 NULL
 $  :[08:08:23.370] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:23.371] | : . ' , ; ` all.equal() for FutureStrategyList ...
 NULL
 $  :[08:08:23.371] | : . ' , ; ` | New stack:
 num 6
List of 6
 $ a: num 1
 $ b:[08:08:23.366] | : . ' , ; ` | : List of 2
[08:08:23.366] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.366] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.366] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:23.366] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.366] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.366] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.366] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.366] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.366] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.366] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.366] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:23.366] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.366] | : . ' , ; ` | :     ...)  
[08:08:23.366] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.366] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.366] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:23.366] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.366] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.366] | : . ' , ; ` | :     ...)  
[08:08:23.366] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x564300501b40> 
 $ c:[08:08:23.374] | : . ' , ; ` | : Formals differ
Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' [08:08:23.374] | : . ' , ; ` | all.equal() for future ... done
<environment: 0x5642ffd467b8> 
 $  :[08:08:23.374] | : . ' , ; ` | Future strategies differ at level 1
[08:08:23.374] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:23.374] | : . ' , ; ` plan(): Setting new future backend stack:
 NULL
 $  : NULL
 $  :[08:08:23.375] | : . ' , ; ` List of future strategies:
[08:08:23.375] | : . ' , ; ` 1. sequential:
[08:08:23.375] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:23.375] | : . ' , ; `    - tweaked: FALSE
[08:08:23.375] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
 num 6
 - attr(*, "dim")= int [1:3] 2 3 1
 - attr(*, "dimnames")=[08:08:23.371] | : . ' , ; ` | List of 1
[08:08:23.371] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.371] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.371] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:23.371] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.371] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.371] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.371] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.371] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.377] | : . ' , ; ` | Old stack:
List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ :[08:08:23.375] | : . ' , ; ` List of 1
[08:08:23.375] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.375] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.375] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:23.375] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.375] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.375] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.375] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.375] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
 chr "a"
[08:08:23.379] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:23.379] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:23.379] resolved() for array ...
[08:08:23.379] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.379] | Number of elements: 6
[08:08:23.380] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:23.380] | Number of futures: 6
[08:08:23.380] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.380] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.380] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:23.380] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.380] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.380] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.380] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.383] | : . ' , ; ` | : init: TRUE
[08:08:23.377] | : . ' , ; ` | List of 1
[08:08:23.377] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.377] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.377] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.377] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:23.377] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.377] | : . ' , ; ` |     ...)  
[08:08:23.377] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.377] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.377] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:23.377] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.377] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.377] | : . ' , ; ` |     ...)  
[08:08:23.377] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.377] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.383] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:23.383] | : . ' , ; ` | Not identical
[08:08:23.383] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:23.383] | : . ' , ; ` | all.equal() for future ...
[08:08:23.383] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:23.383] | : . ' , ; ` | : .  list()
[08:08:23.384] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:23.384] | : . ' , ; ` | : .  list()
[08:08:23.384] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:23.384] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:23.384] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:23.384] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:23.386] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:23.386] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:23.386] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:23.386] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.387] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:23.387] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:23.387] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:23.390] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:23.390] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:23.390] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:23.390] | readImmediateCondition() ...
[08:08:23.390] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:23.390] | : Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:23.391] | : . ' , ; ` | : New stack:
[08:08:23.383] | : . ' , ; ` | : List of 2
[08:08:23.383] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.383] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.383] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:23.383] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.383] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.383] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.383] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.383] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.383] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.383] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.383] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:23.383] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.383] | : . ' , ; ` | :     ...)  
[08:08:23.383] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.383] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.383] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:23.383] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.383] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.383] | : . ' , ; ` | :     ...)  
[08:08:23.383] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.391] | : Number of RDS files: 0
[08:08:23.391] | : Returned conditions set:
[08:08:23.391] | :  list()
[08:08:23.392] | readImmediateCondition() ... done
[08:08:23.392] | : . ' , ; ` | : Formals differ
[08:08:23.392] | : . ' , ; ` | all.equal() for future ... done
[08:08:23.392] | : . ' , ; ` | Future strategies differ at level 1
[08:08:23.392] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:23.393] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:23.393] | : . ' , ; ` List of future strategies:
[08:08:23.393] | : . ' , ; ` 1. sequential:
[08:08:23.393] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:23.393] | : . ' , ; `    - tweaked: FALSE
[08:08:23.393] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.391] | : . ' , ; ` | : List of 1
[08:08:23.391] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.391] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.391] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.391] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:23.391] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.391] | : . ' , ; ` | :     ...)  
[08:08:23.391] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.391] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.391] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:23.391] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.391] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.391] | : . ' , ; ` | :     ...)  
[08:08:23.391] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.391] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.395] | : . ' , ; ` | : Old stack:
[08:08:23.393] | : . ' , ; ` List of 1
[08:08:23.393] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.393] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.393] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:23.393] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.393] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.393] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.393] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.393] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.397] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:23.397] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:23.397] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.398] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:23.395] | : . ' , ; ` | : List of 1
[08:08:23.395] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.395] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.395] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:23.395] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.395] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.395] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.395] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.395] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303a41dd8> 
[08:08:23.395] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.395] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.395] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.400] | : . ' , ; ` | : Not identical
[08:08:23.400] | : . ' , ; ` | : all.equal() for future ...
[08:08:23.398] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.398] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.398] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:23.398] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.398] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.398] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.398] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.401] | : . ' , ; ` | : init: TRUE
[08:08:23.401] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:23.401] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:23.401] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:23.401] | : . ' , ; ` | : .  list()
[08:08:23.402] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:23.402] | : . ' , ; ` | : .  list()
[08:08:23.402] | readImmediateCondition() ...
[08:08:23.402] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:23.402] | : Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:23.403] | : Number of RDS files: 0
[08:08:23.403] | : Returned conditions set:
[08:08:23.403] | :  list()
[08:08:23.404] | readImmediateCondition() ... done
[08:08:23.404] resolved() for array ... done
[08:08:23.402] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:23.402] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:23.402] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
 logi [1:2, 1:3, 1] TRUE FALSE FALSE TRUE TRUE TRUE
 - attr(*, "dimnames")=List of [08:08:23.405] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
3
  ..$ :[08:08:23.405] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:23.405] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
 chr [1:2] "a" "b"
  ..$ :[08:08:23.405] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.406] | : . ' , ; ` plan(): nbrOfWorkers() = 1
 chr [1:3] "a" "b" "c"
  ..$ :[08:08:23.406] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:23.406] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
 chr "a"
 - attr(*, "names")= chr [1:6] "a" "b" "c" "" ...
[08:08:23.400] | : . ' , ; ` | : . List of 2
[08:08:23.400] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.400] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.400] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.400] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:23.400] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.400] | : . ' , ; ` | : .     ...)  
[08:08:23.400] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.400] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.400] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:23.400] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.400] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores([08:08:23.407] value() for array ...
constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.400] | : . ' , ; ` | : .     ...)  
[08:08:23.400] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.400] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.400] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.400] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:23.400] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.400] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.400] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.400] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.400] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303a41dd8> 
[08:08:23.400] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.400] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.408] | recursive: 0
[08:08:23.408] | reduce: FALSE
[08:08:23.408] | : . ' , ; ` | : . Formals differ
[08:08:23.408] | : . ' , ; ` | : all.equal() for future ... done
[08:08:23.408] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:23.408] | length: 6
[08:08:23.409] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:23.409] | elements: ‘a’, ‘b’, ‘c’, ‘’, ‘’, ‘’
[08:08:23.409] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:23.409] | Number of remaining objects: 6
[08:08:23.409] | checking value #1:
[08:08:23.409] | : . ' , ; ` | List of future strategies:
[08:08:23.409] | : . ' , ; ` | 1. multicore:
[08:08:23.409] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:23.409] | : . ' , ; ` |    - tweaked: FALSE
[08:08:23.409] | : . ' , ; ` |    - call: plan(strategy)
[08:08:23.409] | 'obj' is atomic
[08:08:23.409] | signalConditionsASAP(numeric, pos=1) ...
[08:08:23.410] | : nx: 6
[08:08:23.410] | : relay: TRUE
[08:08:23.410] | : stdout: TRUE
[08:08:23.410] | : signal: TRUE
[08:08:23.410] | : resignal: FALSE
[08:08:23.411] | : force: TRUE
[08:08:23.411] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:23.411] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:23.411] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:23.411] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:23.411] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:23.411] | : until=2
[08:08:23.411] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:23.411] | : relaying element #2
[08:08:23.412] | : . ' , ; ` | : New stack:
[08:08:23.412] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:23.412] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:23.412] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:23.412] | length: 5 (resolved future 1)
[08:08:23.413] value() for array ... done
[08:08:23.413] checking value #2:
[08:08:23.413] 'obj' is MulticoreFuture
[08:08:23.409] | : . ' , ; ` | List of 1
[08:08:23.409] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.409] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.409] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.409] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:23.409] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.409] | : . ' , ; ` |     ...)  
[08:08:23.409] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.409] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.409] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:23.409] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.409] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.409] | : . ' , ; ` |     ...)  
[08:08:23.409] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.409] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.414] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:23.414] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:23.414] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.414] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.415] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:23.415] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:23.415] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:23.415] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:23.415] readImmediateCondition() ...
[08:08:23.416] | Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:23.416] | Number of RDS files: 0
[08:08:23.416] | Returned conditions set:
[08:08:23.416] |  list()
[08:08:23.417] readImmediateCondition() ... done
[08:08:23.417] MulticoreFuture #2
[08:08:23.417] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:23.417] | nx: 6
[08:08:23.412] | : . ' , ; ` | : List of 1
[08:08:23.412] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.412] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.412] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.412] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:23.412] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.412] | : . ' , ; ` | :     ...)  
[08:08:23.412] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.412] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.412] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:23.412] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.412] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.412] | : . ' , ; ` | :     ...)  
[08:08:23.412] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.412] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.418] | relay: TRUE
[08:08:23.418] | stdout: TRUE
[08:08:23.418] | : . ' , ; ` | : Old stack:
[08:08:23.418] | signal: TRUE
[08:08:23.418] | resignal: FALSE
[08:08:23.418] | force: TRUE
[08:08:23.418] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:23.419] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:23.419] | until=2
[08:08:23.419] | relaying element #2
[08:08:23.419] | value() for MulticoreFuture (<unnamed-47>) ...
[08:08:23.420] | : result() for MulticoreFuture ...
[08:08:23.420] | : . readImmediateCondition() ...
[08:08:23.421] | : . ' Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:23.421] | : . ' Number of RDS files: 0
[08:08:23.421] | : . ' Returned conditions set:
[08:08:23.421] | : . '  list()
[08:08:23.422] | : . readImmediateCondition() ... done
[08:08:23.422] | : . result() for MulticoreFuture ...
[08:08:23.423] | : . result() for MulticoreFuture ... done
[08:08:23.423] | : . signalConditions() ...
[08:08:23.423] | : . ' include = ‘immediateCondition’
[08:08:23.423] | : . ' exclude = 
[08:08:23.424] | : . ' resignal = FALSE
[08:08:23.424] | : . ' Number of conditions: 6
[08:08:23.424] | : . '  int 6
[08:08:23.425] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.418] | : . ' , ; ` | : List of 1
[08:08:23.418] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.418] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.418] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:23.418] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.418] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.418] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.418] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.418] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303ce0e70> 
[08:08:23.418] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.418] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.418] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.425] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.425] | : . ' , ; ` | : Not identical
[08:08:23.425] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.425] | : . ' , ; ` | : all.equal() for future ...
[08:08:23.425] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.426] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.426] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.426] | : . signalConditions() ... done
[08:08:23.426] | : result() for MulticoreFuture ... done
[08:08:23.427] | : result() for MulticoreFuture ...
[08:08:23.427] | : result() for MulticoreFuture ... done
[08:08:23.427] | : signalConditions() ...
[08:08:23.427] | : . include = ‘immediateCondition’
[08:08:23.427] | : . exclude = 
[08:08:23.427] | : . resignal = FALSE
[08:08:23.428] | : . Number of conditions: 6
[08:08:23.428] | : .  int 6
[08:08:23.429] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.429] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.429] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.429] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.429] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.430] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.430] | : signalConditions() ... done
[08:08:23.430] | : relay stdout ...
[08:08:23.430] | : relay stdout ... done
[08:08:23.430] | : check for misuse ...
[08:08:23.431] | : check for misuse ... done
[08:08:23.431] | value() for MulticoreFuture (<unnamed-47>) ... done
[08:08:23.431] | result() for MulticoreFuture ...
[08:08:23.431] | result() for MulticoreFuture ... done
[08:08:23.431] | signalConditions() ...
[08:08:23.431] | : include = ‘immediateCondition’
[08:08:23.431] | : exclude = 
[08:08:23.432] | : resignal = FALSE
[08:08:23.432] | : Number of conditions: 6
[08:08:23.432] | :  int 6
[08:08:23.432] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.432] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.433] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.433] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.433] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.433] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.433] | signalConditions() ... done
[08:08:23.433] | result() for MulticoreFuture ...
[08:08:23.433] | result() for MulticoreFuture ... done
[08:08:23.433] | signalConditions() ...
[08:08:23.434] | : include = ‘condition’
[08:08:23.434] | : exclude = ‘error’, ‘immediateCondition’
[08:08:23.434] | : resignal = TRUE
[08:08:23.434] | : Number of conditions: 6
[08:08:23.434] | :  int 6
[08:08:23.434] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.435] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.351] | : . ' , attachPackages() ...
[08:08:23.435] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.435] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.352] | : . ' , ; packages: [n=1] ‘future’
[08:08:23.435] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.435] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.352] | : . ' , attachPackages() ... done
[08:08:23.435] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.436] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.353] | : . ' , attachPackages() ...
[08:08:23.425] | : . ' , ; ` | : . List of 2
[08:08:23.425] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.425] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.425] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.425] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:23.425] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.425] | : . ' , ; ` | : .     ...)  
[08:08:23.425] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.425] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.425] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:23.425] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.425] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.425] | : . ' , ; ` | : .     ...)  
[08:08:23.425] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.425] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.425] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.425] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:23.425] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.425] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.425] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.425] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.425] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303ce0e70> 
[08:08:23.425] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.425] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.436] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.436] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.353] | : . ' , ; packages: [n=0] 
[08:08:23.436] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.436] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.353] | : . ' , attachPackages() ... done
[08:08:23.436] | signalConditions() ... done
[08:08:23.436] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.436] | : . ' , ; ` | : . Formals differ
[08:08:23.437] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.437] | : . ' , ; ` | : all.equal() for future ... done
[08:08:23.437] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:23.437] value(<MulticoreFuture>, ...) ...
[08:08:23.437] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:23.437] value(<MulticoreFuture>, ...) ... done
[08:08:23.437] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:23.437] value() for MulticoreFuture (<unnamed-47>) ...
[08:08:23.437] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:23.437] | result() for MulticoreFuture ...
[08:08:23.437] | result() for MulticoreFuture ... done
[08:08:23.437] | result() for MulticoreFuture ...
[08:08:23.438] | result() for MulticoreFuture ... done
[08:08:23.438] | signalConditions() ...
[08:08:23.437] | : . ' , ; ` | List of future strategies:
[08:08:23.437] | : . ' , ; ` | 1. multicore:
[08:08:23.437] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:23.437] | : . ' , ; ` |    - tweaked: FALSE
[08:08:23.437] | : . ' , ; ` |    - call: plan(strategy)
[08:08:23.438] | : include = ‘immediateCondition’
[08:08:23.438] | : exclude = 
[08:08:23.438] | : resignal = FALSE
[08:08:23.438] | : Number of conditions: 6
[08:08:23.438] | :  int 6
[08:08:23.439] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.439] | : already signaled, skipping
[08:08:23.439] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.439] | : already signaled, skipping
[08:08:23.439] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.439] | : already signaled, skipping
[08:08:23.439] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.440] | : already signaled, skipping
[08:08:23.440] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.440] | : already signaled, skipping
[08:08:23.440] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.440] | : already signaled, skipping
[08:08:23.440] | signalConditions() ... done
[08:08:23.440] | check for misuse ...
[08:08:23.440] | check for misuse ... done
[08:08:23.441] value() for MulticoreFuture (<unnamed-47>) ... done
[08:08:23.441] value: <numeric>
[08:08:23.441] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:23.441] | nx: 6
[08:08:23.441] | relay: TRUE
[08:08:23.441] | stdout: TRUE
[08:08:23.441] | signal: TRUE
[08:08:23.441] | resignal: FALSE
[08:08:23.441] | force: TRUE
[08:08:23.441] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.442] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.442] | until=3
[08:08:23.442] | relaying element #3
[08:08:23.442] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.442] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.442] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:23.442] resolve() for MulticoreFuture ...
[08:08:23.442] resolve() for MulticoreFuture ... done
[08:08:23.443] length: 4 (resolved future 2)

[08:08:23.443] checking value #3:
[08:08:23.443] 'obj' is MulticoreFuture
[08:08:23.438] | : . ' , ; ` | List of 1
[08:08:23.438] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.438] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.438] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.438] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:23.438] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.438] | : . ' , ; ` |     ...)  
[08:08:23.438] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.438] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.438] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:23.438] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.438] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.438] | : . ' , ; ` |     ...)  
[08:08:23.438] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.438] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.443] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:23.443] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:23.444] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.444] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.444] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:23.444] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:23.444] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:23.445] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:23.445] readImmediateCondition() ...
[08:08:23.445] | Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:23.445] | Number of RDS files: 0
[08:08:23.445] | Returned conditions set:
[08:08:23.445] |  list()
[08:08:23.446] readImmediateCondition() ... done
[08:08:23.446] MulticoreFuture #3
[08:08:23.446] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:23.446] | nx: 6
[08:08:23.446] | relay: TRUE
[08:08:23.446] | stdout: TRUE
[08:08:23.446] | signal: TRUE
[08:08:23.447] | resignal: FALSE
[08:08:23.447] | force: TRUE
[08:08:23.447] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.447] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.447] | until=3
[08:08:23.447] | relaying element #3
[08:08:23.447] | value() for MulticoreFuture (<unnamed-48>) ...
[08:08:23.447] | : result() for MulticoreFuture ...
[08:08:23.448] | : . readImmediateCondition() ...
[08:08:23.448] | : . ' Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:23.448] | : . ' Number of RDS files: 0
[08:08:23.448] | : . ' Returned conditions set:
[08:08:23.449] | : . '  list()
[08:08:23.449] | : . readImmediateCondition() ... done
[08:08:23.449] | : . result() for MulticoreFuture ...
[08:08:23.449] | : . result() for MulticoreFuture ... done
[08:08:23.449] | : . signalConditions() ...
[08:08:23.450] | : . ' include = ‘immediateCondition’
[08:08:23.450] | : . ' exclude = 
[08:08:23.450] | : . ' resignal = FALSE
[08:08:23.450] | : . ' Number of conditions: 6
[08:08:23.450] | : . '  int 6
[08:08:23.450] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.451] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.451] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.451] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.451] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.451] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.451] | : . signalConditions() ... done
[08:08:23.451] | : result() for MulticoreFuture ... done
[08:08:23.452] | : result() for MulticoreFuture ...
[08:08:23.452] | : result() for MulticoreFuture ... done
[08:08:23.452] | : signalConditions() ...
[08:08:23.452] | : . include = ‘immediateCondition’
[08:08:23.452] | : . exclude = 
[08:08:23.452] | : . resignal = FALSE
[08:08:23.452] | : . Number of conditions: 6
[08:08:23.452] | : .  int 6
[08:08:23.453] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.453] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.453] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.453] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.453] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.454] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.454] | : signalConditions() ... done
[08:08:23.454] | : relay stdout ...
[08:08:23.454] | : relay stdout ... done
[08:08:23.454] | : check for misuse ...
[08:08:23.454] | : check for misuse ... done
[08:08:23.454] | value() for MulticoreFuture (<unnamed-48>) ... done
[08:08:23.454] | result() for MulticoreFuture ...
[08:08:23.455] | result() for MulticoreFuture ... done
[08:08:23.455] | signalConditions() ...
[08:08:23.455] | : include = ‘immediateCondition’
[08:08:23.455] | : exclude = 
[08:08:23.455] | : resignal = FALSE
[08:08:23.455] | : Number of conditions: 6
[08:08:23.455] | :  int 6
[08:08:23.456] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.456] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.456] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.456] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.456] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.456] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.456] | signalConditions() ... done
[08:08:23.457] | result() for MulticoreFuture ...
[08:08:23.457] | result() for MulticoreFuture ... done
[08:08:23.457] | signalConditions() ...
[08:08:23.457] | : include = ‘condition’
[08:08:23.457] | : exclude = ‘error’, ‘immediateCondition’
[08:08:23.457] | : resignal = TRUE
[08:08:23.457] | : Number of conditions: 6
[08:08:23.457] | :  int 6
[08:08:23.458] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.458] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.365] | : . ' , attachPackages() ...
[08:08:23.458] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.458] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.366] | : . ' , ; packages: [n=1] ‘future’
[08:08:23.458] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.459] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.367] | : . ' , attachPackages() ... done
[08:08:23.459] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.459] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.367] | : . ' , attachPackages() ...
[08:08:23.459] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.459] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.367] | : . ' , ; packages: [n=0] 
[08:08:23.459] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.459] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.367] | : . ' , attachPackages() ... done
[08:08:23.460] | signalConditions() ... done
[08:08:23.460] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.460] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.460] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:23.460] value(<MulticoreFuture>, ...) ...
[08:08:23.460] value(<MulticoreFuture>, ...) ... done
[08:08:23.460] value() for MulticoreFuture (<unnamed-48>) ...
[08:08:23.460] | result() for MulticoreFuture ...
[08:08:23.461] | result() for MulticoreFuture ... done
[08:08:23.461] | result() for MulticoreFuture ...
[08:08:23.461] | result() for MulticoreFuture ... done
[08:08:23.461] | signalConditions() ...
[08:08:23.461] | : include = ‘immediateCondition’
[08:08:23.461] | : exclude = 
[08:08:23.461] | : resignal = FALSE
[08:08:23.461] | : Number of conditions: 6
[08:08:23.461] | :  int 6
[08:08:23.462] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.462] | : already signaled, skipping
[08:08:23.462] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.465] | : already signaled, skipping
[08:08:23.465] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.465] | : already signaled, skipping
[08:08:23.465] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.465] | : already signaled, skipping
[08:08:23.465] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.465] | : already signaled, skipping
[08:08:23.465] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.465] | : already signaled, skipping
[08:08:23.466] | signalConditions() ... done
[08:08:23.466] | check for misuse ...
[08:08:23.466] | check for misuse ... done
[08:08:23.466] value() for MulticoreFuture (<unnamed-48>) ... done
[08:08:23.466] value: <NULL>
[08:08:23.466] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:23.466] | nx: 6
[08:08:23.466] | relay: TRUE
[08:08:23.466] | stdout: TRUE
[08:08:23.467] | signal: TRUE
[08:08:23.467] | resignal: FALSE
[08:08:23.467] | force: TRUE
[08:08:23.467] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.467] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.467] | until=4
[08:08:23.467] | relaying element #4
[08:08:23.467] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.467] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.468] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:23.468] resolve() for MulticoreFuture ...
[08:08:23.468] resolve() for MulticoreFuture ... done
[08:08:23.468] length: 3 (resolved future 3)

[08:08:23.468] checking value #4:
[08:08:23.468] 'obj' is NULL
[08:08:23.468] signalConditionsASAP(NULL, pos=4) ...
[08:08:23.469] | nx: 6
[08:08:23.469] | relay: TRUE
[08:08:23.469] | stdout: TRUE
[08:08:23.469] | signal: TRUE
[08:08:23.469] | resignal: FALSE
[08:08:23.469] | force: TRUE
[08:08:23.469] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.469] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.469] | until=5
[08:08:23.469] | relaying element #5
[08:08:23.470] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:23.470] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.470] signalConditionsASAP(NULL, pos=4) ... done
[08:08:23.470] signalConditionsASAP(NULL, pos=4) ...
[08:08:23.470] | nx: 6
[08:08:23.470] | relay: TRUE
[08:08:23.470] | stdout: TRUE
[08:08:23.470] | signal: TRUE
[08:08:23.470] | resignal: FALSE
[08:08:23.471] | force: TRUE
[08:08:23.471] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:23.471] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.471] | until=5
[08:08:23.471] | relaying element #5
[08:08:23.471] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:23.471] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.471] signalConditionsASAP(NULL, pos=4) ... done
[08:08:23.472] length: 2 (resolved future 4)

[08:08:23.472] checking value #5:
[08:08:23.472] 'obj' is NULL
[08:08:23.472] signalConditionsASAP(NULL, pos=5) ...
[08:08:23.472] | nx: 6
[08:08:23.472] | relay: TRUE
[08:08:23.472] | stdout: TRUE
[08:08:23.473] | signal: TRUE
[08:08:23.473] | resignal: FALSE
[08:08:23.473] | force: TRUE
[08:08:23.473] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:23.473] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.473] | until=6
[08:08:23.473] | relaying element #6
[08:08:23.473] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:23.473] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.474] signalConditionsASAP(NULL, pos=5) ... done
[08:08:23.474] signalConditionsASAP(NULL, pos=5) ...
[08:08:23.474] | nx: 6
[08:08:23.474] | relay: TRUE
[08:08:23.474] | stdout: TRUE
[08:08:23.474] | signal: TRUE
[08:08:23.474] | resignal: FALSE
[08:08:23.474] | force: TRUE
[08:08:23.474] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:23.474] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.475] | until=6
[08:08:23.475] | relaying element #6
[08:08:23.475] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:23.475] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.475] signalConditionsASAP(NULL, pos=5) ... done
[08:08:23.475] length: 1 (resolved future 5)

[08:08:23.475] checking value #6:
[08:08:23.476] 'obj' is atomic
[08:08:23.476] signalConditionsASAP(numeric, pos=6) ...
[08:08:23.476] | nx: 6
[08:08:23.476] | relay: TRUE
[08:08:23.476] | stdout: TRUE
[08:08:23.476] | signal: TRUE
[08:08:23.476] | resignal: FALSE
[08:08:23.476] | force: TRUE
[08:08:23.476] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:23.477] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.477] | until=6
[08:08:23.477] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:23.477] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.477] signalConditionsASAP(numeric, pos=6) ... done
[08:08:23.477] length: 0 (resolved future 6)

[08:08:23.477] Relaying remaining futures ...
[08:08:23.477] | signalConditionsASAP(NULL, pos=0) ...
[08:08:23.478] | : nx: 6
[08:08:23.478] | : relay: TRUE
[08:08:23.478] | : stdout: TRUE
[08:08:23.478] | : signal: TRUE
[08:08:23.478] | : resignal: FALSE
[08:08:23.478] | : force: TRUE
[08:08:23.478] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:23.478] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
 - flush all
[08:08:23.479] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:23.479] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.479] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:23.479] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:3] 2 3 1
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
Dimensions: c(2, 1, 3, 1)
[08:08:23.483] future(..., label = NULL) ...
[08:08:23.483] | lazy: FALSE
[08:08:23.484] | stdout: TRUE
[08:08:23.484] | conditions: [n=1] ‘condition’
[08:08:23.484] | gc: FALSE
[08:08:23.484] | earlySignal: FALSE
[08:08:23.484] | getGlobalsAndPackages() ...
[08:08:23.484] | : Searching for globals ...
[08:08:23.486] | : . globals found: [0] 
[08:08:23.486] | : Searching for globals ... done
[08:08:23.486] | : globals: [0] <none>
[08:08:23.486] | : packages: [0] <none>
[08:08:23.486] | getGlobalsAndPackages() ... done
[08:08:23.487] | run() for ‘Future’ (<unnamed-49>) ...
[08:08:23.487] | : state: ‘created’
[08:08:23.487] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.487] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.487] | : Using MulticoreFutureBackend ...
[08:08:23.487] | : . Number of futures since start: 8 (8 created, 8 launched, 8 finished)
[08:08:23.488] | : . Launching futures ...
[08:08:23.488] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:23.488] | : . ' , getFutureData() ...
[08:08:23.488] | : . ' , ; getFutureCore() ...
[08:08:23.488] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:23.488] | : . ' , ; getFutureCore() ... done
[08:08:23.488] | : . ' , ; getFutureCapture() ...
[08:08:23.489] | : . ' , ; getFutureCapture() ... done
[08:08:23.489] | : . ' , ; getFutureContext() ...
[08:08:23.489] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.489] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:23.489] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.489] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:23.490] | : . ' , ; getFutureContext() ... done
[08:08:23.490] | : . ' , getFutureData() ... done
[08:08:23.490] | : . ' , requestCore(..., workers = 2) ...
[08:08:23.490] | : . ' , requestCore(..., workers = 2) ... done
[08:08:23.492] | : . ' , MulticoreFuture started
[08:08:23.493] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:23.493] | : . Launching futures ... done
[08:08:23.493] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:23.494] | : Using MulticoreFutureBackend ... done
[08:08:23.494] | run() for ‘Future’ (<unnamed-49>) ... done
[08:08:23.494] future(..., label = NULL) ... done
[08:08:23.494] future(..., label = NULL) ...
[08:08:23.494] | lazy: FALSE
[08:08:23.495] | stdout: TRUE
[08:08:23.495] | conditions: [n=1] ‘condition’
[08:08:23.495] | gc: FALSE
[08:08:23.495] | earlySignal: FALSE
[08:08:23.495] | getGlobalsAndPackages() ...
[08:08:23.495] | : Searching for globals ...
[08:08:23.496] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.496] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:23.496] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.496] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:23.497] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:23.497] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:23.497] | : . ' , ; ` | New stack:
[08:08:23.498] | : . globals found: [0] 
[08:08:23.498] | : Searching for globals ... done
[08:08:23.498] | : globals: [0] <none>
[08:08:23.499] | : packages: [0] <none>
[08:08:23.499] | getGlobalsAndPackages() ... done
[08:08:23.499] | run() for ‘Future’ (<unnamed-50>) ...
[08:08:23.499] | : state: ‘created’
[08:08:23.500] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.500] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.500] | : Using MulticoreFutureBackend ...
[08:08:23.500] | : . Number of futures since start: 9 (9 created, 9 launched, 8 finished)
[08:08:23.500] | : . Launching futures ...
[08:08:23.500] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:23.501] | : . ' , getFutureData() ...
[08:08:23.501] | : . ' , ; getFutureCore() ...
[08:08:23.501] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:23.501] | : . ' , ; getFutureCore() ... done
[08:08:23.501] | : . ' , ; getFutureCapture() ...
[08:08:23.501] | : . ' , ; getFutureCapture() ... done
[08:08:23.497] | : . ' , ; ` | List of 1
[08:08:23.497] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.497] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.497] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:23.497] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.497] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.497] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.497] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.497] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.502] | : . ' , ; ` | Old stack:
[08:08:23.502] | : . ' , ; getFutureContext() ...
[08:08:23.502] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.502] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:23.502] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.502] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:23.502] | : . ' , ; getFutureContext() ... done
[08:08:23.503] | : . ' , getFutureData() ... done
[08:08:23.503] | : . ' , requestCore(..., workers = 2) ...
[08:08:23.503] | : . ' , requestCore(..., workers = 2) ... done
[08:08:23.505] | : . ' , MulticoreFuture started
[08:08:23.506] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:23.506] | : . Launching futures ... done
[08:08:23.502] | : . ' , ; ` | List of 1
[08:08:23.502] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.502] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.502] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.502] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:23.502] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.502] | : . ' , ; ` |     ...)  
[08:08:23.502] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.502] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.502] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:23.502] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.502] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.502] | : . ' , ; ` |     ...)  
[08:08:23.502] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.502] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.507] | : . ' , ; ` | Not identical
[08:08:23.507] | : . ' , ; ` | all.equal() for future ...
[08:08:23.507] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:23.507] | : Using MulticoreFutureBackend ... done
[08:08:23.507] | run() for ‘Future’ (<unnamed-50>) ... done
[08:08:23.508] future(..., label = NULL) ... done
List of 6
 $ a: num 1
 $ b:[08:08:23.510] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x564300b495f8> 
[08:08:23.510] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
 $ c:[08:08:23.511] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x564302fa41c0> [08:08:23.511] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...

 $  :[08:08:23.512] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
 NULL
 $  :[08:08:23.512] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:23.512] | : . ' , ; ` | New stack:
 NULL
 $  : num 6
List of 6
 $ a:[08:08:23.507] | : . ' , ; ` | : List of 2
[08:08:23.507] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.507] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.507] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:23.507] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.507] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.507] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.507] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.507] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.507] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.507] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.507] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:23.507] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.507] | : . ' , ; ` | :     ...)  
[08:08:23.507] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.507] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.507] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:23.507] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.507] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.507] | : . ' , ; ` | :     ...)  
[08:08:23.507] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
 num 1
 $ b:Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' <environment: 0x564300b495f8> 
 $ c:[08:08:23.515] | : . ' , ; ` | : Formals differ
[08:08:23.515] | : . ' , ; ` | all.equal() for future ... done
[08:08:23.515] | : . ' , ; ` | Future strategies differ at level 1
Classes 'MulticoreFuture', 'MultiprocessFuture', 'Future' [08:08:23.515] | : . ' , ; ` all.equal() for FutureStrategyList ... done
<environment: 0x564302fa41c0> 
 $  :[08:08:23.515] | : . ' , ; ` plan(): Setting new future backend stack:
 NULL
 $  :[08:08:23.516] | : . ' , ; ` List of future strategies:
[08:08:23.516] | : . ' , ; ` 1. sequential:
[08:08:23.516] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:23.516] | : . ' , ; `    - tweaked: FALSE
[08:08:23.516] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
 NULL
 $  : num 6
 - attr(*, "dim")= int [1:4] [08:08:23.512] | : . ' , ; ` | List of 1
[08:08:23.512] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envi2 1 3 1r = parent.frame())  
[08:08:23.512] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "funct
ion"
[08:08:23.512] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:23.512] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.512] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.512] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.512] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.512] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
 - attr(*, "dimnames")=[08:08:23.518] | : . ' , ; ` | Old stack:
List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ :[08:08:23.516] | : . ' , ; ` List of 1
[08:08:23.516] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.516] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.516] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:23.516] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.516] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.516] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.516] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.516] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
 chr [1:3] "a" "b" "c"
  ..$ :[08:08:23.520] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:23.520] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:23.521] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
 chr "a"
[08:08:23.521] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:23.521] resolved() for array ...
[08:08:23.521] | Number of elements: 6
[08:08:23.521] | Number of futures: 6
[08:08:23.521] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.521] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.521] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:23.521] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.521] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.521] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.521] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.524] | : . ' , ; ` | : init: TRUE
[08:08:23.524] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:23.518] | : . ' , ; ` | List of 1
[08:08:23.518] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.518] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.518] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.518] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:23.518] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.518] | : . ' , ; ` |     ...)  
[08:08:23.518] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.518] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.518] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:23.518] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.518] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.518] | : . ' , ; ` |     ...)  
[08:08:23.518] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.518] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.524] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:23.524] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:23.524] | : . ' , ; ` | Not identical
[08:08:23.524] | : . ' , ; ` | all.equal() for future ...
[08:08:23.524] | : . ' , ; ` | : .  list()
[08:08:23.525] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:23.525] | : . ' , ; ` | : .  list()
[08:08:23.525] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:23.525] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:23.525] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:23.525] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:23.527] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:23.527] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:23.527] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:23.527] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.528] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:23.528] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:23.528] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:23.531] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:23.531] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:23.531] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:23.531] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:23.525] | : . ' , ; ` | : List of 2
[08:08:23.525] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.525] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.525] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:23.525] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.525] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.525] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.525] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.525] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.525] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.525] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.525] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:23.525] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.525] | : . ' , ; ` | :     ...)  
[08:08:23.525] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.525] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.525] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:23.525] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.525] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.525] | : . ' , ; ` | :     ...)  
[08:08:23.525] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.532] | : . ' , ; ` | : New stack:
[08:08:23.532] | readImmediateCondition() ...
[08:08:23.532] | : Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:23.533] | : Number of RDS files: 0
[08:08:23.533] | : . ' , ; ` | : Formals differ
[08:08:23.533] | : Returned conditions set:
[08:08:23.533] | : . ' , ; ` | all.equal() for future ... done
[08:08:23.533] | : . ' , ; ` | Future strategies differ at level 1
[08:08:23.533] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:23.533] | :  list()
[08:08:23.533] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:23.533] | readImmediateCondition() ... done
[08:08:23.534] | : . ' , ; ` List of future strategies:
[08:08:23.534] | : . ' , ; ` 1. sequential:
[08:08:23.534] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:23.534] | : . ' , ; `    - tweaked: FALSE
[08:08:23.534] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.532] | : . ' , ; ` | : List of 1
[08:08:23.532] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.532] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.532] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.532] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:23.532] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.532] | : . ' , ; ` | :     ...)  
[08:08:23.532] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.532] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.532] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:23.532] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.532] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.532] | : . ' , ; ` | :     ...)  
[08:08:23.532] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.532] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.536] | : . ' , ; ` | : Old stack:
[08:08:23.534] | : . ' , ; ` List of 1
[08:08:23.534] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.534] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.534] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:23.534] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.534] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.534] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.534] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.534] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.538] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:23.538] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:23.538] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.539] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:23.537] | : . ' , ; ` | : List of 1
[08:08:23.537] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.537] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.537] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:23.537] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.537] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.537] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.537] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.537] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b09388> 
[08:08:23.537] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.537] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.537] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.541] | : . ' , ; ` | : Not identical
[08:08:23.541] | : . ' , ; ` | : all.equal() for future ...
[08:08:23.539] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.539] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.539] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:23.539] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.539] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.539] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.539] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.542] | : . ' , ; ` | : init: TRUE
[08:08:23.542] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:23.542] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:23.542] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:23.542] | : . ' , ; ` | : .  list()
[08:08:23.543] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:23.543] | : . ' , ; ` | : .  list()
[08:08:23.543] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:23.544] | readImmediateCondition() ...
[08:08:23.544] | : Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:23.544] | : Number of RDS files: 0
[08:08:23.545] | : Returned conditions set:
[08:08:23.543] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:23.543] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:23.543] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:23.545] | :  list()
[08:08:23.545] | readImmediateCondition() ... done
[08:08:23.545] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:23.546] resolved() for array ... done
[08:08:23.546] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:23.546] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
 logi [1:2, 1, 1:3, 1] TRUE FALSE FALSE TRUE TRUE TRUE
 - attr(*, "dimnames")=[08:08:23.546] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.546] | : . ' , ; ` plan(): nbrOfWorkers() = 1
List of 4
  ..$ :[08:08:23.547] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:23.547] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
 chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ :[08:08:23.541] | : . ' , ; ` | : . List of 2
[08:08:23.541] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.541] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.541] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.541] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:23.541] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.541] | : . ' , ; ` | : .     ...)  
[08:08:23.541] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.541] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.541] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:23.541] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.541] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.541] | : . ' , ; ` | : .     ...)  
[08:08:23.541] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.541] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.541] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.541] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:23.541] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.541] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.541] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.541] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.541] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b09388> 
[08:08:23.541] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.541] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
 chr "a"
 - attr(*, "names")=[08:08:23.549] | : . ' , ; ` | : . Formals differ
 chr [1:6] "a" "b" "c" "" ...
[08:08:23.550] | : . ' , ; ` | : all.equal() for future ... done
[08:08:23.550] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:23.550] value() for array ...
[08:08:23.550] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:23.550] | recursive: 0
[08:08:23.550] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:23.550] | reduce: FALSE
[08:08:23.550] | : . ' , ; ` | List of future strategies:
[08:08:23.550] | : . ' , ; ` | 1. multicore:
[08:08:23.550] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:23.550] | : . ' , ; ` |    - tweaked: FALSE
[08:08:23.550] | : . ' , ; ` |    - call: plan(strategy)
[08:08:23.551] | length: 6
[08:08:23.551] | elements: ‘a’, ‘b’, ‘c’, ‘’, ‘’, ‘’
[08:08:23.551] | Number of remaining objects: 6
[08:08:23.551] | checking value #1:
[08:08:23.551] | 'obj' is atomic
[08:08:23.551] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:23.552] | signalConditionsASAP(numeric, pos=1) ...
[08:08:23.552] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:23.552] | : nx: 6
[08:08:23.552] | : relay: TRUE
[08:08:23.552] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:23.552] | : stdout: TRUE
[08:08:23.552] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:23.552] | : signal: TRUE
[08:08:23.552] | : . ' , ; ` | : New stack:
[08:08:23.553] | : resignal: FALSE
[08:08:23.553] | : force: TRUE
[08:08:23.553] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:23.553] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:23.553] | : until=2
[08:08:23.554] | : relaying element #2
[08:08:23.554] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:23.554] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:23.554] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:23.554] | length: 5 (resolved future 1)
[08:08:23.555] value() for array ... done
[08:08:23.551] | : . ' , ; ` | List of 1
[08:08:23.551] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.551] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.551] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.551] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:23.551] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.551] | : . ' , ; ` |     ...)  
[08:08:23.551] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.551] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.551] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:23.551] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.551] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.551] | : . ' , ; ` |     ...)  
[08:08:23.551] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.551] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrateg[08:08:23.555] checking value #2:
yList" "list"
[08:08:23.555] 'obj' is MulticoreFuture
[08:08:23.555] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:23.555] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:23.555] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.556] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.556] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:23.556] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:23.556] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:23.556] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:23.557] readImmediateCondition() ...
[08:08:23.557] | Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:23.557] | Number of RDS files: 0
[08:08:23.557] | Returned conditions set:
[08:08:23.557] |  list()
[08:08:23.558] readImmediateCondition() ... done
[08:08:23.558] MulticoreFuture #2
[08:08:23.558] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:23.558] | nx: 6
[08:08:23.559] | relay: TRUE
[08:08:23.559] | stdout: TRUE
[08:08:23.553] | : . ' , ; ` | : List of 1
[08:08:23.553] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.553] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.553] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.553] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:23.553] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.553] | : . ' , ; ` | :     ...)  
[08:08:23.553] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.553] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.553] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:23.553] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.553] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.553] | : . ' , ; ` | :     ...)  
[08:08:23.553] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.553] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.559] | signal: TRUE
[08:08:23.559] | : . ' , ; ` | : Old stack:
[08:08:23.559] | resignal: FALSE
[08:08:23.559] | force: TRUE
[08:08:23.560] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:23.560] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:23.560] | until=2
[08:08:23.560] | relaying element #2
[08:08:23.560] | value() for MulticoreFuture (<unnamed-49>) ...
[08:08:23.561] | : result() for MulticoreFuture ...
[08:08:23.562] | : . readImmediateCondition() ...
[08:08:23.562] | : . ' Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:23.562] | : . ' Number of RDS files: 0
[08:08:23.562] | : . ' Returned conditions set:
[08:08:23.562] | : . '  list()
[08:08:23.563] | : . readImmediateCondition() ... done
[08:08:23.564] | : . result() for MulticoreFuture ...
[08:08:23.564] | : . result() for MulticoreFuture ... done
[08:08:23.564] | : . signalConditions() ...
[08:08:23.564] | : . ' include = ‘immediateCondition’
[08:08:23.564] | : . ' exclude = 
[08:08:23.565] | : . ' resignal = FALSE
[08:08:23.565] | : . ' Number of conditions: 6
[08:08:23.565] | : . '  int 6
[08:08:23.566] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.566] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.559] | : . ' , ; ` | : List of 1
[08:08:23.559] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.559] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.559] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:23.559] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.559] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.559] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.559] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.559] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303da97e0> 
[08:08:23.559] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.559] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.559] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.566] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.566] | : . ' , ; ` | : Not identical
[08:08:23.567] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.567] | : . ' , ; ` | : all.equal() for future ...
[08:08:23.567] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.567] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.567] | : . signalConditions() ... done
[08:08:23.567] | : result() for MulticoreFuture ... done
[08:08:23.568] | : result() for MulticoreFuture ...
[08:08:23.568] | : result() for MulticoreFuture ... done
[08:08:23.568] | : signalConditions() ...
[08:08:23.568] | : . include = ‘immediateCondition’
[08:08:23.568] | : . exclude = 
[08:08:23.569] | : . resignal = FALSE
[08:08:23.569] | : . Number of conditions: 6
[08:08:23.569] | : .  int 6
[08:08:23.570] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.570] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.570] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.570] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.571] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.571] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.571] | : signalConditions() ... done
[08:08:23.571] | : relay stdout ...
[08:08:23.571] | : relay stdout ... done
[08:08:23.572] | : check for misuse ...
[08:08:23.572] | : check for misuse ... done
[08:08:23.572] | value() for MulticoreFuture (<unnamed-49>) ... done
[08:08:23.572] | result() for MulticoreFuture ...
[08:08:23.573] | result() for MulticoreFuture ... done
[08:08:23.573] | signalConditions() ...
[08:08:23.573] | : include = ‘immediateCondition’
[08:08:23.573] | : exclude = 
[08:08:23.573] | : resignal = FALSE
[08:08:23.573] | : Number of conditions: 6
[08:08:23.574] | :  int 6
[08:08:23.574] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.575] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.575] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.575] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.575] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.575] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.576] | signalConditions() ... done
[08:08:23.576] | result() for MulticoreFuture ...
[08:08:23.576] | result() for MulticoreFuture ... done
[08:08:23.576] | signalConditions() ...
[08:08:23.576] | : include = ‘condition’
[08:08:23.577] | : exclude = ‘error’, ‘immediateCondition’
[08:08:23.577] | : resignal = TRUE
[08:08:23.577] | : Number of conditions: 6
[08:08:23.577] | :  int 6
[08:08:23.578] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.578] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.493] | : . ' , attachPackages() ...
[08:08:23.578] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.579] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.494] | : . ' , ; packages: [n=1] ‘future’
[08:08:23.567] | : . ' , ; ` | : . List of 2
[08:08:23.567] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.567] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.567] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.567] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:23.567] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.567] | : . ' , ; ` | : .     ...)  
[08:08:23.567] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.567] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.567] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:23.567] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.567] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.567] | : . ' , ; ` | : .     ...)  
[08:08:23.567] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.567] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.567] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:23.567] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:23.567] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.567] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.567] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.567] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:23.567] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303da97e0> 
[08:08:23.567] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:23.567] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:23.579] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.579] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.494] | : . ' , attachPackages() ... done
[08:08:23.579] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.580] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.495] | : . ' , attachPackages() ...
[08:08:23.580] | : . ' , ; ` | : . Formals differ
[08:08:23.580] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.580] | : . ' , ; ` | : all.equal() for future ... done
[08:08:23.580] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.495] | : . ' , ; packages: [n=0] 
[08:08:23.580] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:23.580] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:23.580] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.581] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.581] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:23.495] | : . ' , attachPackages() ... done
[08:08:23.581] | signalConditions() ... done
[08:08:23.581] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.581] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.581] | : . ' , ; ` | List of future strategies:
[08:08:23.581] | : . ' , ; ` | 1. multicore:
[08:08:23.581] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:23.581] | : . ' , ; ` |    - tweaked: FALSE
[08:08:23.581] | : . ' , ; ` |    - call: plan(strategy)
[08:08:23.582] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:23.582] value(<MulticoreFuture>, ...) ...
[08:08:23.582] value(<MulticoreFuture>, ...) ... done
[08:08:23.582] value() for MulticoreFuture (<unnamed-49>) ...
[08:08:23.582] | result() for MulticoreFuture ...
[08:08:23.583] | result() for MulticoreFuture ... done
[08:08:23.583] | result() for MulticoreFuture ...
[08:08:23.583] | result() for MulticoreFuture ... done
[08:08:23.583] | signalConditions() ...
[08:08:23.583] | : include = ‘immediateCondition’
[08:08:23.584] | : exclude = 
[08:08:23.584] | : resignal = FALSE
[08:08:23.584] | : Number of conditions: 6
[08:08:23.584] | :  int 6
[08:08:23.585] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.585] | : already signaled, skipping
[08:08:23.585] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.585] | : already signaled, skipping
[08:08:23.586] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.586] | : already signaled, skipping
[08:08:23.586] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.586] | : already signaled, skipping
[08:08:23.586] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.586] | : already signaled, skipping
[08:08:23.586] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.586] | : already signaled, skipping
[08:08:23.587] | signalConditions() ... done
[08:08:23.587] | check for misuse ...
[08:08:23.587] | check for misuse ... done
[08:08:23.587] value() for MulticoreFuture (<unnamed-49>) ... done
[08:08:23.587] value: <numeric>
[08:08:23.587] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:23.587] | nx: 6
[08:08:23.587] | relay: TRUE
[08:08:23.587] | stdout: TRUE
[08:08:23.588] | signal: TRUE
[08:08:23.588] | resignal: FALSE
[08:08:23.588] | force: TRUE
[08:08:23.588] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.588] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.588] | until=3
[08:08:23.588] | relaying element #3
[08:08:23.588] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.589] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.589] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:23.589] resolve() for MulticoreFuture ...
[08:08:23.589] resolve() for MulticoreFuture ... done
[08:08:23.589] length: 4 (resolved future 2)

[08:08:23.589] checking value #3:
[08:08:23.589] 'obj' is MulticoreFuture
[08:08:23.582] | : . ' , ; ` | List of 1
[08:08:23.582] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.582] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.582] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.582] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:23.582] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.582] | : . ' , ; ` |     ...)  
[08:08:23.582] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.582] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.582] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:23.582] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.582] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.582] | : . ' , ; ` |     ...)  
[08:08:23.582] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.582] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.592] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:23.592] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:23.592] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.592] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.593] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:23.593] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:23.593] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:23.593] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:23.593] readImmediateCondition() ...
[08:08:23.594] | Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:23.594] | Number of RDS files: 0
[08:08:23.594] | Returned conditions set:
[08:08:23.594] |  list()
[08:08:23.594] readImmediateCondition() ... done
[08:08:23.595] MulticoreFuture #3
[08:08:23.595] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:23.595] | nx: 6
[08:08:23.595] | relay: TRUE
[08:08:23.595] | stdout: TRUE
[08:08:23.595] | signal: TRUE
[08:08:23.595] | resignal: FALSE
[08:08:23.595] | force: TRUE
[08:08:23.595] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.596] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:23.596] | until=3
[08:08:23.596] | relaying element #3
[08:08:23.596] | value() for MulticoreFuture (<unnamed-50>) ...
[08:08:23.596] | : result() for MulticoreFuture ...
[08:08:23.597] | : . readImmediateCondition() ...
[08:08:23.597] | : . ' Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:23.597] | : . ' Number of RDS files: 0
[08:08:23.597] | : . ' Returned conditions set:
[08:08:23.597] | : . '  list()
[08:08:23.597] | : . readImmediateCondition() ... done
[08:08:23.598] | : . result() for MulticoreFuture ...
[08:08:23.598] | : . result() for MulticoreFuture ... done
[08:08:23.598] | : . signalConditions() ...
[08:08:23.598] | : . ' include = ‘immediateCondition’
[08:08:23.598] | : . ' exclude = 
[08:08:23.598] | : . ' resignal = FALSE
[08:08:23.599] | : . ' Number of conditions: 6
[08:08:23.599] | : . '  int 6
[08:08:23.599] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.599] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.599] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.600] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.600] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.600] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.600] | : . signalConditions() ... done
[08:08:23.600] | : result() for MulticoreFuture ... done
[08:08:23.600] | : result() for MulticoreFuture ...
[08:08:23.600] | : result() for MulticoreFuture ... done
[08:08:23.600] | : signalConditions() ...
[08:08:23.601] | : . include = ‘immediateCondition’
[08:08:23.601] | : . exclude = 
[08:08:23.601] | : . resignal = FALSE
[08:08:23.601] | : . Number of conditions: 6
[08:08:23.601] | : .  int 6
[08:08:23.601] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.602] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.602] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.602] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.602] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.602] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.602] | : signalConditions() ... done
[08:08:23.602] | : relay stdout ...
[08:08:23.603] | : relay stdout ... done
[08:08:23.603] | : check for misuse ...
[08:08:23.603] | : check for misuse ... done
[08:08:23.603] | value() for MulticoreFuture (<unnamed-50>) ... done
[08:08:23.603] | result() for MulticoreFuture ...
[08:08:23.603] | result() for MulticoreFuture ... done
[08:08:23.603] | signalConditions() ...
[08:08:23.603] | : include = ‘immediateCondition’
[08:08:23.604] | : exclude = 
[08:08:23.604] | : resignal = FALSE
[08:08:23.604] | : Number of conditions: 6
[08:08:23.604] | :  int 6
[08:08:23.604] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.604] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.605] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.605] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.605] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.605] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.605] | signalConditions() ... done
[08:08:23.605] | result() for MulticoreFuture ...
[08:08:23.605] | result() for MulticoreFuture ... done
[08:08:23.605] | signalConditions() ...
[08:08:23.606] | : include = ‘condition’
[08:08:23.606] | : exclude = ‘error’, ‘immediateCondition’
[08:08:23.606] | : resignal = TRUE
[08:08:23.606] | : Number of conditions: 6
[08:08:23.606] | :  int 6
[08:08:23.606] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.607] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.507] | : . ' , attachPackages() ...
[08:08:23.607] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.607] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.507] | : . ' , ; packages: [n=1] ‘future’
[08:08:23.607] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.607] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.508] | : . ' , attachPackages() ... done
[08:08:23.607] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.607] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.508] | : . ' , attachPackages() ...
[08:08:23.608] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.608] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.508] | : . ' , ; packages: [n=0] 
[08:08:23.610] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.610] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:23.509] | : . ' , attachPackages() ... done
[08:08:23.610] | signalConditions() ... done
[08:08:23.611] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.611] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.611] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:23.611] value(<MulticoreFuture>, ...) ...
[08:08:23.611] value(<MulticoreFuture>, ...) ... done
[08:08:23.611] value() for MulticoreFuture (<unnamed-50>) ...
[08:08:23.611] | result() for MulticoreFuture ...
[08:08:23.611] | result() for MulticoreFuture ... done
[08:08:23.612] | result() for MulticoreFuture ...
[08:08:23.612] | result() for MulticoreFuture ... done
[08:08:23.612] | signalConditions() ...
[08:08:23.612] | : include = ‘immediateCondition’
[08:08:23.612] | : exclude = 
[08:08:23.612] | : resignal = FALSE
[08:08:23.612] | : Number of conditions: 6
[08:08:23.612] | :  int 6
[08:08:23.613] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.613] | : already signaled, skipping
[08:08:23.613] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.613] | : already signaled, skipping
[08:08:23.613] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.613] | : already signaled, skipping
[08:08:23.614] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.614] | : already signaled, skipping
[08:08:23.614] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.614] | : already signaled, skipping
[08:08:23.614] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:23.614] | : already signaled, skipping
[08:08:23.614] | signalConditions() ... done
[08:08:23.614] | check for misuse ...
[08:08:23.615] | check for misuse ... done
[08:08:23.615] value() for MulticoreFuture (<unnamed-50>) ... done
[08:08:23.615] value: <NULL>
[08:08:23.615] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:23.615] | nx: 6
[08:08:23.615] | relay: TRUE
[08:08:23.615] | stdout: TRUE
[08:08:23.615] | signal: TRUE
[08:08:23.615] | resignal: FALSE
[08:08:23.615] | force: TRUE
[08:08:23.616] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.616] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.616] | until=4
[08:08:23.616] | relaying element #4
[08:08:23.616] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.616] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.616] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:23.616] resolve() for MulticoreFuture ...
[08:08:23.617] resolve() for MulticoreFuture ... done
[08:08:23.617] length: 3 (resolved future 3)

[08:08:23.617] checking value #4:
[08:08:23.617] 'obj' is NULL
[08:08:23.617] signalConditionsASAP(NULL, pos=4) ...
[08:08:23.617] | nx: 6
[08:08:23.617] | relay: TRUE
[08:08:23.618] | stdout: TRUE
[08:08:23.618] | signal: TRUE
[08:08:23.618] | resignal: FALSE
[08:08:23.618] | force: TRUE
[08:08:23.618] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.618] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.618] | until=5
[08:08:23.618] | relaying element #5
[08:08:23.618] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:23.619] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.619] signalConditionsASAP(NULL, pos=4) ... done
[08:08:23.619] signalConditionsASAP(NULL, pos=4) ...
[08:08:23.619] | nx: 6
[08:08:23.619] | relay: TRUE
[08:08:23.619] | stdout: TRUE
[08:08:23.619] | signal: TRUE
[08:08:23.619] | resignal: FALSE
[08:08:23.619] | force: TRUE
[08:08:23.619] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:23.620] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.620] | until=5
[08:08:23.620] | relaying element #5
[08:08:23.620] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:23.620] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.620] signalConditionsASAP(NULL, pos=4) ... done
[08:08:23.620] length: 2 (resolved future 4)

[08:08:23.621] checking value #5:
[08:08:23.621] 'obj' is NULL
[08:08:23.621] signalConditionsASAP(NULL, pos=5) ...
[08:08:23.621] | nx: 6
[08:08:23.621] | relay: TRUE
[08:08:23.621] | stdout: TRUE
[08:08:23.621] | signal: TRUE
[08:08:23.621] | resignal: FALSE
[08:08:23.621] | force: TRUE
[08:08:23.622] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:23.622] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.622] | until=6
[08:08:23.622] | relaying element #6
[08:08:23.622] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:23.622] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.622] signalConditionsASAP(NULL, pos=5) ... done
[08:08:23.622] signalConditionsASAP(NULL, pos=5) ...
[08:08:23.622] | nx: 6
[08:08:23.623] | relay: TRUE
[08:08:23.623] | stdout: TRUE
[08:08:23.623] | signal: TRUE
[08:08:23.623] | resignal: FALSE
[08:08:23.623] | force: TRUE
[08:08:23.623] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:23.623] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.623] | until=6
[08:08:23.623] | relaying element #6
[08:08:23.624] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:23.624] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.624] signalConditionsASAP(NULL, pos=5) ... done
[08:08:23.624] length: 1 (resolved future 5)

[08:08:23.624] checking value #6:
[08:08:23.624] 'obj' is atomic
[08:08:23.624] signalConditionsASAP(numeric, pos=6) ...
[08:08:23.625] | nx: 6
[08:08:23.625] | relay: TRUE
[08:08:23.625] | stdout: TRUE
[08:08:23.625] | signal: TRUE
[08:08:23.625] | resignal: FALSE
[08:08:23.625] | force: TRUE
[08:08:23.625] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:23.625] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.626] | until=6
[08:08:23.626] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:23.626] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.626] signalConditionsASAP(numeric, pos=6) ... done
[08:08:23.626] length: 0 (resolved future 6)

[08:08:23.626] Relaying remaining futures ...
[08:08:23.626] | signalConditionsASAP(NULL, pos=0) ...
[08:08:23.626] | : nx: 6
[08:08:23.627] | : relay: TRUE
[08:08:23.627] | : stdout: TRUE
[08:08:23.627] | : signal: TRUE
[08:08:23.627] | : resignal: FALSE
[08:08:23.627] | : force: TRUE
[08:08:23.627] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:23.627] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
 - flush all
[08:08:23.627] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:23.628] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:23.628] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:23.628] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:4] 2 1 3 1
 - attr(*, "dimnames")=List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
Type of future: multisession
[08:08:23.633] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.633] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:23.633] | : all.equal() for FutureStrategyList ...
[08:08:23.633] | : . New stack:
[08:08:23.633] | : . List of 1
[08:08:23.633] | : .  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:23.633] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.633] | : .   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:23.633] | : .   ..- attr(*, "init")= logi TRUE
[08:08:23.633] | : .   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:23.633] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:23.633] | : .   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:23.633] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:23.633] | : .   ..- attr(*, "untweakable")= chr "persistent"
[08:08:23.633] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:23.633] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.637] | : . Old stack:
[08:08:23.637] | : . List of 1
[08:08:23.637] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.637] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.637] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.637] | : .   ..- attr(*, "init")= chr "done"
[08:08:23.637] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.637] | : .     ...)  
[08:08:23.637] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.637] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.637] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:23.637] | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.637] | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.637] | : .     ...)  
[08:08:23.637] | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.637] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.641] | : . Not identical
[08:08:23.641] | : . all.equal() for future ...
[08:08:23.641] | : . ' List of 2
[08:08:23.641] | : . '  $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:23.641] | : . '     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.641] | : . '   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:23.641] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:23.641] | : . '   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:23.641] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:23.641] | : . '   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:23.641] | : . '   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:23.641] | : . '   ..- attr(*, "untweakable")= chr "persistent"
[08:08:23.641] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:23.641] | : . '  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:23.641] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:08:23.641] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:23.641] | : . '   ..- attr(*, "init")= chr "done"
[08:08:23.641] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.641] | : . '     ...)  
[08:08:23.641] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.641] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.641] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:23.641] | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018f1830> 
[08:08:23.641] | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:23.641] | : . '     ...)  
[08:08:23.641] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:23.647] | : . ' Formals differ
[08:08:23.647] | : . all.equal() for future ... done
[08:08:23.647] | : . Future strategies differ at level 1
[08:08:23.647] | : all.equal() for FutureStrategyList ... done
[08:08:23.647] | : plan(): Setting new future backend stack:
[08:08:23.648] | : List of future strategies:
[08:08:23.648] | : 1. multisession:
[08:08:23.648] | :    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:23.648] | :    - tweaked: FALSE
[08:08:23.648] | :    - call: plan(strategy)
[08:08:23.648] | : List of 1
[08:08:23.648] | :  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:23.648] | :     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.648] | :   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:23.648] | :   ..- attr(*, "init")= logi TRUE
[08:08:23.648] | :   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:23.648] | :     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:23.648] | :   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:23.648] | :   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:23.648] | :   ..- attr(*, "untweakable")= chr "persistent"
[08:08:23.648] | :   ..- attr(*, "call")= language plan(strategy)
[08:08:23.648] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:23.651] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:08:23.651] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:23.651] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:23.651] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:23.652] | : . Legacy shutdown of cluster workers ...
[08:08:23.652] | : . ' Stopping existing cluster ...
[08:08:23.652] | : . ' , No pre-existing cluster. Skipping
[08:08:23.652] | : . ' Stopping existing cluster ... done
[08:08:23.652] | : . Legacy shutdown of cluster workers ... done
[08:08:23.653] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:08:23.653] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:08:23.653] | : . function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:23.653] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:23.653] | : .  - attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:23.653] | : .  - attr(*, "init")= logi TRUE
[08:08:23.653] | : .  - attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:23.653] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:23.653] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:23.653] | : .  - attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:23.653] | : .  - attr(*, "untweakable")= chr "persistent"
[08:08:23.653] | : .  - attr(*, "call")= language plan(strategy)
[08:08:23.655] | : . init: TRUE
[08:08:23.655] | : . makeFutureBackend(<multisession>) ...
[08:08:23.655] | : . ' Backend function: <‘NULL’>
[08:08:23.655] | : . ' Evaluator tweak arguments: [n=0]
[08:08:23.656] | : . '  list()
[08:08:23.656] | : . ' Evaluator formal arguments: [n=4]
[08:08:23.656] | : . '  list()
[08:08:23.656] | : . ' Backend factory arguments: [n=4]
[08:08:23.656] | : . ' Dotted pair list of 4
[08:08:23.656] | : . '  $ workers     : language availableCores()
[08:08:23.656] | : . '  $ rscript_libs: language .libPaths()
[08:08:23.656] | : . '  $ gc          : logi FALSE
[08:08:23.656] | : . '  $ earlySignal : logi FALSE
[08:08:23.658] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ...
[08:08:23.658] | : . ' , Arguments:
[08:08:23.658] | : . ' , List of 5
[08:08:23.658] | : . ' ,  $ workers     : Named int 2
[08:08:23.658] | : . ' ,   ..- attr(*, "names")= chr "mc.cores"
[08:08:23.658] | : . ' ,  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:23.658] | : . ' ,  $ interrupts  : logi TRUE
[08:08:23.658] | : . ' ,  $ gc          : logi FALSE
[08:08:23.658] | : . ' ,  $ earlySignal : logi FALSE
[08:08:23.662] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ...
[08:08:23.662] | : . ' , ; workers: 2
[08:08:23.662] | : . ' , ; getCluster() ...
[08:08:23.663] | : . ' , ; getCluster() ... done
[08:08:23.663] | : . ' , ; Stopping existing cluster ...
[08:08:23.663] | : . ' , ; ` No pre-existing cluster. Skipping
[08:08:23.663] | : . ' , ; Stopping existing cluster ... done
[08:08:23.663] | : . ' , ; Starting new cluster ...
[08:08:23.663] | : . ' , ; ` makeCluster(workers, ...) ...
[08:08:23.663] | : . ' , ; ` | Arguments:
[08:08:23.663] | : . ' , ; ` | List of 2
[08:08:23.663] | : . ' , ; ` |  $             : int 2
[08:08:23.663] | : . ' , ; ` |  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:23.664] | : . ' , ; ` | .makeCluster() ...
[08:08:23.664] | : . ' , ; ` | : workers: ‘2’
[08:08:23.665] | : . ' , ; ` | : R_FUTURE_PLAN: NA
[08:08:23.665] | : . ' , ; ` | : parallelly::makeClusterPSOCK() arguments:
[08:08:23.665] | : . ' , ; ` | : List of 2
[08:08:23.665] | : . ' , ; ` | :  $             : int 2
[08:08:23.665] | : . ' , ; ` | :  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:24.169] | : . ' , ; ` | : Generated cluster UUID
[08:08:24.169] | : . ' , ; ` | : Cluster UUID: ‘681b6315fba68606aeaf4c7e3afba472’
[08:08:24.170] | : . ' , ; ` | : Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:24.172] | : . ' , ; ` | .makeCluster() ... done
[08:08:24.172] | : . ' , ; ` | Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:24.174] | : . ' , ; ` makeCluster(workers, ...) ... done
[08:08:24.174] | : . ' , ; ` Number of workers: 2
[08:08:24.174] | : . ' , ; ` Workers UUID: ‘681b6315fba68606aeaf4c7e3afba472’
[08:08:24.174] | : . ' , ; Starting new cluster ... done
[08:08:24.174] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ... done
[08:08:24.174] | : . ' , Backend: <‘MultisessionFutureBackend’, ‘ClusterFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:24.174] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ... done
[08:08:24.174] | : . makeFutureBackend(<multisession>) ... done
[08:08:24.175] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:24.175] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:24.175] | : . plan(): nbrOfWorkers() = 2
[08:08:24.175] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:08:24.175] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
Dimensions: NULL
[08:08:24.175] | future(..., label = NULL) ...
[08:08:24.175] | : lazy: FALSE
[08:08:24.175] | : stdout: TRUE
[08:08:24.176] | : conditions: [n=1] ‘condition’
[08:08:24.176] | : gc: FALSE
[08:08:24.176] | : earlySignal: FALSE
[08:08:24.176] | : getGlobalsAndPackages() ...
[08:08:24.176] | : . Searching for globals ...
[08:08:24.177] | : . ' globals found: [0] 
[08:08:24.177] | : . Searching for globals ... done
[08:08:24.177] | : . globals: [0] <none>
[08:08:24.177] | : . packages: [0] <none>
[08:08:24.178] | : getGlobalsAndPackages() ... done
[08:08:24.178] | : run() for ‘Future’ (<unnamed-51>) ...
[08:08:24.178] | : . state: ‘created’
[08:08:24.178] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:24.178] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:24.178] | : . Using MultisessionFutureBackend ...
[08:08:24.178] | : . ' Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:24.178] | : . ' Launching futures ...
[08:08:24.179] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:24.179] | : . ' , ; Workers: [n=2]
[08:08:24.179] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:24.180] | : . ' , ; FutureRegistry: ‘workers-681b6315fba68606aeaf4c7e3afba472’
[08:08:24.181] | : . ' , ; requestWorker() ...
[08:08:24.181] | : . ' , ; ` requestNode() ...
[08:08:24.181] | : . ' , ; ` | Number of workers: 2
[08:08:24.181] | : . ' , ; ` | Polling for a free worker ...
[08:08:24.181] | : . ' , ; ` | : FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ...
[08:08:24.181] | : . ' , ; ` | : . Created empty registry ‘workers-681b6315fba68606aeaf4c7e3afba472’
[08:08:24.181] | : . ' , ; ` | : . Listing all futures
[08:08:24.181] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:24.181] | : . ' , ; ` | : FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ... done
[08:08:24.182] | : . ' , ; ` | : Total time: 0
[08:08:24.182] | : . ' , ; ` | Polling for a free worker ... done
[08:08:24.182] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ...
[08:08:24.182] | : . ' , ; ` | : Listing all futures
[08:08:24.182] | : . ' , ; ` | : Number of registered futures: 0
[08:08:24.182] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ... done
[08:08:24.182] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:24.182] | : . ' , ; ` | Index of first available worker: 1
[08:08:24.182] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:24.247] | : . ' , ; ` | : Worker is functional
[08:08:24.247] | : . ' , ; ` | : FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ...
[08:08:24.247] | : . ' , ; ` | : . Listing all futures
[08:08:24.247] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:24.247] | : . ' , ; ` | : FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ... done
[08:08:24.248] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:24.248] | : . ' , ; ` requestNode() ... done
[08:08:24.248] | : . ' , ; ` cluster node index: 1
[08:08:24.248] | : . ' , ; requestWorker() ... done
[08:08:24.248] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:24.250] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:24.250] | : . ' , ; launchFuture() ...
[08:08:24.250] | : . ' , ; ` cluster node index: 1
[08:08:24.250] | : . ' , ; ` getFutureData() ...
[08:08:24.250] | : . ' , ; ` | getFutureCore() ...
[08:08:24.250] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:24.250] | : . ' , ; ` | getFutureCore() ... done
[08:08:24.251] | : . ' , ; ` | getFutureCapture() ...
[08:08:24.251] | : . ' , ; ` | getFutureCapture() ... done
[08:08:24.251] | : . ' , ; ` | getFutureContext() ...
[08:08:24.251] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:24.251] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:24.251] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:24.251] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:24.251] | : . ' , ; ` | getFutureContext() ... done
[08:08:24.252] | : . ' , ; ` getFutureData() ... done
[08:08:24.252] | : . ' , ; ` FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'add', earlySignal = 0) ...
[08:08:24.252] | : . ' , ; ` | Appended future to position #1
[08:08:24.252] | : . ' , ; ` | Number of registered futures: 1
[08:08:24.252] | : . ' , ; ` FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'add', earlySignal = 0) ... done
[08:08:24.252] | : . ' , ; launchFuture() ... done
[08:08:24.252] | : . ' , ; MultisessionFuture started
[08:08:24.253] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:24.253] | : . ' Launching futures ... done
[08:08:24.253] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:24.253] | : . Using MultisessionFutureBackend ... done
[08:08:24.253] | : run() for ‘Future’ (<unnamed-51>) ... done
[08:08:24.253] | future(..., label = NULL) ... done
[08:08:24.253] | future(..., label = NULL) ...
[08:08:24.253] | : lazy: FALSE
[08:08:24.253] | : stdout: TRUE
[08:08:24.253] | : conditions: [n=1] ‘condition’
[08:08:24.254] | : gc: FALSE
[08:08:24.254] | : earlySignal: FALSE
[08:08:24.254] | : getGlobalsAndPackages() ...
[08:08:24.254] | : . Searching for globals ...
[08:08:24.255] | : . ' globals found: [0] 
[08:08:24.255] | : . Searching for globals ... done
[08:08:24.255] | : . globals: [0] <none>
[08:08:24.255] | : . packages: [0] <none>
[08:08:24.256] | : getGlobalsAndPackages() ... done
[08:08:24.256] | : run() for ‘Future’ (<unnamed-52>) ...
[08:08:24.256] | : . state: ‘created’
[08:08:24.256] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:24.256] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:24.256] | : . Using MultisessionFutureBackend ...
[08:08:24.256] | : . ' Number of futures since start: 1 (1 created, 1 launched, 0 finished)
[08:08:24.257] | : . ' Launching futures ...
[08:08:24.257] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:24.257] | : . ' , ; Workers: [n=2]
[08:08:24.257] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:24.258] | : . ' , ; FutureRegistry: ‘workers-681b6315fba68606aeaf4c7e3afba472’
[08:08:24.258] | : . ' , ; requestWorker() ...
[08:08:24.259] | : . ' , ; ` requestNode() ...
[08:08:24.259] | : . ' , ; ` | Number of workers: 2
[08:08:24.259] | : . ' , ; ` | Polling for a free worker ...
[08:08:24.259] | : . ' , ; ` | : FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ...
[08:08:24.259] | : . ' , ; ` | : . Listing all futures
[08:08:24.259] | : . ' , ; ` | : . Number of registered futures: 1
[08:08:24.259] | : . ' , ; ` | : FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ... done
[08:08:24.259] | : . ' , ; ` | : Total time: 0
[08:08:24.259] | : . ' , ; ` | Polling for a free worker ... done
[08:08:24.260] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ...
[08:08:24.260] | : . ' , ; ` | : Listing all futures
[08:08:24.260] | : . ' , ; ` | : Number of registered futures: 1
[08:08:24.260] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ... done
[08:08:24.260] | : . ' , ; ` | avail: [n=2] ‘2’
[08:08:24.260] | : . ' , ; ` | Index of first available worker: 2
[08:08:24.260] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:24.327] | : . ' , ; ` | : Worker is functional
[08:08:24.328] | : . ' , ; ` | : FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ...
[08:08:24.328] | : . ' , ; ` | : . Listing all futures
[08:08:24.328] | : . ' , ; ` | : . Number of registered futures: 1
[08:08:24.328] | : . ' , ; ` | : FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ... done
[08:08:24.328] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:24.329] | : . ' , ; ` requestNode() ... done
[08:08:24.329] | : . ' , ; ` cluster node index: 2
[08:08:24.329] | : . ' , ; requestWorker() ... done
[08:08:24.329] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:24.330] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:24.330] | : . ' , ; launchFuture() ...
[08:08:24.330] | : . ' , ; ` cluster node index: 2
[08:08:24.330] | : . ' , ; ` getFutureData() ...
[08:08:24.331] | : . ' , ; ` | getFutureCore() ...
[08:08:24.331] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:24.331] | : . ' , ; ` | getFutureCore() ... done
[08:08:24.331] | : . ' , ; ` | getFutureCapture() ...
[08:08:24.331] | : . ' , ; ` | getFutureCapture() ... done
[08:08:24.331] | : . ' , ; ` | getFutureContext() ...
[08:08:24.332] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:24.332] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:24.332] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:24.332] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:24.332] | : . ' , ; ` | getFutureContext() ... done
[08:08:24.333] | : . ' , ; ` getFutureData() ... done
[08:08:24.333] | : . ' , ; ` FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'add', earlySignal = 0) ...
[08:08:24.333] | : . ' , ; ` | Appended future to position #2
[08:08:24.333] | : . ' , ; ` | Number of registered futures: 2
[08:08:24.334] | : . ' , ; ` FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'add', earlySignal = 0) ... done
[08:08:24.334] | : . ' , ; launchFuture() ... done
[08:08:24.334] | : . ' , ; MultisessionFuture started
[08:08:24.334] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:24.334] | : . ' Launching futures ... done
[08:08:24.334] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:24.335] | : . Using MultisessionFutureBackend ... done
[08:08:24.335] | : run() for ‘Future’ (<unnamed-52>) ... done
[08:08:24.335] | future(..., label = NULL) ... done
List of 6
 $ a: num 1
 $ b:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x5643041bacf0> 
 $ c:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x56430394e6d8> 
 $  : NULL
 $  : NULL
 $  : num 6
List of 6
 $ a: num 1
 $ b:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x5643041bacf0> 
 $ c:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x56430394e6d8> 
 $  : NULL
 $  : NULL
 $  : num 6
[08:08:24.342] | resolved() for list ...
[08:08:24.342] | : Number of elements: 6
[08:08:24.342] | : Number of futures: 6
[08:08:24.343] | : resolved() for MultisessionFuture (<unnamed-51>) ...
[08:08:24.343] | : . Cluster node socket connection: index=4, id=984
[08:08:24.344] | : . assertValidConnection() ...
[08:08:24.344] | : . ' cluster node index: 1
[08:08:24.344] | : . assertValidConnection() ... done
[08:08:24.355] | : . socketSelect(list(<connection #4 (id=984)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:24.355] | : resolved() for MultisessionFuture (<unnamed-51>) ... done
[08:08:24.355] | : resolved() for MultisessionFuture (<unnamed-52>) ...
[08:08:24.355] | : . Cluster node socket connection: index=5, id=985
[08:08:24.355] | : . assertValidConnection() ...
[08:08:24.356] | : . ' cluster node index: 2
[08:08:24.356] | : . assertValidConnection() ... done
[08:08:24.366] | : . socketSelect(list(<connection #5 (id=985)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:24.366] | : resolved() for MultisessionFuture (<unnamed-52>) ... done
[08:08:24.367] | resolved() for list ... done
 Named logi [1:6] TRUE FALSE FALSE TRUE TRUE TRUE
 - attr(*, "names")= chr [1:6] "a" "b" "c" "" ...
[08:08:24.367] | value() for list ...
[08:08:24.367] | : recursive: 0
[08:08:24.367] | : reduce: FALSE
[08:08:24.368] | : length: 6
[08:08:24.368] | : elements: ‘a’, ‘b’, ‘c’, ‘’, ‘’, ‘’
[08:08:24.368] | : Number of remaining objects: 6
[08:08:24.368] | : checking value #1:
[08:08:24.368] | : 'obj' is atomic
[08:08:24.368] | : signalConditionsASAP(numeric, pos=1) ...
[08:08:24.368] | : . nx: 6
[08:08:24.368] | : . relay: TRUE
[08:08:24.368] | : . stdout: TRUE
[08:08:24.368] | : . signal: TRUE
[08:08:24.369] | : . resignal: FALSE
[08:08:24.369] | : . force: TRUE
[08:08:24.369] | : . relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:24.369] | : . queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:24.369] | : . until=2
[08:08:24.369] | : . relaying element #2
[08:08:24.369] | : . relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:24.369] | : . queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:24.369] | : signalConditionsASAP(numeric, pos=1) ... done
[08:08:24.369] | : length: 5 (resolved future 1)
[08:08:24.370] | value() for list ... done
[08:08:24.370] | checking value #2:
[08:08:24.370] | 'obj' is MultisessionFuture
[08:08:24.370] | resolved() for MultisessionFuture (<unnamed-51>) ...
[08:08:24.370] | : Cluster node socket connection: index=4, id=984
[08:08:24.370] | : assertValidConnection() ...
[08:08:24.370] | : . cluster node index: 1
[08:08:24.371] | : assertValidConnection() ... done
[08:08:24.371] | : receiveMessageFromWorker() for ClusterFuture ...
[08:08:24.371] | : . cluster node index: 1
[08:08:24.372] | : . [1] TRUE
[08:08:24.372] | : . received data:
[08:08:24.372] | : . List of 5
[08:08:24.372] | : .  $ type   : chr "VALUE"
[08:08:24.372] | : .  $ value  :List of 16
[08:08:24.372] | : .   ..$ value              : num 2
[08:08:24.372] | : .   ..$ visible            : logi TRUE
[08:08:24.372] | : .   ..$ stdout             : chr ""
[08:08:24.372] | : .   ..$ conditions         : list()
[08:08:24.372] | : .   ..$ rng                : logi FALSE
[08:08:24.372] | : .   ..$ seed               : NULL
[08:08:24.372] | : .   ..$ misuseGlobalEnv    : NULL
[08:08:24.372] | : .   ..$ misuseConnections  :List of 3
[08:08:24.372] | : .   .. ..$ added   : NULL
[08:08:24.372] | : .   .. ..$ removed : NULL
[08:08:24.372] | : .   .. ..$ replaced: NULL
[08:08:24.372] | : .   ..$ misuseDevices      : NULL
[08:08:24.372] | : .   ..$ misuseDefaultDevice: list()
[08:08:24.372] | : .   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:24"
[08:08:24.372] | : .   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:24"
[08:08:24.372] | : .   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "51"
[08:08:24.372] | : .   ..$ session_uuid       : chr "fc6c016afc99663cf036a2d323992128"
[08:08:24.372] | : .   .. ..- attr(*, "source")=List of 5
[08:08:24.372] | : .   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:24.372] | : .   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:24.372] | : .   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:24.372] | : .   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:24.372] | : .   .. .. ..$ pid   : int 69003
[08:08:24.372] | : .   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:24"
[08:08:24.372] | : .   .. .. ..$ random: int 2147483647
[08:08:24.372] | : .   ..$ r_info             :List of 4
[08:08:24.372] | : .   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:24.372] | : .   .. .. ..$ : int [1:3] 4 5 0
[08:08:24.372] | : .   .. ..$ os           : chr "unix"
[08:08:24.372] | : .   .. ..$ os_name      : chr "Linux"
[08:08:24.372] | : .   .. ..$ captures_utf8: logi TRUE
[08:08:24.372] | : .   ..$ version            : chr "1.8"
[08:08:24.372] | : .   ..- attr(*, "class")= chr "FutureResult"
[08:08:24.372] | : .  $ success: logi TRUE
[08:08:24.372] | : .  $ time   : 'proc_time' Named num [1:5] 0.063 0.003 0.066 0 0
[08:08:24.372] | : .   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:24.372] | : .  $ tag    : NULL
[08:08:24.391] | : . Received FutureResult
[08:08:24.391] | : . FutureResult:
[08:08:24.391] | : . value: ‘numeric’
[08:08:24.391] | : . visible: TRUE
[08:08:24.391] | : . stdout: character
[08:08:24.391] | : . conditions: [n = 0] 
[08:08:24.391] | : . RNG used: FALSE
[08:08:24.391] | : . duration: 0.06426549 secs (started 2025-06-17 08:08:24.29475)
[08:08:24.391] | : . version: 1.8
[08:08:24.392] | : . FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'remove', earlySignal = 0) ...
[08:08:24.392] | : . ' Removed future from position #1
[08:08:24.392] | : . ' Number of registered futures: 1
[08:08:24.392] | : . FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'remove', earlySignal = 0) ... done
[08:08:24.393] | : . Erased future from future backend
[08:08:24.393] | : . result() for ClusterFuture ...
[08:08:24.393] | : . ' result already collected: FutureResult
[08:08:24.393] | : . result() for ClusterFuture ... done
[08:08:24.393] | : . signalConditions() ...
[08:08:24.393] | : . ' include = ‘immediateCondition’
[08:08:24.393] | : . ' exclude = 
[08:08:24.393] | : . ' resignal = FALSE
[08:08:24.393] | : . ' Number of conditions: 0
[08:08:24.394] | : . '  int 0
[08:08:24.394] | : . signalConditions() ... done
[08:08:24.394] | : receiveMessageFromWorker() for ClusterFuture ... done
[08:08:24.394] | : receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:24.394] | resolved() for MultisessionFuture (<unnamed-51>) ... done
[08:08:24.394] | assertFutureResult() ...
[08:08:24.394] | : Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:24.394] | : Future uuid: 51
[08:08:24.395] | : identical; success
[08:08:24.395] | assertFutureResult() ... done
[08:08:24.395] | MultisessionFuture #2
[08:08:24.395] | signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:24.395] | : nx: 6
[08:08:24.395] | : relay: TRUE
[08:08:24.395] | : stdout: TRUE
[08:08:24.395] | : signal: TRUE
[08:08:24.395] | : resignal: FALSE
[08:08:24.395] | : force: TRUE
[08:08:24.395] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:24.396] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:24.396] | : until=2
[08:08:24.396] | : relaying element #2
[08:08:24.396] | : value() for MultisessionFuture (<unnamed-51>) ...
[08:08:24.396] | : . result() for ClusterFuture ...
[08:08:24.396] | : . ' result already collected: FutureResult
[08:08:24.396] | : . result() for ClusterFuture ... done
[08:08:24.396] | : . result() for ClusterFuture ...
[08:08:24.396] | : . ' result already collected: FutureResult
[08:08:24.396] | : . result() for ClusterFuture ... done
[08:08:24.397] | : . signalConditions() ...
[08:08:24.397] | : . ' include = ‘immediateCondition’
[08:08:24.397] | : . ' exclude = 
[08:08:24.397] | : . ' resignal = FALSE
[08:08:24.397] | : . ' Number of conditions: 0
[08:08:24.397] | : . '  int 0
[08:08:24.397] | : . signalConditions() ... done
[08:08:24.398] | : . relay stdout ...
[08:08:24.398] | : . relay stdout ... done
[08:08:24.398] | : . check for misuse ...
[08:08:24.398] | : . check for misuse ... done
[08:08:24.398] | : value() for MultisessionFuture (<unnamed-51>) ... done
[08:08:24.398] | : result() for ClusterFuture ...
[08:08:24.398] | : . result already collected: FutureResult
[08:08:24.398] | : result() for ClusterFuture ... done
[08:08:24.398] | : signalConditions() ...
[08:08:24.399] | : . include = ‘immediateCondition’
[08:08:24.399] | : . exclude = 
[08:08:24.399] | : . resignal = FALSE
[08:08:24.399] | : . Number of conditions: 0
[08:08:24.399] | : .  int 0
[08:08:24.399] | : signalConditions() ... done
[08:08:24.399] | : result() for ClusterFuture ...
[08:08:24.400] | : . result already collected: FutureResult
[08:08:24.400] | : result() for ClusterFuture ... done
[08:08:24.400] | : signalConditions() ...
[08:08:24.400] | : . include = ‘condition’
[08:08:24.400] | : . exclude = ‘error’, ‘immediateCondition’
[08:08:24.400] | : . resignal = TRUE
[08:08:24.400] | : . Number of conditions: 0
[08:08:24.400] | : .  int 0
[08:08:24.401] | : signalConditions() ... done
[08:08:24.401] | : relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.401] | : queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.401] | signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:24.401] | value(<MultisessionFuture>, ...) ...
[08:08:24.401] | value(<MultisessionFuture>, ...) ... done
[08:08:24.401] | value() for MultisessionFuture (<unnamed-51>) ...
[08:08:24.401] | : result() for ClusterFuture ...
[08:08:24.401] | : . result already collected: FutureResult
[08:08:24.402] | : result() for ClusterFuture ... done
[08:08:24.402] | : result() for ClusterFuture ...
[08:08:24.402] | : . result already collected: FutureResult
[08:08:24.402] | : result() for ClusterFuture ... done
[08:08:24.402] | : signalConditions() ...
[08:08:24.402] | : . include = ‘immediateCondition’
[08:08:24.402] | : . exclude = 
[08:08:24.402] | : . resignal = FALSE
[08:08:24.402] | : . Number of conditions: 0
[08:08:24.402] | : .  int 0
[08:08:24.403] | : signalConditions() ... done
[08:08:24.403] | : check for misuse ...
[08:08:24.403] | : check for misuse ... done
[08:08:24.403] | value() for MultisessionFuture (<unnamed-51>) ... done
[08:08:24.403] | value: <numeric>
[08:08:24.403] | signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:24.403] | : nx: 6
[08:08:24.404] | : relay: TRUE
[08:08:24.404] | : stdout: TRUE
[08:08:24.404] | : signal: TRUE
[08:08:24.404] | : resignal: FALSE
[08:08:24.404] | : force: TRUE
[08:08:24.404] | : relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.404] | : queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.404] | : until=3
[08:08:24.404] | : relaying element #3
[08:08:24.404] | : relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.405] | : queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.405] | signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:24.405] | resolve() for MultisessionFuture ...
[08:08:24.405] | resolve() for MultisessionFuture ... done
[08:08:24.405] | length: 4 (resolved future 2)
[08:08:24.405] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:24.405] checking value #3:
[08:08:24.405] 'obj' is MultisessionFuture
[08:08:24.405] resolved() for MultisessionFuture (<unnamed-52>) ...
[08:08:24.406] | Cluster node socket connection: index=5, id=985
[08:08:24.406] | assertValidConnection() ...
[08:08:24.406] | : cluster node index: 2
[08:08:24.406] | assertValidConnection() ... done
[08:08:24.416] | socketSelect(list(<connection #5 (id=985)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:24.417] resolved() for MultisessionFuture (<unnamed-52>) ... done
[08:08:24.417] checking value #4:
[08:08:24.417] 'obj' is NULL
[08:08:24.417] signalConditionsASAP(NULL, pos=4) ...
[08:08:24.417] | nx: 6
[08:08:24.417] | relay: TRUE
[08:08:24.417] | stdout: TRUE
[08:08:24.417] | signal: TRUE
[08:08:24.417] | resignal: FALSE
[08:08:24.417] | force: TRUE
[08:08:24.417] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.418] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.418] | until=5
[08:08:24.418] | relaying element #3
[08:08:24.418] | relaying element #5
[08:08:24.418] | relayed: [n=6] TRUE, TRUE, FALSE, TRUE, FALSE, FALSE
[08:08:24.418] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.418] signalConditionsASAP(NULL, pos=4) ... done
[08:08:24.418] signalConditionsASAP(NULL, pos=4) ...
[08:08:24.418] | nx: 6
[08:08:24.418] | relay: TRUE
[08:08:24.418] | stdout: TRUE
[08:08:24.419] | signal: TRUE
[08:08:24.419] | resignal: FALSE
[08:08:24.419] | force: TRUE
[08:08:24.419] | relayed: [n=6] TRUE, TRUE, FALSE, TRUE, FALSE, FALSE
[08:08:24.419] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.419] | until=5
[08:08:24.419] | relaying element #3
[08:08:24.419] | relaying element #5
[08:08:24.419] | relayed: [n=6] TRUE, TRUE, FALSE, TRUE, FALSE, FALSE
[08:08:24.419] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.419] signalConditionsASAP(NULL, pos=4) ... done
[08:08:24.420] length: 3 (resolved future 4)

[08:08:24.420] checking value #5:
[08:08:24.420] 'obj' is NULL
[08:08:24.420] signalConditionsASAP(NULL, pos=5) ...
[08:08:24.420] | nx: 6
[08:08:24.420] | relay: TRUE
[08:08:24.420] | stdout: TRUE
[08:08:24.420] | signal: TRUE
[08:08:24.420] | resignal: FALSE
[08:08:24.420] | force: TRUE
[08:08:24.421] | relayed: [n=6] TRUE, TRUE, FALSE, TRUE, FALSE, FALSE
[08:08:24.421] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.421] | until=6
[08:08:24.421] | relaying element #3
[08:08:24.421] | relaying element #6
[08:08:24.421] | relayed: [n=6] TRUE, TRUE, FALSE, TRUE, TRUE, FALSE
[08:08:24.421] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.421] signalConditionsASAP(NULL, pos=5) ... done
[08:08:24.421] signalConditionsASAP(NULL, pos=5) ...
[08:08:24.421] | nx: 6
[08:08:24.422] | relay: TRUE
[08:08:24.422] | stdout: TRUE
[08:08:24.422] | signal: TRUE
[08:08:24.422] | resignal: FALSE
[08:08:24.422] | force: TRUE
[08:08:24.422] | relayed: [n=6] TRUE, TRUE, FALSE, TRUE, TRUE, FALSE
[08:08:24.422] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.422] | until=6
[08:08:24.422] | relaying element #3
[08:08:24.422] | relaying element #6
[08:08:24.422] | relayed: [n=6] TRUE, TRUE, FALSE, TRUE, TRUE, FALSE
[08:08:24.423] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.423] signalConditionsASAP(NULL, pos=5) ... done
[08:08:24.423] length: 2 (resolved future 5)

[08:08:24.423] checking value #6:
[08:08:24.423] 'obj' is atomic
[08:08:24.423] signalConditionsASAP(numeric, pos=6) ...
[08:08:24.423] | nx: 6
[08:08:24.423] | relay: TRUE
[08:08:24.423] | stdout: TRUE
[08:08:24.423] | signal: TRUE
[08:08:24.424] | resignal: FALSE
[08:08:24.424] | force: TRUE
[08:08:24.424] | relayed: [n=6] TRUE, TRUE, FALSE, TRUE, TRUE, FALSE
[08:08:24.424] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.424] | until=6
[08:08:24.424] | relaying element #3
[08:08:24.424] | relayed: [n=6] TRUE, TRUE, FALSE, TRUE, TRUE, TRUE
[08:08:24.424] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.424] signalConditionsASAP(numeric, pos=6) ... done
[08:08:24.424] length: 1 (resolved future 6)

[08:08:24.435] Number of remaining objects: 1
[08:08:24.435] checking value #3:
[08:08:24.435] 'obj' is MultisessionFuture
[08:08:24.435] resolved() for MultisessionFuture (<unnamed-52>) ...
[08:08:24.435] | Cluster node socket connection: index=5, id=985
[08:08:24.436] | assertValidConnection() ...
[08:08:24.436] | : cluster node index: 2
[08:08:24.436] | assertValidConnection() ... done
[08:08:24.436] | receiveMessageFromWorker() for ClusterFuture ...
[08:08:24.436] | : cluster node index: 2
[08:08:24.436] | : [1] TRUE
[08:08:24.437] | : received data:
[08:08:24.437] | : List of 5
[08:08:24.437] | :  $ type   : chr "VALUE"
[08:08:24.437] | :  $ value  :List of 16
[08:08:24.437] | :   ..$ value              : NULL
[08:08:24.437] | :   ..$ visible            : logi TRUE
[08:08:24.437] | :   ..$ stdout             : chr ""
[08:08:24.437] | :   ..$ conditions         : list()
[08:08:24.437] | :   ..$ rng                : logi FALSE
[08:08:24.437] | :   ..$ seed               : NULL
[08:08:24.437] | :   ..$ misuseGlobalEnv    : NULL
[08:08:24.437] | :   ..$ misuseConnections  :List of 3
[08:08:24.437] | :   .. ..$ added   : NULL
[08:08:24.437] | :   .. ..$ removed : NULL
[08:08:24.437] | :   .. ..$ replaced: NULL
[08:08:24.437] | :   ..$ misuseDevices      : NULL
[08:08:24.437] | :   ..$ misuseDefaultDevice: list()
[08:08:24.437] | :   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:24"
[08:08:24.437] | :   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:24"
[08:08:24.437] | :   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "52"
[08:08:24.437] | :   ..$ session_uuid       : chr "39c3116ea80068179a88abb33369ed7b"
[08:08:24.437] | :   .. ..- attr(*, "source")=List of 5
[08:08:24.437] | :   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:24.437] | :   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:24.437] | :   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:24.437] | :   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:24.437] | :   .. .. ..$ pid   : int 69004
[08:08:24.437] | :   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:24"
[08:08:24.437] | :   .. .. ..$ random: int 2147483647
[08:08:24.437] | :   ..$ r_info             :List of 4
[08:08:24.437] | :   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:24.437] | :   .. .. ..$ : int [1:3] 4 5 0
[08:08:24.437] | :   .. ..$ os           : chr "unix"
[08:08:24.437] | :   .. ..$ os_name      : chr "Linux"
[08:08:24.437] | :   .. ..$ captures_utf8: logi TRUE
[08:08:24.437] | :   ..$ version            : chr "1.8"
[08:08:24.437] | :   ..- attr(*, "class")= chr "FutureResult"
[08:08:24.437] | :  $ success: logi TRUE
[08:08:24.437] | :  $ time   : 'proc_time' Named num [1:5] 0.054 0.001 0.054 0 0
[08:08:24.437] | :   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:24.437] | :  $ tag    : NULL
[08:08:24.447] | : Received FutureResult
[08:08:24.447] | : FutureResult:
[08:08:24.447] | : value: ‘NULL’
[08:08:24.447] | : visible: TRUE
[08:08:24.447] | : stdout: character
[08:08:24.447] | : conditions: [n = 0] 
[08:08:24.447] | : RNG used: FALSE
[08:08:24.447] | : duration: 0.05192828 secs (started 2025-06-17 08:08:24.376247)
[08:08:24.447] | : version: 1.8
[08:08:24.448] | : FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'remove', earlySignal = 0) ...
[08:08:24.448] | : . Removed future from position #1
[08:08:24.448] | : . Number of registered futures: 0
[08:08:24.448] | : FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'remove', earlySignal = 0) ... done
[08:08:24.448] | : Erased future from future backend
[08:08:24.449] | : result() for ClusterFuture ...
[08:08:24.449] | : . result already collected: FutureResult
[08:08:24.449] | : result() for ClusterFuture ... done
[08:08:24.449] | : signalConditions() ...
[08:08:24.449] | : . include = ‘immediateCondition’
[08:08:24.449] | : . exclude = 
[08:08:24.449] | : . resignal = FALSE
[08:08:24.449] | : . Number of conditions: 0
[08:08:24.449] | : .  int 0
[08:08:24.450] | : signalConditions() ... done
[08:08:24.450] | receiveMessageFromWorker() for ClusterFuture ... done
[08:08:24.450] | receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:24.450] resolved() for MultisessionFuture (<unnamed-52>) ... done
[08:08:24.450] assertFutureResult() ...
[08:08:24.450] | Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:24.450] | Future uuid: 52
[08:08:24.450] | identical; success
[08:08:24.450] assertFutureResult() ... done
[08:08:24.450] MultisessionFuture #3
[08:08:24.451] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:24.451] | nx: 6
[08:08:24.451] | relay: TRUE
[08:08:24.451] | stdout: TRUE
[08:08:24.451] | signal: TRUE
[08:08:24.451] | resignal: FALSE
[08:08:24.451] | force: TRUE
[08:08:24.451] | relayed: [n=6] TRUE, TRUE, FALSE, TRUE, TRUE, TRUE
[08:08:24.451] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.451] | until=6
[08:08:24.451] | relaying element #3
[08:08:24.452] | value() for MultisessionFuture (<unnamed-52>) ...
[08:08:24.452] | : result() for ClusterFuture ...
[08:08:24.452] | : . result already collected: FutureResult
[08:08:24.452] | : result() for ClusterFuture ... done
[08:08:24.452] | : result() for ClusterFuture ...
[08:08:24.452] | : . result already collected: FutureResult
[08:08:24.452] | : result() for ClusterFuture ... done
[08:08:24.452] | : signalConditions() ...
[08:08:24.452] | : . include = ‘immediateCondition’
[08:08:24.452] | : . exclude = 
[08:08:24.453] | : . resignal = FALSE
[08:08:24.453] | : . Number of conditions: 0
[08:08:24.453] | : .  int 0
[08:08:24.453] | : signalConditions() ... done
[08:08:24.453] | : relay stdout ...
[08:08:24.453] | : relay stdout ... done
[08:08:24.453] | : check for misuse ...
[08:08:24.454] | : check for misuse ... done
[08:08:24.454] | value() for MultisessionFuture (<unnamed-52>) ... done
[08:08:24.454] | result() for ClusterFuture ...
[08:08:24.454] | : result already collected: FutureResult
[08:08:24.454] | result() for ClusterFuture ... done
[08:08:24.454] | signalConditions() ...
[08:08:24.454] | : include = ‘immediateCondition’
[08:08:24.454] | : exclude = 
[08:08:24.454] | : resignal = FALSE
[08:08:24.454] | : Number of conditions: 0
[08:08:24.455] | :  int 0
[08:08:24.455] | signalConditions() ... done
[08:08:24.455] | result() for ClusterFuture ...
[08:08:24.455] | : result already collected: FutureResult
[08:08:24.455] | result() for ClusterFuture ... done
[08:08:24.455] | signalConditions() ...
[08:08:24.455] | : include = ‘condition’
[08:08:24.456] | : exclude = ‘error’, ‘immediateCondition’
[08:08:24.456] | : resignal = TRUE
[08:08:24.456] | : Number of conditions: 0
[08:08:24.456] | :  int 0
[08:08:24.456] | signalConditions() ... done
[08:08:24.456] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:24.456] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.456] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:24.457] value(<MultisessionFuture>, ...) ...
[08:08:24.457] value(<MultisessionFuture>, ...) ... done
[08:08:24.457] value() for MultisessionFuture (<unnamed-52>) ...
[08:08:24.457] | result() for ClusterFuture ...
[08:08:24.457] | : result already collected: FutureResult
[08:08:24.457] | result() for ClusterFuture ... done
[08:08:24.457] | result() for ClusterFuture ...
[08:08:24.457] | : result already collected: FutureResult
[08:08:24.457] | result() for ClusterFuture ... done
[08:08:24.457] | signalConditions() ...
[08:08:24.458] | : include = ‘immediateCondition’
[08:08:24.458] | : exclude = 
[08:08:24.458] | : resignal = FALSE
[08:08:24.458] | : Number of conditions: 0
[08:08:24.458] | :  int 0
[08:08:24.458] | signalConditions() ... done
[08:08:24.458] | check for misuse ...
[08:08:24.459] | check for misuse ... done
[08:08:24.459] value() for MultisessionFuture (<unnamed-52>) ... done
[08:08:24.459] value: <NULL>
[08:08:24.459] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:24.459] | nx: 6
[08:08:24.459] | relay: TRUE
[08:08:24.459] | stdout: TRUE
[08:08:24.459] | signal: TRUE
[08:08:24.459] | resignal: FALSE
[08:08:24.459] | force: TRUE
[08:08:24.459] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:24.460] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.460] | until=6
[08:08:24.460] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:24.460] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.460] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:24.460] resolve() for MultisessionFuture ...
[08:08:24.460] resolve() for MultisessionFuture ... done
[08:08:24.460] length: 0 (resolved future 3)

[08:08:24.460] Relaying remaining futures ...
[08:08:24.460] | signalConditionsASAP(NULL, pos=0) ...
[08:08:24.461] | : nx: 6
[08:08:24.461] | : relay: TRUE
[08:08:24.461] | : stdout: TRUE
[08:08:24.461] | : signal: TRUE
[08:08:24.461] | : resignal: FALSE
[08:08:24.461] | : force: TRUE
[08:08:24.461] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:24.461] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
 - flush all
[08:08:24.461] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:24.461] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.462] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:24.462] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $  : NULL
 $  : NULL
 $  : num 6
Dimensions: c(1, 6)
[08:08:24.464] future(..., label = NULL) ...
[08:08:24.464] | lazy: FALSE
[08:08:24.464] | stdout: TRUE
[08:08:24.464] | conditions: [n=1] ‘condition’
[08:08:24.464] | gc: FALSE
[08:08:24.464] | earlySignal: FALSE
[08:08:24.464] | getGlobalsAndPackages() ...
[08:08:24.464] | : Searching for globals ...
[08:08:24.466] | : . globals found: [0] 
[08:08:24.466] | : Searching for globals ... done
[08:08:24.466] | : globals: [0] <none>
[08:08:24.466] | : packages: [0] <none>
[08:08:24.466] | getGlobalsAndPackages() ... done
[08:08:24.466] | run() for ‘Future’ (<unnamed-53>) ...
[08:08:24.466] | : state: ‘created’
[08:08:24.467] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:24.467] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:24.467] | : Using MultisessionFutureBackend ...
[08:08:24.467] | : . Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:08:24.467] | : . Launching futures ...
[08:08:24.467] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:24.467] | : . ' , Workers: [n=2]
[08:08:24.467] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:24.469] | : . ' , FutureRegistry: ‘workers-681b6315fba68606aeaf4c7e3afba472’
[08:08:24.469] | : . ' , requestWorker() ...
[08:08:24.469] | : . ' , ; requestNode() ...
[08:08:24.469] | : . ' , ; ` Number of workers: 2
[08:08:24.469] | : . ' , ; ` Polling for a free worker ...
[08:08:24.469] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ...
[08:08:24.470] | : . ' , ; ` | : Listing all futures
[08:08:24.470] | : . ' , ; ` | : Number of registered futures: 0
[08:08:24.470] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ... done
[08:08:24.470] | : . ' , ; ` | Total time: 0
[08:08:24.470] | : . ' , ; ` Polling for a free worker ... done
[08:08:24.470] | : . ' , ; ` FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ...
[08:08:24.470] | : . ' , ; ` | Listing all futures
[08:08:24.470] | : . ' , ; ` | Number of registered futures: 0
[08:08:24.470] | : . ' , ; ` FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ... done
[08:08:24.470] | : . ' , ; ` avail: [n=2] ‘1’, ‘2’
[08:08:24.471] | : . ' , ; ` Index of first available worker: 1
[08:08:24.471] | : . ' , ; ` Validate that the worker is functional ...
[08:08:24.530] | : . ' , ; ` | Worker is functional
[08:08:24.530] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ...
[08:08:24.530] | : . ' , ; ` | : Listing all futures
[08:08:24.530] | : . ' , ; ` | : Number of registered futures: 0
[08:08:24.530] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ... done
[08:08:24.530] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:24.531] | : . ' , ; requestNode() ... done
[08:08:24.531] | : . ' , ; cluster node index: 1
[08:08:24.531] | : . ' , requestWorker() ... done
[08:08:24.531] | : . ' , eraseGlobalEnvironment() ...
[08:08:24.531] | : . ' , eraseGlobalEnvironment() ... done
[08:08:24.531] | : . ' , launchFuture() ...
[08:08:24.532] | : . ' , ; cluster node index: 1
[08:08:24.532] | : . ' , ; getFutureData() ...
[08:08:24.532] | : . ' , ; ` getFutureCore() ...
[08:08:24.532] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:24.532] | : . ' , ; ` getFutureCore() ... done
[08:08:24.532] | : . ' , ; ` getFutureCapture() ...
[08:08:24.532] | : . ' , ; ` getFutureCapture() ... done
[08:08:24.532] | : . ' , ; ` getFutureContext() ...
[08:08:24.532] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:24.532] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:24.534] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:24.534] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:24.534] | : . ' , ; ` getFutureContext() ... done
[08:08:24.535] | : . ' , ; getFutureData() ... done
[08:08:24.535] | : . ' , ; FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'add', earlySignal = 0) ...
[08:08:24.535] | : . ' , ; ` Appended future to position #1
[08:08:24.535] | : . ' , ; ` Number of registered futures: 1
[08:08:24.535] | : . ' , ; FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'add', earlySignal = 0) ... done
[08:08:24.535] | : . ' , launchFuture() ... done
[08:08:24.535] | : . ' , MultisessionFuture started
[08:08:24.536] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:24.536] | : . Launching futures ... done
[08:08:24.536] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:24.536] | : Using MultisessionFutureBackend ... done
[08:08:24.536] | run() for ‘Future’ (<unnamed-53>) ... done
[08:08:24.536] future(..., label = NULL) ... done
[08:08:24.536] future(..., label = NULL) ...
[08:08:24.536] | lazy: FALSE
[08:08:24.536] | stdout: TRUE
[08:08:24.537] | conditions: [n=1] ‘condition’
[08:08:24.537] | gc: FALSE
[08:08:24.537] | earlySignal: FALSE
[08:08:24.537] | getGlobalsAndPackages() ...
[08:08:24.537] | : Searching for globals ...
[08:08:24.538] | : . globals found: [0] 
[08:08:24.538] | : Searching for globals ... done
[08:08:24.538] | : globals: [0] <none>
[08:08:24.538] | : packages: [0] <none>
[08:08:24.538] | getGlobalsAndPackages() ... done
[08:08:24.539] | run() for ‘Future’ (<unnamed-54>) ...
[08:08:24.539] | : state: ‘created’
[08:08:24.539] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:24.539] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:24.539] | : Using MultisessionFutureBackend ...
[08:08:24.539] | : . Number of futures since start: 3 (3 created, 3 launched, 2 finished)
[08:08:24.539] | : . Launching futures ...
[08:08:24.539] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:24.540] | : . ' , Workers: [n=2]
[08:08:24.540] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:24.541] | : . ' , FutureRegistry: ‘workers-681b6315fba68606aeaf4c7e3afba472’
[08:08:24.541] | : . ' , requestWorker() ...
[08:08:24.541] | : . ' , ; requestNode() ...
[08:08:24.541] | : . ' , ; ` Number of workers: 2
[08:08:24.542] | : . ' , ; ` Polling for a free worker ...
[08:08:24.542] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ...
[08:08:24.542] | : . ' , ; ` | : Listing all futures
[08:08:24.542] | : . ' , ; ` | : Number of registered futures: 1
[08:08:24.542] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ... done
[08:08:24.542] | : . ' , ; ` | Total time: 0
[08:08:24.542] | : . ' , ; ` Polling for a free worker ... done
[08:08:24.542] | : . ' , ; ` FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ...
[08:08:24.542] | : . ' , ; ` | Listing all futures
[08:08:24.542] | : . ' , ; ` | Number of registered futures: 1
[08:08:24.543] | : . ' , ; ` FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ... done
[08:08:24.543] | : . ' , ; ` avail: [n=2] ‘2’
[08:08:24.543] | : . ' , ; ` Index of first available worker: 2
[08:08:24.543] | : . ' , ; ` Validate that the worker is functional ...
[08:08:24.598] | : . ' , ; ` | Worker is functional
[08:08:24.598] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ...
[08:08:24.598] | : . ' , ; ` | : Listing all futures
[08:08:24.598] | : . ' , ; ` | : Number of registered futures: 1
[08:08:24.598] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ... done
[08:08:24.599] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:24.599] | : . ' , ; requestNode() ... done
[08:08:24.599] | : . ' , ; cluster node index: 2
[08:08:24.599] | : . ' , requestWorker() ... done
[08:08:24.599] | : . ' , eraseGlobalEnvironment() ...
[08:08:24.599] | : . ' , eraseGlobalEnvironment() ... done
[08:08:24.600] | : . ' , launchFuture() ...
[08:08:24.600] | : . ' , ; cluster node index: 2
[08:08:24.600] | : . ' , ; getFutureData() ...
[08:08:24.600] | : . ' , ; ` getFutureCore() ...
[08:08:24.600] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:24.600] | : . ' , ; ` getFutureCore() ... done
[08:08:24.600] | : . ' , ; ` getFutureCapture() ...
[08:08:24.600] | : . ' , ; ` getFutureCapture() ... done
[08:08:24.600] | : . ' , ; ` getFutureContext() ...
[08:08:24.600] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:24.601] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:24.601] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:24.601] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:24.601] | : . ' , ; ` getFutureContext() ... done
[08:08:24.601] | : . ' , ; getFutureData() ... done
[08:08:24.601] | : . ' , ; FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'add', earlySignal = 0) ...
[08:08:24.601] | : . ' , ; ` Appended future to position #2
[08:08:24.602] | : . ' , ; ` Number of registered futures: 2
[08:08:24.602] | : . ' , ; FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'add', earlySignal = 0) ... done
[08:08:24.602] | : . ' , launchFuture() ... done
[08:08:24.602] | : . ' , MultisessionFuture started
[08:08:24.602] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:24.602] | : . Launching futures ... done
[08:08:24.602] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:24.602] | : Using MultisessionFutureBackend ... done
[08:08:24.602] | run() for ‘Future’ (<unnamed-54>) ... done
[08:08:24.603] future(..., label = NULL) ... done
List of 6
 $ a: num 1
 $ b:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x5643024929a8> 
 $ c:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x564304697ee8> 
 $  : NULL
 $  : NULL
 $  : num 6
List of 6
 $ a: num 1
 $ b:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x5643024929a8> 
 $ c:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x564304697ee8> 
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 1 6
 - attr(*, "dimnames")=List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
[08:08:24.608] resolved() for matrix ...
[08:08:24.608] | Number of elements: 6
[08:08:24.608] | Number of futures: 6
[08:08:24.608] | resolved() for MultisessionFuture (<unnamed-53>) ...
[08:08:24.608] | : Cluster node socket connection: index=4, id=984
[08:08:24.608] | : assertValidConnection() ...
[08:08:24.608] | : . cluster node index: 1
[08:08:24.609] | : assertValidConnection() ... done
[08:08:24.609] | : receiveMessageFromWorker() for ClusterFuture ...
[08:08:24.609] | : . cluster node index: 1
[08:08:24.609] | : . [1] TRUE
[08:08:24.609] | : . received data:
[08:08:24.610] | : . List of 5
[08:08:24.610] | : .  $ type   : chr "VALUE"
[08:08:24.610] | : .  $ value  :List of 16
[08:08:24.610] | : .   ..$ value              : num 2
[08:08:24.610] | : .   ..$ visible            : logi TRUE
[08:08:24.610] | : .   ..$ stdout             : chr ""
[08:08:24.610] | : .   ..$ conditions         : list()
[08:08:24.610] | : .   ..$ rng                : logi FALSE
[08:08:24.610] | : .   ..$ seed               : NULL
[08:08:24.610] | : .   ..$ misuseGlobalEnv    : NULL
[08:08:24.610] | : .   ..$ misuseConnections  :List of 3
[08:08:24.610] | : .   .. ..$ added   : NULL
[08:08:24.610] | : .   .. ..$ removed : NULL
[08:08:24.610] | : .   .. ..$ replaced: NULL
[08:08:24.610] | : .   ..$ misuseDevices      : NULL
[08:08:24.610] | : .   ..$ misuseDefaultDevice: list()
[08:08:24.610] | : .   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:24"
[08:08:24.610] | : .   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:24"
[08:08:24.610] | : .   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "53"
[08:08:24.610] | : .   ..$ session_uuid       : chr "fc6c016afc99663cf036a2d323992128"
[08:08:24.610] | : .   .. ..- attr(*, "source")=List of 5
[08:08:24.610] | : .   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:24.610] | : .   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:24.610] | : .   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:24.610] | : .   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:24.610] | : .   .. .. ..$ pid   : int 69003
[08:08:24.610] | : .   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:24"
[08:08:24.610] | : .   .. .. ..$ random: int 2147483647
[08:08:24.610] | : .   ..$ r_info             :List of 4
[08:08:24.610] | : .   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:24.610] | : .   .. .. ..$ : int [1:3] 4 5 0
[08:08:24.610] | : .   .. ..$ os           : chr "unix"
[08:08:24.610] | : .   .. ..$ os_name      : chr "Linux"
[08:08:24.610] | : .   .. ..$ captures_utf8: logi TRUE
[08:08:24.610] | : .   ..$ version            : chr "1.8"
[08:08:24.610] | : .   ..- attr(*, "class")= chr "FutureResult"
[08:08:24.610] | : .  $ success: logi TRUE
[08:08:24.610] | : .  $ time   : 'proc_time' Named num [1:5] 0.004 0 0.004 0 0
[08:08:24.610] | : .   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:24.610] | : .  $ tag    : NULL
[08:08:24.620] | : . Received FutureResult
[08:08:24.620] | : . FutureResult:
[08:08:24.620] | : . value: ‘numeric’
[08:08:24.620] | : . visible: TRUE
[08:08:24.620] | : . stdout: character
[08:08:24.620] | : . conditions: [n = 0] 
[08:08:24.620] | : . RNG used: FALSE
[08:08:24.620] | : . duration: 0.00382781 secs (started 2025-06-17 08:08:24.576277)
[08:08:24.620] | : . version: 1.8
[08:08:24.621] | : . FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'remove', earlySignal = 0) ...
[08:08:24.621] | : . ' Removed future from position #1
[08:08:24.621] | : . ' Number of registered futures: 1
[08:08:24.621] | : . FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'remove', earlySignal = 0) ... done
[08:08:24.621] | : . Erased future from future backend
[08:08:24.621] | : . result() for ClusterFuture ...
[08:08:24.621] | : . ' result already collected: FutureResult
[08:08:24.622] | : . result() for ClusterFuture ... done
[08:08:24.622] | : . signalConditions() ...
[08:08:24.622] | : . ' include = ‘immediateCondition’
[08:08:24.622] | : . ' exclude = 
[08:08:24.622] | : . ' resignal = FALSE
[08:08:24.622] | : . ' Number of conditions: 0
[08:08:24.622] | : . '  int 0
[08:08:24.622] | : . signalConditions() ... done
[08:08:24.623] | : receiveMessageFromWorker() for ClusterFuture ... done
[08:08:24.623] | : receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:24.623] | resolved() for MultisessionFuture (<unnamed-53>) ... done
[08:08:24.623] | assertFutureResult() ...
[08:08:24.623] | : Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:24.623] | : Future uuid: 53
[08:08:24.623] | : identical; success
[08:08:24.623] | assertFutureResult() ... done
[08:08:24.623] | resolved() for MultisessionFuture (<unnamed-54>) ...
[08:08:24.624] | : Cluster node socket connection: index=5, id=985
[08:08:24.624] | : assertValidConnection() ...
[08:08:24.624] | : . cluster node index: 2
[08:08:24.624] | : assertValidConnection() ... done
[08:08:24.634] | : socketSelect(list(<connection #5 (id=985)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:24.635] | resolved() for MultisessionFuture (<unnamed-54>) ... done
[08:08:24.635] resolved() for matrix ... done
 logi [1, 1:6] TRUE TRUE FALSE TRUE TRUE TRUE
 - attr(*, "dimnames")=List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
 - attr(*, "names")= chr [1:6] "a" "b" "c" "" ...
[08:08:24.636] value() for matrix ...
[08:08:24.636] | recursive: 0
[08:08:24.637] | reduce: FALSE
[08:08:24.637] | length: 6
[08:08:24.637] | elements: ‘a’, ‘b’, ‘c’, ‘’, ‘’, ‘’
[08:08:24.637] | Number of remaining objects: 6
[08:08:24.637] | checking value #1:
[08:08:24.637] | 'obj' is atomic
[08:08:24.637] | signalConditionsASAP(numeric, pos=1) ...
[08:08:24.637] | : nx: 6
[08:08:24.638] | : relay: TRUE
[08:08:24.638] | : stdout: TRUE
[08:08:24.638] | : signal: TRUE
[08:08:24.638] | : resignal: FALSE
[08:08:24.638] | : force: TRUE
[08:08:24.638] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:24.638] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:24.638] | : until=2
[08:08:24.638] | : relaying element #2
[08:08:24.638] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:24.638] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:24.639] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:24.639] | length: 5 (resolved future 1)
[08:08:24.639] value() for matrix ... done
[08:08:24.639] checking value #2:
[08:08:24.639] 'obj' is MultisessionFuture
[08:08:24.639] MultisessionFuture #2
[08:08:24.639] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:24.639] | nx: 6
[08:08:24.639] | relay: TRUE
[08:08:24.639] | stdout: TRUE
[08:08:24.640] | signal: TRUE
[08:08:24.640] | resignal: FALSE
[08:08:24.640] | force: TRUE
[08:08:24.640] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:24.640] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:24.640] | until=2
[08:08:24.640] | relaying element #2
[08:08:24.640] | value() for MultisessionFuture (<unnamed-53>) ...
[08:08:24.640] | : result() for ClusterFuture ...
[08:08:24.640] | : . result already collected: FutureResult
[08:08:24.640] | : result() for ClusterFuture ... done
[08:08:24.641] | : result() for ClusterFuture ...
[08:08:24.641] | : . result already collected: FutureResult
[08:08:24.641] | : result() for ClusterFuture ... done
[08:08:24.641] | : signalConditions() ...
[08:08:24.641] | : . include = ‘immediateCondition’
[08:08:24.641] | : . exclude = 
[08:08:24.641] | : . resignal = FALSE
[08:08:24.641] | : . Number of conditions: 0
[08:08:24.641] | : .  int 0
[08:08:24.642] | : signalConditions() ... done
[08:08:24.642] | : relay stdout ...
[08:08:24.642] | : relay stdout ... done
[08:08:24.642] | : check for misuse ...
[08:08:24.642] | : check for misuse ... done
[08:08:24.642] | value() for MultisessionFuture (<unnamed-53>) ... done
[08:08:24.642] | result() for ClusterFuture ...
[08:08:24.643] | : result already collected: FutureResult
[08:08:24.643] | result() for ClusterFuture ... done
[08:08:24.643] | signalConditions() ...
[08:08:24.643] | : include = ‘immediateCondition’
[08:08:24.643] | : exclude = 
[08:08:24.643] | : resignal = FALSE
[08:08:24.643] | : Number of conditions: 0
[08:08:24.643] | :  int 0
[08:08:24.644] | signalConditions() ... done
[08:08:24.644] | result() for ClusterFuture ...
[08:08:24.644] | : result already collected: FutureResult
[08:08:24.644] | result() for ClusterFuture ... done
[08:08:24.644] | signalConditions() ...
[08:08:24.644] | : include = ‘condition’
[08:08:24.644] | : exclude = ‘error’, ‘immediateCondition’
[08:08:24.644] | : resignal = TRUE
[08:08:24.644] | : Number of conditions: 0
[08:08:24.644] | :  int 0
[08:08:24.645] | signalConditions() ... done
[08:08:24.645] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.645] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.645] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:24.645] value(<MultisessionFuture>, ...) ...
[08:08:24.645] value(<MultisessionFuture>, ...) ... done
[08:08:24.645] value() for MultisessionFuture (<unnamed-53>) ...
[08:08:24.646] | result() for ClusterFuture ...
[08:08:24.646] | : result already collected: FutureResult
[08:08:24.646] | result() for ClusterFuture ... done
[08:08:24.646] | result() for ClusterFuture ...
[08:08:24.646] | : result already collected: FutureResult
[08:08:24.646] | result() for ClusterFuture ... done
[08:08:24.646] | signalConditions() ...
[08:08:24.646] | : include = ‘immediateCondition’
[08:08:24.646] | : exclude = 
[08:08:24.646] | : resignal = FALSE
[08:08:24.647] | : Number of conditions: 0
[08:08:24.647] | :  int 0
[08:08:24.647] | signalConditions() ... done
[08:08:24.647] | check for misuse ...
[08:08:24.647] | check for misuse ... done
[08:08:24.647] value() for MultisessionFuture (<unnamed-53>) ... done
[08:08:24.647] value: <numeric>
[08:08:24.648] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:24.648] | nx: 6
[08:08:24.648] | relay: TRUE
[08:08:24.648] | stdout: TRUE
[08:08:24.648] | signal: TRUE
[08:08:24.648] | resignal: FALSE
[08:08:24.648] | force: TRUE
[08:08:24.648] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.648] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.648] | until=3
[08:08:24.648] | relaying element #3
[08:08:24.649] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.649] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.649] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:24.649] resolve() for MultisessionFuture ...
[08:08:24.649] resolve() for MultisessionFuture ... done
[08:08:24.649] length: 4 (resolved future 2)

[08:08:24.649] checking value #3:
[08:08:24.649] 'obj' is MultisessionFuture
[08:08:24.649] resolved() for MultisessionFuture (<unnamed-54>) ...
[08:08:24.650] | Cluster node socket connection: index=5, id=985
[08:08:24.650] | assertValidConnection() ...
[08:08:24.650] | : cluster node index: 2
[08:08:24.650] | assertValidConnection() ... done
[08:08:24.650] | receiveMessageFromWorker() for ClusterFuture ...
[08:08:24.650] | : cluster node index: 2
[08:08:24.651] | : [1] TRUE
[08:08:24.651] | : received data:
[08:08:24.651] | : List of 5
[08:08:24.651] | :  $ type   : chr "VALUE"
[08:08:24.651] | :  $ value  :List of 16
[08:08:24.651] | :   ..$ value              : NULL
[08:08:24.651] | :   ..$ visible            : logi TRUE
[08:08:24.651] | :   ..$ stdout             : chr ""
[08:08:24.651] | :   ..$ conditions         : list()
[08:08:24.651] | :   ..$ rng                : logi FALSE
[08:08:24.651] | :   ..$ seed               : NULL
[08:08:24.651] | :   ..$ misuseGlobalEnv    : NULL
[08:08:24.651] | :   ..$ misuseConnections  :List of 3
[08:08:24.651] | :   .. ..$ added   : NULL
[08:08:24.651] | :   .. ..$ removed : NULL
[08:08:24.651] | :   .. ..$ replaced: NULL
[08:08:24.651] | :   ..$ misuseDevices      : NULL
[08:08:24.651] | :   ..$ misuseDefaultDevice: list()
[08:08:24.651] | :   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:24"
[08:08:24.651] | :   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:24"
[08:08:24.651] | :   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "54"
[08:08:24.651] | :   ..$ session_uuid       : chr "39c3116ea80068179a88abb33369ed7b"
[08:08:24.651] | :   .. ..- attr(*, "source")=List of 5
[08:08:24.651] | :   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:24.651] | :   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:24.651] | :   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:24.651] | :   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:24.651] | :   .. .. ..$ pid   : int 69004
[08:08:24.651] | :   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:24"
[08:08:24.651] | :   .. .. ..$ random: int 2147483647
[08:08:24.651] | :   ..$ r_info             :List of 4
[08:08:24.651] | :   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:24.651] | :   .. .. ..$ : int [1:3] 4 5 0
[08:08:24.651] | :   .. ..$ os           : chr "unix"
[08:08:24.651] | :   .. ..$ os_name      : chr "Linux"
[08:08:24.651] | :   .. ..$ captures_utf8: logi TRUE
[08:08:24.651] | :   ..$ version            : chr "1.8"
[08:08:24.651] | :   ..- attr(*, "class")= chr "FutureResult"
[08:08:24.651] | :  $ success: logi TRUE
[08:08:24.651] | :  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[08:08:24.651] | :   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:24.651] | :  $ tag    : NULL
[08:08:24.663] | : Received FutureResult
[08:08:24.663] | : FutureResult:
[08:08:24.663] | : value: ‘NULL’
[08:08:24.663] | : visible: TRUE
[08:08:24.663] | : stdout: character
[08:08:24.663] | : conditions: [n = 0] 
[08:08:24.663] | : RNG used: FALSE
[08:08:24.663] | : duration: 0.002603054 secs (started 2025-06-17 08:08:24.642179)
[08:08:24.663] | : version: 1.8
[08:08:24.664] | : FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'remove', earlySignal = 0) ...
[08:08:24.664] | : . Removed future from position #1
[08:08:24.664] | : . Number of registered futures: 0
[08:08:24.664] | : FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'remove', earlySignal = 0) ... done
[08:08:24.664] | : Erased future from future backend
[08:08:24.664] | : result() for ClusterFuture ...
[08:08:24.664] | : . result already collected: FutureResult
[08:08:24.664] | : result() for ClusterFuture ... done
[08:08:24.664] | : signalConditions() ...
[08:08:24.665] | : . include = ‘immediateCondition’
[08:08:24.665] | : . exclude = 
[08:08:24.665] | : . resignal = FALSE
[08:08:24.665] | : . Number of conditions: 0
[08:08:24.665] | : .  int 0
[08:08:24.665] | : signalConditions() ... done
[08:08:24.665] | receiveMessageFromWorker() for ClusterFuture ... done
[08:08:24.666] | receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:24.666] resolved() for MultisessionFuture (<unnamed-54>) ... done
[08:08:24.666] assertFutureResult() ...
[08:08:24.666] | Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:24.666] | Future uuid: 54
[08:08:24.666] | identical; success
[08:08:24.666] assertFutureResult() ... done
[08:08:24.666] MultisessionFuture #3
[08:08:24.666] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:24.666] | nx: 6
[08:08:24.666] | relay: TRUE
[08:08:24.666] | stdout: TRUE
[08:08:24.667] | signal: TRUE
[08:08:24.667] | resignal: FALSE
[08:08:24.667] | force: TRUE
[08:08:24.667] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.667] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.667] | until=3
[08:08:24.667] | relaying element #3
[08:08:24.667] | value() for MultisessionFuture (<unnamed-54>) ...
[08:08:24.667] | : result() for ClusterFuture ...
[08:08:24.667] | : . result already collected: FutureResult
[08:08:24.667] | : result() for ClusterFuture ... done
[08:08:24.668] | : result() for ClusterFuture ...
[08:08:24.668] | : . result already collected: FutureResult
[08:08:24.668] | : result() for ClusterFuture ... done
[08:08:24.668] | : signalConditions() ...
[08:08:24.668] | : . include = ‘immediateCondition’
[08:08:24.668] | : . exclude = 
[08:08:24.668] | : . resignal = FALSE
[08:08:24.668] | : . Number of conditions: 0
[08:08:24.668] | : .  int 0
[08:08:24.669] | : signalConditions() ... done
[08:08:24.669] | : relay stdout ...
[08:08:24.669] | : relay stdout ... done
[08:08:24.669] | : check for misuse ...
[08:08:24.669] | : check for misuse ... done
[08:08:24.669] | value() for MultisessionFuture (<unnamed-54>) ... done
[08:08:24.669] | result() for ClusterFuture ...
[08:08:24.669] | : result already collected: FutureResult
[08:08:24.670] | result() for ClusterFuture ... done
[08:08:24.670] | signalConditions() ...
[08:08:24.670] | : include = ‘immediateCondition’
[08:08:24.670] | : exclude = 
[08:08:24.670] | : resignal = FALSE
[08:08:24.670] | : Number of conditions: 0
[08:08:24.670] | :  int 0
[08:08:24.671] | signalConditions() ... done
[08:08:24.671] | result() for ClusterFuture ...
[08:08:24.671] | : result already collected: FutureResult
[08:08:24.671] | result() for ClusterFuture ... done
[08:08:24.671] | signalConditions() ...
[08:08:24.671] | : include = ‘condition’
[08:08:24.671] | : exclude = ‘error’, ‘immediateCondition’
[08:08:24.671] | : resignal = TRUE
[08:08:24.671] | : Number of conditions: 0
[08:08:24.671] | :  int 0
[08:08:24.672] | signalConditions() ... done
[08:08:24.672] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.672] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.672] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:24.672] value(<MultisessionFuture>, ...) ...
[08:08:24.672] value(<MultisessionFuture>, ...) ... done
[08:08:24.672] value() for MultisessionFuture (<unnamed-54>) ...
[08:08:24.672] | result() for ClusterFuture ...
[08:08:24.673] | : result already collected: FutureResult
[08:08:24.673] | result() for ClusterFuture ... done
[08:08:24.673] | result() for ClusterFuture ...
[08:08:24.673] | : result already collected: FutureResult
[08:08:24.673] | result() for ClusterFuture ... done
[08:08:24.673] | signalConditions() ...
[08:08:24.673] | : include = ‘immediateCondition’
[08:08:24.673] | : exclude = 
[08:08:24.673] | : resignal = FALSE
[08:08:24.673] | : Number of conditions: 0
[08:08:24.673] | :  int 0
[08:08:24.674] | signalConditions() ... done
[08:08:24.674] | check for misuse ...
[08:08:24.674] | check for misuse ... done
[08:08:24.674] value() for MultisessionFuture (<unnamed-54>) ... done
[08:08:24.674] value: <NULL>
[08:08:24.674] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:24.674] | nx: 6
[08:08:24.674] | relay: TRUE
[08:08:24.675] | stdout: TRUE
[08:08:24.675] | signal: TRUE
[08:08:24.675] | resignal: FALSE
[08:08:24.675] | force: TRUE
[08:08:24.675] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.675] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.675] | until=4
[08:08:24.675] | relaying element #4
[08:08:24.675] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.675] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.676] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:24.676] resolve() for MultisessionFuture ...
[08:08:24.676] resolve() for MultisessionFuture ... done
[08:08:24.676] length: 3 (resolved future 3)

[08:08:24.676] checking value #4:
[08:08:24.676] 'obj' is NULL
[08:08:24.676] signalConditionsASAP(NULL, pos=4) ...
[08:08:24.676] | nx: 6
[08:08:24.676] | relay: TRUE
[08:08:24.676] | stdout: TRUE
[08:08:24.677] | signal: TRUE
[08:08:24.677] | resignal: FALSE
[08:08:24.677] | force: TRUE
[08:08:24.677] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.677] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.677] | until=5
[08:08:24.677] | relaying element #5
[08:08:24.677] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:24.677] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.677] signalConditionsASAP(NULL, pos=4) ... done
[08:08:24.677] signalConditionsASAP(NULL, pos=4) ...
[08:08:24.678] | nx: 6
[08:08:24.678] | relay: TRUE
[08:08:24.678] | stdout: TRUE
[08:08:24.678] | signal: TRUE
[08:08:24.678] | resignal: FALSE
[08:08:24.678] | force: TRUE
[08:08:24.678] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:24.678] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.678] | until=5
[08:08:24.678] | relaying element #5
[08:08:24.678] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:24.679] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.679] signalConditionsASAP(NULL, pos=4) ... done
[08:08:24.679] length: 2 (resolved future 4)

[08:08:24.679] checking value #5:
[08:08:24.679] 'obj' is NULL
[08:08:24.679] signalConditionsASAP(NULL, pos=5) ...
[08:08:24.679] | nx: 6
[08:08:24.679] | relay: TRUE
[08:08:24.679] | stdout: TRUE
[08:08:24.679] | signal: TRUE
[08:08:24.680] | resignal: FALSE
[08:08:24.680] | force: TRUE
[08:08:24.680] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:24.680] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.680] | until=6
[08:08:24.680] | relaying element #6
[08:08:24.680] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:24.680] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.680] signalConditionsASAP(NULL, pos=5) ... done
[08:08:24.680] signalConditionsASAP(NULL, pos=5) ...
[08:08:24.680] | nx: 6
[08:08:24.681] | relay: TRUE
[08:08:24.681] | stdout: TRUE
[08:08:24.681] | signal: TRUE
[08:08:24.681] | resignal: FALSE
[08:08:24.681] | force: TRUE
[08:08:24.681] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:24.681] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.681] | until=6
[08:08:24.681] | relaying element #6
[08:08:24.681] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:24.681] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.681] signalConditionsASAP(NULL, pos=5) ... done
[08:08:24.682] length: 1 (resolved future 5)

[08:08:24.682] checking value #6:
[08:08:24.682] 'obj' is atomic
[08:08:24.682] signalConditionsASAP(numeric, pos=6) ...
[08:08:24.682] | nx: 6
[08:08:24.682] | relay: TRUE
[08:08:24.682] | stdout: TRUE
[08:08:24.682] | signal: TRUE
[08:08:24.682] | resignal: FALSE
[08:08:24.682] | force: TRUE
[08:08:24.683] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:24.683] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.683] | until=6
[08:08:24.683] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:24.683] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.683] signalConditionsASAP(numeric, pos=6) ... done
[08:08:24.683] length: 0 (resolved future 6)

[08:08:24.683] Relaying remaining futures ...
[08:08:24.683] | signalConditionsASAP(NULL, pos=0) ...
[08:08:24.683] | : nx: 6
[08:08:24.684] | : relay: TRUE
[08:08:24.684] | : stdout: TRUE
[08:08:24.684] | : signal: TRUE
[08:08:24.684] | : resignal: FALSE
[08:08:24.684] | : force: TRUE
[08:08:24.684] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:24.684] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
 - flush all
[08:08:24.684] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:24.684] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.684] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:24.685] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 1 6
 - attr(*, "dimnames")=List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
Dimensions: c(2, 3)
[08:08:24.688] future(..., label = NULL) ...
[08:08:24.688] | lazy: FALSE
[08:08:24.688] | stdout: TRUE
[08:08:24.688] | conditions: [n=1] ‘condition’
[08:08:24.688] | gc: FALSE
[08:08:24.688] | earlySignal: FALSE
[08:08:24.688] | getGlobalsAndPackages() ...
[08:08:24.688] | : Searching for globals ...
[08:08:24.690] | : . globals found: [0] 
[08:08:24.690] | : Searching for globals ... done
[08:08:24.690] | : globals: [0] <none>
[08:08:24.690] | : packages: [0] <none>
[08:08:24.690] | getGlobalsAndPackages() ... done
[08:08:24.690] | run() for ‘Future’ (<unnamed-55>) ...
[08:08:24.690] | : state: ‘created’
[08:08:24.691] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:24.691] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:24.691] | : Using MultisessionFutureBackend ...
[08:08:24.691] | : . Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:08:24.691] | : . Launching futures ...
[08:08:24.691] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:24.691] | : . ' , Workers: [n=2]
[08:08:24.691] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:24.693] | : . ' , FutureRegistry: ‘workers-681b6315fba68606aeaf4c7e3afba472’
[08:08:24.693] | : . ' , requestWorker() ...
[08:08:24.693] | : . ' , ; requestNode() ...
[08:08:24.693] | : . ' , ; ` Number of workers: 2
[08:08:24.693] | : . ' , ; ` Polling for a free worker ...
[08:08:24.693] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ...
[08:08:24.693] | : . ' , ; ` | : Listing all futures
[08:08:24.694] | : . ' , ; ` | : Number of registered futures: 0
[08:08:24.694] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ... done
[08:08:24.694] | : . ' , ; ` | Total time: 0
[08:08:24.694] | : . ' , ; ` Polling for a free worker ... done
[08:08:24.694] | : . ' , ; ` FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ...
[08:08:24.694] | : . ' , ; ` | Listing all futures
[08:08:24.694] | : . ' , ; ` | Number of registered futures: 0
[08:08:24.694] | : . ' , ; ` FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ... done
[08:08:24.694] | : . ' , ; ` avail: [n=2] ‘1’, ‘2’
[08:08:24.694] | : . ' , ; ` Index of first available worker: 1
[08:08:24.695] | : . ' , ; ` Validate that the worker is functional ...
[08:08:24.788] | : . ' , ; ` | Worker is functional
[08:08:24.788] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ...
[08:08:24.788] | : . ' , ; ` | : Listing all futures
[08:08:24.789] | : . ' , ; ` | : Number of registered futures: 0
[08:08:24.789] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ... done
[08:08:24.789] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:24.789] | : . ' , ; requestNode() ... done
[08:08:24.789] | : . ' , ; cluster node index: 1
[08:08:24.789] | : . ' , requestWorker() ... done
[08:08:24.789] | : . ' , eraseGlobalEnvironment() ...
[08:08:24.790] | : . ' , eraseGlobalEnvironment() ... done
[08:08:24.790] | : . ' , launchFuture() ...
[08:08:24.790] | : . ' , ; cluster node index: 1
[08:08:24.790] | : . ' , ; getFutureData() ...
[08:08:24.790] | : . ' , ; ` getFutureCore() ...
[08:08:24.790] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:24.790] | : . ' , ; ` getFutureCore() ... done
[08:08:24.790] | : . ' , ; ` getFutureCapture() ...
[08:08:24.790] | : . ' , ; ` getFutureCapture() ... done
[08:08:24.791] | : . ' , ; ` getFutureContext() ...
[08:08:24.791] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:24.791] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:24.791] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:24.791] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:24.791] | : . ' , ; ` getFutureContext() ... done
[08:08:24.791] | : . ' , ; getFutureData() ... done
[08:08:24.792] | : . ' , ; FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'add', earlySignal = 0) ...
[08:08:24.792] | : . ' , ; ` Appended future to position #1
[08:08:24.792] | : . ' , ; ` Number of registered futures: 1
[08:08:24.792] | : . ' , ; FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'add', earlySignal = 0) ... done
[08:08:24.792] | : . ' , launchFuture() ... done
[08:08:24.792] | : . ' , MultisessionFuture started
[08:08:24.792] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:24.792] | : . Launching futures ... done
[08:08:24.792] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:24.792] | : Using MultisessionFutureBackend ... done
[08:08:24.793] | run() for ‘Future’ (<unnamed-55>) ... done
[08:08:24.793] future(..., label = NULL) ... done
[08:08:24.793] future(..., label = NULL) ...
[08:08:24.793] | lazy: FALSE
[08:08:24.793] | stdout: TRUE
[08:08:24.793] | conditions: [n=1] ‘condition’
[08:08:24.793] | gc: FALSE
[08:08:24.793] | earlySignal: FALSE
[08:08:24.793] | getGlobalsAndPackages() ...
[08:08:24.793] | : Searching for globals ...
[08:08:24.795] | : . globals found: [0] 
[08:08:24.795] | : Searching for globals ... done
[08:08:24.795] | : globals: [0] <none>
[08:08:24.795] | : packages: [0] <none>
[08:08:24.795] | getGlobalsAndPackages() ... done
[08:08:24.795] | run() for ‘Future’ (<unnamed-56>) ...
[08:08:24.795] | : state: ‘created’
[08:08:24.796] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:24.796] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:24.796] | : Using MultisessionFutureBackend ...
[08:08:24.796] | : . Number of futures since start: 5 (5 created, 5 launched, 4 finished)
[08:08:24.796] | : . Launching futures ...
[08:08:24.796] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:24.796] | : . ' , Workers: [n=2]
[08:08:24.796] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:24.798] | : . ' , FutureRegistry: ‘workers-681b6315fba68606aeaf4c7e3afba472’
[08:08:24.798] | : . ' , requestWorker() ...
[08:08:24.798] | : . ' , ; requestNode() ...
[08:08:24.798] | : . ' , ; ` Number of workers: 2
[08:08:24.798] | : . ' , ; ` Polling for a free worker ...
[08:08:24.798] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ...
[08:08:24.799] | : . ' , ; ` | : Listing all futures
[08:08:24.799] | : . ' , ; ` | : Number of registered futures: 1
[08:08:24.799] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ... done
[08:08:24.799] | : . ' , ; ` | Total time: 0
[08:08:24.799] | : . ' , ; ` Polling for a free worker ... done
[08:08:24.799] | : . ' , ; ` FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ...
[08:08:24.799] | : . ' , ; ` | Listing all futures
[08:08:24.799] | : . ' , ; ` | Number of registered futures: 1
[08:08:24.799] | : . ' , ; ` FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ... done
[08:08:24.799] | : . ' , ; ` avail: [n=2] ‘2’
[08:08:24.800] | : . ' , ; ` Index of first available worker: 2
[08:08:24.800] | : . ' , ; ` Validate that the worker is functional ...
[08:08:24.897] | : . ' , ; ` | Worker is functional
[08:08:24.897] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ...
[08:08:24.898] | : . ' , ; ` | : Listing all futures
[08:08:24.898] | : . ' , ; ` | : Number of registered futures: 1
[08:08:24.898] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ... done
[08:08:24.898] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:24.898] | : . ' , ; requestNode() ... done
[08:08:24.898] | : . ' , ; cluster node index: 2
[08:08:24.898] | : . ' , requestWorker() ... done
[08:08:24.898] | : . ' , eraseGlobalEnvironment() ...
[08:08:24.899] | : . ' , eraseGlobalEnvironment() ... done
[08:08:24.899] | : . ' , launchFuture() ...
[08:08:24.899] | : . ' , ; cluster node index: 2
[08:08:24.899] | : . ' , ; getFutureData() ...
[08:08:24.899] | : . ' , ; ` getFutureCore() ...
[08:08:24.899] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:24.899] | : . ' , ; ` getFutureCore() ... done
[08:08:24.900] | : . ' , ; ` getFutureCapture() ...
[08:08:24.900] | : . ' , ; ` getFutureCapture() ... done
[08:08:24.900] | : . ' , ; ` getFutureContext() ...
[08:08:24.900] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:24.900] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:24.900] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:24.900] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:24.900] | : . ' , ; ` getFutureContext() ... done
[08:08:24.900] | : . ' , ; getFutureData() ... done
[08:08:24.901] | : . ' , ; FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'add', earlySignal = 0) ...
[08:08:24.901] | : . ' , ; ` Appended future to position #2
[08:08:24.901] | : . ' , ; ` Number of registered futures: 2
[08:08:24.901] | : . ' , ; FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'add', earlySignal = 0) ... done
[08:08:24.901] | : . ' , launchFuture() ... done
[08:08:24.901] | : . ' , MultisessionFuture started
[08:08:24.901] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:24.902] | : . Launching futures ... done
[08:08:24.902] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:24.902] | : Using MultisessionFutureBackend ... done
[08:08:24.902] | run() for ‘Future’ (<unnamed-56>) ... done
[08:08:24.902] future(..., label = NULL) ... done
List of 6
 $ a: num 1
 $ b:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x564303a2dcc0> 
 $ c:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x564302f36280> 
 $  : NULL
 $  : NULL
 $  : num 6
List of 6
 $ a: num 1
 $ b:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x564303a2dcc0> 
 $ c:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x564302f36280> 
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 2 3
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
[08:08:24.907] resolved() for matrix ...
[08:08:24.907] | Number of elements: 6
[08:08:24.907] | Number of futures: 6
[08:08:24.908] | resolved() for MultisessionFuture (<unnamed-55>) ...
[08:08:24.908] | : Cluster node socket connection: index=4, id=984
[08:08:24.908] | : assertValidConnection() ...
[08:08:24.908] | : . cluster node index: 1
[08:08:24.908] | : assertValidConnection() ... done
[08:08:24.909] | : receiveMessageFromWorker() for ClusterFuture ...
[08:08:24.909] | : . cluster node index: 1
[08:08:24.909] | : . [1] TRUE
[08:08:24.909] | : . received data:
[08:08:24.909] | : . List of 5
[08:08:24.909] | : .  $ type   : chr "VALUE"
[08:08:24.909] | : .  $ value  :List of 16
[08:08:24.909] | : .   ..$ value              : num 2
[08:08:24.909] | : .   ..$ visible            : logi TRUE
[08:08:24.909] | : .   ..$ stdout             : chr ""
[08:08:24.909] | : .   ..$ conditions         : list()
[08:08:24.909] | : .   ..$ rng                : logi FALSE
[08:08:24.909] | : .   ..$ seed               : NULL
[08:08:24.909] | : .   ..$ misuseGlobalEnv    : NULL
[08:08:24.909] | : .   ..$ misuseConnections  :List of 3
[08:08:24.909] | : .   .. ..$ added   : NULL
[08:08:24.909] | : .   .. ..$ removed : NULL
[08:08:24.909] | : .   .. ..$ replaced: NULL
[08:08:24.909] | : .   ..$ misuseDevices      : NULL
[08:08:24.909] | : .   ..$ misuseDefaultDevice: list()
[08:08:24.909] | : .   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:24"
[08:08:24.909] | : .   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:24"
[08:08:24.909] | : .   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "55"
[08:08:24.909] | : .   ..$ session_uuid       : chr "fc6c016afc99663cf036a2d323992128"
[08:08:24.909] | : .   .. ..- attr(*, "source")=List of 5
[08:08:24.909] | : .   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:24.909] | : .   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:24.909] | : .   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:24.909] | : .   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:24.909] | : .   .. .. ..$ pid   : int 69003
[08:08:24.909] | : .   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:24"
[08:08:24.909] | : .   .. .. ..$ random: int 2147483647
[08:08:24.909] | : .   ..$ r_info             :List of 4
[08:08:24.909] | : .   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:24.909] | : .   .. .. ..$ : int [1:3] 4 5 0
[08:08:24.909] | : .   .. ..$ os           : chr "unix"
[08:08:24.909] | : .   .. ..$ os_name      : chr "Linux"
[08:08:24.909] | : .   .. ..$ captures_utf8: logi TRUE
[08:08:24.909] | : .   ..$ version            : chr "1.8"
[08:08:24.909] | : .   ..- attr(*, "class")= chr "FutureResult"
[08:08:24.909] | : .  $ success: logi TRUE
[08:08:24.909] | : .  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:24.909] | : .   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:24.909] | : .  $ tag    : NULL
[08:08:24.922] | : . Received FutureResult
[08:08:24.922] | : . FutureResult:
[08:08:24.922] | : . value: ‘numeric’
[08:08:24.922] | : . visible: TRUE
[08:08:24.922] | : . stdout: character
[08:08:24.922] | : . conditions: [n = 0] 
[08:08:24.922] | : . RNG used: FALSE
[08:08:24.922] | : . duration: 0.002549648 secs (started 2025-06-17 08:08:24.832186)
[08:08:24.922] | : . version: 1.8
[08:08:24.922] | : . FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'remove', earlySignal = 0) ...
[08:08:24.922] | : . ' Removed future from position #1
[08:08:24.923] | : . ' Number of registered futures: 1
[08:08:24.923] | : . FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'remove', earlySignal = 0) ... done
[08:08:24.923] | : . Erased future from future backend
[08:08:24.923] | : . result() for ClusterFuture ...
[08:08:24.923] | : . ' result already collected: FutureResult
[08:08:24.923] | : . result() for ClusterFuture ... done
[08:08:24.923] | : . signalConditions() ...
[08:08:24.923] | : . ' include = ‘immediateCondition’
[08:08:24.923] | : . ' exclude = 
[08:08:24.923] | : . ' resignal = FALSE
[08:08:24.924] | : . ' Number of conditions: 0
[08:08:24.924] | : . '  int 0
[08:08:24.924] | : . signalConditions() ... done
[08:08:24.924] | : receiveMessageFromWorker() for ClusterFuture ... done
[08:08:24.924] | : receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:24.924] | resolved() for MultisessionFuture (<unnamed-55>) ... done
[08:08:24.925] | assertFutureResult() ...
[08:08:24.925] | : Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:24.925] | : Future uuid: 55
[08:08:24.925] | : identical; success
[08:08:24.925] | assertFutureResult() ... done
[08:08:24.925] | resolved() for MultisessionFuture (<unnamed-56>) ...
[08:08:24.925] | : Cluster node socket connection: index=5, id=985
[08:08:24.925] | : assertValidConnection() ...
[08:08:24.925] | : . cluster node index: 2
[08:08:24.926] | : assertValidConnection() ... done
[08:08:24.936] | : socketSelect(list(<connection #5 (id=985)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:24.936] | resolved() for MultisessionFuture (<unnamed-56>) ... done
[08:08:24.936] resolved() for matrix ... done
 logi [1:2, 1:3] TRUE TRUE FALSE TRUE TRUE TRUE
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
 - attr(*, "names")= chr [1:6] "a" "b" "c" "" ...
[08:08:24.938] value() for matrix ...
[08:08:24.938] | recursive: 0
[08:08:24.938] | reduce: FALSE
[08:08:24.938] | length: 6
[08:08:24.939] | elements: ‘a’, ‘b’, ‘c’, ‘’, ‘’, ‘’
[08:08:24.939] | Number of remaining objects: 6
[08:08:24.939] | checking value #1:
[08:08:24.939] | 'obj' is atomic
[08:08:24.939] | signalConditionsASAP(numeric, pos=1) ...
[08:08:24.939] | : nx: 6
[08:08:24.939] | : relay: TRUE
[08:08:24.939] | : stdout: TRUE
[08:08:24.939] | : signal: TRUE
[08:08:24.939] | : resignal: FALSE
[08:08:24.939] | : force: TRUE
[08:08:24.940] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:24.940] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:24.940] | : until=2
[08:08:24.940] | : relaying element #2
[08:08:24.940] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:24.940] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:24.940] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:24.940] | length: 5 (resolved future 1)
[08:08:24.940] value() for matrix ... done
[08:08:24.940] checking value #2:
[08:08:24.941] 'obj' is MultisessionFuture
[08:08:24.941] MultisessionFuture #2
[08:08:24.941] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:24.941] | nx: 6
[08:08:24.941] | relay: TRUE
[08:08:24.941] | stdout: TRUE
[08:08:24.941] | signal: TRUE
[08:08:24.941] | resignal: FALSE
[08:08:24.941] | force: TRUE
[08:08:24.941] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:24.942] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:24.942] | until=2
[08:08:24.942] | relaying element #2
[08:08:24.942] | value() for MultisessionFuture (<unnamed-55>) ...
[08:08:24.942] | : result() for ClusterFuture ...
[08:08:24.942] | : . result already collected: FutureResult
[08:08:24.943] | : result() for ClusterFuture ... done
[08:08:24.943] | : result() for ClusterFuture ...
[08:08:24.943] | : . result already collected: FutureResult
[08:08:24.943] | : result() for ClusterFuture ... done
[08:08:24.943] | : signalConditions() ...
[08:08:24.943] | : . include = ‘immediateCondition’
[08:08:24.943] | : . exclude = 
[08:08:24.943] | : . resignal = FALSE
[08:08:24.944] | : . Number of conditions: 0
[08:08:24.944] | : .  int 0
[08:08:24.944] | : signalConditions() ... done
[08:08:24.944] | : relay stdout ...
[08:08:24.944] | : relay stdout ... done
[08:08:24.944] | : check for misuse ...
[08:08:24.945] | : check for misuse ... done
[08:08:24.945] | value() for MultisessionFuture (<unnamed-55>) ... done
[08:08:24.945] | result() for ClusterFuture ...
[08:08:24.945] | : result already collected: FutureResult
[08:08:24.945] | result() for ClusterFuture ... done
[08:08:24.945] | signalConditions() ...
[08:08:24.945] | : include = ‘immediateCondition’
[08:08:24.945] | : exclude = 
[08:08:24.945] | : resignal = FALSE
[08:08:24.945] | : Number of conditions: 0
[08:08:24.946] | :  int 0
[08:08:24.946] | signalConditions() ... done
[08:08:24.946] | result() for ClusterFuture ...
[08:08:24.946] | : result already collected: FutureResult
[08:08:24.946] | result() for ClusterFuture ... done
[08:08:24.946] | signalConditions() ...
[08:08:24.946] | : include = ‘condition’
[08:08:24.947] | : exclude = ‘error’, ‘immediateCondition’
[08:08:24.947] | : resignal = TRUE
[08:08:24.947] | : Number of conditions: 0
[08:08:24.947] | :  int 0
[08:08:24.947] | signalConditions() ... done
[08:08:24.947] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.947] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.948] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:24.948] value(<MultisessionFuture>, ...) ...
[08:08:24.948] value(<MultisessionFuture>, ...) ... done
[08:08:24.948] value() for MultisessionFuture (<unnamed-55>) ...
[08:08:24.948] | result() for ClusterFuture ...
[08:08:24.948] | : result already collected: FutureResult
[08:08:24.948] | result() for ClusterFuture ... done
[08:08:24.948] | result() for ClusterFuture ...
[08:08:24.948] | : result already collected: FutureResult
[08:08:24.948] | result() for ClusterFuture ... done
[08:08:24.948] | signalConditions() ...
[08:08:24.949] | : include = ‘immediateCondition’
[08:08:24.949] | : exclude = 
[08:08:24.949] | : resignal = FALSE
[08:08:24.949] | : Number of conditions: 0
[08:08:24.949] | :  int 0
[08:08:24.949] | signalConditions() ... done
[08:08:24.949] | check for misuse ...
[08:08:24.950] | check for misuse ... done
[08:08:24.950] value() for MultisessionFuture (<unnamed-55>) ... done
[08:08:24.950] value: <numeric>
[08:08:24.950] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:24.950] | nx: 6
[08:08:24.950] | relay: TRUE
[08:08:24.950] | stdout: TRUE
[08:08:24.950] | signal: TRUE
[08:08:24.950] | resignal: FALSE
[08:08:24.950] | force: TRUE
[08:08:24.950] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.950] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.951] | until=3
[08:08:24.951] | relaying element #3
[08:08:24.951] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.951] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.951] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:24.951] resolve() for MultisessionFuture ...
[08:08:24.951] resolve() for MultisessionFuture ... done
[08:08:24.951] length: 4 (resolved future 2)

[08:08:24.951] checking value #3:
[08:08:24.952] 'obj' is MultisessionFuture
[08:08:24.952] resolved() for MultisessionFuture (<unnamed-56>) ...
[08:08:24.952] | Cluster node socket connection: index=5, id=985
[08:08:24.952] | assertValidConnection() ...
[08:08:24.952] | : cluster node index: 2
[08:08:24.952] | assertValidConnection() ... done
[08:08:24.953] | receiveMessageFromWorker() for ClusterFuture ...
[08:08:24.953] | : cluster node index: 2
[08:08:24.953] | : [1] TRUE
[08:08:24.953] | : received data:
[08:08:24.953] | : List of 5
[08:08:24.953] | :  $ type   : chr "VALUE"
[08:08:24.953] | :  $ value  :List of 16
[08:08:24.953] | :   ..$ value              : NULL
[08:08:24.953] | :   ..$ visible            : logi TRUE
[08:08:24.953] | :   ..$ stdout             : chr ""
[08:08:24.953] | :   ..$ conditions         : list()
[08:08:24.953] | :   ..$ rng                : logi FALSE
[08:08:24.953] | :   ..$ seed               : NULL
[08:08:24.953] | :   ..$ misuseGlobalEnv    : NULL
[08:08:24.953] | :   ..$ misuseConnections  :List of 3
[08:08:24.953] | :   .. ..$ added   : NULL
[08:08:24.953] | :   .. ..$ removed : NULL
[08:08:24.953] | :   .. ..$ replaced: NULL
[08:08:24.953] | :   ..$ misuseDevices      : NULL
[08:08:24.953] | :   ..$ misuseDefaultDevice: list()
[08:08:24.953] | :   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:24"
[08:08:24.953] | :   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:24"
[08:08:24.953] | :   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "56"
[08:08:24.953] | :   ..$ session_uuid       : chr "39c3116ea80068179a88abb33369ed7b"
[08:08:24.953] | :   .. ..- attr(*, "source")=List of 5
[08:08:24.953] | :   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:24.953] | :   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:24.953] | :   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:24.953] | :   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:24.953] | :   .. .. ..$ pid   : int 69004
[08:08:24.953] | :   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:24"
[08:08:24.953] | :   .. .. ..$ random: int 2147483647
[08:08:24.953] | :   ..$ r_info             :List of 4
[08:08:24.953] | :   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:24.953] | :   .. .. ..$ : int [1:3] 4 5 0
[08:08:24.953] | :   .. ..$ os           : chr "unix"
[08:08:24.953] | :   .. ..$ os_name      : chr "Linux"
[08:08:24.953] | :   .. ..$ captures_utf8: logi TRUE
[08:08:24.953] | :   ..$ version            : chr "1.8"
[08:08:24.953] | :   ..- attr(*, "class")= chr "FutureResult"
[08:08:24.953] | :  $ success: logi TRUE
[08:08:24.953] | :  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:24.953] | :   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:24.953] | :  $ tag    : NULL
[08:08:24.963] | : Received FutureResult
[08:08:24.964] | : FutureResult:
[08:08:24.964] | : value: ‘NULL’
[08:08:24.964] | : visible: TRUE
[08:08:24.964] | : stdout: character
[08:08:24.964] | : conditions: [n = 0] 
[08:08:24.964] | : RNG used: FALSE
[08:08:24.964] | : duration: 0.002787828 secs (started 2025-06-17 08:08:24.942329)
[08:08:24.964] | : version: 1.8
[08:08:24.964] | : FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'remove', earlySignal = 0) ...
[08:08:24.964] | : . Removed future from position #1
[08:08:24.964] | : . Number of registered futures: 0
[08:08:24.964] | : FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'remove', earlySignal = 0) ... done
[08:08:24.964] | : Erased future from future backend
[08:08:24.965] | : result() for ClusterFuture ...
[08:08:24.965] | : . result already collected: FutureResult
[08:08:24.965] | : result() for ClusterFuture ... done
[08:08:24.965] | : signalConditions() ...
[08:08:24.965] | : . include = ‘immediateCondition’
[08:08:24.965] | : . exclude = 
[08:08:24.965] | : . resignal = FALSE
[08:08:24.965] | : . Number of conditions: 0
[08:08:24.965] | : .  int 0
[08:08:24.966] | : signalConditions() ... done
[08:08:24.966] | receiveMessageFromWorker() for ClusterFuture ... done
[08:08:24.966] | receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:24.966] resolved() for MultisessionFuture (<unnamed-56>) ... done
[08:08:24.966] assertFutureResult() ...
[08:08:24.966] | Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:24.966] | Future uuid: 56
[08:08:24.966] | identical; success
[08:08:24.966] assertFutureResult() ... done
[08:08:24.967] MultisessionFuture #3
[08:08:24.967] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:24.967] | nx: 6
[08:08:24.967] | relay: TRUE
[08:08:24.967] | stdout: TRUE
[08:08:24.967] | signal: TRUE
[08:08:24.967] | resignal: FALSE
[08:08:24.967] | force: TRUE
[08:08:24.967] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.967] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:24.967] | until=3
[08:08:24.968] | relaying element #3
[08:08:24.968] | value() for MultisessionFuture (<unnamed-56>) ...
[08:08:24.968] | : result() for ClusterFuture ...
[08:08:24.968] | : . result already collected: FutureResult
[08:08:24.968] | : result() for ClusterFuture ... done
[08:08:24.968] | : result() for ClusterFuture ...
[08:08:24.968] | : . result already collected: FutureResult
[08:08:24.968] | : result() for ClusterFuture ... done
[08:08:24.968] | : signalConditions() ...
[08:08:24.968] | : . include = ‘immediateCondition’
[08:08:24.968] | : . exclude = 
[08:08:24.969] | : . resignal = FALSE
[08:08:24.969] | : . Number of conditions: 0
[08:08:24.969] | : .  int 0
[08:08:24.969] | : signalConditions() ... done
[08:08:24.969] | : relay stdout ...
[08:08:24.969] | : relay stdout ... done
[08:08:24.969] | : check for misuse ...
[08:08:24.970] | : check for misuse ... done
[08:08:24.970] | value() for MultisessionFuture (<unnamed-56>) ... done
[08:08:24.970] | result() for ClusterFuture ...
[08:08:24.970] | : result already collected: FutureResult
[08:08:24.970] | result() for ClusterFuture ... done
[08:08:24.970] | signalConditions() ...
[08:08:24.970] | : include = ‘immediateCondition’
[08:08:24.970] | : exclude = 
[08:08:24.970] | : resignal = FALSE
[08:08:24.970] | : Number of conditions: 0
[08:08:24.971] | :  int 0
[08:08:24.971] | signalConditions() ... done
[08:08:24.971] | result() for ClusterFuture ...
[08:08:24.971] | : result already collected: FutureResult
[08:08:24.971] | result() for ClusterFuture ... done
[08:08:24.971] | signalConditions() ...
[08:08:24.971] | : include = ‘condition’
[08:08:24.972] | : exclude = ‘error’, ‘immediateCondition’
[08:08:24.972] | : resignal = TRUE
[08:08:24.972] | : Number of conditions: 0
[08:08:24.972] | :  int 0
[08:08:24.972] | signalConditions() ... done
[08:08:24.972] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.972] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.972] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:24.973] value(<MultisessionFuture>, ...) ...
[08:08:24.973] value(<MultisessionFuture>, ...) ... done
[08:08:24.973] value() for MultisessionFuture (<unnamed-56>) ...
[08:08:24.973] | result() for ClusterFuture ...
[08:08:24.973] | : result already collected: FutureResult
[08:08:24.973] | result() for ClusterFuture ... done
[08:08:24.973] | result() for ClusterFuture ...
[08:08:24.973] | : result already collected: FutureResult
[08:08:24.973] | result() for ClusterFuture ... done
[08:08:24.973] | signalConditions() ...
[08:08:24.974] | : include = ‘immediateCondition’
[08:08:24.974] | : exclude = 
[08:08:24.974] | : resignal = FALSE
[08:08:24.974] | : Number of conditions: 0
[08:08:24.974] | :  int 0
[08:08:24.974] | signalConditions() ... done
[08:08:24.974] | check for misuse ...
[08:08:24.975] | check for misuse ... done
[08:08:24.975] value() for MultisessionFuture (<unnamed-56>) ... done
[08:08:24.975] value: <NULL>
[08:08:24.975] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:24.975] | nx: 6
[08:08:24.975] | relay: TRUE
[08:08:24.975] | stdout: TRUE
[08:08:24.975] | signal: TRUE
[08:08:24.975] | resignal: FALSE
[08:08:24.975] | force: TRUE
[08:08:24.975] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.975] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.976] | until=4
[08:08:24.976] | relaying element #4
[08:08:24.976] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.976] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.976] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:24.976] resolve() for MultisessionFuture ...
[08:08:24.976] resolve() for MultisessionFuture ... done
[08:08:24.976] length: 3 (resolved future 3)

[08:08:24.976] checking value #4:
[08:08:24.977] 'obj' is NULL
[08:08:24.977] signalConditionsASAP(NULL, pos=4) ...
[08:08:24.977] | nx: 6
[08:08:24.977] | relay: TRUE
[08:08:24.977] | stdout: TRUE
[08:08:24.977] | signal: TRUE
[08:08:24.977] | resignal: FALSE
[08:08:24.977] | force: TRUE
[08:08:24.977] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.977] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.977] | until=5
[08:08:24.978] | relaying element #5
[08:08:24.978] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:24.978] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.978] signalConditionsASAP(NULL, pos=4) ... done
[08:08:24.978] signalConditionsASAP(NULL, pos=4) ...
[08:08:24.978] | nx: 6
[08:08:24.978] | relay: TRUE
[08:08:24.978] | stdout: TRUE
[08:08:24.978] | signal: TRUE
[08:08:24.978] | resignal: FALSE
[08:08:24.978] | force: TRUE
[08:08:24.979] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:24.979] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.979] | until=5
[08:08:24.979] | relaying element #5
[08:08:24.979] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:24.979] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.979] signalConditionsASAP(NULL, pos=4) ... done
[08:08:24.979] length: 2 (resolved future 4)

[08:08:24.979] checking value #5:
[08:08:24.979] 'obj' is NULL
[08:08:24.980] signalConditionsASAP(NULL, pos=5) ...
[08:08:24.980] | nx: 6
[08:08:24.980] | relay: TRUE
[08:08:24.980] | stdout: TRUE
[08:08:24.980] | signal: TRUE
[08:08:24.980] | resignal: FALSE
[08:08:24.980] | force: TRUE
[08:08:24.980] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:24.980] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.980] | until=6
[08:08:24.980] | relaying element #6
[08:08:24.981] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:24.981] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.981] signalConditionsASAP(NULL, pos=5) ... done
[08:08:24.981] signalConditionsASAP(NULL, pos=5) ...
[08:08:24.981] | nx: 6
[08:08:24.981] | relay: TRUE
[08:08:24.981] | stdout: TRUE
[08:08:24.981] | signal: TRUE
[08:08:24.981] | resignal: FALSE
[08:08:24.981] | force: TRUE
[08:08:24.981] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:24.982] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.982] | until=6
[08:08:24.982] | relaying element #6
[08:08:24.982] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:24.982] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.982] signalConditionsASAP(NULL, pos=5) ... done
[08:08:24.982] length: 1 (resolved future 5)

[08:08:24.982] checking value #6:
[08:08:24.982] 'obj' is atomic
[08:08:24.982] signalConditionsASAP(numeric, pos=6) ...
[08:08:24.983] | nx: 6
[08:08:24.983] | relay: TRUE
[08:08:24.983] | stdout: TRUE
[08:08:24.983] | signal: TRUE
[08:08:24.983] | resignal: FALSE
[08:08:24.983] | force: TRUE
[08:08:24.983] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:24.983] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.983] | until=6
[08:08:24.983] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:24.983] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.984] signalConditionsASAP(numeric, pos=6) ... done
[08:08:24.984] length: 0 (resolved future 6)

[08:08:24.984] Relaying remaining futures ...
[08:08:24.984] | signalConditionsASAP(NULL, pos=0) ...
[08:08:24.984] | : nx: 6
[08:08:24.984] | : relay: TRUE
[08:08:24.984] | : stdout: TRUE
[08:08:24.984] | : signal: TRUE
[08:08:24.984] | : resignal: FALSE
[08:08:24.984] | : force: TRUE
[08:08:24.985] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:24.985] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
 - flush all
[08:08:24.985] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:24.985] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:24.985] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:24.985] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 2 3
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
Dimensions: c(2, 3, 1)
[08:08:24.990] future(..., label = NULL) ...
[08:08:24.990] | lazy: FALSE
[08:08:24.990] | stdout: TRUE
[08:08:24.990] | conditions: [n=1] ‘condition’
[08:08:24.991] | gc: FALSE
[08:08:24.991] | earlySignal: FALSE
[08:08:24.991] | getGlobalsAndPackages() ...
[08:08:24.991] | : Searching for globals ...
[08:08:24.992] | : . globals found: [0] 
[08:08:24.992] | : Searching for globals ... done
[08:08:24.992] | : globals: [0] <none>
[08:08:24.992] | : packages: [0] <none>
[08:08:24.992] | getGlobalsAndPackages() ... done
[08:08:24.993] | run() for ‘Future’ (<unnamed-57>) ...
[08:08:24.993] | : state: ‘created’
[08:08:24.993] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:24.993] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:24.993] | : Using MultisessionFutureBackend ...
[08:08:24.993] | : . Number of futures since start: 6 (6 created, 6 launched, 6 finished)
[08:08:24.993] | : . Launching futures ...
[08:08:24.994] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:24.994] | : . ' , Workers: [n=2]
[08:08:24.994] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:24.995] | : . ' , FutureRegistry: ‘workers-681b6315fba68606aeaf4c7e3afba472’
[08:08:24.995] | : . ' , requestWorker() ...
[08:08:24.995] | : . ' , ; requestNode() ...
[08:08:24.996] | : . ' , ; ` Number of workers: 2
[08:08:24.996] | : . ' , ; ` Polling for a free worker ...
[08:08:24.996] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ...
[08:08:24.996] | : . ' , ; ` | : Listing all futures
[08:08:24.996] | : . ' , ; ` | : Number of registered futures: 0
[08:08:24.996] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ... done
[08:08:24.996] | : . ' , ; ` | Total time: 0
[08:08:24.996] | : . ' , ; ` Polling for a free worker ... done
[08:08:24.996] | : . ' , ; ` FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ...
[08:08:24.996] | : . ' , ; ` | Listing all futures
[08:08:24.997] | : . ' , ; ` | Number of registered futures: 0
[08:08:24.997] | : . ' , ; ` FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ... done
[08:08:24.997] | : . ' , ; ` avail: [n=2] ‘1’, ‘2’
[08:08:24.997] | : . ' , ; ` Index of first available worker: 1
[08:08:24.997] | : . ' , ; ` Validate that the worker is functional ...
[08:08:25.091] | : . ' , ; ` | Worker is functional
[08:08:25.091] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ...
[08:08:25.091] | : . ' , ; ` | : Listing all futures
[08:08:25.091] | : . ' , ; ` | : Number of registered futures: 0
[08:08:25.091] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ... done
[08:08:25.092] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:25.092] | : . ' , ; requestNode() ... done
[08:08:25.092] | : . ' , ; cluster node index: 1
[08:08:25.092] | : . ' , requestWorker() ... done
[08:08:25.092] | : . ' , eraseGlobalEnvironment() ...
[08:08:25.092] | : . ' , eraseGlobalEnvironment() ... done
[08:08:25.092] | : . ' , launchFuture() ...
[08:08:25.093] | : . ' , ; cluster node index: 1
[08:08:25.093] | : . ' , ; getFutureData() ...
[08:08:25.093] | : . ' , ; ` getFutureCore() ...
[08:08:25.093] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:25.093] | : . ' , ; ` getFutureCore() ... done
[08:08:25.093] | : . ' , ; ` getFutureCapture() ...
[08:08:25.093] | : . ' , ; ` getFutureCapture() ... done
[08:08:25.093] | : . ' , ; ` getFutureContext() ...
[08:08:25.093] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.094] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:25.094] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.094] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:25.094] | : . ' , ; ` getFutureContext() ... done
[08:08:25.094] | : . ' , ; getFutureData() ... done
[08:08:25.094] | : . ' , ; FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'add', earlySignal = 0) ...
[08:08:25.094] | : . ' , ; ` Appended future to position #1
[08:08:25.095] | : . ' , ; ` Number of registered futures: 1
[08:08:25.095] | : . ' , ; FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'add', earlySignal = 0) ... done
[08:08:25.095] | : . ' , launchFuture() ... done
[08:08:25.095] | : . ' , MultisessionFuture started
[08:08:25.095] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:25.095] | : . Launching futures ... done
[08:08:25.095] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:25.095] | : Using MultisessionFutureBackend ... done
[08:08:25.095] | run() for ‘Future’ (<unnamed-57>) ... done
[08:08:25.095] future(..., label = NULL) ... done
[08:08:25.096] future(..., label = NULL) ...
[08:08:25.096] | lazy: FALSE
[08:08:25.096] | stdout: TRUE
[08:08:25.096] | conditions: [n=1] ‘condition’
[08:08:25.096] | gc: FALSE
[08:08:25.096] | earlySignal: FALSE
[08:08:25.096] | getGlobalsAndPackages() ...
[08:08:25.096] | : Searching for globals ...
[08:08:25.097] | : . globals found: [0] 
[08:08:25.097] | : Searching for globals ... done
[08:08:25.098] | : globals: [0] <none>
[08:08:25.098] | : packages: [0] <none>
[08:08:25.098] | getGlobalsAndPackages() ... done
[08:08:25.098] | run() for ‘Future’ (<unnamed-58>) ...
[08:08:25.098] | : state: ‘created’
[08:08:25.098] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.098] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.098] | : Using MultisessionFutureBackend ...
[08:08:25.099] | : . Number of futures since start: 7 (7 created, 7 launched, 6 finished)
[08:08:25.099] | : . Launching futures ...
[08:08:25.099] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:25.099] | : . ' , Workers: [n=2]
[08:08:25.099] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:25.100] | : . ' , FutureRegistry: ‘workers-681b6315fba68606aeaf4c7e3afba472’
[08:08:25.101] | : . ' , requestWorker() ...
[08:08:25.101] | : . ' , ; requestNode() ...
[08:08:25.101] | : . ' , ; ` Number of workers: 2
[08:08:25.101] | : . ' , ; ` Polling for a free worker ...
[08:08:25.101] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ...
[08:08:25.101] | : . ' , ; ` | : Listing all futures
[08:08:25.101] | : . ' , ; ` | : Number of registered futures: 1
[08:08:25.101] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ... done
[08:08:25.101] | : . ' , ; ` | Total time: 0
[08:08:25.102] | : . ' , ; ` Polling for a free worker ... done
[08:08:25.102] | : . ' , ; ` FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ...
[08:08:25.102] | : . ' , ; ` | Listing all futures
[08:08:25.102] | : . ' , ; ` | Number of registered futures: 1
[08:08:25.102] | : . ' , ; ` FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ... done
[08:08:25.102] | : . ' , ; ` avail: [n=2] ‘2’
[08:08:25.102] | : . ' , ; ` Index of first available worker: 2
[08:08:25.102] | : . ' , ; ` Validate that the worker is functional ...
[08:08:25.197] | : . ' , ; ` | Worker is functional
[08:08:25.197] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ...
[08:08:25.197] | : . ' , ; ` | : Listing all futures
[08:08:25.197] | : . ' , ; ` | : Number of registered futures: 1
[08:08:25.197] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ... done
[08:08:25.198] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:25.198] | : . ' , ; requestNode() ... done
[08:08:25.198] | : . ' , ; cluster node index: 2
[08:08:25.198] | : . ' , requestWorker() ... done
[08:08:25.198] | : . ' , eraseGlobalEnvironment() ...
[08:08:25.198] | : . ' , eraseGlobalEnvironment() ... done
[08:08:25.198] | : . ' , launchFuture() ...
[08:08:25.199] | : . ' , ; cluster node index: 2
[08:08:25.199] | : . ' , ; getFutureData() ...
[08:08:25.199] | : . ' , ; ` getFutureCore() ...
[08:08:25.199] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:25.199] | : . ' , ; ` getFutureCore() ... done
[08:08:25.199] | : . ' , ; ` getFutureCapture() ...
[08:08:25.199] | : . ' , ; ` getFutureCapture() ... done
[08:08:25.199] | : . ' , ; ` getFutureContext() ...
[08:08:25.199] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.200] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:25.200] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.200] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:25.200] | : . ' , ; ` getFutureContext() ... done
[08:08:25.200] | : . ' , ; getFutureData() ... done
[08:08:25.200] | : . ' , ; FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'add', earlySignal = 0) ...
[08:08:25.200] | : . ' , ; ` Appended future to position #2
[08:08:25.201] | : . ' , ; ` Number of registered futures: 2
[08:08:25.201] | : . ' , ; FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'add', earlySignal = 0) ... done
[08:08:25.201] | : . ' , launchFuture() ... done
[08:08:25.201] | : . ' , MultisessionFuture started
[08:08:25.201] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:25.201] | : . Launching futures ... done
[08:08:25.201] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:25.201] | : Using MultisessionFutureBackend ... done
[08:08:25.201] | run() for ‘Future’ (<unnamed-58>) ... done
[08:08:25.201] future(..., label = NULL) ... done
List of 6
 $ a: num 1
 $ b:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x5643047172b8> 
 $ c:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x564303e35c98> 
 $  : NULL
 $  : NULL
 $  : num 6
List of 6
 $ a: num 1
 $ b:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x5643047172b8> 
 $ c:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x564303e35c98> 
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:3] 2 3 1
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
[08:08:25.207] resolved() for array ...
[08:08:25.207] | Number of elements: 6
[08:08:25.207] | Number of futures: 6
[08:08:25.207] | resolved() for MultisessionFuture (<unnamed-57>) ...
[08:08:25.207] | : Cluster node socket connection: index=4, id=984
[08:08:25.208] | : assertValidConnection() ...
[08:08:25.208] | : . cluster node index: 1
[08:08:25.208] | : assertValidConnection() ... done
[08:08:25.208] | : receiveMessageFromWorker() for ClusterFuture ...
[08:08:25.208] | : . cluster node index: 1
[08:08:25.208] | : . [1] TRUE
[08:08:25.209] | : . received data:
[08:08:25.209] | : . List of 5
[08:08:25.209] | : .  $ type   : chr "VALUE"
[08:08:25.209] | : .  $ value  :List of 16
[08:08:25.209] | : .   ..$ value              : num 2
[08:08:25.209] | : .   ..$ visible            : logi TRUE
[08:08:25.209] | : .   ..$ stdout             : chr ""
[08:08:25.209] | : .   ..$ conditions         : list()
[08:08:25.209] | : .   ..$ rng                : logi FALSE
[08:08:25.209] | : .   ..$ seed               : NULL
[08:08:25.209] | : .   ..$ misuseGlobalEnv    : NULL
[08:08:25.209] | : .   ..$ misuseConnections  :List of 3
[08:08:25.209] | : .   .. ..$ added   : NULL
[08:08:25.209] | : .   .. ..$ removed : NULL
[08:08:25.209] | : .   .. ..$ replaced: NULL
[08:08:25.209] | : .   ..$ misuseDevices      : NULL
[08:08:25.209] | : .   ..$ misuseDefaultDevice: list()
[08:08:25.209] | : .   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:25"
[08:08:25.209] | : .   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:25"
[08:08:25.209] | : .   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "57"
[08:08:25.209] | : .   ..$ session_uuid       : chr "fc6c016afc99663cf036a2d323992128"
[08:08:25.209] | : .   .. ..- attr(*, "source")=List of 5
[08:08:25.209] | : .   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:25.209] | : .   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:25.209] | : .   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:25.209] | : .   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:25.209] | : .   .. .. ..$ pid   : int 69003
[08:08:25.209] | : .   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:24"
[08:08:25.209] | : .   .. .. ..$ random: int 2147483647
[08:08:25.209] | : .   ..$ r_info             :List of 4
[08:08:25.209] | : .   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:25.209] | : .   .. .. ..$ : int [1:3] 4 5 0
[08:08:25.209] | : .   .. ..$ os           : chr "unix"
[08:08:25.209] | : .   .. ..$ os_name      : chr "Linux"
[08:08:25.209] | : .   .. ..$ captures_utf8: logi TRUE
[08:08:25.209] | : .   ..$ version            : chr "1.8"
[08:08:25.209] | : .   ..- attr(*, "class")= chr "FutureResult"
[08:08:25.209] | : .  $ success: logi TRUE
[08:08:25.209] | : .  $ time   : 'proc_time' Named num [1:5] 0.004 0 0.004 0 0
[08:08:25.209] | : .   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:25.209] | : .  $ tag    : NULL
[08:08:25.219] | : . Received FutureResult
[08:08:25.219] | : . FutureResult:
[08:08:25.219] | : . value: ‘numeric’
[08:08:25.219] | : . visible: TRUE
[08:08:25.219] | : . stdout: character
[08:08:25.219] | : . conditions: [n = 0] 
[08:08:25.219] | : . RNG used: FALSE
[08:08:25.219] | : . duration: 0.003772497 secs (started 2025-06-17 08:08:25.135269)
[08:08:25.219] | : . version: 1.8
[08:08:25.220] | : . FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'remove', earlySignal = 0) ...
[08:08:25.220] | : . ' Removed future from position #1
[08:08:25.220] | : . ' Number of registered futures: 1
[08:08:25.220] | : . FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'remove', earlySignal = 0) ... done
[08:08:25.220] | : . Erased future from future backend
[08:08:25.221] | : . result() for ClusterFuture ...
[08:08:25.221] | : . ' result already collected: FutureResult
[08:08:25.221] | : . result() for ClusterFuture ... done
[08:08:25.221] | : . signalConditions() ...
[08:08:25.221] | : . ' include = ‘immediateCondition’
[08:08:25.221] | : . ' exclude = 
[08:08:25.221] | : . ' resignal = FALSE
[08:08:25.221] | : . ' Number of conditions: 0
[08:08:25.221] | : . '  int 0
[08:08:25.222] | : . signalConditions() ... done
[08:08:25.222] | : receiveMessageFromWorker() for ClusterFuture ... done
[08:08:25.222] | : receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:25.222] | resolved() for MultisessionFuture (<unnamed-57>) ... done
[08:08:25.222] | assertFutureResult() ...
[08:08:25.222] | : Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:25.222] | : Future uuid: 57
[08:08:25.222] | : identical; success
[08:08:25.222] | assertFutureResult() ... done
[08:08:25.223] | resolved() for MultisessionFuture (<unnamed-58>) ...
[08:08:25.223] | : Cluster node socket connection: index=5, id=985
[08:08:25.223] | : assertValidConnection() ...
[08:08:25.223] | : . cluster node index: 2
[08:08:25.223] | : assertValidConnection() ... done
[08:08:25.234] | : socketSelect(list(<connection #5 (id=985)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:25.234] | resolved() for MultisessionFuture (<unnamed-58>) ... done
[08:08:25.234] resolved() for array ... done
 logi [1:2, 1:3, 1] TRUE TRUE FALSE TRUE TRUE TRUE
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
 - attr(*, "names")= chr [1:6] "a" "b" "c" "" ...
[08:08:25.236] value() for array ...
[08:08:25.236] | recursive: 0
[08:08:25.236] | reduce: FALSE
[08:08:25.236] | length: 6
[08:08:25.236] | elements: ‘a’, ‘b’, ‘c’, ‘’, ‘’, ‘’
[08:08:25.236] | Number of remaining objects: 6
[08:08:25.237] | checking value #1:
[08:08:25.237] | 'obj' is atomic
[08:08:25.237] | signalConditionsASAP(numeric, pos=1) ...
[08:08:25.237] | : nx: 6
[08:08:25.237] | : relay: TRUE
[08:08:25.237] | : stdout: TRUE
[08:08:25.237] | : signal: TRUE
[08:08:25.237] | : resignal: FALSE
[08:08:25.237] | : force: TRUE
[08:08:25.237] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:25.237] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:25.238] | : until=2
[08:08:25.238] | : relaying element #2
[08:08:25.238] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:25.238] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:25.238] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:25.238] | length: 5 (resolved future 1)
[08:08:25.238] value() for array ... done
[08:08:25.238] checking value #2:
[08:08:25.238] 'obj' is MultisessionFuture
[08:08:25.239] MultisessionFuture #2
[08:08:25.239] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:25.239] | nx: 6
[08:08:25.239] | relay: TRUE
[08:08:25.239] | stdout: TRUE
[08:08:25.239] | signal: TRUE
[08:08:25.239] | resignal: FALSE
[08:08:25.239] | force: TRUE
[08:08:25.239] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:25.239] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:25.239] | until=2
[08:08:25.240] | relaying element #2
[08:08:25.240] | value() for MultisessionFuture (<unnamed-57>) ...
[08:08:25.240] | : result() for ClusterFuture ...
[08:08:25.240] | : . result already collected: FutureResult
[08:08:25.240] | : result() for ClusterFuture ... done
[08:08:25.240] | : result() for ClusterFuture ...
[08:08:25.240] | : . result already collected: FutureResult
[08:08:25.240] | : result() for ClusterFuture ... done
[08:08:25.240] | : signalConditions() ...
[08:08:25.241] | : . include = ‘immediateCondition’
[08:08:25.241] | : . exclude = 
[08:08:25.241] | : . resignal = FALSE
[08:08:25.241] | : . Number of conditions: 0
[08:08:25.241] | : .  int 0
[08:08:25.241] | : signalConditions() ... done
[08:08:25.242] | : relay stdout ...
[08:08:25.242] | : relay stdout ... done
[08:08:25.242] | : check for misuse ...
[08:08:25.242] | : check for misuse ... done
[08:08:25.242] | value() for MultisessionFuture (<unnamed-57>) ... done
[08:08:25.242] | result() for ClusterFuture ...
[08:08:25.242] | : result already collected: FutureResult
[08:08:25.242] | result() for ClusterFuture ... done
[08:08:25.242] | signalConditions() ...
[08:08:25.242] | : include = ‘immediateCondition’
[08:08:25.243] | : exclude = 
[08:08:25.243] | : resignal = FALSE
[08:08:25.243] | : Number of conditions: 0
[08:08:25.243] | :  int 0
[08:08:25.243] | signalConditions() ... done
[08:08:25.243] | result() for ClusterFuture ...
[08:08:25.243] | : result already collected: FutureResult
[08:08:25.244] | result() for ClusterFuture ... done
[08:08:25.244] | signalConditions() ...
[08:08:25.245] | : include = ‘condition’
[08:08:25.246] | : exclude = ‘error’, ‘immediateCondition’
[08:08:25.246] | : resignal = TRUE
[08:08:25.246] | : Number of conditions: 0
[08:08:25.246] | :  int 0
[08:08:25.246] | signalConditions() ... done
[08:08:25.246] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:25.246] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:25.247] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:25.247] value(<MultisessionFuture>, ...) ...
[08:08:25.247] value(<MultisessionFuture>, ...) ... done
[08:08:25.247] value() for MultisessionFuture (<unnamed-57>) ...
[08:08:25.247] | result() for ClusterFuture ...
[08:08:25.247] | : result already collected: FutureResult
[08:08:25.247] | result() for ClusterFuture ... done
[08:08:25.247] | result() for ClusterFuture ...
[08:08:25.247] | : result already collected: FutureResult
[08:08:25.247] | result() for ClusterFuture ... done
[08:08:25.248] | signalConditions() ...
[08:08:25.248] | : include = ‘immediateCondition’
[08:08:25.248] | : exclude = 
[08:08:25.248] | : resignal = FALSE
[08:08:25.248] | : Number of conditions: 0
[08:08:25.248] | :  int 0
[08:08:25.248] | signalConditions() ... done
[08:08:25.248] | check for misuse ...
[08:08:25.249] | check for misuse ... done
[08:08:25.249] value() for MultisessionFuture (<unnamed-57>) ... done
[08:08:25.249] value: <numeric>
[08:08:25.249] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:25.249] | nx: 6
[08:08:25.249] | relay: TRUE
[08:08:25.249] | stdout: TRUE
[08:08:25.249] | signal: TRUE
[08:08:25.249] | resignal: FALSE
[08:08:25.249] | force: TRUE
[08:08:25.249] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:25.250] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:25.250] | until=3
[08:08:25.250] | relaying element #3
[08:08:25.250] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:25.250] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:25.250] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:25.250] resolve() for MultisessionFuture ...
[08:08:25.250] resolve() for MultisessionFuture ... done
[08:08:25.250] length: 4 (resolved future 2)

[08:08:25.251] checking value #3:
[08:08:25.251] 'obj' is MultisessionFuture
[08:08:25.251] resolved() for MultisessionFuture (<unnamed-58>) ...
[08:08:25.251] | Cluster node socket connection: index=5, id=985
[08:08:25.251] | assertValidConnection() ...
[08:08:25.251] | : cluster node index: 2
[08:08:25.251] | assertValidConnection() ... done
[08:08:25.252] | receiveMessageFromWorker() for ClusterFuture ...
[08:08:25.252] | : cluster node index: 2
[08:08:25.252] | : [1] TRUE
[08:08:25.252] | : received data:
[08:08:25.252] | : List of 5
[08:08:25.252] | :  $ type   : chr "VALUE"
[08:08:25.252] | :  $ value  :List of 16
[08:08:25.252] | :   ..$ value              : NULL
[08:08:25.252] | :   ..$ visible            : logi TRUE
[08:08:25.252] | :   ..$ stdout             : chr ""
[08:08:25.252] | :   ..$ conditions         : list()
[08:08:25.252] | :   ..$ rng                : logi FALSE
[08:08:25.252] | :   ..$ seed               : NULL
[08:08:25.252] | :   ..$ misuseGlobalEnv    : NULL
[08:08:25.252] | :   ..$ misuseConnections  :List of 3
[08:08:25.252] | :   .. ..$ added   : NULL
[08:08:25.252] | :   .. ..$ removed : NULL
[08:08:25.252] | :   .. ..$ replaced: NULL
[08:08:25.252] | :   ..$ misuseDevices      : NULL
[08:08:25.252] | :   ..$ misuseDefaultDevice: list()
[08:08:25.252] | :   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:25"
[08:08:25.252] | :   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:25"
[08:08:25.252] | :   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "58"
[08:08:25.252] | :   ..$ session_uuid       : chr "39c3116ea80068179a88abb33369ed7b"
[08:08:25.252] | :   .. ..- attr(*, "source")=List of 5
[08:08:25.252] | :   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:25.252] | :   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:25.252] | :   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:25.252] | :   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:25.252] | :   .. .. ..$ pid   : int 69004
[08:08:25.252] | :   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:24"
[08:08:25.252] | :   .. .. ..$ random: int 2147483647
[08:08:25.252] | :   ..$ r_info             :List of 4
[08:08:25.252] | :   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:25.252] | :   .. .. ..$ : int [1:3] 4 5 0
[08:08:25.252] | :   .. ..$ os           : chr "unix"
[08:08:25.252] | :   .. ..$ os_name      : chr "Linux"
[08:08:25.252] | :   .. ..$ captures_utf8: logi TRUE
[08:08:25.252] | :   ..$ version            : chr "1.8"
[08:08:25.252] | :   ..- attr(*, "class")= chr "FutureResult"
[08:08:25.252] | :  $ success: logi TRUE
[08:08:25.252] | :  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:25.252] | :   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:25.252] | :  $ tag    : NULL
[08:08:25.262] | : Received FutureResult
[08:08:25.263] | : FutureResult:
[08:08:25.263] | : value: ‘NULL’
[08:08:25.263] | : visible: TRUE
[08:08:25.263] | : stdout: character
[08:08:25.263] | : conditions: [n = 0] 
[08:08:25.263] | : RNG used: FALSE
[08:08:25.263] | : duration: 0.002517939 secs (started 2025-06-17 08:08:25.241212)
[08:08:25.263] | : version: 1.8
[08:08:25.263] | : FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'remove', earlySignal = 0) ...
[08:08:25.263] | : . Removed future from position #1
[08:08:25.263] | : . Number of registered futures: 0
[08:08:25.263] | : FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'remove', earlySignal = 0) ... done
[08:08:25.264] | : Erased future from future backend
[08:08:25.264] | : result() for ClusterFuture ...
[08:08:25.264] | : . result already collected: FutureResult
[08:08:25.264] | : result() for ClusterFuture ... done
[08:08:25.264] | : signalConditions() ...
[08:08:25.264] | : . include = ‘immediateCondition’
[08:08:25.264] | : . exclude = 
[08:08:25.264] | : . resignal = FALSE
[08:08:25.264] | : . Number of conditions: 0
[08:08:25.264] | : .  int 0
[08:08:25.265] | : signalConditions() ... done
[08:08:25.265] | receiveMessageFromWorker() for ClusterFuture ... done
[08:08:25.265] | receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:25.265] resolved() for MultisessionFuture (<unnamed-58>) ... done
[08:08:25.265] assertFutureResult() ...
[08:08:25.265] | Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:25.265] | Future uuid: 58
[08:08:25.265] | identical; success
[08:08:25.266] assertFutureResult() ... done
[08:08:25.266] MultisessionFuture #3
[08:08:25.266] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:25.266] | nx: 6
[08:08:25.266] | relay: TRUE
[08:08:25.266] | stdout: TRUE
[08:08:25.266] | signal: TRUE
[08:08:25.266] | resignal: FALSE
[08:08:25.266] | force: TRUE
[08:08:25.266] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:25.266] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:25.266] | until=3
[08:08:25.267] | relaying element #3
[08:08:25.267] | value() for MultisessionFuture (<unnamed-58>) ...
[08:08:25.267] | : result() for ClusterFuture ...
[08:08:25.267] | : . result already collected: FutureResult
[08:08:25.267] | : result() for ClusterFuture ... done
[08:08:25.267] | : result() for ClusterFuture ...
[08:08:25.267] | : . result already collected: FutureResult
[08:08:25.267] | : result() for ClusterFuture ... done
[08:08:25.267] | : signalConditions() ...
[08:08:25.267] | : . include = ‘immediateCondition’
[08:08:25.268] | : . exclude = 
[08:08:25.268] | : . resignal = FALSE
[08:08:25.268] | : . Number of conditions: 0
[08:08:25.268] | : .  int 0
[08:08:25.268] | : signalConditions() ... done
[08:08:25.268] | : relay stdout ...
[08:08:25.268] | : relay stdout ... done
[08:08:25.268] | : check for misuse ...
[08:08:25.269] | : check for misuse ... done
[08:08:25.269] | value() for MultisessionFuture (<unnamed-58>) ... done
[08:08:25.269] | result() for ClusterFuture ...
[08:08:25.269] | : result already collected: FutureResult
[08:08:25.269] | result() for ClusterFuture ... done
[08:08:25.269] | signalConditions() ...
[08:08:25.269] | : include = ‘immediateCondition’
[08:08:25.269] | : exclude = 
[08:08:25.269] | : resignal = FALSE
[08:08:25.269] | : Number of conditions: 0
[08:08:25.270] | :  int 0
[08:08:25.270] | signalConditions() ... done
[08:08:25.270] | result() for ClusterFuture ...
[08:08:25.270] | : result already collected: FutureResult
[08:08:25.270] | result() for ClusterFuture ... done
[08:08:25.270] | signalConditions() ...
[08:08:25.270] | : include = ‘condition’
[08:08:25.271] | : exclude = ‘error’, ‘immediateCondition’
[08:08:25.271] | : resignal = TRUE
[08:08:25.271] | : Number of conditions: 0
[08:08:25.271] | :  int 0
[08:08:25.271] | signalConditions() ... done
[08:08:25.271] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.271] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.272] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:25.272] value(<MultisessionFuture>, ...) ...
[08:08:25.272] value(<MultisessionFuture>, ...) ... done
[08:08:25.272] value() for MultisessionFuture (<unnamed-58>) ...
[08:08:25.272] | result() for ClusterFuture ...
[08:08:25.272] | : result already collected: FutureResult
[08:08:25.272] | result() for ClusterFuture ... done
[08:08:25.272] | result() for ClusterFuture ...
[08:08:25.272] | : result already collected: FutureResult
[08:08:25.272] | result() for ClusterFuture ... done
[08:08:25.272] | signalConditions() ...
[08:08:25.273] | : include = ‘immediateCondition’
[08:08:25.273] | : exclude = 
[08:08:25.273] | : resignal = FALSE
[08:08:25.273] | : Number of conditions: 0
[08:08:25.273] | :  int 0
[08:08:25.273] | signalConditions() ... done
[08:08:25.273] | check for misuse ...
[08:08:25.273] | check for misuse ... done
[08:08:25.274] value() for MultisessionFuture (<unnamed-58>) ... done
[08:08:25.274] value: <NULL>
[08:08:25.274] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:25.274] | nx: 6
[08:08:25.274] | relay: TRUE
[08:08:25.274] | stdout: TRUE
[08:08:25.274] | signal: TRUE
[08:08:25.274] | resignal: FALSE
[08:08:25.274] | force: TRUE
[08:08:25.274] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.274] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.275] | until=4
[08:08:25.275] | relaying element #4
[08:08:25.275] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.275] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.275] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:25.275] resolve() for MultisessionFuture ...
[08:08:25.275] resolve() for MultisessionFuture ... done
[08:08:25.275] length: 3 (resolved future 3)

[08:08:25.275] checking value #4:
[08:08:25.276] 'obj' is NULL
[08:08:25.276] signalConditionsASAP(NULL, pos=4) ...
[08:08:25.276] | nx: 6
[08:08:25.276] | relay: TRUE
[08:08:25.276] | stdout: TRUE
[08:08:25.276] | signal: TRUE
[08:08:25.276] | resignal: FALSE
[08:08:25.276] | force: TRUE
[08:08:25.276] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.276] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.276] | until=5
[08:08:25.276] | relaying element #5
[08:08:25.277] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:25.277] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.277] signalConditionsASAP(NULL, pos=4) ... done
[08:08:25.277] signalConditionsASAP(NULL, pos=4) ...
[08:08:25.277] | nx: 6
[08:08:25.277] | relay: TRUE
[08:08:25.277] | stdout: TRUE
[08:08:25.277] | signal: TRUE
[08:08:25.277] | resignal: FALSE
[08:08:25.277] | force: TRUE
[08:08:25.277] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:25.278] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.278] | until=5
[08:08:25.278] | relaying element #5
[08:08:25.278] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:25.278] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.278] signalConditionsASAP(NULL, pos=4) ... done
[08:08:25.278] length: 2 (resolved future 4)

[08:08:25.278] checking value #5:
[08:08:25.278] 'obj' is NULL
[08:08:25.278] signalConditionsASAP(NULL, pos=5) ...
[08:08:25.279] | nx: 6
[08:08:25.279] | relay: TRUE
[08:08:25.279] | stdout: TRUE
[08:08:25.279] | signal: TRUE
[08:08:25.279] | resignal: FALSE
[08:08:25.279] | force: TRUE
[08:08:25.279] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:25.279] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.279] | until=6
[08:08:25.279] | relaying element #6
[08:08:25.279] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:25.280] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.280] signalConditionsASAP(NULL, pos=5) ... done
[08:08:25.280] signalConditionsASAP(NULL, pos=5) ...
[08:08:25.280] | nx: 6
[08:08:25.280] | relay: TRUE
[08:08:25.280] | stdout: TRUE
[08:08:25.280] | signal: TRUE
[08:08:25.280] | resignal: FALSE
[08:08:25.280] | force: TRUE
[08:08:25.280] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:25.280] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.280] | until=6
[08:08:25.281] | relaying element #6
[08:08:25.281] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:25.281] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.281] signalConditionsASAP(NULL, pos=5) ... done
[08:08:25.281] length: 1 (resolved future 5)

[08:08:25.281] checking value #6:
[08:08:25.281] 'obj' is atomic
[08:08:25.281] signalConditionsASAP(numeric, pos=6) ...
[08:08:25.281] | nx: 6
[08:08:25.281] | relay: TRUE
[08:08:25.282] | stdout: TRUE
[08:08:25.282] | signal: TRUE
[08:08:25.282] | resignal: FALSE
[08:08:25.282] | force: TRUE
[08:08:25.282] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:25.282] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.282] | until=6
[08:08:25.282] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:25.282] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.282] signalConditionsASAP(numeric, pos=6) ... done
[08:08:25.283] length: 0 (resolved future 6)

[08:08:25.283] Relaying remaining futures ...
[08:08:25.283] | signalConditionsASAP(NULL, pos=0) ...
[08:08:25.283] | : nx: 6
[08:08:25.283] | : relay: TRUE
[08:08:25.283] | : stdout: TRUE
[08:08:25.283] | : signal: TRUE
[08:08:25.283] | : resignal: FALSE
[08:08:25.283] | : force: TRUE
[08:08:25.283] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:25.283] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
 - flush all
[08:08:25.284] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:25.284] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.284] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:25.284] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:3] 2 3 1
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
Dimensions: c(2, 1, 3, 1)
[08:08:25.287] future(..., label = NULL) ...
[08:08:25.287] | lazy: FALSE
[08:08:25.288] | stdout: TRUE
[08:08:25.288] | conditions: [n=1] ‘condition’
[08:08:25.288] | gc: FALSE
[08:08:25.288] | earlySignal: FALSE
[08:08:25.288] | getGlobalsAndPackages() ...
[08:08:25.288] | : Searching for globals ...
[08:08:25.289] | : . globals found: [0] 
[08:08:25.289] | : Searching for globals ... done
[08:08:25.289] | : globals: [0] <none>
[08:08:25.289] | : packages: [0] <none>
[08:08:25.290] | getGlobalsAndPackages() ... done
[08:08:25.290] | run() for ‘Future’ (<unnamed-59>) ...
[08:08:25.290] | : state: ‘created’
[08:08:25.290] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.290] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.290] | : Using MultisessionFutureBackend ...
[08:08:25.290] | : . Number of futures since start: 8 (8 created, 8 launched, 8 finished)
[08:08:25.290] | : . Launching futures ...
[08:08:25.291] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:25.291] | : . ' , Workers: [n=2]
[08:08:25.291] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:25.292] | : . ' , FutureRegistry: ‘workers-681b6315fba68606aeaf4c7e3afba472’
[08:08:25.292] | : . ' , requestWorker() ...
[08:08:25.293] | : . ' , ; requestNode() ...
[08:08:25.293] | : . ' , ; ` Number of workers: 2
[08:08:25.293] | : . ' , ; ` Polling for a free worker ...
[08:08:25.293] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ...
[08:08:25.293] | : . ' , ; ` | : Listing all futures
[08:08:25.293] | : . ' , ; ` | : Number of registered futures: 0
[08:08:25.293] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ... done
[08:08:25.293] | : . ' , ; ` | Total time: 0
[08:08:25.293] | : . ' , ; ` Polling for a free worker ... done
[08:08:25.293] | : . ' , ; ` FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ...
[08:08:25.294] | : . ' , ; ` | Listing all futures
[08:08:25.294] | : . ' , ; ` | Number of registered futures: 0
[08:08:25.294] | : . ' , ; ` FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ... done
[08:08:25.294] | : . ' , ; ` avail: [n=2] ‘1’, ‘2’
[08:08:25.294] | : . ' , ; ` Index of first available worker: 1
[08:08:25.294] | : . ' , ; ` Validate that the worker is functional ...
[08:08:25.366] | : . ' , ; ` | Worker is functional
[08:08:25.366] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ...
[08:08:25.366] | : . ' , ; ` | : Listing all futures
[08:08:25.366] | : . ' , ; ` | : Number of registered futures: 0
[08:08:25.366] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ... done
[08:08:25.366] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:25.367] | : . ' , ; requestNode() ... done
[08:08:25.367] | : . ' , ; cluster node index: 1
[08:08:25.367] | : . ' , requestWorker() ... done
[08:08:25.367] | : . ' , eraseGlobalEnvironment() ...
[08:08:25.367] | : . ' , eraseGlobalEnvironment() ... done
[08:08:25.368] | : . ' , launchFuture() ...
[08:08:25.368] | : . ' , ; cluster node index: 1
[08:08:25.368] | : . ' , ; getFutureData() ...
[08:08:25.368] | : . ' , ; ` getFutureCore() ...
[08:08:25.368] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:25.368] | : . ' , ; ` getFutureCore() ... done
[08:08:25.368] | : . ' , ; ` getFutureCapture() ...
[08:08:25.368] | : . ' , ; ` getFutureCapture() ... done
[08:08:25.368] | : . ' , ; ` getFutureContext() ...
[08:08:25.369] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.369] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:25.369] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.369] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:25.369] | : . ' , ; ` getFutureContext() ... done
[08:08:25.369] | : . ' , ; getFutureData() ... done
[08:08:25.369] | : . ' , ; FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'add', earlySignal = 0) ...
[08:08:25.370] | : . ' , ; ` Appended future to position #1
[08:08:25.370] | : . ' , ; ` Number of registered futures: 1
[08:08:25.370] | : . ' , ; FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'add', earlySignal = 0) ... done
[08:08:25.370] | : . ' , launchFuture() ... done
[08:08:25.370] | : . ' , MultisessionFuture started
[08:08:25.370] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:25.370] | : . Launching futures ... done
[08:08:25.370] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:25.370] | : Using MultisessionFutureBackend ... done
[08:08:25.371] | run() for ‘Future’ (<unnamed-59>) ... done
[08:08:25.371] future(..., label = NULL) ... done
[08:08:25.371] future(..., label = NULL) ...
[08:08:25.371] | lazy: FALSE
[08:08:25.371] | stdout: TRUE
[08:08:25.371] | conditions: [n=1] ‘condition’
[08:08:25.371] | gc: FALSE
[08:08:25.371] | earlySignal: FALSE
[08:08:25.371] | getGlobalsAndPackages() ...
[08:08:25.371] | : Searching for globals ...
[08:08:25.373] | : . globals found: [0] 
[08:08:25.373] | : Searching for globals ... done
[08:08:25.373] | : globals: [0] <none>
[08:08:25.373] | : packages: [0] <none>
[08:08:25.373] | getGlobalsAndPackages() ... done
[08:08:25.373] | run() for ‘Future’ (<unnamed-60>) ...
[08:08:25.373] | : state: ‘created’
[08:08:25.374] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.374] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.374] | : Using MultisessionFutureBackend ...
[08:08:25.374] | : . Number of futures since start: 9 (9 created, 9 launched, 8 finished)
[08:08:25.374] | : . Launching futures ...
[08:08:25.374] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:25.374] | : . ' , Workers: [n=2]
[08:08:25.374] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:25.376] | : . ' , FutureRegistry: ‘workers-681b6315fba68606aeaf4c7e3afba472’
[08:08:25.376] | : . ' , requestWorker() ...
[08:08:25.376] | : . ' , ; requestNode() ...
[08:08:25.376] | : . ' , ; ` Number of workers: 2
[08:08:25.376] | : . ' , ; ` Polling for a free worker ...
[08:08:25.377] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ...
[08:08:25.377] | : . ' , ; ` | : Listing all futures
[08:08:25.377] | : . ' , ; ` | : Number of registered futures: 1
[08:08:25.377] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ... done
[08:08:25.377] | : . ' , ; ` | Total time: 0
[08:08:25.383] | : . ' , ; ` Polling for a free worker ... done
[08:08:25.383] | : . ' , ; ` FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ...
[08:08:25.383] | : . ' , ; ` | Listing all futures
[08:08:25.384] | : . ' , ; ` | Number of registered futures: 1
[08:08:25.384] | : . ' , ; ` FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ... done
[08:08:25.384] | : . ' , ; ` avail: [n=2] ‘2’
[08:08:25.384] | : . ' , ; ` Index of first available worker: 2
[08:08:25.384] | : . ' , ; ` Validate that the worker is functional ...
[08:08:25.456] | : . ' , ; ` | Worker is functional
[08:08:25.456] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ...
[08:08:25.456] | : . ' , ; ` | : Listing all futures
[08:08:25.456] | : . ' , ; ` | : Number of registered futures: 1
[08:08:25.456] | : . ' , ; ` | FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'list', earlySignal = 0) ... done
[08:08:25.457] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:25.457] | : . ' , ; requestNode() ... done
[08:08:25.457] | : . ' , ; cluster node index: 2
[08:08:25.457] | : . ' , requestWorker() ... done
[08:08:25.457] | : . ' , eraseGlobalEnvironment() ...
[08:08:25.458] | : . ' , eraseGlobalEnvironment() ... done
[08:08:25.458] | : . ' , launchFuture() ...
[08:08:25.458] | : . ' , ; cluster node index: 2
[08:08:25.458] | : . ' , ; getFutureData() ...
[08:08:25.458] | : . ' , ; ` getFutureCore() ...
[08:08:25.458] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:25.458] | : . ' , ; ` getFutureCore() ... done
[08:08:25.458] | : . ' , ; ` getFutureCapture() ...
[08:08:25.458] | : . ' , ; ` getFutureCapture() ... done
[08:08:25.459] | : . ' , ; ` getFutureContext() ...
[08:08:25.459] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.459] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:25.459] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.459] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:25.459] | : . ' , ; ` getFutureContext() ... done
[08:08:25.459] | : . ' , ; getFutureData() ... done
[08:08:25.460] | : . ' , ; FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'add', earlySignal = 0) ...
[08:08:25.460] | : . ' , ; ` Appended future to position #2
[08:08:25.460] | : . ' , ; ` Number of registered futures: 2
[08:08:25.460] | : . ' , ; FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'add', earlySignal = 0) ... done
[08:08:25.460] | : . ' , launchFuture() ... done
[08:08:25.460] | : . ' , MultisessionFuture started
[08:08:25.460] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:25.460] | : . Launching futures ... done
[08:08:25.460] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:25.461] | : Using MultisessionFutureBackend ... done
[08:08:25.461] | run() for ‘Future’ (<unnamed-60>) ... done
[08:08:25.461] future(..., label = NULL) ... done
List of 6
 $ a: num 1
 $ b:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x564302d4a600> 
 $ c:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x5643001f4ec0> 
 $  : NULL
 $  : NULL
 $  : num 6
List of 6
 $ a: num 1
 $ b:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x564302d4a600> 
 $ c:Classes 'MultisessionFuture', 'ClusterFuture', 'MultiprocessFuture', 'Future' <environment: 0x5643001f4ec0> 
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:4] 2 1 3 1
 - attr(*, "dimnames")=List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
[08:08:25.466] resolved() for array ...
[08:08:25.467] | Number of elements: 6
[08:08:25.467] | Number of futures: 6
[08:08:25.467] | resolved() for MultisessionFuture (<unnamed-59>) ...
[08:08:25.467] | : Cluster node socket connection: index=4, id=984
[08:08:25.467] | : assertValidConnection() ...
[08:08:25.467] | : . cluster node index: 1
[08:08:25.468] | : assertValidConnection() ... done
[08:08:25.468] | : receiveMessageFromWorker() for ClusterFuture ...
[08:08:25.468] | : . cluster node index: 1
[08:08:25.468] | : . [1] TRUE
[08:08:25.468] | : . received data:
[08:08:25.469] | : . List of 5
[08:08:25.469] | : .  $ type   : chr "VALUE"
[08:08:25.469] | : .  $ value  :List of 16
[08:08:25.469] | : .   ..$ value              : num 2
[08:08:25.469] | : .   ..$ visible            : logi TRUE
[08:08:25.469] | : .   ..$ stdout             : chr ""
[08:08:25.469] | : .   ..$ conditions         : list()
[08:08:25.469] | : .   ..$ rng                : logi FALSE
[08:08:25.469] | : .   ..$ seed               : NULL
[08:08:25.469] | : .   ..$ misuseGlobalEnv    : NULL
[08:08:25.469] | : .   ..$ misuseConnections  :List of 3
[08:08:25.469] | : .   .. ..$ added   : NULL
[08:08:25.469] | : .   .. ..$ removed : NULL
[08:08:25.469] | : .   .. ..$ replaced: NULL
[08:08:25.469] | : .   ..$ misuseDevices      : NULL
[08:08:25.469] | : .   ..$ misuseDefaultDevice: list()
[08:08:25.469] | : .   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:25"
[08:08:25.469] | : .   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:25"
[08:08:25.469] | : .   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "59"
[08:08:25.469] | : .   ..$ session_uuid       : chr "fc6c016afc99663cf036a2d323992128"
[08:08:25.469] | : .   .. ..- attr(*, "source")=List of 5
[08:08:25.469] | : .   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:25.469] | : .   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:25.469] | : .   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:25.469] | : .   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:25.469] | : .   .. .. ..$ pid   : int 69003
[08:08:25.469] | : .   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:24"
[08:08:25.469] | : .   .. .. ..$ random: int 2147483647
[08:08:25.469] | : .   ..$ r_info             :List of 4
[08:08:25.469] | : .   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:25.469] | : .   .. .. ..$ : int [1:3] 4 5 0
[08:08:25.469] | : .   .. ..$ os           : chr "unix"
[08:08:25.469] | : .   .. ..$ os_name      : chr "Linux"
[08:08:25.469] | : .   .. ..$ captures_utf8: logi TRUE
[08:08:25.469] | : .   ..$ version            : chr "1.8"
[08:08:25.469] | : .   ..- attr(*, "class")= chr "FutureResult"
[08:08:25.469] | : .  $ success: logi TRUE
[08:08:25.469] | : .  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:25.469] | : .   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:25.469] | : .  $ tag    : NULL
[08:08:25.479] | : . Received FutureResult
[08:08:25.480] | : . FutureResult:
[08:08:25.480] | : . value: ‘numeric’
[08:08:25.480] | : . visible: TRUE
[08:08:25.480] | : . stdout: character
[08:08:25.480] | : . conditions: [n = 0] 
[08:08:25.480] | : . RNG used: FALSE
[08:08:25.480] | : . duration: 0.002756119 secs (started 2025-06-17 08:08:25.410224)
[08:08:25.480] | : . version: 1.8
[08:08:25.480] | : . FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'remove', earlySignal = 0) ...
[08:08:25.480] | : . ' Removed future from position #1
[08:08:25.480] | : . ' Number of registered futures: 1
[08:08:25.481] | : . FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'remove', earlySignal = 0) ... done
[08:08:25.481] | : . Erased future from future backend
[08:08:25.481] | : . result() for ClusterFuture ...
[08:08:25.481] | : . ' result already collected: FutureResult
[08:08:25.481] | : . result() for ClusterFuture ... done
[08:08:25.481] | : . signalConditions() ...
[08:08:25.481] | : . ' include = ‘immediateCondition’
[08:08:25.481] | : . ' exclude = 
[08:08:25.481] | : . ' resignal = FALSE
[08:08:25.481] | : . ' Number of conditions: 0
[08:08:25.482] | : . '  int 0
[08:08:25.482] | : . signalConditions() ... done
[08:08:25.482] | : receiveMessageFromWorker() for ClusterFuture ... done
[08:08:25.482] | : receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:25.482] | resolved() for MultisessionFuture (<unnamed-59>) ... done
[08:08:25.482] | assertFutureResult() ...
[08:08:25.482] | : Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:25.482] | : Future uuid: 59
[08:08:25.483] | : identical; success
[08:08:25.483] | assertFutureResult() ... done
[08:08:25.483] | resolved() for MultisessionFuture (<unnamed-60>) ...
[08:08:25.483] | : Cluster node socket connection: index=5, id=985
[08:08:25.483] | : assertValidConnection() ...
[08:08:25.483] | : . cluster node index: 2
[08:08:25.484] | : assertValidConnection() ... done
[08:08:25.494] | : socketSelect(list(<connection #5 (id=985)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:25.494] | resolved() for MultisessionFuture (<unnamed-60>) ... done
[08:08:25.494] resolved() for array ... done
 logi [1:2, 1, 1:3, 1] TRUE TRUE FALSE TRUE TRUE TRUE
 - attr(*, "dimnames")=List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
 - attr(*, "names")= chr [1:6] "a" "b" "c" "" ...
[08:08:25.496] value() for array ...
[08:08:25.497] | recursive: 0
[08:08:25.497] | reduce: FALSE
[08:08:25.497] | length: 6
[08:08:25.497] | elements: ‘a’, ‘b’, ‘c’, ‘’, ‘’, ‘’
[08:08:25.497] | Number of remaining objects: 6
[08:08:25.497] | checking value #1:
[08:08:25.497] | 'obj' is atomic
[08:08:25.497] | signalConditionsASAP(numeric, pos=1) ...
[08:08:25.497] | : nx: 6
[08:08:25.498] | : relay: TRUE
[08:08:25.498] | : stdout: TRUE
[08:08:25.498] | : signal: TRUE
[08:08:25.498] | : resignal: FALSE
[08:08:25.498] | : force: TRUE
[08:08:25.498] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:25.498] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:25.498] | : until=2
[08:08:25.498] | : relaying element #2
[08:08:25.498] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:25.499] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:25.499] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:25.499] | length: 5 (resolved future 1)
[08:08:25.499] value() for array ... done
[08:08:25.499] checking value #2:
[08:08:25.499] 'obj' is MultisessionFuture
[08:08:25.499] MultisessionFuture #2
[08:08:25.499] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:25.499] | nx: 6
[08:08:25.499] | relay: TRUE
[08:08:25.500] | stdout: TRUE
[08:08:25.500] | signal: TRUE
[08:08:25.500] | resignal: FALSE
[08:08:25.500] | force: TRUE
[08:08:25.500] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:25.500] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:25.500] | until=2
[08:08:25.500] | relaying element #2
[08:08:25.500] | value() for MultisessionFuture (<unnamed-59>) ...
[08:08:25.500] | : result() for ClusterFuture ...
[08:08:25.501] | : . result already collected: FutureResult
[08:08:25.501] | : result() for ClusterFuture ... done
[08:08:25.501] | : result() for ClusterFuture ...
[08:08:25.501] | : . result already collected: FutureResult
[08:08:25.501] | : result() for ClusterFuture ... done
[08:08:25.501] | : signalConditions() ...
[08:08:25.501] | : . include = ‘immediateCondition’
[08:08:25.501] | : . exclude = 
[08:08:25.501] | : . resignal = FALSE
[08:08:25.502] | : . Number of conditions: 0
[08:08:25.502] | : .  int 0
[08:08:25.502] | : signalConditions() ... done
[08:08:25.502] | : relay stdout ...
[08:08:25.502] | : relay stdout ... done
[08:08:25.502] | : check for misuse ...
[08:08:25.502] | : check for misuse ... done
[08:08:25.503] | value() for MultisessionFuture (<unnamed-59>) ... done
[08:08:25.503] | result() for ClusterFuture ...
[08:08:25.503] | : result already collected: FutureResult
[08:08:25.503] | result() for ClusterFuture ... done
[08:08:25.503] | signalConditions() ...
[08:08:25.503] | : include = ‘immediateCondition’
[08:08:25.503] | : exclude = 
[08:08:25.503] | : resignal = FALSE
[08:08:25.503] | : Number of conditions: 0
[08:08:25.503] | :  int 0
[08:08:25.504] | signalConditions() ... done
[08:08:25.504] | result() for ClusterFuture ...
[08:08:25.504] | : result already collected: FutureResult
[08:08:25.504] | result() for ClusterFuture ... done
[08:08:25.504] | signalConditions() ...
[08:08:25.504] | : include = ‘condition’
[08:08:25.505] | : exclude = ‘error’, ‘immediateCondition’
[08:08:25.505] | : resignal = TRUE
[08:08:25.505] | : Number of conditions: 0
[08:08:25.505] | :  int 0
[08:08:25.505] | signalConditions() ... done
[08:08:25.505] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:25.505] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:25.506] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:25.506] value(<MultisessionFuture>, ...) ...
[08:08:25.506] value(<MultisessionFuture>, ...) ... done
[08:08:25.506] value() for MultisessionFuture (<unnamed-59>) ...
[08:08:25.506] | result() for ClusterFuture ...
[08:08:25.506] | : result already collected: FutureResult
[08:08:25.506] | result() for ClusterFuture ... done
[08:08:25.506] | result() for ClusterFuture ...
[08:08:25.506] | : result already collected: FutureResult
[08:08:25.506] | result() for ClusterFuture ... done
[08:08:25.507] | signalConditions() ...
[08:08:25.507] | : include = ‘immediateCondition’
[08:08:25.507] | : exclude = 
[08:08:25.507] | : resignal = FALSE
[08:08:25.507] | : Number of conditions: 0
[08:08:25.507] | :  int 0
[08:08:25.507] | signalConditions() ... done
[08:08:25.508] | check for misuse ...
[08:08:25.508] | check for misuse ... done
[08:08:25.508] value() for MultisessionFuture (<unnamed-59>) ... done
[08:08:25.508] value: <numeric>
[08:08:25.508] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:25.508] | nx: 6
[08:08:25.508] | relay: TRUE
[08:08:25.508] | stdout: TRUE
[08:08:25.508] | signal: TRUE
[08:08:25.508] | resignal: FALSE
[08:08:25.508] | force: TRUE
[08:08:25.509] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:25.509] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:25.509] | until=3
[08:08:25.509] | relaying element #3
[08:08:25.509] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:25.509] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:25.509] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:25.509] resolve() for MultisessionFuture ...
[08:08:25.509] resolve() for MultisessionFuture ... done
[08:08:25.509] length: 4 (resolved future 2)

[08:08:25.510] checking value #3:
[08:08:25.510] 'obj' is MultisessionFuture
[08:08:25.510] resolved() for MultisessionFuture (<unnamed-60>) ...
[08:08:25.510] | Cluster node socket connection: index=5, id=985
[08:08:25.510] | assertValidConnection() ...
[08:08:25.510] | : cluster node index: 2
[08:08:25.511] | assertValidConnection() ... done
[08:08:25.511] | receiveMessageFromWorker() for ClusterFuture ...
[08:08:25.511] | : cluster node index: 2
[08:08:25.511] | : [1] TRUE
[08:08:25.511] | : received data:
[08:08:25.511] | : List of 5
[08:08:25.511] | :  $ type   : chr "VALUE"
[08:08:25.511] | :  $ value  :List of 16
[08:08:25.511] | :   ..$ value              : NULL
[08:08:25.511] | :   ..$ visible            : logi TRUE
[08:08:25.511] | :   ..$ stdout             : chr ""
[08:08:25.511] | :   ..$ conditions         : list()
[08:08:25.511] | :   ..$ rng                : logi FALSE
[08:08:25.511] | :   ..$ seed               : NULL
[08:08:25.511] | :   ..$ misuseGlobalEnv    : NULL
[08:08:25.511] | :   ..$ misuseConnections  :List of 3
[08:08:25.511] | :   .. ..$ added   : NULL
[08:08:25.511] | :   .. ..$ removed : NULL
[08:08:25.511] | :   .. ..$ replaced: NULL
[08:08:25.511] | :   ..$ misuseDevices      : NULL
[08:08:25.511] | :   ..$ misuseDefaultDevice: list()
[08:08:25.511] | :   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:25"
[08:08:25.511] | :   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:25"
[08:08:25.511] | :   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "60"
[08:08:25.511] | :   ..$ session_uuid       : chr "39c3116ea80068179a88abb33369ed7b"
[08:08:25.511] | :   .. ..- attr(*, "source")=List of 5
[08:08:25.511] | :   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:25.511] | :   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:25.511] | :   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:25.511] | :   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:25.511] | :   .. .. ..$ pid   : int 69004
[08:08:25.511] | :   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:24"
[08:08:25.511] | :   .. .. ..$ random: int 2147483647
[08:08:25.511] | :   ..$ r_info             :List of 4
[08:08:25.511] | :   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:25.511] | :   .. .. ..$ : int [1:3] 4 5 0
[08:08:25.511] | :   .. ..$ os           : chr "unix"
[08:08:25.511] | :   .. ..$ os_name      : chr "Linux"
[08:08:25.511] | :   .. ..$ captures_utf8: logi TRUE
[08:08:25.511] | :   ..$ version            : chr "1.8"
[08:08:25.511] | :   ..- attr(*, "class")= chr "FutureResult"
[08:08:25.511] | :  $ success: logi TRUE
[08:08:25.511] | :  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[08:08:25.511] | :   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:25.511] | :  $ tag    : NULL
[08:08:25.522] | : Received FutureResult
[08:08:25.522] | : FutureResult:
[08:08:25.522] | : value: ‘NULL’
[08:08:25.522] | : visible: TRUE
[08:08:25.522] | : stdout: character
[08:08:25.522] | : conditions: [n = 0] 
[08:08:25.522] | : RNG used: FALSE
[08:08:25.522] | : duration: 0.002720118 secs (started 2025-06-17 08:08:25.501251)
[08:08:25.522] | : version: 1.8
[08:08:25.523] | : FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'remove', earlySignal = 0) ...
[08:08:25.523] | : . Removed future from position #1
[08:08:25.523] | : . Number of registered futures: 0
[08:08:25.523] | : FutureRegistry('workers-681b6315fba68606aeaf4c7e3afba472', action = 'remove', earlySignal = 0) ... done
[08:08:25.523] | : Erased future from future backend
[08:08:25.523] | : result() for ClusterFuture ...
[08:08:25.523] | : . result already collected: FutureResult
[08:08:25.523] | : result() for ClusterFuture ... done
[08:08:25.524] | : signalConditions() ...
[08:08:25.524] | : . include = ‘immediateCondition’
[08:08:25.524] | : . exclude = 
[08:08:25.524] | : . resignal = FALSE
[08:08:25.524] | : . Number of conditions: 0
[08:08:25.524] | : .  int 0
[08:08:25.524] | : signalConditions() ... done
[08:08:25.525] | receiveMessageFromWorker() for ClusterFuture ... done
[08:08:25.525] | receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:25.525] resolved() for MultisessionFuture (<unnamed-60>) ... done
[08:08:25.525] assertFutureResult() ...
[08:08:25.525] | Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:25.525] | Future uuid: 60
[08:08:25.525] | identical; success
[08:08:25.525] assertFutureResult() ... done
[08:08:25.525] MultisessionFuture #3
[08:08:25.525] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:25.525] | nx: 6
[08:08:25.525] | relay: TRUE
[08:08:25.526] | stdout: TRUE
[08:08:25.526] | signal: TRUE
[08:08:25.526] | resignal: FALSE
[08:08:25.526] | force: TRUE
[08:08:25.526] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:25.526] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:25.526] | until=3
[08:08:25.526] | relaying element #3
[08:08:25.526] | value() for MultisessionFuture (<unnamed-60>) ...
[08:08:25.526] | : result() for ClusterFuture ...
[08:08:25.527] | : . result already collected: FutureResult
[08:08:25.527] | : result() for ClusterFuture ... done
[08:08:25.527] | : result() for ClusterFuture ...
[08:08:25.527] | : . result already collected: FutureResult
[08:08:25.527] | : result() for ClusterFuture ... done
[08:08:25.527] | : signalConditions() ...
[08:08:25.527] | : . include = ‘immediateCondition’
[08:08:25.527] | : . exclude = 
[08:08:25.527] | : . resignal = FALSE
[08:08:25.527] | : . Number of conditions: 0
[08:08:25.528] | : .  int 0
[08:08:25.530] | : signalConditions() ... done
[08:08:25.530] | : relay stdout ...
[08:08:25.530] | : relay stdout ... done
[08:08:25.530] | : check for misuse ...
[08:08:25.530] | : check for misuse ... done
[08:08:25.530] | value() for MultisessionFuture (<unnamed-60>) ... done
[08:08:25.531] | result() for ClusterFuture ...
[08:08:25.531] | : result already collected: FutureResult
[08:08:25.531] | result() for ClusterFuture ... done
[08:08:25.531] | signalConditions() ...
[08:08:25.531] | : include = ‘immediateCondition’
[08:08:25.531] | : exclude = 
[08:08:25.531] | : resignal = FALSE
[08:08:25.531] | : Number of conditions: 0
[08:08:25.531] | :  int 0
[08:08:25.532] | signalConditions() ... done
[08:08:25.532] | result() for ClusterFuture ...
[08:08:25.532] | : result already collected: FutureResult
[08:08:25.532] | result() for ClusterFuture ... done
[08:08:25.532] | signalConditions() ...
[08:08:25.532] | : include = ‘condition’
[08:08:25.532] | : exclude = ‘error’, ‘immediateCondition’
[08:08:25.532] | : resignal = TRUE
[08:08:25.532] | : Number of conditions: 0
[08:08:25.533] | :  int 0
[08:08:25.533] | signalConditions() ... done
[08:08:25.533] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.533] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.533] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:25.533] value(<MultisessionFuture>, ...) ...
[08:08:25.533] value(<MultisessionFuture>, ...) ... done
[08:08:25.534] value() for MultisessionFuture (<unnamed-60>) ...
[08:08:25.534] | result() for ClusterFuture ...
[08:08:25.534] | : result already collected: FutureResult
[08:08:25.534] | result() for ClusterFuture ... done
[08:08:25.534] | result() for ClusterFuture ...
[08:08:25.534] | : result already collected: FutureResult
[08:08:25.534] | result() for ClusterFuture ... done
[08:08:25.534] | signalConditions() ...
[08:08:25.534] | : include = ‘immediateCondition’
[08:08:25.534] | : exclude = 
[08:08:25.535] | : resignal = FALSE
[08:08:25.535] | : Number of conditions: 0
[08:08:25.535] | :  int 0
[08:08:25.535] | signalConditions() ... done
[08:08:25.535] | check for misuse ...
[08:08:25.535] | check for misuse ... done
[08:08:25.535] value() for MultisessionFuture (<unnamed-60>) ... done
[08:08:25.536] value: <NULL>
[08:08:25.536] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:25.536] | nx: 6
[08:08:25.536] | relay: TRUE
[08:08:25.536] | stdout: TRUE
[08:08:25.536] | signal: TRUE
[08:08:25.536] | resignal: FALSE
[08:08:25.536] | force: TRUE
[08:08:25.536] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.536] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.536] | until=4
[08:08:25.537] | relaying element #4
[08:08:25.537] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.537] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.537] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:25.537] resolve() for MultisessionFuture ...
[08:08:25.537] resolve() for MultisessionFuture ... done
[08:08:25.537] length: 3 (resolved future 3)

[08:08:25.537] checking value #4:
[08:08:25.537] 'obj' is NULL
[08:08:25.538] signalConditionsASAP(NULL, pos=4) ...
[08:08:25.538] | nx: 6
[08:08:25.538] | relay: TRUE
[08:08:25.538] | stdout: TRUE
[08:08:25.538] | signal: TRUE
[08:08:25.538] | resignal: FALSE
[08:08:25.538] | force: TRUE
[08:08:25.538] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.538] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.538] | until=5
[08:08:25.538] | relaying element #5
[08:08:25.539] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:25.539] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.539] signalConditionsASAP(NULL, pos=4) ... done
[08:08:25.539] signalConditionsASAP(NULL, pos=4) ...
[08:08:25.539] | nx: 6
[08:08:25.539] | relay: TRUE
[08:08:25.539] | stdout: TRUE
[08:08:25.539] | signal: TRUE
[08:08:25.539] | resignal: FALSE
[08:08:25.539] | force: TRUE
[08:08:25.539] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:25.540] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.540] | until=5
[08:08:25.540] | relaying element #5
[08:08:25.540] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:25.540] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.540] signalConditionsASAP(NULL, pos=4) ... done
[08:08:25.540] length: 2 (resolved future 4)

[08:08:25.540] checking value #5:
[08:08:25.540] 'obj' is NULL
[08:08:25.540] signalConditionsASAP(NULL, pos=5) ...
[08:08:25.541] | nx: 6
[08:08:25.541] | relay: TRUE
[08:08:25.541] | stdout: TRUE
[08:08:25.541] | signal: TRUE
[08:08:25.541] | resignal: FALSE
[08:08:25.541] | force: TRUE
[08:08:25.541] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:25.541] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.541] | until=6
[08:08:25.541] | relaying element #6
[08:08:25.541] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:25.542] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.542] signalConditionsASAP(NULL, pos=5) ... done
[08:08:25.542] signalConditionsASAP(NULL, pos=5) ...
[08:08:25.542] | nx: 6
[08:08:25.542] | relay: TRUE
[08:08:25.542] | stdout: TRUE
[08:08:25.542] | signal: TRUE
[08:08:25.542] | resignal: FALSE
[08:08:25.542] | force: TRUE
[08:08:25.542] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:25.542] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.543] | until=6
[08:08:25.543] | relaying element #6
[08:08:25.543] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:25.543] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.543] signalConditionsASAP(NULL, pos=5) ... done
[08:08:25.543] length: 1 (resolved future 5)

[08:08:25.543] checking value #6:
[08:08:25.543] 'obj' is atomic
[08:08:25.543] signalConditionsASAP(numeric, pos=6) ...
[08:08:25.543] | nx: 6
[08:08:25.544] | relay: TRUE
[08:08:25.544] | stdout: TRUE
[08:08:25.544] | signal: TRUE
[08:08:25.544] | resignal: FALSE
[08:08:25.544] | force: TRUE
[08:08:25.544] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:25.544] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.544] | until=6
[08:08:25.544] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:25.544] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.545] signalConditionsASAP(numeric, pos=6) ... done
[08:08:25.545] length: 0 (resolved future 6)

[08:08:25.545] Relaying remaining futures ...
[08:08:25.545] | signalConditionsASAP(NULL, pos=0) ...
[08:08:25.545] | : nx: 6
[08:08:25.545] | : relay: TRUE
[08:08:25.545] | : stdout: TRUE
[08:08:25.545] | : signal: TRUE
[08:08:25.545] | : resignal: FALSE
[08:08:25.545] | : force: TRUE
[08:08:25.546] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:25.546] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
 - flush all
[08:08:25.546] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:25.546] | : queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:25.546] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:25.546] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $  : NULL
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:4] 2 1 3 1
 - attr(*, "dimnames")=List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
*** futures() - list ... DONE
Type of object: environment
Type of future: multicore
[08:08:25.550] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.550] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:25.550] | : all.equal() for FutureStrategyList ...
[08:08:25.551] | : . New stack:
[08:08:25.551] | : . List of 1
[08:08:25.551] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:25.551] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:25.551] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:25.551] | : .   ..- attr(*, "init")= logi TRUE
[08:08:25.551] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.551] | : .     ...)  
[08:08:25.551] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.551] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.551] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:25.551] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.553] | : . Old stack:
[08:08:25.553] | : . List of 1
[08:08:25.553] | : .  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:25.553] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.553] | : .   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:25.553] | : .   ..- attr(*, "init")= chr "done"
[08:08:25.553] | : .   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:25.553] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:25.553] | : .   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:25.553] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:25.553] | : .   ..- attr(*, "untweakable")= chr "persistent"
[08:08:25.553] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:25.553] | : .   ..- attr(*, "backend")=Classes 'MultisessionFutureBackend', 'ClusterFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564304370a08> 
[08:08:25.553] | : .   .. ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:25.553] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:25.553] | : .   .. .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:25.553] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.557] | : . Not identical
[08:08:25.557] | : . all.equal() for future ...
[08:08:25.557] | : . ' List of 2
[08:08:25.557] | : . '  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:25.557] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:08:25.557] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:25.557] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:25.557] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.557] | : . '     ...)  
[08:08:25.557] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.557] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.557] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:25.557] | : . '  $ current:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:25.557] | : . '     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.557] | : . '   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:25.557] | : . '   ..- attr(*, "init")= chr "done"
[08:08:25.557] | : . '   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:25.557] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:25.557] | : . '   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:25.557] | : . '   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:25.557] | : . '   ..- attr(*, "untweakable")= chr "persistent"
[08:08:25.557] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:25.557] | : . '   ..- attr(*, "backend")=Classes 'MultisessionFutureBackend', 'ClusterFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564304370a08> 
[08:08:25.557] | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:25.557] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:25.557] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:25.562] | : . ' Formals differ
[08:08:25.563] | : . all.equal() for future ... done
[08:08:25.563] | : . Future strategies differ at level 1
[08:08:25.563] | : all.equal() for FutureStrategyList ... done
[08:08:25.563] | : plan(): Setting new future backend stack:
[08:08:25.563] | : List of future strategies:
[08:08:25.563] | : 1. multicore:
[08:08:25.563] | :    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:25.563] | :    - tweaked: FALSE
[08:08:25.563] | :    - call: plan(strategy)
[08:08:25.563] | : List of 1
[08:08:25.563] | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:25.563] | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:25.563] | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:25.563] | :   ..- attr(*, "init")= logi TRUE
[08:08:25.563] | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.563] | :     ...)  
[08:08:25.563] | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.563] | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.563] | :   ..- attr(*, "call")= language plan(strategy)
[08:08:25.563] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.566] | : plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:08:25.566] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.566] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:08:25.566] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.566] | : . stopWorkers() for MultisessionFutureBackend ...
[08:08:25.567] | : . ' Interrupt active futures ...
[08:08:25.567] | : . ' , Number of futures: 0
[08:08:25.567] | : . ' Interrupt active futures ... done
[08:08:25.567] | : . ' Clear future registry ...
[08:08:25.568] | : . ' Clear future registry ... done
[08:08:25.568] | : . ' Stop cluster workers ...
[08:08:25.568] | : . ' , Stopping existing cluster ...
[08:08:25.568] | : . ' , ; Cluster to shut down:
[08:08:25.568] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:25.582] | : . ' , ; Stopped cluster: ‘c(TRUE, TRUE)’
[08:08:25.623] | : . ' , Stopping existing cluster ... done
[08:08:25.623] | : . ' Stop cluster workers ... done
[08:08:25.623] | : . stopWorkers() for MultisessionFutureBackend ... done
[08:08:25.623] | : . Legacy shutdown of cluster workers ...
[08:08:25.623] | : . ' Stopping existing cluster ...
[08:08:25.623] | : . ' , No pre-existing cluster. Skipping
[08:08:25.623] | : . ' Stopping existing cluster ... done
[08:08:25.623] | : . Legacy shutdown of cluster workers ... done
[08:08:25.624] | : plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:08:25.624] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:08:25.624] | : . function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:25.624] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:25.624] | : .  - attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:25.624] | : .  - attr(*, "init")= logi TRUE
[08:08:25.624] | : .  - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.624] | : .     ...)  
[08:08:25.624] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.624] | : .  - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.624] | : .  - attr(*, "call")= language plan(strategy)
[08:08:25.626] | : . init: TRUE
[08:08:25.626] | : . makeFutureBackend(<multicore>) ...
[08:08:25.626] | : . ' Backend function: <‘NULL’>
[08:08:25.626] | : . ' Evaluator tweak arguments: [n=0]
[08:08:25.627] | : . '  list()
[08:08:25.627] | : . ' Evaluator formal arguments: [n=3]
[08:08:25.627] | : . '  list()
[08:08:25.627] | : . ' Backend factory arguments: [n=3]
[08:08:25.627] | : . ' Dotted pair list of 3
[08:08:25.627] | : . '  $ workers    : language availableCores(constraints = "multicore")
[08:08:25.627] | : . '  $ gc         : logi FALSE
[08:08:25.627] | : . '  $ earlySignal: logi FALSE
[08:08:25.639] | : . ' Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:25.639] | : . makeFutureBackend(<multicore>) ... done
[08:08:25.639] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:08:25.639] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.639] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.640] | : plan(): nbrOfWorkers() = 2
[08:08:25.640] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:25.640] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Dimensions: NULL
[08:08:25.640] future(..., label = NULL) ...
[08:08:25.640] | lazy: FALSE
[08:08:25.640] | stdout: TRUE
[08:08:25.640] | conditions: [n=1] ‘condition’
[08:08:25.640] | gc: FALSE
[08:08:25.640] | earlySignal: FALSE
[08:08:25.640] | getGlobalsAndPackages() ...
[08:08:25.641] | : Searching for globals ...
[08:08:25.642] | : . globals found: [0] 
[08:08:25.642] | : Searching for globals ... done
[08:08:25.642] | : globals: [0] <none>
[08:08:25.642] | : packages: [0] <none>
[08:08:25.642] | getGlobalsAndPackages() ... done
[08:08:25.642] | run() for ‘Future’ (<unnamed-61>) ...
[08:08:25.643] | : state: ‘created’
[08:08:25.643] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.643] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.643] | : Using MulticoreFutureBackend ...
[08:08:25.643] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:25.643] | : . Launching futures ...
[08:08:25.643] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:25.643] | : . ' , getFutureData() ...
[08:08:25.643] | : . ' , ; getFutureCore() ...
[08:08:25.644] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:25.644] | : . ' , ; getFutureCore() ... done
[08:08:25.644] | : . ' , ; getFutureCapture() ...
[08:08:25.644] | : . ' , ; getFutureCapture() ... done
[08:08:25.644] | : . ' , ; getFutureContext() ...
[08:08:25.644] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.644] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:25.644] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.644] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:25.644] | : . ' , ; getFutureContext() ... done
[08:08:25.645] | : . ' , getFutureData() ... done
[08:08:25.645] | : . ' , requestCore(..., workers = 2) ...
[08:08:25.645] | : . ' , requestCore(..., workers = 2) ... done
[08:08:25.648] | : . ' , MulticoreFuture started
[08:08:25.648] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:25.648] | : . Launching futures ... done
[08:08:25.649] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:25.649] | : Using MulticoreFutureBackend ... done
[08:08:25.649] | run() for ‘Future’ (<unnamed-61>) ... done
[08:08:25.649] future(..., label = NULL) ... done
[08:08:25.649] future(..., label = NULL) ...
[08:08:25.650] | lazy: FALSE
[08:08:25.650] | stdout: TRUE
[08:08:25.650] | conditions: [n=1] ‘condition’
[08:08:25.650] | gc: FALSE
[08:08:25.650] | earlySignal: FALSE
[08:08:25.650] | getGlobalsAndPackages() ...
[08:08:25.650] | : Searching for globals ...
[08:08:25.651] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.651] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:25.651] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.652] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:25.652] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:25.652] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:25.652] | : . ' , ; ` | New stack:
[08:08:25.653] | : . globals found: [0] 
[08:08:25.653] | : Searching for globals ... done
[08:08:25.653] | : globals: [0] <none>
[08:08:25.653] | : packages: [0] <none>
[08:08:25.653] | getGlobalsAndPackages() ... done
[08:08:25.654] | run() for ‘Future’ (<unnamed-62>) ...
[08:08:25.654] | : state: ‘created’
[08:08:25.654] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.654] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.654] | : Using MulticoreFutureBackend ...
[08:08:25.655] | : . Number of futures since start: 1 (1 created, 1 launched, 0 finished)
[08:08:25.655] | : . Launching futures ...
[08:08:25.655] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:25.655] | : . ' , getFutureData() ...
[08:08:25.655] | : . ' , ; getFutureCore() ...
[08:08:25.656] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:25.656] | : . ' , ; getFutureCore() ... done
[08:08:25.656] | : . ' , ; getFutureCapture() ...
[08:08:25.656] | : . ' , ; getFutureCapture() ... done
[08:08:25.652] | : . ' , ; ` | List of 1
[08:08:25.652] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.652] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:25.652] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:25.652] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.652] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.652] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.652] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.652] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.656] | : . ' , ; ` | Old stack:
[08:08:25.656] | : . ' , ; getFutureContext() ...
[08:08:25.656] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.656] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:25.657] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.657] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:25.657] | : . ' , ; getFutureContext() ... done
[08:08:25.657] | : . ' , getFutureData() ... done
[08:08:25.657] | : . ' , requestCore(..., workers = 2) ...
[08:08:25.658] | : . ' , requestCore(..., workers = 2) ... done
[08:08:25.656] | : . ' , ; ` | List of 1
[08:08:25.656] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:25.656] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:25.656] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:25.656] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:25.656] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.656] | : . ' , ; ` |     ...)  
[08:08:25.656] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.656] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.656] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:25.656] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:25.656] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.656] | : . ' , ; ` |     ...)  
[08:08:25.656] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.656] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.660] | : . ' , MulticoreFuture started
[08:08:25.661] | : . ' , ; ` | Not identical
[08:08:25.661] | : . ' , ; ` | all.equal() for future ...
[08:08:25.661] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:25.661] | : . Launching futures ... done
[08:08:25.662] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:25.662] | : Using MulticoreFutureBackend ... done
[08:08:25.662] | run() for ‘Future’ (<unnamed-62>) ... done
[08:08:25.662] future(..., label = NULL) ... done
[08:08:25.663] future(..., label = NULL) ...
[08:08:25.664] | lazy: FALSE
[08:08:25.664] | stdout: TRUE
[08:08:25.664] | conditions: [n=1] ‘condition’
[08:08:25.664] | gc: FALSE
[08:08:25.665] | earlySignal: FALSE
[08:08:25.665] | getGlobalsAndPackages() ...
[08:08:25.665] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.665] | : Searching for globals ...
[08:08:25.665] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:25.665] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.666] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:25.666] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:25.667] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:25.667] | : . ' , ; ` | New stack:
[08:08:25.661] | : . ' , ; ` | : List of 2
[08:08:25.661] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.661] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:25.661] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:25.661] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.661] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.661] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.661] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.661] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:25.661] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:25.661] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:25.661] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:25.661] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.661] | : . ' , ; ` | :     ...)  
[08:08:25.661] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.661] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.661] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:25.661] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:25.661] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.661] | : . ' , ; ` | :     ...)  
[08:08:25.661] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.669] | : . ' , ; ` | : Formals differ
[08:08:25.669] | : . ' , ; ` | all.equal() for future ... done
[08:08:25.669] | : . ' , ; ` | Future strategies differ at level 1
[08:08:25.669] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:25.669] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:25.669] | : . ' , ; ` List of future strategies:
[08:08:25.669] | : . ' , ; ` 1. sequential:
[08:08:25.669] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:25.669] | : . ' , ; `    - tweaked: FALSE
[08:08:25.669] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.667] | : . ' , ; ` | List of 1
[08:08:25.667] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.667] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:25.667] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:25.667] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.667] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.667] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.667] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.667] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.673] | : . ' , ; ` | Old stack:
[08:08:25.673] | : . globals found: [1] ‘{’
[08:08:25.673] | : Searching for globals ... done
[08:08:25.673] | : Resolving globals: FALSE
[08:08:25.674] | : Search for packages associated with the globals ...
[08:08:25.670] | : . ' , ; ` List of 1
[08:08:25.670] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.670] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:25.670] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:25.670] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.670] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.670] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.670] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.670] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.674] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:25.674] | : . Packages associated with globals: [1] ‘base’
[08:08:25.674] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:25.674] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.675] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:25.674] | : . Packages: [1] ‘base’
[08:08:25.675] | : Search for packages associated with the globals ... done
[08:08:25.675] | : Packages after dropping 'base': [0] 
[08:08:25.675] | : globals: [0] 
[08:08:25.675] | : packages: [0] 
[08:08:25.676] | getGlobalsAndPackages() ... done
[08:08:25.676] | run() for ‘Future’ (<unnamed-63>) ...
[08:08:25.676] | : state: ‘created’
[08:08:25.677] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.677] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.677] | : Using MulticoreFutureBackend ...
[08:08:25.677] | : . Number of futures since start: 2 (2 created, 2 launched, 0 finished)
[08:08:25.675] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.675] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:25.675] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:25.675] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.675] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.675] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.675] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.678] | : . ' , ; ` | : init: TRUE
[08:08:25.678] | : . Launching futures ...
[08:08:25.678] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:25.678] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:25.678] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:25.678] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:25.678] | : . ' , getFutureData() ...
[08:08:25.678] | : . ' , ; ` | : .  list()
[08:08:25.678] | : . ' , ; getFutureCore() ...
[08:08:25.679] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:25.679] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:25.679] | : . ' , ; getFutureCore() ... done
[08:08:25.679] | : . ' , ; ` | : .  list()
[08:08:25.679] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:25.679] | : . ' , ; getFutureCapture() ...
[08:08:25.679] | : . ' , ; getFutureCapture() ... done
[08:08:25.679] | : . ' , ; getFutureContext() ...
[08:08:25.680] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.680] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:25.673] | : . ' , ; ` | List of 1
[08:08:25.673] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:25.673] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:25.673] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:25.673] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:25.673] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.673] | : . ' , ; ` |     ...)  
[08:08:25.673] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.673] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.673] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:25.673] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:25.673] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.673] | : . ' , ; ` |     ...)  
[08:08:25.673] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.673] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.680] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.680] | : . ' , ; ` | Not identical
[08:08:25.679] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:25.679] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:25[08:08:25.680] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
.679] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:25.680] | : . ' , ; ` | all.equal() for future ...
[08:08:25.681] | : . ' , ; getFutureContext() ... done
[08:08:25.681] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:25.681] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:25.681] | : . ' , getFutureData() ... done
[08:08:25.681] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:25.681] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.681] | : . ' , requestCore(..., workers = 2) ...
[08:08:25.681] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:25.681] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:25.682] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:25.682] | : . ' , ; Poll #1 (0): usedCores() = 2, workers = 2
[08:08:25.685] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:25.685] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:25.685] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:25.685] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:25.685] | : . ' , ; ` | : New stack:
[08:08:25.681] | : . ' , ; ` | : List of 2
[08:08:25.681] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.681] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:25.681] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:25.681] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.681] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.681] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.681] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.681] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:25.681] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:25.681] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:25.681] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:25.681] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.681] | : . ' , ; ` | :     ...)  
[08:08:25.681] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.681] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.681] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:25.681] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:25.681] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.681] | : . ' , ; ` | :     ...)  
[08:08:25.681] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.689] | : . ' , ; ` | : Formals differ
[08:08:25.689] | : . ' , ; ` | all.equal() for future ... done
[08:08:25.689] | : . ' , ; ` | Future strategies differ at level 1
[08:08:25.690] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:25.690] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:25.686] | : . ' , ; ` | : List of 1
[08:08:25.686] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:25.686] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:25.686] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:25.686] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:25.686] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.686] | : . ' , ; ` | :     ...)  
[08:08:25.686] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.686] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.686] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:25.686] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:25.686] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.686] | : . ' , ; ` | :     ...)  
[08:08:25.686] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.686] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.690] | : . ' , ; ` | : Old stack:
[08:08:25.690] | : . ' , ; ` List of future strategies:
[08:08:25.690] | : . ' , ; ` 1. sequential:
[08:08:25.690] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:25.690] | : . ' , ; `    - tweaked: FALSE
[08:08:25.690] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.691] | : . ' , ; ` List of 1
[08:08:25.691] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.691] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:25.691] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:25.691] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.691] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.691] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.691] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.691] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.694] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:25.694] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:25.695] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.695] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:25.690] | : . ' , ; ` | : List of 1
[08:08:25.690] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.690] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:25.690] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:25.690] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.690] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.690] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.690] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.690] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303f39c58> 
[08:08:25.690] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.690] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.690] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.695] | : . ' , ; ` | : Not identical
[08:08:25.695] | : . ' , ; ` | : all.equal() for future ...
[08:08:25.695] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.695] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:25.695] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:25.695] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.695] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.695] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.695] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.698] | : . ' , ; ` | : init: TRUE
[08:08:25.698] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:25.698] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:25.698] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:25.698] | : . ' , ; ` | : .  list()
[08:08:25.699] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:25.699] | : . ' , ; ` | : .  list()
[08:08:25.699] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:25.699] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:25.699] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:25.699] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:25.701] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:25.701] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:25.701] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:25.702] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.702] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:25.702] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:25.702] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:25.703] | : . ' , ; readImmediateCondition() ...
[08:08:25.703] | : . ' , ; ` Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:25.703] | : . ' , ; ` Number of RDS files: 0
[08:08:25.695] | : . ' , ; ` | : . List of 2
[08:08:25.695] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:25.695] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:25.695] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:25.695] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:25.695] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.695] | : . ' , ; ` | : .     ...)  
[08:08:25.695] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.695] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.695] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:25.695] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:25.695] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.695] | : . ' , ; ` | : .     ...)  
[08:08:25.695] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.695] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.695] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:25.695] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:25.695] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.695] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.695] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.695] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.695] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303f39c58> 
[08:08:25.695] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.695] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.703] | : . ' , ; ` Returned conditions set:
[08:08:25.704] | : . ' , ; `  list()
[08:08:25.704] | : . ' , ; ` | : . Formals differ
[08:08:25.704] | : . ' , ; readImmediateCondition() ... done
[08:08:25.704] | : . ' , ; ` | : all.equal() for future ... done
[08:08:25.704] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:25.705] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:25.705] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:25.705] | : . ' , ; ` | List of future strategies:
[08:08:25.705] | : . ' , ; ` | 1. multicore:
[08:08:25.705] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:25.705] | : . ' , ; ` |    - tweaked: FALSE
[08:08:25.705] | : . ' , ; ` |    - call: plan(strategy)
[08:08:25.706] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:25.706] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:25.706] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:25.707] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:25.707] | : . ' , ; ` | : New stack:
[08:08:25.705] | : . ' , ; ` | List of 1
[08:08:25.705] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:25.705] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:25.705] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:25.705] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:25.705] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.705] | : . ' , ; ` |     ...)  
[08:08:25.705] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.705] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.705] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:25.705] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:25.705] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.705] | : . ' , ; ` |     ...)  
[08:08:25.705] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.705] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.711] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:25.711] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:25.711] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.711] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.707] | : . ' , ; ` | : List of 1
[08:08:25.707] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:25.707] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:25.707] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:25.707] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:25.707] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.707] | : . ' , ; ` | :     ...)  
[08:08:25.707] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.707] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.707] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:25.707] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:25.707] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.707] | : . ' , ; ` | :     ...)  
[08:08:25.707] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.707] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.712] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:25.712] | : . ' , ; ` | : Old stack:
[08:08:25.712] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:25.712] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:25.712] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:25.715] | : . ' , ; readImmediateCondition() ...
[08:08:25.715] | : . ' , ; ` Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:25.715] | : . ' , ; ` Number of RDS files: 0
[08:08:25.715] | : . ' , ; ` Returned conditions set:
[08:08:25.716] | : . ' , ; `  list()
[08:08:25.716] | : . ' , ; readImmediateCondition() ... done
[08:08:25.717] | : . ' , ; Poll #2 (0.03 secs): usedCores() = 2, workers = 2
[08:08:25.712] | : . ' , ; ` | : List of 1
[08:08:25.712] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.712] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:25.712] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:25.712] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.712] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.712] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.712] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.712] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302a1d020> 
[08:08:25.712] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.712] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.712] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.718] | : . ' , ; ` | : Not identical
[08:08:25.718] | : . ' , ; ` | : all.equal() for future ...
[08:08:25.718] | : . ' , ; ` | : . List of 2
[08:08:25.718] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:25.718] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:25.718] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:25.718] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:25.718] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.718] | : . ' , ; ` | : .     ...)  
[08:08:25.718] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.718] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.718] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:25.718] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:25.718] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.718] | : . ' , ; ` | : .     ...)  
[08:08:25.718] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.718] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.718] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:25.718] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:25.718] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.718] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.718] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.718] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.718] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302a1d020> 
[08:08:25.718] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.718] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.727] | : . ' , ; ` | : . Formals differ
[08:08:25.727] | : . ' , ; ` | : all.equal() for future ... done
[08:08:25.727] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:25.728] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:25.728] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:25.728] | : . ' , ; ` | List of future strategies:
[08:08:25.728] | : . ' , ; ` | 1. multicore:
[08:08:25.728] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:25.728] | : . ' , ; ` |    - tweaked: FALSE
[08:08:25.728] | : . ' , ; ` |    - call: plan(strategy)
[08:08:25.729] | : . ' , ; ` | List of 1
[08:08:25.729] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:25.729] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:25.729] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:25.729] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:25.729] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.729] | : . ' , ; ` |     ...)  
[08:08:25.729] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.729] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.729] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:25.729] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:25.729] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.729] | : . ' , ; ` |     ...)  
[08:08:25.729] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.729] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.739] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:25.740] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:25.740] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.740] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.740] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:25.741] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:25.741] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:25.741] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:25.769] | : . ' , ; readImmediateCondition() ...
[08:08:25.772] | : . ' , ; ` Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:25.772] | : . ' , ; ` Number of RDS files: 0
[08:08:25.772] | : . ' , ; ` Returned conditions set:
[08:08:25.772] | : . ' , ; `  list()
[08:08:25.773] | : . ' , ; readImmediateCondition() ... done
[08:08:25.773] | : . ' , ; value() for MulticoreFuture (<unnamed-61>) ...
[08:08:25.773] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:25.774] | : . ' , ; ` | readImmediateCondition() ...
[08:08:25.774] | : . ' , ; ` | : Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:25.775] | : . ' , ; ` | : Number of RDS files: 0
[08:08:25.775] | : . ' , ; ` | : Returned conditions set:
[08:08:25.775] | : . ' , ; ` | :  list()
[08:08:25.776] | : . ' , ; ` | readImmediateCondition() ... done
[08:08:25.776] | : . ' , ; ` | result() for MulticoreFuture ...
[08:08:25.777] | : . ' , ; ` | result() for MulticoreFuture ... done
[08:08:25.777] | : . ' , ; ` | signalConditions() ...
[08:08:25.777] | : . ' , ; ` | : include = ‘immediateCondition’
[08:08:25.777] | : . ' , ; ` | : exclude = 
[08:08:25.777] | : . ' , ; ` | : resignal = FALSE
[08:08:25.778] | : . ' , ; ` | : Number of conditions: 6
[08:08:25.778] | : . ' , ; ` | :  int 6
[08:08:25.779] | : . ' , ; ` | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.779] | : . ' , ; ` | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.779] | : . ' , ; ` | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.780] | : . ' , ; ` | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.780] | : . ' , ; ` | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.780] | : . ' , ; ` | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.780] | : . ' , ; ` | signalConditions() ... done
[08:08:25.781] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:25.781] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:25.781] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:25.781] | : . ' , ; ` signalConditions() ...
[08:08:25.781] | : . ' , ; ` | include = ‘immediateCondition’
[08:08:25.782] | : . ' , ; ` | exclude = 
[08:08:25.782] | : . ' , ; ` | resignal = FALSE
[08:08:25.782] | : . ' , ; ` | Number of conditions: 6
[08:08:25.782] | : . ' , ; ` |  int 6
[08:08:25.783] | : . ' , ; ` | Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.783] | : . ' , ; ` | Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.783] | : . ' , ; ` | Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.784] | : . ' , ; ` | Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.784] | : . ' , ; ` | Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.784] | : . ' , ; ` | Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.784] | : . ' , ; ` signalConditions() ... done
[08:08:25.784] | : . ' , ; ` check for misuse ...
[08:08:25.785] | : . ' , ; ` check for misuse ... done
[08:08:25.785] | : . ' , ; value() for MulticoreFuture (<unnamed-61>) ... done
[08:08:25.785] | : . ' , requestCore(..., workers = 2) ... done
[08:08:25.788] | : . ' , MulticoreFuture started
[08:08:25.789] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:25.789] | : . Launching futures ... done
[08:08:25.789] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:25.789] | : Using MulticoreFutureBackend ... done
[08:08:25.789] | run() for ‘Future’ (<unnamed-63>) ... done
[08:08:25.790] future(..., label = NULL) ... done
<environment: 0x564302fd9938> 
<environment: 0x564304c1bc38> 
[08:08:25.792] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.792] resolved() for environment ...
[08:08:25.792] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:25.792] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.792] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:25.792] | resolved() for list ...
[08:08:25.793] | : Number of elements: 4
[08:08:25.793] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:25.793] | : Number of futures: 4
[08:08:25.793] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:25.793] | : . ' , ; ` | New stack:
[08:08:25.793] | : readImmediateCondition() ...
[08:08:25.793] | : . Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:25.794] | : . Number of RDS files: 0
[08:08:25.794] | : . Returned conditions set:
[08:08:25.794] | : .  list()
[08:08:25.794] | : readImmediateCondition() ... done
[08:08:25.793] | : . ' , ; ` | List of 1
[08:08:25.793] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.793] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:25.793] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:25.793] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.793] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.793] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.793] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.793] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.797] | : . ' , ; ` | Old stack:
[08:08:25.797] | : . ' , ; ` | List of 1
[08:08:25.797] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:25.797] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:25.797] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:25.797] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:25.797] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.797] | : . ' , ; ` |     ...)  
[08:08:25.797] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.797] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.797] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:25.797] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:25.797] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.797] | : . ' , ; ` |     ...)  
[08:08:25.797] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.797] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.802] | : . ' , ; ` | Not identical
[08:08:25.802] | : . ' , ; ` | all.equal() for future ...
[08:08:25.805] | : readImmediateCondition() ...
[08:08:25.805] | : . Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:25.805] | : . Number of RDS files: 0
[08:08:25.805] | : . Returned conditions set:
[08:08:25.805] | : .  list()
[08:08:25.806] | : readImmediateCondition() ... done
[08:08:25.806] | resolved() for list ... done
[08:08:25.806] resolved() for environment ... done
 Named logi [1:4] TRUE TRUE TRUE FALSE
 - attr(*, "names")= chr [1:4] "a" "b" "c" "d"
[08:08:25.807] value() for MulticoreFuture (<unnamed-63>) ...
[08:08:25.807] | result() for MulticoreFuture ...
[08:08:25.802] | : . ' , ; ` | : List of 2
[08:08:25.802] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.802] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:25.802] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:25.802] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.802] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.802] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.802] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.802] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:25.802] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:25.802] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:25.802] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:25.802] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.802] | : . ' , ; ` | :     ...)  
[08:08:25.802] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.802] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.802] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:25.802] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:25.802] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.802] | : . ' , ; ` | :     ...)  
[08:08:25.802] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.810] | : . ' , ; ` | : Formals differ
[08:08:25.810] | : . ' , ; ` | all.equal() for future ... done
[08:08:25.810] | : . ' , ; ` | Future strategies differ at level 1
[08:08:25.810] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:25.810] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:25.810] | : . ' , ; ` List of future strategies:
[08:08:25.810] | : . ' , ; ` 1. sequential:
[08:08:25.810] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:25.810] | : . ' , ; `    - tweaked: FALSE
[08:08:25.810] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.811] | : . ' , ; ` List of 1
[08:08:25.811] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.811] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:25.811] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:25.811] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.811] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.811] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.811] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.811] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.815] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:25.815] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:25.815] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.815] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:25.815] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.815] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:25.815] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:25.815] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.815] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.815] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.815] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.818] | : . ' , ; ` | : init: TRUE
[08:08:25.818] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:25.818] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:25.818] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:25.819] | : . ' , ; ` | : .  list()
[08:08:25.819] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:25.819] | : . ' , ; ` | : .  list()
[08:08:25.819] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:25.820] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:25.820] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:25.820] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:25.821] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:25.821] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:25.822] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:25.822] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.822] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:25.822] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:25.822] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:25.825] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:25.826] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:25.826] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:25.826] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:25.826] | : . ' , ; ` | : New stack:
[08:08:25.826] | : . ' , ; ` | : List of 1
[08:08:25.826] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:25.826] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:25.826] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:25.826] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:25.826] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.826] | : . ' , ; ` | :     ...)  
[08:08:25.826] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.826] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.826] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:25.826] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:25.826] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.826] | : . ' , ; ` | :     ...)  
[08:08:25.826] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.826] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.831] | : . ' , ; ` | : Old stack:
[08:08:25.831] | : . ' , ; ` | : List of 1
[08:08:25.831] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.831] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:25.831] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:25.831] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.831] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.831] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.831] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.831] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56430428d768> 
[08:08:25.831] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.831] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.831] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.835] | : . ' , ; ` | : Not identical
[08:08:25.836] | : . ' , ; ` | : all.equal() for future ...
[08:08:25.836] | : . ' , ; ` | : . List of 2
[08:08:25.836] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:25.836] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:25.836] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:25.836] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:25.836] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.836] | : . ' , ; ` | : .     ...)  
[08:08:25.836] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.836] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.836] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:25.836] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:25.836] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.836] | : . ' , ; ` | : .     ...)  
[08:08:25.836] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.836] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.836] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:25.836] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:25.836] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.836] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.836] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.836] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.836] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56430428d768> 
[08:08:25.836] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.836] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.844] | : . ' , ; ` | : . Formals differ
[08:08:25.844] | : . ' , ; ` | : all.equal() for future ... done
[08:08:25.845] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:25.845] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:25.845] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:25.845] | : . ' , ; ` | List of future strategies:
[08:08:25.845] | : . ' , ; ` | 1. multicore:
[08:08:25.845] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:25.845] | : . ' , ; ` |    - tweaked: FALSE
[08:08:25.845] | : . ' , ; ` |    - call: plan(strategy)
[08:08:25.845] | : . ' , ; ` | List of 1
[08:08:25.845] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:25.845] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:25.845] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:25.845] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:25.845] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.845] | : . ' , ; ` |     ...)  
[08:08:25.845] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.845] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.845] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:25.845] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:25.845] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.845] | : . ' , ; ` |     ...)  
[08:08:25.845] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.845] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.850] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:25.850] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:25.850] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.850] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.851] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:25.851] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:25.851] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:25.851] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:25.852] | : readImmediateCondition() ...
[08:08:25.852] | : . Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:25.852] | : . Number of RDS files: 0
[08:08:25.852] | : . Returned conditions set:
[08:08:25.852] | : .  list()
[08:08:25.853] | : readImmediateCondition() ... done
[08:08:25.853] | : result() for MulticoreFuture ...
[08:08:25.853] | : result() for MulticoreFuture ... done
[08:08:25.854] | : signalConditions() ...
[08:08:25.854] | : . include = ‘immediateCondition’
[08:08:25.854] | : . exclude = 
[08:08:25.854] | : . resignal = FALSE
[08:08:25.854] | : . Number of conditions: 6
[08:08:25.854] | : .  int 6
[08:08:25.855] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.855] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.855] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.855] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.855] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.856] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.856] | : signalConditions() ... done
[08:08:25.856] | result() for MulticoreFuture ... done
[08:08:25.856] | result() for MulticoreFuture ...
[08:08:25.856] | result() for MulticoreFuture ... done
[08:08:25.856] | signalConditions() ...
[08:08:25.857] | : include = ‘immediateCondition’
[08:08:25.857] | : exclude = 
[08:08:25.857] | : resignal = FALSE
[08:08:25.857] | : Number of conditions: 6
[08:08:25.857] | :  int 6
[08:08:25.858] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.858] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.858] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.858] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.858] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.858] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.859] | signalConditions() ... done
[08:08:25.859] | relay stdout ...
[08:08:25.859] | relay stdout ... done
[08:08:25.859] | check for misuse ...
[08:08:25.859] | check for misuse ... done
[08:08:25.859] | relay conditions ...
[08:08:25.859] | : Future state: ‘finished’
[08:08:25.860] | : result() for MulticoreFuture ...
[08:08:25.860] | : result() for MulticoreFuture ... done
[08:08:25.860] | : signalConditions() ...
[08:08:25.860] | : . include = ‘condition’
[08:08:25.860] | : . exclude = ‘immediateCondition’
[08:08:25.860] | : . resignal = TRUE
[08:08:25.860] | : . Number of conditions: 6
[08:08:25.860] | : .  int 6
[08:08:25.861] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.861] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:25.789] | : . ' , attachPackages() ...
[08:08:25.861] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.862] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:25.789] | : . ' , ; packages: [n=1] ‘future’
[08:08:25.862] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.862] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:25.790] | : . ' , attachPackages() ... done
[08:08:25.862] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.862] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:25.790] | : . ' , attachPackages() ...
[08:08:25.862] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.862] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:25.790] | : . ' , ; packages: [n=0] 
[08:08:25.863] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.863] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:25.791] | : . ' , attachPackages() ... done
[08:08:25.863] | : signalConditions() ... done
[08:08:25.863] | relay conditions ... done
[08:08:25.863] value() for MulticoreFuture (<unnamed-63>) ... done
[08:08:25.864] value() for listenv ...
[08:08:25.864] | recursive: 0
[08:08:25.864] | reduce: FALSE
[08:08:25.865] | length: 4
[08:08:25.865] | elements: ‘a’, ‘b’, ‘c’, ‘d’
[08:08:25.865] | Number of remaining objects: 4
[08:08:25.866] | checking value #1:
[08:08:25.866] | 'obj' is atomic
[08:08:25.866] | signalConditionsASAP(numeric, pos=1) ...
[08:08:25.866] | : nx: 4
[08:08:25.866] | : relay: TRUE
[08:08:25.866] | : stdout: TRUE
[08:08:25.866] | : signal: TRUE
[08:08:25.867] | : resignal: FALSE
[08:08:25.867] | : force: TRUE
[08:08:25.867] | : relayed: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:25.867] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:25.867] | : until=2
[08:08:25.867] | : relaying element #2
[08:08:25.867] | : relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:25.867] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:25.868] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:25.868] | length: 3 (resolved future 1)
[08:08:25.868] value() for listenv ... done
[08:08:25.868] checking value #2:
[08:08:25.868] 'obj' is MulticoreFuture
[08:08:25.868] MulticoreFuture #2
[08:08:25.869] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:25.869] | nx: 4
[08:08:25.869] | relay: TRUE
[08:08:25.869] | stdout: TRUE
[08:08:25.869] | signal: TRUE
[08:08:25.869] | resignal: FALSE
[08:08:25.869] | force: TRUE
[08:08:25.869] | relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:25.870] | queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:25.870] | until=2
[08:08:25.870] | relaying element #2
[08:08:25.870] | value() for MulticoreFuture (<unnamed-61>) ...
[08:08:25.870] | : result() for MulticoreFuture ...
[08:08:25.870] | : result() for MulticoreFuture ... done
[08:08:25.870] | : result() for MulticoreFuture ...
[08:08:25.871] | : result() for MulticoreFuture ... done
[08:08:25.871] | : signalConditions() ...
[08:08:25.871] | : . include = ‘immediateCondition’
[08:08:25.871] | : . exclude = 
[08:08:25.871] | : . resignal = FALSE
[08:08:25.871] | : . Number of conditions: 6
[08:08:25.871] | : .  int 6
[08:08:25.872] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.872] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.872] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.872] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.872] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.873] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.873] | : signalConditions() ... done
[08:08:25.873] | : relay stdout ...
[08:08:25.873] | : relay stdout ... done
[08:08:25.873] | : check for misuse ...
[08:08:25.873] | : check for misuse ... done
[08:08:25.873] | value() for MulticoreFuture (<unnamed-61>) ... done
[08:08:25.874] | result() for MulticoreFuture ...
[08:08:25.874] | result() for MulticoreFuture ... done
[08:08:25.874] | signalConditions() ...
[08:08:25.874] | : include = ‘immediateCondition’
[08:08:25.874] | : exclude = 
[08:08:25.874] | : resignal = FALSE
[08:08:25.874] | : Number of conditions: 6
[08:08:25.875] | :  int 6
[08:08:25.875] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.875] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.875] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.875] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.876] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.876] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.876] | signalConditions() ... done
[08:08:25.876] | result() for MulticoreFuture ...
[08:08:25.876] | result() for MulticoreFuture ... done
[08:08:25.876] | signalConditions() ...
[08:08:25.876] | : include = ‘condition’
[08:08:25.877] | : exclude = ‘error’, ‘immediateCondition’
[08:08:25.877] | : resignal = TRUE
[08:08:25.877] | : Number of conditions: 6
[08:08:25.877] | :  int 6
[08:08:25.877] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.878] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:25.649] | : . ' , attachPackages() ...
[08:08:25.878] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.878] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:25.649] | : . ' , ; packages: [n=1] ‘future’
[08:08:25.878] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.878] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:25.650] | : . ' , attachPackages() ... done
[08:08:25.878] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.878] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:25.650] | : . ' , attachPackages() ...
[08:08:25.879] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.879] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:25.650] | : . ' , ; packages: [n=0] 
[08:08:25.879] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.879] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:25.650] | : . ' , attachPackages() ... done
[08:08:25.879] | signalConditions() ... done
[08:08:25.879] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:25.879] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:25.879] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:25.880] value(<MulticoreFuture>, ...) ...
[08:08:25.880] value(<MulticoreFuture>, ...) ... done
[08:08:25.880] value() for MulticoreFuture (<unnamed-61>) ...
[08:08:25.880] | result() for MulticoreFuture ...
[08:08:25.880] | result() for MulticoreFuture ... done
[08:08:25.880] | result() for MulticoreFuture ...
[08:08:25.880] | result() for MulticoreFuture ... done
[08:08:25.880] | signalConditions() ...
[08:08:25.881] | : include = ‘immediateCondition’
[08:08:25.881] | : exclude = 
[08:08:25.881] | : resignal = FALSE
[08:08:25.881] | : Number of conditions: 6
[08:08:25.881] | :  int 6
[08:08:25.881] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.882] | : already signaled, skipping
[08:08:25.882] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.882] | : already signaled, skipping
[08:08:25.882] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.882] | : already signaled, skipping
[08:08:25.882] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.882] | : already signaled, skipping
[08:08:25.882] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.883] | : already signaled, skipping
[08:08:25.883] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.883] | : already signaled, skipping
[08:08:25.883] | signalConditions() ... done
[08:08:25.883] | check for misuse ...
[08:08:25.883] | check for misuse ... done
[08:08:25.883] value() for MulticoreFuture (<unnamed-61>) ... done
[08:08:25.883] value: <numeric>
[08:08:25.884] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:25.884] | nx: 4
[08:08:25.884] | relay: TRUE
[08:08:25.884] | stdout: TRUE
[08:08:25.884] | signal: TRUE
[08:08:25.884] | resignal: FALSE
[08:08:25.884] | force: TRUE
[08:08:25.884] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:25.884] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:25.885] | until=3
[08:08:25.885] | relaying element #3
[08:08:25.885] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:25.885] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:25.885] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:25.885] resolve() for MulticoreFuture ...
[08:08:25.885] resolve() for MulticoreFuture ... done
[08:08:25.885] length: 2 (resolved future 2)

[08:08:25.886] checking value #3:
[08:08:25.886] 'obj' is MulticoreFuture
[08:08:25.886] readImmediateCondition() ...
[08:08:25.886] | Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:25.886] | Number of RDS files: 0
[08:08:25.886] | Returned conditions set:
[08:08:25.886] |  list()
[08:08:25.887] readImmediateCondition() ... done
[08:08:25.887] MulticoreFuture #3
[08:08:25.887] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:25.887] | nx: 4
[08:08:25.887] | relay: TRUE
[08:08:25.887] | stdout: TRUE
[08:08:25.887] | signal: TRUE
[08:08:25.887] | resignal: FALSE
[08:08:25.888] | force: TRUE
[08:08:25.888] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:25.888] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:25.888] | until=3
[08:08:25.888] | relaying element #3
[08:08:25.888] | value() for MulticoreFuture (<unnamed-62>) ...
[08:08:25.888] | : result() for MulticoreFuture ...
[08:08:25.889] | : . readImmediateCondition() ...
[08:08:25.889] | : . ' Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:25.889] | : . ' Number of RDS files: 0
[08:08:25.889] | : . ' Returned conditions set:
[08:08:25.889] | : . '  list()
[08:08:25.890] | : . readImmediateCondition() ... done
[08:08:25.890] | : . result() for MulticoreFuture ...
[08:08:25.890] | : . result() for MulticoreFuture ... done
[08:08:25.890] | : . signalConditions() ...
[08:08:25.890] | : . ' include = ‘immediateCondition’
[08:08:25.891] | : . ' exclude = 
[08:08:25.891] | : . ' resignal = FALSE
[08:08:25.891] | : . ' Number of conditions: 6
[08:08:25.891] | : . '  int 6
[08:08:25.891] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.891] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.892] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.892] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.892] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.892] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.892] | : . signalConditions() ... done
[08:08:25.892] | : result() for MulticoreFuture ... done
[08:08:25.892] | : result() for MulticoreFuture ...
[08:08:25.893] | : result() for MulticoreFuture ... done
[08:08:25.893] | : signalConditions() ...
[08:08:25.893] | : . include = ‘immediateCondition’
[08:08:25.893] | : . exclude = 
[08:08:25.893] | : . resignal = FALSE
[08:08:25.893] | : . Number of conditions: 6
[08:08:25.893] | : .  int 6
[08:08:25.894] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.894] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.894] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.894] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.894] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.894] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.894] | : signalConditions() ... done
[08:08:25.895] | : relay stdout ...
[08:08:25.895] | : relay stdout ... done
[08:08:25.895] | : check for misuse ...
[08:08:25.895] | : check for misuse ... done
[08:08:25.895] | value() for MulticoreFuture (<unnamed-62>) ... done
[08:08:25.895] | result() for MulticoreFuture ...
[08:08:25.895] | result() for MulticoreFuture ... done
[08:08:25.895] | signalConditions() ...
[08:08:25.896] | : include = ‘immediateCondition’
[08:08:25.896] | : exclude = 
[08:08:25.896] | : resignal = FALSE
[08:08:25.896] | : Number of conditions: 6
[08:08:25.896] | :  int 6
[08:08:25.896] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.897] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.897] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.897] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.897] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.897] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.897] | signalConditions() ... done
[08:08:25.897] | result() for MulticoreFuture ...
[08:08:25.897] | result() for MulticoreFuture ... done
[08:08:25.898] | signalConditions() ...
[08:08:25.898] | : include = ‘condition’
[08:08:25.898] | : exclude = ‘error’, ‘immediateCondition’
[08:08:25.898] | : resignal = TRUE
[08:08:25.898] | : Number of conditions: 6
[08:08:25.898] | :  int 6
[08:08:25.899] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.899] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:25.662] | : . ' , attachPackages() ...
[08:08:25.899] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.899] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:25.662] | : . ' , ; packages: [n=1] ‘future’
[08:08:25.899] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.899] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:25.663] | : . ' , attachPackages() ... done
[08:08:25.899] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.900] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:25.663] | : . ' , attachPackages() ...
[08:08:25.900] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.900] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:25.663] | : . ' , ; packages: [n=0] 
[08:08:25.900] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.900] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:25.664] | : . ' , attachPackages() ... done
[08:08:25.900] | signalConditions() ... done
[08:08:25.900] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:25.901] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:25.901] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:25.901] value(<MulticoreFuture>, ...) ...
[08:08:25.901] value(<MulticoreFuture>, ...) ... done
[08:08:25.901] value() for MulticoreFuture (<unnamed-62>) ...
[08:08:25.901] | result() for MulticoreFuture ...
[08:08:25.901] | result() for MulticoreFuture ... done
[08:08:25.901] | result() for MulticoreFuture ...
[08:08:25.902] | result() for MulticoreFuture ... done
[08:08:25.902] | signalConditions() ...
[08:08:25.902] | : include = ‘immediateCondition’
[08:08:25.902] | : exclude = 
[08:08:25.902] | : resignal = FALSE
[08:08:25.902] | : Number of conditions: 6
[08:08:25.902] | :  int 6
[08:08:25.903] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.903] | : already signaled, skipping
[08:08:25.903] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.903] | : already signaled, skipping
[08:08:25.903] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.903] | : already signaled, skipping
[08:08:25.903] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.903] | : already signaled, skipping
[08:08:25.904] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.904] | : already signaled, skipping
[08:08:25.904] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:25.904] | : already signaled, skipping
[08:08:25.904] | signalConditions() ... done
[08:08:25.904] | check for misuse ...
[08:08:25.904] | check for misuse ... done
[08:08:25.905] value() for MulticoreFuture (<unnamed-62>) ... done
[08:08:25.905] value: <NULL>
[08:08:25.905] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:25.905] | nx: 4
[08:08:25.905] | relay: TRUE
[08:08:25.905] | stdout: TRUE
[08:08:25.905] | signal: TRUE
[08:08:25.905] | resignal: FALSE
[08:08:25.906] | force: TRUE
[08:08:25.906] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:25.906] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:25.906] | until=4
[08:08:25.906] | relaying element #4
[08:08:25.906] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:25.906] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:25.906] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:25.906] resolve() for MulticoreFuture ...
[08:08:25.907] resolve() for MulticoreFuture ... done
[08:08:25.907] length: 1 (resolved future 3)

[08:08:25.907] checking value #4:
[08:08:25.907] 'obj' is atomic
[08:08:25.907] signalConditionsASAP(numeric, pos=4) ...
[08:08:25.907] | nx: 4
[08:08:25.907] | relay: TRUE
[08:08:25.908] | stdout: TRUE
[08:08:25.908] | signal: TRUE
[08:08:25.908] | resignal: FALSE
[08:08:25.908] | force: TRUE
[08:08:25.908] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:25.908] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:25.908] | until=4
[08:08:25.908] | relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:25.908] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:25.909] signalConditionsASAP(numeric, pos=4) ... done
[08:08:25.909] length: 0 (resolved future 4)

[08:08:25.909] Relaying remaining futures ...
[08:08:25.909] | signalConditionsASAP(NULL, pos=0) ...
[08:08:25.909] | : nx: 4
[08:08:25.909] | : relay: TRUE
[08:08:25.910] | : stdout: TRUE
[08:08:25.910] | : signal: TRUE
[08:08:25.910] | : resignal: FALSE
[08:08:25.910] | : force: TRUE
[08:08:25.910] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:25.910] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
 - flush all
[08:08:25.910] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:25.910] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:25.911] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:25.911] Relaying remaining futures ... done

List of 4
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
Dimensions: c(1, 6)
[08:08:25.913] future(..., label = NULL) ...
[08:08:25.913] | lazy: FALSE
[08:08:25.913] | stdout: TRUE
[08:08:25.913] | conditions: [n=1] ‘condition’
[08:08:25.913] | gc: FALSE
[08:08:25.913] | earlySignal: FALSE
[08:08:25.914] | getGlobalsAndPackages() ...
[08:08:25.914] | : Searching for globals ...
[08:08:25.915] | : . globals found: [0] 
[08:08:25.916] | : Searching for globals ... done
[08:08:25.916] | : globals: [0] <none>
[08:08:25.916] | : packages: [0] <none>
[08:08:25.916] | getGlobalsAndPackages() ... done
[08:08:25.916] | run() for ‘Future’ (<unnamed-64>) ...
[08:08:25.916] | : state: ‘created’
[08:08:25.917] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.917] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.917] | : Using MulticoreFutureBackend ...
[08:08:25.917] | : . Number of futures since start: 3 (3 created, 3 launched, 4 finished)
[08:08:25.917] | : . Launching futures ...
[08:08:25.917] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:25.917] | : . ' , getFutureData() ...
[08:08:25.918] | : . ' , ; getFutureCore() ...
[08:08:25.918] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:25.918] | : . ' , ; getFutureCore() ... done
[08:08:25.918] | : . ' , ; getFutureCapture() ...
[08:08:25.918] | : . ' , ; getFutureCapture() ... done
[08:08:25.918] | : . ' , ; getFutureContext() ...
[08:08:25.918] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.919] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:25.919] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.919] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:25.919] | : . ' , ; getFutureContext() ... done
[08:08:25.919] | : . ' , getFutureData() ... done
[08:08:25.919] | : . ' , requestCore(..., workers = 2) ...
[08:08:25.920] | : . ' , requestCore(..., workers = 2) ... done
[08:08:25.922] | : . ' , MulticoreFuture started
[08:08:25.922] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:25.923] | : . Launching futures ... done
[08:08:25.923] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:25.923] | : Using MulticoreFutureBackend ... done
[08:08:25.923] | run() for ‘Future’ (<unnamed-64>) ... done
[08:08:25.923] future(..., label = NULL) ... done
[08:08:25.924] future(..., label = NULL) ...
[08:08:25.924] | lazy: FALSE
[08:08:25.924] | stdout: TRUE
[08:08:25.924] | conditions: [n=1] ‘condition’
[08:08:25.924] | gc: FALSE
[08:08:25.925] | earlySignal: FALSE
[08:08:25.925] | getGlobalsAndPackages() ...
[08:08:25.925] | : Searching for globals ...
[08:08:25.926] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.926] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:25.926] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.927] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:25.927] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:25.927] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:25.927] | : . ' , ; ` | New stack:
[08:08:25.928] | : . globals found: [0] 
[08:08:25.928] | : Searching for globals ... done
[08:08:25.928] | : globals: [0] <none>
[08:08:25.928] | : packages: [0] <none>
[08:08:25.928] | getGlobalsAndPackages() ... done
[08:08:25.929] | run() for ‘Future’ (<unnamed-65>) ...
[08:08:25.929] | : state: ‘created’
[08:08:25.929] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.929] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.930] | : Using MulticoreFutureBackend ...
[08:08:25.930] | : . Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:08:25.930] | : . Launching futures ...
[08:08:25.930] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:25.930] | : . ' , getFutureData() ...
[08:08:25.930] | : . ' , ; getFutureCore() ...
[08:08:25.931] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:25.931] | : . ' , ; getFutureCore() ... done
[08:08:25.931] | : . ' , ; getFutureCapture() ...
[08:08:25.927] | : . ' , ; ` | List of 1
[08:08:25.927] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.927] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:25.927] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:25.927] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.927] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.927] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.927] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.927] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.932] | : . ' , ; ` | Old stack:
[08:08:25.934] | : . ' , ; getFutureCapture() ... done
[08:08:25.935] | : . ' , ; getFutureContext() ...
[08:08:25.935] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.935] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:25.935] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.935] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:25.935] | : . ' , ; getFutureContext() ... done
[08:08:25.936] | : . ' , getFutureData() ... done
[08:08:25.936] | : . ' , requestCore(..., workers = 2) ...
[08:08:25.936] | : . ' , requestCore(..., workers = 2) ... done
[08:08:25.935] | : . ' , ; ` | List of 1
[08:08:25.935] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:25.935] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:25.935] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:25.935] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:25.935] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.935] | : . ' , ; ` |     ...)  
[08:08:25.935] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.935] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.935] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:25.935] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:25.935] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.935] | : . ' , ; ` |     ...)  
[08:08:25.935] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.935] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.939] | : . ' , MulticoreFuture started
[08:08:25.939] | : . ' , ; ` | Not identical
[08:08:25.939] | : . ' , ; ` | all.equal() for future ...
[08:08:25.939] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:25.939] | : . Launching futures ... done
[08:08:25.940] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:25.940] | : Using MulticoreFutureBackend ... done
[08:08:25.940] | run() for ‘Future’ (<unnamed-65>) ... done
[08:08:25.941] future(..., label = NULL) ... done
[08:08:25.942] future(..., label = NULL) ...
[08:08:25.942] | lazy: FALSE
[08:08:25.942] | stdout: TRUE
[08:08:25.942] | conditions: [n=1] ‘condition’
[08:08:25.942] | gc: FALSE
[08:08:25.943] | earlySignal: FALSE
[08:08:25.943] | getGlobalsAndPackages() ...
[08:08:25.943] | : Searching for globals ...
[08:08:25.943] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.944] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:25.944] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.944] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:25.945] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:25.945] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:25.945] | : . ' , ; ` | New stack:
[08:08:25.939] | : . ' , ; ` | : List of 2
[08:08:25.939] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.939] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:25.939] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:25.939] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.939] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.939] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.939] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.939] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:25.939] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:25.939] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:25.939] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:25.939] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.939] | : . ' , ; ` | :     ...)  
[08:08:25.939] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.939] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.939] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:25.939] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:25.939] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.939] | : . ' , ; ` | :     ...)  
[08:08:25.939] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.947] | : . ' , ; ` | : Formals differ
[08:08:25.947] | : . ' , ; ` | all.equal() for future ... done
[08:08:25.947] | : . ' , ; ` | Future strategies differ at level 1
[08:08:25.947] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:25.947] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:25.947] | : . ' , ; ` List of future strategies:
[08:08:25.947] | : . ' , ; ` 1. sequential:
[08:08:25.947] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:25.947] | : . ' , ; `    - tweaked: FALSE
[08:08:25.947] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.951] | : . globals found: [1] ‘{’
[08:08:25.951] | : Searching for globals ... done
[08:08:25.948] | : . ' , ; ` List of 1
[08:08:25.948] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.948] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:25.948] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:25.948] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.948] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.948] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.948] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.948] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.946] | : . ' , ; ` | List of 1
[08:08:25.946] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.946] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "funct[08:08:25.951] | : Resolving globals: FALSE
ion"
[08:08:25.946] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:25.946] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.946] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.946] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.946] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.946] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.951] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:25.951] | : . ' , ; ` | Old stack:
[08:08:25.952] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:25.952] | : Search for packages associated with the globals ...
[08:08:25.952] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.952] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:25.952] | : . Packages associated with globals: [1] ‘base’
[08:08:25.952] | : . Packages: [1] ‘base’
[08:08:25.953] | : Search for packages associated with the globals ... done
[08:08:25.953] | : Packages after dropping 'base': [0] 
[08:08:25.953] | : globals: [0] 
[08:08:25.954] | : packages: [0] 
[08:08:25.954] | getGlobalsAndPackages() ... done
[08:08:25.954] | run() for ‘Future’ (<unnamed-66>) ...
[08:08:25.952] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.952] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:25.952] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:25.952] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.952] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.952] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.952] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.955] | : state: ‘created’
[08:08:25.955] | : . ' , ; ` | : init: TRUE
[08:08:25.955] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:25.955] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.955] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:25.955] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.955] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:25.955] | : Using MulticoreFutureBackend ...
[08:08:25.955] | : . ' , ; ` | : .  list()
[08:08:25.956] | : . Number of futures since start: 5 (5 created, 5 launched, 4 finished)
[08:08:25.956] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:25.956] | : . Launching futures ...
[08:08:25.956] | : . ' , ; ` | : .  list()
[08:08:25.956] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:25.956] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:25.956] | : . ' , getFutureData() ...
[08:08:25.957] | : . ' , ; getFutureCore() ...
[08:08:25.957] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:25.957] | : . ' , ; getFutureCore() ... done
[08:08:25.957] | : . ' , ; getFutureCapture() ...
[08:08:25.957] | : . ' , ; getFutureCapture() ... done
[08:08:25.956] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:25.956] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:25.956] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:25.958] | : . ' , ; getFutureContext() ...
[08:08:25.958] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:25.958] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.958] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:25.958] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:25.958] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:25.958] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.952] | : . ' , ; ` | List of 1
[08:08:25.952] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:25.952] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:25.952] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:25.952] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:25.952] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.952] | : . ' , ; ` |     ...)  
[08:08:25.952] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.952] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.952] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:25.952] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:25.952] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[[08:08:25.958] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
08:08:25.952] | : . ' , ; ` |     ...)  
[08:08:25.952] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.952] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.959] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:25.959] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:25.959] | : . ' , ; ` | Not identical
[08:08:25.959] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:25.959] | : . ' , ; ` | all.equal() for future ...
[08:08:25.959] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:25.959] | : . ' , ; getFutureContext() ... done
[08:08:25.959] | : . ' , getFutureData() ... done
[08:08:25.959] | : . ' , requestCore(..., workers = 2) ...
[08:08:25.960] | : . ' , ; Poll #1 (0): usedCores() = 2, workers = 2
[08:08:25.962] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:25.962] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:25.962] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:25.962] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:25.962] | : . ' , ; ` | : New stack:
[08:08:25.959] | : . ' , ; ` | : List of 2
[08:08:25.959] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.959] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:25.959] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:25.959] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.959] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.959] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.959] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.959] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:25.959] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:25.959] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:25.959] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:25.959] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.959] | : . ' , ; ` | :     ...)  
[08:08:25.959] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.959] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.959] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:25.959] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:25.959] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.959] | : . ' , ; ` | :     ...)  
[08:08:25.959] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.962] | : . ' , ; ` | : List of 1
[08:08:25.962] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:25.962] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:25.962] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:25.962] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:25.962] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.962] | : . ' , ; ` | :     ...)  
[08:08:25.962] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.962] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.962] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:25.962] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:25.962] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.962] | : . ' , ; ` | :     ...)  
[08:08:25.962] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.962] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.967] | : . ' , ; ` | : Formals differ
[08:08:25.967] | : . ' , ; ` | : Old stack:
[08:08:25.967] | : . ' , ; ` | all.equal() for future ... done
[08:08:25.967] | : . ' , ; ` | Future strategies differ at level 1
[08:08:25.967] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:25.967] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:25.968] | : . ' , ; ` List of future strategies:
[08:08:25.968] | : . ' , ; ` 1. sequential:
[08:08:25.968] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:25.968] | : . ' , ; `    - tweaked: FALSE
[08:08:25.968] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.967] | : . ' , ; ` | : List of 1
[08:08:25.967] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.967] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:25.967] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:25.967] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.967] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.967] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.967] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.967] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564304465b20> 
[08:08:25.967] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.967] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.967] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.972] | : . ' , ; ` | : Not identical
[08:08:25.972] | : . ' , ; ` | : all.equal() for future ...
[08:08:25.968] | : . ' , ; ` List of 1
[08:08:25.968] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.968] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:25.968] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:25.968] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.968] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.968] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.968] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.968] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.972] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:25.972] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:25.972] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.973] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:25.973] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.973] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:25.973] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:25.973] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.973] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.973] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.973] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.975] | : . ' , ; ` | : init: TRUE
[08:08:25.976] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:25.976] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:25.976] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:25.976] | : . ' , ; ` | : .  list()
[08:08:25.976] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:25.977] | : . ' , ; ` | : .  list()
[08:08:25.977] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:25.977] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:25.977] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:25.977] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:25.979] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:25.979] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:25.979] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:25.979] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.972] | : . ' , ; ` | : . List of 2
[08:08:25.972] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:25.972] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:25.972] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:25.972] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:25.972] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.972] | : . ' , ; ` | : .     ...)  
[08:08:25.972] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.972] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.972] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:25.972] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:25.972] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.972] | : . ' , ; ` | : .     ...)  
[08:08:25.972] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.972] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.972] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:25.972] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:25.972] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.972] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.972] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.972] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.972] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564304465b20> 
[08:08:25.972] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.972] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.979] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:25.979] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:25.980] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:25.980] | : . ' , ; ` | : . Formals differ
[08:08:25.980] | : . ' , ; ` | : all.equal() for future ... done
[08:08:25.980] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:25.980] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:25.980] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:25.981] | : . ' , ; readImmediateCondition() ...
[08:08:25.981] | : . ' , ; ` | List of future strategies:
[08:08:25.981] | : . ' , ; ` | 1. multicore:
[08:08:25.981] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:25.981] | : . ' , ; ` |    - tweaked: FALSE
[08:08:25.981] | : . ' , ; ` |    - call: plan(strategy)
[08:08:25.981] | : . ' , ; ` Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:25.981] | : . ' , ; ` Number of RDS files: 0
[08:08:25.982] | : . ' , ; ` Returned conditions set:
[08:08:25.982] | : . ' , ; `  list()
[08:08:25.982] | : . ' , ; readImmediateCondition() ... done
[08:08:25.983] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:25.983] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:25.984] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:25.984] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:25.984] | : . ' , ; ` | : New stack:
[08:08:25.981] | : . ' , ; ` | List of 1
[08:08:25.981] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:25.981] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:25.981] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:25.981] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:25.981] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.981] | : . ' , ; ` |     ...)  
[08:08:25.981] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.981] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.981] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:25.981] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:25.981] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.981] | : . ' , ; ` |     ...)  
[08:08:25.981] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.981] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.986] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:25.986] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:25.986] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:25.986] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:25.986] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:25.987] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:25.987] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:25.987] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:25.984] | : . ' , ; ` | : List of 1
[08:08:25.984] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:25.984] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:25.984] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:25.984] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:25.984] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.984] | : . ' , ; ` | :     ...)  
[08:08:25.984] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.984] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.984] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:25.984] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:25.984] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.984] | : . ' , ; ` | :     ...)  
[08:08:25.984] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.984] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.989] | : . ' , ; ` | : Old stack:
[08:08:25.993] | : . ' , ; readImmediateCondition() ...
[08:08:25.993] | : . ' , ; ` Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:25.993] | : . ' , ; ` Number of RDS files: 0
[08:08:25.989] | : . ' , ; ` | : List of 1
[08:08:25.989] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.989] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:25.989] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:25.989] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.989] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.989] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.989] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.989] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302f79960> 
[08:08:25.989] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.989] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.989] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:25.994] | : . ' , ; ` Returned conditions set:
[08:08:25.994] | : . ' , ; ` | : Not identical
[08:08:25.994] | : . ' , ; ` | : all.equal() for future ...
[08:08:25.994] | : . ' , ; `  list()
[08:08:25.994] | : . ' , ; readImmediateCondition() ... done
[08:08:25.995] | : . ' , ; Poll #2 (0.03 secs): usedCores() = 2, workers = 2
[08:08:25.994] | : . ' , ; ` | : . List of 2
[08:08:25.994] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:25.994] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:25.994] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:25.994] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:25.994] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.994] | : . ' , ; ` | : .     ...)  
[08:08:25.994] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.994] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.994] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:25.994] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:25.994] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:25.994] | : . ' , ; ` | : .     ...)  
[08:08:25.994] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:25.994] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:25.994] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:25.994] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:25.994] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.994] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.994] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:25.994] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:25.994] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302f79960> 
[08:08:25.994] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:25.994] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.003] | : . ' , ; ` | : . Formals differ
[08:08:26.003] | : . ' , ; ` | : all.equal() for future ... done
[08:08:26.003] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:26.003] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:26.004] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:26.004] | : . ' , ; ` | List of future strategies:
[08:08:26.004] | : . ' , ; ` | 1. multicore:
[08:08:26.004] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:26.004] | : . ' , ; ` |    - tweaked: FALSE
[08:08:26.004] | : . ' , ; ` |    - call: plan(strategy)
[08:08:26.006] | : . ' , ; readImmediateCondition() ...
[08:08:26.006] | : . ' , ; ` Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.006] | : . ' , ; ` Number of RDS files: 0
[08:08:26.006] | : . ' , ; ` Returned conditions set:
[08:08:26.007] | : . ' , ; `  list()
[08:08:26.007] | : . ' , ; readImmediateCondition() ... done
[08:08:26.007] | : . ' , ; value() for MulticoreFuture (<unnamed-64>) ...
[08:08:26.008] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:26.009] | : . ' , ; ` | readImmediateCondition() ...
[08:08:26.009] | : . ' , ; ` | : Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.009] | : . ' , ; ` | : Number of RDS files: 0
[08:08:26.009] | : . ' , ; ` | : Returned conditions set:
[08:08:26.010] | : . ' , ; ` | :  list()
[08:08:26.010] | : . ' , ; ` | readImmediateCondition() ... done
[08:08:26.004] | : . ' , ; ` | List of 1
[08:08:26.004] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.004] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.004] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.004] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:26.004] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.004] | : . ' , ; ` |     ...)  
[08:08:26.004] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.004] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.004] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:26.004] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.004] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.004] | : . ' , ; ` |     ...)  
[08:08:26.004] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.004] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.011] | : . ' , ; ` | result() for MulticoreFuture ...
[08:08:26.011] | : . ' , ; ` | result() for MulticoreFuture ... done
[08:08:26.011] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:26.011] | : . ' , ; ` | signalConditions() ...
[08:08:26.011] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:26.011] | : . ' , ; ` | : include = ‘immediateCondition’
[08:08:26.011] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.011] | : . ' , ; ` | : exclude = 
[08:08:26.012] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.012] | : . ' , ; ` | : resignal = FALSE
[08:08:26.012] | : . ' , ; ` | : Number of conditions: 6
[08:08:26.012] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:26.012] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:26.012] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.012] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.012] | : . ' , ; ` | :  int 6
[08:08:26.013] | : . ' , ; ` | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.013] | : . ' , ; ` | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.013] | : . ' , ; ` | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.013] | : . ' , ; ` | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.013] | : . ' , ; ` | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.014] | : . ' , ; ` | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.014] | : . ' , ; ` | signalConditions() ... done
[08:08:26.014] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:26.014] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:26.014] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:26.014] | : . ' , ; ` signalConditions() ...
[08:08:26.014] | : . ' , ; ` | include = ‘immediateCondition’
[08:08:26.014] | : . ' , ; ` | exclude = 
[08:08:26.015] | : . ' , ; ` | resignal = FALSE
[08:08:26.015] | : . ' , ; ` | Number of conditions: 6
[08:08:26.015] | : . ' , ; ` |  int 6
[08:08:26.015] | : . ' , ; ` | Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.015] | : . ' , ; ` | Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.016] | : . ' , ; ` | Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.016] | : . ' , ; ` | Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.016] | : . ' , ; ` | Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.016] | : . ' , ; ` | Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.016] | : . ' , ; ` signalConditions() ... done
[08:08:26.016] | : . ' , ; ` check for misuse ...
[08:08:26.016] | : . ' , ; ` check for misuse ... done
[08:08:26.017] | : . ' , ; value() for MulticoreFuture (<unnamed-64>) ... done
[08:08:26.017] | : . ' , requestCore(..., workers = 2) ... done
[08:08:26.019] | : . ' , MulticoreFuture started
[08:08:26.020] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:26.020] | : . Launching futures ... done
[08:08:26.020] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:26.021] | : Using MulticoreFutureBackend ... done
[08:08:26.021] | run() for ‘Future’ (<unnamed-66>) ... done
[08:08:26.021] future(..., label = NULL) ... done
<environment: 0x564301c7c670> 
<environment: 0x564304730aa0> 
[08:08:26.023] resolved() for environment ...
[08:08:26.023] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.023] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:26.023] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.024] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:26.024] | resolved() for list ...
[08:08:26.024] | : Number of elements: 4
[08:08:26.024] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:26.024] | : Number of futures: 4
[08:08:26.024] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:26.024] | : . ' , ; ` | New stack:
[08:08:26.024] | : readImmediateCondition() ...
[08:08:26.025] | : . Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.025] | : . Number of RDS files: 0
[08:08:26.025] | : . Returned conditions set:
[08:08:26.025] | : .  list()
[08:08:26.026] | : readImmediateCondition() ... done
[08:08:26.025] | : . ' , ; ` | List of 1
[08:08:26.025] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.025] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.025] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:26.025] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.025] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.025] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.025] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.025] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.029] | : . ' , ; ` | Old stack:
[08:08:26.029] | : . ' , ; ` | List of 1
[08:08:26.029] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.029] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.029] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.029] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:26.029] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.029] | : . ' , ; ` |     ...)  
[08:08:26.029] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.029] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.029] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:26.029] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.029] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.029] | : . ' , ; ` |     ...)  
[08:08:26.029] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.029] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.034] | : . ' , ; ` | Not identical
[08:08:26.034] | : . ' , ; ` | all.equal() for future ...
[08:08:26.036] | : readImmediateCondition() ...
[08:08:26.036] | : . Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.036] | : . Number of RDS files: 0
[08:08:26.036] | : . Returned conditions set:
[08:08:26.037] | : .  list()
[08:08:26.037] | : readImmediateCondition() ... done
[08:08:26.037] | resolved() for list ... done
[08:08:26.037] resolved() for environment ... done
 Named logi [1:4] TRUE TRUE TRUE FALSE
 - attr(*, "names")= chr [1:4] "a" "b" "c" "d"
[08:08:26.038] value() for MulticoreFuture (<unnamed-66>) ...
[08:08:26.038] | result() for MulticoreFuture ...
[08:08:26.034] | : . ' , ; ` | : List of 2
[08:08:26.034] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.034] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.034] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:26.034] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.034] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.034] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.034] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.034] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.034] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.034] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.034] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:26.034] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.034] | : . ' , ; ` | :     ...)  
[08:08:26.034] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.034] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.034] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:26.034] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.034] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.034] | : . ' , ; ` | :     ...)  
[08:08:26.034] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.042] | : . ' , ; ` | : Formals differ
[08:08:26.042] | : . ' , ; ` | all.equal() for future ... done
[08:08:26.042] | : . ' , ; ` | Future strategies differ at level 1
[08:08:26.042] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:26.042] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:26.042] | : . ' , ; ` List of future strategies:
[08:08:26.042] | : . ' , ; ` 1. sequential:
[08:08:26.042] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:26.042] | : . ' , ; `    - tweaked: FALSE
[08:08:26.042] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.043] | : . ' , ; ` List of 1
[08:08:26.043] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.043] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.043] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:26.043] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.043] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.043] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.043] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.043] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.047] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:26.047] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:26.047] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.047] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:26.047] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.047] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.047] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:26.047] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.047] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.047] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.047] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.050] | : . ' , ; ` | : init: TRUE
[08:08:26.050] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:26.050] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:26.051] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:26.051] | : . ' , ; ` | : .  list()
[08:08:26.051] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:26.051] | : . ' , ; ` | : .  list()
[08:08:26.052] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:26.052] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:26.052] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:26.052] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:26.054] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:26.054] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:26.054] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:26.054] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.054] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:26.055] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:26.055] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.058] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:26.058] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:26.058] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:26.058] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:26.058] | : . ' , ; ` | : New stack:
[08:08:26.059] | : . ' , ; ` | : List of 1
[08:08:26.059] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.059] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.059] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.059] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:26.059] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.059] | : . ' , ; ` | :     ...)  
[08:08:26.059] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.059] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.059] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:26.059] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.059] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.059] | : . ' , ; ` | :     ...)  
[08:08:26.059] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.059] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.063] | : . ' , ; ` | : Old stack:
[08:08:26.063] | : . ' , ; ` | : List of 1
[08:08:26.063] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.063] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.063] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:26.063] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.063] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.063] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.063] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.063] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564304a6dba0> 
[08:08:26.063] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.063] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.063] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.068] | : . ' , ; ` | : Not identical
[08:08:26.068] | : . ' , ; ` | : all.equal() for future ...
[08:08:26.068] | : . ' , ; ` | : . List of 2
[08:08:26.068] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.068] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.068] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.068] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:26.068] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.068] | : . ' , ; ` | : .     ...)  
[08:08:26.068] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.068] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.068] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:26.068] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.068] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.068] | : . ' , ; ` | : .     ...)  
[08:08:26.068] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.068] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.068] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.068] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:26.068] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.068] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.068] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.068] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.068] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564304a6dba0> 
[08:08:26.068] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.068] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.077] | : . ' , ; ` | : . Formals differ
[08:08:26.077] | : . ' , ; ` | : all.equal() for future ... done
[08:08:26.077] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:26.077] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:26.077] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:26.077] | : . ' , ; ` | List of future strategies:
[08:08:26.077] | : . ' , ; ` | 1. multicore:
[08:08:26.077] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:26.077] | : . ' , ; ` |    - tweaked: FALSE
[08:08:26.077] | : . ' , ; ` |    - call: plan(strategy)
[08:08:26.078] | : . ' , ; ` | List of 1
[08:08:26.078] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.078] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.078] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.078] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:26.078] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.078] | : . ' , ; ` |     ...)  
[08:08:26.078] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.078] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.078] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:26.078] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.078] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.078] | : . ' , ; ` |     ...)  
[08:08:26.078] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.078] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.083] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:26.083] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:26.083] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.083] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.084] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:26.084] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:26.084] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.084] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.085] | : readImmediateCondition() ...
[08:08:26.085] | : . Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.085] | : . Number of RDS files: 0
[08:08:26.085] | : . Returned conditions set:
[08:08:26.085] | : .  list()
[08:08:26.086] | : readImmediateCondition() ... done
[08:08:26.086] | : result() for MulticoreFuture ...
[08:08:26.086] | : result() for MulticoreFuture ... done
[08:08:26.086] | : signalConditions() ...
[08:08:26.086] | : . include = ‘immediateCondition’
[08:08:26.087] | : . exclude = 
[08:08:26.087] | : . resignal = FALSE
[08:08:26.087] | : . Number of conditions: 6
[08:08:26.087] | : .  int 6
[08:08:26.087] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.088] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.088] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.088] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.088] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.088] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.088] | : signalConditions() ... done
[08:08:26.088] | result() for MulticoreFuture ... done
[08:08:26.088] | result() for MulticoreFuture ...
[08:08:26.089] | result() for MulticoreFuture ... done
[08:08:26.089] | signalConditions() ...
[08:08:26.089] | : include = ‘immediateCondition’
[08:08:26.089] | : exclude = 
[08:08:26.089] | : resignal = FALSE
[08:08:26.089] | : Number of conditions: 6
[08:08:26.089] | :  int 6
[08:08:26.090] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.090] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.090] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.090] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.090] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.091] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.091] | signalConditions() ... done
[08:08:26.091] | relay stdout ...
[08:08:26.091] | relay stdout ... done
[08:08:26.091] | check for misuse ...
[08:08:26.091] | check for misuse ... done
[08:08:26.091] | relay conditions ...
[08:08:26.091] | : Future state: ‘finished’
[08:08:26.092] | : result() for MulticoreFuture ...
[08:08:26.092] | : result() for MulticoreFuture ... done
[08:08:26.092] | : signalConditions() ...
[08:08:26.092] | : . include = ‘condition’
[08:08:26.092] | : . exclude = ‘immediateCondition’
[08:08:26.092] | : . resignal = TRUE
[08:08:26.092] | : . Number of conditions: 6
[08:08:26.092] | : .  int 6
[08:08:26.093] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.093] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.020] | : . ' , attachPackages() ...
[08:08:26.093] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.093] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.021] | : . ' , ; packages: [n=1] ‘future’
[08:08:26.093] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.094] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.021] | : . ' , attachPackages() ... done
[08:08:26.094] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.094] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.022] | : . ' , attachPackages() ...
[08:08:26.094] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.094] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.022] | : . ' , ; packages: [n=0] 
[08:08:26.094] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.094] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.022] | : . ' , attachPackages() ... done
[08:08:26.095] | : signalConditions() ... done
[08:08:26.095] | relay conditions ... done
[08:08:26.095] value() for MulticoreFuture (<unnamed-66>) ... done
[08:08:26.095] value() for listenv ...
[08:08:26.095] | recursive: 0
[08:08:26.095] | reduce: FALSE
[08:08:26.096] | length: 4
[08:08:26.096] | elements: ‘a’, ‘b’, ‘c’, ‘d’
[08:08:26.097] | Number of remaining objects: 4
[08:08:26.097] | checking value #1:
[08:08:26.097] | 'obj' is atomic
[08:08:26.097] | signalConditionsASAP(numeric, pos=1) ...
[08:08:26.097] | : nx: 4
[08:08:26.097] | : relay: TRUE
[08:08:26.097] | : stdout: TRUE
[08:08:26.097] | : signal: TRUE
[08:08:26.098] | : resignal: FALSE
[08:08:26.098] | : force: TRUE
[08:08:26.098] | : relayed: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:26.098] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:26.098] | : until=2
[08:08:26.098] | : relaying element #2
[08:08:26.098] | : relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:26.098] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:26.099] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:26.099] | length: 3 (resolved future 1)
[08:08:26.099] value() for listenv ... done
[08:08:26.099] checking value #2:
[08:08:26.099] 'obj' is MulticoreFuture
[08:08:26.099] MulticoreFuture #2
[08:08:26.099] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:26.100] | nx: 4
[08:08:26.100] | relay: TRUE
[08:08:26.100] | stdout: TRUE
[08:08:26.100] | signal: TRUE
[08:08:26.100] | resignal: FALSE
[08:08:26.100] | force: TRUE
[08:08:26.100] | relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:26.100] | queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:26.100] | until=2
[08:08:26.101] | relaying element #2
[08:08:26.101] | value() for MulticoreFuture (<unnamed-64>) ...
[08:08:26.101] | : result() for MulticoreFuture ...
[08:08:26.101] | : result() for MulticoreFuture ... done
[08:08:26.101] | : result() for MulticoreFuture ...
[08:08:26.101] | : result() for MulticoreFuture ... done
[08:08:26.101] | : signalConditions() ...
[08:08:26.101] | : . include = ‘immediateCondition’
[08:08:26.102] | : . exclude = 
[08:08:26.102] | : . resignal = FALSE
[08:08:26.102] | : . Number of conditions: 6
[08:08:26.102] | : .  int 6
[08:08:26.102] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.103] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.103] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.103] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.103] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.103] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.103] | : signalConditions() ... done
[08:08:26.103] | : relay stdout ...
[08:08:26.104] | : relay stdout ... done
[08:08:26.104] | : check for misuse ...
[08:08:26.104] | : check for misuse ... done
[08:08:26.104] | value() for MulticoreFuture (<unnamed-64>) ... done
[08:08:26.104] | result() for MulticoreFuture ...
[08:08:26.104] | result() for MulticoreFuture ... done
[08:08:26.104] | signalConditions() ...
[08:08:26.104] | : include = ‘immediateCondition’
[08:08:26.105] | : exclude = 
[08:08:26.105] | : resignal = FALSE
[08:08:26.105] | : Number of conditions: 6
[08:08:26.105] | :  int 6
[08:08:26.105] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.106] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.106] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.106] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.106] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.106] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.106] | signalConditions() ... done
[08:08:26.106] | result() for MulticoreFuture ...
[08:08:26.106] | result() for MulticoreFuture ... done
[08:08:26.107] | signalConditions() ...
[08:08:26.107] | : include = ‘condition’
[08:08:26.107] | : exclude = ‘error’, ‘immediateCondition’
[08:08:26.107] | : resignal = TRUE
[08:08:26.107] | : Number of conditions: 6
[08:08:26.107] | :  int 6
[08:08:26.108] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.108] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:25.923] | : . ' , attachPackages() ...
[08:08:26.108] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.108] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:25.923] | : . ' , ; packages: [n=1] ‘future’
[08:08:26.108] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.108] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:25.924] | : . ' , attachPackages() ... done
[08:08:26.109] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.109] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:25.924] | : . ' , attachPackages() ...
[08:08:26.109] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.109] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:25.924] | : . ' , ; packages: [n=0] 
[08:08:26.109] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.109] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:25.925] | : . ' , attachPackages() ... done
[08:08:26.110] | signalConditions() ... done
[08:08:26.110] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:26.110] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:26.110] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:26.110] value(<MulticoreFuture>, ...) ...
[08:08:26.110] value(<MulticoreFuture>, ...) ... done
[08:08:26.110] value() for MulticoreFuture (<unnamed-64>) ...
[08:08:26.110] | result() for MulticoreFuture ...
[08:08:26.110] | result() for MulticoreFuture ... done
[08:08:26.111] | result() for MulticoreFuture ...
[08:08:26.111] | result() for MulticoreFuture ... done
[08:08:26.111] | signalConditions() ...
[08:08:26.111] | : include = ‘immediateCondition’
[08:08:26.111] | : exclude = 
[08:08:26.111] | : resignal = FALSE
[08:08:26.111] | : Number of conditions: 6
[08:08:26.111] | :  int 6
[08:08:26.112] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.112] | : already signaled, skipping
[08:08:26.112] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.112] | : already signaled, skipping
[08:08:26.112] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.113] | : already signaled, skipping
[08:08:26.113] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.113] | : already signaled, skipping
[08:08:26.113] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.113] | : already signaled, skipping
[08:08:26.113] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.113] | : already signaled, skipping
[08:08:26.114] | signalConditions() ... done
[08:08:26.114] | check for misuse ...
[08:08:26.114] | check for misuse ... done
[08:08:26.114] value() for MulticoreFuture (<unnamed-64>) ... done
[08:08:26.114] value: <numeric>
[08:08:26.114] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:26.114] | nx: 4
[08:08:26.115] | relay: TRUE
[08:08:26.115] | stdout: TRUE
[08:08:26.115] | signal: TRUE
[08:08:26.115] | resignal: FALSE
[08:08:26.115] | force: TRUE
[08:08:26.115] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:26.115] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:26.115] | until=3
[08:08:26.116] | relaying element #3
[08:08:26.116] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:26.116] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:26.116] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:26.116] resolve() for MulticoreFuture ...
[08:08:26.116] resolve() for MulticoreFuture ... done
[08:08:26.117] length: 2 (resolved future 2)

[08:08:26.117] checking value #3:
[08:08:26.117] 'obj' is MulticoreFuture
[08:08:26.117] readImmediateCondition() ...
[08:08:26.117] | Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.117] | Number of RDS files: 0
[08:08:26.118] | Returned conditions set:
[08:08:26.118] |  list()
[08:08:26.118] readImmediateCondition() ... done
[08:08:26.118] MulticoreFuture #3
[08:08:26.118] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:26.119] | nx: 4
[08:08:26.119] | relay: TRUE
[08:08:26.119] | stdout: TRUE
[08:08:26.119] | signal: TRUE
[08:08:26.119] | resignal: FALSE
[08:08:26.119] | force: TRUE
[08:08:26.119] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:26.119] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:26.120] | until=3
[08:08:26.120] | relaying element #3
[08:08:26.120] | value() for MulticoreFuture (<unnamed-65>) ...
[08:08:26.120] | : result() for MulticoreFuture ...
[08:08:26.121] | : . readImmediateCondition() ...
[08:08:26.121] | : . ' Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.121] | : . ' Number of RDS files: 0
[08:08:26.121] | : . ' Returned conditions set:
[08:08:26.122] | : . '  list()
[08:08:26.122] | : . readImmediateCondition() ... done
[08:08:26.123] | : . result() for MulticoreFuture ...
[08:08:26.123] | : . result() for MulticoreFuture ... done
[08:08:26.123] | : . signalConditions() ...
[08:08:26.123] | : . ' include = ‘immediateCondition’
[08:08:26.123] | : . ' exclude = 
[08:08:26.124] | : . ' resignal = FALSE
[08:08:26.124] | : . ' Number of conditions: 6
[08:08:26.124] | : . '  int 6
[08:08:26.125] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.125] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.125] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.125] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.125] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.126] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.126] | : . signalConditions() ... done
[08:08:26.126] | : result() for MulticoreFuture ... done
[08:08:26.126] | : result() for MulticoreFuture ...
[08:08:26.126] | : result() for MulticoreFuture ... done
[08:08:26.127] | : signalConditions() ...
[08:08:26.127] | : . include = ‘immediateCondition’
[08:08:26.127] | : . exclude = 
[08:08:26.127] | : . resignal = FALSE
[08:08:26.127] | : . Number of conditions: 6
[08:08:26.127] | : .  int 6
[08:08:26.128] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.128] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.128] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.128] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.128] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.129] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.129] | : signalConditions() ... done
[08:08:26.129] | : relay stdout ...
[08:08:26.129] | : relay stdout ... done
[08:08:26.129] | : check for misuse ...
[08:08:26.129] | : check for misuse ... done
[08:08:26.129] | value() for MulticoreFuture (<unnamed-65>) ... done
[08:08:26.130] | result() for MulticoreFuture ...
[08:08:26.130] | result() for MulticoreFuture ... done
[08:08:26.130] | signalConditions() ...
[08:08:26.130] | : include = ‘immediateCondition’
[08:08:26.130] | : exclude = 
[08:08:26.130] | : resignal = FALSE
[08:08:26.130] | : Number of conditions: 6
[08:08:26.130] | :  int 6
[08:08:26.131] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.131] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.131] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.131] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.131] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.132] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.132] | signalConditions() ... done
[08:08:26.132] | result() for MulticoreFuture ...
[08:08:26.132] | result() for MulticoreFuture ... done
[08:08:26.132] | signalConditions() ...
[08:08:26.132] | : include = ‘condition’
[08:08:26.132] | : exclude = ‘error’, ‘immediateCondition’
[08:08:26.132] | : resignal = TRUE
[08:08:26.133] | : Number of conditions: 6
[08:08:26.133] | :  int 6
[08:08:26.133] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.133] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:25.940] | : . ' , attachPackages() ...
[08:08:26.134] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.134] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:25.940] | : . ' , ; packages: [n=1] ‘future’
[08:08:26.134] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.134] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:25.941] | : . ' , attachPackages() ... done
[08:08:26.134] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.134] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:25.941] | : . ' , attachPackages() ...
[08:08:26.135] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.135] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:25.942] | : . ' , ; packages: [n=0] 
[08:08:26.135] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.135] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:25.942] | : . ' , attachPackages() ... done
[08:08:26.135] | signalConditions() ... done
[08:08:26.135] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:26.135] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:26.136] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:26.136] value(<MulticoreFuture>, ...) ...
[08:08:26.136] value(<MulticoreFuture>, ...) ... done
[08:08:26.136] value() for MulticoreFuture (<unnamed-65>) ...
[08:08:26.136] | result() for MulticoreFuture ...
[08:08:26.136] | result() for MulticoreFuture ... done
[08:08:26.136] | result() for MulticoreFuture ...
[08:08:26.136] | result() for MulticoreFuture ... done
[08:08:26.136] | signalConditions() ...
[08:08:26.137] | : include = ‘immediateCondition’
[08:08:26.137] | : exclude = 
[08:08:26.137] | : resignal = FALSE
[08:08:26.137] | : Number of conditions: 6
[08:08:26.137] | :  int 6
[08:08:26.138] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.138] | : already signaled, skipping
[08:08:26.138] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.138] | : already signaled, skipping
[08:08:26.138] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.138] | : already signaled, skipping
[08:08:26.138] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.138] | : already signaled, skipping
[08:08:26.139] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.139] | : already signaled, skipping
[08:08:26.139] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.139] | : already signaled, skipping
[08:08:26.139] | signalConditions() ... done
[08:08:26.139] | check for misuse ...
[08:08:26.139] | check for misuse ... done
[08:08:26.139] value() for MulticoreFuture (<unnamed-65>) ... done
[08:08:26.140] value: <NULL>
[08:08:26.140] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:26.140] | nx: 4
[08:08:26.140] | relay: TRUE
[08:08:26.140] | stdout: TRUE
[08:08:26.140] | signal: TRUE
[08:08:26.140] | resignal: FALSE
[08:08:26.140] | force: TRUE
[08:08:26.141] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:26.141] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:26.141] | until=4
[08:08:26.141] | relaying element #4
[08:08:26.141] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:26.141] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:26.141] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:26.141] resolve() for MulticoreFuture ...
[08:08:26.142] resolve() for MulticoreFuture ... done
[08:08:26.142] length: 1 (resolved future 3)

[08:08:26.142] checking value #4:
[08:08:26.142] 'obj' is atomic
[08:08:26.142] signalConditionsASAP(numeric, pos=4) ...
[08:08:26.142] | nx: 4
[08:08:26.142] | relay: TRUE
[08:08:26.143] | stdout: TRUE
[08:08:26.143] | signal: TRUE
[08:08:26.143] | resignal: FALSE
[08:08:26.143] | force: TRUE
[08:08:26.143] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:26.143] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:26.143] | until=4
[08:08:26.143] | relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:26.143] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:26.144] signalConditionsASAP(numeric, pos=4) ... done
[08:08:26.144] length: 0 (resolved future 4)

[08:08:26.144] Relaying remaining futures ...
[08:08:26.144] | signalConditionsASAP(NULL, pos=0) ...
[08:08:26.146] | : nx: 4
[08:08:26.146] | : relay: TRUE
[08:08:26.146] | : stdout: TRUE
[08:08:26.147] | : signal: TRUE
[08:08:26.147] | : resignal: FALSE
[08:08:26.147] | : force: TRUE
[08:08:26.147] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:26.147] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
 - flush all
[08:08:26.147] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:26.147] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:26.147] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:26.148] Relaying remaining futures ... done

List of 4
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
Dimensions: c(2, 3)
[08:08:26.150] future(..., label = NULL) ...
[08:08:26.150] | lazy: FALSE
[08:08:26.150] | stdout: TRUE
[08:08:26.150] | conditions: [n=1] ‘condition’
[08:08:26.150] | gc: FALSE
[08:08:26.150] | earlySignal: FALSE
[08:08:26.150] | getGlobalsAndPackages() ...
[08:08:26.150] | : Searching for globals ...
[08:08:26.152] | : . globals found: [0] 
[08:08:26.152] | : Searching for globals ... done
[08:08:26.152] | : globals: [0] <none>
[08:08:26.152] | : packages: [0] <none>
[08:08:26.152] | getGlobalsAndPackages() ... done
[08:08:26.153] | run() for ‘Future’ (<unnamed-67>) ...
[08:08:26.153] | : state: ‘created’
[08:08:26.153] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.153] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.153] | : Using MulticoreFutureBackend ...
[08:08:26.153] | : . Number of futures since start: 6 (6 created, 6 launched, 8 finished)
[08:08:26.153] | : . Launching futures ...
[08:08:26.154] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:26.154] | : . ' , getFutureData() ...
[08:08:26.154] | : . ' , ; getFutureCore() ...
[08:08:26.154] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:26.154] | : . ' , ; getFutureCore() ... done
[08:08:26.154] | : . ' , ; getFutureCapture() ...
[08:08:26.154] | : . ' , ; getFutureCapture() ... done
[08:08:26.154] | : . ' , ; getFutureContext() ...
[08:08:26.155] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.155] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:26.155] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.155] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:26.155] | : . ' , ; getFutureContext() ... done
[08:08:26.155] | : . ' , getFutureData() ... done
[08:08:26.155] | : . ' , requestCore(..., workers = 2) ...
[08:08:26.156] | : . ' , requestCore(..., workers = 2) ... done
[08:08:26.158] | : . ' , MulticoreFuture started
[08:08:26.158] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:26.159] | : . Launching futures ... done
[08:08:26.159] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:26.159] | : Using MulticoreFutureBackend ... done
[08:08:26.159] | run() for ‘Future’ (<unnamed-67>) ... done
[08:08:26.159] future(..., label = NULL) ... done
[08:08:26.160] future(..., label = NULL) ...
[08:08:26.160] | lazy: FALSE
[08:08:26.160] | stdout: TRUE
[08:08:26.160] | conditions: [n=1] ‘condition’
[08:08:26.160] | gc: FALSE
[08:08:26.160] | earlySignal: FALSE
[08:08:26.160] | getGlobalsAndPackages() ...
[08:08:26.161] | : Searching for globals ...
[08:08:26.161] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.162] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:26.162] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.162] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:26.162] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:26.163] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:26.163] | : . ' , ; ` | New stack:
[08:08:26.163] | : . globals found: [0] 
[08:08:26.163] | : Searching for globals ... done
[08:08:26.163] | : globals: [0] <none>
[08:08:26.163] | : packages: [0] <none>
[08:08:26.163] | getGlobalsAndPackages() ... done
[08:08:26.164] | run() for ‘Future’ (<unnamed-68>) ...
[08:08:26.164] | : state: ‘created’
[08:08:26.164] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.164] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.165] | : Using MulticoreFutureBackend ...
[08:08:26.165] | : . Number of futures since start: 7 (7 created, 7 launched, 8 finished)
[08:08:26.165] | : . Launching futures ...
[08:08:26.165] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:26.165] | : . ' , getFutureData() ...
[08:08:26.166] | : . ' , ; getFutureCore() ...
[08:08:26.166] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:26.166] | : . ' , ; getFutureCore() ... done
[08:08:26.166] | : . ' , ; getFutureCapture() ...
[08:08:26.166] | : . ' , ; getFutureCapture() ... done
[08:08:26.166] | : . ' , ; getFutureContext() ...
[08:08:26.166] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.163] | : . ' , ; ` | List of 1
[08:08:26.163] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.163] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.163] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:26.163] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.163] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.163] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.163] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.163] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.167] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:26.167] | : . ' , ; ` | Old stack:
[08:08:26.167] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.167] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:26.167] | : . ' , ; getFutureContext() ... done
[08:08:26.167] | : . ' , getFutureData() ... done
[08:08:26.168] | : . ' , requestCore(..., workers = 2) ...
[08:08:26.168] | : . ' , requestCore(..., workers = 2) ... done
[08:08:26.170] | : . ' , MulticoreFuture started
[08:08:26.171] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:26.167] | : . ' , ; ` | List of 1
[08:08:26.167] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.167] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.167] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.167] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:26.167] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.167] | : . ' , ; ` |     ...)  
[08:08:26.167] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.167] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.167] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:26.167] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.167] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.167] | : . ' , ; ` |     ...)  
[08:08:26.167] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.167] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.171] | : . Launching futures ... done
[08:08:26.171] | : . ' , ; ` | Not identical
[08:08:26.171] | : . ' , ; ` | all.equal() for future ...
[08:08:26.171] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:26.172] | : Using MulticoreFutureBackend ... done
[08:08:26.172] | run() for ‘Future’ (<unnamed-68>) ... done
[08:08:26.172] future(..., label = NULL) ... done
[08:08:26.173] future(..., label = NULL) ...
[08:08:26.173] | lazy: FALSE
[08:08:26.174] | stdout: TRUE
[08:08:26.174] | conditions: [n=1] ‘condition’
[08:08:26.174] | gc: FALSE
[08:08:26.174] | earlySignal: FALSE
[08:08:26.175] | getGlobalsAndPackages() ...
[08:08:26.175] | : Searching for globals ...
[08:08:26.175] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.175] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:26.176] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.176] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:26.177] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:26.177] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:26.177] | : . ' , ; ` | New stack:
[08:08:26.172] | : . ' , ; ` | : List of 2
[08:08:26.172] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.172] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.172] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:26.172] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.172] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.172] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.172] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.172] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.172] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.172] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.172] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:26.172] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.172] | : . ' , ; ` | :     ...)  
[08:08:26.172] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.172] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.172] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:26.172] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.172] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.172] | : . ' , ; ` | :     ...)  
[08:08:26.172] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.179] | : . ' , ; ` | : Formals differ
[08:08:26.179] | : . ' , ; ` | all.equal() for future ... done
[08:08:26.179] | : . ' , ; ` | Future strategies differ at level 1
[08:08:26.179] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:26.180] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:26.180] | : . ' , ; ` List of future strategies:
[08:08:26.180] | : . ' , ; ` 1. sequential:
[08:08:26.180] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:26.180] | : . ' , ; `    - tweaked: FALSE
[08:08:26.180] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.182] | : . globals found: [1] ‘{’
[08:08:26.183] | : Searching for globals ... done
[08:08:26.177] | : . ' , ; ` | List of 1
[08:08:26.177] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.177] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.177] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:26.177] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.177] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.177] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.177] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.177] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.183] | : Resolving globals: FALSE
[08:08:26.183] | : . ' , ; ` | Old stack:
[08:08:26.183] | : Search for packages associated with the globals ...
[08:08:26.184] | : . Packages associated with globals: [1] ‘base’
[08:08:26.180] | : . ' , ; ` List of 1
[08:08:26.180] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.180] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.180] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:26.180] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.180] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.180] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.180] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.180] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.184] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:26.184] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:26.184] | : . Packages: [1] ‘base’
[08:08:26.184] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.185] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:26.185] | : Search for packages associated with the globals ... done
[08:08:26.185] | : Packages after dropping 'base': [0] 
[08:08:26.185] | : globals: [0] 
[08:08:26.185] | : packages: [0] 
[08:08:26.186] | getGlobalsAndPackages() ... done
[08:08:26.186] | run() for ‘Future’ (<unnamed-69>) ...
[08:08:26.186] | : state: ‘created’
[08:08:26.187] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.187] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.187] | : Using MulticoreFutureBackend ...
[08:08:26.187] | : . Number of futures since start: 8 (8 created, 8 launched, 8 finished)
[08:08:26.185] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.185] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.185] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:26.185] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.185] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.185] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.185] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.188] | : . ' , ; ` | : init: TRUE
[08:08:26.188] | : . Launching futures ...
[08:08:26.188] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:26.188] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:26.188] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:26.188] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:26.188] | : . ' , getFutureData() ...
[08:08:26.188] | : . ' , ; getFutureCore() ...
[08:08:26.188] | : . ' , ; ` | : .  list()
[08:08:26.189] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:26.189] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:26.189] | : . ' , ; getFutureCore() ... done
[08:08:26.189] | : . ' , ; ` | : .  list()
[08:08:26.189] | : . ' , ; getFutureCapture() ...
[08:08:26.189] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:26.189] | : . ' , ; getFutureCapture() ... done
[08:08:26.189] | : . ' , ; getFutureContext() ...
[08:08:26.190] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.183] | : . ' , ; ` | List of 1
[08:08:26.183] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints [08:08:26.190] | : . ' , ; ` | Getting stack without first backend: [n=0] 
= "multicore"), gc = FALSE, 
[08:08:26.183] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.183] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.183] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:26.183] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.183] | : . ' , ; ` |     ...)  
[08:08:26.183] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.183] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.183] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:26.183] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.183] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.183] | : . ' , ; ` |     ...)  
[08:08:26.183] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.183] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.190] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.190] | : . ' , ; ` | Not identical
[08:08:26.190] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:26.190] | : . ' , ; ` | all.equal() for future ...
[08:08:26.189] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:26.189] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:26.189] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:26.191] | : . ' , ; getFutureContext() ... done
[08:08:26.191] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:26.191] | : . ' , getFutureData() ... done
[08:08:26.191] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:26.191] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:26.191] | : . ' , requestCore(..., workers = 2) ...
[08:08:26.191] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.191] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:26.192] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:26.192] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.192] | : . ' , ; Poll #1 (0): usedCores() = 2, workers = 2
[08:08:26.195] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:26.195] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:26.195] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:26.195] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:26.196] | : . ' , ; ` | : New stack:
[08:08:26.191] | : . ' , ; ` | : List of 2
[08:08:26.191] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.191] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.191] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:26.191] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.191] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.191] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.191] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.191] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.191] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.191] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.191] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:26.191] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.191] | : . ' , ; ` | :     ...)  
[08:08:26.191] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.191] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.191] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:26.191] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.191] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.191] | : . ' , ; ` | :     ...)  
[08:08:26.191] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.199] | : . ' , ; ` | : Formals differ
[08:08:26.199] | : . ' , ; ` | all.equal() for future ... done
[08:08:26.199] | : . ' , ; ` | Future strategies differ at level 1
[08:08:26.199] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:26.199] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:26.199] | : . ' , ; ` List of future strategies:
[08:08:26.199] | : . ' , ; ` 1. sequential:
[08:08:26.199] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:26.199] | : . ' , ; `    - tweaked: FALSE
[08:08:26.199] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.196] | : . ' , ; ` | : List of 1
[08:08:26.196] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.196] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.196] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.196] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:26.196] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.196] | : . ' , ; ` | :     ...)  
[08:08:26.196] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.196] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.196] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:26.196] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.196] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.196] | : . ' , ; ` | :     ...)  
[08:08:26.196] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.196] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.200] | : . ' , ; ` | : Old stack:
[08:08:26.200] | : . ' , ; ` List of 1
[08:08:26.200] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.200] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.200] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:26.200] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.200] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.200] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.200] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.200] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.204] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:26.204] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:26.204] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.204] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:26.201] | : . ' , ; ` | : List of 1
[08:08:26.201] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.201] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.201] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:26.201] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.201] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.201] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.201] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.201] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643036cfff0> 
[08:08:26.201] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.201] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.201] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.205] | : . ' , ; ` | : Not identical
[08:08:26.205] | : . ' , ; ` | : all.equal() for future ...
[08:08:26.205] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.205] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.205] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:26.205] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.205] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.205] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.205] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.207] | : . ' , ; ` | : init: TRUE
[08:08:26.208] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:26.208] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:26.208] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:26.208] | : . ' , ; ` | : .  list()
[08:08:26.208] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:26.209] | : . ' , ; ` | : .  list()
[08:08:26.209] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:26.209] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:26.209] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:26.209] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:26.211] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:26.211] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:26.211] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:26.211] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.211] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:26.211] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:26.212] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.213] | : . ' , ; readImmediateCondition() ...
[08:08:26.213] | : . ' , ; ` Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.206] | : . ' , ; ` | : . List of 2
[08:08:26.206] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.206] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.206] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.206] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:26.206] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.206] | : . ' , ; ` | : .     ...)  
[08:08:26.206] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.206] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.206] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:26.206] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.206] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.206] | : . ' , ; ` | : .     ...)  
[08:08:26.206] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.206] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.206] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.206] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:26.206] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.206] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.206] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.206] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.206] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643036cfff0> 
[08:08:26.206] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.206] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.213] | : . ' , ; ` Number of RDS files: 0
[08:08:26.213] | : . ' , ; ` Returned conditions set:
[08:08:26.214] | : . ' , ; ` | : . Formals differ
[08:08:26.214] | : . ' , ; ` | : all.equal() for future ... done
[08:08:26.214] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:26.214] | : . ' , ; `  list()
[08:08:26.214] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:26.214] | : . ' , ; readImmediateCondition() ... done
[08:08:26.214] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:26.214] | : . ' , ; ` | List of future strategies:
[08:08:26.214] | : . ' , ; ` | 1. multicore:
[08:08:26.214] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:26.214] | : . ' , ; ` |    - tweaked: FALSE
[08:08:26.214] | : . ' , ; ` |    - call: plan(strategy)
[08:08:26.215] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:26.216] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:26.216] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:26.216] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:26.216] | : . ' , ; ` | : New stack:
[08:08:26.215] | : . ' , ; ` | List of 1
[08:08:26.215] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.215] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.215] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.215] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:26.215] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.215] | : . ' , ; ` |     ...)  
[08:08:26.215] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.215] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.215] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:26.215] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.215] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.215] | : . ' , ; ` |     ...)  
[08:08:26.215] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.215] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.220] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:26.220] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:26.220] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.220] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.220] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:26.220] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:26.221] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.221] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.216] | : . ' , ; ` | : List of 1
[08:08:26.216] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.216] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.216] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.216] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:26.216] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.216] | : . ' , ; ` | :     ...)  
[08:08:26.216] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.216] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.216] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:26.216] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.216] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.216] | : . ' , ; ` | :     ...)  
[08:08:26.216] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.216] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.221] | : . ' , ; ` | : Old stack:
[08:08:26.225] | : . ' , ; readImmediateCondition() ...
[08:08:26.225] | : . ' , ; ` Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.225] | : . ' , ; ` Number of RDS files: 0
[08:08:26.225] | : . ' , ; ` Returned conditions set:
[08:08:26.226] | : . ' , ; `  list()
[08:08:26.221] | : . ' , ; ` | : List of 1
[08:08:26.221] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.221] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.221] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:26.221] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.221] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.221] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.221] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.221] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643045f5438> 
[08:08:26.221] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.221] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.221] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.226] | : . ' , ; readImmediateCondition() ... done
[08:08:26.226] | : . ' , ; ` | : Not identical
[08:08:26.226] | : . ' , ; ` | : all.equal() for future ...
[08:08:26.227] | : . ' , ; Poll #2 (0.03 secs): usedCores() = 2, workers = 2
[08:08:26.226] | : . ' , ; ` | : . List of 2
[08:08:26.226] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.226] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.226] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.226] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:26.226] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.226] | : . ' , ; ` | : .     ...)  
[08:08:26.226] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.226] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.226] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:26.226] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.226] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.226] | : . ' , ; ` | : .     ...)  
[08:08:26.226] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.226] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.226] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.226] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:26.226] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.226] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.226] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.226] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.226] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643045f5438> 
[08:08:26.226] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.226] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.235] | : . ' , ; ` | : . Formals differ
[08:08:26.235] | : . ' , ; ` | : all.equal() for future ... done
[08:08:26.235] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:26.235] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:26.236] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:26.236] | : . ' , ; ` | List of future strategies:
[08:08:26.236] | : . ' , ; ` | 1. multicore:
[08:08:26.236] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:26.236] | : . ' , ; ` |    - tweaked: FALSE
[08:08:26.236] | : . ' , ; ` |    - call: plan(strategy)
[08:08:26.237] | : . ' , ; readImmediateCondition() ...
[08:08:26.238] | : . ' , ; ` Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.238] | : . ' , ; ` Number of RDS files: 0
[08:08:26.238] | : . ' , ; ` Returned conditions set:
[08:08:26.238] | : . ' , ; `  list()
[08:08:26.239] | : . ' , ; readImmediateCondition() ... done
[08:08:26.239] | : . ' , ; value() for MulticoreFuture (<unnamed-67>) ...
[08:08:26.239] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:26.240] | : . ' , ; ` | readImmediateCondition() ...
[08:08:26.241] | : . ' , ; ` | : Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.241] | : . ' , ; ` | : Number of RDS files: 0
[08:08:26.241] | : . ' , ; ` | : Returned conditions set:
[08:08:26.241] | : . ' , ; ` | :  list()
[08:08:26.242] | : . ' , ; ` | readImmediateCondition() ... done
[08:08:26.242] | : . ' , ; ` | result() for MulticoreFuture ...
[08:08:26.243] | : . ' , ; ` | result() for MulticoreFuture ... done
[08:08:26.243] | : . ' , ; ` | signalConditions() ...
[08:08:26.243] | : . ' , ; ` | : include = ‘immediateCondition’
[08:08:26.243] | : . ' , ; ` | : exclude = 
[08:08:26.236] | : . ' , ; ` | List of 1
[08:08:26.236] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.236] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.236] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.236] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:26.236] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.236] | : . ' , ; ` |     ...)  
[08:08:26.236] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.236] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.236] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:26.236] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.236] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.236] | : . ' , ; ` |     ...)  
[08:08:26.236] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.236] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.243] | : . ' , ; ` | : resignal = FALSE
[08:08:26.243] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:26.244] | : . ' , ; ` | : Number of conditions: 6
[08:08:26.244] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:26.244] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.244] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.244] | : . ' , ; ` | :  int 6
[08:08:26.244] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:26.245] | : . ' , ; ` | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.245] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:26.245] | : . ' , ; ` | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.245] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.245] | : . ' , ; ` | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.245] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.245] | : . ' , ; ` | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.245] | : . ' , ; ` | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.246] | : . ' , ; ` | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.246] | : . ' , ; ` | signalConditions() ... done
[08:08:26.246] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:26.246] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:26.246] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:26.246] | : . ' , ; ` signalConditions() ...
[08:08:26.246] | : . ' , ; ` | include = ‘immediateCondition’
[08:08:26.247] | : . ' , ; ` | exclude = 
[08:08:26.247] | : . ' , ; ` | resignal = FALSE
[08:08:26.247] | : . ' , ; ` | Number of conditions: 6
[08:08:26.247] | : . ' , ; ` |  int 6
[08:08:26.247] | : . ' , ; ` | Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.248] | : . ' , ; ` | Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.248] | : . ' , ; ` | Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.248] | : . ' , ; ` | Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.248] | : . ' , ; ` | Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.248] | : . ' , ; ` | Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.248] | : . ' , ; ` signalConditions() ... done
[08:08:26.248] | : . ' , ; ` check for misuse ...
[08:08:26.249] | : . ' , ; ` check for misuse ... done
[08:08:26.249] | : . ' , ; value() for MulticoreFuture (<unnamed-67>) ... done
[08:08:26.249] | : . ' , requestCore(..., workers = 2) ... done
[08:08:26.252] | : . ' , MulticoreFuture started
[08:08:26.252] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:26.252] | : . Launching futures ... done
[08:08:26.252] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:26.253] | : Using MulticoreFutureBackend ... done
[08:08:26.253] | run() for ‘Future’ (<unnamed-69>) ... done
[08:08:26.253] future(..., label = NULL) ... done
<environment: 0x564302ffaa90> 
<environment: 0x56430433c2c0> 
[08:08:26.255] resolved() for environment ...
[08:08:26.255] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.255] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:26.256] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.256] | resolved() for list ...
[08:08:26.256] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:26.256] | : Number of elements: 4
[08:08:26.256] | : Number of futures: 4
[08:08:26.256] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:26.256] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:26.256] | : readImmediateCondition() ...
[08:08:26.257] | : . ' , ; ` | New stack:
[08:08:26.257] | : . Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.257] | : . Number of RDS files: 0
[08:08:26.257] | : . Returned conditions set:
[08:08:26.257] | : .  list()
[08:08:26.258] | : readImmediateCondition() ... done
[08:08:26.257] | : . ' , ; ` | List of 1
[08:08:26.257] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.257] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.257] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:26.257] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.257] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.257] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.257] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.257] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.261] | : . ' , ; ` | Old stack:
[08:08:26.261] | : . ' , ; ` | List of 1
[08:08:26.261] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.261] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.261] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.261] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:26.261] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.261] | : . ' , ; ` |     ...)  
[08:08:26.261] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.261] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.261] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:26.261] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.261] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.261] | : . ' , ; ` |     ...)  
[08:08:26.261] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.261] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.266] | : . ' , ; ` | Not identical
[08:08:26.266] | : . ' , ; ` | all.equal() for future ...
[08:08:26.268] | : readImmediateCondition() ...
[08:08:26.268] | : . Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.268] | : . Number of RDS files: 0
[08:08:26.268] | : . Returned conditions set:
[08:08:26.269] | : .  list()
[08:08:26.269] | : readImmediateCondition() ... done
[08:08:26.269] | resolved() for list ... done
[08:08:26.269] resolved() for environment ... done
 Named logi [1:4] TRUE TRUE TRUE FALSE
 - attr(*, "names")= chr [1:4] "a" "b" "c" "d"
[08:08:26.270] value() for MulticoreFuture (<unnamed-69>) ...
[08:08:26.270] | result() for MulticoreFuture ...
[08:08:26.266] | : . ' , ; ` | : List of 2
[08:08:26.266] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.266] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.266] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:26.266] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.266] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.266] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.266] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.266] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.266] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.266] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.266] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:26.266] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.266] | : . ' , ; ` | :     ...)  
[08:08:26.266] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.266] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.266] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:26.266] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.266] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.266] | : . ' , ; ` | :     ...)  
[08:08:26.266] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.274] | : . ' , ; ` | : Formals differ
[08:08:26.274] | : . ' , ; ` | all.equal() for future ... done
[08:08:26.274] | : . ' , ; ` | Future strategies differ at level 1
[08:08:26.275] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:26.275] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:26.275] | : . ' , ; ` List of future strategies:
[08:08:26.275] | : . ' , ; ` 1. sequential:
[08:08:26.275] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:26.275] | : . ' , ; `    - tweaked: FALSE
[08:08:26.275] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.276] | : . ' , ; ` List of 1
[08:08:26.276] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.276] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.276] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:26.276] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.276] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.276] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.276] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.276] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.279] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:26.279] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:26.280] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.280] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:26.280] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.280] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.280] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:26.280] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.280] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.280] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.280] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.283] | : . ' , ; ` | : init: TRUE
[08:08:26.283] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:26.283] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:26.283] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:26.283] | : . ' , ; ` | : .  list()
[08:08:26.284] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:26.284] | : . ' , ; ` | : .  list()
[08:08:26.284] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:26.285] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:26.285] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:26.285] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:26.286] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:26.286] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:26.287] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:26.287] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.287] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:26.287] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:26.287] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.290] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:26.291] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:26.291] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:26.291] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:26.291] | : . ' , ; ` | : New stack:
[08:08:26.291] | : . ' , ; ` | : List of 1
[08:08:26.291] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.291] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.291] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.291] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:26.291] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.291] | : . ' , ; ` | :     ...)  
[08:08:26.291] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.291] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.291] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:26.291] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.291] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.291] | : . ' , ; ` | :     ...)  
[08:08:26.291] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.291] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.296] | : . ' , ; ` | : Old stack:
[08:08:26.296] | : . ' , ; ` | : List of 1
[08:08:26.296] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.296] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.296] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:26.296] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.296] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.296] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.296] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.296] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56430253e990> 
[08:08:26.296] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.296] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.296] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.301] | : . ' , ; ` | : Not identical
[08:08:26.302] | : . ' , ; ` | : all.equal() for future ...
[08:08:26.302] | : . ' , ; ` | : . List of 2
[08:08:26.302] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.302] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.302] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.302] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:26.302] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.302] | : . ' , ; ` | : .     ...)  
[08:08:26.302] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.302] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.302] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:26.302] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.302] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.302] | : . ' , ; ` | : .     ...)  
[08:08:26.302] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.302] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.302] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.302] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:26.302] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.302] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.302] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.302] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.302] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56430253e990> 
[08:08:26.302] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.302] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.314] | : . ' , ; ` | : . Formals differ
[08:08:26.314] | : . ' , ; ` | : all.equal() for future ... done
[08:08:26.314] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:26.314] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:26.315] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:26.315] | : . ' , ; ` | List of future strategies:
[08:08:26.315] | : . ' , ; ` | 1. multicore:
[08:08:26.315] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:26.315] | : . ' , ; ` |    - tweaked: FALSE
[08:08:26.315] | : . ' , ; ` |    - call: plan(strategy)
[08:08:26.315] | : . ' , ; ` | List of 1
[08:08:26.315] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.315] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.315] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.315] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:26.315] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.315] | : . ' , ; ` |     ...)  
[08:08:26.315] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.315] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.315] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:26.315] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.315] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.315] | : . ' , ; ` |     ...)  
[08:08:26.315] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.315] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.320] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:26.320] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:26.320] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.320] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.320] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:26.320] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:26.321] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.321] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.321] | : readImmediateCondition() ...
[08:08:26.321] | : . Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.322] | : . Number of RDS files: 0
[08:08:26.322] | : . Returned conditions set:
[08:08:26.322] | : .  list()
[08:08:26.322] | : readImmediateCondition() ... done
[08:08:26.323] | : result() for MulticoreFuture ...
[08:08:26.323] | : result() for MulticoreFuture ... done
[08:08:26.323] | : signalConditions() ...
[08:08:26.323] | : . include = ‘immediateCondition’
[08:08:26.323] | : . exclude = 
[08:08:26.323] | : . resignal = FALSE
[08:08:26.324] | : . Number of conditions: 6
[08:08:26.324] | : .  int 6
[08:08:26.324] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.324] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.324] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.325] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.325] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.325] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.325] | : signalConditions() ... done
[08:08:26.325] | result() for MulticoreFuture ... done
[08:08:26.325] | result() for MulticoreFuture ...
[08:08:26.325] | result() for MulticoreFuture ... done
[08:08:26.326] | signalConditions() ...
[08:08:26.326] | : include = ‘immediateCondition’
[08:08:26.326] | : exclude = 
[08:08:26.326] | : resignal = FALSE
[08:08:26.326] | : Number of conditions: 6
[08:08:26.326] | :  int 6
[08:08:26.327] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.327] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.327] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.327] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.327] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.327] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.328] | signalConditions() ... done
[08:08:26.328] | relay stdout ...
[08:08:26.328] | relay stdout ... done
[08:08:26.328] | check for misuse ...
[08:08:26.328] | check for misuse ... done
[08:08:26.328] | relay conditions ...
[08:08:26.328] | : Future state: ‘finished’
[08:08:26.328] | : result() for MulticoreFuture ...
[08:08:26.329] | : result() for MulticoreFuture ... done
[08:08:26.329] | : signalConditions() ...
[08:08:26.329] | : . include = ‘condition’
[08:08:26.329] | : . exclude = ‘immediateCondition’
[08:08:26.329] | : . resignal = TRUE
[08:08:26.329] | : . Number of conditions: 6
[08:08:26.329] | : .  int 6
[08:08:26.330] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.330] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.253] | : . ' , attachPackages() ...
[08:08:26.330] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.330] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.253] | : . ' , ; packages: [n=1] ‘future’
[08:08:26.330] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.331] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.254] | : . ' , attachPackages() ... done
[08:08:26.331] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.331] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.254] | : . ' , attachPackages() ...
[08:08:26.331] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.331] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.254] | : . ' , ; packages: [n=0] 
[08:08:26.331] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.331] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.254] | : . ' , attachPackages() ... done
[08:08:26.332] | : signalConditions() ... done
[08:08:26.332] | relay conditions ... done
[08:08:26.332] value() for MulticoreFuture (<unnamed-69>) ... done
[08:08:26.332] value() for listenv ...
[08:08:26.332] | recursive: 0
[08:08:26.333] | reduce: FALSE
[08:08:26.333] | length: 4
[08:08:26.334] | elements: ‘a’, ‘b’, ‘c’, ‘d’
[08:08:26.334] | Number of remaining objects: 4
[08:08:26.334] | checking value #1:
[08:08:26.334] | 'obj' is atomic
[08:08:26.334] | signalConditionsASAP(numeric, pos=1) ...
[08:08:26.334] | : nx: 4
[08:08:26.334] | : relay: TRUE
[08:08:26.334] | : stdout: TRUE
[08:08:26.334] | : signal: TRUE
[08:08:26.335] | : resignal: FALSE
[08:08:26.335] | : force: TRUE
[08:08:26.335] | : relayed: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:26.335] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:26.335] | : until=2
[08:08:26.335] | : relaying element #2
[08:08:26.335] | : relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:26.335] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:26.336] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:26.336] | length: 3 (resolved future 1)
[08:08:26.336] value() for listenv ... done
[08:08:26.336] checking value #2:
[08:08:26.336] 'obj' is MulticoreFuture
[08:08:26.336] MulticoreFuture #2
[08:08:26.336] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:26.337] | nx: 4
[08:08:26.337] | relay: TRUE
[08:08:26.337] | stdout: TRUE
[08:08:26.337] | signal: TRUE
[08:08:26.337] | resignal: FALSE
[08:08:26.337] | force: TRUE
[08:08:26.337] | relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:26.337] | queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:26.338] | until=2
[08:08:26.338] | relaying element #2
[08:08:26.338] | value() for MulticoreFuture (<unnamed-67>) ...
[08:08:26.338] | : result() for MulticoreFuture ...
[08:08:26.338] | : result() for MulticoreFuture ... done
[08:08:26.338] | : result() for MulticoreFuture ...
[08:08:26.338] | : result() for MulticoreFuture ... done
[08:08:26.338] | : signalConditions() ...
[08:08:26.339] | : . include = ‘immediateCondition’
[08:08:26.339] | : . exclude = 
[08:08:26.339] | : . resignal = FALSE
[08:08:26.339] | : . Number of conditions: 6
[08:08:26.339] | : .  int 6
[08:08:26.340] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.340] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.340] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.340] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.340] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.340] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.340] | : signalConditions() ... done
[08:08:26.341] | : relay stdout ...
[08:08:26.341] | : relay stdout ... done
[08:08:26.341] | : check for misuse ...
[08:08:26.341] | : check for misuse ... done
[08:08:26.341] | value() for MulticoreFuture (<unnamed-67>) ... done
[08:08:26.341] | result() for MulticoreFuture ...
[08:08:26.341] | result() for MulticoreFuture ... done
[08:08:26.341] | signalConditions() ...
[08:08:26.342] | : include = ‘immediateCondition’
[08:08:26.342] | : exclude = 
[08:08:26.342] | : resignal = FALSE
[08:08:26.342] | : Number of conditions: 6
[08:08:26.342] | :  int 6
[08:08:26.343] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.343] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.343] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.343] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.343] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.343] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.344] | signalConditions() ... done
[08:08:26.344] | result() for MulticoreFuture ...
[08:08:26.344] | result() for MulticoreFuture ... done
[08:08:26.344] | signalConditions() ...
[08:08:26.344] | : include = ‘condition’
[08:08:26.344] | : exclude = ‘error’, ‘immediateCondition’
[08:08:26.344] | : resignal = TRUE
[08:08:26.344] | : Number of conditions: 6
[08:08:26.345] | :  int 6
[08:08:26.345] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.345] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.159] | : . ' , attachPackages() ...
[08:08:26.345] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.345] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.159] | : . ' , ; packages: [n=1] ‘future’
[08:08:26.346] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.346] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.160] | : . ' , attachPackages() ... done
[08:08:26.346] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.346] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.160] | : . ' , attachPackages() ...
[08:08:26.346] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.346] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.160] | : . ' , ; packages: [n=0] 
[08:08:26.347] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.347] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.160] | : . ' , attachPackages() ... done
[08:08:26.347] | signalConditions() ... done
[08:08:26.347] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:26.347] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:26.347] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:26.348] value(<MulticoreFuture>, ...) ...
[08:08:26.348] value(<MulticoreFuture>, ...) ... done
[08:08:26.348] value() for MulticoreFuture (<unnamed-67>) ...
[08:08:26.348] | result() for MulticoreFuture ...
[08:08:26.348] | result() for MulticoreFuture ... done
[08:08:26.348] | result() for MulticoreFuture ...
[08:08:26.348] | result() for MulticoreFuture ... done
[08:08:26.348] | signalConditions() ...
[08:08:26.349] | : include = ‘immediateCondition’
[08:08:26.349] | : exclude = 
[08:08:26.349] | : resignal = FALSE
[08:08:26.349] | : Number of conditions: 6
[08:08:26.349] | :  int 6
[08:08:26.350] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.350] | : already signaled, skipping
[08:08:26.350] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.350] | : already signaled, skipping
[08:08:26.350] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.350] | : already signaled, skipping
[08:08:26.350] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.351] | : already signaled, skipping
[08:08:26.351] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.351] | : already signaled, skipping
[08:08:26.351] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.351] | : already signaled, skipping
[08:08:26.351] | signalConditions() ... done
[08:08:26.351] | check for misuse ...
[08:08:26.352] | check for misuse ... done
[08:08:26.352] value() for MulticoreFuture (<unnamed-67>) ... done
[08:08:26.352] value: <numeric>
[08:08:26.352] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:26.352] | nx: 4
[08:08:26.352] | relay: TRUE
[08:08:26.353] | stdout: TRUE
[08:08:26.353] | signal: TRUE
[08:08:26.353] | resignal: FALSE
[08:08:26.353] | force: TRUE
[08:08:26.353] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:26.354] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:26.354] | until=3
[08:08:26.354] | relaying element #3
[08:08:26.354] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:26.354] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:26.354] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:26.355] resolve() for MulticoreFuture ...
[08:08:26.355] resolve() for MulticoreFuture ... done
[08:08:26.355] length: 2 (resolved future 2)

[08:08:26.355] checking value #3:
[08:08:26.355] 'obj' is MulticoreFuture
[08:08:26.355] readImmediateCondition() ...
[08:08:26.356] | Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.356] | Number of RDS files: 0
[08:08:26.356] | Returned conditions set:
[08:08:26.356] |  list()
[08:08:26.357] readImmediateCondition() ... done
[08:08:26.357] MulticoreFuture #3
[08:08:26.357] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:26.357] | nx: 4
[08:08:26.357] | relay: TRUE
[08:08:26.357] | stdout: TRUE
[08:08:26.357] | signal: TRUE
[08:08:26.358] | resignal: FALSE
[08:08:26.358] | force: TRUE
[08:08:26.358] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:26.358] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:26.358] | until=3
[08:08:26.358] | relaying element #3
[08:08:26.358] | value() for MulticoreFuture (<unnamed-68>) ...
[08:08:26.359] | : result() for MulticoreFuture ...
[08:08:26.359] | : . readImmediateCondition() ...
[08:08:26.359] | : . ' Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.360] | : . ' Number of RDS files: 0
[08:08:26.360] | : . ' Returned conditions set:
[08:08:26.360] | : . '  list()
[08:08:26.361] | : . readImmediateCondition() ... done
[08:08:26.361] | : . result() for MulticoreFuture ...
[08:08:26.361] | : . result() for MulticoreFuture ... done
[08:08:26.361] | : . signalConditions() ...
[08:08:26.362] | : . ' include = ‘immediateCondition’
[08:08:26.362] | : . ' exclude = 
[08:08:26.362] | : . ' resignal = FALSE
[08:08:26.362] | : . ' Number of conditions: 6
[08:08:26.362] | : . '  int 6
[08:08:26.363] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.363] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.363] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.364] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.364] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.364] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.364] | : . signalConditions() ... done
[08:08:26.364] | : result() for MulticoreFuture ... done
[08:08:26.365] | : result() for MulticoreFuture ...
[08:08:26.365] | : result() for MulticoreFuture ... done
[08:08:26.365] | : signalConditions() ...
[08:08:26.365] | : . include = ‘immediateCondition’
[08:08:26.365] | : . exclude = 
[08:08:26.366] | : . resignal = FALSE
[08:08:26.366] | : . Number of conditions: 6
[08:08:26.366] | : .  int 6
[08:08:26.367] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.367] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.367] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.367] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.367] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.370] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.370] | : signalConditions() ... done
[08:08:26.370] | : relay stdout ...
[08:08:26.370] | : relay stdout ... done
[08:08:26.370] | : check for misuse ...
[08:08:26.370] | : check for misuse ... done
[08:08:26.370] | value() for MulticoreFuture (<unnamed-68>) ... done
[08:08:26.371] | result() for MulticoreFuture ...
[08:08:26.371] | result() for MulticoreFuture ... done
[08:08:26.371] | signalConditions() ...
[08:08:26.371] | : include = ‘immediateCondition’
[08:08:26.371] | : exclude = 
[08:08:26.371] | : resignal = FALSE
[08:08:26.371] | : Number of conditions: 6
[08:08:26.371] | :  int 6
[08:08:26.372] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.372] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.372] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.372] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.372] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.372] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.373] | signalConditions() ... done
[08:08:26.373] | result() for MulticoreFuture ...
[08:08:26.373] | result() for MulticoreFuture ... done
[08:08:26.373] | signalConditions() ...
[08:08:26.373] | : include = ‘condition’
[08:08:26.373] | : exclude = ‘error’, ‘immediateCondition’
[08:08:26.373] | : resignal = TRUE
[08:08:26.373] | : Number of conditions: 6
[08:08:26.374] | :  int 6
[08:08:26.374] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.374] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.171] | : . ' , attachPackages() ...
[08:08:26.374] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.374] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.172] | : . ' , ; packages: [n=1] ‘future’
[08:08:26.375] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.375] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.173] | : . ' , attachPackages() ... done
[08:08:26.375] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.375] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.173] | : . ' , attachPackages() ...
[08:08:26.375] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.375] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.173] | : . ' , ; packages: [n=0] 
[08:08:26.375] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.376] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.174] | : . ' , attachPackages() ... done
[08:08:26.376] | signalConditions() ... done
[08:08:26.376] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:26.376] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:26.376] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:26.376] value(<MulticoreFuture>, ...) ...
[08:08:26.376] value(<MulticoreFuture>, ...) ... done
[08:08:26.376] value() for MulticoreFuture (<unnamed-68>) ...
[08:08:26.377] | result() for MulticoreFuture ...
[08:08:26.377] | result() for MulticoreFuture ... done
[08:08:26.377] | result() for MulticoreFuture ...
[08:08:26.377] | result() for MulticoreFuture ... done
[08:08:26.377] | signalConditions() ...
[08:08:26.377] | : include = ‘immediateCondition’
[08:08:26.377] | : exclude = 
[08:08:26.377] | : resignal = FALSE
[08:08:26.377] | : Number of conditions: 6
[08:08:26.378] | :  int 6
[08:08:26.378] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.378] | : already signaled, skipping
[08:08:26.378] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.378] | : already signaled, skipping
[08:08:26.378] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.379] | : already signaled, skipping
[08:08:26.379] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.379] | : already signaled, skipping
[08:08:26.379] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.379] | : already signaled, skipping
[08:08:26.379] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.379] | : already signaled, skipping
[08:08:26.379] | signalConditions() ... done
[08:08:26.380] | check for misuse ...
[08:08:26.380] | check for misuse ... done
[08:08:26.380] value() for MulticoreFuture (<unnamed-68>) ... done
[08:08:26.380] value: <NULL>
[08:08:26.380] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:26.380] | nx: 4
[08:08:26.380] | relay: TRUE
[08:08:26.380] | stdout: TRUE
[08:08:26.381] | signal: TRUE
[08:08:26.381] | resignal: FALSE
[08:08:26.381] | force: TRUE
[08:08:26.381] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:26.381] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:26.381] | until=4
[08:08:26.381] | relaying element #4
[08:08:26.381] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:26.381] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:26.381] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:26.382] resolve() for MulticoreFuture ...
[08:08:26.382] resolve() for MulticoreFuture ... done
[08:08:26.382] length: 1 (resolved future 3)

[08:08:26.382] checking value #4:
[08:08:26.382] 'obj' is atomic
[08:08:26.382] signalConditionsASAP(numeric, pos=4) ...
[08:08:26.382] | nx: 4
[08:08:26.382] | relay: TRUE
[08:08:26.383] | stdout: TRUE
[08:08:26.383] | signal: TRUE
[08:08:26.383] | resignal: FALSE
[08:08:26.383] | force: TRUE
[08:08:26.383] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:26.383] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:26.383] | until=4
[08:08:26.383] | relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:26.383] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:26.384] signalConditionsASAP(numeric, pos=4) ... done
[08:08:26.384] length: 0 (resolved future 4)

[08:08:26.384] Relaying remaining futures ...
[08:08:26.384] | signalConditionsASAP(NULL, pos=0) ...
[08:08:26.384] | : nx: 4
[08:08:26.384] | : relay: TRUE
[08:08:26.384] | : stdout: TRUE
[08:08:26.385] | : signal: TRUE
[08:08:26.385] | : resignal: FALSE
[08:08:26.385] | : force: TRUE
[08:08:26.385] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:26.385] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
 - flush all
[08:08:26.385] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:26.385] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:26.385] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:26.385] Relaying remaining futures ... done

List of 4
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
Dimensions: c(2, 3, 1)
[08:08:26.387] future(..., label = NULL) ...
[08:08:26.388] | lazy: FALSE
[08:08:26.388] | stdout: TRUE
[08:08:26.388] | conditions: [n=1] ‘condition’
[08:08:26.388] | gc: FALSE
[08:08:26.388] | earlySignal: FALSE
[08:08:26.388] | getGlobalsAndPackages() ...
[08:08:26.388] | : Searching for globals ...
[08:08:26.390] | : . globals found: [0] 
[08:08:26.390] | : Searching for globals ... done
[08:08:26.390] | : globals: [0] <none>
[08:08:26.390] | : packages: [0] <none>
[08:08:26.390] | getGlobalsAndPackages() ... done
[08:08:26.391] | run() for ‘Future’ (<unnamed-70>) ...
[08:08:26.391] | : state: ‘created’
[08:08:26.391] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.391] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.391] | : Using MulticoreFutureBackend ...
[08:08:26.391] | : . Number of futures since start: 9 (9 created, 9 launched, 12 finished)
[08:08:26.391] | : . Launching futures ...
[08:08:26.391] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:26.392] | : . ' , getFutureData() ...
[08:08:26.392] | : . ' , ; getFutureCore() ...
[08:08:26.392] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:26.392] | : . ' , ; getFutureCore() ... done
[08:08:26.392] | : . ' , ; getFutureCapture() ...
[08:08:26.392] | : . ' , ; getFutureCapture() ... done
[08:08:26.392] | : . ' , ; getFutureContext() ...
[08:08:26.392] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.393] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:26.393] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.393] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:26.393] | : . ' , ; getFutureContext() ... done
[08:08:26.393] | : . ' , getFutureData() ... done
[08:08:26.393] | : . ' , requestCore(..., workers = 2) ...
[08:08:26.394] | : . ' , requestCore(..., workers = 2) ... done
[08:08:26.396] | : . ' , MulticoreFuture started
[08:08:26.396] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:26.397] | : . Launching futures ... done
[08:08:26.397] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:26.397] | : Using MulticoreFutureBackend ... done
[08:08:26.397] | run() for ‘Future’ (<unnamed-70>) ... done
[08:08:26.397] future(..., label = NULL) ... done
[08:08:26.398] future(..., label = NULL) ...
[08:08:26.398] | lazy: FALSE
[08:08:26.398] | stdout: TRUE
[08:08:26.398] | conditions: [n=1] ‘condition’
[08:08:26.398] | gc: FALSE
[08:08:26.398] | earlySignal: FALSE
[08:08:26.399] | getGlobalsAndPackages() ...
[08:08:26.399] | : Searching for globals ...
[08:08:26.400] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.400] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:26.400] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.400] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:26.401] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:26.401] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:26.401] | : . globals found: [0] 
[08:08:26.401] | : . ' , ; ` | New stack:
[08:08:26.401] | : Searching for globals ... done
[08:08:26.401] | : globals: [0] <none>
[08:08:26.402] | : packages: [0] <none>
[08:08:26.402] | getGlobalsAndPackages() ... done
[08:08:26.402] | run() for ‘Future’ (<unnamed-71>) ...
[08:08:26.402] | : state: ‘created’
[08:08:26.403] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.403] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.403] | : Using MulticoreFutureBackend ...
[08:08:26.403] | : . Number of futures since start: 10 (10 created, 10 launched, 12 finished)
[08:08:26.403] | : . Launching futures ...
[08:08:26.403] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:26.404] | : . ' , getFutureData() ...
[08:08:26.404] | : . ' , ; getFutureCore() ...
[08:08:26.404] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:26.404] | : . ' , ; getFutureCore() ... done
[08:08:26.404] | : . ' , ; getFutureCapture() ...
[08:08:26.404] | : . ' , ; getFutureCapture() ... done
[08:08:26.405] | : . ' , ; getFutureContext() ...
[08:08:26.405] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.405] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:26.401] | : . ' , ; ` | List of 1
[08:08:26.401] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.401] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.401] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:26.401] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.401] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.401] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.401] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.401] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.405] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.405] | : . ' , ; ` | Old stack:
[08:08:26.405] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:26.406] | : . ' , ; getFutureContext() ... done
[08:08:26.406] | : . ' , getFutureData() ... done
[08:08:26.406] | : . ' , requestCore(..., workers = 2) ...
[08:08:26.407] | : . ' , requestCore(..., workers = 2) ... done
[08:08:26.409] | : . ' , MulticoreFuture started
[08:08:26.410] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:26.405] | : . ' , ; ` | List of 1
[08:08:26.405] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.405] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.405] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.405] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:26.405] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.405] | : . ' , ; ` |     ...)  
[08:08:26.405] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.405] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.405] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:26.405] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.405] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.405] | : . ' , ; ` |     ...)  
[08:08:26.405] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.405] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.410] | : . ' , ; ` | Not identical
[08:08:26.410] | : . Launching futures ... done
[08:08:26.410] | : . ' , ; ` | all.equal() for future ...
[08:08:26.410] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:26.411] | : Using MulticoreFutureBackend ... done
[08:08:26.411] | run() for ‘Future’ (<unnamed-71>) ... done
[08:08:26.411] future(..., label = NULL) ... done
[08:08:26.412] future(..., label = NULL) ...
[08:08:26.413] | lazy: FALSE
[08:08:26.413] | stdout: TRUE
[08:08:26.413] | conditions: [n=1] ‘condition’
[08:08:26.413] | gc: FALSE
[08:08:26.413] | earlySignal: FALSE
[08:08:26.414] | getGlobalsAndPackages() ...
[08:08:26.414] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.414] | : Searching for globals ...
[08:08:26.414] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:26.414] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.415] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:26.415] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:26.416] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:26.416] | : . ' , ; ` | New stack:
[08:08:26.410] | : . ' , ; ` | : List of 2
[08:08:26.410] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.410] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.410] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:26.410] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.410] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.410] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.410] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.410] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.410] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.410] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.410] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:26.410] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.410] | : . ' , ; ` | :     ...)  
[08:08:26.410] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.410] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.410] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:26.410] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.410] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.410] | : . ' , ; ` | :     ...)  
[08:08:26.410] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.418] | : . ' , ; ` | : Formals differ
[08:08:26.418] | : . ' , ; ` | all.equal() for future ... done
[08:08:26.418] | : . ' , ; ` | Future strategies differ at level 1
[08:08:26.418] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:26.419] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:26.419] | : . ' , ; ` List of future strategies:
[08:08:26.419] | : . ' , ; ` 1. sequential:
[08:08:26.419] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:26.419] | : . ' , ; `    - tweaked: FALSE
[08:08:26.419] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.422] | : . globals found: [1] ‘{’
[08:08:26.416] | : . ' , ; ` | List of 1
[08:08:26.416] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.416] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.416] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:26.416] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.416] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.416] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.416] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.416] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.422] | : Searching for globals ... done
[08:08:26.422] | : . ' , ; ` | Old stack:
[08:08:26.422] | : Resolving globals: FALSE
[08:08:26.422] | : Search for packages associated with the globals ...
[08:08:26.423] | : . Packages associated with globals: [1] ‘base’
[08:08:26.419] | : . ' , ; ` List of 1
[08:08:26.419] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.419] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.419] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:26.419] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.419] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.419] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.419] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.419] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.423] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:26.423] | : . Packages: [1] ‘base’
[08:08:26.423] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:26.424] | : Search for packages associated with the globals ... done
[08:08:26.424] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.424] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:26.424] | : Packages after dropping 'base': [0] 
[08:08:26.424] | : globals: [0] 
[08:08:26.424] | : packages: [0] 
[08:08:26.425] | getGlobalsAndPackages() ... done
[08:08:26.425] | run() for ‘Future’ (<unnamed-72>) ...
[08:08:26.425] | : state: ‘created’
[08:08:26.426] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.426] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.426] | : Using MulticoreFutureBackend ...
[08:08:26.426] | : . Number of futures since start: 11 (11 created, 11 launched, 12 finished)
[08:08:26.427] | : . Launching futures ...
[08:08:26.424] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.424] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.424] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:26.424] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.424] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.424] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.424] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.427] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:26.427] | : . ' , ; ` | : init: TRUE
[08:08:26.427] | : . ' , getFutureData() ...
[08:08:26.427] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:26.427] | : . ' , ; getFutureCore() ...
[08:08:26.427] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:26.428] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:26.428] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:26.428] | : . ' , ; getFutureCore() ... done
[08:08:26.428] | : . ' , ; ` | : .  list()
[08:08:26.428] | : . ' , ; getFutureCapture() ...
[08:08:26.428] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:26.428] | : . ' , ; getFutureCapture() ... done
[08:08:26.428] | : . ' , ; ` | : .  list()
[08:08:26.429] | : . ' , ; getFutureContext() ...
[08:08:26.429] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:26.429] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.422] | : . ' , ; ` | List of 1
[08:08:26.422] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.422] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.422] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.422] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:26.422] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.422] | : . ' , ; ` |     ...)  
[08:08:26.422] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.422] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.422] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:26.422] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.422] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.422] | : . ' , ; ` |     ...)  
[08:08:26.422] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.422] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.429] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:26.429] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.429] | : . ' , ; ` | Not identical
[08:08:26.429] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:26.429] | : . ' , ; ` | all.equal() for future ...
[08:08:26.430] | : . ' , ; getFutureContext() ... done
[08:08:26.430] | : . ' , getFutureData() ... done
[08:08:26.429] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:26.429] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:26.429] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:26.430] | : . ' , requestCore(..., workers = 2) ...
[08:08:26.430] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:26.431] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:26.431] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:26.431] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.431] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:26.431] | : . ' , ; Poll #1 (0): usedCores() = 2, workers = 2
[08:08:26.431] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:26.431] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.434] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:26.435] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:26.435] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:26.435] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:26.435] | : . ' , ; ` | : New stack:
[08:08:26.430] | : . ' , ; ` | : List of 2
[08:08:26.430] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.430] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.430] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:26.430] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.430] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.430] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.430] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.430] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.430] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.430] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.430] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:26.430] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.430] | : . ' , ; ` | :     ...)  
[08:08:26.430] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.430] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.430] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:26.430] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.430] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.430] | : . ' , ; ` | :     ...)  
[08:08:26.430] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.438] | : . ' , ; ` | : Formals differ
[08:08:26.438] | : . ' , ; ` | all.equal() for future ... done
[08:08:26.438] | : . ' , ; ` | Future strategies differ at level 1
[08:08:26.439] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:26.439] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:26.439] | : . ' , ; ` List of future strategies:
[08:08:26.439] | : . ' , ; ` 1. sequential:
[08:08:26.439] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:26.439] | : . ' , ; `    - tweaked: FALSE
[08:08:26.439] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.435] | : . ' , ; ` | : List of 1
[08:08:26.435] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.435] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.435] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.435] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:26.435] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.435] | : . ' , ; ` | :     ...)  
[08:08:26.435] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.435] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.435] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:26.435] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.435] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.435] | : . ' , ; ` | :     ...)  
[08:08:26.435] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.435] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.440] | : . ' , ; ` | : Old stack:
[08:08:26.440] | : . ' , ; ` List of 1
[08:08:26.440] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.440] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.440] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:26.440] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.440] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.440] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.440] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.440] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.443] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:26.444] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:26.444] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.444] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:26.440] | : . ' , ; ` | : List of 1
[08:08:26.440] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.440] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.440] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:26.440] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.440] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.440] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.440] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.440] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564304498498> 
[08:08:26.440] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.440] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.440] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.445] | : . ' , ; ` | : Not identical
[08:08:26.445] | : . ' , ; ` | : all.equal() for future ...
[08:08:26.444] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.444] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.444] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:26.444] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.444] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.444] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.444] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.447] | : . ' , ; ` | : init: TRUE
[08:08:26.447] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:26.447] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:26.447] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:26.447] | : . ' , ; ` | : .  list()
[08:08:26.448] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:26.448] | : . ' , ; ` | : .  list()
[08:08:26.448] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:26.449] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:26.449] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:26.449] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:26.450] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:26.450] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:26.451] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:26.451] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.451] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:26.451] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:26.451] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.452] | : . ' , ; readImmediateCondition() ...
[08:08:26.452] | : . ' , ; ` Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.452] | : . ' , ; ` Number of RDS files: 0
[08:08:26.452] | : . ' , ; ` Returned conditions set:
[08:08:26.453] | : . ' , ; `  list()
[08:08:26.445] | : . ' , ; ` | : . List of 2
[08:08:26.445] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.445] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.445] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.445] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:26.445] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.445] | : . ' , ; ` | : .     ...)  
[08:08:26.445] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.445] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.445] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:26.445] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.445] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.445] | : . ' , ; ` | : .     ...)  
[08:08:26.445] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.445] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.445] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.445] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:26.445] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.445] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.445] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.445] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.445] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564304498498> 
[08:08:26.445] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.445] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.453] | : . ' , ; readImmediateCondition() ... done
[08:08:26.454] | : . ' , ; ` | : . Formals differ
[08:08:26.454] | : . ' , ; ` | : all.equal() for future ... done
[08:08:26.454] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:26.455] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:26.455] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:26.455] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:26.455] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:26.455] | : . ' , ; ` | List of future strategies:
[08:08:26.455] | : . ' , ; ` | 1. multicore:
[08:08:26.455] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:26.455] | : . ' , ; ` |    - tweaked: FALSE
[08:08:26.455] | : . ' , ; ` |    - call: plan(strategy)
[08:08:26.455] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:26.456] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:26.456] | : . ' , ; ` | : New stack:
[08:08:26.456] | : . ' , ; ` | List of 1
[08:08:26.456] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.456] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.456] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.456] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:26.456] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.456] | : . ' , ; ` |     ...)  
[08:08:26.456] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.456] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.456] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:26.456] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.456] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.456] | : . ' , ; ` |     ...)  
[08:08:26.456] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.456] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.460] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:26.456] | : . ' , ; ` | : List of 1
[08:08:26.456] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.456] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.456] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.456] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:26.456] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.456] | : . ' , ; ` | :     ...)  
[08:08:26.456] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.456] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.456] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:26.456] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.456] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.456] | : . ' , ; ` | :     ...)  
[08:08:26.456] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.456] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.461] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:26.461] | : . ' , ; ` | : Old stack:
[08:08:26.461] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.461] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.461] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:26.461] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:26.462] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.462] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.464] | : . ' , ; readImmediateCondition() ...
[08:08:26.464] | : . ' , ; ` Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.464] | : . ' , ; ` Number of RDS files: 0
[08:08:26.464] | : . ' , ; ` Returned conditions set:
[08:08:26.465] | : . ' , ; `  list()
[08:08:26.465] | : . ' , ; readImmediateCondition() ... done
[08:08:26.466] | : . ' , ; Poll #2 (0.03 secs): usedCores() = 2, workers = 2
[08:08:26.461] | : . ' , ; ` | : List of 1
[08:08:26.461] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.461] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.461] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:26.461] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.461] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.461] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.461] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.461] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302c476d0> 
[08:08:26.461] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.461] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.461] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.467] | : . ' , ; ` | : Not identical
[08:08:26.467] | : . ' , ; ` | : all.equal() for future ...
[08:08:26.467] | : . ' , ; ` | : . List of 2
[08:08:26.467] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.467] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.467] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.467] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:26.467] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.467] | : . ' , ; ` | : .     ...)  
[08:08:26.467] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.467] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.467] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:26.467] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.467] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.467] | : . ' , ; ` | : .     ...)  
[08:08:26.467] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.467] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.467] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.467] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:26.467] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.467] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.467] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.467] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.467] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302c476d0> 
[08:08:26.467] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.467] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.476] | : . ' , ; ` | : . Formals differ
[08:08:26.476] | : . ' , ; ` | : all.equal() for future ... done
[08:08:26.476] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:26.477] | : . ' , ; readImmediateCondition() ...
[08:08:26.477] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:26.477] | : . ' , ; ` Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.477] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:26.477] | : . ' , ; ` Number of RDS files: 0
[08:08:26.477] | : . ' , ; ` Returned conditions set:
[08:08:26.477] | : . ' , ; ` | List of future strategies:
[08:08:26.477] | : . ' , ; ` | 1. multicore:
[08:08:26.477] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:26.477] | : . ' , ; ` |    - tweaked: FALSE
[08:08:26.477] | : . ' , ; ` |    - call: plan(strategy)
[08:08:26.477] | : . ' , ; `  list()
[08:08:26.478] | : . ' , ; readImmediateCondition() ... done
[08:08:26.478] | : . ' , ; value() for MulticoreFuture (<unnamed-70>) ...
[08:08:26.479] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:26.480] | : . ' , ; ` | readImmediateCondition() ...
[08:08:26.480] | : . ' , ; ` | : Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.480] | : . ' , ; ` | : Number of RDS files: 0
[08:08:26.480] | : . ' , ; ` | : Returned conditions set:
[08:08:26.481] | : . ' , ; ` | :  list()
[08:08:26.481] | : . ' , ; ` | readImmediateCondition() ... done
[08:08:26.482] | : . ' , ; ` | result() for MulticoreFuture ...
[08:08:26.482] | : . ' , ; ` | result() for MulticoreFuture ... done
[08:08:26.482] | : . ' , ; ` | signalConditions() ...
[08:08:26.482] | : . ' , ; ` | : include = ‘immediateCondition’
[08:08:26.482] | : . ' , ; ` | : exclude = 
[08:08:26.483] | : . ' , ; ` | : resignal = FALSE
[08:08:26.483] | : . ' , ; ` | : Number of conditions: 6
[08:08:26.483] | : . ' , ; ` | :  int 6
[08:08:26.484] | : . ' , ; ` | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.484] | : . ' , ; ` | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.484] | : . ' , ; ` | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.485] | : . ' , ; ` | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.485] | : . ' , ; ` | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.485] | : . ' , ; ` | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.485] | : . ' , ; ` | signalConditions() ... done
[08:08:26.485] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:26.486] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:26.486] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:26.486] | : . ' , ; ` signalConditions() ...
[08:08:26.486] | : . ' , ; ` | include = ‘immediateCondition’
[08:08:26.486] | : . ' , ; ` | exclude = 
[08:08:26.487] | : . ' , ; ` | resignal = FALSE
[08:08:26.487] | : . ' , ; ` | Number of conditions: 6
[08:08:26.487] | : . ' , ; ` |  int 6
[08:08:26.488] | : . ' , ; ` | Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.488] | : . ' , ; ` | Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.488] | : . ' , ; ` | Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.488] | : . ' , ; ` | Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.488] | : . ' , ; ` | Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.489] | : . ' , ; ` | Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.489] | : . ' , ; ` signalConditions() ... done
[08:08:26.489] | : . ' , ; ` check for misuse ...
[08:08:26.489] | : . ' , ; ` check for misuse ... done
[08:08:26.478] | : . ' , ; ` | List of 1
[08:08:26.478] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.478] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.478] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.478] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:26.478] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.478] | : . ' , ; ` |     ...)  
[08:08:26.478] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.478] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.478] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:26.478] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.478] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.478] | : . ' , ; ` |     ...)  
[08:08:26.478] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.478] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.490] | : . ' , ; value() for MulticoreFuture (<unnamed-70>) ... done
[08:08:26.490] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:26.490] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:26.490] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.490] | : . ' , requestCore(..., workers = 2) ... done
[08:08:26.491] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.491] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:26.491] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:26.491] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.491] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.493] | : . ' , MulticoreFuture started
[08:08:26.494] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:26.494] | : . Launching futures ... done
[08:08:26.494] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:26.495] | : Using MulticoreFutureBackend ... done
[08:08:26.495] | run() for ‘Future’ (<unnamed-72>) ... done
[08:08:26.495] future(..., label = NULL) ... done
<environment: 0x564303c346a8> 
[08:08:26.497] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.497] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:26.497] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
<environment: 0x564303f929d0> 
[08:08:26.497] resolved() for environment ...
[08:08:26.497] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:26.498] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:26.498] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:26.498] | : . ' , ; ` | New stack:
[08:08:26.498] | resolved() for list ...
[08:08:26.498] | : Number of elements: 4
[08:08:26.499] | : Number of futures: 4
[08:08:26.499] | : readImmediateCondition() ...
[08:08:26.499] | : . Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.499] | : . Number of RDS files: 0
[08:08:26.500] | : . Returned conditions set:
[08:08:26.500] | : .  list()
[08:08:26.500] | : readImmediateCondition() ... done
[08:08:26.498] | : . ' , ; ` | List of 1
[08:08:26.498] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.498] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.498] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:26.498] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.498] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.498] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.498] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.498] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.503] | : . ' , ; ` | Old stack:
[08:08:26.503] | : . ' , ; ` | List of 1
[08:08:26.503] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.503] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.503] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.503] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:26.503] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.503] | : . ' , ; ` |     ...)  
[08:08:26.503] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.503] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.503] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:26.503] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.503] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.503] | : . ' , ; ` |     ...)  
[08:08:26.503] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.503] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.508] | : . ' , ; ` | Not identical
[08:08:26.508] | : . ' , ; ` | all.equal() for future ...
[08:08:26.511] | : readImmediateCondition() ...
[08:08:26.511] | : . Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.511] | : . Number of RDS files: 0
[08:08:26.511] | : . Returned conditions set:
[08:08:26.511] | : .  list()
[08:08:26.512] | : readImmediateCondition() ... done
[08:08:26.512] | resolved() for list ... done
[08:08:26.512] resolved() for environment ... done
 Named logi [1:4] TRUE TRUE TRUE FALSE
 - attr(*, "names")= chr [1:4] "a" "b" "c" "d"
[08:08:26.513] value() for MulticoreFuture (<unnamed-72>) ...
[08:08:26.513] | result() for MulticoreFuture ...
[08:08:26.509] | : . ' , ; ` | : List of 2
[08:08:26.509] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.509] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.509] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:26.509] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.509] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.509] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.509] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.509] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.509] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.509] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.509] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:26.509] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.509] | : . ' , ; ` | :     ...)  
[08:08:26.509] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.509] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.509] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:26.509] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.509] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.509] | : . ' , ; ` | :     ...)  
[08:08:26.509] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.517] | : . ' , ; ` | : Formals differ
[08:08:26.517] | : . ' , ; ` | all.equal() for future ... done
[08:08:26.517] | : . ' , ; ` | Future strategies differ at level 1
[08:08:26.517] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:26.517] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:26.517] | : . ' , ; ` List of future strategies:
[08:08:26.517] | : . ' , ; ` 1. sequential:
[08:08:26.517] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:26.517] | : . ' , ; `    - tweaked: FALSE
[08:08:26.517] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.518] | : . ' , ; ` List of 1
[08:08:26.518] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.518] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.518] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:26.518] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.518] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.518] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.518] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.518] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.522] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:26.522] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:26.523] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.523] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:26.523] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.523] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.523] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:26.523] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.523] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.523] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.523] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.526] | : . ' , ; ` | : init: TRUE
[08:08:26.526] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:26.526] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:26.526] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:26.527] | : . ' , ; ` | : .  list()
[08:08:26.527] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:26.527] | : . ' , ; ` | : .  list()
[08:08:26.528] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:26.528] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:26.528] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:26.528] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:26.530] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:26.530] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:26.530] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:26.531] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.531] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:26.531] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:26.531] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.534] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:26.535] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:26.538] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:26.538] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:26.538] | : . ' , ; ` | : New stack:
[08:08:26.538] | : . ' , ; ` | : List of 1
[08:08:26.538] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.538] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.538] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.538] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:26.538] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.538] | : . ' , ; ` | :     ...)  
[08:08:26.538] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.538] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.538] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:26.538] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.538] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.538] | : . ' , ; ` | :     ...)  
[08:08:26.538] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.538] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.543] | : . ' , ; ` | : Old stack:
[08:08:26.543] | : . ' , ; ` | : List of 1
[08:08:26.543] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.543] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.543] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:26.543] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.543] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.543] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.543] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.543] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56430066f198> 
[08:08:26.543] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.543] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.543] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.547] | : . ' , ; ` | : Not identical
[08:08:26.547] | : . ' , ; ` | : all.equal() for future ...
[08:08:26.547] | : . ' , ; ` | : . List of 2
[08:08:26.547] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.547] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.547] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.547] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:26.547] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.547] | : . ' , ; ` | : .     ...)  
[08:08:26.547] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.547] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.547] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:26.547] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.547] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.547] | : . ' , ; ` | : .     ...)  
[08:08:26.547] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.547] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.547] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.547] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:26.547] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.547] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.547] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.547] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.547] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56430066f198> 
[08:08:26.547] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.547] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.555] | : . ' , ; ` | : . Formals differ
[08:08:26.555] | : . ' , ; ` | : all.equal() for future ... done
[08:08:26.556] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:26.556] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:26.556] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:26.556] | : . ' , ; ` | List of future strategies:
[08:08:26.556] | : . ' , ; ` | 1. multicore:
[08:08:26.556] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:26.556] | : . ' , ; ` |    - tweaked: FALSE
[08:08:26.556] | : . ' , ; ` |    - call: plan(strategy)
[08:08:26.556] | : . ' , ; ` | List of 1
[08:08:26.556] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.556] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.556] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.556] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:26.556] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.556] | : . ' , ; ` |     ...)  
[08:08:26.556] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.556] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.556] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:26.556] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.556] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.556] | : . ' , ; ` |     ...)  
[08:08:26.556] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.556] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.561] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:26.561] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:26.561] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.561] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.562] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:26.562] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:26.562] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.562] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.563] | : readImmediateCondition() ...
[08:08:26.563] | : . Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.563] | : . Number of RDS files: 0
[08:08:26.563] | : . Returned conditions set:
[08:08:26.563] | : .  list()
[08:08:26.564] | : readImmediateCondition() ... done
[08:08:26.564] | : result() for MulticoreFuture ...
[08:08:26.564] | : result() for MulticoreFuture ... done
[08:08:26.565] | : signalConditions() ...
[08:08:26.565] | : . include = ‘immediateCondition’
[08:08:26.565] | : . exclude = 
[08:08:26.565] | : . resignal = FALSE
[08:08:26.565] | : . Number of conditions: 6
[08:08:26.565] | : .  int 6
[08:08:26.566] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.566] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.566] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.566] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.566] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.566] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.567] | : signalConditions() ... done
[08:08:26.567] | result() for MulticoreFuture ... done
[08:08:26.567] | result() for MulticoreFuture ...
[08:08:26.567] | result() for MulticoreFuture ... done
[08:08:26.567] | signalConditions() ...
[08:08:26.567] | : include = ‘immediateCondition’
[08:08:26.567] | : exclude = 
[08:08:26.568] | : resignal = FALSE
[08:08:26.568] | : Number of conditions: 6
[08:08:26.568] | :  int 6
[08:08:26.568] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.569] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.569] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.569] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.569] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.569] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.569] | signalConditions() ... done
[08:08:26.569] | relay stdout ...
[08:08:26.570] | relay stdout ... done
[08:08:26.570] | check for misuse ...
[08:08:26.570] | check for misuse ... done
[08:08:26.570] | relay conditions ...
[08:08:26.570] | : Future state: ‘finished’
[08:08:26.570] | : result() for MulticoreFuture ...
[08:08:26.570] | : result() for MulticoreFuture ... done
[08:08:26.570] | : signalConditions() ...
[08:08:26.571] | : . include = ‘condition’
[08:08:26.571] | : . exclude = ‘immediateCondition’
[08:08:26.571] | : . resignal = TRUE
[08:08:26.571] | : . Number of conditions: 6
[08:08:26.571] | : .  int 6
[08:08:26.572] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.572] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.494] | : . ' , attachPackages() ...
[08:08:26.572] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.572] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.494] | : . ' , ; packages: [n=1] ‘future’
[08:08:26.572] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.572] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.495] | : . ' , attachPackages() ... done
[08:08:26.573] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.573] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.495] | : . ' , attachPackages() ...
[08:08:26.573] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.573] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.495] | : . ' , ; packages: [n=0] 
[08:08:26.573] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.573] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.495] | : . ' , attachPackages() ... done
[08:08:26.574] | : signalConditions() ... done
[08:08:26.574] | relay conditions ... done
[08:08:26.574] value() for MulticoreFuture (<unnamed-72>) ... done
[08:08:26.574] value() for listenv ...
[08:08:26.574] | recursive: 0
[08:08:26.574] | reduce: FALSE
[08:08:26.575] | length: 4
[08:08:26.576] | elements: ‘a’, ‘b’, ‘c’, ‘d’
[08:08:26.576] | Number of remaining objects: 4
[08:08:26.576] | checking value #1:
[08:08:26.576] | 'obj' is atomic
[08:08:26.576] | signalConditionsASAP(numeric, pos=1) ...
[08:08:26.576] | : nx: 4
[08:08:26.576] | : relay: TRUE
[08:08:26.577] | : stdout: TRUE
[08:08:26.577] | : signal: TRUE
[08:08:26.577] | : resignal: FALSE
[08:08:26.577] | : force: TRUE
[08:08:26.577] | : relayed: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:26.577] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:26.577] | : until=2
[08:08:26.577] | : relaying element #2
[08:08:26.577] | : relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:26.578] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:26.578] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:26.578] | length: 3 (resolved future 1)
[08:08:26.578] value() for listenv ... done
[08:08:26.579] checking value #2:
[08:08:26.579] 'obj' is MulticoreFuture
[08:08:26.579] MulticoreFuture #2
[08:08:26.579] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:26.579] | nx: 4
[08:08:26.579] | relay: TRUE
[08:08:26.579] | stdout: TRUE
[08:08:26.580] | signal: TRUE
[08:08:26.580] | resignal: FALSE
[08:08:26.580] | force: TRUE
[08:08:26.580] | relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:26.580] | queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:26.580] | until=2
[08:08:26.580] | relaying element #2
[08:08:26.580] | value() for MulticoreFuture (<unnamed-70>) ...
[08:08:26.581] | : result() for MulticoreFuture ...
[08:08:26.581] | : result() for MulticoreFuture ... done
[08:08:26.581] | : result() for MulticoreFuture ...
[08:08:26.581] | : result() for MulticoreFuture ... done
[08:08:26.581] | : signalConditions() ...
[08:08:26.581] | : . include = ‘immediateCondition’
[08:08:26.581] | : . exclude = 
[08:08:26.582] | : . resignal = FALSE
[08:08:26.582] | : . Number of conditions: 6
[08:08:26.582] | : .  int 6
[08:08:26.582] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.582] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.583] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.583] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.583] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.583] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.583] | : signalConditions() ... done
[08:08:26.583] | : relay stdout ...
[08:08:26.583] | : relay stdout ... done
[08:08:26.584] | : check for misuse ...
[08:08:26.584] | : check for misuse ... done
[08:08:26.584] | value() for MulticoreFuture (<unnamed-70>) ... done
[08:08:26.584] | result() for MulticoreFuture ...
[08:08:26.584] | result() for MulticoreFuture ... done
[08:08:26.584] | signalConditions() ...
[08:08:26.584] | : include = ‘immediateCondition’
[08:08:26.584] | : exclude = 
[08:08:26.585] | : resignal = FALSE
[08:08:26.585] | : Number of conditions: 6
[08:08:26.585] | :  int 6
[08:08:26.585] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.586] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.586] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.586] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.586] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.586] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.586] | signalConditions() ... done
[08:08:26.586] | result() for MulticoreFuture ...
[08:08:26.587] | result() for MulticoreFuture ... done
[08:08:26.587] | signalConditions() ...
[08:08:26.587] | : include = ‘condition’
[08:08:26.587] | : exclude = ‘error’, ‘immediateCondition’
[08:08:26.587] | : resignal = TRUE
[08:08:26.587] | : Number of conditions: 6
[08:08:26.587] | :  int 6
[08:08:26.588] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.588] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.397] | : . ' , attachPackages() ...
[08:08:26.588] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.588] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.398] | : . ' , ; packages: [n=1] ‘future’
[08:08:26.589] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.589] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.398] | : . ' , attachPackages() ... done
[08:08:26.589] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.589] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.398] | : . ' , attachPackages() ...
[08:08:26.591] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.592] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.398] | : . ' , ; packages: [n=0] 
[08:08:26.592] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.592] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.399] | : . ' , attachPackages() ... done
[08:08:26.592] | signalConditions() ... done
[08:08:26.592] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:26.592] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:26.592] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:26.593] value(<MulticoreFuture>, ...) ...
[08:08:26.593] value(<MulticoreFuture>, ...) ... done
[08:08:26.593] value() for MulticoreFuture (<unnamed-70>) ...
[08:08:26.593] | result() for MulticoreFuture ...
[08:08:26.593] | result() for MulticoreFuture ... done
[08:08:26.593] | result() for MulticoreFuture ...
[08:08:26.593] | result() for MulticoreFuture ... done
[08:08:26.593] | signalConditions() ...
[08:08:26.594] | : include = ‘immediateCondition’
[08:08:26.594] | : exclude = 
[08:08:26.594] | : resignal = FALSE
[08:08:26.594] | : Number of conditions: 6
[08:08:26.594] | :  int 6
[08:08:26.595] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.595] | : already signaled, skipping
[08:08:26.595] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.595] | : already signaled, skipping
[08:08:26.595] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.595] | : already signaled, skipping
[08:08:26.595] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.596] | : already signaled, skipping
[08:08:26.596] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.596] | : already signaled, skipping
[08:08:26.596] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.596] | : already signaled, skipping
[08:08:26.596] | signalConditions() ... done
[08:08:26.596] | check for misuse ...
[08:08:26.596] | check for misuse ... done
[08:08:26.597] value() for MulticoreFuture (<unnamed-70>) ... done
[08:08:26.597] value: <numeric>
[08:08:26.597] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:26.597] | nx: 4
[08:08:26.597] | relay: TRUE
[08:08:26.597] | stdout: TRUE
[08:08:26.597] | signal: TRUE
[08:08:26.598] | resignal: FALSE
[08:08:26.598] | force: TRUE
[08:08:26.598] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:26.598] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:26.598] | until=3
[08:08:26.598] | relaying element #3
[08:08:26.598] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:26.598] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:26.599] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:26.599] resolve() for MulticoreFuture ...
[08:08:26.599] resolve() for MulticoreFuture ... done
[08:08:26.599] length: 2 (resolved future 2)

[08:08:26.599] checking value #3:
[08:08:26.599] 'obj' is MulticoreFuture
[08:08:26.600] readImmediateCondition() ...
[08:08:26.600] | Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.600] | Number of RDS files: 0
[08:08:26.600] | Returned conditions set:
[08:08:26.600] |  list()
[08:08:26.601] readImmediateCondition() ... done
[08:08:26.601] MulticoreFuture #3
[08:08:26.601] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:26.601] | nx: 4
[08:08:26.601] | relay: TRUE
[08:08:26.601] | stdout: TRUE
[08:08:26.601] | signal: TRUE
[08:08:26.601] | resignal: FALSE
[08:08:26.602] | force: TRUE
[08:08:26.602] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:26.602] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:26.602] | until=3
[08:08:26.602] | relaying element #3
[08:08:26.602] | value() for MulticoreFuture (<unnamed-71>) ...
[08:08:26.602] | : result() for MulticoreFuture ...
[08:08:26.603] | : . readImmediateCondition() ...
[08:08:26.603] | : . ' Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.603] | : . ' Number of RDS files: 0
[08:08:26.604] | : . ' Returned conditions set:
[08:08:26.604] | : . '  list()
[08:08:26.604] | : . readImmediateCondition() ... done
[08:08:26.604] | : . result() for MulticoreFuture ...
[08:08:26.605] | : . result() for MulticoreFuture ... done
[08:08:26.605] | : . signalConditions() ...
[08:08:26.605] | : . ' include = ‘immediateCondition’
[08:08:26.605] | : . ' exclude = 
[08:08:26.605] | : . ' resignal = FALSE
[08:08:26.605] | : . ' Number of conditions: 6
[08:08:26.605] | : . '  int 6
[08:08:26.606] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.606] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.606] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.606] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.606] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.607] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.607] | : . signalConditions() ... done
[08:08:26.607] | : result() for MulticoreFuture ... done
[08:08:26.607] | : result() for MulticoreFuture ...
[08:08:26.607] | : result() for MulticoreFuture ... done
[08:08:26.607] | : signalConditions() ...
[08:08:26.607] | : . include = ‘immediateCondition’
[08:08:26.608] | : . exclude = 
[08:08:26.608] | : . resignal = FALSE
[08:08:26.608] | : . Number of conditions: 6
[08:08:26.608] | : .  int 6
[08:08:26.608] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.608] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.609] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.609] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.609] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.609] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.609] | : signalConditions() ... done
[08:08:26.609] | : relay stdout ...
[08:08:26.609] | : relay stdout ... done
[08:08:26.609] | : check for misuse ...
[08:08:26.610] | : check for misuse ... done
[08:08:26.610] | value() for MulticoreFuture (<unnamed-71>) ... done
[08:08:26.610] | result() for MulticoreFuture ...
[08:08:26.610] | result() for MulticoreFuture ... done
[08:08:26.610] | signalConditions() ...
[08:08:26.610] | : include = ‘immediateCondition’
[08:08:26.610] | : exclude = 
[08:08:26.610] | : resignal = FALSE
[08:08:26.611] | : Number of conditions: 6
[08:08:26.611] | :  int 6
[08:08:26.611] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.611] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.611] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.611] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.612] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.612] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.612] | signalConditions() ... done
[08:08:26.612] | result() for MulticoreFuture ...
[08:08:26.612] | result() for MulticoreFuture ... done
[08:08:26.612] | signalConditions() ...
[08:08:26.612] | : include = ‘condition’
[08:08:26.612] | : exclude = ‘error’, ‘immediateCondition’
[08:08:26.613] | : resignal = TRUE
[08:08:26.613] | : Number of conditions: 6
[08:08:26.613] | :  int 6
[08:08:26.613] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.613] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.410] | : . ' , attachPackages() ...
[08:08:26.613] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.614] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.411] | : . ' , ; packages: [n=1] ‘future’
[08:08:26.614] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.614] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.412] | : . ' , attachPackages() ... done
[08:08:26.614] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.614] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.412] | : . ' , attachPackages() ...
[08:08:26.614] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.614] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.412] | : . ' , ; packages: [n=0] 
[08:08:26.615] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.615] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.412] | : . ' , attachPackages() ... done
[08:08:26.615] | signalConditions() ... done
[08:08:26.615] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:26.615] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:26.615] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:26.615] value(<MulticoreFuture>, ...) ...
[08:08:26.615] value(<MulticoreFuture>, ...) ... done
[08:08:26.616] value() for MulticoreFuture (<unnamed-71>) ...
[08:08:26.616] | result() for MulticoreFuture ...
[08:08:26.616] | result() for MulticoreFuture ... done
[08:08:26.616] | result() for MulticoreFuture ...
[08:08:26.616] | result() for MulticoreFuture ... done
[08:08:26.616] | signalConditions() ...
[08:08:26.616] | : include = ‘immediateCondition’
[08:08:26.616] | : exclude = 
[08:08:26.616] | : resignal = FALSE
[08:08:26.617] | : Number of conditions: 6
[08:08:26.617] | :  int 6
[08:08:26.617] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.617] | : already signaled, skipping
[08:08:26.617] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.618] | : already signaled, skipping
[08:08:26.618] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.618] | : already signaled, skipping
[08:08:26.618] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.618] | : already signaled, skipping
[08:08:26.618] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.618] | : already signaled, skipping
[08:08:26.618] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.618] | : already signaled, skipping
[08:08:26.619] | signalConditions() ... done
[08:08:26.619] | check for misuse ...
[08:08:26.619] | check for misuse ... done
[08:08:26.619] value() for MulticoreFuture (<unnamed-71>) ... done
[08:08:26.619] value: <NULL>
[08:08:26.619] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:26.619] | nx: 4
[08:08:26.619] | relay: TRUE
[08:08:26.619] | stdout: TRUE
[08:08:26.620] | signal: TRUE
[08:08:26.620] | resignal: FALSE
[08:08:26.620] | force: TRUE
[08:08:26.620] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:26.620] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:26.620] | until=4
[08:08:26.620] | relaying element #4
[08:08:26.620] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:26.620] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:26.621] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:26.621] resolve() for MulticoreFuture ...
[08:08:26.621] resolve() for MulticoreFuture ... done
[08:08:26.621] length: 1 (resolved future 3)

[08:08:26.621] checking value #4:
[08:08:26.621] 'obj' is atomic
[08:08:26.621] signalConditionsASAP(numeric, pos=4) ...
[08:08:26.621] | nx: 4
[08:08:26.622] | relay: TRUE
[08:08:26.622] | stdout: TRUE
[08:08:26.622] | signal: TRUE
[08:08:26.622] | resignal: FALSE
[08:08:26.622] | force: TRUE
[08:08:26.622] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:26.622] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:26.622] | until=4
[08:08:26.622] | relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:26.623] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:26.623] signalConditionsASAP(numeric, pos=4) ... done
[08:08:26.623] length: 0 (resolved future 4)

[08:08:26.623] Relaying remaining futures ...
[08:08:26.623] | signalConditionsASAP(NULL, pos=0) ...
[08:08:26.623] | : nx: 4
[08:08:26.623] | : relay: TRUE
[08:08:26.624] | : stdout: TRUE
[08:08:26.624] | : signal: TRUE
[08:08:26.624] | : resignal: FALSE
[08:08:26.624] | : force: TRUE
[08:08:26.624] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:26.624] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
 - flush all
[08:08:26.624] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:26.624] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:26.624] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:26.625] Relaying remaining futures ... done

List of 4
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
Dimensions: c(2, 1, 3, 1)
[08:08:26.627] future(..., label = NULL) ...
[08:08:26.627] | lazy: FALSE
[08:08:26.627] | stdout: TRUE
[08:08:26.627] | conditions: [n=1] ‘condition’
[08:08:26.627] | gc: FALSE
[08:08:26.627] | earlySignal: FALSE
[08:08:26.627] | getGlobalsAndPackages() ...
[08:08:26.627] | : Searching for globals ...
[08:08:26.629] | : . globals found: [0] 
[08:08:26.629] | : Searching for globals ... done
[08:08:26.629] | : globals: [0] <none>
[08:08:26.629] | : packages: [0] <none>
[08:08:26.629] | getGlobalsAndPackages() ... done
[08:08:26.630] | run() for ‘Future’ (<unnamed-73>) ...
[08:08:26.630] | : state: ‘created’
[08:08:26.630] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.630] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.630] | : Using MulticoreFutureBackend ...
[08:08:26.630] | : . Number of futures since start: 12 (12 created, 12 launched, 16 finished)
[08:08:26.631] | : . Launching futures ...
[08:08:26.631] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:26.631] | : . ' , getFutureData() ...
[08:08:26.631] | : . ' , ; getFutureCore() ...
[08:08:26.631] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:26.631] | : . ' , ; getFutureCore() ... done
[08:08:26.631] | : . ' , ; getFutureCapture() ...
[08:08:26.631] | : . ' , ; getFutureCapture() ... done
[08:08:26.632] | : . ' , ; getFutureContext() ...
[08:08:26.632] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.632] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:26.632] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.632] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:26.632] | : . ' , ; getFutureContext() ... done
[08:08:26.632] | : . ' , getFutureData() ... done
[08:08:26.633] | : . ' , requestCore(..., workers = 2) ...
[08:08:26.633] | : . ' , requestCore(..., workers = 2) ... done
[08:08:26.635] | : . ' , MulticoreFuture started
[08:08:26.636] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:26.636] | : . Launching futures ... done
[08:08:26.636] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:26.636] | : Using MulticoreFutureBackend ... done
[08:08:26.636] | run() for ‘Future’ (<unnamed-73>) ... done
[08:08:26.637] future(..., label = NULL) ... done
[08:08:26.637] future(..., label = NULL) ...
[08:08:26.637] | lazy: FALSE
[08:08:26.637] | stdout: TRUE
[08:08:26.637] | conditions: [n=1] ‘condition’
[08:08:26.637] | gc: FALSE
[08:08:26.638] | earlySignal: FALSE
[08:08:26.638] | getGlobalsAndPackages() ...
[08:08:26.638] | : Searching for globals ...
[08:08:26.639] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.639] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:26.639] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.639] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:26.640] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:26.640] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:26.640] | : . ' , ; ` | New stack:
[08:08:26.640] | : . globals found: [0] 
[08:08:26.640] | : Searching for globals ... done
[08:08:26.641] | : globals: [0] <none>
[08:08:26.641] | : packages: [0] <none>
[08:08:26.641] | getGlobalsAndPackages() ... done
[08:08:26.641] | run() for ‘Future’ (<unnamed-74>) ...
[08:08:26.641] | : state: ‘created’
[08:08:26.642] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.642] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.642] | : Using MulticoreFutureBackend ...
[08:08:26.642] | : . Number of futures since start: 13 (13 created, 13 launched, 16 finished)
[08:08:26.642] | : . Launching futures ...
[08:08:26.643] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:26.643] | : . ' , getFutureData() ...
[08:08:26.643] | : . ' , ; getFutureCore() ...
[08:08:26.643] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:26.643] | : . ' , ; getFutureCore() ... done
[08:08:26.643] | : . ' , ; getFutureCapture() ...
[08:08:26.644] | : . ' , ; getFutureCapture() ... done
[08:08:26.644] | : . ' , ; getFutureContext() ...
[08:08:26.644] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.640] | : . ' , ; ` | List of 1
[08:08:26.640] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.640] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.640] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:26.640] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.640] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.640] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.640] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.640] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.644] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:26.644] | : . ' , ; ` | Old stack:
[08:08:26.644] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.644] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:26.645] | : . ' , ; getFutureContext() ... done
[08:08:26.645] | : . ' , getFutureData() ... done
[08:08:26.645] | : . ' , requestCore(..., workers = 2) ...
[08:08:26.646] | : . ' , requestCore(..., workers = 2) ... done
[08:08:26.648] | : . ' , MulticoreFuture started
[08:08:26.649] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:26.649] | : . Launching futures ... done
[08:08:26.644] | : . ' , ; ` | List of 1
[08:08:26.644] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.644] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.644] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.644] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:26.644] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.644] | : . ' , ; ` |     ...)  
[08:08:26.644] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.644] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.644] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:26.644] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.644] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.644] | : . ' , ; ` |     ...)  
[08:08:26.644] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.644] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.649] | : . ' , ; ` | Not identical
[08:08:26.649] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:26.649] | : . ' , ; ` | all.equal() for future ...
[08:08:26.650] | : Using MulticoreFutureBackend ... done
[08:08:26.650] | run() for ‘Future’ (<unnamed-74>) ... done
[08:08:26.650] future(..., label = NULL) ... done
[08:08:26.651] future(..., label = NULL) ...
[08:08:26.651] | lazy: FALSE
[08:08:26.652] | stdout: TRUE
[08:08:26.652] | conditions: [n=1] ‘condition’
[08:08:26.652] | gc: FALSE
[08:08:26.652] | earlySignal: FALSE
[08:08:26.653] | getGlobalsAndPackages() ...
[08:08:26.653] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.653] | : Searching for globals ...
[08:08:26.653] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:26.653] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.654] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:26.654] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:26.655] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:26.655] | : . ' , ; ` | New stack:
[08:08:26.650] | : . ' , ; ` | : List of 2
[08:08:26.650] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.650] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.650] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:26.650] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.650] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.650] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.650] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.650] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.650] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.650] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.650] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:26.650] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.650] | : . ' , ; ` | :     ...)  
[08:08:26.650] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.650] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.650] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:26.650] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.650] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.650] | : . ' , ; ` | :     ...)  
[08:08:26.650] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.657] | : . ' , ; ` | : Formals differ
[08:08:26.657] | : . ' , ; ` | all.equal() for future ... done
[08:08:26.657] | : . ' , ; ` | Future strategies differ at level 1
[08:08:26.658] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:26.658] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:26.658] | : . ' , ; ` List of future strategies:
[08:08:26.658] | : . ' , ; ` 1. sequential:
[08:08:26.658] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:26.658] | : . ' , ; `    - tweaked: FALSE
[08:08:26.658] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.655] | : . ' , ; ` | List of 1
[08:08:26.655] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.655] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.655] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:26.655] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.655] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.655] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.655] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.655] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.661] | : . ' , ; ` | Old stack:
[08:08:26.661] | : . globals found: [1] ‘{’
[08:08:26.661] | : Searching for globals ... done
[08:08:26.662] | : Resolving globals: FALSE
[08:08:26.662] | : Search for packages associated with the globals ...
[08:08:26.659] | : . ' , ; ` List of 1
[08:08:26.659] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.659] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.659] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:26.659] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.659] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.659] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.659] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.659] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.662] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:26.662] | : . Packages associated with globals: [1] ‘base’
[08:08:26.663] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:26.663] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.663] | : . Packages: [1] ‘base’
[08:08:26.663] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:26.663] | : Search for packages associated with the globals ... done
[08:08:26.663] | : Packages after dropping 'base': [0] 
[08:08:26.664] | : globals: [0] 
[08:08:26.664] | : packages: [0] 
[08:08:26.664] | getGlobalsAndPackages() ... done
[08:08:26.665] | run() for ‘Future’ (<unnamed-75>) ...
[08:08:26.665] | : state: ‘created’
[08:08:26.665] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.665] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.666] | : Using MulticoreFutureBackend ...
[08:08:26.666] | : . Number of futures since start: 14 (14 created, 14 launched, 16 finished)
[08:08:26.663] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.663] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.663] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:26.663] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.663] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.663] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.663] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.666] | : . Launching futures ...
[08:08:26.666] | : . ' , ; ` | : init: TRUE
[08:08:26.666] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:26.666] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:26.666] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:26.667] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:26.667] | : . ' , getFutureData() ...
[08:08:26.667] | : . ' , ; getFutureCore() ...
[08:08:26.667] | : . ' , ; ` | : .  list()
[08:08:26.667] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:26.667] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:26.667] | : . ' , ; getFutureCore() ... done
[08:08:26.667] | : . ' , ; ` | : .  list()
[08:08:26.667] | : . ' , ; getFutureCapture() ...
[08:08:26.668] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:26.668] | : . ' , ; getFutureCapture() ... done
[08:08:26.668] | : . ' , ; getFutureContext() ...
[08:08:26.668] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.668] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:26.661] | : . ' , ; ` | List of 1
[08:08:26.661] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.661] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.661] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.661] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:26.661] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.661] | : . ' , ; ` |     ...)  
[08:08:26.661] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.661] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.661] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:26.661] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.661] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.661] | : . ' , ; ` |     ...)  
[08:08:26.661] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.661] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.669] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.669] | : . ' , ; ` | Not identical
[08:08:26.669] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:26.669] | : . ' , ; ` | all.equal() for future ...
[08:08:26.668] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:26.668] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:26.668] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:26.669] | : . ' , ; getFutureContext() ... done
[08:08:26.669] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:26.669] | : . ' , getFutureData() ... done
[08:08:26.670] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:26.670] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:26.670] | : . ' , requestCore(..., workers = 2) ...
[08:08:26.670] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.670] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:26.670] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:26.670] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.670] | : . ' , ; Poll #1 (0): usedCores() = 2, workers = 2
[08:08:26.674] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:26.674] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:26.674] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:26.674] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:26.674] | : . ' , ; ` | : New stack:
[08:08:26.669] | : . ' , ; ` | : List of 2
[08:08:26.669] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.669] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.669] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:26.669] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.669] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.669] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.669] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.669] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.669] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.669] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.669] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:26.669] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.669] | : . ' , ; ` | :     ...)  
[08:08:26.669] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.669] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.669] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:26.669] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.669] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.669] | : . ' , ; ` | :     ...)  
[08:08:26.669] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.677] | : . ' , ; ` | : Formals differ
[08:08:26.678] | : . ' , ; ` | all.equal() for future ... done
[08:08:26.678] | : . ' , ; ` | Future strategies differ at level 1
[08:08:26.678] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:26.678] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:26.678] | : . ' , ; ` List of future strategies:
[08:08:26.678] | : . ' , ; ` 1. sequential:
[08:08:26.678] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:26.678] | : . ' , ; `    - tweaked: FALSE
[08:08:26.678] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.675] | : . ' , ; ` | : List of 1
[08:08:26.675] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.675] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.675] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.675] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:26.675] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.675] | : . ' , ; ` | :     ...)  
[08:08:26.675] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.675] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.675] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:26.675] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.675] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.675] | : . ' , ; ` | :     ...)  
[08:08:26.675] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.675] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.680] | : . ' , ; ` | : Old stack:
[08:08:26.679] | : . ' , ; ` List of 1
[08:08:26.679] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.679] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.679] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:26.679] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.679] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.679] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.679] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.679] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.683] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:26.683] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:26.683] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.684] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:26.680] | : . ' , ; ` | : List of 1
[08:08:26.680] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.680] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.680] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:26.680] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.680] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.680] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.680] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.680] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643022d2ee8> 
[08:08:26.680] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.680] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.680] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.685] | : . ' , ; ` | : Not identical
[08:08:26.685] | : . ' , ; ` | : all.equal() for future ...
[08:08:26.684] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.684] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.684] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:26.684] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.684] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.684] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.684] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.687] | : . ' , ; ` | : init: TRUE
[08:08:26.687] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:26.687] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:26.687] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:26.688] | : . ' , ; ` | : .  list()
[08:08:26.688] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:26.688] | : . ' , ; ` | : .  list()
[08:08:26.688] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:26.689] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:26.689] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:26.689] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:26.690] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:26.691] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:26.691] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:26.691] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.691] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:26.691] | : . ' , ; readImmediateCondition() ...
[08:08:26.691] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:26.692] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.691] | : . ' , ; ` Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.692] | : . ' , ; ` Number of RDS files: 0
[08:08:26.692] | : . ' , ; ` Returned conditions set:
[08:08:26.692] | : . ' , ; `  list()
[08:08:26.693] | : . ' , ; readImmediateCondition() ... done
[08:08:26.695] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:26.695] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:26.695] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:26.696] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:26.696] | : . ' , ; ` | : New stack:
[08:08:26.685] | : . ' , ; ` | : . List of 2
[08:08:26.685] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.685] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.685] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.685] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:26.685] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.685] | : . ' , ; ` | : .     ...)  
[08:08:26.685] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.685] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.685] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:26.685] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.685] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.685] | : . ' , ; ` | : .     ...)  
[08:08:26.685] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.685] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.685] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.685] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:26.685] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.685] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.685] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.685] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.685] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643022d2ee8> 
[08:08:26.685] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.685] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.697] | : . ' , ; ` | : . Formals differ
[08:08:26.697] | : . ' , ; ` | : all.equal() for future ... done
[08:08:26.697] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:26.697] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:26.698] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:26.698] | : . ' , ; ` | List of future strategies:
[08:08:26.698] | : . ' , ; ` | 1. multicore:
[08:08:26.698] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:26.698] | : . ' , ; ` |    - tweaked: FALSE
[08:08:26.698] | : . ' , ; ` |    - call: plan(strategy)
[08:08:26.696] | : . ' , ; ` | : List of 1
[08:08:26.696] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.696] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.696] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.696] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:26.696] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.696] | : . ' , ; ` | :     ...)  
[08:08:26.696] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.696] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.696] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:26.696] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.696] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.696] | : . ' , ; ` | :     ...)  
[08:08:26.696] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.696] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.702] | : . ' , ; ` | : Old stack:
[08:08:26.698] | : . ' , ; ` | List of 1
[08:08:26.698] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.698] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.698] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.698] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:26.698] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.698] | : . ' , ; ` |     ...)  
[08:08:26.698] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.698] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.698] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:26.698] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.698] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.698] | : . ' , ; ` |     ...)  
[08:08:26.698] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.698] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.703] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:26.703] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:26.703] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.703] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.703] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:26.703] | : . ' , ; readImmediateCondition() ...
[08:08:26.703] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:26.703] | : . ' , ; ` Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.704] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.704] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.704] | : . ' , ; ` Number of RDS files: 0
[08:08:26.704] | : . ' , ; ` Returned conditions set:
[08:08:26.704] | : . ' , ; `  list()
[08:08:26.705] | : . ' , ; readImmediateCondition() ... done
[08:08:26.705] | : . ' , ; Poll #2 (0.03 secs): usedCores() = 2, workers = 2
[08:08:26.702] | : . ' , ; ` | : List of 1
[08:08:26.702] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.702] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.702] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:26.702] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.702] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.702] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.702] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.702] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018081d8> 
[08:08:26.702] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.702] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.702] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.710] | : . ' , ; ` | : Not identical
[08:08:26.710] | : . ' , ; ` | : all.equal() for future ...
[08:08:26.716] | : . ' , ; readImmediateCondition() ...
[08:08:26.716] | : . ' , ; ` Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.717] | : . ' , ; ` Number of RDS files: 0
[08:08:26.717] | : . ' , ; ` Returned conditions set:
[08:08:26.717] | : . ' , ; `  list()
[08:08:26.718] | : . ' , ; readImmediateCondition() ... done
[08:08:26.718] | : . ' , ; value() for MulticoreFuture (<unnamed-73>) ...
[08:08:26.718] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:26.710] | : . ' , ; ` | : . List of 2
[08:08:26.710] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.710] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.710] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.710] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:26.710] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.710] | : . ' , ; ` | : .     ...)  
[08:08:26.710] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.710] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.710] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:26.710] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.710] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.710] | : . ' , ; ` | : .     ...)  
[08:08:26.710] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.710] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.710] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.710] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:26.710] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.710] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.710] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.710] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.710] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643018081d8> 
[08:08:26.710] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.710] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.719] | : . ' , ; ` | readImmediateCondition() ...
[08:08:26.719] | : . ' , ; ` | : . Formals differ
[08:08:26.719] | : . ' , ; ` | : Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.719] | : . ' , ; ` | : all.equal() for future ... done
[08:08:26.720] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:26.720] | : . ' , ; ` | : Number of RDS files: 0
[08:08:26.720] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:26.720] | : . ' , ; ` | : Returned conditions set:
[08:08:26.720] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:26.720] | : . ' , ; ` | :  list()
[08:08:26.721] | : . ' , ; ` | readImmediateCondition() ... done
[08:08:26.720] | : . ' , ; ` | List of future strategies:
[08:08:26.720] | : . ' , ; ` | 1. multicore:
[08:08:26.720] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:26.720] | : . ' , ; ` |    - tweaked: FALSE
[08:08:26.720] | : . ' , ; ` |    - call: plan(strategy)
[08:08:26.721] | : . ' , ; ` | result() for MulticoreFuture ...
[08:08:26.721] | : . ' , ; ` | result() for MulticoreFuture ... done
[08:08:26.722] | : . ' , ; ` | signalConditions() ...
[08:08:26.722] | : . ' , ; ` | : include = ‘immediateCondition’
[08:08:26.722] | : . ' , ; ` | : exclude = 
[08:08:26.722] | : . ' , ; ` | : resignal = FALSE
[08:08:26.722] | : . ' , ; ` | : Number of conditions: 6
[08:08:26.723] | : . ' , ; ` | :  int 6
[08:08:26.723] | : . ' , ; ` | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.724] | : . ' , ; ` | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.724] | : . ' , ; ` | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.724] | : . ' , ; ` | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.724] | : . ' , ; ` | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.725] | : . ' , ; ` | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.725] | : . ' , ; ` | signalConditions() ... done
[08:08:26.725] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:26.725] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:26.726] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:26.726] | : . ' , ; ` signalConditions() ...
[08:08:26.726] | : . ' , ; ` | include = ‘immediateCondition’
[08:08:26.726] | : . ' , ; ` | exclude = 
[08:08:26.726] | : . ' , ; ` | resignal = FALSE
[08:08:26.727] | : . ' , ; ` | Number of conditions: 6
[08:08:26.727] | : . ' , ; ` |  int 6
[08:08:26.727] | : . ' , ; ` | Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.728] | : . ' , ; ` | Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.721] | : . ' , ; ` | List of 1
[08:08:26.721] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.721] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.721] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.721] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:26.721] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.721] | : . ' , ; ` |     ...)  
[08:08:26.721] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.721] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.721] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:26.721] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.721] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.721] | : . ' , ; ` |     ...)  
[08:08:26.721] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.721] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.728] | : . ' , ; ` | Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.728] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:26.728] | : . ' , ; ` | Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.728] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:26.728] | : . ' , ; ` | Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.728] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.729] | : . ' , ; ` | Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.729] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.729] | : . ' , ; ` signalConditions() ... done
[08:08:26.729] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:26.729] | : . ' , ; ` check for misuse ...
[08:08:26.729] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:26.729] | : . ' , ; ` check for misuse ... done
[08:08:26.729] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.730] | : . ' , ; value() for MulticoreFuture (<unnamed-73>) ... done
[08:08:26.730] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.730] | : . ' , requestCore(..., workers = 2) ... done
[08:08:26.733] | : . ' , MulticoreFuture started
[08:08:26.733] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:26.733] | : . Launching futures ... done
[08:08:26.734] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:26.734] | : Using MulticoreFutureBackend ... done
[08:08:26.734] | run() for ‘Future’ (<unnamed-75>) ... done
[08:08:26.734] future(..., label = NULL) ... done
<environment: 0x564304289b20> 
<environment: 0x564301d6e908> 
[08:08:26.736] resolved() for environment ...
[08:08:26.736] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.736] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:26.737] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.737] | resolved() for list ...
[08:08:26.737] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:26.737] | : Number of elements: 4
[08:08:26.737] | : Number of futures: 4
[08:08:26.738] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:26.738] | : readImmediateCondition() ...
[08:08:26.738] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:26.738] | : . Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.738] | : . ' , ; ` | New stack:
[08:08:26.738] | : . Number of RDS files: 0
[08:08:26.739] | : . Returned conditions set:
[08:08:26.739] | : .  list()
[08:08:26.739] | : readImmediateCondition() ... done
[08:08:26.738] | : . ' , ; ` | List of 1
[08:08:26.738] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.738] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.738] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:26.738] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.738] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.738] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.738] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.738] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.744] | : . ' , ; ` | Old stack:
[08:08:26.750] | : readImmediateCondition() ...
[08:08:26.750] | : . Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.744] | : . ' , ; ` | List of 1
[08:08:26.744] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.744] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.744] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.744] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:26.744] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.744] | : . ' , ; ` |     ...)  
[08:08:26.744] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.744] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.744] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:26.744] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.744] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.744] | : . ' , ; ` |     ...)  
[08:08:26.744] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.744] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.750] | : . Number of RDS files: 0
[08:08:26.750] | : . ' , ; ` | Not identical
[08:08:26.750] | : . Returned conditions set:
[08:08:26.750] | : . ' , ; ` | all.equal() for future ...
[08:08:26.750] | : .  list()
[08:08:26.751] | : readImmediateCondition() ... done
[08:08:26.751] | resolved() for list ... done
[08:08:26.751] resolved() for environment ... done
 Named logi [1:4] TRUE TRUE TRUE FALSE
 - attr(*, "names")= chr [1:4] "a" "b" "c" "d"
[08:08:26.752] value() for MulticoreFuture (<unnamed-75>) ...
[08:08:26.752] | result() for MulticoreFuture ...
[08:08:26.751] | : . ' , ; ` | : List of 2
[08:08:26.751] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.751] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.751] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:26.751] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.751] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.751] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.751] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.751] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.751] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.751] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.751] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:26.751] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.751] | : . ' , ; ` | :     ...)  
[08:08:26.751] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.751] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.751] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:26.751] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.751] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.751] | : . ' , ; ` | :     ...)  
[08:08:26.751] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.766] | : . ' , ; ` | : Formals differ
[08:08:26.766] | : . ' , ; ` | all.equal() for future ... done
[08:08:26.766] | : . ' , ; ` | Future strategies differ at level 1
[08:08:26.766] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:26.766] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:26.767] | : . ' , ; ` List of future strategies:
[08:08:26.767] | : . ' , ; ` 1. sequential:
[08:08:26.767] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:26.767] | : . ' , ; `    - tweaked: FALSE
[08:08:26.767] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.767] | : . ' , ; ` List of 1
[08:08:26.767] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.767] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.767] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:26.767] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.767] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.767] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.767] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.767] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.772] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:26.772] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:26.772] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.772] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:26.773] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.773] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.773] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:26.773] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.773] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.773] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.773] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.776] | : . ' , ; ` | : init: TRUE
[08:08:26.776] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:26.776] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:26.776] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:26.776] | : . ' , ; ` | : .  list()
[08:08:26.777] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:26.777] | : . ' , ; ` | : .  list()
[08:08:26.777] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:26.778] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:26.778] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:26.778] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:26.779] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:26.780] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:26.780] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:26.780] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.780] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:26.780] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:26.781] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.784] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:26.784] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:26.784] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:26.785] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:26.785] | : . ' , ; ` | : New stack:
[08:08:26.785] | : . ' , ; ` | : List of 1
[08:08:26.785] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.785] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.785] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.785] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:26.785] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.785] | : . ' , ; ` | :     ...)  
[08:08:26.785] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.785] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.785] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:26.785] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.785] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.785] | : . ' , ; ` | :     ...)  
[08:08:26.785] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.785] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.789] | : . ' , ; ` | : Old stack:
[08:08:26.790] | : . ' , ; ` | : List of 1
[08:08:26.790] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.790] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.790] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:26.790] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.790] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.790] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.790] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.790] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56430345e6e0> 
[08:08:26.790] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.790] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.790] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.794] | : . ' , ; ` | : Not identical
[08:08:26.794] | : . ' , ; ` | : all.equal() for future ...
[08:08:26.794] | : . ' , ; ` | : . List of 2
[08:08:26.794] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.794] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.794] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.794] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:26.794] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.794] | : . ' , ; ` | : .     ...)  
[08:08:26.794] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.794] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.794] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:26.794] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.794] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.794] | : . ' , ; ` | : .     ...)  
[08:08:26.794] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.794] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.794] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:26.794] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:26.794] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.794] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.794] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.794] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:26.794] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56430345e6e0> 
[08:08:26.794] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:26.794] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:26.802] | : . ' , ; ` | : . Formals differ
[08:08:26.802] | : . ' , ; ` | : all.equal() for future ... done
[08:08:26.803] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:26.803] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:26.803] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:26.803] | : . ' , ; ` | List of future strategies:
[08:08:26.803] | : . ' , ; ` | 1. multicore:
[08:08:26.803] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:26.803] | : . ' , ; ` |    - tweaked: FALSE
[08:08:26.803] | : . ' , ; ` |    - call: plan(strategy)
[08:08:26.803] | : . ' , ; ` | List of 1
[08:08:26.803] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.803] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.803] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.803] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:26.803] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.803] | : . ' , ; ` |     ...)  
[08:08:26.803] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.803] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.803] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:26.803] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.803] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.803] | : . ' , ; ` |     ...)  
[08:08:26.803] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.803] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.808] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:26.808] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:26.808] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.809] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.809] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:26.809] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:26.809] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.809] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:26.810] | : readImmediateCondition() ...
[08:08:26.810] | : . Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.810] | : . Number of RDS files: 0
[08:08:26.810] | : . Returned conditions set:
[08:08:26.811] | : .  list()
[08:08:26.811] | : readImmediateCondition() ... done
[08:08:26.811] | : result() for MulticoreFuture ...
[08:08:26.812] | : result() for MulticoreFuture ... done
[08:08:26.812] | : signalConditions() ...
[08:08:26.812] | : . include = ‘immediateCondition’
[08:08:26.812] | : . exclude = 
[08:08:26.812] | : . resignal = FALSE
[08:08:26.812] | : . Number of conditions: 6
[08:08:26.812] | : .  int 6
[08:08:26.813] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.813] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.813] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.813] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.814] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.814] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.814] | : signalConditions() ... done
[08:08:26.814] | result() for MulticoreFuture ... done
[08:08:26.814] | result() for MulticoreFuture ...
[08:08:26.814] | result() for MulticoreFuture ... done
[08:08:26.814] | signalConditions() ...
[08:08:26.815] | : include = ‘immediateCondition’
[08:08:26.815] | : exclude = 
[08:08:26.815] | : resignal = FALSE
[08:08:26.815] | : Number of conditions: 6
[08:08:26.815] | :  int 6
[08:08:26.816] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.816] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.816] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.816] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.816] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.816] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.817] | signalConditions() ... done
[08:08:26.817] | relay stdout ...
[08:08:26.817] | relay stdout ... done
[08:08:26.817] | check for misuse ...
[08:08:26.817] | check for misuse ... done
[08:08:26.817] | relay conditions ...
[08:08:26.818] | : Future state: ‘finished’
[08:08:26.818] | : result() for MulticoreFuture ...
[08:08:26.818] | : result() for MulticoreFuture ... done
[08:08:26.818] | : signalConditions() ...
[08:08:26.818] | : . include = ‘condition’
[08:08:26.818] | : . exclude = ‘immediateCondition’
[08:08:26.818] | : . resignal = TRUE
[08:08:26.818] | : . Number of conditions: 6
[08:08:26.819] | : .  int 6
[08:08:26.821] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.822] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.733] | : . ' , attachPackages() ...
[08:08:26.822] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.822] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.734] | : . ' , ; packages: [n=1] ‘future’
[08:08:26.822] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.822] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.734] | : . ' , attachPackages() ... done
[08:08:26.822] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.822] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.735] | : . ' , attachPackages() ...
[08:08:26.823] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.823] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.735] | : . ' , ; packages: [n=0] 
[08:08:26.823] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.823] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.735] | : . ' , attachPackages() ... done
[08:08:26.823] | : signalConditions() ... done
[08:08:26.823] | relay conditions ... done
[08:08:26.823] value() for MulticoreFuture (<unnamed-75>) ... done
[08:08:26.824] value() for listenv ...
[08:08:26.824] | recursive: 0
[08:08:26.824] | reduce: FALSE
[08:08:26.825] | length: 4
[08:08:26.825] | elements: ‘a’, ‘b’, ‘c’, ‘d’
[08:08:26.825] | Number of remaining objects: 4
[08:08:26.825] | checking value #1:
[08:08:26.825] | 'obj' is atomic
[08:08:26.826] | signalConditionsASAP(numeric, pos=1) ...
[08:08:26.826] | : nx: 4
[08:08:26.826] | : relay: TRUE
[08:08:26.826] | : stdout: TRUE
[08:08:26.826] | : signal: TRUE
[08:08:26.826] | : resignal: FALSE
[08:08:26.826] | : force: TRUE
[08:08:26.826] | : relayed: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:26.826] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:26.827] | : until=2
[08:08:26.827] | : relaying element #2
[08:08:26.827] | : relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:26.827] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:26.827] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:26.827] | length: 3 (resolved future 1)
[08:08:26.827] value() for listenv ... done
[08:08:26.828] checking value #2:
[08:08:26.828] 'obj' is MulticoreFuture
[08:08:26.828] MulticoreFuture #2
[08:08:26.828] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:26.828] | nx: 4
[08:08:26.828] | relay: TRUE
[08:08:26.828] | stdout: TRUE
[08:08:26.828] | signal: TRUE
[08:08:26.828] | resignal: FALSE
[08:08:26.829] | force: TRUE
[08:08:26.829] | relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:26.829] | queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:26.829] | until=2
[08:08:26.829] | relaying element #2
[08:08:26.829] | value() for MulticoreFuture (<unnamed-73>) ...
[08:08:26.829] | : result() for MulticoreFuture ...
[08:08:26.829] | : result() for MulticoreFuture ... done
[08:08:26.830] | : result() for MulticoreFuture ...
[08:08:26.830] | : result() for MulticoreFuture ... done
[08:08:26.830] | : signalConditions() ...
[08:08:26.830] | : . include = ‘immediateCondition’
[08:08:26.830] | : . exclude = 
[08:08:26.830] | : . resignal = FALSE
[08:08:26.830] | : . Number of conditions: 6
[08:08:26.830] | : .  int 6
[08:08:26.831] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.831] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.831] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.831] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.831] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.831] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.832] | : signalConditions() ... done
[08:08:26.832] | : relay stdout ...
[08:08:26.832] | : relay stdout ... done
[08:08:26.832] | : check for misuse ...
[08:08:26.832] | : check for misuse ... done
[08:08:26.832] | value() for MulticoreFuture (<unnamed-73>) ... done
[08:08:26.832] | result() for MulticoreFuture ...
[08:08:26.832] | result() for MulticoreFuture ... done
[08:08:26.833] | signalConditions() ...
[08:08:26.833] | : include = ‘immediateCondition’
[08:08:26.833] | : exclude = 
[08:08:26.833] | : resignal = FALSE
[08:08:26.833] | : Number of conditions: 6
[08:08:26.833] | :  int 6
[08:08:26.834] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.834] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.834] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.834] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.834] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.834] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.834] | signalConditions() ... done
[08:08:26.834] | result() for MulticoreFuture ...
[08:08:26.835] | result() for MulticoreFuture ... done
[08:08:26.835] | signalConditions() ...
[08:08:26.835] | : include = ‘condition’
[08:08:26.835] | : exclude = ‘error’, ‘immediateCondition’
[08:08:26.835] | : resignal = TRUE
[08:08:26.835] | : Number of conditions: 6
[08:08:26.835] | :  int 6
[08:08:26.836] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.836] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.636] | : . ' , attachPackages() ...
[08:08:26.836] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.836] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.637] | : . ' , ; packages: [n=1] ‘future’
[08:08:26.836] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.836] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.637] | : . ' , attachPackages() ... done
[08:08:26.837] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.837] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.637] | : . ' , attachPackages() ...
[08:08:26.837] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.837] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.638] | : . ' , ; packages: [n=0] 
[08:08:26.837] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.837] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.638] | : . ' , attachPackages() ... done
[08:08:26.838] | signalConditions() ... done
[08:08:26.838] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:26.838] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:26.838] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:26.838] value(<MulticoreFuture>, ...) ...
[08:08:26.838] value(<MulticoreFuture>, ...) ... done
[08:08:26.838] value() for MulticoreFuture (<unnamed-73>) ...
[08:08:26.838] | result() for MulticoreFuture ...
[08:08:26.839] | result() for MulticoreFuture ... done
[08:08:26.839] | result() for MulticoreFuture ...
[08:08:26.839] | result() for MulticoreFuture ... done
[08:08:26.839] | signalConditions() ...
[08:08:26.839] | : include = ‘immediateCondition’
[08:08:26.839] | : exclude = 
[08:08:26.839] | : resignal = FALSE
[08:08:26.839] | : Number of conditions: 6
[08:08:26.840] | :  int 6
[08:08:26.840] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.840] | : already signaled, skipping
[08:08:26.840] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.840] | : already signaled, skipping
[08:08:26.841] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.841] | : already signaled, skipping
[08:08:26.841] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.841] | : already signaled, skipping
[08:08:26.841] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.841] | : already signaled, skipping
[08:08:26.841] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.842] | : already signaled, skipping
[08:08:26.842] | signalConditions() ... done
[08:08:26.842] | check for misuse ...
[08:08:26.842] | check for misuse ... done
[08:08:26.842] value() for MulticoreFuture (<unnamed-73>) ... done
[08:08:26.842] value: <numeric>
[08:08:26.842] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:26.843] | nx: 4
[08:08:26.843] | relay: TRUE
[08:08:26.843] | stdout: TRUE
[08:08:26.843] | signal: TRUE
[08:08:26.843] | resignal: FALSE
[08:08:26.843] | force: TRUE
[08:08:26.843] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:26.843] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:26.844] | until=3
[08:08:26.844] | relaying element #3
[08:08:26.844] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:26.844] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:26.844] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:26.844] resolve() for MulticoreFuture ...
[08:08:26.844] resolve() for MulticoreFuture ... done
[08:08:26.845] length: 2 (resolved future 2)

[08:08:26.845] checking value #3:
[08:08:26.845] 'obj' is MulticoreFuture
[08:08:26.845] readImmediateCondition() ...
[08:08:26.845] | Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.845] | Number of RDS files: 0
[08:08:26.846] | Returned conditions set:
[08:08:26.846] |  list()
[08:08:26.846] readImmediateCondition() ... done
[08:08:26.846] MulticoreFuture #3
[08:08:26.846] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:26.846] | nx: 4
[08:08:26.847] | relay: TRUE
[08:08:26.847] | stdout: TRUE
[08:08:26.847] | signal: TRUE
[08:08:26.847] | resignal: FALSE
[08:08:26.847] | force: TRUE
[08:08:26.847] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:26.847] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:26.847] | until=3
[08:08:26.848] | relaying element #3
[08:08:26.848] | value() for MulticoreFuture (<unnamed-74>) ...
[08:08:26.848] | : result() for MulticoreFuture ...
[08:08:26.848] | : . readImmediateCondition() ...
[08:08:26.849] | : . ' Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:26.849] | : . ' Number of RDS files: 0
[08:08:26.849] | : . ' Returned conditions set:
[08:08:26.849] | : . '  list()
[08:08:26.850] | : . readImmediateCondition() ... done
[08:08:26.850] | : . result() for MulticoreFuture ...
[08:08:26.850] | : . result() for MulticoreFuture ... done
[08:08:26.851] | : . signalConditions() ...
[08:08:26.851] | : . ' include = ‘immediateCondition’
[08:08:26.851] | : . ' exclude = 
[08:08:26.851] | : . ' resignal = FALSE
[08:08:26.851] | : . ' Number of conditions: 6
[08:08:26.851] | : . '  int 6
[08:08:26.852] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.852] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.853] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.853] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.853] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.853] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.853] | : . signalConditions() ... done
[08:08:26.854] | : result() for MulticoreFuture ... done
[08:08:26.854] | : result() for MulticoreFuture ...
[08:08:26.854] | : result() for MulticoreFuture ... done
[08:08:26.854] | : signalConditions() ...
[08:08:26.854] | : . include = ‘immediateCondition’
[08:08:26.855] | : . exclude = 
[08:08:26.855] | : . resignal = FALSE
[08:08:26.855] | : . Number of conditions: 6
[08:08:26.855] | : .  int 6
[08:08:26.856] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.856] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.856] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.856] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.856] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.857] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.857] | : signalConditions() ... done
[08:08:26.857] | : relay stdout ...
[08:08:26.857] | : relay stdout ... done
[08:08:26.857] | : check for misuse ...
[08:08:26.857] | : check for misuse ... done
[08:08:26.857] | value() for MulticoreFuture (<unnamed-74>) ... done
[08:08:26.857] | result() for MulticoreFuture ...
[08:08:26.858] | result() for MulticoreFuture ... done
[08:08:26.858] | signalConditions() ...
[08:08:26.858] | : include = ‘immediateCondition’
[08:08:26.858] | : exclude = 
[08:08:26.858] | : resignal = FALSE
[08:08:26.858] | : Number of conditions: 6
[08:08:26.858] | :  int 6
[08:08:26.859] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.859] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.859] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.859] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.859] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.859] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.859] | signalConditions() ... done
[08:08:26.860] | result() for MulticoreFuture ...
[08:08:26.860] | result() for MulticoreFuture ... done
[08:08:26.860] | signalConditions() ...
[08:08:26.860] | : include = ‘condition’
[08:08:26.860] | : exclude = ‘error’, ‘immediateCondition’
[08:08:26.860] | : resignal = TRUE
[08:08:26.860] | : Number of conditions: 6
[08:08:26.860] | :  int 6
[08:08:26.861] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.861] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.649] | : . ' , attachPackages() ...
[08:08:26.861] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.861] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.650] | : . ' , ; packages: [n=1] ‘future’
[08:08:26.861] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.861] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.650] | : . ' , attachPackages() ... done
[08:08:26.862] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.862] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.651] | : . ' , attachPackages() ...
[08:08:26.862] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.862] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.651] | : . ' , ; packages: [n=0] 
[08:08:26.862] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.862] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:26.651] | : . ' , attachPackages() ... done
[08:08:26.863] | signalConditions() ... done
[08:08:26.863] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:26.863] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:26.863] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:26.863] value(<MulticoreFuture>, ...) ...
[08:08:26.863] value(<MulticoreFuture>, ...) ... done
[08:08:26.863] value() for MulticoreFuture (<unnamed-74>) ...
[08:08:26.863] | result() for MulticoreFuture ...
[08:08:26.863] | result() for MulticoreFuture ... done
[08:08:26.864] | result() for MulticoreFuture ...
[08:08:26.864] | result() for MulticoreFuture ... done
[08:08:26.864] | signalConditions() ...
[08:08:26.864] | : include = ‘immediateCondition’
[08:08:26.864] | : exclude = 
[08:08:26.864] | : resignal = FALSE
[08:08:26.864] | : Number of conditions: 6
[08:08:26.865] | :  int 6
[08:08:26.865] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.865] | : already signaled, skipping
[08:08:26.865] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.865] | : already signaled, skipping
[08:08:26.866] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.866] | : already signaled, skipping
[08:08:26.866] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.866] | : already signaled, skipping
[08:08:26.866] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.866] | : already signaled, skipping
[08:08:26.866] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:26.866] | : already signaled, skipping
[08:08:26.867] | signalConditions() ... done
[08:08:26.867] | check for misuse ...
[08:08:26.867] | check for misuse ... done
[08:08:26.867] value() for MulticoreFuture (<unnamed-74>) ... done
[08:08:26.867] value: <NULL>
[08:08:26.867] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:26.867] | nx: 4
[08:08:26.867] | relay: TRUE
[08:08:26.868] | stdout: TRUE
[08:08:26.868] | signal: TRUE
[08:08:26.868] | resignal: FALSE
[08:08:26.868] | force: TRUE
[08:08:26.868] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:26.868] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:26.868] | until=4
[08:08:26.868] | relaying element #4
[08:08:26.868] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:26.869] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:26.869] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:26.869] resolve() for MulticoreFuture ...
[08:08:26.869] resolve() for MulticoreFuture ... done
[08:08:26.869] length: 1 (resolved future 3)

[08:08:26.869] checking value #4:
[08:08:26.869] 'obj' is atomic
[08:08:26.869] signalConditionsASAP(numeric, pos=4) ...
[08:08:26.870] | nx: 4
[08:08:26.870] | relay: TRUE
[08:08:26.870] | stdout: TRUE
[08:08:26.870] | signal: TRUE
[08:08:26.870] | resignal: FALSE
[08:08:26.870] | force: TRUE
[08:08:26.870] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:26.870] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:26.870] | until=4
[08:08:26.870] | relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:26.871] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:26.871] signalConditionsASAP(numeric, pos=4) ... done
[08:08:26.871] length: 0 (resolved future 4)

[08:08:26.871] Relaying remaining futures ...
[08:08:26.871] | signalConditionsASAP(NULL, pos=0) ...
[08:08:26.871] | : nx: 4
[08:08:26.872] | : relay: TRUE
[08:08:26.872] | : stdout: TRUE
[08:08:26.872] | : signal: TRUE
[08:08:26.872] | : resignal: FALSE
[08:08:26.872] | : force: TRUE
[08:08:26.872] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:26.872] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
 - flush all
[08:08:26.872] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:26.872] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:26.873] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:26.873] Relaying remaining futures ... done

List of 4
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
Type of future: multisession
[08:08:26.875] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.875] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:26.875] | : all.equal() for FutureStrategyList ...
[08:08:26.875] | : . New stack:
[08:08:26.875] | : . List of 1
[08:08:26.875] | : .  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:26.875] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.875] | : .   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:26.875] | : .   ..- attr(*, "init")= logi TRUE
[08:08:26.875] | : .   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:26.875] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:26.875] | : .   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:26.875] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:26.875] | : .   ..- attr(*, "untweakable")= chr "persistent"
[08:08:26.875] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:26.875] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.879] | : . Old stack:
[08:08:26.879] | : . List of 1
[08:08:26.879] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.879] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.879] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.879] | : .   ..- attr(*, "init")= chr "done"
[08:08:26.879] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.879] | : .     ...)  
[08:08:26.879] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.879] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.879] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:26.879] | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.879] | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.879] | : .     ...)  
[08:08:26.879] | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.879] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.883] | : . Not identical
[08:08:26.883] | : . all.equal() for future ...
[08:08:26.883] | : . ' List of 2
[08:08:26.883] | : . '  $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:26.883] | : . '     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.883] | : . '   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:26.883] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:26.883] | : . '   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:26.883] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:26.883] | : . '   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:26.883] | : . '   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:26.883] | : . '   ..- attr(*, "untweakable")= chr "persistent"
[08:08:26.883] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:26.883] | : . '  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:26.883] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:08:26.883] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:26.883] | : . '   ..- attr(*, "init")= chr "done"
[08:08:26.883] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.883] | : . '     ...)  
[08:08:26.883] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.883] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.883] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:26.883] | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303b24c18> 
[08:08:26.883] | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:26.883] | : . '     ...)  
[08:08:26.883] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:26.889] | : . ' Formals differ
[08:08:26.889] | : . all.equal() for future ... done
[08:08:26.890] | : . Future strategies differ at level 1
[08:08:26.890] | : all.equal() for FutureStrategyList ... done
[08:08:26.890] | : plan(): Setting new future backend stack:
[08:08:26.890] | : List of future strategies:
[08:08:26.890] | : 1. multisession:
[08:08:26.890] | :    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:26.890] | :    - tweaked: FALSE
[08:08:26.890] | :    - call: plan(strategy)
[08:08:26.890] | : List of 1
[08:08:26.890] | :  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:26.890] | :     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.890] | :   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:26.890] | :   ..- attr(*, "init")= logi TRUE
[08:08:26.890] | :   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:26.890] | :     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:26.890] | :   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:26.890] | :   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:26.890] | :   ..- attr(*, "untweakable")= chr "persistent"
[08:08:26.890] | :   ..- attr(*, "call")= language plan(strategy)
[08:08:26.890] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:26.893] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:08:26.894] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:26.894] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:26.894] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:26.894] | : . Legacy shutdown of cluster workers ...
[08:08:26.895] | : . ' Stopping existing cluster ...
[08:08:26.895] | : . ' , No pre-existing cluster. Skipping
[08:08:26.895] | : . ' Stopping existing cluster ... done
[08:08:26.895] | : . Legacy shutdown of cluster workers ... done
[08:08:26.895] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:08:26.895] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:08:26.895] | : . function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:26.895] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:26.895] | : .  - attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:26.895] | : .  - attr(*, "init")= logi TRUE
[08:08:26.895] | : .  - attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:26.895] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:26.895] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:26.895] | : .  - attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:26.895] | : .  - attr(*, "untweakable")= chr "persistent"
[08:08:26.895] | : .  - attr(*, "call")= language plan(strategy)
[08:08:26.898] | : . init: TRUE
[08:08:26.898] | : . makeFutureBackend(<multisession>) ...
[08:08:26.898] | : . ' Backend function: <‘NULL’>
[08:08:26.898] | : . ' Evaluator tweak arguments: [n=0]
[08:08:26.898] | : . '  list()
[08:08:26.898] | : . ' Evaluator formal arguments: [n=4]
[08:08:26.898] | : . '  list()
[08:08:26.899] | : . ' Backend factory arguments: [n=4]
[08:08:26.899] | : . ' Dotted pair list of 4
[08:08:26.899] | : . '  $ workers     : language availableCores()
[08:08:26.899] | : . '  $ rscript_libs: language .libPaths()
[08:08:26.899] | : . '  $ gc          : logi FALSE
[08:08:26.899] | : . '  $ earlySignal : logi FALSE
[08:08:26.913] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ...
[08:08:26.913] | : . ' , Arguments:
[08:08:26.913] | : . ' , List of 5
[08:08:26.913] | : . ' ,  $ workers     : Named int 2
[08:08:26.913] | : . ' ,   ..- attr(*, "names")= chr "mc.cores"
[08:08:26.913] | : . ' ,  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:26.913] | : . ' ,  $ interrupts  : logi TRUE
[08:08:26.913] | : . ' ,  $ gc          : logi FALSE
[08:08:26.913] | : . ' ,  $ earlySignal : logi FALSE
[08:08:26.917] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ...
[08:08:26.917] | : . ' , ; workers: 2
[08:08:26.917] | : . ' , ; getCluster() ...
[08:08:26.917] | : . ' , ; getCluster() ... done
[08:08:26.917] | : . ' , ; Stopping existing cluster ...
[08:08:26.917] | : . ' , ; ` No pre-existing cluster. Skipping
[08:08:26.918] | : . ' , ; Stopping existing cluster ... done
[08:08:26.918] | : . ' , ; Starting new cluster ...
[08:08:26.918] | : . ' , ; ` makeCluster(workers, ...) ...
[08:08:26.918] | : . ' , ; ` | Arguments:
[08:08:26.918] | : . ' , ; ` | List of 2
[08:08:26.918] | : . ' , ; ` |  $             : int 2
[08:08:26.918] | : . ' , ; ` |  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:26.919] | : . ' , ; ` | .makeCluster() ...
[08:08:26.919] | : . ' , ; ` | : workers: ‘2’
[08:08:26.919] | : . ' , ; ` | : R_FUTURE_PLAN: NA
[08:08:26.919] | : . ' , ; ` | : parallelly::makeClusterPSOCK() arguments:
[08:08:26.919] | : . ' , ; ` | : List of 2
[08:08:26.919] | : . ' , ; ` | :  $             : int 2
[08:08:26.919] | : . ' , ; ` | :  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:27.194] | : . ' , ; ` | : Generated cluster UUID
[08:08:27.194] | : . ' , ; ` | : Cluster UUID: ‘ebcf5645fe5296532f48b425138b7006’
[08:08:27.194] | : . ' , ; ` | : Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:27.196] | : . ' , ; ` | .makeCluster() ... done
[08:08:27.196] | : . ' , ; ` | Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:27.197] | : . ' , ; ` makeCluster(workers, ...) ... done
[08:08:27.197] | : . ' , ; ` Number of workers: 2
[08:08:27.197] | : . ' , ; ` Workers UUID: ‘ebcf5645fe5296532f48b425138b7006’
[08:08:27.198] | : . ' , ; Starting new cluster ... done
[08:08:27.198] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ... done
[08:08:27.198] | : . ' , Backend: <‘MultisessionFutureBackend’, ‘ClusterFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:27.198] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ... done
[08:08:27.198] | : . makeFutureBackend(<multisession>) ... done
[08:08:27.198] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:27.198] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:27.198] | : . plan(): nbrOfWorkers() = 2
[08:08:27.199] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:08:27.199] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
Dimensions: NULL
[08:08:27.199] | future(..., label = NULL) ...
[08:08:27.199] | : lazy: FALSE
[08:08:27.199] | : stdout: TRUE
[08:08:27.199] | : conditions: [n=1] ‘condition’
[08:08:27.199] | : gc: FALSE
[08:08:27.199] | : earlySignal: FALSE
[08:08:27.199] | : getGlobalsAndPackages() ...
[08:08:27.200] | : . Searching for globals ...
[08:08:27.201] | : . ' globals found: [0] 
[08:08:27.201] | : . Searching for globals ... done
[08:08:27.201] | : . globals: [0] <none>
[08:08:27.201] | : . packages: [0] <none>
[08:08:27.201] | : getGlobalsAndPackages() ... done
[08:08:27.201] | : run() for ‘Future’ (<unnamed-76>) ...
[08:08:27.202] | : . state: ‘created’
[08:08:27.202] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:27.202] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:27.202] | : . Using MultisessionFutureBackend ...
[08:08:27.202] | : . ' Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:27.202] | : . ' Launching futures ...
[08:08:27.202] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:27.202] | : . ' , ; Workers: [n=2]
[08:08:27.203] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:27.204] | : . ' , ; FutureRegistry: ‘workers-ebcf5645fe5296532f48b425138b7006’
[08:08:27.204] | : . ' , ; requestWorker() ...
[08:08:27.204] | : . ' , ; ` requestNode() ...
[08:08:27.204] | : . ' , ; ` | Number of workers: 2
[08:08:27.204] | : . ' , ; ` | Polling for a free worker ...
[08:08:27.205] | : . ' , ; ` | : FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:27.205] | : . ' , ; ` | : . Created empty registry ‘workers-ebcf5645fe5296532f48b425138b7006’
[08:08:27.205] | : . ' , ; ` | : . Listing all futures
[08:08:27.205] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:27.205] | : . ' , ; ` | : FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:27.205] | : . ' , ; ` | : Total time: 0
[08:08:27.205] | : . ' , ; ` | Polling for a free worker ... done
[08:08:27.205] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:27.205] | : . ' , ; ` | : Listing all futures
[08:08:27.205] | : . ' , ; ` | : Number of registered futures: 0
[08:08:27.205] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:27.206] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:27.206] | : . ' , ; ` | Index of first available worker: 1
[08:08:27.206] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:27.268] | : . ' , ; ` | : Worker is functional
[08:08:27.268] | : . ' , ; ` | : FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:27.269] | : . ' , ; ` | : . Listing all futures
[08:08:27.269] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:27.269] | : . ' , ; ` | : FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:27.269] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:27.269] | : . ' , ; ` requestNode() ... done
[08:08:27.269] | : . ' , ; ` cluster node index: 1
[08:08:27.269] | : . ' , ; requestWorker() ... done
[08:08:27.269] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:27.270] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:27.270] | : . ' , ; launchFuture() ...
[08:08:27.270] | : . ' , ; ` cluster node index: 1
[08:08:27.270] | : . ' , ; ` getFutureData() ...
[08:08:27.271] | : . ' , ; ` | getFutureCore() ...
[08:08:27.271] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:27.271] | : . ' , ; ` | getFutureCore() ... done
[08:08:27.271] | : . ' , ; ` | getFutureCapture() ...
[08:08:27.271] | : . ' , ; ` | getFutureCapture() ... done
[08:08:27.271] | : . ' , ; ` | getFutureContext() ...
[08:08:27.271] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:27.271] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:27.271] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:27.272] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:27.272] | : . ' , ; ` | getFutureContext() ... done
[08:08:27.272] | : . ' , ; ` getFutureData() ... done
[08:08:27.272] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'add', earlySignal = 0) ...
[08:08:27.272] | : . ' , ; ` | Appended future to position #1
[08:08:27.272] | : . ' , ; ` | Number of registered futures: 1
[08:08:27.273] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'add', earlySignal = 0) ... done
[08:08:27.273] | : . ' , ; launchFuture() ... done
[08:08:27.273] | : . ' , ; MultisessionFuture started
[08:08:27.273] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:27.273] | : . ' Launching futures ... done
[08:08:27.273] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:27.273] | : . Using MultisessionFutureBackend ... done
[08:08:27.273] | : run() for ‘Future’ (<unnamed-76>) ... done
[08:08:27.273] | future(..., label = NULL) ... done
[08:08:27.273] | future(..., label = NULL) ...
[08:08:27.274] | : lazy: FALSE
[08:08:27.274] | : stdout: TRUE
[08:08:27.274] | : conditions: [n=1] ‘condition’
[08:08:27.274] | : gc: FALSE
[08:08:27.274] | : earlySignal: FALSE
[08:08:27.274] | : getGlobalsAndPackages() ...
[08:08:27.274] | : . Searching for globals ...
[08:08:27.275] | : . ' globals found: [0] 
[08:08:27.276] | : . Searching for globals ... done
[08:08:27.276] | : . globals: [0] <none>
[08:08:27.276] | : . packages: [0] <none>
[08:08:27.276] | : getGlobalsAndPackages() ... done
[08:08:27.276] | : run() for ‘Future’ (<unnamed-77>) ...
[08:08:27.276] | : . state: ‘created’
[08:08:27.276] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:27.277] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:27.277] | : . Using MultisessionFutureBackend ...
[08:08:27.277] | : . ' Number of futures since start: 1 (1 created, 1 launched, 0 finished)
[08:08:27.277] | : . ' Launching futures ...
[08:08:27.277] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:27.277] | : . ' , ; Workers: [n=2]
[08:08:27.277] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:27.279] | : . ' , ; FutureRegistry: ‘workers-ebcf5645fe5296532f48b425138b7006’
[08:08:27.279] | : . ' , ; requestWorker() ...
[08:08:27.279] | : . ' , ; ` requestNode() ...
[08:08:27.279] | : . ' , ; ` | Number of workers: 2
[08:08:27.279] | : . ' , ; ` | Polling for a free worker ...
[08:08:27.279] | : . ' , ; ` | : FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:27.279] | : . ' , ; ` | : . Listing all futures
[08:08:27.280] | : . ' , ; ` | : . Number of registered futures: 1
[08:08:27.280] | : . ' , ; ` | : FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:27.280] | : . ' , ; ` | : Total time: 0
[08:08:27.280] | : . ' , ; ` | Polling for a free worker ... done
[08:08:27.280] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:27.280] | : . ' , ; ` | : Listing all futures
[08:08:27.280] | : . ' , ; ` | : Number of registered futures: 1
[08:08:27.280] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:27.280] | : . ' , ; ` | avail: [n=2] ‘2’
[08:08:27.280] | : . ' , ; ` | Index of first available worker: 2
[08:08:27.281] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:27.348] | : . ' , ; ` | : Worker is functional
[08:08:27.348] | : . ' , ; ` | : FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:27.348] | : . ' , ; ` | : . Listing all futures
[08:08:27.348] | : . ' , ; ` | : . Number of registered futures: 1
[08:08:27.349] | : . ' , ; ` | : FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:27.349] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:27.349] | : . ' , ; ` requestNode() ... done
[08:08:27.349] | : . ' , ; ` cluster node index: 2
[08:08:27.350] | : . ' , ; requestWorker() ... done
[08:08:27.350] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:27.350] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:27.351] | : . ' , ; launchFuture() ...
[08:08:27.351] | : . ' , ; ` cluster node index: 2
[08:08:27.351] | : . ' , ; ` getFutureData() ...
[08:08:27.351] | : . ' , ; ` | getFutureCore() ...
[08:08:27.351] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:27.351] | : . ' , ; ` | getFutureCore() ... done
[08:08:27.352] | : . ' , ; ` | getFutureCapture() ...
[08:08:27.352] | : . ' , ; ` | getFutureCapture() ... done
[08:08:27.352] | : . ' , ; ` | getFutureContext() ...
[08:08:27.352] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:27.352] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:27.352] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:27.353] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:27.353] | : . ' , ; ` | getFutureContext() ... done
[08:08:27.353] | : . ' , ; ` getFutureData() ... done
[08:08:27.354] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'add', earlySignal = 0) ...
[08:08:27.354] | : . ' , ; ` | Appended future to position #2
[08:08:27.354] | : . ' , ; ` | Number of registered futures: 2
[08:08:27.354] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'add', earlySignal = 0) ... done
[08:08:27.354] | : . ' , ; launchFuture() ... done
[08:08:27.355] | : . ' , ; MultisessionFuture started
[08:08:27.355] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:27.355] | : . ' Launching futures ... done
[08:08:27.355] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:27.355] | : . Using MultisessionFutureBackend ... done
[08:08:27.355] | : run() for ‘Future’ (<unnamed-77>) ... done
[08:08:27.356] | future(..., label = NULL) ... done
[08:08:27.356] | future(..., label = NULL) ...
[08:08:27.356] | : lazy: FALSE
[08:08:27.356] | : stdout: TRUE
[08:08:27.357] | : conditions: [n=1] ‘condition’
[08:08:27.357] | : gc: FALSE
[08:08:27.357] | : earlySignal: FALSE
[08:08:27.357] | : getGlobalsAndPackages() ...
[08:08:27.357] | : . Searching for globals ...
[08:08:27.363] | : . ' globals found: [1] ‘{’
[08:08:27.363] | : . Searching for globals ... done
[08:08:27.363] | : . Resolving globals: FALSE
[08:08:27.364] | : . Search for packages associated with the globals ...
[08:08:27.364] | : . ' Packages associated with globals: [1] ‘base’
[08:08:27.364] | : . ' Packages: [1] ‘base’
[08:08:27.365] | : . Search for packages associated with the globals ... done
[08:08:27.365] | : . Packages after dropping 'base': [0] 
[08:08:27.365] | : . globals: [0] 
[08:08:27.365] | : . packages: [0] 
[08:08:27.365] | : getGlobalsAndPackages() ... done
[08:08:27.369] | : run() for ‘Future’ (<unnamed-78>) ...
[08:08:27.369] | : . state: ‘created’
[08:08:27.369] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:27.369] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:27.370] | : . Using MultisessionFutureBackend ...
[08:08:27.370] | : . ' Number of futures since start: 2 (2 created, 2 launched, 0 finished)
[08:08:27.370] | : . ' Launching futures ...
[08:08:27.370] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:27.370] | : . ' , ; Workers: [n=2]
[08:08:27.371] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:27.373] | : . ' , ; FutureRegistry: ‘workers-ebcf5645fe5296532f48b425138b7006’
[08:08:27.373] | : . ' , ; requestWorker() ...
[08:08:27.374] | : . ' , ; ` requestNode() ...
[08:08:27.374] | : . ' , ; ` | Number of workers: 2
[08:08:27.374] | : . ' , ; ` | Polling for a free worker ...
[08:08:27.374] | : . ' , ; ` | : FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:27.374] | : . ' , ; ` | : . Listing all futures
[08:08:27.375] | : . ' , ; ` | : . Number of registered futures: 2
[08:08:27.375] | : . ' , ; ` | : FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:27.375] | : . ' , ; ` | : Poll #1 (0): usedNodes() = 2, workers = 2
[08:08:27.385] | : . ' , ; ` | : FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'collect-first', earlySignal = 1) ...
[08:08:27.386] | : . ' , ; ` | : . collectValues('workers-ebcf5645fe5296532f48b425138b7006', firstOnly = TRUE) ...
[08:08:27.386] | : . ' , ; ` | : . ' resolved() for MultisessionFuture (<unnamed-76>) ...
[08:08:27.386] | : . ' , ; ` | : . ' , Cluster node socket connection: index=4, id=1255
[08:08:27.386] | : . ' , ; ` | : . ' , assertValidConnection() ...
[08:08:27.387] | : . ' , ; ` | : . ' , ; cluster node index: 1
[08:08:27.387] | : . ' , ; ` | : . ' , assertValidConnection() ... done
[08:08:27.387] | : . ' , ; ` | : . ' , receiveMessageFromWorker() for ClusterFuture ...
[08:08:27.387] | : . ' , ; ` | : . ' , ; cluster node index: 1
[08:08:27.387] | : . ' , ; ` | : . ' , ; [1] TRUE
[08:08:27.388] | : . ' , ; ` | : . ' , ; received data:
[08:08:27.388] | : . ' , ; ` | : . ' , ; List of 5
[08:08:27.388] | : . ' , ; ` | : . ' , ;  $ type   : chr "VALUE"
[08:08:27.388] | : . ' , ; ` | : . ' , ;  $ value  :List of 16
[08:08:27.388] | : . ' , ; ` | : . ' , ;   ..$ value              : num 2
[08:08:27.388] | : . ' , ; ` | : . ' , ;   ..$ visible            : logi TRUE
[08:08:27.388] | : . ' , ; ` | : . ' , ;   ..$ stdout             : chr ""
[08:08:27.388] | : . ' , ; ` | : . ' , ;   ..$ conditions         : list()
[08:08:27.388] | : . ' , ; ` | : . ' , ;   ..$ rng                : logi FALSE
[08:08:27.388] | : . ' , ; ` | : . ' , ;   ..$ seed               : NULL
[08:08:27.388] | : . ' , ; ` | : . ' , ;   ..$ misuseGlobalEnv    : NULL
[08:08:27.388] | : . ' , ; ` | : . ' , ;   ..$ misuseConnections  :List of 3
[08:08:27.388] | : . ' , ; ` | : . ' , ;   .. ..$ added   : NULL
[08:08:27.388] | : . ' , ; ` | : . ' , ;   .. ..$ removed : NULL
[08:08:27.388] | : . ' , ; ` | : . ' , ;   .. ..$ replaced: NULL
[08:08:27.388] | : . ' , ; ` | : . ' , ;   ..$ misuseDevices      : NULL
[08:08:27.388] | : . ' , ; ` | : . ' , ;   ..$ misuseDefaultDevice: list()
[08:08:27.388] | : . ' , ; ` | : . ' , ;   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:27"
[08:08:27.388] | : . ' , ; ` | : . ' , ;   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:27"
[08:08:27.388] | : . ' , ; ` | : . ' , ;   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "76"
[08:08:27.388] | : . ' , ; ` | : . ' , ;   ..$ session_uuid       : chr "363fe616e76346839f7969755b6a4995"
[08:08:27.388] | : . ' , ; ` | : . ' , ;   .. ..- attr(*, "source")=List of 5
[08:08:27.388] | : . ' , ; ` | : . ' , ;   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:27.388] | : . ' , ; ` | : . ' , ;   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:27.388] | : . ' , ; ` | : . ' , ;   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:27.388] | : . ' , ; ` | : . ' , ;   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:27.388] | : . ' , ; ` | : . ' , ;   .. .. ..$ pid   : int 69106
[08:08:27.388] | : . ' , ; ` | : . ' , ;   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:27"
[08:08:27.388] | : . ' , ; ` | : . ' , ;   .. .. ..$ random: int 2147483647
[08:08:27.388] | : . ' , ; ` | : . ' , ;   ..$ r_info             :List of 4
[08:08:27.388] | : . ' , ; ` | : . ' , ;   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:27.388] | : . ' , ; ` | : . ' , ;   .. .. ..$ : int [1:3] 4 5 0
[08:08:27.388] | : . ' , ; ` | : . ' , ;   .. ..$ os           : chr "unix"
[08:08:27.388] | : . ' , ; ` | : . ' , ;   .. ..$ os_name      : chr "Linux"
[08:08:27.388] | : . ' , ; ` | : . ' , ;   .. ..$ captures_utf8: logi TRUE
[08:08:27.388] | : . ' , ; ` | : . ' , ;   ..$ version            : chr "1.8"
[08:08:27.388] | : . ' , ; ` | : . ' , ;   ..- attr(*, "class")= chr "FutureResult"
[08:08:27.388] | : . ' , ; ` | : . ' , ;  $ success: logi TRUE
[08:08:27.388] | : . ' , ; ` | : . ' , ;  $ time   : 'proc_time' Named num [1:5] 0.07 0.005 0.074 0 0
[08:08:27.388] | : . ' , ; ` | : . ' , ;   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:27.388] | : . ' , ; ` | : . ' , ;  $ tag    : NULL
[08:08:27.399] | : . ' , ; ` | : . ' , ; Received FutureResult
[08:08:27.399] | : . ' , ; ` | : . ' , ; FutureResult:
[08:08:27.399] | : . ' , ; ` | : . ' , ; value: ‘numeric’
[08:08:27.399] | : . ' , ; ` | : . ' , ; visible: TRUE
[08:08:27.399] | : . ' , ; ` | : . ' , ; stdout: character
[08:08:27.399] | : . ' , ; ` | : . ' , ; conditions: [n = 0] 
[08:08:27.399] | : . ' , ; ` | : . ' , ; RNG used: FALSE
[08:08:27.399] | : . ' , ; ` | : . ' , ; duration: 0.07088351 secs (started 2025-06-17 08:08:27.314931)
[08:08:27.399] | : . ' , ; ` | : . ' , ; version: 1.8
[08:08:27.399] | : . ' , ; ` | : . ' , ; FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'remove', earlySignal = 0) ...
[08:08:27.399] | : . ' , ; ` | : . ' , ; ` Removed future from position #1
[08:08:27.400] | : . ' , ; ` | : . ' , ; ` Number of registered futures: 1
[08:08:27.400] | : . ' , ; ` | : . ' , ; FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'remove', earlySignal = 0) ... done
[08:08:27.400] | : . ' , ; ` | : . ' , ; Erased future from future backend
[08:08:27.400] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ...
[08:08:27.400] | : . ' , ; ` | : . ' , ; ` result already collected: FutureResult
[08:08:27.400] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ... done
[08:08:27.400] | : . ' , ; ` | : . ' , ; signalConditions() ...
[08:08:27.400] | : . ' , ; ` | : . ' , ; ` include = ‘immediateCondition’
[08:08:27.400] | : . ' , ; ` | : . ' , ; ` exclude = 
[08:08:27.401] | : . ' , ; ` | : . ' , ; ` resignal = FALSE
[08:08:27.401] | : . ' , ; ` | : . ' , ; ` Number of conditions: 0
[08:08:27.401] | : . ' , ; ` | : . ' , ; `  int 0
[08:08:27.401] | : . ' , ; ` | : . ' , ; signalConditions() ... done
[08:08:27.401] | : . ' , ; ` | : . ' , receiveMessageFromWorker() for ClusterFuture ... done
[08:08:27.401] | : . ' , ; ` | : . ' , receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:27.402] | : . ' , ; ` | : . ' resolved() for MultisessionFuture (<unnamed-76>) ... done
[08:08:27.402] | : . ' , ; ` | : . ' assertFutureResult() ...
[08:08:27.402] | : . ' , ; ` | : . ' , Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:27.402] | : . ' , ; ` | : . ' , Future uuid: 76
[08:08:27.402] | : . ' , ; ` | : . ' , identical; success
[08:08:27.402] | : . ' , ; ` | : . ' assertFutureResult() ... done
[08:08:27.402] | : . ' , ; ` | : . ' Future at position #1 is resolved ...
[08:08:27.402] | : . ' , ; ` | : . ' , value() for MultisessionFuture (<unnamed-76>) ...
[08:08:27.402] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ...
[08:08:27.402] | : . ' , ; ` | : . ' , ; ` result already collected: FutureResult
[08:08:27.402] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ... done
[08:08:27.403] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ...
[08:08:27.403] | : . ' , ; ` | : . ' , ; ` result already collected: FutureResult
[08:08:27.403] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ... done
[08:08:27.403] | : . ' , ; ` | : . ' , ; signalConditions() ...
[08:08:27.403] | : . ' , ; ` | : . ' , ; ` include = ‘immediateCondition’
[08:08:27.403] | : . ' , ; ` | : . ' , ; ` exclude = 
[08:08:27.403] | : . ' , ; ` | : . ' , ; ` resignal = FALSE
[08:08:27.403] | : . ' , ; ` | : . ' , ; ` Number of conditions: 0
[08:08:27.403] | : . ' , ; ` | : . ' , ; `  int 0
[08:08:27.404] | : . ' , ; ` | : . ' , ; signalConditions() ... done
[08:08:27.404] | : . ' , ; ` | : . ' , ; check for misuse ...
[08:08:27.404] | : . ' , ; ` | : . ' , ; check for misuse ... done
[08:08:27.404] | : . ' , ; ` | : . ' , value() for MultisessionFuture (<unnamed-76>) ... done
[08:08:27.404] | : . ' , ; ` | : . ' Future at position #1 is resolved ... done
[08:08:27.404] | : . ' , ; ` | : . collectValues('workers-ebcf5645fe5296532f48b425138b7006', firstOnly = TRUE) ... done
[08:08:27.405] | : . ' , ; ` | : . Remove collected futures ...
[08:08:27.405] | : . ' , ; ` | : . ' Indices of futures to drop: [n=1] ‘1’
[08:08:27.405] | : . ' , ; ` | : . Remove collected futures ... done
[08:08:27.405] | : . ' , ; ` | : FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'collect-first', earlySignal = 1) ... done
[08:08:27.405] | : . ' , ; ` | : Early signaling of 2 future candidates ...
[08:08:27.405] | : . ' , ; ` | : Number of futures with early signaling requested: 0
[08:08:27.405] | : . ' , ; ` | : Early signaling of 2 future candidates ... done
[08:08:27.405] | : . ' , ; ` | : Number of registered futures: 2
[08:08:27.405] | : . ' , ; ` | Polling for a free worker ... done
[08:08:27.405] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:27.406] | : . ' , ; ` | : Listing all futures
[08:08:27.406] | : . ' , ; ` | : Number of registered futures: 1
[08:08:27.406] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:27.406] | : . ' , ; ` | Total time: 0.0313048362731934
[08:08:27.406] | : . ' , ; ` requestNode() ... done
[08:08:27.406] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:27.406] | : . ' , ; ` | Listing all futures
[08:08:27.406] | : . ' , ; ` | Number of registered futures: 1
[08:08:27.406] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:27.407] | : . ' , ; ` avail: [n=2] ‘1’
[08:08:27.407] | : . ' , ; ` Index of first available worker: 1
[08:08:27.407] | : . ' , ; ` Validate that the worker is functional ...
[08:08:27.506] | : . ' , ; ` | Worker is functional
[08:08:27.506] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:27.506] | : . ' , ; ` | : Listing all futures
[08:08:27.507] | : . ' , ; ` | : Number of registered futures: 1
[08:08:27.507] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:27.507] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:27.507] | : . ' , ; requestWorker() ... done
[08:08:27.507] | : . ' , ; cluster node index: 1
[08:08:27.507] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:27.507] | : . ' , eraseGlobalEnvironment() ...
[08:08:27.508] | : . ' , eraseGlobalEnvironment() ... done
[08:08:27.508] | : . ' , launchFuture() ...
[08:08:27.508] | : . ' , ; cluster node index: 1
[08:08:27.508] | : . ' , ; getFutureData() ...
[08:08:27.508] | : . ' , ; ` getFutureCore() ...
[08:08:27.508] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:27.508] | : . ' , ; ` getFutureCore() ... done
[08:08:27.509] | : . ' , ; ` getFutureCapture() ...
[08:08:27.509] | : . ' , ; ` getFutureCapture() ... done
[08:08:27.509] | : . ' , ; ` getFutureContext() ...
[08:08:27.509] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:27.509] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:27.509] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:27.509] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:27.509] | : . ' , ; ` getFutureContext() ... done
[08:08:27.509] | : . ' , ; getFutureData() ... done
[08:08:27.510] | : . ' , ; FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'add', earlySignal = 0) ...
[08:08:27.510] | : . ' , ; ` Appended future to position #2
[08:08:27.510] | : . ' , ; ` Number of registered futures: 2
[08:08:27.510] | : . ' , ; FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'add', earlySignal = 0) ... done
[08:08:27.510] | : . ' , launchFuture() ... done
[08:08:27.510] | : . ' , MultisessionFuture started
[08:08:27.511] | : . ' Launching futures ... done
[08:08:27.511] | : . Using MultisessionFutureBackend ... done
[08:08:27.511] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:27.511] | : run() for ‘Future’ (<unnamed-78>) ... done
[08:08:27.511] | future(..., label = NULL) ... done
[08:08:27.511] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
<environment: 0x564303cf7f58> 
<environment: 0x564302ec4cf8> 
[08:08:27.512] resolved() for environment ...
[08:08:27.512] | resolved() for list ...
[08:08:27.513] | : Number of elements: 4
[08:08:27.513] | : Number of futures: 4
[08:08:27.513] | : resolved() for MultisessionFuture (<unnamed-77>) ...
[08:08:27.513] | : . Cluster node socket connection: index=5, id=1256
[08:08:27.513] | : . assertValidConnection() ...
[08:08:27.513] | : . ' cluster node index: 2
[08:08:27.514] | : . assertValidConnection() ... done
[08:08:27.514] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:27.514] | : . ' cluster node index: 2
[08:08:27.514] | : . ' [1] TRUE
[08:08:27.514] | : . ' received data:
[08:08:27.515] | : . ' List of 5
[08:08:27.515] | : . '  $ type   : chr "VALUE"
[08:08:27.515] | : . '  $ value  :List of 16
[08:08:27.515] | : . '   ..$ value              : NULL
[08:08:27.515] | : . '   ..$ visible            : logi TRUE
[08:08:27.515] | : . '   ..$ stdout             : chr ""
[08:08:27.515] | : . '   ..$ conditions         : list()
[08:08:27.515] | : . '   ..$ rng                : logi FALSE
[08:08:27.515] | : . '   ..$ seed               : NULL
[08:08:27.515] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:27.515] | : . '   ..$ misuseConnections  :List of 3
[08:08:27.515] | : . '   .. ..$ added   : NULL
[08:08:27.515] | : . '   .. ..$ removed : NULL
[08:08:27.515] | : . '   .. ..$ replaced: NULL
[08:08:27.515] | : . '   ..$ misuseDevices      : NULL
[08:08:27.515] | : . '   ..$ misuseDefaultDevice: list()
[08:08:27.515] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:27"
[08:08:27.515] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:27"
[08:08:27.515] | : . '   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "77"
[08:08:27.515] | : . '   ..$ session_uuid       : chr "bd12039d41799c8c6e56f5926a91e416"
[08:08:27.515] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:27.515] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:27.515] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:27.515] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:27.515] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:27.515] | : . '   .. .. ..$ pid   : int 69105
[08:08:27.515] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:27"
[08:08:27.515] | : . '   .. .. ..$ random: int 2147483647
[08:08:27.515] | : . '   ..$ r_info             :List of 4
[08:08:27.515] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:27.515] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:27.515] | : . '   .. ..$ os           : chr "unix"
[08:08:27.515] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:27.515] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:27.515] | : . '   ..$ version            : chr "1.8"
[08:08:27.515] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:27.515] | : . '  $ success: logi TRUE
[08:08:27.515] | : . '  $ time   : 'proc_time' Named num [1:5] 0.049 0.001 0.05 0 0
[08:08:27.515] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:27.515] | : . '  $ tag    : NULL
[08:08:27.525] | : . ' Received FutureResult
[08:08:27.525] | : . ' FutureResult:
[08:08:27.525] | : . ' value: ‘NULL’
[08:08:27.525] | : . ' visible: TRUE
[08:08:27.525] | : . ' stdout: character
[08:08:27.525] | : . ' conditions: [n = 0] 
[08:08:27.525] | : . ' RNG used: FALSE
[08:08:27.525] | : . ' duration: 0.04793692 secs (started 2025-06-17 08:08:27.396552)
[08:08:27.525] | : . ' version: 1.8
[08:08:27.526] | : . ' FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'remove', earlySignal = 0) ...
[08:08:27.526] | : . ' , Removed future from position #1
[08:08:27.526] | : . ' , Number of registered futures: 1
[08:08:27.526] | : . ' FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'remove', earlySignal = 0) ... done
[08:08:27.526] | : . ' Erased future from future backend
[08:08:27.526] | : . ' result() for ClusterFuture ...
[08:08:27.527] | : . ' , result already collected: FutureResult
[08:08:27.527] | : . ' result() for ClusterFuture ... done
[08:08:27.527] | : . ' signalConditions() ...
[08:08:27.527] | : . ' , include = ‘immediateCondition’
[08:08:27.527] | : . ' , exclude = 
[08:08:27.527] | : . ' , resignal = FALSE
[08:08:27.527] | : . ' , Number of conditions: 0
[08:08:27.527] | : . ' ,  int 0
[08:08:27.528] | : . ' signalConditions() ... done
[08:08:27.528] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:27.528] | : . receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:27.528] | : resolved() for MultisessionFuture (<unnamed-77>) ... done
[08:08:27.528] | : assertFutureResult() ...
[08:08:27.528] | : . Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:27.528] | : . Future uuid: 77
[08:08:27.528] | : . identical; success
[08:08:27.528] | : assertFutureResult() ... done
[08:08:27.529] | : resolved() for MultisessionFuture (<unnamed-78>) ...
[08:08:27.529] | : . Cluster node socket connection: index=4, id=1255
[08:08:27.529] | : . assertValidConnection() ...
[08:08:27.529] | : . ' cluster node index: 1
[08:08:27.529] | : . assertValidConnection() ... done
[08:08:27.540] | : . socketSelect(list(<connection #4 (id=1255)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:27.540] | : resolved() for MultisessionFuture (<unnamed-78>) ... done
[08:08:27.540] | resolved() for list ... done
[08:08:27.540] resolved() for environment ... done
 Named logi [1:4] TRUE TRUE TRUE FALSE
 - attr(*, "names")= chr [1:4] "a" "b" "c" "d"
[08:08:27.541] value() for MultisessionFuture (<unnamed-78>) ...
[08:08:27.541] | result() for ClusterFuture ...
[08:08:27.541] | : assertValidConnection() ...
[08:08:27.541] | : . cluster node index: 1
[08:08:27.542] | : assertValidConnection() ... done
[08:08:27.542] | : receiveMessageFromWorker() for ClusterFuture ...
[08:08:27.542] | : . cluster node index: 1
[08:08:27.554] | : . [1] TRUE
[08:08:27.554] | : . received data:
[08:08:27.554] | : . List of 5
[08:08:27.554] | : .  $ type   : chr "VALUE"
[08:08:27.554] | : .  $ value  :List of 16
[08:08:27.554] | : .   ..$ value              : num 4
[08:08:27.554] | : .   ..$ visible            : logi TRUE
[08:08:27.554] | : .   ..$ stdout             : chr ""
[08:08:27.554] | : .   ..$ conditions         : list()
[08:08:27.554] | : .   ..$ rng                : logi FALSE
[08:08:27.554] | : .   ..$ seed               : NULL
[08:08:27.554] | : .   ..$ misuseGlobalEnv    : NULL
[08:08:27.554] | : .   ..$ misuseConnections  :List of 3
[08:08:27.554] | : .   .. ..$ added   : NULL
[08:08:27.554] | : .   .. ..$ removed : NULL
[08:08:27.554] | : .   .. ..$ replaced: NULL
[08:08:27.554] | : .   ..$ misuseDevices      : NULL
[08:08:27.554] | : .   ..$ misuseDefaultDevice: list()
[08:08:27.554] | : .   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:27"
[08:08:27.554] | : .   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:27"
[08:08:27.554] | : .   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "78"
[08:08:27.554] | : .   ..$ session_uuid       : chr "363fe616e76346839f7969755b6a4995"
[08:08:27.554] | : .   .. ..- attr(*, "source")=List of 5
[08:08:27.554] | : .   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:27.554] | : .   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:27.554] | : .   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:27.554] | : .   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:27.554] | : .   .. .. ..$ pid   : int 69106
[08:08:27.554] | : .   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:27"
[08:08:27.554] | : .   .. .. ..$ random: int 2147483647
[08:08:27.554] | : .   ..$ r_info             :List of 4
[08:08:27.554] | : .   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:27.554] | : .   .. .. ..$ : int [1:3] 4 5 0
[08:08:27.554] | : .   .. ..$ os           : chr "unix"
[08:08:27.554] | : .   .. ..$ os_name      : chr "Linux"
[08:08:27.554] | : .   .. ..$ captures_utf8: logi TRUE
[08:08:27.554] | : .   ..$ version            : chr "1.8"
[08:08:27.554] | : .   ..- attr(*, "class")= chr "FutureResult"
[08:08:27.554] | : .  $ success: logi TRUE
[08:08:27.554] | : .  $ time   : 'proc_time' Named num [1:5] 0.002 0 0.003 0 0
[08:08:27.554] | : .   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:27.554] | : .  $ tag    : NULL
[08:08:27.568] | : . Received FutureResult
[08:08:27.568] | : . FutureResult:
[08:08:27.568] | : . value: ‘numeric’
[08:08:27.568] | : . visible: TRUE
[08:08:27.568] | : . stdout: character
[08:08:27.568] | : . conditions: [n = 0] 
[08:08:27.568] | : . RNG used: FALSE
[08:08:27.568] | : . duration: 0.002672195 secs (started 2025-06-17 08:08:27.551186)
[08:08:27.568] | : . version: 1.8
[08:08:27.568] | : . FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'remove', earlySignal = 0) ...
[08:08:27.568] | : . ' Removed future from position #1
[08:08:27.569] | : . ' Number of registered futures: 0
[08:08:27.569] | : . FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'remove', earlySignal = 0) ... done
[08:08:27.569] | : . Erased future from future backend
[08:08:27.569] | : . result() for ClusterFuture ...
[08:08:27.569] | : . ' result already collected: FutureResult
[08:08:27.569] | : . result() for ClusterFuture ... done
[08:08:27.569] | : . signalConditions() ...
[08:08:27.569] | : . ' include = ‘immediateCondition’
[08:08:27.569] | : . ' exclude = 
[08:08:27.569] | : . ' resignal = FALSE
[08:08:27.570] | : . ' Number of conditions: 0
[08:08:27.570] | : . '  int 0
[08:08:27.570] | : . signalConditions() ... done
[08:08:27.570] | : receiveMessageFromWorker() for ClusterFuture ... done
[08:08:27.570] | result() for ClusterFuture ... done
[08:08:27.570] | result() for ClusterFuture ...
[08:08:27.570] | : result already collected: FutureResult
[08:08:27.571] | result() for ClusterFuture ... done
[08:08:27.571] | signalConditions() ...
[08:08:27.571] | : include = ‘immediateCondition’
[08:08:27.571] | : exclude = 
[08:08:27.571] | : resignal = FALSE
[08:08:27.571] | : Number of conditions: 0
[08:08:27.571] | :  int 0
[08:08:27.571] | signalConditions() ... done
[08:08:27.572] | relay stdout ...
[08:08:27.572] | relay stdout ... done
[08:08:27.572] | check for misuse ...
[08:08:27.572] | check for misuse ... done
[08:08:27.572] value() for MultisessionFuture (<unnamed-78>) ... done
[08:08:27.572] value() for listenv ...
[08:08:27.572] | recursive: 0
[08:08:27.572] | reduce: FALSE
[08:08:27.573] | length: 4
[08:08:27.573] | elements: ‘a’, ‘b’, ‘c’, ‘d’
[08:08:27.573] | Number of remaining objects: 4
[08:08:27.573] | checking value #1:
[08:08:27.574] | 'obj' is atomic
[08:08:27.574] | signalConditionsASAP(numeric, pos=1) ...
[08:08:27.574] | : nx: 4
[08:08:27.574] | : relay: TRUE
[08:08:27.574] | : stdout: TRUE
[08:08:27.574] | : signal: TRUE
[08:08:27.574] | : resignal: FALSE
[08:08:27.574] | : force: TRUE
[08:08:27.574] | : relayed: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:27.574] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:27.575] | : until=2
[08:08:27.575] | : relaying element #2
[08:08:27.575] | : relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:27.575] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:27.575] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:27.575] | length: 3 (resolved future 1)
[08:08:27.575] value() for listenv ... done
[08:08:27.575] checking value #2:
[08:08:27.575] 'obj' is MultisessionFuture
[08:08:27.576] MultisessionFuture #2
[08:08:27.576] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:27.576] | nx: 4
[08:08:27.576] | relay: TRUE
[08:08:27.576] | stdout: TRUE
[08:08:27.576] | signal: TRUE
[08:08:27.576] | resignal: FALSE
[08:08:27.576] | force: TRUE
[08:08:27.576] | relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:27.576] | queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:27.576] | until=2
[08:08:27.577] | relaying element #2
[08:08:27.577] | value() for MultisessionFuture (<unnamed-76>) ...
[08:08:27.577] | : result() for ClusterFuture ...
[08:08:27.577] | : . result already collected: FutureResult
[08:08:27.577] | : result() for ClusterFuture ... done
[08:08:27.577] | : result() for ClusterFuture ...
[08:08:27.577] | : . result already collected: FutureResult
[08:08:27.577] | : result() for ClusterFuture ... done
[08:08:27.577] | : signalConditions() ...
[08:08:27.577] | : . include = ‘immediateCondition’
[08:08:27.578] | : . exclude = 
[08:08:27.578] | : . resignal = FALSE
[08:08:27.578] | : . Number of conditions: 0
[08:08:27.578] | : .  int 0
[08:08:27.578] | : signalConditions() ... done
[08:08:27.578] | : relay stdout ...
[08:08:27.578] | : relay stdout ... done
[08:08:27.578] | : check for misuse ...
[08:08:27.579] | : check for misuse ... done
[08:08:27.579] | value() for MultisessionFuture (<unnamed-76>) ... done
[08:08:27.579] | result() for ClusterFuture ...
[08:08:27.579] | : result already collected: FutureResult
[08:08:27.579] | result() for ClusterFuture ... done
[08:08:27.579] | signalConditions() ...
[08:08:27.579] | : include = ‘immediateCondition’
[08:08:27.579] | : exclude = 
[08:08:27.579] | : resignal = FALSE
[08:08:27.579] | : Number of conditions: 0
[08:08:27.580] | :  int 0
[08:08:27.580] | signalConditions() ... done
[08:08:27.580] | result() for ClusterFuture ...
[08:08:27.580] | : result already collected: FutureResult
[08:08:27.580] | result() for ClusterFuture ... done
[08:08:27.580] | signalConditions() ...
[08:08:27.580] | : include = ‘condition’
[08:08:27.581] | : exclude = ‘error’, ‘immediateCondition’
[08:08:27.581] | : resignal = TRUE
[08:08:27.581] | : Number of conditions: 0
[08:08:27.581] | :  int 0
[08:08:27.581] | signalConditions() ... done
[08:08:27.581] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:27.581] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:27.581] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:27.582] value(<MultisessionFuture>, ...) ...
[08:08:27.582] value(<MultisessionFuture>, ...) ... done
[08:08:27.582] value() for MultisessionFuture (<unnamed-76>) ...
[08:08:27.582] | result() for ClusterFuture ...
[08:08:27.582] | : result already collected: FutureResult
[08:08:27.582] | result() for ClusterFuture ... done
[08:08:27.582] | result() for ClusterFuture ...
[08:08:27.582] | : result already collected: FutureResult
[08:08:27.582] | result() for ClusterFuture ... done
[08:08:27.582] | signalConditions() ...
[08:08:27.583] | : include = ‘immediateCondition’
[08:08:27.583] | : exclude = 
[08:08:27.583] | : resignal = FALSE
[08:08:27.583] | : Number of conditions: 0
[08:08:27.583] | :  int 0
[08:08:27.583] | signalConditions() ... done
[08:08:27.583] | check for misuse ...
[08:08:27.584] | check for misuse ... done
[08:08:27.584] value() for MultisessionFuture (<unnamed-76>) ... done
[08:08:27.584] value: <numeric>
[08:08:27.584] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:27.584] | nx: 4
[08:08:27.584] | relay: TRUE
[08:08:27.584] | stdout: TRUE
[08:08:27.584] | signal: TRUE
[08:08:27.584] | resignal: FALSE
[08:08:27.584] | force: TRUE
[08:08:27.585] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:27.585] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:27.585] | until=3
[08:08:27.585] | relaying element #3
[08:08:27.585] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:27.585] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:27.585] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:27.585] resolve() for MultisessionFuture ...
[08:08:27.585] resolve() for MultisessionFuture ... done
[08:08:27.585] length: 2 (resolved future 2)

[08:08:27.586] checking value #3:
[08:08:27.586] 'obj' is MultisessionFuture
[08:08:27.586] MultisessionFuture #3
[08:08:27.586] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:27.586] | nx: 4
[08:08:27.586] | relay: TRUE
[08:08:27.586] | stdout: TRUE
[08:08:27.586] | signal: TRUE
[08:08:27.586] | resignal: FALSE
[08:08:27.586] | force: TRUE
[08:08:27.586] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:27.587] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:27.587] | until=3
[08:08:27.587] | relaying element #3
[08:08:27.587] | value() for MultisessionFuture (<unnamed-77>) ...
[08:08:27.587] | : result() for ClusterFuture ...
[08:08:27.587] | : . result already collected: FutureResult
[08:08:27.587] | : result() for ClusterFuture ... done
[08:08:27.587] | : result() for ClusterFuture ...
[08:08:27.587] | : . result already collected: FutureResult
[08:08:27.587] | : result() for ClusterFuture ... done
[08:08:27.588] | : signalConditions() ...
[08:08:27.588] | : . include = ‘immediateCondition’
[08:08:27.588] | : . exclude = 
[08:08:27.588] | : . resignal = FALSE
[08:08:27.588] | : . Number of conditions: 0
[08:08:27.588] | : .  int 0
[08:08:27.588] | : signalConditions() ... done
[08:08:27.589] | : relay stdout ...
[08:08:27.589] | : relay stdout ... done
[08:08:27.589] | : check for misuse ...
[08:08:27.589] | : check for misuse ... done
[08:08:27.589] | value() for MultisessionFuture (<unnamed-77>) ... done
[08:08:27.589] | result() for ClusterFuture ...
[08:08:27.589] | : result already collected: FutureResult
[08:08:27.589] | result() for ClusterFuture ... done
[08:08:27.589] | signalConditions() ...
[08:08:27.589] | : include = ‘immediateCondition’
[08:08:27.590] | : exclude = 
[08:08:27.590] | : resignal = FALSE
[08:08:27.590] | : Number of conditions: 0
[08:08:27.590] | :  int 0
[08:08:27.590] | signalConditions() ... done
[08:08:27.590] | result() for ClusterFuture ...
[08:08:27.590] | : result already collected: FutureResult
[08:08:27.591] | result() for ClusterFuture ... done
[08:08:27.591] | signalConditions() ...
[08:08:27.591] | : include = ‘condition’
[08:08:27.591] | : exclude = ‘error’, ‘immediateCondition’
[08:08:27.591] | : resignal = TRUE
[08:08:27.591] | : Number of conditions: 0
[08:08:27.591] | :  int 0
[08:08:27.591] | signalConditions() ... done
[08:08:27.592] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:27.592] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:27.592] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:27.592] value(<MultisessionFuture>, ...) ...
[08:08:27.592] value(<MultisessionFuture>, ...) ... done
[08:08:27.592] value() for MultisessionFuture (<unnamed-77>) ...
[08:08:27.592] | result() for ClusterFuture ...
[08:08:27.592] | : result already collected: FutureResult
[08:08:27.592] | result() for ClusterFuture ... done
[08:08:27.592] | result() for ClusterFuture ...
[08:08:27.593] | : result already collected: FutureResult
[08:08:27.593] | result() for ClusterFuture ... done
[08:08:27.593] | signalConditions() ...
[08:08:27.593] | : include = ‘immediateCondition’
[08:08:27.593] | : exclude = 
[08:08:27.593] | : resignal = FALSE
[08:08:27.593] | : Number of conditions: 0
[08:08:27.593] | :  int 0
[08:08:27.594] | signalConditions() ... done
[08:08:27.594] | check for misuse ...
[08:08:27.594] | check for misuse ... done
[08:08:27.594] value() for MultisessionFuture (<unnamed-77>) ... done
[08:08:27.594] value: <NULL>
[08:08:27.594] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:27.594] | nx: 4
[08:08:27.594] | relay: TRUE
[08:08:27.594] | stdout: TRUE
[08:08:27.595] | signal: TRUE
[08:08:27.595] | resignal: FALSE
[08:08:27.595] | force: TRUE
[08:08:27.595] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:27.595] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:27.595] | until=4
[08:08:27.595] | relaying element #4
[08:08:27.595] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:27.595] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:27.595] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:27.596] resolve() for MultisessionFuture ...
[08:08:27.596] resolve() for MultisessionFuture ... done
[08:08:27.596] length: 1 (resolved future 3)

[08:08:27.596] checking value #4:
[08:08:27.596] 'obj' is atomic
[08:08:27.596] signalConditionsASAP(numeric, pos=4) ...
[08:08:27.596] | nx: 4
[08:08:27.596] | relay: TRUE
[08:08:27.596] | stdout: TRUE
[08:08:27.596] | signal: TRUE
[08:08:27.597] | resignal: FALSE
[08:08:27.597] | force: TRUE
[08:08:27.597] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:27.597] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:27.597] | until=4
[08:08:27.597] | relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:27.597] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:27.597] signalConditionsASAP(numeric, pos=4) ... done
[08:08:27.597] length: 0 (resolved future 4)

[08:08:27.598] Relaying remaining futures ...
[08:08:27.598] | signalConditionsASAP(NULL, pos=0) ...
[08:08:27.598] | : nx: 4
[08:08:27.598] | : relay: TRUE
[08:08:27.598] | : stdout: TRUE
[08:08:27.598] | : signal: TRUE
[08:08:27.598] | : resignal: FALSE
[08:08:27.598] | : force: TRUE
[08:08:27.598] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:27.598] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
 - flush all
[08:08:27.599] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:27.599] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:27.599] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:27.599] Relaying remaining futures ... done

List of 4
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
Dimensions: c(1, 6)
[08:08:27.600] future(..., label = NULL) ...
[08:08:27.601] | lazy: FALSE
[08:08:27.601] | stdout: TRUE
[08:08:27.601] | conditions: [n=1] ‘condition’
[08:08:27.601] | gc: FALSE
[08:08:27.601] | earlySignal: FALSE
[08:08:27.601] | getGlobalsAndPackages() ...
[08:08:27.601] | : Searching for globals ...
[08:08:27.602] | : . globals found: [0] 
[08:08:27.602] | : Searching for globals ... done
[08:08:27.603] | : globals: [0] <none>
[08:08:27.603] | : packages: [0] <none>
[08:08:27.603] | getGlobalsAndPackages() ... done
[08:08:27.603] | run() for ‘Future’ (<unnamed-79>) ...
[08:08:27.603] | : state: ‘created’
[08:08:27.603] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:27.603] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:27.603] | : Using MultisessionFutureBackend ...
[08:08:27.604] | : . Number of futures since start: 3 (3 created, 3 launched, 4 finished)
[08:08:27.604] | : . Launching futures ...
[08:08:27.604] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:27.604] | : . ' , Workers: [n=2]
[08:08:27.604] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:27.606] | : . ' , FutureRegistry: ‘workers-ebcf5645fe5296532f48b425138b7006’
[08:08:27.606] | : . ' , requestWorker() ...
[08:08:27.606] | : . ' , ; requestNode() ...
[08:08:27.606] | : . ' , ; ` Number of workers: 2
[08:08:27.606] | : . ' , ; ` Polling for a free worker ...
[08:08:27.606] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:27.606] | : . ' , ; ` | : Listing all futures
[08:08:27.606] | : . ' , ; ` | : Number of registered futures: 0
[08:08:27.606] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:27.606] | : . ' , ; ` | Total time: 0
[08:08:27.607] | : . ' , ; ` Polling for a free worker ... done
[08:08:27.607] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:27.607] | : . ' , ; ` | Listing all futures
[08:08:27.607] | : . ' , ; ` | Number of registered futures: 0
[08:08:27.607] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:27.607] | : . ' , ; ` avail: [n=2] ‘1’, ‘2’
[08:08:27.607] | : . ' , ; ` Index of first available worker: 1
[08:08:27.607] | : . ' , ; ` Validate that the worker is functional ...
[08:08:27.703] | : . ' , ; ` | Worker is functional
[08:08:27.703] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:27.703] | : . ' , ; ` | : Listing all futures
[08:08:27.703] | : . ' , ; ` | : Number of registered futures: 0
[08:08:27.703] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:27.703] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:27.704] | : . ' , ; requestNode() ... done
[08:08:27.704] | : . ' , ; cluster node index: 1
[08:08:27.704] | : . ' , requestWorker() ... done
[08:08:27.704] | : . ' , eraseGlobalEnvironment() ...
[08:08:27.704] | : . ' , eraseGlobalEnvironment() ... done
[08:08:27.704] | : . ' , launchFuture() ...
[08:08:27.704] | : . ' , ; cluster node index: 1
[08:08:27.705] | : . ' , ; getFutureData() ...
[08:08:27.705] | : . ' , ; ` getFutureCore() ...
[08:08:27.705] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:27.705] | : . ' , ; ` getFutureCore() ... done
[08:08:27.705] | : . ' , ; ` getFutureCapture() ...
[08:08:27.705] | : . ' , ; ` getFutureCapture() ... done
[08:08:27.705] | : . ' , ; ` getFutureContext() ...
[08:08:27.705] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:27.705] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:27.706] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:27.706] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:27.706] | : . ' , ; ` getFutureContext() ... done
[08:08:27.706] | : . ' , ; getFutureData() ... done
[08:08:27.706] | : . ' , ; FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'add', earlySignal = 0) ...
[08:08:27.706] | : . ' , ; ` Appended future to position #1
[08:08:27.706] | : . ' , ; ` Number of registered futures: 1
[08:08:27.707] | : . ' , ; FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'add', earlySignal = 0) ... done
[08:08:27.707] | : . ' , launchFuture() ... done
[08:08:27.707] | : . ' , MultisessionFuture started
[08:08:27.707] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:27.707] | : . Launching futures ... done
[08:08:27.707] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:27.707] | : Using MultisessionFutureBackend ... done
[08:08:27.707] | run() for ‘Future’ (<unnamed-79>) ... done
[08:08:27.707] future(..., label = NULL) ... done
[08:08:27.708] future(..., label = NULL) ...
[08:08:27.708] | lazy: FALSE
[08:08:27.708] | stdout: TRUE
[08:08:27.708] | conditions: [n=1] ‘condition’
[08:08:27.708] | gc: FALSE
[08:08:27.708] | earlySignal: FALSE
[08:08:27.708] | getGlobalsAndPackages() ...
[08:08:27.708] | : Searching for globals ...
[08:08:27.709] | : . globals found: [0] 
[08:08:27.709] | : Searching for globals ... done
[08:08:27.710] | : globals: [0] <none>
[08:08:27.710] | : packages: [0] <none>
[08:08:27.710] | getGlobalsAndPackages() ... done
[08:08:27.710] | run() for ‘Future’ (<unnamed-80>) ...
[08:08:27.710] | : state: ‘created’
[08:08:27.710] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:27.710] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:27.710] | : Using MultisessionFutureBackend ...
[08:08:27.711] | : . Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:08:27.711] | : . Launching futures ...
[08:08:27.711] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:27.711] | : . ' , Workers: [n=2]
[08:08:27.711] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:27.713] | : . ' , FutureRegistry: ‘workers-ebcf5645fe5296532f48b425138b7006’
[08:08:27.713] | : . ' , requestWorker() ...
[08:08:27.713] | : . ' , ; requestNode() ...
[08:08:27.713] | : . ' , ; ` Number of workers: 2
[08:08:27.713] | : . ' , ; ` Polling for a free worker ...
[08:08:27.713] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:27.713] | : . ' , ; ` | : Listing all futures
[08:08:27.713] | : . ' , ; ` | : Number of registered futures: 1
[08:08:27.713] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:27.714] | : . ' , ; ` | Total time: 0
[08:08:27.714] | : . ' , ; ` Polling for a free worker ... done
[08:08:27.714] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:27.714] | : . ' , ; ` | Listing all futures
[08:08:27.714] | : . ' , ; ` | Number of registered futures: 1
[08:08:27.714] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:27.714] | : . ' , ; ` avail: [n=2] ‘2’
[08:08:27.714] | : . ' , ; ` Index of first available worker: 2
[08:08:27.714] | : . ' , ; ` Validate that the worker is functional ...
[08:08:27.780] | : . ' , ; ` | Worker is functional
[08:08:27.780] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:27.780] | : . ' , ; ` | : Listing all futures
[08:08:27.780] | : . ' , ; ` | : Number of registered futures: 1
[08:08:27.781] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:27.781] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:27.781] | : . ' , ; requestNode() ... done
[08:08:27.781] | : . ' , ; cluster node index: 2
[08:08:27.781] | : . ' , requestWorker() ... done
[08:08:27.782] | : . ' , eraseGlobalEnvironment() ...
[08:08:27.782] | : . ' , eraseGlobalEnvironment() ... done
[08:08:27.785] | : . ' , launchFuture() ...
[08:08:27.785] | : . ' , ; cluster node index: 2
[08:08:27.786] | : . ' , ; getFutureData() ...
[08:08:27.786] | : . ' , ; ` getFutureCore() ...
[08:08:27.786] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:27.786] | : . ' , ; ` getFutureCore() ... done
[08:08:27.786] | : . ' , ; ` getFutureCapture() ...
[08:08:27.786] | : . ' , ; ` getFutureCapture() ... done
[08:08:27.787] | : . ' , ; ` getFutureContext() ...
[08:08:27.787] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:27.787] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:27.787] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:27.787] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:27.788] | : . ' , ; ` getFutureContext() ... done
[08:08:27.788] | : . ' , ; getFutureData() ... done
[08:08:27.788] | : . ' , ; FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'add', earlySignal = 0) ...
[08:08:27.788] | : . ' , ; ` Appended future to position #2
[08:08:27.789] | : . ' , ; ` Number of registered futures: 2
[08:08:27.789] | : . ' , ; FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'add', earlySignal = 0) ... done
[08:08:27.789] | : . ' , launchFuture() ... done
[08:08:27.789] | : . ' , MultisessionFuture started
[08:08:27.789] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:27.790] | : . Launching futures ... done
[08:08:27.790] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:27.790] | : Using MultisessionFutureBackend ... done
[08:08:27.790] | run() for ‘Future’ (<unnamed-80>) ... done
[08:08:27.790] future(..., label = NULL) ... done
[08:08:27.791] future(..., label = NULL) ...
[08:08:27.791] | lazy: FALSE
[08:08:27.791] | stdout: TRUE
[08:08:27.791] | conditions: [n=1] ‘condition’
[08:08:27.791] | gc: FALSE
[08:08:27.792] | earlySignal: FALSE
[08:08:27.792] | getGlobalsAndPackages() ...
[08:08:27.792] | : Searching for globals ...
[08:08:27.797] | : . globals found: [1] ‘{’
[08:08:27.797] | : Searching for globals ... done
[08:08:27.797] | : Resolving globals: FALSE
[08:08:27.797] | : Search for packages associated with the globals ...
[08:08:27.797] | : . Packages associated with globals: [1] ‘base’
[08:08:27.797] | : . Packages: [1] ‘base’
[08:08:27.798] | : Search for packages associated with the globals ... done
[08:08:27.798] | : Packages after dropping 'base': [0] 
[08:08:27.798] | : globals: [0] 
[08:08:27.798] | : packages: [0] 
[08:08:27.798] | getGlobalsAndPackages() ... done
[08:08:27.798] | run() for ‘Future’ (<unnamed-81>) ...
[08:08:27.798] | : state: ‘created’
[08:08:27.798] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:27.799] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:27.799] | : Using MultisessionFutureBackend ...
[08:08:27.799] | : . Number of futures since start: 5 (5 created, 5 launched, 4 finished)
[08:08:27.799] | : . Launching futures ...
[08:08:27.799] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:27.799] | : . ' , Workers: [n=2]
[08:08:27.799] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:27.801] | : . ' , FutureRegistry: ‘workers-ebcf5645fe5296532f48b425138b7006’
[08:08:27.801] | : . ' , requestWorker() ...
[08:08:27.801] | : . ' , ; requestNode() ...
[08:08:27.801] | : . ' , ; ` Number of workers: 2
[08:08:27.801] | : . ' , ; ` Polling for a free worker ...
[08:08:27.801] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:27.802] | : . ' , ; ` | : Listing all futures
[08:08:27.802] | : . ' , ; ` | : Number of registered futures: 2
[08:08:27.802] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:27.802] | : . ' , ; ` | Poll #1 (0): usedNodes() = 2, workers = 2
[08:08:27.812] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'collect-first', earlySignal = 1) ...
[08:08:27.812] | : . ' , ; ` | : collectValues('workers-ebcf5645fe5296532f48b425138b7006', firstOnly = TRUE) ...
[08:08:27.813] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-79>) ...
[08:08:27.813] | : . ' , ; ` | : . ' Cluster node socket connection: index=4, id=1255
[08:08:27.813] | : . ' , ; ` | : . ' assertValidConnection() ...
[08:08:27.814] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:27.814] | : . ' , ; ` | : . ' assertValidConnection() ... done
[08:08:27.814] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ...
[08:08:27.815] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:27.815] | : . ' , ; ` | : . ' , [1] TRUE
[08:08:27.815] | : . ' , ; ` | : . ' , received data:
[08:08:27.815] | : . ' , ; ` | : . ' , List of 5
[08:08:27.815] | : . ' , ; ` | : . ' ,  $ type   : chr "VALUE"
[08:08:27.815] | : . ' , ; ` | : . ' ,  $ value  :List of 16
[08:08:27.815] | : . ' , ; ` | : . ' ,   ..$ value              : num 2
[08:08:27.815] | : . ' , ; ` | : . ' ,   ..$ visible            : logi TRUE
[08:08:27.815] | : . ' , ; ` | : . ' ,   ..$ stdout             : chr ""
[08:08:27.815] | : . ' , ; ` | : . ' ,   ..$ conditions         : list()
[08:08:27.815] | : . ' , ; ` | : . ' ,   ..$ rng                : logi FALSE
[08:08:27.815] | : . ' , ; ` | : . ' ,   ..$ seed               : NULL
[08:08:27.815] | : . ' , ; ` | : . ' ,   ..$ misuseGlobalEnv    : NULL
[08:08:27.815] | : . ' , ; ` | : . ' ,   ..$ misuseConnections  :List of 3
[08:08:27.815] | : . ' , ; ` | : . ' ,   .. ..$ added   : NULL
[08:08:27.815] | : . ' , ; ` | : . ' ,   .. ..$ removed : NULL
[08:08:27.815] | : . ' , ; ` | : . ' ,   .. ..$ replaced: NULL
[08:08:27.815] | : . ' , ; ` | : . ' ,   ..$ misuseDevices      : NULL
[08:08:27.815] | : . ' , ; ` | : . ' ,   ..$ misuseDefaultDevice: list()
[08:08:27.815] | : . ' , ; ` | : . ' ,   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:27"
[08:08:27.815] | : . ' , ; ` | : . ' ,   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:27"
[08:08:27.815] | : . ' , ; ` | : . ' ,   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "79"
[08:08:27.815] | : . ' , ; ` | : . ' ,   ..$ session_uuid       : chr "363fe616e76346839f7969755b6a4995"
[08:08:27.815] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "source")=List of 5
[08:08:27.815] | : . ' , ; ` | : . ' ,   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:27.815] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:27.815] | : . ' , ; ` | : . ' ,   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:27.815] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:27.815] | : . ' , ; ` | : . ' ,   .. .. ..$ pid   : int 69106
[08:08:27.815] | : . ' , ; ` | : . ' ,   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:27"
[08:08:27.815] | : . ' , ; ` | : . ' ,   .. .. ..$ random: int 2147483647
[08:08:27.815] | : . ' , ; ` | : . ' ,   ..$ r_info             :List of 4
[08:08:27.815] | : . ' , ; ` | : . ' ,   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:27.815] | : . ' , ; ` | : . ' ,   .. .. ..$ : int [1:3] 4 5 0
[08:08:27.815] | : . ' , ; ` | : . ' ,   .. ..$ os           : chr "unix"
[08:08:27.815] | : . ' , ; ` | : . ' ,   .. ..$ os_name      : chr "Linux"
[08:08:27.815] | : . ' , ; ` | : . ' ,   .. ..$ captures_utf8: logi TRUE
[08:08:27.815] | : . ' , ; ` | : . ' ,   ..$ version            : chr "1.8"
[08:08:27.815] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr "FutureResult"
[08:08:27.815] | : . ' , ; ` | : . ' ,  $ success: logi TRUE
[08:08:27.815] | : . ' , ; ` | : . ' ,  $ time   : 'proc_time' Named num [1:5] 0.004 0 0.005 0 0
[08:08:27.815] | : . ' , ; ` | : . ' ,   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:27.815] | : . ' , ; ` | : . ' ,  $ tag    : NULL
[08:08:27.835] | : . ' , ; ` | : . ' , Received FutureResult
[08:08:27.836] | : . ' , ; ` | : . ' , FutureResult:
[08:08:27.836] | : . ' , ; ` | : . ' , value: ‘numeric’
[08:08:27.836] | : . ' , ; ` | : . ' , visible: TRUE
[08:08:27.836] | : . ' , ; ` | : . ' , stdout: character
[08:08:27.836] | : . ' , ; ` | : . ' , conditions: [n = 0] 
[08:08:27.836] | : . ' , ; ` | : . ' , RNG used: FALSE
[08:08:27.836] | : . ' , ; ` | : . ' , duration: 0.003837109 secs (started 2025-06-17 08:08:27.747231)
[08:08:27.836] | : . ' , ; ` | : . ' , version: 1.8
[08:08:27.836] | : . ' , ; ` | : . ' , FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'remove', earlySignal = 0) ...
[08:08:27.836] | : . ' , ; ` | : . ' , ; Removed future from position #1
[08:08:27.836] | : . ' , ; ` | : . ' , ; Number of registered futures: 1
[08:08:27.837] | : . ' , ; ` | : . ' , FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'remove', earlySignal = 0) ... done
[08:08:27.837] | : . ' , ; ` | : . ' , Erased future from future backend
[08:08:27.837] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:27.837] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:27.837] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:27.837] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:27.837] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:27.837] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:27.837] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:27.838] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:27.838] | : . ' , ; ` | : . ' , ;  int 0
[08:08:27.838] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:27.838] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ... done
[08:08:27.838] | : . ' , ; ` | : . ' receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:27.838] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-79>) ... done
[08:08:27.838] | : . ' , ; ` | : . assertFutureResult() ...
[08:08:27.839] | : . ' , ; ` | : . ' Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:27.839] | : . ' , ; ` | : . ' Future uuid: 79
[08:08:27.839] | : . ' , ; ` | : . ' identical; success
[08:08:27.839] | : . ' , ; ` | : . assertFutureResult() ... done
[08:08:27.839] | : . ' , ; ` | : . Future at position #1 is resolved ...
[08:08:27.839] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-79>) ...
[08:08:27.839] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:27.839] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:27.839] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:27.839] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:27.840] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:27.840] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:27.840] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:27.840] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:27.840] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:27.840] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:27.840] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:27.840] | : . ' , ; ` | : . ' , ;  int 0
[08:08:27.841] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:27.841] | : . ' , ; ` | : . ' , check for misuse ...
[08:08:27.841] | : . ' , ; ` | : . ' , check for misuse ... done
[08:08:27.841] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-79>) ... done
[08:08:27.841] | : . ' , ; ` | : . Future at position #1 is resolved ... done
[08:08:27.841] | : . ' , ; ` | : collectValues('workers-ebcf5645fe5296532f48b425138b7006', firstOnly = TRUE) ... done
[08:08:27.841] | : . ' , ; ` | : Remove collected futures ...
[08:08:27.841] | : . ' , ; ` | : . Indices of futures to drop: [n=1] ‘1’
[08:08:27.842] | : . ' , ; ` | : Remove collected futures ... done
[08:08:27.842] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'collect-first', earlySignal = 1) ... done
[08:08:27.842] | : . ' , ; ` | Early signaling of 2 future candidates ...
[08:08:27.842] | : . ' , ; ` | Number of futures with early signaling requested: 0
[08:08:27.842] | : . ' , ; ` | Early signaling of 2 future candidates ... done
[08:08:27.842] | : . ' , ; ` | Number of registered futures: 2
[08:08:27.842] | : . ' , ; ` Polling for a free worker ... done
[08:08:27.842] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:27.842] | : . ' , ; ` | Listing all futures
[08:08:27.843] | : . ' , ; ` | Number of registered futures: 1
[08:08:27.843] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:27.843] | : . ' , ; ` Total time: 0.0409002304077148
[08:08:27.843] | : . ' , ; requestNode() ... done
[08:08:27.843] | : . ' , ; FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:27.843] | : . ' , ; ` Listing all futures
[08:08:27.843] | : . ' , ; ` Number of registered futures: 1
[08:08:27.843] | : . ' , ; FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:27.843] | : . ' , ; avail: [n=2] ‘1’
[08:08:27.843] | : . ' , ; Index of first available worker: 1
[08:08:27.844] | : . ' , ; Validate that the worker is functional ...
[08:08:27.938] | : . ' , ; ` Worker is functional
[08:08:27.938] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:27.938] | : . ' , ; ` | Listing all futures
[08:08:27.938] | : . ' , ; ` | Number of registered futures: 1
[08:08:27.939] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:27.939] | : . ' , ; Validate that the worker is functional ... done
[08:08:27.939] | : . ' , requestWorker() ... done
[08:08:27.939] | : . ' , cluster node index: 1
[08:08:27.939] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:27.939] | : . ' eraseGlobalEnvironment() ...
[08:08:27.939] | : . ' eraseGlobalEnvironment() ... done
[08:08:27.940] | : . ' launchFuture() ...
[08:08:27.940] | : . ' , cluster node index: 1
[08:08:27.940] | : . ' , getFutureData() ...
[08:08:27.940] | : . ' , ; getFutureCore() ...
[08:08:27.940] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:27.940] | : . ' , ; getFutureCore() ... done
[08:08:27.940] | : . ' , ; getFutureCapture() ...
[08:08:27.940] | : . ' , ; getFutureCapture() ... done
[08:08:27.940] | : . ' , ; getFutureContext() ...
[08:08:27.941] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:27.941] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:27.941] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:27.941] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:27.941] | : . ' , ; getFutureContext() ... done
[08:08:27.941] | : . ' , getFutureData() ... done
[08:08:27.941] | : . ' , FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'add', earlySignal = 0) ...
[08:08:27.942] | : . ' , ; Appended future to position #2
[08:08:27.942] | : . ' , ; Number of registered futures: 2
[08:08:27.942] | : . ' , FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'add', earlySignal = 0) ... done
[08:08:27.942] | : . ' launchFuture() ... done
[08:08:27.942] | : . ' MultisessionFuture started
[08:08:27.942] | : . Launching futures ... done
[08:08:27.942] | : Using MultisessionFutureBackend ... done
[08:08:27.942] | : Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:27.943] | run() for ‘Future’ (<unnamed-81>) ... done
[08:08:27.943] future(..., label = NULL) ... done

<environment: 0x5643046915f0> 
<environment: 0x564303f9c1b8> 
[08:08:27.944] resolved() for environment ...
[08:08:27.944] | resolved() for list ...
[08:08:27.944] | : Number of elements: 4
[08:08:27.944] | : Number of futures: 4
[08:08:27.944] | : resolved() for MultisessionFuture (<unnamed-80>) ...
[08:08:27.945] | : . Cluster node socket connection: index=5, id=1256
[08:08:27.945] | : . assertValidConnection() ...
[08:08:27.945] | : . ' cluster node index: 2
[08:08:27.945] | : . assertValidConnection() ... done
[08:08:27.946] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:27.946] | : . ' cluster node index: 2
[08:08:27.946] | : . ' [1] TRUE
[08:08:27.946] | : . ' received data:
[08:08:27.946] | : . ' List of 5
[08:08:27.946] | : . '  $ type   : chr "VALUE"
[08:08:27.946] | : . '  $ value  :List of 16
[08:08:27.946] | : . '   ..$ value              : NULL
[08:08:27.946] | : . '   ..$ visible            : logi TRUE
[08:08:27.946] | : . '   ..$ stdout             : chr ""
[08:08:27.946] | : . '   ..$ conditions         : list()
[08:08:27.946] | : . '   ..$ rng                : logi FALSE
[08:08:27.946] | : . '   ..$ seed               : NULL
[08:08:27.946] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:27.946] | : . '   ..$ misuseConnections  :List of 3
[08:08:27.946] | : . '   .. ..$ added   : NULL
[08:08:27.946] | : . '   .. ..$ removed : NULL
[08:08:27.946] | : . '   .. ..$ replaced: NULL
[08:08:27.946] | : . '   ..$ misuseDevices      : NULL
[08:08:27.946] | : . '   ..$ misuseDefaultDevice: list()
[08:08:27.946] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:27"
[08:08:27.946] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:27"
[08:08:27.946] | : . '   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "80"
[08:08:27.946] | : . '   ..$ session_uuid       : chr "bd12039d41799c8c6e56f5926a91e416"
[08:08:27.946] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:27.946] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:27.946] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:27.946] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:27.946] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:27.946] | : . '   .. .. ..$ pid   : int 69105
[08:08:27.946] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:27"
[08:08:27.946] | : . '   .. .. ..$ random: int 2147483647
[08:08:27.946] | : . '   ..$ r_info             :List of 4
[08:08:27.946] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:27.946] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:27.946] | : . '   .. ..$ os           : chr "unix"
[08:08:27.946] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:27.946] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:27.946] | : . '   ..$ version            : chr "1.8"
[08:08:27.946] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:27.946] | : . '  $ success: logi TRUE
[08:08:27.946] | : . '  $ time   : 'proc_time' Named num [1:5] 0.004 0 0.004 0 0
[08:08:27.946] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:27.946] | : . '  $ tag    : NULL
[08:08:27.957] | : . ' Received FutureResult
[08:08:27.957] | : . ' FutureResult:
[08:08:27.957] | : . ' value: ‘NULL’
[08:08:27.957] | : . ' visible: TRUE
[08:08:27.957] | : . ' stdout: character
[08:08:27.957] | : . ' conditions: [n = 0] 
[08:08:27.957] | : . ' RNG used: FALSE
[08:08:27.957] | : . ' duration: 0.003522635 secs (started 2025-06-17 08:08:27.829345)
[08:08:27.957] | : . ' version: 1.8
[08:08:27.957] | : . ' FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'remove', earlySignal = 0) ...
[08:08:27.958] | : . ' , Removed future from position #1
[08:08:27.958] | : . ' , Number of registered futures: 1
[08:08:27.958] | : . ' FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'remove', earlySignal = 0) ... done
[08:08:27.958] | : . ' Erased future from future backend
[08:08:27.958] | : . ' result() for ClusterFuture ...
[08:08:27.958] | : . ' , result already collected: FutureResult
[08:08:27.958] | : . ' result() for ClusterFuture ... done
[08:08:27.958] | : . ' signalConditions() ...
[08:08:27.959] | : . ' , include = ‘immediateCondition’
[08:08:27.959] | : . ' , exclude = 
[08:08:27.959] | : . ' , resignal = FALSE
[08:08:27.959] | : . ' , Number of conditions: 0
[08:08:27.959] | : . ' ,  int 0
[08:08:27.959] | : . ' signalConditions() ... done
[08:08:27.959] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:27.960] | : . receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:27.960] | : resolved() for MultisessionFuture (<unnamed-80>) ... done
[08:08:27.960] | : assertFutureResult() ...
[08:08:27.960] | : . Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:27.960] | : . Future uuid: 80
[08:08:27.960] | : . identical; success
[08:08:27.960] | : assertFutureResult() ... done
[08:08:27.960] | : resolved() for MultisessionFuture (<unnamed-81>) ...
[08:08:27.960] | : . Cluster node socket connection: index=4, id=1255
[08:08:27.961] | : . assertValidConnection() ...
[08:08:27.961] | : . ' cluster node index: 1
[08:08:27.961] | : . assertValidConnection() ... done
[08:08:27.971] | : . socketSelect(list(<connection #4 (id=1255)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:27.972] | : resolved() for MultisessionFuture (<unnamed-81>) ... done
[08:08:27.972] | resolved() for list ... done
[08:08:27.972] resolved() for environment ... done
 Named logi [1:4] TRUE TRUE TRUE FALSE
 - attr(*, "names")= chr [1:4] "a" "b" "c" "d"
[08:08:27.973] value() for MultisessionFuture (<unnamed-81>) ...
[08:08:27.973] | result() for ClusterFuture ...
[08:08:27.973] | : assertValidConnection() ...
[08:08:27.973] | : . cluster node index: 1
[08:08:27.973] | : assertValidConnection() ... done
[08:08:27.974] | : receiveMessageFromWorker() for ClusterFuture ...
[08:08:27.974] | : . cluster node index: 1
[08:08:27.985] | : . [1] TRUE
[08:08:27.985] | : . received data:
[08:08:27.985] | : . List of 5
[08:08:27.985] | : .  $ type   : chr "VALUE"
[08:08:27.985] | : .  $ value  :List of 16
[08:08:27.985] | : .   ..$ value              : num 4
[08:08:27.985] | : .   ..$ visible            : logi TRUE
[08:08:27.985] | : .   ..$ stdout             : chr ""
[08:08:27.985] | : .   ..$ conditions         : list()
[08:08:27.985] | : .   ..$ rng                : logi FALSE
[08:08:27.985] | : .   ..$ seed               : NULL
[08:08:27.985] | : .   ..$ misuseGlobalEnv    : NULL
[08:08:27.985] | : .   ..$ misuseConnections  :List of 3
[08:08:27.985] | : .   .. ..$ added   : NULL
[08:08:27.985] | : .   .. ..$ removed : NULL
[08:08:27.985] | : .   .. ..$ replaced: NULL
[08:08:27.985] | : .   ..$ misuseDevices      : NULL
[08:08:27.985] | : .   ..$ misuseDefaultDevice: list()
[08:08:27.985] | : .   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:27"
[08:08:27.985] | : .   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:27"
[08:08:27.985] | : .   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "81"
[08:08:27.985] | : .   ..$ session_uuid       : chr "363fe616e76346839f7969755b6a4995"
[08:08:27.985] | : .   .. ..- attr(*, "source")=List of 5
[08:08:27.985] | : .   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:27.985] | : .   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:27.985] | : .   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:27.985] | : .   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:27.985] | : .   .. .. ..$ pid   : int 69106
[08:08:27.985] | : .   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:27"
[08:08:27.985] | : .   .. .. ..$ random: int 2147483647
[08:08:27.985] | : .   ..$ r_info             :List of 4
[08:08:27.985] | : .   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:27.985] | : .   .. .. ..$ : int [1:3] 4 5 0
[08:08:27.985] | : .   .. ..$ os           : chr "unix"
[08:08:27.985] | : .   .. ..$ os_name      : chr "Linux"
[08:08:27.985] | : .   .. ..$ captures_utf8: logi TRUE
[08:08:27.985] | : .   ..$ version            : chr "1.8"
[08:08:27.985] | : .   ..- attr(*, "class")= chr "FutureResult"
[08:08:27.985] | : .  $ success: logi TRUE
[08:08:27.985] | : .  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:27.985] | : .   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:27.985] | : .  $ tag    : NULL
[08:08:27.998] | : . Received FutureResult
[08:08:27.998] | : . FutureResult:
[08:08:27.998] | : . value: ‘numeric’
[08:08:27.998] | : . visible: TRUE
[08:08:27.998] | : . stdout: character
[08:08:27.998] | : . conditions: [n = 0] 
[08:08:27.998] | : . RNG used: FALSE
[08:08:27.998] | : . duration: 0.002601385 secs (started 2025-06-17 08:08:27.982249)
[08:08:27.998] | : . version: 1.8
[08:08:27.999] | : . FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'remove', earlySignal = 0) ...
[08:08:27.999] | : . ' Removed future from position #1
[08:08:27.999] | : . ' Number of registered futures: 0
[08:08:27.999] | : . FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'remove', earlySignal = 0) ... done
[08:08:27.999] | : . Erased future from future backend
[08:08:27.999] | : . result() for ClusterFuture ...
[08:08:27.999] | : . ' result already collected: FutureResult
[08:08:28.000] | : . result() for ClusterFuture ... done
[08:08:28.000] | : . signalConditions() ...
[08:08:28.000] | : . ' include = ‘immediateCondition’
[08:08:28.000] | : . ' exclude = 
[08:08:28.000] | : . ' resignal = FALSE
[08:08:28.000] | : . ' Number of conditions: 0
[08:08:28.000] | : . '  int 0
[08:08:28.001] | : . signalConditions() ... done
[08:08:28.001] | : receiveMessageFromWorker() for ClusterFuture ... done
[08:08:28.001] | result() for ClusterFuture ... done
[08:08:28.001] | result() for ClusterFuture ...
[08:08:28.001] | : result already collected: FutureResult
[08:08:28.001] | result() for ClusterFuture ... done
[08:08:28.001] | signalConditions() ...
[08:08:28.001] | : include = ‘immediateCondition’
[08:08:28.001] | : exclude = 
[08:08:28.001] | : resignal = FALSE
[08:08:28.002] | : Number of conditions: 0
[08:08:28.002] | :  int 0
[08:08:28.002] | signalConditions() ... done
[08:08:28.002] | relay stdout ...
[08:08:28.002] | relay stdout ... done
[08:08:28.002] | check for misuse ...
[08:08:28.002] | check for misuse ... done
[08:08:28.003] value() for MultisessionFuture (<unnamed-81>) ... done
[08:08:28.003] value() for listenv ...
[08:08:28.003] | recursive: 0
[08:08:28.003] | reduce: FALSE
[08:08:28.004] | length: 4
[08:08:28.004] | elements: ‘a’, ‘b’, ‘c’, ‘d’
[08:08:28.004] | Number of remaining objects: 4
[08:08:28.004] | checking value #1:
[08:08:28.004] | 'obj' is atomic
[08:08:28.004] | signalConditionsASAP(numeric, pos=1) ...
[08:08:28.004] | : nx: 4
[08:08:28.004] | : relay: TRUE
[08:08:28.004] | : stdout: TRUE
[08:08:28.005] | : signal: TRUE
[08:08:28.005] | : resignal: FALSE
[08:08:28.005] | : force: TRUE
[08:08:28.005] | : relayed: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:28.005] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:28.005] | : until=2
[08:08:28.005] | : relaying element #2
[08:08:28.005] | : relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:28.005] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:28.005] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:28.006] | length: 3 (resolved future 1)
[08:08:28.006] value() for listenv ... done
[08:08:28.006] checking value #2:
[08:08:28.006] 'obj' is MultisessionFuture
[08:08:28.006] MultisessionFuture #2
[08:08:28.006] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:28.006] | nx: 4
[08:08:28.006] | relay: TRUE
[08:08:28.006] | stdout: TRUE
[08:08:28.007] | signal: TRUE
[08:08:28.007] | resignal: FALSE
[08:08:28.007] | force: TRUE
[08:08:28.007] | relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:28.007] | queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:28.007] | until=2
[08:08:28.007] | relaying element #2
[08:08:28.007] | value() for MultisessionFuture (<unnamed-79>) ...
[08:08:28.007] | : result() for ClusterFuture ...
[08:08:28.007] | : . result already collected: FutureResult
[08:08:28.007] | : result() for ClusterFuture ... done
[08:08:28.008] | : result() for ClusterFuture ...
[08:08:28.008] | : . result already collected: FutureResult
[08:08:28.008] | : result() for ClusterFuture ... done
[08:08:28.008] | : signalConditions() ...
[08:08:28.008] | : . include = ‘immediateCondition’
[08:08:28.008] | : . exclude = 
[08:08:28.008] | : . resignal = FALSE
[08:08:28.008] | : . Number of conditions: 0
[08:08:28.008] | : .  int 0
[08:08:28.009] | : signalConditions() ... done
[08:08:28.009] | : relay stdout ...
[08:08:28.009] | : relay stdout ... done
[08:08:28.009] | : check for misuse ...
[08:08:28.009] | : check for misuse ... done
[08:08:28.009] | value() for MultisessionFuture (<unnamed-79>) ... done
[08:08:28.009] | result() for ClusterFuture ...
[08:08:28.009] | : result already collected: FutureResult
[08:08:28.010] | result() for ClusterFuture ... done
[08:08:28.010] | signalConditions() ...
[08:08:28.010] | : include = ‘immediateCondition’
[08:08:28.010] | : exclude = 
[08:08:28.010] | : resignal = FALSE
[08:08:28.010] | : Number of conditions: 0
[08:08:28.010] | :  int 0
[08:08:28.011] | signalConditions() ... done
[08:08:28.011] | result() for ClusterFuture ...
[08:08:28.011] | : result already collected: FutureResult
[08:08:28.011] | result() for ClusterFuture ... done
[08:08:28.011] | signalConditions() ...
[08:08:28.011] | : include = ‘condition’
[08:08:28.011] | : exclude = ‘error’, ‘immediateCondition’
[08:08:28.011] | : resignal = TRUE
[08:08:28.011] | : Number of conditions: 0
[08:08:28.011] | :  int 0
[08:08:28.012] | signalConditions() ... done
[08:08:28.012] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:28.012] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:28.012] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:28.012] value(<MultisessionFuture>, ...) ...
[08:08:28.012] value(<MultisessionFuture>, ...) ... done
[08:08:28.012] value() for MultisessionFuture (<unnamed-79>) ...
[08:08:28.013] | result() for ClusterFuture ...
[08:08:28.013] | : result already collected: FutureResult
[08:08:28.013] | result() for ClusterFuture ... done
[08:08:28.013] | result() for ClusterFuture ...
[08:08:28.013] | : result already collected: FutureResult
[08:08:28.013] | result() for ClusterFuture ... done
[08:08:28.013] | signalConditions() ...
[08:08:28.013] | : include = ‘immediateCondition’
[08:08:28.013] | : exclude = 
[08:08:28.013] | : resignal = FALSE
[08:08:28.013] | : Number of conditions: 0
[08:08:28.014] | :  int 0
[08:08:28.014] | signalConditions() ... done
[08:08:28.014] | check for misuse ...
[08:08:28.014] | check for misuse ... done
[08:08:28.014] value() for MultisessionFuture (<unnamed-79>) ... done
[08:08:28.014] value: <numeric>
[08:08:28.015] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:28.015] | nx: 4
[08:08:28.015] | relay: TRUE
[08:08:28.015] | stdout: TRUE
[08:08:28.015] | signal: TRUE
[08:08:28.015] | resignal: FALSE
[08:08:28.015] | force: TRUE
[08:08:28.015] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:28.015] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:28.015] | until=3
[08:08:28.016] | relaying element #3
[08:08:28.016] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:28.016] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:28.016] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:28.016] resolve() for MultisessionFuture ...
[08:08:28.016] resolve() for MultisessionFuture ... done
[08:08:28.016] length: 2 (resolved future 2)

[08:08:28.016] checking value #3:
[08:08:28.016] 'obj' is MultisessionFuture
[08:08:28.016] MultisessionFuture #3
[08:08:28.017] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:28.017] | nx: 4
[08:08:28.017] | relay: TRUE
[08:08:28.017] | stdout: TRUE
[08:08:28.017] | signal: TRUE
[08:08:28.017] | resignal: FALSE
[08:08:28.017] | force: TRUE
[08:08:28.017] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:28.017] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:28.017] | until=3
[08:08:28.017] | relaying element #3
[08:08:28.018] | value() for MultisessionFuture (<unnamed-80>) ...
[08:08:28.018] | : result() for ClusterFuture ...
[08:08:28.018] | : . result already collected: FutureResult
[08:08:28.018] | : result() for ClusterFuture ... done
[08:08:28.018] | : result() for ClusterFuture ...
[08:08:28.018] | : . result already collected: FutureResult
[08:08:28.018] | : result() for ClusterFuture ... done
[08:08:28.018] | : signalConditions() ...
[08:08:28.018] | : . include = ‘immediateCondition’
[08:08:28.018] | : . exclude = 
[08:08:28.019] | : . resignal = FALSE
[08:08:28.019] | : . Number of conditions: 0
[08:08:28.019] | : .  int 0
[08:08:28.019] | : signalConditions() ... done
[08:08:28.019] | : relay stdout ...
[08:08:28.019] | : relay stdout ... done
[08:08:28.019] | : check for misuse ...
[08:08:28.020] | : check for misuse ... done
[08:08:28.020] | value() for MultisessionFuture (<unnamed-80>) ... done
[08:08:28.020] | result() for ClusterFuture ...
[08:08:28.020] | : result already collected: FutureResult
[08:08:28.020] | result() for ClusterFuture ... done
[08:08:28.020] | signalConditions() ...
[08:08:28.020] | : include = ‘immediateCondition’
[08:08:28.020] | : exclude = 
[08:08:28.020] | : resignal = FALSE
[08:08:28.020] | : Number of conditions: 0
[08:08:28.021] | :  int 0
[08:08:28.021] | signalConditions() ... done
[08:08:28.021] | result() for ClusterFuture ...
[08:08:28.021] | : result already collected: FutureResult
[08:08:28.021] | result() for ClusterFuture ... done
[08:08:28.021] | signalConditions() ...
[08:08:28.021] | : include = ‘condition’
[08:08:28.022] | : exclude = ‘error’, ‘immediateCondition’
[08:08:28.022] | : resignal = TRUE
[08:08:28.022] | : Number of conditions: 0
[08:08:28.022] | :  int 0
[08:08:28.022] | signalConditions() ... done
[08:08:28.022] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:28.022] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:28.022] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:28.023] value(<MultisessionFuture>, ...) ...
[08:08:28.023] value(<MultisessionFuture>, ...) ... done
[08:08:28.023] value() for MultisessionFuture (<unnamed-80>) ...
[08:08:28.023] | result() for ClusterFuture ...
[08:08:28.023] | : result already collected: FutureResult
[08:08:28.023] | result() for ClusterFuture ... done
[08:08:28.023] | result() for ClusterFuture ...
[08:08:28.023] | : result already collected: FutureResult
[08:08:28.023] | result() for ClusterFuture ... done
[08:08:28.023] | signalConditions() ...
[08:08:28.024] | : include = ‘immediateCondition’
[08:08:28.024] | : exclude = 
[08:08:28.024] | : resignal = FALSE
[08:08:28.024] | : Number of conditions: 0
[08:08:28.024] | :  int 0
[08:08:28.024] | signalConditions() ... done
[08:08:28.024] | check for misuse ...
[08:08:28.025] | check for misuse ... done
[08:08:28.025] value() for MultisessionFuture (<unnamed-80>) ... done
[08:08:28.025] value: <NULL>
[08:08:28.025] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:28.025] | nx: 4
[08:08:28.025] | relay: TRUE
[08:08:28.025] | stdout: TRUE
[08:08:28.025] | signal: TRUE
[08:08:28.025] | resignal: FALSE
[08:08:28.026] | force: TRUE
[08:08:28.026] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:28.026] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:28.026] | until=4
[08:08:28.026] | relaying element #4
[08:08:28.026] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:28.026] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:28.026] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:28.026] resolve() for MultisessionFuture ...
[08:08:28.026] resolve() for MultisessionFuture ... done
[08:08:28.027] length: 1 (resolved future 3)

[08:08:28.027] checking value #4:
[08:08:28.027] 'obj' is atomic
[08:08:28.027] signalConditionsASAP(numeric, pos=4) ...
[08:08:28.027] | nx: 4
[08:08:28.027] | relay: TRUE
[08:08:28.027] | stdout: TRUE
[08:08:28.027] | signal: TRUE
[08:08:28.027] | resignal: FALSE
[08:08:28.027] | force: TRUE
[08:08:28.028] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:28.028] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:28.028] | until=4
[08:08:28.028] | relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:28.028] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:28.028] signalConditionsASAP(numeric, pos=4) ... done
[08:08:28.028] length: 0 (resolved future 4)

[08:08:28.028] Relaying remaining futures ...
[08:08:28.028] | signalConditionsASAP(NULL, pos=0) ...
[08:08:28.029] | : nx: 4
[08:08:28.029] | : relay: TRUE
[08:08:28.029] | : stdout: TRUE
[08:08:28.029] | : signal: TRUE
[08:08:28.029] | : resignal: FALSE
[08:08:28.029] | : force: TRUE
[08:08:28.029] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:28.029] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
 - flush all
[08:08:28.029] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:28.030] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:28.030] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:28.030] Relaying remaining futures ... done

List of 4
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
Dimensions: c(2, 3)
[08:08:28.032] future(..., label = NULL) ...
[08:08:28.032] | lazy: FALSE
[08:08:28.032] | stdout: TRUE
[08:08:28.032] | conditions: [n=1] ‘condition’
[08:08:28.032] | gc: FALSE
[08:08:28.032] | earlySignal: FALSE
[08:08:28.032] | getGlobalsAndPackages() ...
[08:08:28.032] | : Searching for globals ...
[08:08:28.034] | : . globals found: [0] 
[08:08:28.034] | : Searching for globals ... done
[08:08:28.034] | : globals: [0] <none>
[08:08:28.034] | : packages: [0] <none>
[08:08:28.034] | getGlobalsAndPackages() ... done
[08:08:28.034] | run() for ‘Future’ (<unnamed-82>) ...
[08:08:28.034] | : state: ‘created’
[08:08:28.035] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:28.035] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:28.035] | : Using MultisessionFutureBackend ...
[08:08:28.035] | : . Number of futures since start: 6 (6 created, 6 launched, 8 finished)
[08:08:28.035] | : . Launching futures ...
[08:08:28.035] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:28.035] | : . ' , Workers: [n=2]
[08:08:28.035] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:28.037] | : . ' , FutureRegistry: ‘workers-ebcf5645fe5296532f48b425138b7006’
[08:08:28.037] | : . ' , requestWorker() ...
[08:08:28.037] | : . ' , ; requestNode() ...
[08:08:28.037] | : . ' , ; ` Number of workers: 2
[08:08:28.037] | : . ' , ; ` Polling for a free worker ...
[08:08:28.038] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:28.038] | : . ' , ; ` | : Listing all futures
[08:08:28.038] | : . ' , ; ` | : Number of registered futures: 0
[08:08:28.038] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:28.038] | : . ' , ; ` | Total time: 0
[08:08:28.038] | : . ' , ; ` Polling for a free worker ... done
[08:08:28.038] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:28.038] | : . ' , ; ` | Listing all futures
[08:08:28.038] | : . ' , ; ` | Number of registered futures: 0
[08:08:28.038] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:28.039] | : . ' , ; ` avail: [n=2] ‘1’, ‘2’
[08:08:28.039] | : . ' , ; ` Index of first available worker: 1
[08:08:28.039] | : . ' , ; ` Validate that the worker is functional ...
[08:08:28.102] | : . ' , ; ` | Worker is functional
[08:08:28.103] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:28.103] | : . ' , ; ` | : Listing all futures
[08:08:28.103] | : . ' , ; ` | : Number of registered futures: 0
[08:08:28.103] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:28.103] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:28.103] | : . ' , ; requestNode() ... done
[08:08:28.103] | : . ' , ; cluster node index: 1
[08:08:28.103] | : . ' , requestWorker() ... done
[08:08:28.104] | : . ' , eraseGlobalEnvironment() ...
[08:08:28.104] | : . ' , eraseGlobalEnvironment() ... done
[08:08:28.104] | : . ' , launchFuture() ...
[08:08:28.104] | : . ' , ; cluster node index: 1
[08:08:28.104] | : . ' , ; getFutureData() ...
[08:08:28.104] | : . ' , ; ` getFutureCore() ...
[08:08:28.105] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:28.105] | : . ' , ; ` getFutureCore() ... done
[08:08:28.105] | : . ' , ; ` getFutureCapture() ...
[08:08:28.105] | : . ' , ; ` getFutureCapture() ... done
[08:08:28.105] | : . ' , ; ` getFutureContext() ...
[08:08:28.105] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:28.105] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:28.105] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:28.105] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:28.106] | : . ' , ; ` getFutureContext() ... done
[08:08:28.106] | : . ' , ; getFutureData() ... done
[08:08:28.106] | : . ' , ; FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'add', earlySignal = 0) ...
[08:08:28.106] | : . ' , ; ` Appended future to position #1
[08:08:28.106] | : . ' , ; ` Number of registered futures: 1
[08:08:28.106] | : . ' , ; FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'add', earlySignal = 0) ... done
[08:08:28.107] | : . ' , launchFuture() ... done
[08:08:28.107] | : . ' , MultisessionFuture started
[08:08:28.107] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:28.107] | : . Launching futures ... done
[08:08:28.107] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:28.107] | : Using MultisessionFutureBackend ... done
[08:08:28.107] | run() for ‘Future’ (<unnamed-82>) ... done
[08:08:28.107] future(..., label = NULL) ... done
[08:08:28.107] future(..., label = NULL) ...
[08:08:28.108] | lazy: FALSE
[08:08:28.108] | stdout: TRUE
[08:08:28.108] | conditions: [n=1] ‘condition’
[08:08:28.108] | gc: FALSE
[08:08:28.108] | earlySignal: FALSE
[08:08:28.108] | getGlobalsAndPackages() ...
[08:08:28.108] | : Searching for globals ...
[08:08:28.109] | : . globals found: [0] 
[08:08:28.110] | : Searching for globals ... done
[08:08:28.110] | : globals: [0] <none>
[08:08:28.110] | : packages: [0] <none>
[08:08:28.110] | getGlobalsAndPackages() ... done
[08:08:28.110] | run() for ‘Future’ (<unnamed-83>) ...
[08:08:28.110] | : state: ‘created’
[08:08:28.110] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:28.110] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:28.111] | : Using MultisessionFutureBackend ...
[08:08:28.111] | : . Number of futures since start: 7 (7 created, 7 launched, 8 finished)
[08:08:28.111] | : . Launching futures ...
[08:08:28.111] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:28.111] | : . ' , Workers: [n=2]
[08:08:28.111] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:28.113] | : . ' , FutureRegistry: ‘workers-ebcf5645fe5296532f48b425138b7006’
[08:08:28.113] | : . ' , requestWorker() ...
[08:08:28.113] | : . ' , ; requestNode() ...
[08:08:28.113] | : . ' , ; ` Number of workers: 2
[08:08:28.113] | : . ' , ; ` Polling for a free worker ...
[08:08:28.113] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:28.116] | : . ' , ; ` | : Listing all futures
[08:08:28.116] | : . ' , ; ` | : Number of registered futures: 1
[08:08:28.116] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:28.116] | : . ' , ; ` | Total time: 0
[08:08:28.116] | : . ' , ; ` Polling for a free worker ... done
[08:08:28.116] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:28.117] | : . ' , ; ` | Listing all futures
[08:08:28.117] | : . ' , ; ` | Number of registered futures: 1
[08:08:28.117] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:28.117] | : . ' , ; ` avail: [n=2] ‘2’
[08:08:28.117] | : . ' , ; ` Index of first available worker: 2
[08:08:28.117] | : . ' , ; ` Validate that the worker is functional ...
[08:08:28.212] | : . ' , ; ` | Worker is functional
[08:08:28.212] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:28.212] | : . ' , ; ` | : Listing all futures
[08:08:28.212] | : . ' , ; ` | : Number of registered futures: 1
[08:08:28.212] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:28.212] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:28.213] | : . ' , ; requestNode() ... done
[08:08:28.213] | : . ' , ; cluster node index: 2
[08:08:28.213] | : . ' , requestWorker() ... done
[08:08:28.213] | : . ' , eraseGlobalEnvironment() ...
[08:08:28.213] | : . ' , eraseGlobalEnvironment() ... done
[08:08:28.213] | : . ' , launchFuture() ...
[08:08:28.214] | : . ' , ; cluster node index: 2
[08:08:28.214] | : . ' , ; getFutureData() ...
[08:08:28.214] | : . ' , ; ` getFutureCore() ...
[08:08:28.214] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:28.214] | : . ' , ; ` getFutureCore() ... done
[08:08:28.214] | : . ' , ; ` getFutureCapture() ...
[08:08:28.214] | : . ' , ; ` getFutureCapture() ... done
[08:08:28.214] | : . ' , ; ` getFutureContext() ...
[08:08:28.214] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:28.214] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:28.215] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:28.215] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:28.215] | : . ' , ; ` getFutureContext() ... done
[08:08:28.215] | : . ' , ; getFutureData() ... done
[08:08:28.215] | : . ' , ; FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'add', earlySignal = 0) ...
[08:08:28.215] | : . ' , ; ` Appended future to position #2
[08:08:28.215] | : . ' , ; ` Number of registered futures: 2
[08:08:28.216] | : . ' , ; FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'add', earlySignal = 0) ... done
[08:08:28.216] | : . ' , launchFuture() ... done
[08:08:28.216] | : . ' , MultisessionFuture started
[08:08:28.216] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:28.216] | : . Launching futures ... done
[08:08:28.216] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:28.216] | : Using MultisessionFutureBackend ... done
[08:08:28.216] | run() for ‘Future’ (<unnamed-83>) ... done
[08:08:28.216] future(..., label = NULL) ... done
[08:08:28.217] future(..., label = NULL) ...
[08:08:28.217] | lazy: FALSE
[08:08:28.217] | stdout: TRUE
[08:08:28.217] | conditions: [n=1] ‘condition’
[08:08:28.217] | gc: FALSE
[08:08:28.217] | earlySignal: FALSE
[08:08:28.217] | getGlobalsAndPackages() ...
[08:08:28.217] | : Searching for globals ...
[08:08:28.220] | : . globals found: [1] ‘{’
[08:08:28.220] | : Searching for globals ... done
[08:08:28.221] | : Resolving globals: FALSE
[08:08:28.221] | : Search for packages associated with the globals ...
[08:08:28.221] | : . Packages associated with globals: [1] ‘base’
[08:08:28.221] | : . Packages: [1] ‘base’
[08:08:28.221] | : Search for packages associated with the globals ... done
[08:08:28.221] | : Packages after dropping 'base': [0] 
[08:08:28.221] | : globals: [0] 
[08:08:28.222] | : packages: [0] 
[08:08:28.222] | getGlobalsAndPackages() ... done
[08:08:28.222] | run() for ‘Future’ (<unnamed-84>) ...
[08:08:28.222] | : state: ‘created’
[08:08:28.222] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:28.222] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:28.222] | : Using MultisessionFutureBackend ...
[08:08:28.222] | : . Number of futures since start: 8 (8 created, 8 launched, 8 finished)
[08:08:28.223] | : . Launching futures ...
[08:08:28.223] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:28.223] | : . ' , Workers: [n=2]
[08:08:28.223] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:28.224] | : . ' , FutureRegistry: ‘workers-ebcf5645fe5296532f48b425138b7006’
[08:08:28.225] | : . ' , requestWorker() ...
[08:08:28.225] | : . ' , ; requestNode() ...
[08:08:28.225] | : . ' , ; ` Number of workers: 2
[08:08:28.225] | : . ' , ; ` Polling for a free worker ...
[08:08:28.225] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:28.225] | : . ' , ; ` | : Listing all futures
[08:08:28.225] | : . ' , ; ` | : Number of registered futures: 2
[08:08:28.225] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:28.225] | : . ' , ; ` | Poll #1 (0): usedNodes() = 2, workers = 2
[08:08:28.236] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'collect-first', earlySignal = 1) ...
[08:08:28.236] | : . ' , ; ` | : collectValues('workers-ebcf5645fe5296532f48b425138b7006', firstOnly = TRUE) ...
[08:08:28.236] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-82>) ...
[08:08:28.236] | : . ' , ; ` | : . ' Cluster node socket connection: index=4, id=1255
[08:08:28.236] | : . ' , ; ` | : . ' assertValidConnection() ...
[08:08:28.237] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:28.237] | : . ' , ; ` | : . ' assertValidConnection() ... done
[08:08:28.237] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ...
[08:08:28.237] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:28.237] | : . ' , ; ` | : . ' , [1] TRUE
[08:08:28.238] | : . ' , ; ` | : . ' , received data:
[08:08:28.238] | : . ' , ; ` | : . ' , List of 5
[08:08:28.238] | : . ' , ; ` | : . ' ,  $ type   : chr "VALUE"
[08:08:28.238] | : . ' , ; ` | : . ' ,  $ value  :List of 16
[08:08:28.238] | : . ' , ; ` | : . ' ,   ..$ value              : num 2
[08:08:28.238] | : . ' , ; ` | : . ' ,   ..$ visible            : logi TRUE
[08:08:28.238] | : . ' , ; ` | : . ' ,   ..$ stdout             : chr ""
[08:08:28.238] | : . ' , ; ` | : . ' ,   ..$ conditions         : list()
[08:08:28.238] | : . ' , ; ` | : . ' ,   ..$ rng                : logi FALSE
[08:08:28.238] | : . ' , ; ` | : . ' ,   ..$ seed               : NULL
[08:08:28.238] | : . ' , ; ` | : . ' ,   ..$ misuseGlobalEnv    : NULL
[08:08:28.238] | : . ' , ; ` | : . ' ,   ..$ misuseConnections  :List of 3
[08:08:28.238] | : . ' , ; ` | : . ' ,   .. ..$ added   : NULL
[08:08:28.238] | : . ' , ; ` | : . ' ,   .. ..$ removed : NULL
[08:08:28.238] | : . ' , ; ` | : . ' ,   .. ..$ replaced: NULL
[08:08:28.238] | : . ' , ; ` | : . ' ,   ..$ misuseDevices      : NULL
[08:08:28.238] | : . ' , ; ` | : . ' ,   ..$ misuseDefaultDevice: list()
[08:08:28.238] | : . ' , ; ` | : . ' ,   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:28"
[08:08:28.238] | : . ' , ; ` | : . ' ,   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:28"
[08:08:28.238] | : . ' , ; ` | : . ' ,   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "82"
[08:08:28.238] | : . ' , ; ` | : . ' ,   ..$ session_uuid       : chr "363fe616e76346839f7969755b6a4995"
[08:08:28.238] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "source")=List of 5
[08:08:28.238] | : . ' , ; ` | : . ' ,   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:28.238] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:28.238] | : . ' , ; ` | : . ' ,   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:28.238] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:28.238] | : . ' , ; ` | : . ' ,   .. .. ..$ pid   : int 69106
[08:08:28.238] | : . ' , ; ` | : . ' ,   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:27"
[08:08:28.238] | : . ' , ; ` | : . ' ,   .. .. ..$ random: int 2147483647
[08:08:28.238] | : . ' , ; ` | : . ' ,   ..$ r_info             :List of 4
[08:08:28.238] | : . ' , ; ` | : . ' ,   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:28.238] | : . ' , ; ` | : . ' ,   .. .. ..$ : int [1:3] 4 5 0
[08:08:28.238] | : . ' , ; ` | : . ' ,   .. ..$ os           : chr "unix"
[08:08:28.238] | : . ' , ; ` | : . ' ,   .. ..$ os_name      : chr "Linux"
[08:08:28.238] | : . ' , ; ` | : . ' ,   .. ..$ captures_utf8: logi TRUE
[08:08:28.238] | : . ' , ; ` | : . ' ,   ..$ version            : chr "1.8"
[08:08:28.238] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr "FutureResult"
[08:08:28.238] | : . ' , ; ` | : . ' ,  $ success: logi TRUE
[08:08:28.238] | : . ' , ; ` | : . ' ,  $ time   : 'proc_time' Named num [1:5] 0.004 0 0.004 0 0
[08:08:28.238] | : . ' , ; ` | : . ' ,   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:28.238] | : . ' , ; ` | : . ' ,  $ tag    : NULL
[08:08:28.249] | : . ' , ; ` | : . ' , Received FutureResult
[08:08:28.249] | : . ' , ; ` | : . ' , FutureResult:
[08:08:28.249] | : . ' , ; ` | : . ' , value: ‘numeric’
[08:08:28.249] | : . ' , ; ` | : . ' , visible: TRUE
[08:08:28.249] | : . ' , ; ` | : . ' , stdout: character
[08:08:28.249] | : . ' , ; ` | : . ' , conditions: [n = 0] 
[08:08:28.249] | : . ' , ; ` | : . ' , RNG used: FALSE
[08:08:28.249] | : . ' , ; ` | : . ' , duration: 0.003600121 secs (started 2025-06-17 08:08:28.14724)
[08:08:28.249] | : . ' , ; ` | : . ' , version: 1.8
[08:08:28.249] | : . ' , ; ` | : . ' , FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'remove', earlySignal = 0) ...
[08:08:28.249] | : . ' , ; ` | : . ' , ; Removed future from position #1
[08:08:28.250] | : . ' , ; ` | : . ' , ; Number of registered futures: 1
[08:08:28.250] | : . ' , ; ` | : . ' , FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'remove', earlySignal = 0) ... done
[08:08:28.250] | : . ' , ; ` | : . ' , Erased future from future backend
[08:08:28.250] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:28.250] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:28.250] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:28.250] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:28.250] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:28.250] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:28.250] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:28.251] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:28.251] | : . ' , ; ` | : . ' , ;  int 0
[08:08:28.251] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:28.251] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ... done
[08:08:28.251] | : . ' , ; ` | : . ' receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:28.251] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-82>) ... done
[08:08:28.251] | : . ' , ; ` | : . assertFutureResult() ...
[08:08:28.252] | : . ' , ; ` | : . ' Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:28.252] | : . ' , ; ` | : . ' Future uuid: 82
[08:08:28.252] | : . ' , ; ` | : . ' identical; success
[08:08:28.252] | : . ' , ; ` | : . assertFutureResult() ... done
[08:08:28.252] | : . ' , ; ` | : . Future at position #1 is resolved ...
[08:08:28.252] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-82>) ...
[08:08:28.252] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:28.252] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:28.252] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:28.252] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:28.253] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:28.253] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:28.253] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:28.253] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:28.253] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:28.253] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:28.253] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:28.253] | : . ' , ; ` | : . ' , ;  int 0
[08:08:28.254] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:28.254] | : . ' , ; ` | : . ' , check for misuse ...
[08:08:28.254] | : . ' , ; ` | : . ' , check for misuse ... done
[08:08:28.254] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-82>) ... done
[08:08:28.254] | : . ' , ; ` | : . Future at position #1 is resolved ... done
[08:08:28.254] | : . ' , ; ` | : collectValues('workers-ebcf5645fe5296532f48b425138b7006', firstOnly = TRUE) ... done
[08:08:28.254] | : . ' , ; ` | : Remove collected futures ...
[08:08:28.255] | : . ' , ; ` | : . Indices of futures to drop: [n=1] ‘1’
[08:08:28.255] | : . ' , ; ` | : Remove collected futures ... done
[08:08:28.255] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'collect-first', earlySignal = 1) ... done
[08:08:28.255] | : . ' , ; ` | Early signaling of 2 future candidates ...
[08:08:28.255] | : . ' , ; ` | Number of futures with early signaling requested: 0
[08:08:28.255] | : . ' , ; ` | Early signaling of 2 future candidates ... done
[08:08:28.255] | : . ' , ; ` | Number of registered futures: 2
[08:08:28.255] | : . ' , ; ` Polling for a free worker ... done
[08:08:28.255] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:28.256] | : . ' , ; ` | Listing all futures
[08:08:28.256] | : . ' , ; ` | Number of registered futures: 1
[08:08:28.256] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:28.256] | : . ' , ; ` Total time: 0.0303618907928467
[08:08:28.256] | : . ' , ; requestNode() ... done
[08:08:28.256] | : . ' , ; FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:28.256] | : . ' , ; ` Listing all futures
[08:08:28.256] | : . ' , ; ` Number of registered futures: 1
[08:08:28.256] | : . ' , ; FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:28.256] | : . ' , ; avail: [n=2] ‘1’
[08:08:28.257] | : . ' , ; Index of first available worker: 1
[08:08:28.257] | : . ' , ; Validate that the worker is functional ...
[08:08:28.352] | : . ' , ; ` Worker is functional
[08:08:28.352] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:28.352] | : . ' , ; ` | Listing all futures
[08:08:28.352] | : . ' , ; ` | Number of registered futures: 1
[08:08:28.353] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:28.353] | : . ' , ; Validate that the worker is functional ... done
[08:08:28.353] | : . ' , requestWorker() ... done
[08:08:28.353] | : . ' , cluster node index: 1
[08:08:28.353] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:28.353] | : . ' eraseGlobalEnvironment() ...
[08:08:28.354] | : . ' eraseGlobalEnvironment() ... done
[08:08:28.354] | : . ' launchFuture() ...
[08:08:28.354] | : . ' , cluster node index: 1
[08:08:28.354] | : . ' , getFutureData() ...
[08:08:28.354] | : . ' , ; getFutureCore() ...
[08:08:28.354] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:28.354] | : . ' , ; getFutureCore() ... done
[08:08:28.354] | : . ' , ; getFutureCapture() ...
[08:08:28.354] | : . ' , ; getFutureCapture() ... done
[08:08:28.355] | : . ' , ; getFutureContext() ...
[08:08:28.355] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:28.355] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:28.355] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:28.355] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:28.355] | : . ' , ; getFutureContext() ... done
[08:08:28.355] | : . ' , getFutureData() ... done
[08:08:28.356] | : . ' , FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'add', earlySignal = 0) ...
[08:08:28.356] | : . ' , ; Appended future to position #2
[08:08:28.356] | : . ' , ; Number of registered futures: 2
[08:08:28.356] | : . ' , FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'add', earlySignal = 0) ... done
[08:08:28.356] | : . ' launchFuture() ... done
[08:08:28.356] | : . ' MultisessionFuture started
[08:08:28.356] | : . Launching futures ... done
[08:08:28.356] | : Using MultisessionFutureBackend ... done
[08:08:28.356] | : Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:28.357] | run() for ‘Future’ (<unnamed-84>) ... done
[08:08:28.357] future(..., label = NULL) ... done

<environment: 0x56430406a028> 
<environment: 0x5643024d81c8> 
[08:08:28.358] resolved() for environment ...
[08:08:28.358] | resolved() for list ...
[08:08:28.358] | : Number of elements: 4
[08:08:28.358] | : Number of futures: 4
[08:08:28.359] | : resolved() for MultisessionFuture (<unnamed-83>) ...
[08:08:28.359] | : . Cluster node socket connection: index=5, id=1256
[08:08:28.359] | : . assertValidConnection() ...
[08:08:28.359] | : . ' cluster node index: 2
[08:08:28.359] | : . assertValidConnection() ... done
[08:08:28.360] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:28.360] | : . ' cluster node index: 2
[08:08:28.360] | : . ' [1] TRUE
[08:08:28.360] | : . ' received data:
[08:08:28.360] | : . ' List of 5
[08:08:28.360] | : . '  $ type   : chr "VALUE"
[08:08:28.360] | : . '  $ value  :List of 16
[08:08:28.360] | : . '   ..$ value              : NULL
[08:08:28.360] | : . '   ..$ visible            : logi TRUE
[08:08:28.360] | : . '   ..$ stdout             : chr ""
[08:08:28.360] | : . '   ..$ conditions         : list()
[08:08:28.360] | : . '   ..$ rng                : logi FALSE
[08:08:28.360] | : . '   ..$ seed               : NULL
[08:08:28.360] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:28.360] | : . '   ..$ misuseConnections  :List of 3
[08:08:28.360] | : . '   .. ..$ added   : NULL
[08:08:28.360] | : . '   .. ..$ removed : NULL
[08:08:28.360] | : . '   .. ..$ replaced: NULL
[08:08:28.360] | : . '   ..$ misuseDevices      : NULL
[08:08:28.360] | : . '   ..$ misuseDefaultDevice: list()
[08:08:28.360] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:28"
[08:08:28.360] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:28"
[08:08:28.360] | : . '   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "83"
[08:08:28.360] | : . '   ..$ session_uuid       : chr "bd12039d41799c8c6e56f5926a91e416"
[08:08:28.360] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:28.360] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:28.360] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:28.360] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:28.360] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:28.360] | : . '   .. .. ..$ pid   : int 69105
[08:08:28.360] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:27"
[08:08:28.360] | : . '   .. .. ..$ random: int 2147483647
[08:08:28.360] | : . '   ..$ r_info             :List of 4
[08:08:28.360] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:28.360] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:28.360] | : . '   .. ..$ os           : chr "unix"
[08:08:28.360] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:28.360] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:28.360] | : . '   ..$ version            : chr "1.8"
[08:08:28.360] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:28.360] | : . '  $ success: logi TRUE
[08:08:28.360] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:28.360] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:28.360] | : . '  $ tag    : NULL
[08:08:28.373] | : . ' Received FutureResult
[08:08:28.373] | : . ' FutureResult:
[08:08:28.373] | : . ' value: ‘NULL’
[08:08:28.373] | : . ' visible: TRUE
[08:08:28.373] | : . ' stdout: character
[08:08:28.373] | : . ' conditions: [n = 0] 
[08:08:28.373] | : . ' RNG used: FALSE
[08:08:28.373] | : . ' duration: 0.002717972 secs (started 2025-06-17 08:08:28.256208)
[08:08:28.373] | : . ' version: 1.8
[08:08:28.374] | : . ' FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'remove', earlySignal = 0) ...
[08:08:28.374] | : . ' , Removed future from position #1
[08:08:28.374] | : . ' , Number of registered futures: 1
[08:08:28.374] | : . ' FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'remove', earlySignal = 0) ... done
[08:08:28.374] | : . ' Erased future from future backend
[08:08:28.375] | : . ' result() for ClusterFuture ...
[08:08:28.375] | : . ' , result already collected: FutureResult
[08:08:28.375] | : . ' result() for ClusterFuture ... done
[08:08:28.375] | : . ' signalConditions() ...
[08:08:28.375] | : . ' , include = ‘immediateCondition’
[08:08:28.375] | : . ' , exclude = 
[08:08:28.375] | : . ' , resignal = FALSE
[08:08:28.375] | : . ' , Number of conditions: 0
[08:08:28.375] | : . ' ,  int 0
[08:08:28.376] | : . ' signalConditions() ... done
[08:08:28.376] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:28.376] | : . receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:28.376] | : resolved() for MultisessionFuture (<unnamed-83>) ... done
[08:08:28.376] | : assertFutureResult() ...
[08:08:28.376] | : . Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:28.376] | : . Future uuid: 83
[08:08:28.376] | : . identical; success
[08:08:28.376] | : assertFutureResult() ... done
[08:08:28.377] | : resolved() for MultisessionFuture (<unnamed-84>) ...
[08:08:28.377] | : . Cluster node socket connection: index=4, id=1255
[08:08:28.377] | : . assertValidConnection() ...
[08:08:28.377] | : . ' cluster node index: 1
[08:08:28.377] | : . assertValidConnection() ... done
[08:08:28.388] | : . socketSelect(list(<connection #4 (id=1255)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:28.388] | : resolved() for MultisessionFuture (<unnamed-84>) ... done
[08:08:28.388] | resolved() for list ... done
[08:08:28.388] resolved() for environment ... done
 Named logi [1:4] TRUE TRUE TRUE FALSE
 - attr(*, "names")= chr [1:4] "a" "b" "c" "d"
[08:08:28.389] value() for MultisessionFuture (<unnamed-84>) ...
[08:08:28.389] | result() for ClusterFuture ...
[08:08:28.389] | : assertValidConnection() ...
[08:08:28.389] | : . cluster node index: 1
[08:08:28.390] | : assertValidConnection() ... done
[08:08:28.390] | : receiveMessageFromWorker() for ClusterFuture ...
[08:08:28.390] | : . cluster node index: 1
[08:08:28.401] | : . [1] TRUE
[08:08:28.401] | : . received data:
[08:08:28.401] | : . List of 5
[08:08:28.401] | : .  $ type   : chr "VALUE"
[08:08:28.401] | : .  $ value  :List of 16
[08:08:28.401] | : .   ..$ value              : num 4
[08:08:28.401] | : .   ..$ visible            : logi TRUE
[08:08:28.401] | : .   ..$ stdout             : chr ""
[08:08:28.401] | : .   ..$ conditions         : list()
[08:08:28.401] | : .   ..$ rng                : logi FALSE
[08:08:28.401] | : .   ..$ seed               : NULL
[08:08:28.401] | : .   ..$ misuseGlobalEnv    : NULL
[08:08:28.401] | : .   ..$ misuseConnections  :List of 3
[08:08:28.401] | : .   .. ..$ added   : NULL
[08:08:28.401] | : .   .. ..$ removed : NULL
[08:08:28.401] | : .   .. ..$ replaced: NULL
[08:08:28.401] | : .   ..$ misuseDevices      : NULL
[08:08:28.401] | : .   ..$ misuseDefaultDevice: list()
[08:08:28.401] | : .   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:28"
[08:08:28.401] | : .   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:28"
[08:08:28.401] | : .   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "84"
[08:08:28.401] | : .   ..$ session_uuid       : chr "363fe616e76346839f7969755b6a4995"
[08:08:28.401] | : .   .. ..- attr(*, "source")=List of 5
[08:08:28.401] | : .   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:28.401] | : .   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:28.401] | : .   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:28.401] | : .   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:28.401] | : .   .. .. ..$ pid   : int 69106
[08:08:28.401] | : .   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:27"
[08:08:28.401] | : .   .. .. ..$ random: int 2147483647
[08:08:28.401] | : .   ..$ r_info             :List of 4
[08:08:28.401] | : .   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:28.401] | : .   .. .. ..$ : int [1:3] 4 5 0
[08:08:28.401] | : .   .. ..$ os           : chr "unix"
[08:08:28.401] | : .   .. ..$ os_name      : chr "Linux"
[08:08:28.401] | : .   .. ..$ captures_utf8: logi TRUE
[08:08:28.401] | : .   ..$ version            : chr "1.8"
[08:08:28.401] | : .   ..- attr(*, "class")= chr "FutureResult"
[08:08:28.401] | : .  $ success: logi TRUE
[08:08:28.401] | : .  $ time   : 'proc_time' Named num [1:5] 0.003 0.001 0.004 0 0
[08:08:28.401] | : .   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:28.401] | : .  $ tag    : NULL
[08:08:28.412] | : . Received FutureResult
[08:08:28.412] | : . FutureResult:
[08:08:28.412] | : . value: ‘numeric’
[08:08:28.412] | : . visible: TRUE
[08:08:28.412] | : . stdout: character
[08:08:28.412] | : . conditions: [n = 0] 
[08:08:28.412] | : . RNG used: FALSE
[08:08:28.412] | : . duration: 0.003111362 secs (started 2025-06-17 08:08:28.397269)
[08:08:28.412] | : . version: 1.8
[08:08:28.412] | : . FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'remove', earlySignal = 0) ...
[08:08:28.412] | : . ' Removed future from position #1
[08:08:28.412] | : . ' Number of registered futures: 0
[08:08:28.413] | : . FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'remove', earlySignal = 0) ... done
[08:08:28.413] | : . Erased future from future backend
[08:08:28.413] | : . result() for ClusterFuture ...
[08:08:28.413] | : . ' result already collected: FutureResult
[08:08:28.413] | : . result() for ClusterFuture ... done
[08:08:28.413] | : . signalConditions() ...
[08:08:28.413] | : . ' include = ‘immediateCondition’
[08:08:28.413] | : . ' exclude = 
[08:08:28.413] | : . ' resignal = FALSE
[08:08:28.413] | : . ' Number of conditions: 0
[08:08:28.414] | : . '  int 0
[08:08:28.414] | : . signalConditions() ... done
[08:08:28.414] | : receiveMessageFromWorker() for ClusterFuture ... done
[08:08:28.414] | result() for ClusterFuture ... done
[08:08:28.414] | result() for ClusterFuture ...
[08:08:28.414] | : result already collected: FutureResult
[08:08:28.415] | result() for ClusterFuture ... done
[08:08:28.415] | signalConditions() ...
[08:08:28.415] | : include = ‘immediateCondition’
[08:08:28.415] | : exclude = 
[08:08:28.415] | : resignal = FALSE
[08:08:28.415] | : Number of conditions: 0
[08:08:28.415] | :  int 0
[08:08:28.415] | signalConditions() ... done
[08:08:28.416] | relay stdout ...
[08:08:28.416] | relay stdout ... done
[08:08:28.416] | check for misuse ...
[08:08:28.416] | check for misuse ... done
[08:08:28.416] value() for MultisessionFuture (<unnamed-84>) ... done
[08:08:28.416] value() for listenv ...
[08:08:28.416] | recursive: 0
[08:08:28.416] | reduce: FALSE
[08:08:28.417] | length: 4
[08:08:28.417] | elements: ‘a’, ‘b’, ‘c’, ‘d’
[08:08:28.417] | Number of remaining objects: 4
[08:08:28.417] | checking value #1:
[08:08:28.418] | 'obj' is atomic
[08:08:28.418] | signalConditionsASAP(numeric, pos=1) ...
[08:08:28.418] | : nx: 4
[08:08:28.418] | : relay: TRUE
[08:08:28.418] | : stdout: TRUE
[08:08:28.418] | : signal: TRUE
[08:08:28.418] | : resignal: FALSE
[08:08:28.418] | : force: TRUE
[08:08:28.418] | : relayed: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:28.418] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:28.419] | : until=2
[08:08:28.419] | : relaying element #2
[08:08:28.419] | : relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:28.419] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:28.419] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:28.419] | length: 3 (resolved future 1)
[08:08:28.419] value() for listenv ... done
[08:08:28.419] checking value #2:
[08:08:28.419] 'obj' is MultisessionFuture
[08:08:28.420] MultisessionFuture #2
[08:08:28.420] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:28.420] | nx: 4
[08:08:28.420] | relay: TRUE
[08:08:28.420] | stdout: TRUE
[08:08:28.420] | signal: TRUE
[08:08:28.420] | resignal: FALSE
[08:08:28.420] | force: TRUE
[08:08:28.420] | relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:28.420] | queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:28.420] | until=2
[08:08:28.421] | relaying element #2
[08:08:28.421] | value() for MultisessionFuture (<unnamed-82>) ...
[08:08:28.421] | : result() for ClusterFuture ...
[08:08:28.421] | : . result already collected: FutureResult
[08:08:28.421] | : result() for ClusterFuture ... done
[08:08:28.421] | : result() for ClusterFuture ...
[08:08:28.421] | : . result already collected: FutureResult
[08:08:28.421] | : result() for ClusterFuture ... done
[08:08:28.421] | : signalConditions() ...
[08:08:28.421] | : . include = ‘immediateCondition’
[08:08:28.422] | : . exclude = 
[08:08:28.422] | : . resignal = FALSE
[08:08:28.422] | : . Number of conditions: 0
[08:08:28.422] | : .  int 0
[08:08:28.422] | : signalConditions() ... done
[08:08:28.422] | : relay stdout ...
[08:08:28.422] | : relay stdout ... done
[08:08:28.423] | : check for misuse ...
[08:08:28.423] | : check for misuse ... done
[08:08:28.423] | value() for MultisessionFuture (<unnamed-82>) ... done
[08:08:28.423] | result() for ClusterFuture ...
[08:08:28.423] | : result already collected: FutureResult
[08:08:28.423] | result() for ClusterFuture ... done
[08:08:28.423] | signalConditions() ...
[08:08:28.423] | : include = ‘immediateCondition’
[08:08:28.423] | : exclude = 
[08:08:28.423] | : resignal = FALSE
[08:08:28.424] | : Number of conditions: 0
[08:08:28.424] | :  int 0
[08:08:28.424] | signalConditions() ... done
[08:08:28.424] | result() for ClusterFuture ...
[08:08:28.424] | : result already collected: FutureResult
[08:08:28.424] | result() for ClusterFuture ... done
[08:08:28.424] | signalConditions() ...
[08:08:28.424] | : include = ‘condition’
[08:08:28.425] | : exclude = ‘error’, ‘immediateCondition’
[08:08:28.425] | : resignal = TRUE
[08:08:28.425] | : Number of conditions: 0
[08:08:28.425] | :  int 0
[08:08:28.425] | signalConditions() ... done
[08:08:28.425] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:28.425] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:28.426] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:28.426] value(<MultisessionFuture>, ...) ...
[08:08:28.426] value(<MultisessionFuture>, ...) ... done
[08:08:28.426] value() for MultisessionFuture (<unnamed-82>) ...
[08:08:28.426] | result() for ClusterFuture ...
[08:08:28.426] | : result already collected: FutureResult
[08:08:28.426] | result() for ClusterFuture ... done
[08:08:28.426] | result() for ClusterFuture ...
[08:08:28.426] | : result already collected: FutureResult
[08:08:28.426] | result() for ClusterFuture ... done
[08:08:28.427] | signalConditions() ...
[08:08:28.427] | : include = ‘immediateCondition’
[08:08:28.427] | : exclude = 
[08:08:28.427] | : resignal = FALSE
[08:08:28.427] | : Number of conditions: 0
[08:08:28.427] | :  int 0
[08:08:28.427] | signalConditions() ... done
[08:08:28.427] | check for misuse ...
[08:08:28.428] | check for misuse ... done
[08:08:28.428] value() for MultisessionFuture (<unnamed-82>) ... done
[08:08:28.428] value: <numeric>
[08:08:28.428] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:28.428] | nx: 4
[08:08:28.428] | relay: TRUE
[08:08:28.428] | stdout: TRUE
[08:08:28.428] | signal: TRUE
[08:08:28.428] | resignal: FALSE
[08:08:28.428] | force: TRUE
[08:08:28.429] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:28.429] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:28.429] | until=3
[08:08:28.429] | relaying element #3
[08:08:28.429] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:28.429] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:28.429] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:28.429] resolve() for MultisessionFuture ...
[08:08:28.429] resolve() for MultisessionFuture ... done
[08:08:28.429] length: 2 (resolved future 2)

[08:08:28.430] checking value #3:
[08:08:28.430] 'obj' is MultisessionFuture
[08:08:28.430] MultisessionFuture #3
[08:08:28.430] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:28.430] | nx: 4
[08:08:28.430] | relay: TRUE
[08:08:28.430] | stdout: TRUE
[08:08:28.430] | signal: TRUE
[08:08:28.430] | resignal: FALSE
[08:08:28.430] | force: TRUE
[08:08:28.431] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:28.431] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:28.431] | until=3
[08:08:28.431] | relaying element #3
[08:08:28.431] | value() for MultisessionFuture (<unnamed-83>) ...
[08:08:28.431] | : result() for ClusterFuture ...
[08:08:28.431] | : . result already collected: FutureResult
[08:08:28.431] | : result() for ClusterFuture ... done
[08:08:28.431] | : result() for ClusterFuture ...
[08:08:28.431] | : . result already collected: FutureResult
[08:08:28.432] | : result() for ClusterFuture ... done
[08:08:28.432] | : signalConditions() ...
[08:08:28.432] | : . include = ‘immediateCondition’
[08:08:28.432] | : . exclude = 
[08:08:28.432] | : . resignal = FALSE
[08:08:28.432] | : . Number of conditions: 0
[08:08:28.432] | : .  int 0
[08:08:28.432] | : signalConditions() ... done
[08:08:28.433] | : relay stdout ...
[08:08:28.433] | : relay stdout ... done
[08:08:28.433] | : check for misuse ...
[08:08:28.433] | : check for misuse ... done
[08:08:28.433] | value() for MultisessionFuture (<unnamed-83>) ... done
[08:08:28.433] | result() for ClusterFuture ...
[08:08:28.433] | : result already collected: FutureResult
[08:08:28.433] | result() for ClusterFuture ... done
[08:08:28.433] | signalConditions() ...
[08:08:28.434] | : include = ‘immediateCondition’
[08:08:28.434] | : exclude = 
[08:08:28.434] | : resignal = FALSE
[08:08:28.434] | : Number of conditions: 0
[08:08:28.434] | :  int 0
[08:08:28.434] | signalConditions() ... done
[08:08:28.434] | result() for ClusterFuture ...
[08:08:28.434] | : result already collected: FutureResult
[08:08:28.435] | result() for ClusterFuture ... done
[08:08:28.435] | signalConditions() ...
[08:08:28.435] | : include = ‘condition’
[08:08:28.435] | : exclude = ‘error’, ‘immediateCondition’
[08:08:28.435] | : resignal = TRUE
[08:08:28.435] | : Number of conditions: 0
[08:08:28.435] | :  int 0
[08:08:28.436] | signalConditions() ... done
[08:08:28.436] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:28.436] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:28.436] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:28.436] value(<MultisessionFuture>, ...) ...
[08:08:28.436] value(<MultisessionFuture>, ...) ... done
[08:08:28.436] value() for MultisessionFuture (<unnamed-83>) ...
[08:08:28.436] | result() for ClusterFuture ...
[08:08:28.436] | : result already collected: FutureResult
[08:08:28.436] | result() for ClusterFuture ... done
[08:08:28.436] | result() for ClusterFuture ...
[08:08:28.437] | : result already collected: FutureResult
[08:08:28.437] | result() for ClusterFuture ... done
[08:08:28.437] | signalConditions() ...
[08:08:28.437] | : include = ‘immediateCondition’
[08:08:28.437] | : exclude = 
[08:08:28.437] | : resignal = FALSE
[08:08:28.437] | : Number of conditions: 0
[08:08:28.437] | :  int 0
[08:08:28.438] | signalConditions() ... done
[08:08:28.438] | check for misuse ...
[08:08:28.438] | check for misuse ... done
[08:08:28.438] value() for MultisessionFuture (<unnamed-83>) ... done
[08:08:28.438] value: <NULL>
[08:08:28.438] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:28.438] | nx: 4
[08:08:28.438] | relay: TRUE
[08:08:28.439] | stdout: TRUE
[08:08:28.439] | signal: TRUE
[08:08:28.439] | resignal: FALSE
[08:08:28.439] | force: TRUE
[08:08:28.439] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:28.439] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:28.439] | until=4
[08:08:28.439] | relaying element #4
[08:08:28.439] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:28.439] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:28.439] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:28.440] resolve() for MultisessionFuture ...
[08:08:28.440] resolve() for MultisessionFuture ... done
[08:08:28.440] length: 1 (resolved future 3)

[08:08:28.440] checking value #4:
[08:08:28.440] 'obj' is atomic
[08:08:28.440] signalConditionsASAP(numeric, pos=4) ...
[08:08:28.440] | nx: 4
[08:08:28.440] | relay: TRUE
[08:08:28.440] | stdout: TRUE
[08:08:28.440] | signal: TRUE
[08:08:28.441] | resignal: FALSE
[08:08:28.441] | force: TRUE
[08:08:28.441] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:28.441] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:28.441] | until=4
[08:08:28.441] | relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:28.441] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:28.441] signalConditionsASAP(numeric, pos=4) ... done
[08:08:28.441] length: 0 (resolved future 4)

[08:08:28.442] Relaying remaining futures ...
[08:08:28.442] | signalConditionsASAP(NULL, pos=0) ...
[08:08:28.442] | : nx: 4
[08:08:28.442] | : relay: TRUE
[08:08:28.442] | : stdout: TRUE
[08:08:28.442] | : signal: TRUE
[08:08:28.442] | : resignal: FALSE
[08:08:28.442] | : force: TRUE
[08:08:28.442] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:28.442] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
 - flush all
[08:08:28.443] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:28.443] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:28.443] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:28.443] Relaying remaining futures ... done

List of 4
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
Dimensions: c(2, 3, 1)
[08:08:28.445] future(..., label = NULL) ...
[08:08:28.445] | lazy: FALSE
[08:08:28.445] | stdout: TRUE
[08:08:28.445] | conditions: [n=1] ‘condition’
[08:08:28.445] | gc: FALSE
[08:08:28.445] | earlySignal: FALSE
[08:08:28.445] | getGlobalsAndPackages() ...
[08:08:28.445] | : Searching for globals ...
[08:08:28.446] | : . globals found: [0] 
[08:08:28.447] | : Searching for globals ... done
[08:08:28.447] | : globals: [0] <none>
[08:08:28.447] | : packages: [0] <none>
[08:08:28.447] | getGlobalsAndPackages() ... done
[08:08:28.447] | run() for ‘Future’ (<unnamed-85>) ...
[08:08:28.447] | : state: ‘created’
[08:08:28.447] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:28.448] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:28.448] | : Using MultisessionFutureBackend ...
[08:08:28.448] | : . Number of futures since start: 9 (9 created, 9 launched, 12 finished)
[08:08:28.448] | : . Launching futures ...
[08:08:28.448] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:28.448] | : . ' , Workers: [n=2]
[08:08:28.448] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:28.450] | : . ' , FutureRegistry: ‘workers-ebcf5645fe5296532f48b425138b7006’
[08:08:28.450] | : . ' , requestWorker() ...
[08:08:28.450] | : . ' , ; requestNode() ...
[08:08:28.450] | : . ' , ; ` Number of workers: 2
[08:08:28.450] | : . ' , ; ` Polling for a free worker ...
[08:08:28.450] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:28.450] | : . ' , ; ` | : Listing all futures
[08:08:28.450] | : . ' , ; ` | : Number of registered futures: 0
[08:08:28.451] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:28.451] | : . ' , ; ` | Total time: 0
[08:08:28.451] | : . ' , ; ` Polling for a free worker ... done
[08:08:28.451] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:28.451] | : . ' , ; ` | Listing all futures
[08:08:28.451] | : . ' , ; ` | Number of registered futures: 0
[08:08:28.451] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:28.451] | : . ' , ; ` avail: [n=2] ‘1’, ‘2’
[08:08:28.451] | : . ' , ; ` Index of first available worker: 1
[08:08:28.452] | : . ' , ; ` Validate that the worker is functional ...
[08:08:28.553] | : . ' , ; ` | Worker is functional
[08:08:28.553] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:28.553] | : . ' , ; ` | : Listing all futures
[08:08:28.553] | : . ' , ; ` | : Number of registered futures: 0
[08:08:28.553] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:28.553] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:28.553] | : . ' , ; requestNode() ... done
[08:08:28.554] | : . ' , ; cluster node index: 1
[08:08:28.554] | : . ' , requestWorker() ... done
[08:08:28.554] | : . ' , eraseGlobalEnvironment() ...
[08:08:28.554] | : . ' , eraseGlobalEnvironment() ... done
[08:08:28.554] | : . ' , launchFuture() ...
[08:08:28.554] | : . ' , ; cluster node index: 1
[08:08:28.555] | : . ' , ; getFutureData() ...
[08:08:28.555] | : . ' , ; ` getFutureCore() ...
[08:08:28.555] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:28.555] | : . ' , ; ` getFutureCore() ... done
[08:08:28.555] | : . ' , ; ` getFutureCapture() ...
[08:08:28.555] | : . ' , ; ` getFutureCapture() ... done
[08:08:28.555] | : . ' , ; ` getFutureContext() ...
[08:08:28.555] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:28.555] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:28.556] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:28.556] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:28.556] | : . ' , ; ` getFutureContext() ... done
[08:08:28.556] | : . ' , ; getFutureData() ... done
[08:08:28.556] | : . ' , ; FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'add', earlySignal = 0) ...
[08:08:28.556] | : . ' , ; ` Appended future to position #1
[08:08:28.556] | : . ' , ; ` Number of registered futures: 1
[08:08:28.557] | : . ' , ; FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'add', earlySignal = 0) ... done
[08:08:28.557] | : . ' , launchFuture() ... done
[08:08:28.557] | : . ' , MultisessionFuture started
[08:08:28.557] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:28.557] | : . Launching futures ... done
[08:08:28.557] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:28.557] | : Using MultisessionFutureBackend ... done
[08:08:28.557] | run() for ‘Future’ (<unnamed-85>) ... done
[08:08:28.557] future(..., label = NULL) ... done
[08:08:28.557] future(..., label = NULL) ...
[08:08:28.558] | lazy: FALSE
[08:08:28.558] | stdout: TRUE
[08:08:28.558] | conditions: [n=1] ‘condition’
[08:08:28.558] | gc: FALSE
[08:08:28.558] | earlySignal: FALSE
[08:08:28.558] | getGlobalsAndPackages() ...
[08:08:28.558] | : Searching for globals ...
[08:08:28.559] | : . globals found: [0] 
[08:08:28.559] | : Searching for globals ... done
[08:08:28.560] | : globals: [0] <none>
[08:08:28.560] | : packages: [0] <none>
[08:08:28.560] | getGlobalsAndPackages() ... done
[08:08:28.560] | run() for ‘Future’ (<unnamed-86>) ...
[08:08:28.560] | : state: ‘created’
[08:08:28.560] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:28.560] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:28.560] | : Using MultisessionFutureBackend ...
[08:08:28.560] | : . Number of futures since start: 10 (10 created, 10 launched, 12 finished)
[08:08:28.561] | : . Launching futures ...
[08:08:28.561] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:28.561] | : . ' , Workers: [n=2]
[08:08:28.561] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:28.562] | : . ' , FutureRegistry: ‘workers-ebcf5645fe5296532f48b425138b7006’
[08:08:28.563] | : . ' , requestWorker() ...
[08:08:28.563] | : . ' , ; requestNode() ...
[08:08:28.563] | : . ' , ; ` Number of workers: 2
[08:08:28.563] | : . ' , ; ` Polling for a free worker ...
[08:08:28.563] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:28.563] | : . ' , ; ` | : Listing all futures
[08:08:28.563] | : . ' , ; ` | : Number of registered futures: 1
[08:08:28.563] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:28.563] | : . ' , ; ` | Total time: 0
[08:08:28.564] | : . ' , ; ` Polling for a free worker ... done
[08:08:28.564] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:28.564] | : . ' , ; ` | Listing all futures
[08:08:28.564] | : . ' , ; ` | Number of registered futures: 1
[08:08:28.564] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:28.564] | : . ' , ; ` avail: [n=2] ‘2’
[08:08:28.564] | : . ' , ; ` Index of first available worker: 2
[08:08:28.564] | : . ' , ; ` Validate that the worker is functional ...
[08:08:28.657] | : . ' , ; ` | Worker is functional
[08:08:28.657] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:28.657] | : . ' , ; ` | : Listing all futures
[08:08:28.657] | : . ' , ; ` | : Number of registered futures: 1
[08:08:28.657] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:28.657] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:28.658] | : . ' , ; requestNode() ... done
[08:08:28.658] | : . ' , ; cluster node index: 2
[08:08:28.658] | : . ' , requestWorker() ... done
[08:08:28.658] | : . ' , eraseGlobalEnvironment() ...
[08:08:28.658] | : . ' , eraseGlobalEnvironment() ... done
[08:08:28.658] | : . ' , launchFuture() ...
[08:08:28.659] | : . ' , ; cluster node index: 2
[08:08:28.659] | : . ' , ; getFutureData() ...
[08:08:28.659] | : . ' , ; ` getFutureCore() ...
[08:08:28.659] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:28.659] | : . ' , ; ` getFutureCore() ... done
[08:08:28.659] | : . ' , ; ` getFutureCapture() ...
[08:08:28.659] | : . ' , ; ` getFutureCapture() ... done
[08:08:28.659] | : . ' , ; ` getFutureContext() ...
[08:08:28.659] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:28.659] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:28.660] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:28.660] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:28.660] | : . ' , ; ` getFutureContext() ... done
[08:08:28.660] | : . ' , ; getFutureData() ... done
[08:08:28.660] | : . ' , ; FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'add', earlySignal = 0) ...
[08:08:28.660] | : . ' , ; ` Appended future to position #2
[08:08:28.660] | : . ' , ; ` Number of registered futures: 2
[08:08:28.661] | : . ' , ; FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'add', earlySignal = 0) ... done
[08:08:28.661] | : . ' , launchFuture() ... done
[08:08:28.661] | : . ' , MultisessionFuture started
[08:08:28.661] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:28.661] | : . Launching futures ... done
[08:08:28.661] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:28.661] | : Using MultisessionFutureBackend ... done
[08:08:28.661] | run() for ‘Future’ (<unnamed-86>) ... done
[08:08:28.661] future(..., label = NULL) ... done
[08:08:28.662] future(..., label = NULL) ...
[08:08:28.662] | lazy: FALSE
[08:08:28.662] | stdout: TRUE
[08:08:28.662] | conditions: [n=1] ‘condition’
[08:08:28.662] | gc: FALSE
[08:08:28.662] | earlySignal: FALSE
[08:08:28.662] | getGlobalsAndPackages() ...
[08:08:28.662] | : Searching for globals ...
[08:08:28.665] | : . globals found: [1] ‘{’
[08:08:28.665] | : Searching for globals ... done
[08:08:28.666] | : Resolving globals: FALSE
[08:08:28.666] | : Search for packages associated with the globals ...
[08:08:28.666] | : . Packages associated with globals: [1] ‘base’
[08:08:28.666] | : . Packages: [1] ‘base’
[08:08:28.666] | : Search for packages associated with the globals ... done
[08:08:28.666] | : Packages after dropping 'base': [0] 
[08:08:28.666] | : globals: [0] 
[08:08:28.667] | : packages: [0] 
[08:08:28.667] | getGlobalsAndPackages() ... done
[08:08:28.667] | run() for ‘Future’ (<unnamed-87>) ...
[08:08:28.667] | : state: ‘created’
[08:08:28.667] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:28.667] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:28.667] | : Using MultisessionFutureBackend ...
[08:08:28.667] | : . Number of futures since start: 11 (11 created, 11 launched, 12 finished)
[08:08:28.668] | : . Launching futures ...
[08:08:28.668] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:28.668] | : . ' , Workers: [n=2]
[08:08:28.668] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:28.669] | : . ' , FutureRegistry: ‘workers-ebcf5645fe5296532f48b425138b7006’
[08:08:28.669] | : . ' , requestWorker() ...
[08:08:28.670] | : . ' , ; requestNode() ...
[08:08:28.670] | : . ' , ; ` Number of workers: 2
[08:08:28.670] | : . ' , ; ` Polling for a free worker ...
[08:08:28.670] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:28.670] | : . ' , ; ` | : Listing all futures
[08:08:28.670] | : . ' , ; ` | : Number of registered futures: 2
[08:08:28.670] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:28.670] | : . ' , ; ` | Poll #1 (0): usedNodes() = 2, workers = 2
[08:08:28.681] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'collect-first', earlySignal = 1) ...
[08:08:28.681] | : . ' , ; ` | : collectValues('workers-ebcf5645fe5296532f48b425138b7006', firstOnly = TRUE) ...
[08:08:28.681] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-85>) ...
[08:08:28.681] | : . ' , ; ` | : . ' Cluster node socket connection: index=4, id=1255
[08:08:28.681] | : . ' , ; ` | : . ' assertValidConnection() ...
[08:08:28.682] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:28.682] | : . ' , ; ` | : . ' assertValidConnection() ... done
[08:08:28.682] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ...
[08:08:28.682] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:28.683] | : . ' , ; ` | : . ' , [1] TRUE
[08:08:28.683] | : . ' , ; ` | : . ' , received data:
[08:08:28.683] | : . ' , ; ` | : . ' , List of 5
[08:08:28.683] | : . ' , ; ` | : . ' ,  $ type   : chr "VALUE"
[08:08:28.683] | : . ' , ; ` | : . ' ,  $ value  :List of 16
[08:08:28.683] | : . ' , ; ` | : . ' ,   ..$ value              : num 2
[08:08:28.683] | : . ' , ; ` | : . ' ,   ..$ visible            : logi TRUE
[08:08:28.683] | : . ' , ; ` | : . ' ,   ..$ stdout             : chr ""
[08:08:28.683] | : . ' , ; ` | : . ' ,   ..$ conditions         : list()
[08:08:28.683] | : . ' , ; ` | : . ' ,   ..$ rng                : logi FALSE
[08:08:28.683] | : . ' , ; ` | : . ' ,   ..$ seed               : NULL
[08:08:28.683] | : . ' , ; ` | : . ' ,   ..$ misuseGlobalEnv    : NULL
[08:08:28.683] | : . ' , ; ` | : . ' ,   ..$ misuseConnections  :List of 3
[08:08:28.683] | : . ' , ; ` | : . ' ,   .. ..$ added   : NULL
[08:08:28.683] | : . ' , ; ` | : . ' ,   .. ..$ removed : NULL
[08:08:28.683] | : . ' , ; ` | : . ' ,   .. ..$ replaced: NULL
[08:08:28.683] | : . ' , ; ` | : . ' ,   ..$ misuseDevices      : NULL
[08:08:28.683] | : . ' , ; ` | : . ' ,   ..$ misuseDefaultDevice: list()
[08:08:28.683] | : . ' , ; ` | : . ' ,   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:28"
[08:08:28.683] | : . ' , ; ` | : . ' ,   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:28"
[08:08:28.683] | : . ' , ; ` | : . ' ,   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "85"
[08:08:28.683] | : . ' , ; ` | : . ' ,   ..$ session_uuid       : chr "363fe616e76346839f7969755b6a4995"
[08:08:28.683] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "source")=List of 5
[08:08:28.683] | : . ' , ; ` | : . ' ,   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:28.683] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:28.683] | : . ' , ; ` | : . ' ,   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:28.683] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:28.683] | : . ' , ; ` | : . ' ,   .. .. ..$ pid   : int 69106
[08:08:28.683] | : . ' , ; ` | : . ' ,   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:27"
[08:08:28.683] | : . ' , ; ` | : . ' ,   .. .. ..$ random: int 2147483647
[08:08:28.683] | : . ' , ; ` | : . ' ,   ..$ r_info             :List of 4
[08:08:28.683] | : . ' , ; ` | : . ' ,   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:28.683] | : . ' , ; ` | : . ' ,   .. .. ..$ : int [1:3] 4 5 0
[08:08:28.683] | : . ' , ; ` | : . ' ,   .. ..$ os           : chr "unix"
[08:08:28.683] | : . ' , ; ` | : . ' ,   .. ..$ os_name      : chr "Linux"
[08:08:28.683] | : . ' , ; ` | : . ' ,   .. ..$ captures_utf8: logi TRUE
[08:08:28.683] | : . ' , ; ` | : . ' ,   ..$ version            : chr "1.8"
[08:08:28.683] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr "FutureResult"
[08:08:28.683] | : . ' , ; ` | : . ' ,  $ success: logi TRUE
[08:08:28.683] | : . ' , ; ` | : . ' ,  $ time   : 'proc_time' Named num [1:5] 0.007 0 0.007 0 0
[08:08:28.683] | : . ' , ; ` | : . ' ,   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:28.683] | : . ' , ; ` | : . ' ,  $ tag    : NULL
[08:08:28.694] | : . ' , ; ` | : . ' , Received FutureResult
[08:08:28.694] | : . ' , ; ` | : . ' , FutureResult:
[08:08:28.694] | : . ' , ; ` | : . ' , value: ‘numeric’
[08:08:28.694] | : . ' , ; ` | : . ' , visible: TRUE
[08:08:28.694] | : . ' , ; ` | : . ' , stdout: character
[08:08:28.694] | : . ' , ; ` | : . ' , conditions: [n = 0] 
[08:08:28.694] | : . ' , ; ` | : . ' , RNG used: FALSE
[08:08:28.694] | : . ' , ; ` | : . ' , duration: 0.005916119 secs (started 2025-06-17 08:08:28.597161)
[08:08:28.694] | : . ' , ; ` | : . ' , version: 1.8
[08:08:28.694] | : . ' , ; ` | : . ' , FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'remove', earlySignal = 0) ...
[08:08:28.695] | : . ' , ; ` | : . ' , ; Removed future from position #1
[08:08:28.695] | : . ' , ; ` | : . ' , ; Number of registered futures: 1
[08:08:28.695] | : . ' , ; ` | : . ' , FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'remove', earlySignal = 0) ... done
[08:08:28.695] | : . ' , ; ` | : . ' , Erased future from future backend
[08:08:28.695] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:28.695] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:28.695] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:28.695] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:28.696] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:28.696] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:28.696] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:28.696] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:28.696] | : . ' , ; ` | : . ' , ;  int 0
[08:08:28.696] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:28.696] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ... done
[08:08:28.697] | : . ' , ; ` | : . ' receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:28.697] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-85>) ... done
[08:08:28.697] | : . ' , ; ` | : . assertFutureResult() ...
[08:08:28.697] | : . ' , ; ` | : . ' Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:28.697] | : . ' , ; ` | : . ' Future uuid: 85
[08:08:28.697] | : . ' , ; ` | : . ' identical; success
[08:08:28.697] | : . ' , ; ` | : . assertFutureResult() ... done
[08:08:28.697] | : . ' , ; ` | : . Future at position #1 is resolved ...
[08:08:28.697] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-85>) ...
[08:08:28.697] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:28.698] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:28.698] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:28.698] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:28.698] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:28.698] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:28.698] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:28.698] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:28.698] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:28.698] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:28.698] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:28.699] | : . ' , ; ` | : . ' , ;  int 0
[08:08:28.699] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:28.699] | : . ' , ; ` | : . ' , check for misuse ...
[08:08:28.699] | : . ' , ; ` | : . ' , check for misuse ... done
[08:08:28.699] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-85>) ... done
[08:08:28.700] | : . ' , ; ` | : . Future at position #1 is resolved ... done
[08:08:28.700] | : . ' , ; ` | : collectValues('workers-ebcf5645fe5296532f48b425138b7006', firstOnly = TRUE) ... done
[08:08:28.700] | : . ' , ; ` | : Remove collected futures ...
[08:08:28.700] | : . ' , ; ` | : . Indices of futures to drop: [n=1] ‘1’
[08:08:28.700] | : . ' , ; ` | : Remove collected futures ... done
[08:08:28.700] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'collect-first', earlySignal = 1) ... done
[08:08:28.700] | : . ' , ; ` | Early signaling of 2 future candidates ...
[08:08:28.700] | : . ' , ; ` | Number of futures with early signaling requested: 0
[08:08:28.700] | : . ' , ; ` | Early signaling of 2 future candidates ... done
[08:08:28.700] | : . ' , ; ` | Number of registered futures: 2
[08:08:28.701] | : . ' , ; ` Polling for a free worker ... done
[08:08:28.701] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:28.701] | : . ' , ; ` | Listing all futures
[08:08:28.701] | : . ' , ; ` | Number of registered futures: 1
[08:08:28.701] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:28.701] | : . ' , ; ` Total time: 0.0307791233062744
[08:08:28.701] | : . ' , ; requestNode() ... done
[08:08:28.701] | : . ' , ; FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:28.701] | : . ' , ; ` Listing all futures
[08:08:28.702] | : . ' , ; ` Number of registered futures: 1
[08:08:28.702] | : . ' , ; FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:28.702] | : . ' , ; avail: [n=2] ‘1’
[08:08:28.702] | : . ' , ; Index of first available worker: 1
[08:08:28.702] | : . ' , ; Validate that the worker is functional ...
[08:08:28.797] | : . ' , ; ` Worker is functional
[08:08:28.797] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:28.798] | : . ' , ; ` | Listing all futures
[08:08:28.798] | : . ' , ; ` | Number of registered futures: 1
[08:08:28.798] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:28.798] | : . ' , ; Validate that the worker is functional ... done
[08:08:28.798] | : . ' , requestWorker() ... done
[08:08:28.798] | : . ' , cluster node index: 1
[08:08:28.798] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:28.799] | : . ' eraseGlobalEnvironment() ...
[08:08:28.799] | : . ' eraseGlobalEnvironment() ... done
[08:08:28.799] | : . ' launchFuture() ...
[08:08:28.799] | : . ' , cluster node index: 1
[08:08:28.799] | : . ' , getFutureData() ...
[08:08:28.799] | : . ' , ; getFutureCore() ...
[08:08:28.800] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:28.800] | : . ' , ; getFutureCore() ... done
[08:08:28.800] | : . ' , ; getFutureCapture() ...
[08:08:28.800] | : . ' , ; getFutureCapture() ... done
[08:08:28.800] | : . ' , ; getFutureContext() ...
[08:08:28.800] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:28.800] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:28.800] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:28.800] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:28.801] | : . ' , ; getFutureContext() ... done
[08:08:28.801] | : . ' , getFutureData() ... done
[08:08:28.801] | : . ' , FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'add', earlySignal = 0) ...
[08:08:28.801] | : . ' , ; Appended future to position #2
[08:08:28.801] | : . ' , ; Number of registered futures: 2
[08:08:28.801] | : . ' , FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'add', earlySignal = 0) ... done
[08:08:28.802] | : . ' launchFuture() ... done
[08:08:28.802] | : . ' MultisessionFuture started
[08:08:28.802] | : . Launching futures ... done
[08:08:28.802] | : Using MultisessionFutureBackend ... done
[08:08:28.802] | : Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:28.802] | run() for ‘Future’ (<unnamed-87>) ... done
[08:08:28.802] future(..., label = NULL) ... done

<environment: 0x5643024e3828> 
<environment: 0x56430156b498> 
[08:08:28.803] resolved() for environment ...
[08:08:28.804] | resolved() for list ...
[08:08:28.804] | : Number of elements: 4
[08:08:28.804] | : Number of futures: 4
[08:08:28.804] | : resolved() for MultisessionFuture (<unnamed-86>) ...
[08:08:28.805] | : . Cluster node socket connection: index=5, id=1256
[08:08:28.805] | : . assertValidConnection() ...
[08:08:28.805] | : . ' cluster node index: 2
[08:08:28.808] | : . assertValidConnection() ... done
[08:08:28.808] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:28.808] | : . ' cluster node index: 2
[08:08:28.808] | : . ' [1] TRUE
[08:08:28.808] | : . ' received data:
[08:08:28.809] | : . ' List of 5
[08:08:28.809] | : . '  $ type   : chr "VALUE"
[08:08:28.809] | : . '  $ value  :List of 16
[08:08:28.809] | : . '   ..$ value              : NULL
[08:08:28.809] | : . '   ..$ visible            : logi TRUE
[08:08:28.809] | : . '   ..$ stdout             : chr ""
[08:08:28.809] | : . '   ..$ conditions         : list()
[08:08:28.809] | : . '   ..$ rng                : logi FALSE
[08:08:28.809] | : . '   ..$ seed               : NULL
[08:08:28.809] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:28.809] | : . '   ..$ misuseConnections  :List of 3
[08:08:28.809] | : . '   .. ..$ added   : NULL
[08:08:28.809] | : . '   .. ..$ removed : NULL
[08:08:28.809] | : . '   .. ..$ replaced: NULL
[08:08:28.809] | : . '   ..$ misuseDevices      : NULL
[08:08:28.809] | : . '   ..$ misuseDefaultDevice: list()
[08:08:28.809] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:28"
[08:08:28.809] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:28"
[08:08:28.809] | : . '   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "86"
[08:08:28.809] | : . '   ..$ session_uuid       : chr "bd12039d41799c8c6e56f5926a91e416"
[08:08:28.809] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:28.809] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:28.809] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:28.809] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:28.809] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:28.809] | : . '   .. .. ..$ pid   : int 69105
[08:08:28.809] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:27"
[08:08:28.809] | : . '   .. .. ..$ random: int 2147483647
[08:08:28.809] | : . '   ..$ r_info             :List of 4
[08:08:28.809] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:28.809] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:28.809] | : . '   .. ..$ os           : chr "unix"
[08:08:28.809] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:28.809] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:28.809] | : . '   ..$ version            : chr "1.8"
[08:08:28.809] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:28.809] | : . '  $ success: logi TRUE
[08:08:28.809] | : . '  $ time   : 'proc_time' Named num [1:5] 0.004 0 0.003 0 0
[08:08:28.809] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:28.809] | : . '  $ tag    : NULL
[08:08:28.819] | : . ' Received FutureResult
[08:08:28.819] | : . ' FutureResult:
[08:08:28.819] | : . ' value: ‘NULL’
[08:08:28.819] | : . ' visible: TRUE
[08:08:28.819] | : . ' stdout: character
[08:08:28.819] | : . ' conditions: [n = 0] 
[08:08:28.819] | : . ' RNG used: FALSE
[08:08:28.819] | : . ' duration: 0.002640247 secs (started 2025-06-17 08:08:28.701241)
[08:08:28.819] | : . ' version: 1.8
[08:08:28.820] | : . ' FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'remove', earlySignal = 0) ...
[08:08:28.820] | : . ' , Removed future from position #1
[08:08:28.820] | : . ' , Number of registered futures: 1
[08:08:28.820] | : . ' FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'remove', earlySignal = 0) ... done
[08:08:28.820] | : . ' Erased future from future backend
[08:08:28.821] | : . ' result() for ClusterFuture ...
[08:08:28.821] | : . ' , result already collected: FutureResult
[08:08:28.821] | : . ' result() for ClusterFuture ... done
[08:08:28.821] | : . ' signalConditions() ...
[08:08:28.821] | : . ' , include = ‘immediateCondition’
[08:08:28.821] | : . ' , exclude = 
[08:08:28.821] | : . ' , resignal = FALSE
[08:08:28.821] | : . ' , Number of conditions: 0
[08:08:28.821] | : . ' ,  int 0
[08:08:28.822] | : . ' signalConditions() ... done
[08:08:28.822] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:28.822] | : . receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:28.822] | : resolved() for MultisessionFuture (<unnamed-86>) ... done
[08:08:28.822] | : assertFutureResult() ...
[08:08:28.822] | : . Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:28.822] | : . Future uuid: 86
[08:08:28.822] | : . identical; success
[08:08:28.822] | : assertFutureResult() ... done
[08:08:28.823] | : resolved() for MultisessionFuture (<unnamed-87>) ...
[08:08:28.823] | : . Cluster node socket connection: index=4, id=1255
[08:08:28.823] | : . assertValidConnection() ...
[08:08:28.823] | : . ' cluster node index: 1
[08:08:28.823] | : . assertValidConnection() ... done
[08:08:28.834] | : . socketSelect(list(<connection #4 (id=1255)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:28.834] | : resolved() for MultisessionFuture (<unnamed-87>) ... done
[08:08:28.834] | resolved() for list ... done
[08:08:28.834] resolved() for environment ... done
 Named logi [1:4] TRUE TRUE TRUE FALSE
 - attr(*, "names")= chr [1:4] "a" "b" "c" "d"
[08:08:28.835] value() for MultisessionFuture (<unnamed-87>) ...
[08:08:28.835] | result() for ClusterFuture ...
[08:08:28.835] | : assertValidConnection() ...
[08:08:28.835] | : . cluster node index: 1
[08:08:28.836] | : assertValidConnection() ... done
[08:08:28.836] | : receiveMessageFromWorker() for ClusterFuture ...
[08:08:28.836] | : . cluster node index: 1
[08:08:28.845] | : . [1] TRUE
[08:08:28.846] | : . received data:
[08:08:28.846] | : . List of 5
[08:08:28.846] | : .  $ type   : chr "VALUE"
[08:08:28.846] | : .  $ value  :List of 16
[08:08:28.846] | : .   ..$ value              : num 4
[08:08:28.846] | : .   ..$ visible            : logi TRUE
[08:08:28.846] | : .   ..$ stdout             : chr ""
[08:08:28.846] | : .   ..$ conditions         : list()
[08:08:28.846] | : .   ..$ rng                : logi FALSE
[08:08:28.846] | : .   ..$ seed               : NULL
[08:08:28.846] | : .   ..$ misuseGlobalEnv    : NULL
[08:08:28.846] | : .   ..$ misuseConnections  :List of 3
[08:08:28.846] | : .   .. ..$ added   : NULL
[08:08:28.846] | : .   .. ..$ removed : NULL
[08:08:28.846] | : .   .. ..$ replaced: NULL
[08:08:28.846] | : .   ..$ misuseDevices      : NULL
[08:08:28.846] | : .   ..$ misuseDefaultDevice: list()
[08:08:28.846] | : .   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:28"
[08:08:28.846] | : .   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:28"
[08:08:28.846] | : .   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "87"
[08:08:28.846] | : .   ..$ session_uuid       : chr "363fe616e76346839f7969755b6a4995"
[08:08:28.846] | : .   .. ..- attr(*, "source")=List of 5
[08:08:28.846] | : .   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:28.846] | : .   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:28.846] | : .   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:28.846] | : .   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:28.846] | : .   .. .. ..$ pid   : int 69106
[08:08:28.846] | : .   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:27"
[08:08:28.846] | : .   .. .. ..$ random: int 2147483647
[08:08:28.846] | : .   ..$ r_info             :List of 4
[08:08:28.846] | : .   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:28.846] | : .   .. .. ..$ : int [1:3] 4 5 0
[08:08:28.846] | : .   .. ..$ os           : chr "unix"
[08:08:28.846] | : .   .. ..$ os_name      : chr "Linux"
[08:08:28.846] | : .   .. ..$ captures_utf8: logi TRUE
[08:08:28.846] | : .   ..$ version            : chr "1.8"
[08:08:28.846] | : .   ..- attr(*, "class")= chr "FutureResult"
[08:08:28.846] | : .  $ success: logi TRUE
[08:08:28.846] | : .  $ time   : 'proc_time' Named num [1:5] 0.004 0 0.004 0 0
[08:08:28.846] | : .   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:28.846] | : .  $ tag    : NULL
[08:08:28.856] | : . Received FutureResult
[08:08:28.857] | : . FutureResult:
[08:08:28.857] | : . value: ‘numeric’
[08:08:28.857] | : . visible: TRUE
[08:08:28.857] | : . stdout: character
[08:08:28.857] | : . conditions: [n = 0] 
[08:08:28.857] | : . RNG used: FALSE
[08:08:28.857] | : . duration: 0.002886057 secs (started 2025-06-17 08:08:28.842313)
[08:08:28.857] | : . version: 1.8
[08:08:28.857] | : . FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'remove', earlySignal = 0) ...
[08:08:28.857] | : . ' Removed future from position #1
[08:08:28.857] | : . ' Number of registered futures: 0
[08:08:28.857] | : . FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'remove', earlySignal = 0) ... done
[08:08:28.857] | : . Erased future from future backend
[08:08:28.858] | : . result() for ClusterFuture ...
[08:08:28.858] | : . ' result already collected: FutureResult
[08:08:28.858] | : . result() for ClusterFuture ... done
[08:08:28.858] | : . signalConditions() ...
[08:08:28.858] | : . ' include = ‘immediateCondition’
[08:08:28.858] | : . ' exclude = 
[08:08:28.858] | : . ' resignal = FALSE
[08:08:28.858] | : . ' Number of conditions: 0
[08:08:28.858] | : . '  int 0
[08:08:28.859] | : . signalConditions() ... done
[08:08:28.859] | : receiveMessageFromWorker() for ClusterFuture ... done
[08:08:28.859] | result() for ClusterFuture ... done
[08:08:28.859] | result() for ClusterFuture ...
[08:08:28.859] | : result already collected: FutureResult
[08:08:28.859] | result() for ClusterFuture ... done
[08:08:28.859] | signalConditions() ...
[08:08:28.860] | : include = ‘immediateCondition’
[08:08:28.860] | : exclude = 
[08:08:28.860] | : resignal = FALSE
[08:08:28.860] | : Number of conditions: 0
[08:08:28.860] | :  int 0
[08:08:28.860] | signalConditions() ... done
[08:08:28.860] | relay stdout ...
[08:08:28.860] | relay stdout ... done
[08:08:28.861] | check for misuse ...
[08:08:28.861] | check for misuse ... done
[08:08:28.861] value() for MultisessionFuture (<unnamed-87>) ... done
[08:08:28.861] value() for listenv ...
[08:08:28.861] | recursive: 0
[08:08:28.861] | reduce: FALSE
[08:08:28.862] | length: 4
[08:08:28.862] | elements: ‘a’, ‘b’, ‘c’, ‘d’
[08:08:28.862] | Number of remaining objects: 4
[08:08:28.862] | checking value #1:
[08:08:28.862] | 'obj' is atomic
[08:08:28.862] | signalConditionsASAP(numeric, pos=1) ...
[08:08:28.863] | : nx: 4
[08:08:28.863] | : relay: TRUE
[08:08:28.863] | : stdout: TRUE
[08:08:28.863] | : signal: TRUE
[08:08:28.863] | : resignal: FALSE
[08:08:28.863] | : force: TRUE
[08:08:28.863] | : relayed: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:28.863] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:28.863] | : until=2
[08:08:28.863] | : relaying element #2
[08:08:28.863] | : relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:28.864] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:28.864] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:28.864] | length: 3 (resolved future 1)
[08:08:28.864] value() for listenv ... done
[08:08:28.864] checking value #2:
[08:08:28.864] 'obj' is MultisessionFuture
[08:08:28.864] MultisessionFuture #2
[08:08:28.864] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:28.865] | nx: 4
[08:08:28.865] | relay: TRUE
[08:08:28.865] | stdout: TRUE
[08:08:28.865] | signal: TRUE
[08:08:28.865] | resignal: FALSE
[08:08:28.865] | force: TRUE
[08:08:28.865] | relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:28.865] | queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:28.865] | until=2
[08:08:28.865] | relaying element #2
[08:08:28.865] | value() for MultisessionFuture (<unnamed-85>) ...
[08:08:28.866] | : result() for ClusterFuture ...
[08:08:28.866] | : . result already collected: FutureResult
[08:08:28.866] | : result() for ClusterFuture ... done
[08:08:28.866] | : result() for ClusterFuture ...
[08:08:28.866] | : . result already collected: FutureResult
[08:08:28.866] | : result() for ClusterFuture ... done
[08:08:28.866] | : signalConditions() ...
[08:08:28.866] | : . include = ‘immediateCondition’
[08:08:28.866] | : . exclude = 
[08:08:28.867] | : . resignal = FALSE
[08:08:28.867] | : . Number of conditions: 0
[08:08:28.867] | : .  int 0
[08:08:28.867] | : signalConditions() ... done
[08:08:28.867] | : relay stdout ...
[08:08:28.867] | : relay stdout ... done
[08:08:28.867] | : check for misuse ...
[08:08:28.868] | : check for misuse ... done
[08:08:28.868] | value() for MultisessionFuture (<unnamed-85>) ... done
[08:08:28.868] | result() for ClusterFuture ...
[08:08:28.868] | : result already collected: FutureResult
[08:08:28.868] | result() for ClusterFuture ... done
[08:08:28.868] | signalConditions() ...
[08:08:28.868] | : include = ‘immediateCondition’
[08:08:28.868] | : exclude = 
[08:08:28.868] | : resignal = FALSE
[08:08:28.868] | : Number of conditions: 0
[08:08:28.869] | :  int 0
[08:08:28.869] | signalConditions() ... done
[08:08:28.869] | result() for ClusterFuture ...
[08:08:28.869] | : result already collected: FutureResult
[08:08:28.869] | result() for ClusterFuture ... done
[08:08:28.869] | signalConditions() ...
[08:08:28.869] | : include = ‘condition’
[08:08:28.870] | : exclude = ‘error’, ‘immediateCondition’
[08:08:28.870] | : resignal = TRUE
[08:08:28.870] | : Number of conditions: 0
[08:08:28.870] | :  int 0
[08:08:28.870] | signalConditions() ... done
[08:08:28.870] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:28.870] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:28.871] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:28.871] value(<MultisessionFuture>, ...) ...
[08:08:28.871] value(<MultisessionFuture>, ...) ... done
[08:08:28.871] value() for MultisessionFuture (<unnamed-85>) ...
[08:08:28.871] | result() for ClusterFuture ...
[08:08:28.871] | : result already collected: FutureResult
[08:08:28.871] | result() for ClusterFuture ... done
[08:08:28.871] | result() for ClusterFuture ...
[08:08:28.871] | : result already collected: FutureResult
[08:08:28.871] | result() for ClusterFuture ... done
[08:08:28.872] | signalConditions() ...
[08:08:28.872] | : include = ‘immediateCondition’
[08:08:28.872] | : exclude = 
[08:08:28.872] | : resignal = FALSE
[08:08:28.872] | : Number of conditions: 0
[08:08:28.872] | :  int 0
[08:08:28.872] | signalConditions() ... done
[08:08:28.873] | check for misuse ...
[08:08:28.873] | check for misuse ... done
[08:08:28.873] value() for MultisessionFuture (<unnamed-85>) ... done
[08:08:28.873] value: <numeric>
[08:08:28.873] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:28.873] | nx: 4
[08:08:28.873] | relay: TRUE
[08:08:28.873] | stdout: TRUE
[08:08:28.873] | signal: TRUE
[08:08:28.873] | resignal: FALSE
[08:08:28.874] | force: TRUE
[08:08:28.874] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:28.874] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:28.874] | until=3
[08:08:28.874] | relaying element #3
[08:08:28.874] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:28.874] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:28.874] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:28.874] resolve() for MultisessionFuture ...
[08:08:28.874] resolve() for MultisessionFuture ... done
[08:08:28.875] length: 2 (resolved future 2)

[08:08:28.875] checking value #3:
[08:08:28.875] 'obj' is MultisessionFuture
[08:08:28.875] MultisessionFuture #3
[08:08:28.875] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:28.875] | nx: 4
[08:08:28.875] | relay: TRUE
[08:08:28.875] | stdout: TRUE
[08:08:28.875] | signal: TRUE
[08:08:28.875] | resignal: FALSE
[08:08:28.876] | force: TRUE
[08:08:28.876] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:28.876] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:28.876] | until=3
[08:08:28.876] | relaying element #3
[08:08:28.876] | value() for MultisessionFuture (<unnamed-86>) ...
[08:08:28.876] | : result() for ClusterFuture ...
[08:08:28.876] | : . result already collected: FutureResult
[08:08:28.876] | : result() for ClusterFuture ... done
[08:08:28.876] | : result() for ClusterFuture ...
[08:08:28.877] | : . result already collected: FutureResult
[08:08:28.877] | : result() for ClusterFuture ... done
[08:08:28.877] | : signalConditions() ...
[08:08:28.877] | : . include = ‘immediateCondition’
[08:08:28.877] | : . exclude = 
[08:08:28.877] | : . resignal = FALSE
[08:08:28.877] | : . Number of conditions: 0
[08:08:28.877] | : .  int 0
[08:08:28.878] | : signalConditions() ... done
[08:08:28.878] | : relay stdout ...
[08:08:28.878] | : relay stdout ... done
[08:08:28.878] | : check for misuse ...
[08:08:28.878] | : check for misuse ... done
[08:08:28.878] | value() for MultisessionFuture (<unnamed-86>) ... done
[08:08:28.878] | result() for ClusterFuture ...
[08:08:28.878] | : result already collected: FutureResult
[08:08:28.878] | result() for ClusterFuture ... done
[08:08:28.879] | signalConditions() ...
[08:08:28.879] | : include = ‘immediateCondition’
[08:08:28.879] | : exclude = 
[08:08:28.879] | : resignal = FALSE
[08:08:28.879] | : Number of conditions: 0
[08:08:28.879] | :  int 0
[08:08:28.879] | signalConditions() ... done
[08:08:28.880] | result() for ClusterFuture ...
[08:08:28.880] | : result already collected: FutureResult
[08:08:28.880] | result() for ClusterFuture ... done
[08:08:28.880] | signalConditions() ...
[08:08:28.880] | : include = ‘condition’
[08:08:28.880] | : exclude = ‘error’, ‘immediateCondition’
[08:08:28.880] | : resignal = TRUE
[08:08:28.880] | : Number of conditions: 0
[08:08:28.880] | :  int 0
[08:08:28.881] | signalConditions() ... done
[08:08:28.881] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:28.881] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:28.881] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:28.881] value(<MultisessionFuture>, ...) ...
[08:08:28.881] value(<MultisessionFuture>, ...) ... done
[08:08:28.881] value() for MultisessionFuture (<unnamed-86>) ...
[08:08:28.881] | result() for ClusterFuture ...
[08:08:28.882] | : result already collected: FutureResult
[08:08:28.882] | result() for ClusterFuture ... done
[08:08:28.882] | result() for ClusterFuture ...
[08:08:28.882] | : result already collected: FutureResult
[08:08:28.882] | result() for ClusterFuture ... done
[08:08:28.882] | signalConditions() ...
[08:08:28.882] | : include = ‘immediateCondition’
[08:08:28.882] | : exclude = 
[08:08:28.882] | : resignal = FALSE
[08:08:28.882] | : Number of conditions: 0
[08:08:28.883] | :  int 0
[08:08:28.883] | signalConditions() ... done
[08:08:28.883] | check for misuse ...
[08:08:28.883] | check for misuse ... done
[08:08:28.883] value() for MultisessionFuture (<unnamed-86>) ... done
[08:08:28.883] value: <NULL>
[08:08:28.884] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:28.884] | nx: 4
[08:08:28.884] | relay: TRUE
[08:08:28.884] | stdout: TRUE
[08:08:28.884] | signal: TRUE
[08:08:28.884] | resignal: FALSE
[08:08:28.884] | force: TRUE
[08:08:28.884] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:28.884] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:28.884] | until=4
[08:08:28.885] | relaying element #4
[08:08:28.885] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:28.885] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:28.885] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:28.885] resolve() for MultisessionFuture ...
[08:08:28.885] resolve() for MultisessionFuture ... done
[08:08:28.885] length: 1 (resolved future 3)

[08:08:28.885] checking value #4:
[08:08:28.885] 'obj' is atomic
[08:08:28.886] signalConditionsASAP(numeric, pos=4) ...
[08:08:28.886] | nx: 4
[08:08:28.886] | relay: TRUE
[08:08:28.886] | stdout: TRUE
[08:08:28.886] | signal: TRUE
[08:08:28.886] | resignal: FALSE
[08:08:28.886] | force: TRUE
[08:08:28.886] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:28.886] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:28.886] | until=4
[08:08:28.886] | relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:28.887] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:28.887] signalConditionsASAP(numeric, pos=4) ... done
[08:08:28.887] length: 0 (resolved future 4)

[08:08:28.887] Relaying remaining futures ...
[08:08:28.887] | signalConditionsASAP(NULL, pos=0) ...
[08:08:28.887] | : nx: 4
[08:08:28.887] | : relay: TRUE
[08:08:28.887] | : stdout: TRUE
[08:08:28.888] | : signal: TRUE
[08:08:28.888] | : resignal: FALSE
[08:08:28.888] | : force: TRUE
[08:08:28.888] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:28.888] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
 - flush all
[08:08:28.888] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:28.888] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:28.888] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:28.888] Relaying remaining futures ... done

List of 4
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
Dimensions: c(2, 1, 3, 1)
[08:08:28.890] future(..., label = NULL) ...
[08:08:28.890] | lazy: FALSE
[08:08:28.890] | stdout: TRUE
[08:08:28.890] | conditions: [n=1] ‘condition’
[08:08:28.891] | gc: FALSE
[08:08:28.891] | earlySignal: FALSE
[08:08:28.891] | getGlobalsAndPackages() ...
[08:08:28.891] | : Searching for globals ...
[08:08:28.894] | : . globals found: [0] 
[08:08:28.894] | : Searching for globals ... done
[08:08:28.894] | : globals: [0] <none>
[08:08:28.895] | : packages: [0] <none>
[08:08:28.895] | getGlobalsAndPackages() ... done
[08:08:28.895] | run() for ‘Future’ (<unnamed-88>) ...
[08:08:28.895] | : state: ‘created’
[08:08:28.895] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:28.895] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:28.895] | : Using MultisessionFutureBackend ...
[08:08:28.895] | : . Number of futures since start: 12 (12 created, 12 launched, 16 finished)
[08:08:28.896] | : . Launching futures ...
[08:08:28.896] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:28.896] | : . ' , Workers: [n=2]
[08:08:28.896] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:28.897] | : . ' , FutureRegistry: ‘workers-ebcf5645fe5296532f48b425138b7006’
[08:08:28.898] | : . ' , requestWorker() ...
[08:08:28.898] | : . ' , ; requestNode() ...
[08:08:28.898] | : . ' , ; ` Number of workers: 2
[08:08:28.898] | : . ' , ; ` Polling for a free worker ...
[08:08:28.898] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:28.898] | : . ' , ; ` | : Listing all futures
[08:08:28.898] | : . ' , ; ` | : Number of registered futures: 0
[08:08:28.898] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:28.898] | : . ' , ; ` | Total time: 0
[08:08:28.898] | : . ' , ; ` Polling for a free worker ... done
[08:08:28.899] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:28.899] | : . ' , ; ` | Listing all futures
[08:08:28.899] | : . ' , ; ` | Number of registered futures: 0
[08:08:28.899] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:28.899] | : . ' , ; ` avail: [n=2] ‘1’, ‘2’
[08:08:28.899] | : . ' , ; ` Index of first available worker: 1
[08:08:28.899] | : . ' , ; ` Validate that the worker is functional ...
[08:08:28.992] | : . ' , ; ` | Worker is functional
[08:08:28.992] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:28.992] | : . ' , ; ` | : Listing all futures
[08:08:28.992] | : . ' , ; ` | : Number of registered futures: 0
[08:08:28.992] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:28.992] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:28.992] | : . ' , ; requestNode() ... done
[08:08:28.993] | : . ' , ; cluster node index: 1
[08:08:28.993] | : . ' , requestWorker() ... done
[08:08:28.993] | : . ' , eraseGlobalEnvironment() ...
[08:08:28.993] | : . ' , eraseGlobalEnvironment() ... done
[08:08:28.993] | : . ' , launchFuture() ...
[08:08:28.993] | : . ' , ; cluster node index: 1
[08:08:28.994] | : . ' , ; getFutureData() ...
[08:08:28.994] | : . ' , ; ` getFutureCore() ...
[08:08:28.994] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:28.994] | : . ' , ; ` getFutureCore() ... done
[08:08:28.994] | : . ' , ; ` getFutureCapture() ...
[08:08:28.994] | : . ' , ; ` getFutureCapture() ... done
[08:08:28.994] | : . ' , ; ` getFutureContext() ...
[08:08:28.994] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:28.994] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:28.994] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:28.995] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:28.995] | : . ' , ; ` getFutureContext() ... done
[08:08:28.995] | : . ' , ; getFutureData() ... done
[08:08:28.995] | : . ' , ; FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'add', earlySignal = 0) ...
[08:08:28.995] | : . ' , ; ` Appended future to position #1
[08:08:28.995] | : . ' , ; ` Number of registered futures: 1
[08:08:28.995] | : . ' , ; FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'add', earlySignal = 0) ... done
[08:08:28.996] | : . ' , launchFuture() ... done
[08:08:28.996] | : . ' , MultisessionFuture started
[08:08:28.996] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:28.996] | : . Launching futures ... done
[08:08:28.996] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:28.996] | : Using MultisessionFutureBackend ... done
[08:08:28.996] | run() for ‘Future’ (<unnamed-88>) ... done
[08:08:28.996] future(..., label = NULL) ... done
[08:08:28.996] future(..., label = NULL) ...
[08:08:28.996] | lazy: FALSE
[08:08:28.997] | stdout: TRUE
[08:08:28.997] | conditions: [n=1] ‘condition’
[08:08:28.997] | gc: FALSE
[08:08:28.997] | earlySignal: FALSE
[08:08:28.997] | getGlobalsAndPackages() ...
[08:08:28.997] | : Searching for globals ...
[08:08:28.998] | : . globals found: [0] 
[08:08:28.998] | : Searching for globals ... done
[08:08:28.998] | : globals: [0] <none>
[08:08:28.999] | : packages: [0] <none>
[08:08:28.999] | getGlobalsAndPackages() ... done
[08:08:28.999] | run() for ‘Future’ (<unnamed-89>) ...
[08:08:28.999] | : state: ‘created’
[08:08:28.999] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:28.999] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:28.999] | : Using MultisessionFutureBackend ...
[08:08:28.999] | : . Number of futures since start: 13 (13 created, 13 launched, 16 finished)
[08:08:29.000] | : . Launching futures ...
[08:08:29.000] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:29.000] | : . ' , Workers: [n=2]
[08:08:29.000] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:29.001] | : . ' , FutureRegistry: ‘workers-ebcf5645fe5296532f48b425138b7006’
[08:08:29.002] | : . ' , requestWorker() ...
[08:08:29.002] | : . ' , ; requestNode() ...
[08:08:29.002] | : . ' , ; ` Number of workers: 2
[08:08:29.002] | : . ' , ; ` Polling for a free worker ...
[08:08:29.002] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:29.002] | : . ' , ; ` | : Listing all futures
[08:08:29.002] | : . ' , ; ` | : Number of registered futures: 1
[08:08:29.002] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:29.002] | : . ' , ; ` | Total time: 0
[08:08:29.002] | : . ' , ; ` Polling for a free worker ... done
[08:08:29.003] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:29.003] | : . ' , ; ` | Listing all futures
[08:08:29.003] | : . ' , ; ` | Number of registered futures: 1
[08:08:29.003] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:29.003] | : . ' , ; ` avail: [n=2] ‘2’
[08:08:29.003] | : . ' , ; ` Index of first available worker: 2
[08:08:29.003] | : . ' , ; ` Validate that the worker is functional ...
[08:08:29.065] | : . ' , ; ` | Worker is functional
[08:08:29.065] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:29.065] | : . ' , ; ` | : Listing all futures
[08:08:29.065] | : . ' , ; ` | : Number of registered futures: 1
[08:08:29.066] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:29.066] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:29.066] | : . ' , ; requestNode() ... done
[08:08:29.066] | : . ' , ; cluster node index: 2
[08:08:29.066] | : . ' , requestWorker() ... done
[08:08:29.066] | : . ' , eraseGlobalEnvironment() ...
[08:08:29.067] | : . ' , eraseGlobalEnvironment() ... done
[08:08:29.067] | : . ' , launchFuture() ...
[08:08:29.067] | : . ' , ; cluster node index: 2
[08:08:29.067] | : . ' , ; getFutureData() ...
[08:08:29.067] | : . ' , ; ` getFutureCore() ...
[08:08:29.067] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:29.067] | : . ' , ; ` getFutureCore() ... done
[08:08:29.067] | : . ' , ; ` getFutureCapture() ...
[08:08:29.067] | : . ' , ; ` getFutureCapture() ... done
[08:08:29.068] | : . ' , ; ` getFutureContext() ...
[08:08:29.068] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.068] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:29.068] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.068] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:29.068] | : . ' , ; ` getFutureContext() ... done
[08:08:29.068] | : . ' , ; getFutureData() ... done
[08:08:29.069] | : . ' , ; FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'add', earlySignal = 0) ...
[08:08:29.069] | : . ' , ; ` Appended future to position #2
[08:08:29.069] | : . ' , ; ` Number of registered futures: 2
[08:08:29.069] | : . ' , ; FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'add', earlySignal = 0) ... done
[08:08:29.069] | : . ' , launchFuture() ... done
[08:08:29.069] | : . ' , MultisessionFuture started
[08:08:29.069] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:29.069] | : . Launching futures ... done
[08:08:29.069] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:29.070] | : Using MultisessionFutureBackend ... done
[08:08:29.070] | run() for ‘Future’ (<unnamed-89>) ... done
[08:08:29.070] future(..., label = NULL) ... done
[08:08:29.070] future(..., label = NULL) ...
[08:08:29.070] | lazy: FALSE
[08:08:29.070] | stdout: TRUE
[08:08:29.070] | conditions: [n=1] ‘condition’
[08:08:29.071] | gc: FALSE
[08:08:29.071] | earlySignal: FALSE
[08:08:29.071] | getGlobalsAndPackages() ...
[08:08:29.071] | : Searching for globals ...
[08:08:29.074] | : . globals found: [1] ‘{’
[08:08:29.074] | : Searching for globals ... done
[08:08:29.074] | : Resolving globals: FALSE
[08:08:29.074] | : Search for packages associated with the globals ...
[08:08:29.075] | : . Packages associated with globals: [1] ‘base’
[08:08:29.075] | : . Packages: [1] ‘base’
[08:08:29.075] | : Search for packages associated with the globals ... done
[08:08:29.075] | : Packages after dropping 'base': [0] 
[08:08:29.075] | : globals: [0] 
[08:08:29.075] | : packages: [0] 
[08:08:29.075] | getGlobalsAndPackages() ... done
[08:08:29.076] | run() for ‘Future’ (<unnamed-90>) ...
[08:08:29.076] | : state: ‘created’
[08:08:29.076] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.076] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.076] | : Using MultisessionFutureBackend ...
[08:08:29.076] | : . Number of futures since start: 14 (14 created, 14 launched, 16 finished)
[08:08:29.076] | : . Launching futures ...
[08:08:29.076] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:29.077] | : . ' , Workers: [n=2]
[08:08:29.077] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:29.078] | : . ' , FutureRegistry: ‘workers-ebcf5645fe5296532f48b425138b7006’
[08:08:29.078] | : . ' , requestWorker() ...
[08:08:29.078] | : . ' , ; requestNode() ...
[08:08:29.079] | : . ' , ; ` Number of workers: 2
[08:08:29.079] | : . ' , ; ` Polling for a free worker ...
[08:08:29.079] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:29.079] | : . ' , ; ` | : Listing all futures
[08:08:29.079] | : . ' , ; ` | : Number of registered futures: 2
[08:08:29.079] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:29.079] | : . ' , ; ` | Poll #1 (0): usedNodes() = 2, workers = 2
[08:08:29.089] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'collect-first', earlySignal = 1) ...
[08:08:29.090] | : . ' , ; ` | : collectValues('workers-ebcf5645fe5296532f48b425138b7006', firstOnly = TRUE) ...
[08:08:29.090] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-88>) ...
[08:08:29.090] | : . ' , ; ` | : . ' Cluster node socket connection: index=4, id=1255
[08:08:29.090] | : . ' , ; ` | : . ' assertValidConnection() ...
[08:08:29.091] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:29.091] | : . ' , ; ` | : . ' assertValidConnection() ... done
[08:08:29.091] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ...
[08:08:29.091] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:29.092] | : . ' , ; ` | : . ' , [1] TRUE
[08:08:29.092] | : . ' , ; ` | : . ' , received data:
[08:08:29.092] | : . ' , ; ` | : . ' , List of 5
[08:08:29.092] | : . ' , ; ` | : . ' ,  $ type   : chr "VALUE"
[08:08:29.092] | : . ' , ; ` | : . ' ,  $ value  :List of 16
[08:08:29.092] | : . ' , ; ` | : . ' ,   ..$ value              : num 2
[08:08:29.092] | : . ' , ; ` | : . ' ,   ..$ visible            : logi TRUE
[08:08:29.092] | : . ' , ; ` | : . ' ,   ..$ stdout             : chr ""
[08:08:29.092] | : . ' , ; ` | : . ' ,   ..$ conditions         : list()
[08:08:29.092] | : . ' , ; ` | : . ' ,   ..$ rng                : logi FALSE
[08:08:29.092] | : . ' , ; ` | : . ' ,   ..$ seed               : NULL
[08:08:29.092] | : . ' , ; ` | : . ' ,   ..$ misuseGlobalEnv    : NULL
[08:08:29.092] | : . ' , ; ` | : . ' ,   ..$ misuseConnections  :List of 3
[08:08:29.092] | : . ' , ; ` | : . ' ,   .. ..$ added   : NULL
[08:08:29.092] | : . ' , ; ` | : . ' ,   .. ..$ removed : NULL
[08:08:29.092] | : . ' , ; ` | : . ' ,   .. ..$ replaced: NULL
[08:08:29.092] | : . ' , ; ` | : . ' ,   ..$ misuseDevices      : NULL
[08:08:29.092] | : . ' , ; ` | : . ' ,   ..$ misuseDefaultDevice: list()
[08:08:29.092] | : . ' , ; ` | : . ' ,   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:29"
[08:08:29.092] | : . ' , ; ` | : . ' ,   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:29"
[08:08:29.092] | : . ' , ; ` | : . ' ,   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "88"
[08:08:29.092] | : . ' , ; ` | : . ' ,   ..$ session_uuid       : chr "363fe616e76346839f7969755b6a4995"
[08:08:29.092] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "source")=List of 5
[08:08:29.092] | : . ' , ; ` | : . ' ,   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:29.092] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:29.092] | : . ' , ; ` | : . ' ,   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:29.092] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:29.092] | : . ' , ; ` | : . ' ,   .. .. ..$ pid   : int 69106
[08:08:29.092] | : . ' , ; ` | : . ' ,   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:27"
[08:08:29.092] | : . ' , ; ` | : . ' ,   .. .. ..$ random: int 2147483647
[08:08:29.092] | : . ' , ; ` | : . ' ,   ..$ r_info             :List of 4
[08:08:29.092] | : . ' , ; ` | : . ' ,   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:29.092] | : . ' , ; ` | : . ' ,   .. .. ..$ : int [1:3] 4 5 0
[08:08:29.092] | : . ' , ; ` | : . ' ,   .. ..$ os           : chr "unix"
[08:08:29.092] | : . ' , ; ` | : . ' ,   .. ..$ os_name      : chr "Linux"
[08:08:29.092] | : . ' , ; ` | : . ' ,   .. ..$ captures_utf8: logi TRUE
[08:08:29.092] | : . ' , ; ` | : . ' ,   ..$ version            : chr "1.8"
[08:08:29.092] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr "FutureResult"
[08:08:29.092] | : . ' , ; ` | : . ' ,  $ success: logi TRUE
[08:08:29.092] | : . ' , ; ` | : . ' ,  $ time   : 'proc_time' Named num [1:5] 0.006 0 0.006 0 0
[08:08:29.092] | : . ' , ; ` | : . ' ,   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:29.092] | : . ' , ; ` | : . ' ,  $ tag    : NULL
[08:08:29.103] | : . ' , ; ` | : . ' , Received FutureResult
[08:08:29.103] | : . ' , ; ` | : . ' , FutureResult:
[08:08:29.103] | : . ' , ; ` | : . ' , value: ‘numeric’
[08:08:29.103] | : . ' , ; ` | : . ' , visible: TRUE
[08:08:29.103] | : . ' , ; ` | : . ' , stdout: character
[08:08:29.103] | : . ' , ; ` | : . ' , conditions: [n = 0] 
[08:08:29.103] | : . ' , ; ` | : . ' , RNG used: FALSE
[08:08:29.103] | : . ' , ; ` | : . ' , duration: 0.003576279 secs (started 2025-06-17 08:08:29.036244)
[08:08:29.103] | : . ' , ; ` | : . ' , version: 1.8
[08:08:29.104] | : . ' , ; ` | : . ' , FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'remove', earlySignal = 0) ...
[08:08:29.104] | : . ' , ; ` | : . ' , ; Removed future from position #1
[08:08:29.104] | : . ' , ; ` | : . ' , ; Number of registered futures: 1
[08:08:29.104] | : . ' , ; ` | : . ' , FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'remove', earlySignal = 0) ... done
[08:08:29.104] | : . ' , ; ` | : . ' , Erased future from future backend
[08:08:29.104] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:29.104] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:29.104] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:29.105] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:29.105] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:29.105] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:29.105] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:29.105] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:29.105] | : . ' , ; ` | : . ' , ;  int 0
[08:08:29.105] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:29.106] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ... done
[08:08:29.106] | : . ' , ; ` | : . ' receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:29.106] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-88>) ... done
[08:08:29.106] | : . ' , ; ` | : . assertFutureResult() ...
[08:08:29.106] | : . ' , ; ` | : . ' Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:29.106] | : . ' , ; ` | : . ' Future uuid: 88
[08:08:29.106] | : . ' , ; ` | : . ' identical; success
[08:08:29.106] | : . ' , ; ` | : . assertFutureResult() ... done
[08:08:29.106] | : . ' , ; ` | : . Future at position #1 is resolved ...
[08:08:29.106] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-88>) ...
[08:08:29.107] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:29.107] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:29.107] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:29.107] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:29.107] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:29.107] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:29.107] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:29.107] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:29.107] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:29.108] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:29.108] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:29.108] | : . ' , ; ` | : . ' , ;  int 0
[08:08:29.108] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:29.108] | : . ' , ; ` | : . ' , check for misuse ...
[08:08:29.108] | : . ' , ; ` | : . ' , check for misuse ... done
[08:08:29.109] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-88>) ... done
[08:08:29.109] | : . ' , ; ` | : . Future at position #1 is resolved ... done
[08:08:29.109] | : . ' , ; ` | : collectValues('workers-ebcf5645fe5296532f48b425138b7006', firstOnly = TRUE) ... done
[08:08:29.109] | : . ' , ; ` | : Remove collected futures ...
[08:08:29.109] | : . ' , ; ` | : . Indices of futures to drop: [n=1] ‘1’
[08:08:29.109] | : . ' , ; ` | : Remove collected futures ... done
[08:08:29.109] | : . ' , ; ` | FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'collect-first', earlySignal = 1) ... done
[08:08:29.109] | : . ' , ; ` | Early signaling of 2 future candidates ...
[08:08:29.110] | : . ' , ; ` | Number of futures with early signaling requested: 0
[08:08:29.110] | : . ' , ; ` | Early signaling of 2 future candidates ... done
[08:08:29.110] | : . ' , ; ` | Number of registered futures: 2
[08:08:29.110] | : . ' , ; ` Polling for a free worker ... done
[08:08:29.110] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:29.110] | : . ' , ; ` | Listing all futures
[08:08:29.110] | : . ' , ; ` | Number of registered futures: 1
[08:08:29.110] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:29.110] | : . ' , ; ` Total time: 0.0311672687530518
[08:08:29.111] | : . ' , ; requestNode() ... done
[08:08:29.111] | : . ' , ; FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:29.111] | : . ' , ; ` Listing all futures
[08:08:29.111] | : . ' , ; ` Number of registered futures: 1
[08:08:29.111] | : . ' , ; FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:29.111] | : . ' , ; avail: [n=2] ‘1’
[08:08:29.111] | : . ' , ; Index of first available worker: 1
[08:08:29.111] | : . ' , ; Validate that the worker is functional ...
[08:08:29.209] | : . ' , ; ` Worker is functional
[08:08:29.209] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ...
[08:08:29.209] | : . ' , ; ` | Listing all futures
[08:08:29.209] | : . ' , ; ` | Number of registered futures: 1
[08:08:29.210] | : . ' , ; ` FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'list', earlySignal = 0) ... done
[08:08:29.210] | : . ' , ; Validate that the worker is functional ... done
[08:08:29.210] | : . ' , requestWorker() ... done
[08:08:29.210] | : . ' , cluster node index: 1
[08:08:29.210] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:29.210] | : . ' eraseGlobalEnvironment() ...
[08:08:29.211] | : . ' eraseGlobalEnvironment() ... done
[08:08:29.211] | : . ' launchFuture() ...
[08:08:29.211] | : . ' , cluster node index: 1
[08:08:29.211] | : . ' , getFutureData() ...
[08:08:29.211] | : . ' , ; getFutureCore() ...
[08:08:29.211] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:29.211] | : . ' , ; getFutureCore() ... done
[08:08:29.211] | : . ' , ; getFutureCapture() ...
[08:08:29.211] | : . ' , ; getFutureCapture() ... done
[08:08:29.211] | : . ' , ; getFutureContext() ...
[08:08:29.212] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.212] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:29.212] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.212] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:29.212] | : . ' , ; getFutureContext() ... done
[08:08:29.212] | : . ' , getFutureData() ... done
[08:08:29.212] | : . ' , FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'add', earlySignal = 0) ...
[08:08:29.213] | : . ' , ; Appended future to position #2
[08:08:29.213] | : . ' , ; Number of registered futures: 2
[08:08:29.213] | : . ' , FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'add', earlySignal = 0) ... done
[08:08:29.213] | : . ' launchFuture() ... done
[08:08:29.213] | : . ' MultisessionFuture started
[08:08:29.213] | : . Launching futures ... done
[08:08:29.213] | : Using MultisessionFutureBackend ... done
[08:08:29.213] | : Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:29.213] | run() for ‘Future’ (<unnamed-90>) ... done
[08:08:29.214] future(..., label = NULL) ... done

<environment: 0x56430072f828> 
<environment: 0x5643038af7a0> 
[08:08:29.214] resolved() for environment ...
[08:08:29.215] | resolved() for list ...
[08:08:29.215] | : Number of elements: 4
[08:08:29.215] | : Number of futures: 4
[08:08:29.215] | : resolved() for MultisessionFuture (<unnamed-89>) ...
[08:08:29.216] | : . Cluster node socket connection: index=5, id=1256
[08:08:29.216] | : . assertValidConnection() ...
[08:08:29.216] | : . ' cluster node index: 2
[08:08:29.216] | : . assertValidConnection() ... done
[08:08:29.216] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:29.217] | : . ' cluster node index: 2
[08:08:29.217] | : . ' [1] TRUE
[08:08:29.217] | : . ' received data:
[08:08:29.217] | : . ' List of 5
[08:08:29.217] | : . '  $ type   : chr "VALUE"
[08:08:29.217] | : . '  $ value  :List of 16
[08:08:29.217] | : . '   ..$ value              : NULL
[08:08:29.217] | : . '   ..$ visible            : logi TRUE
[08:08:29.217] | : . '   ..$ stdout             : chr ""
[08:08:29.217] | : . '   ..$ conditions         : list()
[08:08:29.217] | : . '   ..$ rng                : logi FALSE
[08:08:29.217] | : . '   ..$ seed               : NULL
[08:08:29.217] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:29.217] | : . '   ..$ misuseConnections  :List of 3
[08:08:29.217] | : . '   .. ..$ added   : NULL
[08:08:29.217] | : . '   .. ..$ removed : NULL
[08:08:29.217] | : . '   .. ..$ replaced: NULL
[08:08:29.217] | : . '   ..$ misuseDevices      : NULL
[08:08:29.217] | : . '   ..$ misuseDefaultDevice: list()
[08:08:29.217] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:29"
[08:08:29.217] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:29"
[08:08:29.217] | : . '   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "89"
[08:08:29.217] | : . '   ..$ session_uuid       : chr "bd12039d41799c8c6e56f5926a91e416"
[08:08:29.217] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:29.217] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:29.217] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:29.217] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:29.217] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:29.217] | : . '   .. .. ..$ pid   : int 69105
[08:08:29.217] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:27"
[08:08:29.217] | : . '   .. .. ..$ random: int 2147483647
[08:08:29.217] | : . '   ..$ r_info             :List of 4
[08:08:29.217] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:29.217] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:29.217] | : . '   .. ..$ os           : chr "unix"
[08:08:29.217] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:29.217] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:29.217] | : . '   ..$ version            : chr "1.8"
[08:08:29.217] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:29.217] | : . '  $ success: logi TRUE
[08:08:29.217] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:29.217] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:29.217] | : . '  $ tag    : NULL
[08:08:29.227] | : . ' Received FutureResult
[08:08:29.228] | : . ' FutureResult:
[08:08:29.228] | : . ' value: ‘NULL’
[08:08:29.228] | : . ' visible: TRUE
[08:08:29.228] | : . ' stdout: character
[08:08:29.228] | : . ' conditions: [n = 0] 
[08:08:29.228] | : . ' RNG used: FALSE
[08:08:29.228] | : . ' duration: 0.002784014 secs (started 2025-06-17 08:08:29.11015)
[08:08:29.228] | : . ' version: 1.8
[08:08:29.228] | : . ' FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'remove', earlySignal = 0) ...
[08:08:29.228] | : . ' , Removed future from position #1
[08:08:29.228] | : . ' , Number of registered futures: 1
[08:08:29.228] | : . ' FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'remove', earlySignal = 0) ... done
[08:08:29.229] | : . ' Erased future from future backend
[08:08:29.229] | : . ' result() for ClusterFuture ...
[08:08:29.229] | : . ' , result already collected: FutureResult
[08:08:29.229] | : . ' result() for ClusterFuture ... done
[08:08:29.229] | : . ' signalConditions() ...
[08:08:29.229] | : . ' , include = ‘immediateCondition’
[08:08:29.229] | : . ' , exclude = 
[08:08:29.229] | : . ' , resignal = FALSE
[08:08:29.229] | : . ' , Number of conditions: 0
[08:08:29.229] | : . ' ,  int 0
[08:08:29.230] | : . ' signalConditions() ... done
[08:08:29.230] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:29.230] | : . receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:29.230] | : resolved() for MultisessionFuture (<unnamed-89>) ... done
[08:08:29.230] | : assertFutureResult() ...
[08:08:29.230] | : . Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:29.230] | : . Future uuid: 89
[08:08:29.230] | : . identical; success
[08:08:29.230] | : assertFutureResult() ... done
[08:08:29.231] | : resolved() for MultisessionFuture (<unnamed-90>) ...
[08:08:29.231] | : . Cluster node socket connection: index=4, id=1255
[08:08:29.231] | : . assertValidConnection() ...
[08:08:29.231] | : . ' cluster node index: 1
[08:08:29.231] | : . assertValidConnection() ... done
[08:08:29.242] | : . socketSelect(list(<connection #4 (id=1255)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:29.242] | : resolved() for MultisessionFuture (<unnamed-90>) ... done
[08:08:29.242] | resolved() for list ... done
[08:08:29.242] resolved() for environment ... done
 Named logi [1:4] TRUE TRUE TRUE FALSE
 - attr(*, "names")= chr [1:4] "a" "b" "c" "d"
[08:08:29.243] value() for MultisessionFuture (<unnamed-90>) ...
[08:08:29.243] | result() for ClusterFuture ...
[08:08:29.243] | : assertValidConnection() ...
[08:08:29.244] | : . cluster node index: 1
[08:08:29.244] | : assertValidConnection() ... done
[08:08:29.244] | : receiveMessageFromWorker() for ClusterFuture ...
[08:08:29.244] | : . cluster node index: 1
[08:08:29.256] | : . [1] TRUE
[08:08:29.256] | : . received data:
[08:08:29.256] | : . List of 5
[08:08:29.256] | : .  $ type   : chr "VALUE"
[08:08:29.256] | : .  $ value  :List of 16
[08:08:29.256] | : .   ..$ value              : num 4
[08:08:29.256] | : .   ..$ visible            : logi TRUE
[08:08:29.256] | : .   ..$ stdout             : chr ""
[08:08:29.256] | : .   ..$ conditions         : list()
[08:08:29.256] | : .   ..$ rng                : logi FALSE
[08:08:29.256] | : .   ..$ seed               : NULL
[08:08:29.256] | : .   ..$ misuseGlobalEnv    : NULL
[08:08:29.256] | : .   ..$ misuseConnections  :List of 3
[08:08:29.256] | : .   .. ..$ added   : NULL
[08:08:29.256] | : .   .. ..$ removed : NULL
[08:08:29.256] | : .   .. ..$ replaced: NULL
[08:08:29.256] | : .   ..$ misuseDevices      : NULL
[08:08:29.256] | : .   ..$ misuseDefaultDevice: list()
[08:08:29.256] | : .   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:29"
[08:08:29.256] | : .   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:29"
[08:08:29.256] | : .   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "90"
[08:08:29.256] | : .   ..$ session_uuid       : chr "363fe616e76346839f7969755b6a4995"
[08:08:29.256] | : .   .. ..- attr(*, "source")=List of 5
[08:08:29.256] | : .   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:29.256] | : .   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:29.256] | : .   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:29.256] | : .   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:29.256] | : .   .. .. ..$ pid   : int 69106
[08:08:29.256] | : .   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:27"
[08:08:29.256] | : .   .. .. ..$ random: int 2147483647
[08:08:29.256] | : .   ..$ r_info             :List of 4
[08:08:29.256] | : .   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:29.256] | : .   .. .. ..$ : int [1:3] 4 5 0
[08:08:29.256] | : .   .. ..$ os           : chr "unix"
[08:08:29.256] | : .   .. ..$ os_name      : chr "Linux"
[08:08:29.256] | : .   .. ..$ captures_utf8: logi TRUE
[08:08:29.256] | : .   ..$ version            : chr "1.8"
[08:08:29.256] | : .   ..- attr(*, "class")= chr "FutureResult"
[08:08:29.256] | : .  $ success: logi TRUE
[08:08:29.256] | : .  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:29.256] | : .   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:29.256] | : .  $ tag    : NULL
[08:08:29.267] | : . Received FutureResult
[08:08:29.267] | : . FutureResult:
[08:08:29.267] | : . value: ‘numeric’
[08:08:29.267] | : . visible: TRUE
[08:08:29.267] | : . stdout: character
[08:08:29.267] | : . conditions: [n = 0] 
[08:08:29.267] | : . RNG used: FALSE
[08:08:29.267] | : . duration: 0.00278759 secs (started 2025-06-17 08:08:29.253145)
[08:08:29.267] | : . version: 1.8
[08:08:29.268] | : . FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'remove', earlySignal = 0) ...
[08:08:29.268] | : . ' Removed future from position #1
[08:08:29.268] | : . ' Number of registered futures: 0
[08:08:29.268] | : . FutureRegistry('workers-ebcf5645fe5296532f48b425138b7006', action = 'remove', earlySignal = 0) ... done
[08:08:29.268] | : . Erased future from future backend
[08:08:29.268] | : . result() for ClusterFuture ...
[08:08:29.268] | : . ' result already collected: FutureResult
[08:08:29.268] | : . result() for ClusterFuture ... done
[08:08:29.269] | : . signalConditions() ...
[08:08:29.269] | : . ' include = ‘immediateCondition’
[08:08:29.269] | : . ' exclude = 
[08:08:29.269] | : . ' resignal = FALSE
[08:08:29.269] | : . ' Number of conditions: 0
[08:08:29.269] | : . '  int 0
[08:08:29.269] | : . signalConditions() ... done
[08:08:29.270] | : receiveMessageFromWorker() for ClusterFuture ... done
[08:08:29.270] | result() for ClusterFuture ... done
[08:08:29.270] | result() for ClusterFuture ...
[08:08:29.270] | : result already collected: FutureResult
[08:08:29.270] | result() for ClusterFuture ... done
[08:08:29.270] | signalConditions() ...
[08:08:29.270] | : include = ‘immediateCondition’
[08:08:29.270] | : exclude = 
[08:08:29.270] | : resignal = FALSE
[08:08:29.270] | : Number of conditions: 0
[08:08:29.271] | :  int 0
[08:08:29.271] | signalConditions() ... done
[08:08:29.271] | relay stdout ...
[08:08:29.271] | relay stdout ... done
[08:08:29.271] | check for misuse ...
[08:08:29.271] | check for misuse ... done
[08:08:29.271] value() for MultisessionFuture (<unnamed-90>) ... done
[08:08:29.272] value() for listenv ...
[08:08:29.272] | recursive: 0
[08:08:29.272] | reduce: FALSE
[08:08:29.273] | length: 4
[08:08:29.273] | elements: ‘a’, ‘b’, ‘c’, ‘d’
[08:08:29.273] | Number of remaining objects: 4
[08:08:29.273] | checking value #1:
[08:08:29.273] | 'obj' is atomic
[08:08:29.273] | signalConditionsASAP(numeric, pos=1) ...
[08:08:29.273] | : nx: 4
[08:08:29.273] | : relay: TRUE
[08:08:29.273] | : stdout: TRUE
[08:08:29.274] | : signal: TRUE
[08:08:29.274] | : resignal: FALSE
[08:08:29.274] | : force: TRUE
[08:08:29.274] | : relayed: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:29.274] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:29.274] | : until=2
[08:08:29.274] | : relaying element #2
[08:08:29.274] | : relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:29.274] | : queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:29.274] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:29.275] | length: 3 (resolved future 1)
[08:08:29.275] value() for listenv ... done
[08:08:29.275] checking value #2:
[08:08:29.275] 'obj' is MultisessionFuture
[08:08:29.275] MultisessionFuture #2
[08:08:29.275] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:29.275] | nx: 4
[08:08:29.275] | relay: TRUE
[08:08:29.275] | stdout: TRUE
[08:08:29.275] | signal: TRUE
[08:08:29.276] | resignal: FALSE
[08:08:29.276] | force: TRUE
[08:08:29.276] | relayed: [n=4] TRUE, FALSE, FALSE, FALSE
[08:08:29.276] | queued futures: [n=4] FALSE, FALSE, FALSE, FALSE
[08:08:29.276] | until=2
[08:08:29.276] | relaying element #2
[08:08:29.276] | value() for MultisessionFuture (<unnamed-88>) ...
[08:08:29.276] | : result() for ClusterFuture ...
[08:08:29.276] | : . result already collected: FutureResult
[08:08:29.276] | : result() for ClusterFuture ... done
[08:08:29.277] | : result() for ClusterFuture ...
[08:08:29.277] | : . result already collected: FutureResult
[08:08:29.277] | : result() for ClusterFuture ... done
[08:08:29.277] | : signalConditions() ...
[08:08:29.277] | : . include = ‘immediateCondition’
[08:08:29.277] | : . exclude = 
[08:08:29.277] | : . resignal = FALSE
[08:08:29.277] | : . Number of conditions: 0
[08:08:29.277] | : .  int 0
[08:08:29.278] | : signalConditions() ... done
[08:08:29.278] | : relay stdout ...
[08:08:29.278] | : relay stdout ... done
[08:08:29.278] | : check for misuse ...
[08:08:29.278] | : check for misuse ... done
[08:08:29.278] | value() for MultisessionFuture (<unnamed-88>) ... done
[08:08:29.278] | result() for ClusterFuture ...
[08:08:29.278] | : result already collected: FutureResult
[08:08:29.279] | result() for ClusterFuture ... done
[08:08:29.279] | signalConditions() ...
[08:08:29.279] | : include = ‘immediateCondition’
[08:08:29.279] | : exclude = 
[08:08:29.279] | : resignal = FALSE
[08:08:29.279] | : Number of conditions: 0
[08:08:29.279] | :  int 0
[08:08:29.280] | signalConditions() ... done
[08:08:29.280] | result() for ClusterFuture ...
[08:08:29.280] | : result already collected: FutureResult
[08:08:29.280] | result() for ClusterFuture ... done
[08:08:29.280] | signalConditions() ...
[08:08:29.280] | : include = ‘condition’
[08:08:29.280] | : exclude = ‘error’, ‘immediateCondition’
[08:08:29.280] | : resignal = TRUE
[08:08:29.280] | : Number of conditions: 0
[08:08:29.280] | :  int 0
[08:08:29.281] | signalConditions() ... done
[08:08:29.281] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:29.281] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:29.281] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:29.281] value(<MultisessionFuture>, ...) ...
[08:08:29.281] value(<MultisessionFuture>, ...) ... done
[08:08:29.281] value() for MultisessionFuture (<unnamed-88>) ...
[08:08:29.282] | result() for ClusterFuture ...
[08:08:29.282] | : result already collected: FutureResult
[08:08:29.282] | result() for ClusterFuture ... done
[08:08:29.282] | result() for ClusterFuture ...
[08:08:29.282] | : result already collected: FutureResult
[08:08:29.282] | result() for ClusterFuture ... done
[08:08:29.282] | signalConditions() ...
[08:08:29.282] | : include = ‘immediateCondition’
[08:08:29.282] | : exclude = 
[08:08:29.282] | : resignal = FALSE
[08:08:29.283] | : Number of conditions: 0
[08:08:29.283] | :  int 0
[08:08:29.283] | signalConditions() ... done
[08:08:29.283] | check for misuse ...
[08:08:29.283] | check for misuse ... done
[08:08:29.283] value() for MultisessionFuture (<unnamed-88>) ... done
[08:08:29.283] value: <numeric>
[08:08:29.284] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:29.284] | nx: 4
[08:08:29.284] | relay: TRUE
[08:08:29.284] | stdout: TRUE
[08:08:29.284] | signal: TRUE
[08:08:29.284] | resignal: FALSE
[08:08:29.284] | force: TRUE
[08:08:29.284] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:29.284] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:29.284] | until=3
[08:08:29.285] | relaying element #3
[08:08:29.285] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:29.285] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:29.285] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:29.285] resolve() for MultisessionFuture ...
[08:08:29.285] resolve() for MultisessionFuture ... done
[08:08:29.285] length: 2 (resolved future 2)

[08:08:29.285] checking value #3:
[08:08:29.285] 'obj' is MultisessionFuture
[08:08:29.286] MultisessionFuture #3
[08:08:29.286] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:29.286] | nx: 4
[08:08:29.286] | relay: TRUE
[08:08:29.286] | stdout: TRUE
[08:08:29.286] | signal: TRUE
[08:08:29.286] | resignal: FALSE
[08:08:29.286] | force: TRUE
[08:08:29.286] | relayed: [n=4] TRUE, TRUE, FALSE, FALSE
[08:08:29.286] | queued futures: [n=4] FALSE, TRUE, FALSE, FALSE
[08:08:29.286] | until=3
[08:08:29.287] | relaying element #3
[08:08:29.287] | value() for MultisessionFuture (<unnamed-89>) ...
[08:08:29.287] | : result() for ClusterFuture ...
[08:08:29.287] | : . result already collected: FutureResult
[08:08:29.287] | : result() for ClusterFuture ... done
[08:08:29.287] | : result() for ClusterFuture ...
[08:08:29.287] | : . result already collected: FutureResult
[08:08:29.287] | : result() for ClusterFuture ... done
[08:08:29.287] | : signalConditions() ...
[08:08:29.287] | : . include = ‘immediateCondition’
[08:08:29.288] | : . exclude = 
[08:08:29.288] | : . resignal = FALSE
[08:08:29.288] | : . Number of conditions: 0
[08:08:29.288] | : .  int 0
[08:08:29.288] | : signalConditions() ... done
[08:08:29.288] | : relay stdout ...
[08:08:29.288] | : relay stdout ... done
[08:08:29.289] | : check for misuse ...
[08:08:29.289] | : check for misuse ... done
[08:08:29.289] | value() for MultisessionFuture (<unnamed-89>) ... done
[08:08:29.289] | result() for ClusterFuture ...
[08:08:29.289] | : result already collected: FutureResult
[08:08:29.289] | result() for ClusterFuture ... done
[08:08:29.289] | signalConditions() ...
[08:08:29.289] | : include = ‘immediateCondition’
[08:08:29.289] | : exclude = 
[08:08:29.290] | : resignal = FALSE
[08:08:29.290] | : Number of conditions: 0
[08:08:29.290] | :  int 0
[08:08:29.292] | signalConditions() ... done
[08:08:29.293] | result() for ClusterFuture ...
[08:08:29.293] | : result already collected: FutureResult
[08:08:29.293] | result() for ClusterFuture ... done
[08:08:29.293] | signalConditions() ...
[08:08:29.293] | : include = ‘condition’
[08:08:29.293] | : exclude = ‘error’, ‘immediateCondition’
[08:08:29.293] | : resignal = TRUE
[08:08:29.293] | : Number of conditions: 0
[08:08:29.293] | :  int 0
[08:08:29.294] | signalConditions() ... done
[08:08:29.294] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:29.294] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:29.294] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:29.294] value(<MultisessionFuture>, ...) ...
[08:08:29.294] value(<MultisessionFuture>, ...) ... done
[08:08:29.294] value() for MultisessionFuture (<unnamed-89>) ...
[08:08:29.294] | result() for ClusterFuture ...
[08:08:29.295] | : result already collected: FutureResult
[08:08:29.295] | result() for ClusterFuture ... done
[08:08:29.295] | result() for ClusterFuture ...
[08:08:29.295] | : result already collected: FutureResult
[08:08:29.295] | result() for ClusterFuture ... done
[08:08:29.295] | signalConditions() ...
[08:08:29.295] | : include = ‘immediateCondition’
[08:08:29.295] | : exclude = 
[08:08:29.295] | : resignal = FALSE
[08:08:29.295] | : Number of conditions: 0
[08:08:29.295] | :  int 0
[08:08:29.296] | signalConditions() ... done
[08:08:29.296] | check for misuse ...
[08:08:29.296] | check for misuse ... done
[08:08:29.296] value() for MultisessionFuture (<unnamed-89>) ... done
[08:08:29.296] value: <NULL>
[08:08:29.296] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:29.297] | nx: 4
[08:08:29.297] | relay: TRUE
[08:08:29.297] | stdout: TRUE
[08:08:29.297] | signal: TRUE
[08:08:29.297] | resignal: FALSE
[08:08:29.297] | force: TRUE
[08:08:29.297] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:29.297] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:29.297] | until=4
[08:08:29.297] | relaying element #4
[08:08:29.298] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:29.298] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:29.298] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:29.298] resolve() for MultisessionFuture ...
[08:08:29.298] resolve() for MultisessionFuture ... done
[08:08:29.298] length: 1 (resolved future 3)

[08:08:29.298] checking value #4:
[08:08:29.298] 'obj' is atomic
[08:08:29.298] signalConditionsASAP(numeric, pos=4) ...
[08:08:29.298] | nx: 4
[08:08:29.299] | relay: TRUE
[08:08:29.299] | stdout: TRUE
[08:08:29.299] | signal: TRUE
[08:08:29.299] | resignal: FALSE
[08:08:29.299] | force: TRUE
[08:08:29.299] | relayed: [n=4] TRUE, TRUE, TRUE, FALSE
[08:08:29.299] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:29.299] | until=4
[08:08:29.299] | relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:29.299] | queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:29.299] signalConditionsASAP(numeric, pos=4) ... done
[08:08:29.300] length: 0 (resolved future 4)

[08:08:29.300] Relaying remaining futures ...
[08:08:29.300] | signalConditionsASAP(NULL, pos=0) ...
[08:08:29.300] | : nx: 4
[08:08:29.300] | : relay: TRUE
[08:08:29.300] | : stdout: TRUE
[08:08:29.300] | : signal: TRUE
[08:08:29.300] | : resignal: FALSE
[08:08:29.301] | : force: TRUE
[08:08:29.301] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:29.301] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
 - flush all
[08:08:29.301] | : relayed: [n=4] TRUE, TRUE, TRUE, TRUE
[08:08:29.301] | : queued futures: [n=4] FALSE, TRUE, TRUE, FALSE
[08:08:29.301] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:29.301] Relaying remaining futures ... done

List of 4
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
*** futures() - environment ... DONE
Type of object: listenv
Type of future: multicore
[08:08:29.303] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.303] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:29.303] | : all.equal() for FutureStrategyList ...
[08:08:29.304] | : . New stack:
[08:08:29.304] | : . List of 1
[08:08:29.304] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.304] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.304] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.304] | : .   ..- attr(*, "init")= logi TRUE
[08:08:29.304] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.304] | : .     ...)  
[08:08:29.304] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.304] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.304] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:29.304] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.306] | : . Old stack:
[08:08:29.306] | : . List of 1
[08:08:29.306] | : .  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:29.306] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.306] | : .   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:29.306] | : .   ..- attr(*, "init")= chr "done"
[08:08:29.306] | : .   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:29.306] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:29.306] | : .   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:29.306] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:29.306] | : .   ..- attr(*, "untweakable")= chr "persistent"
[08:08:29.306] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:29.306] | : .   ..- attr(*, "backend")=Classes 'MultisessionFutureBackend', 'ClusterFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643043c4468> 
[08:08:29.306] | : .   .. ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:29.306] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:29.306] | : .   .. .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:29.306] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.310] | : . Not identical
[08:08:29.310] | : . all.equal() for future ...
[08:08:29.310] | : . ' List of 2
[08:08:29.310] | : . '  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.310] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.310] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.310] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:29.310] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.310] | : . '     ...)  
[08:08:29.310] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.310] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.310] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:29.310] | : . '  $ current:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:29.310] | : . '     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.310] | : . '   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:29.310] | : . '   ..- attr(*, "init")= chr "done"
[08:08:29.310] | : . '   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:29.310] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:29.310] | : . '   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:29.310] | : . '   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:29.310] | : . '   ..- attr(*, "untweakable")= chr "persistent"
[08:08:29.310] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:29.310] | : . '   ..- attr(*, "backend")=Classes 'MultisessionFutureBackend', 'ClusterFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643043c4468> 
[08:08:29.310] | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:29.310] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:29.310] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:29.315] | : . ' Formals differ
[08:08:29.315] | : . all.equal() for future ... done
[08:08:29.315] | : . Future strategies differ at level 1
[08:08:29.315] | : all.equal() for FutureStrategyList ... done
[08:08:29.316] | : plan(): Setting new future backend stack:
[08:08:29.316] | : List of future strategies:
[08:08:29.316] | : 1. multicore:
[08:08:29.316] | :    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:29.316] | :    - tweaked: FALSE
[08:08:29.316] | :    - call: plan(strategy)
[08:08:29.316] | : List of 1
[08:08:29.316] | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.316] | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.316] | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.316] | :   ..- attr(*, "init")= logi TRUE
[08:08:29.316] | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.316] | :     ...)  
[08:08:29.316] | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.316] | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.316] | :   ..- attr(*, "call")= language plan(strategy)
[08:08:29.316] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.318] | : plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:08:29.319] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.319] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:08:29.319] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.319] | : . stopWorkers() for MultisessionFutureBackend ...
[08:08:29.319] | : . ' Interrupt active futures ...
[08:08:29.319] | : . ' , Number of futures: 0
[08:08:29.320] | : . ' Interrupt active futures ... done
[08:08:29.320] | : . ' Clear future registry ...
[08:08:29.320] | : . ' Clear future registry ... done
[08:08:29.320] | : . ' Stop cluster workers ...
[08:08:29.320] | : . ' , Stopping existing cluster ...
[08:08:29.320] | : . ' , ; Cluster to shut down:
[08:08:29.321] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:29.332] | : . ' , ; Stopped cluster: ‘c(TRUE, TRUE)’
[08:08:29.379] | : . ' , Stopping existing cluster ... done
[08:08:29.379] | : . ' Stop cluster workers ... done
[08:08:29.379] | : . stopWorkers() for MultisessionFutureBackend ... done
[08:08:29.379] | : . Legacy shutdown of cluster workers ...
[08:08:29.379] | : . ' Stopping existing cluster ...
[08:08:29.379] | : . ' , No pre-existing cluster. Skipping
[08:08:29.380] | : . ' Stopping existing cluster ... done
[08:08:29.380] | : . Legacy shutdown of cluster workers ... done
[08:08:29.380] | : plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:08:29.380] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:08:29.380] | : . function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.380] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.380] | : .  - attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.380] | : .  - attr(*, "init")= logi TRUE
[08:08:29.380] | : .  - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.380] | : .     ...)  
[08:08:29.380] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.380] | : .  - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.380] | : .  - attr(*, "call")= language plan(strategy)
[08:08:29.382] | : . init: TRUE
[08:08:29.382] | : . makeFutureBackend(<multicore>) ...
[08:08:29.382] | : . ' Backend function: <‘NULL’>
[08:08:29.383] | : . ' Evaluator tweak arguments: [n=0]
[08:08:29.383] | : . '  list()
[08:08:29.383] | : . ' Evaluator formal arguments: [n=3]
[08:08:29.383] | : . '  list()
[08:08:29.383] | : . ' Backend factory arguments: [n=3]
[08:08:29.383] | : . ' Dotted pair list of 3
[08:08:29.383] | : . '  $ workers    : language availableCores(constraints = "multicore")
[08:08:29.383] | : . '  $ gc         : logi FALSE
[08:08:29.383] | : . '  $ earlySignal: logi FALSE
[08:08:29.386] | : . ' Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:29.386] | : . makeFutureBackend(<multicore>) ... done
[08:08:29.386] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:08:29.387] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.387] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.387] | : plan(): nbrOfWorkers() = 2
[08:08:29.387] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:29.387] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Dimensions: NULL
[08:08:29.387] future(..., label = NULL) ...
[08:08:29.387] | lazy: FALSE
[08:08:29.387] | stdout: TRUE
[08:08:29.388] | conditions: [n=1] ‘condition’
[08:08:29.388] | gc: FALSE
[08:08:29.388] | earlySignal: FALSE
[08:08:29.388] | getGlobalsAndPackages() ...
[08:08:29.388] | : Searching for globals ...
[08:08:29.389] | : . globals found: [0] 
[08:08:29.389] | : Searching for globals ... done
[08:08:29.389] | : globals: [0] <none>
[08:08:29.389] | : packages: [0] <none>
[08:08:29.389] | getGlobalsAndPackages() ... done
[08:08:29.390] | run() for ‘Future’ (<unnamed-91>) ...
[08:08:29.390] | : state: ‘created’
[08:08:29.390] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.390] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.390] | : Using MulticoreFutureBackend ...
[08:08:29.390] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:29.390] | : . Launching futures ...
[08:08:29.390] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:29.391] | : . ' , getFutureData() ...
[08:08:29.391] | : . ' , ; getFutureCore() ...
[08:08:29.391] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:29.391] | : . ' , ; getFutureCore() ... done
[08:08:29.391] | : . ' , ; getFutureCapture() ...
[08:08:29.391] | : . ' , ; getFutureCapture() ... done
[08:08:29.391] | : . ' , ; getFutureContext() ...
[08:08:29.391] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.391] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:29.391] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.392] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:29.392] | : . ' , ; getFutureContext() ... done
[08:08:29.392] | : . ' , getFutureData() ... done
[08:08:29.392] | : . ' , requestCore(..., workers = 2) ...
[08:08:29.392] | : . ' , requestCore(..., workers = 2) ... done
[08:08:29.395] | : . ' , MulticoreFuture started
[08:08:29.395] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:29.396] | : . Launching futures ... done
[08:08:29.396] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:29.396] | : Using MulticoreFutureBackend ... done
[08:08:29.396] | run() for ‘Future’ (<unnamed-91>) ... done
[08:08:29.397] future(..., label = NULL) ... done
[08:08:29.397] future(..., label = NULL) ...
[08:08:29.397] | lazy: FALSE
[08:08:29.397] | stdout: TRUE
[08:08:29.397] | conditions: [n=1] ‘condition’
[08:08:29.398] | gc: FALSE
[08:08:29.398] | earlySignal: FALSE
[08:08:29.398] | getGlobalsAndPackages() ...
[08:08:29.398] | : Searching for globals ...
[08:08:29.398] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.399] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:29.399] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.399] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:29.399] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:29.400] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:29.400] | : . ' , ; ` | New stack:
[08:08:29.400] | : . globals found: [0] 
[08:08:29.401] | : Searching for globals ... done
[08:08:29.401] | : globals: [0] <none>
[08:08:29.401] | : packages: [0] <none>
[08:08:29.401] | getGlobalsAndPackages() ... done
[08:08:29.402] | run() for ‘Future’ (<unnamed-92>) ...
[08:08:29.402] | : state: ‘created’
[08:08:29.402] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.402] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.402] | : Using MulticoreFutureBackend ...
[08:08:29.403] | : . Number of futures since start: 1 (1 created, 1 launched, 0 finished)
[08:08:29.403] | : . Launching futures ...
[08:08:29.403] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:29.403] | : . ' , getFutureData() ...
[08:08:29.403] | : . ' , ; getFutureCore() ...
[08:08:29.403] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:29.404] | : . ' , ; getFutureCore() ... done
[08:08:29.404] | : . ' , ; getFutureCapture() ...
[08:08:29.400] | : . ' , ; ` | List of 1
[08:08:29.400] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.400] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.400] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:29.400] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.400] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.400] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.400] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.400] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.404] | : . ' , ; getFutureCapture() ... done
[08:08:29.404] | : . ' , ; ` | Old stack:
[08:08:29.404] | : . ' , ; getFutureContext() ...
[08:08:29.404] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.404] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:29.405] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.405] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:29.405] | : . ' , ; getFutureContext() ... done
[08:08:29.405] | : . ' , getFutureData() ... done
[08:08:29.405] | : . ' , requestCore(..., workers = 2) ...
[08:08:29.406] | : . ' , requestCore(..., workers = 2) ... done
[08:08:29.404] | : . ' , ; ` | List of 1
[08:08:29.404] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.404] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.404] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.404] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:29.404] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.404] | : . ' , ; ` |     ...)  
[08:08:29.404] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.404] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.404] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:29.404] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.404] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.404] | : . ' , ; ` |     ...)  
[08:08:29.404] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.404] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.409] | : . ' , MulticoreFuture started
[08:08:29.409] | : . ' , ; ` | Not identical
[08:08:29.409] | : . ' , ; ` | all.equal() for future ...
[08:08:29.409] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:29.410] | : . Launching futures ... done
[08:08:29.410] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:29.410] | : Using MulticoreFutureBackend ... done
[08:08:29.411] | run() for ‘Future’ (<unnamed-92>) ... done
[08:08:29.411] future(..., label = NULL) ... done
[08:08:29.412] future(..., label = NULL) ...
[08:08:29.413] | lazy: FALSE
[08:08:29.413] | stdout: TRUE
[08:08:29.413] | conditions: [n=1] ‘condition’
[08:08:29.413] | gc: FALSE
[08:08:29.413] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.414] | earlySignal: FALSE
[08:08:29.414] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:29.414] | getGlobalsAndPackages() ...
[08:08:29.414] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.414] | : Searching for globals ...
[08:08:29.414] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:29.415] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:29.415] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:29.415] | : . ' , ; ` | New stack:
[08:08:29.410] | : . ' , ; ` | : List of 2
[08:08:29.410] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.410] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.410] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:29.410] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.410] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.410] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.410] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.410] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.410] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.410] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.410] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:29.410] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.410] | : . ' , ; ` | :     ...)  
[08:08:29.410] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.410] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.410] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:29.410] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.410] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.410] | : . ' , ; ` | :     ...)  
[08:08:29.410] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.418] | : . ' , ; ` | : Formals differ
[08:08:29.418] | : . ' , ; ` | all.equal() for future ... done
[08:08:29.418] | : . ' , ; ` | Future strategies differ at level 1
[08:08:29.418] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:29.419] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:29.419] | : . ' , ; ` List of future strategies:
[08:08:29.419] | : . ' , ; ` 1. sequential:
[08:08:29.419] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:29.419] | : . ' , ; `    - tweaked: FALSE
[08:08:29.419] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.416] | : . ' , ; ` | List of 1
[08:08:29.416] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.416] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.416] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:29.416] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.416] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.416] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.416] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.416] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.422] | : . ' , ; ` | Old stack:
[08:08:29.422] | : . globals found: [1] ‘{’
[08:08:29.423] | : Searching for globals ... done
[08:08:29.423] | : Resolving globals: FALSE
[08:08:29.423] | : Search for packages associated with the globals ...
[08:08:29.420] | : . ' , ; ` List of 1
[08:08:29.420] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.420] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.420] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:29.420] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.420] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.420] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.420] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.420] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.424] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:29.424] | : . Packages associated with globals: [1] ‘base’
[08:08:29.424] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:29.424] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.424] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:29.424] | : . Packages: [1] ‘base’
[08:08:29.424] | : Search for packages associated with the globals ... done
[08:08:29.425] | : Packages after dropping 'base': [0] 
[08:08:29.425] | : globals: [0] 
[08:08:29.425] | : packages: [0] 
[08:08:29.425] | getGlobalsAndPackages() ... done
[08:08:29.426] | run() for ‘Future’ (<unnamed-93>) ...
[08:08:29.426] | : state: ‘created’
[08:08:29.426] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.427] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.427] | : Using MulticoreFutureBackend ...
[08:08:29.424] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.424] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.424] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:29.424] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.424] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.424] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.424] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.427] | : . ' , ; ` | : init: TRUE
[08:08:29.427] | : . Number of futures since start: 2 (2 created, 2 launched, 0 finished)
[08:08:29.427] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:29.427] | : . Launching futures ...
[08:08:29.428] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:29.428] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:29.428] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:29.428] | : . ' , getFutureData() ...
[08:08:29.428] | : . ' , ; ` | : .  list()
[08:08:29.428] | : . ' , ; getFutureCore() ...
[08:08:29.428] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:29.428] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:29.428] | : . ' , ; ` | : .  list()
[08:08:29.429] | : . ' , ; getFutureCore() ... done
[08:08:29.429] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:29.429] | : . ' , ; getFutureCapture() ...
[08:08:29.429] | : . ' , ; getFutureCapture() ... done
[08:08:29.429] | : . ' , ; getFutureContext() ...
[08:08:29.430] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.430] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:29.422] | : . ' , ; ` | List of 1
[08:08:29.422] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.422] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.422] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.422] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:29.422] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.422] | : . ' , ; ` |     ...)  
[08:08:29.422] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.422] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.422] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:29.422] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.422] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.422] | : . ' , ; ` |     ...)  
[08:08:29.422] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.422] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.430] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.429] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:29.429] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:29.429] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:29.430] | : . ' , ; ` | Not identical
[08:08:29.430] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:29.430] | : . ' , ; ` | all.equal() for future ...
[08:08:29.430] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:29.431] | : . ' , ; getFutureContext() ... done
[08:08:29.431] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:29.431] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:29.431] | : . ' , getFutureData() ... done
[08:08:29.431] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.431] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:29.431] | : . ' , requestCore(..., workers = 2) ...
[08:08:29.431] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:29.431] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:29.432] | : . ' , ; Poll #1 (0): usedCores() = 2, workers = 2
[08:08:29.434] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:29.435] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:29.435] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:29.435] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:29.435] | : . ' , ; ` | : New stack:
[08:08:29.431] | : . ' , ; ` | : List of 2
[08:08:29.431] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.431] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.431] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:29.431] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.431] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.431] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.431] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.431] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.431] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.431] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.431] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:29.431] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.431] | : . ' , ; ` | :     ...)  
[08:08:29.431] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.431] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.431] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:29.431] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.431] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.431] | : . ' , ; ` | :     ...)  
[08:08:29.431] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.439] | : . ' , ; ` | : Formals differ
[08:08:29.439] | : . ' , ; ` | all.equal() for future ... done
[08:08:29.439] | : . ' , ; ` | Future strategies differ at level 1
[08:08:29.440] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:29.440] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:29.435] | : . ' , ; ` | : List of 1
[08:08:29.435] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.435] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.435] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.435] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:29.435] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.435] | : . ' , ; ` | :     ...)  
[08:08:29.435] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.435] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.435] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:29.435] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.435] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.435] | : . ' , ; ` | :     ...)  
[08:08:29.435] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.435] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.440] | : . ' , ; ` | : Old stack:
[08:08:29.440] | : . ' , ; ` List of future strategies:
[08:08:29.440] | : . ' , ; ` 1. sequential:
[08:08:29.440] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:29.440] | : . ' , ; `    - tweaked: FALSE
[08:08:29.440] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.441] | : . ' , ; ` List of 1
[08:08:29.441] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.441] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.441] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:29.441] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.441] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.441] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.441] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.441] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.444] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:29.440] | : . ' , ; ` | : List of 1
[08:08:29.440] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.440] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.440] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:29.440] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.440] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.440] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.440] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.440] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643040bce38> 
[08:08:29.440] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.440] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.440] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.445] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:29.445] | : . ' , ; ` | : Not identical
[08:08:29.445] | : . ' , ; ` | : all.equal() for future ...
[08:08:29.445] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.445] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:29.445] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.445] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.445] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:29.445] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.445] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.445] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.445] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.448] | : . ' , ; ` | : init: TRUE
[08:08:29.448] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:29.448] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:29.449] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:29.449] | : . ' , ; ` | : .  list()
[08:08:29.449] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:29.449] | : . ' , ; ` | : .  list()
[08:08:29.450] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:29.450] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:29.450] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:29.450] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:29.451] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:29.452] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:29.452] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:29.452] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.452] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:29.452] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:29.452] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:29.453] | : . ' , ; readImmediateCondition() ...
[08:08:29.453] | : . ' , ; ` Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:29.445] | : . ' , ; ` | : . List of 2
[08:08:29.445] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.445] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.445] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.445] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:29.445] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.445] | : . ' , ; ` | : .     ...)  
[08:08:29.445] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.445] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.445] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:29.445] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.445] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.445] | : . ' , ; ` | : .     ...)  
[08:08:29.445] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.445] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.445] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.445] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:29.445] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.445] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.445] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.445] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.445] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643040bce38> 
[08:08:29.445] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.445] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.453] | : . ' , ; ` Number of RDS files: 0
[08:08:29.453] | : . ' , ; ` Returned conditions set:
[08:08:29.454] | : . ' , ; ` | : . Formals differ
[08:08:29.454] | : . ' , ; ` | : all.equal() for future ... done
[08:08:29.454] | : . ' , ; `  list()
[08:08:29.454] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:29.454] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:29.454] | : . ' , ; readImmediateCondition() ... done
[08:08:29.454] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:29.455] | : . ' , ; ` | List of future strategies:
[08:08:29.455] | : . ' , ; ` | 1. multicore:
[08:08:29.455] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:29.455] | : . ' , ; ` |    - tweaked: FALSE
[08:08:29.455] | : . ' , ; ` |    - call: plan(strategy)
[08:08:29.456] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:29.456] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:29.456] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:29.457] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:29.457] | : . ' , ; ` | : New stack:
[08:08:29.455] | : . ' , ; ` | List of 1
[08:08:29.455] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.455] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.455] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.455] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:29.455] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.455] | : . ' , ; ` |     ...)  
[08:08:29.455] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.455] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.455] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:29.455] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.455] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.455] | : . ' , ; ` |     ...)  
[08:08:29.455] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.455] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.460] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:29.460] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:29.460] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.460] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.460] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:29.461] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:29.461] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:29.461] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:29.457] | : . ' , ; ` | : List of 1
[08:08:29.457] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.457] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.457] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.457] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:29.457] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.457] | : . ' , ; ` | :     ...)  
[08:08:29.457] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.457] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.457] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:29.457] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.457] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.457] | : . ' , ; ` | :     ...)  
[08:08:29.457] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.457] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.462] | : . ' , ; ` | : Old stack:
[08:08:29.465] | : . ' , ; readImmediateCondition() ...
[08:08:29.465] | : . ' , ; ` Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:29.465] | : . ' , ; ` Number of RDS files: 0
[08:08:29.465] | : . ' , ; ` Returned conditions set:
[08:08:29.466] | : . ' , ; `  list()
[08:08:29.466] | : . ' , ; readImmediateCondition() ... done
[08:08:29.467] | : . ' , ; Poll #2 (0.04 secs): usedCores() = 2, workers = 2
[08:08:29.462] | : . ' , ; ` | : List of 1
[08:08:29.462] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.462] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.462] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:29.462] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.462] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.462] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.462] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.462] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643045eecc8> 
[08:08:29.462] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.462] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.462] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.468] | : . ' , ; ` | : Not identical
[08:08:29.468] | : . ' , ; ` | : all.equal() for future ...
[08:08:29.468] | : . ' , ; ` | : . List of 2
[08:08:29.468] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.468] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.468] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.468] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:29.468] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.468] | : . ' , ; ` | : .     ...)  
[08:08:29.468] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.468] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.468] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:29.468] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.468] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.468] | : . ' , ; ` | : .     ...)  
[08:08:29.468] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.468] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.468] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.468] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:29.468] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.468] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.468] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.468] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.468] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643045eecc8> 
[08:08:29.468] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.468] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.476] | : . ' , ; ` | : . Formals differ
[08:08:29.476] | : . ' , ; ` | : all.equal() for future ... done
[08:08:29.476] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:29.477] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:29.477] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:29.477] | : . ' , ; ` | List of future strategies:
[08:08:29.477] | : . ' , ; ` | 1. multicore:
[08:08:29.477] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:29.477] | : . ' , ; ` |    - tweaked: FALSE
[08:08:29.477] | : . ' , ; ` |    - call: plan(strategy)
[08:08:29.478] | : . ' , ; readImmediateCondition() ...
[08:08:29.478] | : . ' , ; ` Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:29.478] | : . ' , ; ` Number of RDS files: 0
[08:08:29.478] | : . ' , ; ` Returned conditions set:
[08:08:29.479] | : . ' , ; `  list()
[08:08:29.479] | : . ' , ; readImmediateCondition() ... done
[08:08:29.479] | : . ' , ; value() for MulticoreFuture (<unnamed-91>) ...
[08:08:29.480] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:29.481] | : . ' , ; ` | readImmediateCondition() ...
[08:08:29.481] | : . ' , ; ` | : Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:29.481] | : . ' , ; ` | : Number of RDS files: 0
[08:08:29.481] | : . ' , ; ` | : Returned conditions set:
[08:08:29.482] | : . ' , ; ` | :  list()
[08:08:29.482] | : . ' , ; ` | readImmediateCondition() ... done
[08:08:29.483] | : . ' , ; ` | result() for MulticoreFuture ...
[08:08:29.483] | : . ' , ; ` | result() for MulticoreFuture ... done
[08:08:29.483] | : . ' , ; ` | signalConditions() ...
[08:08:29.483] | : . ' , ; ` | : include = ‘immediateCondition’
[08:08:29.484] | : . ' , ; ` | : exclude = 
[08:08:29.484] | : . ' , ; ` | : resignal = FALSE
[08:08:29.484] | : . ' , ; ` | : Number of conditions: 6
[08:08:29.477] | : . ' , ; ` | List of 1
[08:08:29.477] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.477] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.477] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.477] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:29.477] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.477] | : . ' , ; ` |     ...)  
[08:08:29.477] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.477] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.477] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:29.477] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.477] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.477] | : . ' , ; ` |     ...)  
[08:08:29.477] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.477] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.484] | : . ' , ; ` | :  int 6
[08:08:29.485] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:29.485] | : . ' , ; ` | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.485] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:29.485] | : . ' , ; ` | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.486] | : . ' , ; ` | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.486] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.486] | : . ' , ; ` | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.486] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.486] | : . ' , ; ` | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.486] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:29.486] | : . ' , ; ` | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.486] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:29.486] | : . ' , ; ` | signalConditions() ... done
[08:08:29.486] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:29.487] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:29.487] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:29.487] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:29.487] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:29.487] | : . ' , ; ` signalConditions() ...
[08:08:29.487] | : . ' , ; ` | include = ‘immediateCondition’
[08:08:29.488] | : . ' , ; ` | exclude = 
[08:08:29.488] | : . ' , ; ` | resignal = FALSE
[08:08:29.488] | : . ' , ; ` | Number of conditions: 6
[08:08:29.488] | : . ' , ; ` |  int 6
[08:08:29.488] | : . ' , ; ` | Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.489] | : . ' , ; ` | Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.489] | : . ' , ; ` | Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.489] | : . ' , ; ` | Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.489] | : . ' , ; ` | Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.489] | : . ' , ; ` | Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.489] | : . ' , ; ` signalConditions() ... done
[08:08:29.489] | : . ' , ; ` check for misuse ...
[08:08:29.490] | : . ' , ; ` check for misuse ... done
[08:08:29.490] | : . ' , ; value() for MulticoreFuture (<unnamed-91>) ... done
[08:08:29.490] | : . ' , requestCore(..., workers = 2) ... done
[08:08:29.493] | : . ' , MulticoreFuture started
[08:08:29.493] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:29.493] | : . Launching futures ... done
[08:08:29.493] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:29.494] | : Using MulticoreFutureBackend ... done
[08:08:29.494] | run() for ‘Future’ (<unnamed-93>) ... done
[08:08:29.494] future(..., label = NULL) ... done
Classes 'listenv', 'environment' <environment: 0x564302c39d98> 
[08:08:29.496] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.496] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:29.496] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Classes 'listenv', 'environment' <environment: 0x564303917c80> 
[08:08:29.497] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:29.497] resolved() for listenv ...
[08:08:29.497] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:29.497] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:29.497] | : . ' , ; ` | New stack:
[08:08:29.498] | resolved() for list ...
[08:08:29.498] | : Number of elements: 6
[08:08:29.499] | : Number of futures: 6
[08:08:29.499] | : readImmediateCondition() ...
[08:08:29.499] | : . Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:29.500] | : . Number of RDS files: 0
[08:08:29.500] | : . Returned conditions set:
[08:08:29.500] | : .  list()
[08:08:29.501] | : readImmediateCondition() ... done
[08:08:29.498] | : . ' , ; ` | List of 1
[08:08:29.498] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.498] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.498] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:29.498] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.498] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.498] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.498] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.498] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.502] | : . ' , ; ` | Old stack:
[08:08:29.502] | : . ' , ; ` | List of 1
[08:08:29.502] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.502] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.502] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.502] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:29.502] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.502] | : . ' , ; ` |     ...)  
[08:08:29.502] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.502] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.502] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:29.502] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.502] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.502] | : . ' , ; ` |     ...)  
[08:08:29.502] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.502] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.507] | : . ' , ; ` | Not identical
[08:08:29.507] | : . ' , ; ` | all.equal() for future ...
[08:08:29.511] | : readImmediateCondition() ...
[08:08:29.511] | : . Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:29.511] | : . Number of RDS files: 0
[08:08:29.512] | : . Returned conditions set:
[08:08:29.512] | : .  list()
[08:08:29.512] | : readImmediateCondition() ... done
[08:08:29.512] | resolved() for list ... done
[08:08:29.512] resolved() for listenv ... done
 Named logi [1:6] TRUE TRUE TRUE FALSE TRUE TRUE
 - attr(*, "names")= chr [1:6] "a" "b" "c" "d" ...
[08:08:29.513] value() for listenv ...
[08:08:29.513] | recursive: 0
[08:08:29.514] | reduce: FALSE
[08:08:29.507] | : . ' , ; ` | : List of 2
[08:08:29.507] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.507] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.507] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:29.507] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.507] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.507] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.507] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.507] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.507] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.507] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.507] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:29.507] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.507] | : . ' , ; ` | :     ...)  
[08:08:29.507] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.507] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.507] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:29.507] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.507] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.507] | : . ' , ; ` | :     ...)  
[08:08:29.507] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.514] | : . ' , ; ` | : Formals differ
[08:08:29.515] | : . ' , ; ` | all.equal() for future ... done
[08:08:29.515] | length: 6
[08:08:29.515] | : . ' , ; ` | Future strategies differ at level 1
[08:08:29.515] | elements: ‘a’, ‘b’, ‘c’, ‘d’, ‘’, ‘’
[08:08:29.515] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:29.515] | Number of remaining objects: 6
[08:08:29.515] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:29.515] | checking value #1:
[08:08:29.515] | 'obj' is atomic
[08:08:29.515] | signalConditionsASAP(numeric, pos=1) ...
[08:08:29.515] | : nx: 6
[08:08:29.516] | : relay: TRUE
[08:08:29.516] | : stdout: TRUE
[08:08:29.515] | : . ' , ; ` List of future strategies:
[08:08:29.515] | : . ' , ; ` 1. sequential:
[08:08:29.515] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:29.515] | : . ' , ; `    - tweaked: FALSE
[08:08:29.515] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.516] | : signal: TRUE
[08:08:29.516] | : resignal: FALSE
[08:08:29.516] | : force: TRUE
[08:08:29.516] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:29.516] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:29.516] | : until=2
[08:08:29.517] | : relaying element #2
[08:08:29.517] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:29.517] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:29.517] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:29.517] | length: 5 (resolved future 1)
[08:08:29.517] value() for listenv ... done
[08:08:29.517] checking value #2:
[08:08:29.518] 'obj' is MulticoreFuture
[08:08:29.518] MulticoreFuture #2
[08:08:29.518] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:29.518] | nx: 6
[08:08:29.518] | relay: TRUE
[08:08:29.518] | stdout: TRUE
[08:08:29.518] | signal: TRUE
[08:08:29.518] | resignal: FALSE
[08:08:29.518] | force: TRUE
[08:08:29.519] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:29.519] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:29.519] | until=2
[08:08:29.519] | relaying element #2
[08:08:29.519] | value() for MulticoreFuture (<unnamed-91>) ...
[08:08:29.519] | : result() for MulticoreFuture ...
[08:08:29.516] | : . ' , ; ` List of 1
[08:08:29.516] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.516] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.516] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:29.516] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.516] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.516] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "g[08:08:29.519] | : result() for MulticoreFuture ... done
c" "interrupts" ...
[08:08:29.516] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.516] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.520] | : result() for MulticoreFuture ...
[08:08:29.520] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:29.520] | : result() for MulticoreFuture ... done
[08:08:29.520] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:29.520] | : signalConditions() ...
[08:08:29.520] | : . include = ‘immediateCondition’
[08:08:29.520] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.520] | : . exclude = 
[08:08:29.520] | : . resignal = FALSE
[08:08:29.520] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:29.520] | : . Number of conditions: 6
[08:08:29.520] | : .  int 6
[08:08:29.521] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.521] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.521] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.521] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.521] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.522] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.522] | : signalConditions() ... done
[08:08:29.522] | : relay stdout ...
[08:08:29.522] | : relay stdout ... done
[08:08:29.522] | : check for misuse ...
[08:08:29.522] | : check for misuse ... done
[08:08:29.522] | value() for MulticoreFuture (<unnamed-91>) ... done
[08:08:29.523] | result() for MulticoreFuture ...
[08:08:29.523] | result() for MulticoreFuture ... done
[08:08:29.523] | signalConditions() ...
[08:08:29.523] | : include = ‘immediateCondition’
[08:08:29.520] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.520] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.520] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:29.520] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.520] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.520] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.520] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.523] | : exclude = 
[08:08:29.523] | : resignal = FALSE
[08:08:29.523] | : . ' , ; ` | : init: TRUE
[08:08:29.523] | : Number of conditions: 6
[08:08:29.523] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:29.523] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:29.524] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:29.523] | :  int 6
[08:08:29.524] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.524] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.524] | : . ' , ; ` | : .  list()
[08:08:29.524] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.524] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:29.524] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.524] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.524] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.524] | : . ' , ; ` | : .  list()
[08:08:29.525] | signalConditions() ... done
[08:08:29.525] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:29.525] | result() for MulticoreFuture ...
[08:08:29.525] | result() for MulticoreFuture ... done
[08:08:29.525] | signalConditions() ...
[08:08:29.525] | : include = ‘condition’
[08:08:29.525] | : exclude = ‘error’, ‘immediateCondition’
[08:08:29.525] | : resignal = TRUE
[08:08:29.525] | : Number of conditions: 6
[08:08:29.526] | :  int 6
[08:08:29.525] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:29.525] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:29.525] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:29.526] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.526] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.396] | : . ' , attachPackages() ...
[08:08:29.526] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.526] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:29.526] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.397] | : . ' , ; packages: [n=1] ‘future’
[08:08:29.526] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:29.527] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.527] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:29.527] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.397] | : . ' , attachPackages() ... done
[08:08:29.527] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.527] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.527] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:29.527] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.397] | : . ' , attachPackages() ...
[08:08:29.527] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:29.527] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.527] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.527] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:29.397] | : . ' , ; packages: [n=0] 
[08:08:29.527] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.528] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.397] | : . ' , attachPackages() ... done
[08:08:29.528] | signalConditions() ... done
[08:08:29.528] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:29.528] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:29.528] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:29.528] value(<MulticoreFuture>, ...) ...
[08:08:29.528] value(<MulticoreFuture>, ...) ... done
[08:08:29.528] value() for MulticoreFuture (<unnamed-91>) ...
[08:08:29.529] | result() for MulticoreFuture ...
[08:08:29.529] | result() for MulticoreFuture ... done
[08:08:29.529] | result() for MulticoreFuture ...
[08:08:29.529] | result() for MulticoreFuture ... done
[08:08:29.529] | signalConditions() ...
[08:08:29.529] | : include = ‘immediateCondition’
[08:08:29.529] | : exclude = 
[08:08:29.529] | : resignal = FALSE
[08:08:29.530] | : Number of conditions: 6
[08:08:29.530] | :  int 6
[08:08:29.530] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.530] | : already signaled, skipping
[08:08:29.530] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.530] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:29.531] | : already signaled, skipping
[08:08:29.531] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.531] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:29.531] | : already signaled, skipping
[08:08:29.531] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:29.531] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.531] | : already signaled, skipping
[08:08:29.531] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:29.531] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.531] | : . ' , ; ` | : New stack:
[08:08:29.531] | : already signaled, skipping
[08:08:29.531] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.531] | : already signaled, skipping
[08:08:29.532] | signalConditions() ... done
[08:08:29.532] | check for misuse ...
[08:08:29.532] | check for misuse ... done
[08:08:29.532] value() for MulticoreFuture (<unnamed-91>) ... done
[08:08:29.532] value: <numeric>
[08:08:29.532] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:29.532] | nx: 6
[08:08:29.532] | relay: TRUE
[08:08:29.533] | stdout: TRUE
[08:08:29.533] | signal: TRUE
[08:08:29.533] | resignal: FALSE
[08:08:29.533] | force: TRUE
[08:08:29.533] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:29.533] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:29.533] | until=3
[08:08:29.533] | relaying element #3
[08:08:29.534] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:29.534] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:29.534] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:29.534] resolve() for MulticoreFuture ...
[08:08:29.534] resolve() for MulticoreFuture ... done
[08:08:29.534] length: 4 (resolved future 2)

[08:08:29.534] checking value #3:
[08:08:29.534] 'obj' is MulticoreFuture
[08:08:29.535] readImmediateCondition() ...
[08:08:29.535] | Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:29.535] | Number of RDS files: 0
[08:08:29.535] | Returned conditions set:
[08:08:29.535] |  list()
[08:08:29.536] readImmediateCondition() ... done
[08:08:29.536] MulticoreFuture #3
[08:08:29.536] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:29.531] | : . ' , ; ` | : List of 1
[08:08:29.531] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.531] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.531] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.531] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:29.531] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.531] | : . ' , ; ` | :     ...)  
[08:08:29.531] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.531] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.531] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:29.531] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.531] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.531] | : . ' , ; ` | :     ...)  
[08:08:29.531] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.531] | : . ' , ; ` | :  - attr(*, "cla[08:08:29.536] | nx: 6
ss")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.536] | relay: TRUE
[08:08:29.536] | : . ' , ; ` | : Old stack:
[08:08:29.536] | stdout: TRUE
[08:08:29.536] | signal: TRUE
[08:08:29.536] | resignal: FALSE
[08:08:29.536] | force: TRUE
[08:08:29.537] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:29.537] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:29.537] | until=3
[08:08:29.537] | relaying element #3
[08:08:29.537] | value() for MulticoreFuture (<unnamed-92>) ...
[08:08:29.537] | : result() for MulticoreFuture ...
[08:08:29.538] | : . readImmediateCondition() ...
[08:08:29.538] | : . ' Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:29.539] | : . ' Number of RDS files: 0
[08:08:29.539] | : . ' Returned conditions set:
[08:08:29.539] | : . '  list()
[08:08:29.539] | : . readImmediateCondition() ... done
[08:08:29.540] | : . result() for MulticoreFuture ...
[08:08:29.540] | : . result() for MulticoreFuture ... done
[08:08:29.540] | : . signalConditions() ...
[08:08:29.536] | : . ' , ; ` | : List of 1
[08:08:29.536] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.536] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.536] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:29.536] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.536] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.536] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.536] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.536] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303f5b7d0> 
[08:08:29.536] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.536] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfOb[08:08:29.541] | : . ' include = ‘immediateCondition’
jects" "earlySignal" "gc" "interrupts" ...
[08:08:29.536] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.541] | : . ' , ; ` | : Not identical
[08:08:29.541] | : . ' exclude = 
[08:08:29.541] | : . ' , ; ` | : all.equal() for future ...
[08:08:29.541] | : . ' resignal = FALSE
[08:08:29.541] | : . ' Number of conditions: 6
[08:08:29.541] | : . '  int 6
[08:08:29.542] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.542] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.542] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.543] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.543] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.543] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.543] | : . signalConditions() ... done
[08:08:29.544] | : result() for MulticoreFuture ... done
[08:08:29.544] | : result() for MulticoreFuture ...
[08:08:29.544] | : result() for MulticoreFuture ... done
[08:08:29.544] | : signalConditions() ...
[08:08:29.544] | : . include = ‘immediateCondition’
[08:08:29.544] | : . exclude = 
[08:08:29.545] | : . resignal = FALSE
[08:08:29.545] | : . Number of conditions: 6
[08:08:29.545] | : .  int 6
[08:08:29.546] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.546] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.546] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.546] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.546] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.546] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.547] | : signalConditions() ... done
[08:08:29.547] | : relay stdout ...
[08:08:29.547] | : relay stdout ... done
[08:08:29.547] | : check for misuse ...
[08:08:29.547] | : check for misuse ... done
[08:08:29.547] | value() for MulticoreFuture (<unnamed-92>) ... done
[08:08:29.547] | result() for MulticoreFuture ...
[08:08:29.548] | result() for MulticoreFuture ... done
[08:08:29.548] | signalConditions() ...
[08:08:29.548] | : include = ‘immediateCondition’
[08:08:29.548] | : exclude = 
[08:08:29.548] | : resignal = FALSE
[08:08:29.548] | : Number of conditions: 6
[08:08:29.548] | :  int 6
[08:08:29.549] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.549] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.549] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.549] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.549] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.549] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.550] | signalConditions() ... done
[08:08:29.550] | result() for MulticoreFuture ...
[08:08:29.550] | result() for MulticoreFuture ... done
[08:08:29.550] | signalConditions() ...
[08:08:29.550] | : include = ‘condition’
[08:08:29.541] | : . ' , ; ` | : . List of 2
[08:08:29.541] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.541] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.541] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.541] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:29.541] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.541] | : . ' , ; ` | : .     ...)  
[08:08:29.541] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.541] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.541] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:29.541] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.541] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.541] | : . ' , ; ` | : .     ...)  
[08:08:29.541] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.541] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.541] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.541] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:29.541] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.541] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.541] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.541] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.541] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303f5b7d0> 
[08:08:29.541] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.541] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.550] | : exclude = ‘error’, ‘immediateCondition’
[08:08:29.552] | : resignal = TRUE
[08:08:29.552] | : Number of conditions: 6
[08:08:29.552] | : . ' , ; ` | : . Formals differ
[08:08:29.552] | : . ' , ; ` | : all.equal() for future ... done
[08:08:29.553] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:29.552] | :  int 6
[08:08:29.553] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:29.553] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.553] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:29.553] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.410] | : . ' , attachPackages() ...
[08:08:29.553] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.553] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.410] | : . ' , ; packages: [n=1] ‘future’
[08:08:29.553] | : . ' , ; ` | List of future strategies:
[08:08:29.553] | : . ' , ; ` | 1. multicore:
[08:08:29.553] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:29.553] | : . ' , ; ` |    - tweaked: FALSE
[08:08:29.553] | : . ' , ; ` |    - call: plan(strategy)
[08:08:29.553] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.554] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.411] | : . ' , attachPackages() ... done
[08:08:29.554] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.554] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.411] | : . ' , attachPackages() ...
[08:08:29.554] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.554] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.412] | : . ' , ; packages: [n=0] 
[08:08:29.554] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.554] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.412] | : . ' , attachPackages() ... done
[08:08:29.555] | signalConditions() ... done
[08:08:29.555] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:29.555] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:29.555] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:29.555] value(<MulticoreFuture>, ...) ...
[08:08:29.555] value(<MulticoreFuture>, ...) ... done
[08:08:29.555] value() for MulticoreFuture (<unnamed-92>) ...
[08:08:29.555] | result() for MulticoreFuture ...
[08:08:29.556] | result() for MulticoreFuture ... done
[08:08:29.556] | result() for MulticoreFuture ...
[08:08:29.556] | result() for MulticoreFuture ... done
[08:08:29.556] | signalConditions() ...
[08:08:29.556] | : include = ‘immediateCondition’
[08:08:29.556] | : exclude = 
[08:08:29.556] | : resignal = FALSE
[08:08:29.556] | : Number of conditions: 6
[08:08:29.556] | :  int 6
[08:08:29.557] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.557] | : already signaled, skipping
[08:08:29.557] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.557] | : already signaled, skipping
[08:08:29.557] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.558] | : already signaled, skipping
[08:08:29.558] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.558] | : already signaled, skipping
[08:08:29.558] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.558] | : already signaled, skipping
[08:08:29.554] | : . ' , ; ` | List of 1
[08:08:29.554] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.554] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.554] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.554] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:29.554] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.554] | : . ' , ; ` |     ...)  
[08:08:29.554] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.554] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.554] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:29.554] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.554] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.554] | : . ' , ; ` |     ...)  
[08:08:29.554] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.554] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.558] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.558] | : already signaled, skipping
[08:08:29.558] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:29.558] | signalConditions() ... done
[08:08:29.558] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:29.558] | check for misuse ...
[08:08:29.559] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.559] | check for misuse ... done
[08:08:29.559] value() for MulticoreFuture (<unnamed-92>) ... done
[08:08:29.559] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.559] value: <NULL>
[08:08:29.559] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:29.559] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:29.559] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:29.559] | nx: 6
[08:08:29.559] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:29.559] | relay: TRUE
[08:08:29.559] | stdout: TRUE
[08:08:29.559] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:29.559] | signal: TRUE
[08:08:29.560] | resignal: FALSE
[08:08:29.560] | force: TRUE
[08:08:29.560] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:29.560] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:29.560] | until=4
[08:08:29.560] | relaying element #4
[08:08:29.560] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:29.560] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:29.560] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:29.561] resolve() for MulticoreFuture ...
[08:08:29.561] resolve() for MulticoreFuture ... done
[08:08:29.561] length: 3 (resolved future 3)

[08:08:29.561] checking value #4:
[08:08:29.561] 'obj' is MulticoreFuture
[08:08:29.561] readImmediateCondition() ...
[08:08:29.561] | Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:29.562] | Number of RDS files: 0
[08:08:29.562] | Returned conditions set:
[08:08:29.562] |  list()
[08:08:29.562] readImmediateCondition() ... done
[08:08:29.562] MulticoreFuture #4
[08:08:29.563] signalConditionsASAP(MulticoreFuture, pos=4) ...
[08:08:29.563] | nx: 6
[08:08:29.563] | relay: TRUE
[08:08:29.563] | stdout: TRUE
[08:08:29.563] | signal: TRUE
[08:08:29.563] | resignal: FALSE
[08:08:29.563] | force: TRUE
[08:08:29.563] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:29.563] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:29.563] | until=4
[08:08:29.564] | relaying element #4
[08:08:29.564] | value() for MulticoreFuture (<unnamed-93>) ...
[08:08:29.564] | : result() for MulticoreFuture ...
[08:08:29.564] | : . readImmediateCondition() ...
[08:08:29.565] | : . ' Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:29.565] | : . ' Number of RDS files: 0
[08:08:29.565] | : . ' Returned conditions set:
[08:08:29.565] | : . '  list()
[08:08:29.565] | : . readImmediateCondition() ... done
[08:08:29.566] | : . result() for MulticoreFuture ...
[08:08:29.566] | : . result() for MulticoreFuture ... done
[08:08:29.566] | : . signalConditions() ...
[08:08:29.566] | : . ' include = ‘immediateCondition’
[08:08:29.566] | : . ' exclude = 
[08:08:29.567] | : . ' resignal = FALSE
[08:08:29.567] | : . ' Number of conditions: 6
[08:08:29.567] | : . '  int 6
[08:08:29.567] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.567] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.568] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.568] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.568] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.568] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.568] | : . signalConditions() ... done
[08:08:29.568] | : result() for MulticoreFuture ... done
[08:08:29.568] | : result() for MulticoreFuture ...
[08:08:29.569] | : result() for MulticoreFuture ... done
[08:08:29.569] | : signalConditions() ...
[08:08:29.569] | : . include = ‘immediateCondition’
[08:08:29.569] | : . exclude = 
[08:08:29.569] | : . resignal = FALSE
[08:08:29.569] | : . Number of conditions: 6
[08:08:29.569] | : .  int 6
[08:08:29.570] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.570] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.570] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.570] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.570] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.570] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.570] | : signalConditions() ... done
[08:08:29.571] | : relay stdout ...
[08:08:29.571] | : relay stdout ... done
[08:08:29.571] | : check for misuse ...
[08:08:29.571] | : check for misuse ... done
[08:08:29.571] | value() for MulticoreFuture (<unnamed-93>) ... done
[08:08:29.571] | result() for MulticoreFuture ...
[08:08:29.571] | result() for MulticoreFuture ... done
[08:08:29.571] | signalConditions() ...
[08:08:29.572] | : include = ‘immediateCondition’
[08:08:29.572] | : exclude = 
[08:08:29.572] | : resignal = FALSE
[08:08:29.572] | : Number of conditions: 6
[08:08:29.572] | :  int 6
[08:08:29.572] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.573] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.573] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.573] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.573] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.573] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.573] | signalConditions() ... done
[08:08:29.573] | result() for MulticoreFuture ...
[08:08:29.573] | result() for MulticoreFuture ... done
[08:08:29.574] | signalConditions() ...
[08:08:29.574] | : include = ‘condition’
[08:08:29.574] | : exclude = ‘error’, ‘immediateCondition’
[08:08:29.574] | : resignal = TRUE
[08:08:29.574] | : Number of conditions: 6
[08:08:29.574] | :  int 6
[08:08:29.575] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.575] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.494] | : . ' , attachPackages() ...
[08:08:29.575] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.575] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.494] | : . ' , ; packages: [n=1] ‘future’
[08:08:29.575] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.575] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.494] | : . ' , attachPackages() ... done
[08:08:29.575] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.576] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.495] | : . ' , attachPackages() ...
[08:08:29.576] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.576] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.495] | : . ' , ; packages: [n=0] 
[08:08:29.576] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.576] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.495] | : . ' , attachPackages() ... done
[08:08:29.576] | signalConditions() ... done
[08:08:29.576] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:29.577] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:29.577] signalConditionsASAP(MulticoreFuture, pos=4) ... done
[08:08:29.577] value(<MulticoreFuture>, ...) ...
[08:08:29.577] value(<MulticoreFuture>, ...) ... done
[08:08:29.577] value() for MulticoreFuture (<unnamed-93>) ...
[08:08:29.577] | result() for MulticoreFuture ...
[08:08:29.577] | result() for MulticoreFuture ... done
[08:08:29.577] | result() for MulticoreFuture ...
[08:08:29.578] | result() for MulticoreFuture ... done
[08:08:29.578] | signalConditions() ...
[08:08:29.578] | : include = ‘immediateCondition’
[08:08:29.578] | : exclude = 
[08:08:29.578] | : resignal = FALSE
[08:08:29.578] | : Number of conditions: 6
[08:08:29.578] | :  int 6
[08:08:29.579] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.579] | : already signaled, skipping
[08:08:29.579] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.579] | : already signaled, skipping
[08:08:29.579] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.579] | : already signaled, skipping
[08:08:29.579] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.580] | : already signaled, skipping
[08:08:29.580] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.580] | : already signaled, skipping
[08:08:29.580] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.580] | : already signaled, skipping
[08:08:29.580] | signalConditions() ... done
[08:08:29.580] | check for misuse ...
[08:08:29.580] | check for misuse ... done
[08:08:29.580] value() for MulticoreFuture (<unnamed-93>) ... done
[08:08:29.581] value: <numeric>
[08:08:29.581] signalConditionsASAP(MulticoreFuture, pos=4) ...
[08:08:29.581] | nx: 6
[08:08:29.581] | relay: TRUE
[08:08:29.581] | stdout: TRUE
[08:08:29.581] | signal: TRUE
[08:08:29.581] | resignal: FALSE
[08:08:29.582] | force: TRUE
[08:08:29.582] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:29.582] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:29.582] | until=5
[08:08:29.582] | relaying element #5
[08:08:29.582] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:29.582] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:29.582] signalConditionsASAP(MulticoreFuture, pos=4) ... done
[08:08:29.583] resolve() for MulticoreFuture ...
[08:08:29.583] resolve() for MulticoreFuture ... done
[08:08:29.583] length: 2 (resolved future 4)

[08:08:29.583] checking value #5:
[08:08:29.583] 'obj' is NULL
[08:08:29.583] signalConditionsASAP(NULL, pos=5) ...
[08:08:29.583] | nx: 6
[08:08:29.584] | relay: TRUE
[08:08:29.584] | stdout: TRUE
[08:08:29.584] | signal: TRUE
[08:08:29.584] | resignal: FALSE
[08:08:29.584] | force: TRUE
[08:08:29.584] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:29.584] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:29.584] | until=6
[08:08:29.584] | relaying element #6
[08:08:29.585] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:29.585] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:29.585] signalConditionsASAP(NULL, pos=5) ... done
[08:08:29.585] signalConditionsASAP(NULL, pos=5) ...
[08:08:29.585] | nx: 6
[08:08:29.585] | relay: TRUE
[08:08:29.585] | stdout: TRUE
[08:08:29.585] | signal: TRUE
[08:08:29.586] | resignal: FALSE
[08:08:29.586] | force: TRUE
[08:08:29.586] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:29.586] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:29.586] | until=6
[08:08:29.586] | relaying element #6
[08:08:29.586] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:29.586] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:29.586] signalConditionsASAP(NULL, pos=5) ... done
[08:08:29.587] length: 1 (resolved future 5)

[08:08:29.587] checking value #6:
[08:08:29.587] 'obj' is atomic
[08:08:29.587] signalConditionsASAP(numeric, pos=6) ...
[08:08:29.587] | nx: 6
[08:08:29.587] | relay: TRUE
[08:08:29.587] | stdout: TRUE
[08:08:29.587] | signal: TRUE
[08:08:29.587] | resignal: FALSE
[08:08:29.588] | force: TRUE
[08:08:29.588] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:29.588] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:29.588] | until=6
[08:08:29.588] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:29.588] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:29.588] signalConditionsASAP(numeric, pos=6) ... done
[08:08:29.588] length: 0 (resolved future 6)

[08:08:29.589] Relaying remaining futures ...
[08:08:29.589] | signalConditionsASAP(NULL, pos=0) ...
[08:08:29.589] | : nx: 6
[08:08:29.589] | : relay: TRUE
[08:08:29.589] | : stdout: TRUE
[08:08:29.589] | : signal: TRUE
[08:08:29.589] | : resignal: FALSE
[08:08:29.589] | : force: TRUE
[08:08:29.589] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:29.590] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
 - flush all
[08:08:29.590] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:29.590] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:29.590] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:29.590] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
 $  : NULL
 $  : num 6
Dimensions: c(1, 6)
[08:08:29.593] future(..., label = NULL) ...
[08:08:29.593] | lazy: FALSE
[08:08:29.593] | stdout: TRUE
[08:08:29.593] | conditions: [n=1] ‘condition’
[08:08:29.593] | gc: FALSE
[08:08:29.593] | earlySignal: FALSE
[08:08:29.593] | getGlobalsAndPackages() ...
[08:08:29.594] | : Searching for globals ...
[08:08:29.595] | : . globals found: [0] 
[08:08:29.595] | : Searching for globals ... done
[08:08:29.595] | : globals: [0] <none>
[08:08:29.595] | : packages: [0] <none>
[08:08:29.595] | getGlobalsAndPackages() ... done
[08:08:29.596] | run() for ‘Future’ (<unnamed-94>) ...
[08:08:29.596] | : state: ‘created’
[08:08:29.596] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.596] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.596] | : Using MulticoreFutureBackend ...
[08:08:29.596] | : . Number of futures since start: 3 (3 created, 3 launched, 4 finished)
[08:08:29.596] | : . Launching futures ...
[08:08:29.596] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:29.597] | : . ' , getFutureData() ...
[08:08:29.597] | : . ' , ; getFutureCore() ...
[08:08:29.597] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:29.597] | : . ' , ; getFutureCore() ... done
[08:08:29.597] | : . ' , ; getFutureCapture() ...
[08:08:29.597] | : . ' , ; getFutureCapture() ... done
[08:08:29.597] | : . ' , ; getFutureContext() ...
[08:08:29.597] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.597] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:29.598] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.598] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:29.598] | : . ' , ; getFutureContext() ... done
[08:08:29.598] | : . ' , getFutureData() ... done
[08:08:29.598] | : . ' , requestCore(..., workers = 2) ...
[08:08:29.598] | : . ' , requestCore(..., workers = 2) ... done
[08:08:29.600] | : . ' , MulticoreFuture started
[08:08:29.601] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:29.601] | : . Launching futures ... done
[08:08:29.601] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:29.602] | : Using MulticoreFutureBackend ... done
[08:08:29.602] | run() for ‘Future’ (<unnamed-94>) ... done
[08:08:29.602] future(..., label = NULL) ... done
[08:08:29.602] future(..., label = NULL) ...
[08:08:29.602] | lazy: FALSE
[08:08:29.602] | stdout: TRUE
[08:08:29.603] | conditions: [n=1] ‘condition’
[08:08:29.603] | gc: FALSE
[08:08:29.603] | earlySignal: FALSE
[08:08:29.603] | getGlobalsAndPackages() ...
[08:08:29.603] | : Searching for globals ...
[08:08:29.604] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.604] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:29.604] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.605] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:29.605] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:29.605] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:29.605] | : . ' , ; ` | New stack:
[08:08:29.605] | : . globals found: [0] 
[08:08:29.606] | : Searching for globals ... done
[08:08:29.606] | : globals: [0] <none>
[08:08:29.606] | : packages: [0] <none>
[08:08:29.606] | getGlobalsAndPackages() ... done
[08:08:29.606] | run() for ‘Future’ (<unnamed-95>) ...
[08:08:29.607] | : state: ‘created’
[08:08:29.607] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.607] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.607] | : Using MulticoreFutureBackend ...
[08:08:29.607] | : . Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:08:29.607] | : . Launching futures ...
[08:08:29.608] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:29.608] | : . ' , getFutureData() ...
[08:08:29.608] | : . ' , ; getFutureCore() ...
[08:08:29.608] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:29.608] | : . ' , ; getFutureCore() ... done
[08:08:29.608] | : . ' , ; getFutureCapture() ...
[08:08:29.609] | : . ' , ; getFutureCapture() ... done
[08:08:29.609] | : . ' , ; getFutureContext() ...
[08:08:29.609] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.605] | : . ' , ; ` | List of 1
[08:08:29.605] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.605] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.605] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:29.605] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.605] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.605] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.605] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.605] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.609] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:29.609] | : . ' , ; ` | Old stack:
[08:08:29.609] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.609] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:29.610] | : . ' , ; getFutureContext() ... done
[08:08:29.610] | : . ' , getFutureData() ... done
[08:08:29.610] | : . ' , requestCore(..., workers = 2) ...
[08:08:29.611] | : . ' , requestCore(..., workers = 2) ... done
[08:08:29.613] | : . ' , MulticoreFuture started
[08:08:29.613] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:29.609] | : . ' , ; ` | List of 1
[08:08:29.609] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.609] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.609] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.609] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:29.609] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.609] | : . ' , ; ` |     ...)  
[08:08:29.609] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.609] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.609] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:29.609] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.609] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.609] | : . ' , ; ` |     ...)  
[08:08:29.609] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.609] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.614] | : . Launching futures ... done
[08:08:29.614] | : . ' , ; ` | Not identical
[08:08:29.614] | : . ' , ; ` | all.equal() for future ...
[08:08:29.614] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:29.614] | : Using MulticoreFutureBackend ... done
[08:08:29.615] | run() for ‘Future’ (<unnamed-95>) ... done
[08:08:29.615] future(..., label = NULL) ... done
[08:08:29.616] future(..., label = NULL) ...
[08:08:29.616] | lazy: FALSE
[08:08:29.617] | stdout: TRUE
[08:08:29.617] | conditions: [n=1] ‘condition’
[08:08:29.617] | gc: FALSE
[08:08:29.617] | earlySignal: FALSE
[08:08:29.617] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.618] | getGlobalsAndPackages() ...
[08:08:29.618] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:29.618] | : Searching for globals ...
[08:08:29.618] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.618] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:29.619] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:29.619] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:29.619] | : . ' , ; ` | New stack:
[08:08:29.614] | : . ' , ; ` | : List of 2
[08:08:29.614] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.614] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.614] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:29.614] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.614] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.614] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.614] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.614] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.614] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.614] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.614] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:29.614] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.614] | : . ' , ; ` | :     ...)  
[08:08:29.614] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.614] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.614] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:29.614] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.614] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.614] | : . ' , ; ` | :     ...)  
[08:08:29.614] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.622] | : . ' , ; ` | : Formals differ
[08:08:29.622] | : . ' , ; ` | all.equal() for future ... done
[08:08:29.622] | : . ' , ; ` | Future strategies differ at level 1
[08:08:29.622] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:29.622] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:29.623] | : . ' , ; ` List of future strategies:
[08:08:29.623] | : . ' , ; ` 1. sequential:
[08:08:29.623] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:29.623] | : . ' , ; `    - tweaked: FALSE
[08:08:29.623] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.620] | : . ' , ; ` | List of 1
[08:08:29.620] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.620] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.620] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:29.620] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.620] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.620] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.620] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.620] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.625] | : . ' , ; ` | Old stack:
[08:08:29.625] | : . globals found: [1] ‘{’
[08:08:29.626] | : Searching for globals ... done
[08:08:29.626] | : Resolving globals: FALSE
[08:08:29.626] | : Search for packages associated with the globals ...
[08:08:29.623] | : . ' , ; ` List of 1
[08:08:29.623] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.623] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.623] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:29.623] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.623] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.623] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.623] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.623] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.627] | : . Packages associated with globals: [1] ‘base’
[08:08:29.627] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:29.627] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:29.627] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.627] | : . Packages: [1] ‘base’
[08:08:29.627] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:29.627] | : Search for packages associated with the globals ... done
[08:08:29.628] | : Packages after dropping 'base': [0] 
[08:08:29.628] | : globals: [0] 
[08:08:29.628] | : packages: [0] 
[08:08:29.628] | getGlobalsAndPackages() ... done
[08:08:29.629] | run() for ‘Future’ (<unnamed-96>) ...
[08:08:29.629] | : state: ‘created’
[08:08:29.629] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.630] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.630] | : Using MulticoreFutureBackend ...
[08:08:29.630] | : . Number of futures since start: 5 (5 created, 5 launched, 4 finished)
[08:08:29.628] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.628] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.628] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:29.628] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.628] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.628] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.628] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.630] | : . Launching futures ...
[08:08:29.630] | : . ' , ; ` | : init: TRUE
[08:08:29.631] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:29.631] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:29.631] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:29.631] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:29.631] | : . ' , getFutureData() ...
[08:08:29.631] | : . ' , ; getFutureCore() ...
[08:08:29.631] | : . ' , ; ` | : .  list()
[08:08:29.631] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:29.632] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:29.632] | : . ' , ; getFutureCore() ... done
[08:08:29.632] | : . ' , ; getFutureCapture() ...
[08:08:29.632] | : . ' , ; ` | : .  list()
[08:08:29.632] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:29.632] | : . ' , ; getFutureCapture() ... done
[08:08:29.632] | : . ' , ; getFutureContext() ...
[08:08:29.626] | : . ' , ; ` | List of 1
[08:08:29.626] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.626] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.626] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.626] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:29.626] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.626] | : . ' , ; ` |     ...)  
[08:08:29.626] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.626] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.626] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:29.626] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.626] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.626] | : . ' , ; ` |     ...)  
[08:08:29.626] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.626] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.632] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.633] | : . ' , ; ` | Not identical
[08:08:29.633] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:29.633] | : . ' , ; ` | all.equal() for future ...
[08:08:29.633] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.633] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:29.633] | : . ' , ; getFutureContext() ... done
[08:08:29.632] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:29.632] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:29.632] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:29.634] | : . ' , getFutureData() ... done
[08:08:29.634] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:29.634] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:29.634] | : . ' , requestCore(..., workers = 2) ...
[08:08:29.634] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:29.634] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.634] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:29.635] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:29.635] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:29.635] | : . ' , ; Poll #1 (0): usedCores() = 2, workers = 2
[08:08:29.638] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:29.638] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:29.638] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:29.638] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:29.639] | : . ' , ; ` | : New stack:
[08:08:29.633] | : . ' , ; ` | : List of 2
[08:08:29.633] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.633] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.633] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:29.633] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.633] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.633] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.633] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.633] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.633] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.633] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.633] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:29.633] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.633] | : . ' , ; ` | :     ...)  
[08:08:29.633] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.633] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.633] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:29.633] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.633] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.633] | : . ' , ; ` | :     ...)  
[08:08:29.633] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.641] | : . ' , ; ` | : Formals differ
[08:08:29.641] | : . ' , ; ` | all.equal() for future ... done
[08:08:29.642] | : . ' , ; ` | Future strategies differ at level 1
[08:08:29.642] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:29.642] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:29.642] | : . ' , ; ` List of future strategies:
[08:08:29.642] | : . ' , ; ` 1. sequential:
[08:08:29.642] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:29.642] | : . ' , ; `    - tweaked: FALSE
[08:08:29.642] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.639] | : . ' , ; ` | : List of 1
[08:08:29.639] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.639] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.639] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.639] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:29.639] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.639] | : . ' , ; ` | :     ...)  
[08:08:29.639] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.639] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.639] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:29.639] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.639] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.639] | : . ' , ; ` | :     ...)  
[08:08:29.639] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.639] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.643] | : . ' , ; ` | : Old stack:
[08:08:29.643] | : . ' , ; ` List of 1
[08:08:29.643] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.643] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.643] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:29.643] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.643] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.643] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.643] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.643] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.646] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:29.647] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:29.647] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.647] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:29.647] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.647] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.647] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:29.647] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.647] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.647] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.647] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.650] | : . ' , ; ` | : init: TRUE
[08:08:29.650] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:29.651] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:29.651] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:29.651] | : . ' , ; ` | : .  list()
[08:08:29.651] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:29.644] | : . ' , ; ` | : List of 1
[08:08:29.644] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.644] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.644] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:29.644] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.644] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.644] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.644] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.644] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564304458060> 
[08:08:29.644] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.644] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.644] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.651] | : . ' , ; ` | : .  list()
[08:08:29.652] | : . ' , ; ` | : Not identical
[08:08:29.652] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:29.652] | : . ' , ; ` | : all.equal() for future ...
[08:08:29.652] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:29.652] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:29.652] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:29.653] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:29.654] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:29.654] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:29.654] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.654] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:29.654] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:29.654] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:29.655] | : . ' , ; readImmediateCondition() ...
[08:08:29.656] | : . ' , ; ` Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:29.656] | : . ' , ; ` Number of RDS files: 0
[08:08:29.656] | : . ' , ; ` Returned conditions set:
[08:08:29.656] | : . ' , ; `  list()
[08:08:29.657] | : . ' , ; readImmediateCondition() ... done
[08:08:29.652] | : . ' , ; ` | : . List of 2
[08:08:29.652] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.652] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.652] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.652] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:29.652] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.652] | : . ' , ; ` | : .     ...)  
[08:08:29.652] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.652] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.652] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:29.652] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.652] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.652] | : . ' , ; ` | : .     ...)  
[08:08:29.652] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.652] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.652] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.652] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:29.652] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.652] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.652] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.652] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.652] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564304458060> 
[08:08:29.652] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.652] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.660] | : . ' , ; ` | : . Formals differ
[08:08:29.660] | : . ' , ; ` | : all.equal() for future ... done
[08:08:29.661] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:29.661] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:29.661] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:29.661] | : . ' , ; ` | List of future strategies:
[08:08:29.661] | : . ' , ; ` | 1. multicore:
[08:08:29.661] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:29.661] | : . ' , ; ` |    - tweaked: FALSE
[08:08:29.661] | : . ' , ; ` |    - call: plan(strategy)
[08:08:29.662] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:29.662] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:29.662] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:29.662] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:29.662] | : . ' , ; ` | : New stack:
[08:08:29.661] | : . ' , ; ` | List of 1
[08:08:29.661] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.661] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.661] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.661] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:29.661] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.661] | : . ' , ; ` |     ...)  
[08:08:29.661] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.661] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.661] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:29.661] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.661] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.661] | : . ' , ; ` |     ...)  
[08:08:29.661] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.661] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.666] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:29.666] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:29.667] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.667] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.662] | : . ' , ; ` | : List of 1
[08:08:29.662] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.662] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.662] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.662] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:29.662] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.662] | : . ' , ; ` | :     ...)  
[08:08:29.662] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.662] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.662] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:29.662] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.662] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.662] | : . ' , ; ` | :     ...)  
[08:08:29.662] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.662] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.667] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:29.667] | : . ' , ; ` | : Old stack:
[08:08:29.667] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:29.667] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:29.667] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:29.668] | : . ' , ; readImmediateCondition() ...
[08:08:29.668] | : . ' , ; ` Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:29.668] | : . ' , ; ` Number of RDS files: 0
[08:08:29.668] | : . ' , ; ` Returned conditions set:
[08:08:29.668] | : . ' , ; `  list()
[08:08:29.669] | : . ' , ; readImmediateCondition() ... done
[08:08:29.670] | : . ' , ; Poll #2 (0.04 secs): usedCores() = 2, workers = 2
[08:08:29.667] | : . ' , ; ` | : List of 1
[08:08:29.667] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.667] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.667] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:29.667] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.667] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.667] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.667] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.667] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643039719b8> 
[08:08:29.667] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.667] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.667] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.673] | : . ' , ; ` | : Not identical
[08:08:29.673] | : . ' , ; ` | : all.equal() for future ...
[08:08:29.680] | : . ' , ; readImmediateCondition() ...
[08:08:29.681] | : . ' , ; ` Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:29.681] | : . ' , ; ` Number of RDS files: 0
[08:08:29.673] | : . ' , ; ` | : . List of 2
[08:08:29.673] | : . ' , ; ` | : .  $ target :function (..., workers = availableCor[08:08:29.681] | : . ' , ; ` Returned conditions set:
es(constraints = "multicore"), gc = FALSE, 
[08:08:29.673] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.673] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.673] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:29.673] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.673] | : . ' , ; ` | : .     ...)  
[08:08:29.673] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.673] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.673] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:29.673] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.673] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.673] | : . ' , ; ` | : .     ...)  
[08:08:29.673] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.673] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.673] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.673] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:29.673] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.673] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.673] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.673] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.673] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643039719b8> 
[08:08:29.673] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.673] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.681] | : . ' , ; `  list()
[08:08:29.682] | : . ' , ; readImmediateCondition() ... done
[08:08:29.682] | : . ' , ; ` | : . Formals differ
[08:08:29.682] | : . ' , ; value() for MulticoreFuture (<unnamed-94>) ...
[08:08:29.682] | : . ' , ; ` | : all.equal() for future ... done
[08:08:29.682] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:29.683] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:29.683] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:29.683] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:29.683] | : . ' , ; ` | readImmediateCondition() ...
[08:08:29.684] | : . ' , ; ` | : Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:29.683] | : . ' , ; ` | List of future strategies:
[08:08:29.683] | : . ' , ; ` | 1. multicore:
[08:08:29.683] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:29.683] | : . ' , ; ` |    - tweaked: FALSE
[08:08:29.683] | : . ' , ; ` |    - call: plan(strategy)
[08:08:29.684] | : . ' , ; ` | : Number of RDS files: 0
[08:08:29.684] | : . ' , ; ` | : Returned conditions set:
[08:08:29.684] | : . ' , ; ` | :  list()
[08:08:29.685] | : . ' , ; ` | readImmediateCondition() ... done
[08:08:29.685] | : . ' , ; ` | result() for MulticoreFuture ...
[08:08:29.686] | : . ' , ; ` | result() for MulticoreFuture ... done
[08:08:29.686] | : . ' , ; ` | signalConditions() ...
[08:08:29.686] | : . ' , ; ` | : include = ‘immediateCondition’
[08:08:29.686] | : . ' , ; ` | : exclude = 
[08:08:29.687] | : . ' , ; ` | : resignal = FALSE
[08:08:29.687] | : . ' , ; ` | : Number of conditions: 6
[08:08:29.687] | : . ' , ; ` | :  int 6
[08:08:29.688] | : . ' , ; ` | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.688] | : . ' , ; ` | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.688] | : . ' , ; ` | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.688] | : . ' , ; ` | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.689] | : . ' , ; ` | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.689] | : . ' , ; ` | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.689] | : . ' , ; ` | signalConditions() ... done
[08:08:29.689] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:29.690] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:29.690] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:29.690] | : . ' , ; ` signalConditions() ...
[08:08:29.690] | : . ' , ; ` | include = ‘immediateCondition’
[08:08:29.690] | : . ' , ; ` | exclude = 
[08:08:29.691] | : . ' , ; ` | resignal = FALSE
[08:08:29.691] | : . ' , ; ` | Number of conditions: 6
[08:08:29.684] | : . ' , ; ` | List of 1
[08:08:29.684] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.684] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.684] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.684] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:29.684] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.684] | : . ' , ; ` |     ...)  
[08:08:29.684] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.684] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.684] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:29.684] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.684] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.684] | : . ' , ; ` |     ...)  
[08:08:29.684] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.684] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.691] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:29.691] | : . ' , ; ` |  int 6
[08:08:29.692] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = [08:08:29.692] | : . ' , ; ` | Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
FALSE) ... done
[08:08:29.692] | : . ' , ; ` | Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.692] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.692] | : . ' , ; ` | Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.692] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.692] | : . ' , ; ` | Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.693] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:29.693] | : . ' , ; ` | Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.693] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:29.693] | : . ' , ; ` | Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.693] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:29.693] | : . ' , ; ` signalConditions() ... done
[08:08:29.693] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:29.693] | : . ' , ; ` check for misuse ...
[08:08:29.694] | : . ' , ; ` check for misuse ... done
[08:08:29.694] | : . ' , ; value() for MulticoreFuture (<unnamed-94>) ... done
[08:08:29.694] | : . ' , requestCore(..., workers = 2) ... done
[08:08:29.696] | : . ' , MulticoreFuture started
[08:08:29.697] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:29.697] | : . Launching futures ... done
[08:08:29.697] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:29.697] | : Using MulticoreFutureBackend ... done
[08:08:29.698] | run() for ‘Future’ (<unnamed-96>) ... done
[08:08:29.698] future(..., label = NULL) ... done
Classes 'listenv', 'environment' <environment: 0x5643049121e0> 
[08:08:29.700] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.700] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:29.700] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Classes 'listenv', 'environment' <environment: 0x56430419b310> 
 - attr(*, "dim.")=[08:08:29.700] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:29.701] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:29.701] | : . ' , ; ` all.equal() for FutureStrategyList ...
 int [1:2] 1 6
 - attr(*, "dimnames.")=[08:08:29.701] | : . ' , ; ` | New stack:
List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
[08:08:29.703] resolved() for listenv ...
[08:08:29.704] | resolved() for matrix ...
[08:08:29.704] | : Number of elements: 6
[08:08:29.704] | : Number of futures: 6
[08:08:29.705] | : readImmediateCondition() ...
[08:08:29.705] | : . Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:29.701] | : . ' , ; ` | List of 1
[08:08:29.701] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.701] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.701] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:29.701] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.701] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.701] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.701] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.701] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.705] | : . Number of RDS files: 0
[08:08:29.705] | : . ' , ; ` | Old stack:
[08:08:29.705] | : . Returned conditions set:
[08:08:29.705] | : .  list()
[08:08:29.706] | : readImmediateCondition() ... done
[08:08:29.705] | : . ' , ; ` | List of 1
[08:08:29.705] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.705] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.705] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.705] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:29.705] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.705] | : . ' , ; ` |     ...)  
[08:08:29.705] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.705] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.705] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:29.705] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.705] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.705] | : . ' , ; ` |     ...)  
[08:08:29.705] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.705] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.714] | : . ' , ; ` | Not identical
[08:08:29.715] | : . ' , ; ` | all.equal() for future ...
[08:08:29.716] | : readImmediateCondition() ...
[08:08:29.716] | : . Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:29.716] | : . Number of RDS files: 0
[08:08:29.717] | : . Returned conditions set:
[08:08:29.717] | : .  list()
[08:08:29.717] | : readImmediateCondition() ... done
[08:08:29.720] | resolved() for matrix ... done
[08:08:29.720] resolved() for listenv ... done
 logi [1, 1:6] TRUE TRUE TRUE FALSE TRUE TRUE
 - attr(*, "dimnames")=List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
 - attr(*, "names")= chr [1:6] "a" "b" "c" "d" ...
[08:08:29.721] value() for listenv ...
[08:08:29.722] | recursive: 0
[08:08:29.715] | : . ' , ; ` | : List of 2
[08:08:29.715] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.715] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.715] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:29.715] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.715] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.715] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.715] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.715] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.715] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.715] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.715] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:29.715] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.715] | : . ' , ; ` | :     ...)  
[08:08:29.715] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.715] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.715] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:29.715] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.715] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.715] | : . ' , ; ` | :     ...)  
[08:08:29.715] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.722] | reduce: FALSE
[08:08:29.722] | : . ' , ; ` | : Formals differ
[08:08:29.723] | : . ' , ; ` | all.equal() for future ... done
[08:08:29.723] | : . ' , ; ` | Future strategies differ at level 1
[08:08:29.723] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:29.723] | length: 6
[08:08:29.723] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:29.723] | elements: ‘a’, ‘b’, ‘c’, ‘d’, ‘’, ‘’
[08:08:29.723] | Number of remaining objects: 6
[08:08:29.723] | checking value #1:
[08:08:29.724] | 'obj' is atomic
[08:08:29.724] | signalConditionsASAP(numeric, pos=1) ...
[08:08:29.723] | : . ' , ; ` List of future strategies:
[08:08:29.723] | : . ' , ; ` 1. sequential:
[08:08:29.723] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:29.723] | : . ' , ; `    - tweaked: FALSE
[08:08:29.723] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.724] | : nx: 6
[08:08:29.724] | : relay: TRUE
[08:08:29.724] | : stdout: TRUE
[08:08:29.724] | : signal: TRUE
[08:08:29.724] | : resignal: FALSE
[08:08:29.724] | : force: TRUE
[08:08:29.724] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:29.725] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:29.725] | : until=2
[08:08:29.725] | : relaying element #2
[08:08:29.725] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:29.725] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:29.725] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:29.725] | length: 5 (resolved future 1)
[08:08:29.726] value() for listenv ... done
[08:08:29.726] checking value #2:
[08:08:29.726] 'obj' is MulticoreFuture
[08:08:29.726] MulticoreFuture #2
[08:08:29.726] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:29.726] | nx: 6
[08:08:29.726] | relay: TRUE
[08:08:29.726] | stdout: TRUE
[08:08:29.727] | signal: TRUE
[08:08:29.727] | resignal: FALSE
[08:08:29.727] | force: TRUE
[08:08:29.727] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:29.727] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:29.727] | until=2
[08:08:29.727] | relaying element #2
[08:08:29.727] | value() for MulticoreFuture (<unnamed-94>) ...
[08:08:29.727] | : result() for MulticoreFuture ...
[08:08:29.724] | : . ' , ; ` List of 1
[08:08:29.724] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.724] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.724] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:29.724] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.724] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.724] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.724] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.724] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.728] | : result() for MulticoreFuture ... done
[08:08:29.728] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:29.728] | : result() for MulticoreFuture ...
[08:08:29.728] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:29.728] | : result() for MulticoreFuture ... done
[08:08:29.728] | : signalConditions() ...
[08:08:29.728] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.728] | : . include = ‘immediateCondition’
[08:08:29.728] | : . exclude = 
[08:08:29.728] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:29.728] | : . resignal = FALSE
[08:08:29.728] | : . Number of conditions: 6
[08:08:29.729] | : .  int 6
[08:08:29.729] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.729] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.729] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.729] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.730] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.730] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.730] | : signalConditions() ... done
[08:08:29.730] | : relay stdout ...
[08:08:29.730] | : relay stdout ... done
[08:08:29.730] | : check for misuse ...
[08:08:29.730] | : check for misuse ... done
[08:08:29.731] | value() for MulticoreFuture (<unnamed-94>) ... done
[08:08:29.731] | result() for MulticoreFuture ...
[08:08:29.731] | result() for MulticoreFuture ... done
[08:08:29.731] | signalConditions() ...
[08:08:29.731] | : include = ‘immediateCondition’
[08:08:29.731] | : exclude = 
[08:08:29.731] | : resignal = FALSE
[08:08:29.728] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.728] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.728] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:29.728] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.728] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.728] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.728] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.731] | : Number of conditions: 6
[08:08:29.731] | : . ' , ; ` | : init: TRUE
[08:08:29.732] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:29.732] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:29.731] | :  int 6
[08:08:29.732] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:29.732] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.732] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.732] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.732] | : . ' , ; ` | : .  list()
[08:08:29.732] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.732] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:29.732] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.733] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.733] | signalConditions() ... done
[08:08:29.733] | : . ' , ; ` | : .  list()
[08:08:29.733] | result() for MulticoreFuture ...
[08:08:29.733] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:29.733] | result() for MulticoreFuture ... done
[08:08:29.733] | signalConditions() ...
[08:08:29.733] | : include = ‘condition’
[08:08:29.733] | : exclude = ‘error’, ‘immediateCondition’
[08:08:29.733] | : resignal = TRUE
[08:08:29.734] | : Number of conditions: 6
[08:08:29.734] | :  int 6
[08:08:29.734] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.734] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.602] | : . ' , attachPackages() ...
[08:08:29.733] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:29.733] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:29.733] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:29.734] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.735] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.602] | : . ' , ; packages: [n=1] ‘future’
[08:08:29.735] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.735] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:29.735] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.602] | : . ' , attachPackages() ... done
[08:08:29.735] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:29.735] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.735] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:29.735] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.603] | : . ' , attachPackages() ...
[08:08:29.735] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.735] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.735] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:29.735] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.603] | : . ' , ; packages: [n=0] 
[08:08:29.736] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:29.736] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.736] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:29.736] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.603] | : . ' , attachPackages() ... done
[08:08:29.736] | signalConditions() ... done
[08:08:29.736] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:29.736] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:29.736] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:29.736] value(<MulticoreFuture>, ...) ...
[08:08:29.736] value(<MulticoreFuture>, ...) ... done
[08:08:29.737] value() for MulticoreFuture (<unnamed-94>) ...
[08:08:29.737] | result() for MulticoreFuture ...
[08:08:29.737] | result() for MulticoreFuture ... done
[08:08:29.737] | result() for MulticoreFuture ...
[08:08:29.737] | result() for MulticoreFuture ... done
[08:08:29.737] | signalConditions() ...
[08:08:29.737] | : include = ‘immediateCondition’
[08:08:29.737] | : exclude = 
[08:08:29.738] | : resignal = FALSE
[08:08:29.738] | : Number of conditions: 6
[08:08:29.738] | :  int 6
[08:08:29.738] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.738] | : already signaled, skipping
[08:08:29.739] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.739] | : already signaled, skipping
[08:08:29.739] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.739] | : already signaled, skipping
[08:08:29.739] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:29.739] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.739] | : already signaled, skipping
[08:08:29.739] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:29.739] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.739] | : already signaled, skipping
[08:08:29.739] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:29.740] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.740] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:29.740] | : already signaled, skipping
[08:08:29.740] | signalConditions() ... done
[08:08:29.740] | : . ' , ; ` | : New stack:
[08:08:29.740] | check for misuse ...
[08:08:29.740] | check for misuse ... done
[08:08:29.740] value() for MulticoreFuture (<unnamed-94>) ... done
[08:08:29.740] value: <numeric>
[08:08:29.740] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:29.741] | nx: 6
[08:08:29.741] | relay: TRUE
[08:08:29.741] | stdout: TRUE
[08:08:29.741] | signal: TRUE
[08:08:29.741] | resignal: FALSE
[08:08:29.741] | force: TRUE
[08:08:29.741] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:29.741] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:29.741] | until=3
[08:08:29.742] | relaying element #3
[08:08:29.742] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:29.742] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:29.742] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:29.742] resolve() for MulticoreFuture ...
[08:08:29.742] resolve() for MulticoreFuture ... done
[08:08:29.742] length: 4 (resolved future 2)

[08:08:29.743] checking value #3:
[08:08:29.743] 'obj' is MulticoreFuture
[08:08:29.743] readImmediateCondition() ...
[08:08:29.743] | Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:29.743] | Number of RDS files: 0
[08:08:29.743] | Returned conditions set:
[08:08:29.743] |  list()
[08:08:29.744] readImmediateCondition() ... done
[08:08:29.744] MulticoreFuture #3
[08:08:29.744] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:29.744] | nx: 6
[08:08:29.744] | relay: TRUE
[08:08:29.740] | : . ' , ; ` | : List of 1
[08:08:29.740] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.740] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.740] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.740] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:29.740] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.740] | : . ' , ; ` | :     ...)  
[08:08:29.740] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.740] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.740] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:29.740] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.740] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.740] | : . ' , ; ` | :     ...)  
[08:08:29.740] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.740] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.744] | stdout: TRUE
[08:08:29.745] | : . ' , ; ` | : Old stack:
[08:08:29.745] | signal: TRUE
[08:08:29.745] | resignal: FALSE
[08:08:29.745] | force: TRUE
[08:08:29.745] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:29.745] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:29.745] | until=3
[08:08:29.745] | relaying element #3
[08:08:29.746] | value() for MulticoreFuture (<unnamed-95>) ...
[08:08:29.746] | : result() for MulticoreFuture ...
[08:08:29.746] | : . readImmediateCondition() ...
[08:08:29.747] | : . ' Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:29.747] | : . ' Number of RDS files: 0
[08:08:29.747] | : . ' Returned conditions set:
[08:08:29.747] | : . '  list()
[08:08:29.748] | : . readImmediateCondition() ... done
[08:08:29.748] | : . result() for MulticoreFuture ...
[08:08:29.748] | : . result() for MulticoreFuture ... done
[08:08:29.749] | : . signalConditions() ...
[08:08:29.749] | : . ' include = ‘immediateCondition’
[08:08:29.749] | : . ' exclude = 
[08:08:29.749] | : . ' resignal = FALSE
[08:08:29.749] | : . ' Number of conditions: 6
[08:08:29.745] | : . ' , ; ` | : List of 1
[08:08:29.745] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.745] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.745] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:29.745] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.745] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.745] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.745] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.745] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564301e4f510> 
[08:08:29.745] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.745] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.745] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.750] | : . ' , ; ` | : Not identical
[08:08:29.750] | : . ' , ; ` | : all.equal() for future ...
[08:08:29.750] | : . '  int 6
[08:08:29.750] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.750] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.751] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.751] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.751] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.751] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.751] | : . signalConditions() ... done
[08:08:29.752] | : result() for MulticoreFuture ... done
[08:08:29.752] | : result() for MulticoreFuture ...
[08:08:29.752] | : result() for MulticoreFuture ... done
[08:08:29.752] | : signalConditions() ...
[08:08:29.752] | : . include = ‘immediateCondition’
[08:08:29.752] | : . exclude = 
[08:08:29.753] | : . resignal = FALSE
[08:08:29.753] | : . Number of conditions: 6
[08:08:29.753] | : .  int 6
[08:08:29.754] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.754] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.754] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.754] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.754] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.755] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.755] | : signalConditions() ... done
[08:08:29.755] | : relay stdout ...
[08:08:29.755] | : relay stdout ... done
[08:08:29.755] | : check for misuse ...
[08:08:29.755] | : check for misuse ... done
[08:08:29.755] | value() for MulticoreFuture (<unnamed-95>) ... done
[08:08:29.756] | result() for MulticoreFuture ...
[08:08:29.756] | result() for MulticoreFuture ... done
[08:08:29.756] | signalConditions() ...
[08:08:29.756] | : include = ‘immediateCondition’
[08:08:29.756] | : exclude = 
[08:08:29.756] | : resignal = FALSE
[08:08:29.756] | : Number of conditions: 6
[08:08:29.756] | :  int 6
[08:08:29.757] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.757] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.757] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.750] | : . ' , ; ` | : . List of 2
[08:08:29.750] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.750] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.750] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.750] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:29.750] | : . ' , ; ` | : .   ..- attr(*, "factory")=function [08:08:29.757] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
(workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.750] | : . ' , ; ` | : .     ...)  
[08:08:29.750] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.750] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.750] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:29.750] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.750] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.750] | : . ' , ; ` | : .     ...)  
[08:08:29.750] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.750] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.750] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.750] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:29.750] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.750] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.750] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.750] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.750] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564301e4f510> 
[08:08:29.750] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.750] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.757] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.757] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.758] | signalConditions() ... done
[08:08:29.758] | result() for MulticoreFuture ...
[08:08:29.758] | : . ' , ; ` | : . Formals differ
[08:08:29.758] | result() for MulticoreFuture ... done
[08:08:29.758] | signalConditions() ...
[08:08:29.758] | : . ' , ; ` | : all.equal() for future ... done
[08:08:29.758] | : include = ‘condition’
[08:08:29.758] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:29.758] | : exclude = ‘error’, ‘immediateCondition’
[08:08:29.758] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:29.758] | : resignal = TRUE
[08:08:29.758] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:29.758] | : Number of conditions: 6
[08:08:29.758] | : . ' , ; ` | List of future strategies:
[08:08:29.758] | : . ' , ; ` | 1. multicore:
[08:08:29.758] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:29.758] | : . ' , ; ` |    - tweaked: FALSE
[08:08:29.758] | : . ' , ; ` |    - call: plan(strategy)
[08:08:29.759] | :  int 6
[08:08:29.759] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.759] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.614] | : . ' , attachPackages() ...
[08:08:29.759] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.759] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.615] | : . ' , ; packages: [n=1] ‘future’
[08:08:29.760] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.760] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.615] | : . ' , attachPackages() ... done
[08:08:29.760] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.760] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.615] | : . ' , attachPackages() ...
[08:08:29.760] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.760] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.616] | : . ' , ; packages: [n=0] 
[08:08:29.760] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.761] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.616] | : . ' , attachPackages() ... done
[08:08:29.761] | signalConditions() ... done
[08:08:29.761] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:29.761] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:29.761] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:29.761] value(<MulticoreFuture>, ...) ...
[08:08:29.761] value(<MulticoreFuture>, ...) ... done
[08:08:29.761] value() for MulticoreFuture (<unnamed-95>) ...
[08:08:29.762] | result() for MulticoreFuture ...
[08:08:29.762] | result() for MulticoreFuture ... done
[08:08:29.762] | result() for MulticoreFuture ...
[08:08:29.762] | result() for MulticoreFuture ... done
[08:08:29.762] | signalConditions() ...
[08:08:29.762] | : include = ‘immediateCondition’
[08:08:29.762] | : exclude = 
[08:08:29.762] | : resignal = FALSE
[08:08:29.763] | : Number of conditions: 6
[08:08:29.759] | : . ' , ; ` | List of 1
[08:08:29.759] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.759] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.759] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.759] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:29.759] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.759] | : . ' , ; ` |     ...)  
[08:08:29.759] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.759] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.759] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:29.759] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.759] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.759] | : . ' , ; ` |     ...)  
[08:08:29.759] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.759] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.763] | :  int 6
[08:08:29.763] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.763] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:29.763] | : already signaled, skipping
[08:08:29.763] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:29.763] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.763] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.764] | : already signaled, skipping
[08:08:29.764] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.764] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.764] | : already signaled, skipping
[08:08:29.764] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:29.764] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.764] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:29.764] | : already signaled, skipping
[08:08:29.764] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:29.764] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.764] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:29.764] | : already signaled, skipping
[08:08:29.764] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.764] | : already signaled, skipping
[08:08:29.765] | signalConditions() ... done
[08:08:29.765] | check for misuse ...
[08:08:29.765] | check for misuse ... done
[08:08:29.765] value() for MulticoreFuture (<unnamed-95>) ... done
[08:08:29.765] value: <NULL>
[08:08:29.765] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:29.765] | nx: 6
[08:08:29.765] | relay: TRUE
[08:08:29.766] | stdout: TRUE
[08:08:29.766] | signal: TRUE
[08:08:29.766] | resignal: FALSE
[08:08:29.766] | force: TRUE
[08:08:29.766] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:29.766] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:29.766] | until=4
[08:08:29.766] | relaying element #4
[08:08:29.766] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:29.767] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:29.767] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:29.767] resolve() for MulticoreFuture ...
[08:08:29.767] resolve() for MulticoreFuture ... done
[08:08:29.767] length: 3 (resolved future 3)

[08:08:29.767] checking value #4:
[08:08:29.767] 'obj' is MulticoreFuture
[08:08:29.767] readImmediateCondition() ...
[08:08:29.768] | Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:29.768] | Number of RDS files: 0
[08:08:29.768] | Returned conditions set:
[08:08:29.768] |  list()
[08:08:29.768] readImmediateCondition() ... done
[08:08:29.768] MulticoreFuture #4
[08:08:29.769] signalConditionsASAP(MulticoreFuture, pos=4) ...
[08:08:29.769] | nx: 6
[08:08:29.769] | relay: TRUE
[08:08:29.769] | stdout: TRUE
[08:08:29.769] | signal: TRUE
[08:08:29.769] | resignal: FALSE
[08:08:29.769] | force: TRUE
[08:08:29.770] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:29.770] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:29.770] | until=4
[08:08:29.770] | relaying element #4
[08:08:29.770] | value() for MulticoreFuture (<unnamed-96>) ...
[08:08:29.770] | : result() for MulticoreFuture ...
[08:08:29.771] | : . readImmediateCondition() ...
[08:08:29.771] | : . ' Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:29.771] | : . ' Number of RDS files: 0
[08:08:29.771] | : . ' Returned conditions set:
[08:08:29.772] | : . '  list()
[08:08:29.772] | : . readImmediateCondition() ... done
[08:08:29.772] | : . result() for MulticoreFuture ...
[08:08:29.772] | : . result() for MulticoreFuture ... done
[08:08:29.772] | : . signalConditions() ...
[08:08:29.773] | : . ' include = ‘immediateCondition’
[08:08:29.773] | : . ' exclude = 
[08:08:29.773] | : . ' resignal = FALSE
[08:08:29.773] | : . ' Number of conditions: 6
[08:08:29.773] | : . '  int 6
[08:08:29.774] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.774] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.774] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.774] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.774] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.774] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.774] | : . signalConditions() ... done
[08:08:29.775] | : result() for MulticoreFuture ... done
[08:08:29.775] | : result() for MulticoreFuture ...
[08:08:29.775] | : result() for MulticoreFuture ... done
[08:08:29.775] | : signalConditions() ...
[08:08:29.775] | : . include = ‘immediateCondition’
[08:08:29.775] | : . exclude = 
[08:08:29.775] | : . resignal = FALSE
[08:08:29.775] | : . Number of conditions: 6
[08:08:29.775] | : .  int 6
[08:08:29.776] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.776] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.776] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.776] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.776] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.777] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.777] | : signalConditions() ... done
[08:08:29.777] | : relay stdout ...
[08:08:29.777] | : relay stdout ... done
[08:08:29.777] | : check for misuse ...
[08:08:29.777] | : check for misuse ... done
[08:08:29.777] | value() for MulticoreFuture (<unnamed-96>) ... done
[08:08:29.777] | result() for MulticoreFuture ...
[08:08:29.778] | result() for MulticoreFuture ... done
[08:08:29.778] | signalConditions() ...
[08:08:29.778] | : include = ‘immediateCondition’
[08:08:29.778] | : exclude = 
[08:08:29.778] | : resignal = FALSE
[08:08:29.778] | : Number of conditions: 6
[08:08:29.778] | :  int 6
[08:08:29.779] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.779] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.779] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.779] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.779] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.779] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.779] | signalConditions() ... done
[08:08:29.780] | result() for MulticoreFuture ...
[08:08:29.780] | result() for MulticoreFuture ... done
[08:08:29.780] | signalConditions() ...
[08:08:29.780] | : include = ‘condition’
[08:08:29.780] | : exclude = ‘error’, ‘immediateCondition’
[08:08:29.780] | : resignal = TRUE
[08:08:29.780] | : Number of conditions: 6
[08:08:29.780] | :  int 6
[08:08:29.781] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.781] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.697] | : . ' , attachPackages() ...
[08:08:29.781] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.781] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.698] | : . ' , ; packages: [n=1] ‘future’
[08:08:29.781] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.781] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.698] | : . ' , attachPackages() ... done
[08:08:29.782] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.782] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.698] | : . ' , attachPackages() ...
[08:08:29.782] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.782] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.699] | : . ' , ; packages: [n=0] 
[08:08:29.782] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.782] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.699] | : . ' , attachPackages() ... done
[08:08:29.782] | signalConditions() ... done
[08:08:29.783] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:29.783] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:29.783] signalConditionsASAP(MulticoreFuture, pos=4) ... done
[08:08:29.783] value(<MulticoreFuture>, ...) ...
[08:08:29.783] value(<MulticoreFuture>, ...) ... done
[08:08:29.783] value() for MulticoreFuture (<unnamed-96>) ...
[08:08:29.783] | result() for MulticoreFuture ...
[08:08:29.783] | result() for MulticoreFuture ... done
[08:08:29.783] | result() for MulticoreFuture ...
[08:08:29.784] | result() for MulticoreFuture ... done
[08:08:29.784] | signalConditions() ...
[08:08:29.784] | : include = ‘immediateCondition’
[08:08:29.784] | : exclude = 
[08:08:29.784] | : resignal = FALSE
[08:08:29.784] | : Number of conditions: 6
[08:08:29.784] | :  int 6
[08:08:29.785] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.785] | : already signaled, skipping
[08:08:29.785] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.785] | : already signaled, skipping
[08:08:29.785] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.785] | : already signaled, skipping
[08:08:29.785] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.786] | : already signaled, skipping
[08:08:29.786] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.786] | : already signaled, skipping
[08:08:29.786] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.786] | : already signaled, skipping
[08:08:29.786] | signalConditions() ... done
[08:08:29.786] | check for misuse ...
[08:08:29.786] | check for misuse ... done
[08:08:29.786] value() for MulticoreFuture (<unnamed-96>) ... done
[08:08:29.787] value: <numeric>
[08:08:29.787] signalConditionsASAP(MulticoreFuture, pos=4) ...
[08:08:29.787] | nx: 6
[08:08:29.787] | relay: TRUE
[08:08:29.787] | stdout: TRUE
[08:08:29.787] | signal: TRUE
[08:08:29.787] | resignal: FALSE
[08:08:29.787] | force: TRUE
[08:08:29.787] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:29.788] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:29.788] | until=5
[08:08:29.788] | relaying element #5
[08:08:29.788] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:29.788] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:29.788] signalConditionsASAP(MulticoreFuture, pos=4) ... done
[08:08:29.788] resolve() for MulticoreFuture ...
[08:08:29.788] resolve() for MulticoreFuture ... done
[08:08:29.789] length: 2 (resolved future 4)

[08:08:29.789] checking value #5:
[08:08:29.789] 'obj' is NULL
[08:08:29.789] signalConditionsASAP(NULL, pos=5) ...
[08:08:29.789] | nx: 6
[08:08:29.789] | relay: TRUE
[08:08:29.789] | stdout: TRUE
[08:08:29.789] | signal: TRUE
[08:08:29.790] | resignal: FALSE
[08:08:29.790] | force: TRUE
[08:08:29.790] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:29.790] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:29.790] | until=6
[08:08:29.790] | relaying element #6
[08:08:29.790] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:29.790] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:29.790] signalConditionsASAP(NULL, pos=5) ... done
[08:08:29.791] signalConditionsASAP(NULL, pos=5) ...
[08:08:29.791] | nx: 6
[08:08:29.791] | relay: TRUE
[08:08:29.791] | stdout: TRUE
[08:08:29.791] | signal: TRUE
[08:08:29.791] | resignal: FALSE
[08:08:29.791] | force: TRUE
[08:08:29.791] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:29.791] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:29.792] | until=6
[08:08:29.792] | relaying element #6
[08:08:29.792] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:29.792] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:29.792] signalConditionsASAP(NULL, pos=5) ... done
[08:08:29.792] length: 1 (resolved future 5)

[08:08:29.792] checking value #6:
[08:08:29.793] 'obj' is atomic
[08:08:29.793] signalConditionsASAP(numeric, pos=6) ...
[08:08:29.793] | nx: 6
[08:08:29.793] | relay: TRUE
[08:08:29.793] | stdout: TRUE
[08:08:29.793] | signal: TRUE
[08:08:29.793] | resignal: FALSE
[08:08:29.793] | force: TRUE
[08:08:29.793] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:29.793] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:29.794] | until=6
[08:08:29.794] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:29.794] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:29.794] signalConditionsASAP(numeric, pos=6) ... done
[08:08:29.794] length: 0 (resolved future 6)

[08:08:29.794] Relaying remaining futures ...
[08:08:29.794] | signalConditionsASAP(NULL, pos=0) ...
[08:08:29.795] | : nx: 6
[08:08:29.795] | : relay: TRUE
[08:08:29.795] | : stdout: TRUE
[08:08:29.795] | : signal: TRUE
[08:08:29.795] | : resignal: FALSE
[08:08:29.795] | : force: TRUE
[08:08:29.795] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:29.795] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
 - flush all
[08:08:29.796] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:29.796] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:29.796] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:29.796] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 1 6
 - attr(*, "dimnames")=List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
Dimensions: c(2, 3)
[08:08:29.800] future(..., label = NULL) ...
[08:08:29.800] | lazy: FALSE
[08:08:29.800] | stdout: TRUE
[08:08:29.800] | conditions: [n=1] ‘condition’
[08:08:29.800] | gc: FALSE
[08:08:29.800] | earlySignal: FALSE
[08:08:29.800] | getGlobalsAndPackages() ...
[08:08:29.800] | : Searching for globals ...
[08:08:29.802] | : . globals found: [0] 
[08:08:29.802] | : Searching for globals ... done
[08:08:29.802] | : globals: [0] <none>
[08:08:29.802] | : packages: [0] <none>
[08:08:29.802] | getGlobalsAndPackages() ... done
[08:08:29.803] | run() for ‘Future’ (<unnamed-97>) ...
[08:08:29.803] | : state: ‘created’
[08:08:29.803] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.803] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.803] | : Using MulticoreFutureBackend ...
[08:08:29.803] | : . Number of futures since start: 6 (6 created, 6 launched, 8 finished)
[08:08:29.803] | : . Launching futures ...
[08:08:29.803] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:29.804] | : . ' , getFutureData() ...
[08:08:29.804] | : . ' , ; getFutureCore() ...
[08:08:29.804] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:29.804] | : . ' , ; getFutureCore() ... done
[08:08:29.804] | : . ' , ; getFutureCapture() ...
[08:08:29.804] | : . ' , ; getFutureCapture() ... done
[08:08:29.804] | : . ' , ; getFutureContext() ...
[08:08:29.804] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.806] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:29.807] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.807] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:29.807] | : . ' , ; getFutureContext() ... done
[08:08:29.807] | : . ' , getFutureData() ... done
[08:08:29.807] | : . ' , requestCore(..., workers = 2) ...
[08:08:29.807] | : . ' , requestCore(..., workers = 2) ... done
[08:08:29.810] | : . ' , MulticoreFuture started
[08:08:29.811] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:29.811] | : . Launching futures ... done
[08:08:29.811] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:29.811] | : Using MulticoreFutureBackend ... done
[08:08:29.812] | run() for ‘Future’ (<unnamed-97>) ... done
[08:08:29.812] future(..., label = NULL) ... done
[08:08:29.812] future(..., label = NULL) ...
[08:08:29.812] | lazy: FALSE
[08:08:29.812] | stdout: TRUE
[08:08:29.813] | conditions: [n=1] ‘condition’
[08:08:29.813] | gc: FALSE
[08:08:29.813] | earlySignal: FALSE
[08:08:29.813] | getGlobalsAndPackages() ...
[08:08:29.813] | : Searching for globals ...
[08:08:29.814] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.814] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:29.814] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.815] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:29.815] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:29.815] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:29.815] | : . ' , ; ` | New stack:
[08:08:29.816] | : . globals found: [0] 
[08:08:29.816] | : Searching for globals ... done
[08:08:29.816] | : globals: [0] <none>
[08:08:29.816] | : packages: [0] <none>
[08:08:29.816] | getGlobalsAndPackages() ... done
[08:08:29.817] | run() for ‘Future’ (<unnamed-98>) ...
[08:08:29.817] | : state: ‘created’
[08:08:29.817] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.818] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.818] | : Using MulticoreFutureBackend ...
[08:08:29.818] | : . Number of futures since start: 7 (7 created, 7 launched, 8 finished)
[08:08:29.818] | : . Launching futures ...
[08:08:29.818] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:29.818] | : . ' , getFutureData() ...
[08:08:29.819] | : . ' , ; getFutureCore() ...
[08:08:29.819] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:29.819] | : . ' , ; getFutureCore() ... done
[08:08:29.819] | : . ' , ; getFutureCapture() ...
[08:08:29.815] | : . ' , ; ` | List of 1
[08:08:29.815] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.815] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.815] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:29.815] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.815] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.815] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.815] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.815] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.819] | : . ' , ; getFutureCapture() ... done
[08:08:29.819] | : . ' , ; ` | Old stack:
[08:08:29.819] | : . ' , ; getFutureContext() ...
[08:08:29.820] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.820] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:29.820] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.820] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:29.820] | : . ' , ; getFutureContext() ... done
[08:08:29.821] | : . ' , getFutureData() ... done
[08:08:29.821] | : . ' , requestCore(..., workers = 2) ...
[08:08:29.821] | : . ' , requestCore(..., workers = 2) ... done
[08:08:29.820] | : . ' , ; ` | List of 1
[08:08:29.820] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.820] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.820] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.820] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:29.820] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.820] | : . ' , ; ` |     ...)  
[08:08:29.820] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.820] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.820] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:29.820] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.820] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.820] | : . ' , ; ` |     ...)  
[08:08:29.820] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.820] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.824] | : . ' , MulticoreFuture started
[08:08:29.824] | : . ' , ; ` | Not identical
[08:08:29.825] | : . ' , ; ` | all.equal() for future ...
[08:08:29.824] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:29.825] | : . Launching futures ... done
[08:08:29.825] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:29.825] | : Using MulticoreFutureBackend ... done
[08:08:29.826] | run() for ‘Future’ (<unnamed-98>) ... done
[08:08:29.826] future(..., label = NULL) ... done
[08:08:29.827] future(..., label = NULL) ...
[08:08:29.828] | lazy: FALSE
[08:08:29.828] | stdout: TRUE
[08:08:29.828] | conditions: [n=1] ‘condition’
[08:08:29.828] | gc: FALSE
[08:08:29.828] | earlySignal: FALSE
[08:08:29.828] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.829] | getGlobalsAndPackages() ...
[08:08:29.829] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:29.829] | : Searching for globals ...
[08:08:29.829] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.829] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:29.830] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:29.830] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:29.830] | : . ' , ; ` | New stack:
[08:08:29.825] | : . ' , ; ` | : List of 2
[08:08:29.825] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.825] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.825] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:29.825] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.825] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.825] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.825] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.825] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.825] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.825] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.825] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:29.825] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.825] | : . ' , ; ` | :     ...)  
[08:08:29.825] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.825] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.825] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:29.825] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.825] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.825] | : . ' , ; ` | :     ...)  
[08:08:29.825] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.833] | : . ' , ; ` | : Formals differ
[08:08:29.833] | : . ' , ; ` | all.equal() for future ... done
[08:08:29.833] | : . ' , ; ` | Future strategies differ at level 1
[08:08:29.833] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:29.833] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:29.834] | : . ' , ; ` List of future strategies:
[08:08:29.834] | : . ' , ; ` 1. sequential:
[08:08:29.834] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:29.834] | : . ' , ; `    - tweaked: FALSE
[08:08:29.834] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.831] | : . ' , ; ` | List of 1
[08:08:29.831] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.831] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.831] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:29.831] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.831] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.831] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.831] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.831] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.837] | : . ' , ; ` | Old stack:
[08:08:29.837] | : . globals found: [1] ‘{’
[08:08:29.837] | : Searching for globals ... done
[08:08:29.837] | : Resolving globals: FALSE
[08:08:29.838] | : Search for packages associated with the globals ...
[08:08:29.834] | : . ' , ; ` List of 1
[08:08:29.834] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.834] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.834] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:29.834] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.834] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.834] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.834] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.834] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.838] | : . Packages associated with globals: [1] ‘base’
[08:08:29.838] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:29.839] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:29.839] | : . Packages: [1] ‘base’
[08:08:29.839] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.839] | : Search for packages associated with the globals ... done
[08:08:29.839] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:29.839] | : Packages after dropping 'base': [0] 
[08:08:29.839] | : globals: [0] 
[08:08:29.840] | : packages: [0] 
[08:08:29.840] | getGlobalsAndPackages() ... done
[08:08:29.840] | run() for ‘Future’ (<unnamed-99>) ...
[08:08:29.841] | : state: ‘created’
[08:08:29.841] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.841] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.841] | : Using MulticoreFutureBackend ...
[08:08:29.842] | : . Number of futures since start: 8 (8 created, 8 launched, 8 finished)
[08:08:29.842] | : . Launching futures ...
[08:08:29.839] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.839] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.839] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:29.839] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.839] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.839] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.839] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.842] | : . ' , ; ` | : init: TRUE
[08:08:29.842] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:29.842] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:29.842] | : . ' , getFutureData() ...
[08:08:29.842] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:29.843] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:29.843] | : . ' , ; getFutureCore() ...
[08:08:29.843] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:29.843] | : . ' , ; ` | : .  list()
[08:08:29.843] | : . ' , ; getFutureCore() ... done
[08:08:29.843] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:29.843] | : . ' , ; getFutureCapture() ...
[08:08:29.843] | : . ' , ; ` | : .  list()
[08:08:29.843] | : . ' , ; getFutureCapture() ... done
[08:08:29.844] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:29.844] | : . ' , ; getFutureContext() ...
[08:08:29.844] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.837] | : . ' , ; ` | List of 1
[08:08:29.837] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.837] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.837] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.837] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:29.837] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.837] | : . ' , ; ` |     ...)  
[08:08:29.837] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.837] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.837] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:29.837] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.837] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.837] | : . ' , ; ` |     ...)  
[08:08:29.837] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.837] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.844] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:29.844] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.844] | : . ' , ; ` | Not identical
[08:08:29.845] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:29.845] | : . ' , ; ` | all.equal() for future ...
[08:08:29.845] | : . ' , ; getFutureContext() ... done
[08:08:29.844] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:29.844] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:29.844] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:29.845] | : . ' , getFutureData() ... done
[08:08:29.845] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:29.845] | : . ' , requestCore(..., workers = 2) ...
[08:08:29.846] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:29.846] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:29.846] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.846] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:29.846] | : . ' , ; Poll #1 (0): usedCores() = 2, workers = 2
[08:08:29.846] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:29.847] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:29.850] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:29.850] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:29.850] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:29.851] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:29.851] | : . ' , ; ` | : New stack:
[08:08:29.845] | : . ' , ; ` | : List of 2
[08:08:29.845] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.845] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.845] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:29.845] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.845] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.845] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.845] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.845] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.845] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.845] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.845] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:29.845] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.845] | : . ' , ; ` | :     ...)  
[08:08:29.845] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.845] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.845] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:29.845] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.845] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.845] | : . ' , ; ` | :     ...)  
[08:08:29.845] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.854] | : . ' , ; ` | : Formals differ
[08:08:29.854] | : . ' , ; ` | all.equal() for future ... done
[08:08:29.854] | : . ' , ; ` | Future strategies differ at level 1
[08:08:29.854] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:29.854] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:29.854] | : . ' , ; ` List of future strategies:
[08:08:29.854] | : . ' , ; ` 1. sequential:
[08:08:29.854] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:29.854] | : . ' , ; `    - tweaked: FALSE
[08:08:29.854] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.851] | : . ' , ; ` | : List of 1
[08:08:29.851] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.851] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.851] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.851] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:29.851] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.851] | : . ' , ; ` | :     ...)  
[08:08:29.851] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.851] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.851] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:29.851] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.851] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.851] | : . ' , ; ` | :     ...)  
[08:08:29.851] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.851] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.856] | : . ' , ; ` | : Old stack:
[08:08:29.855] | : . ' , ; ` List of 1
[08:08:29.855] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.855] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.855] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:29.855] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.855] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.855] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.855] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.855] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.859] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:29.859] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:29.860] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.860] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:29.856] | : . ' , ; ` | : List of 1
[08:08:29.856] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.856] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.856] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:29.856] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.856] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.856] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.856] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.856] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564301521e78> 
[08:08:29.856] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.856] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.856] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.860] | : . ' , ; ` | : Not identical
[08:08:29.860] | : . ' , ; ` | : all.equal() for future ...
[08:08:29.860] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.860] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.860] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:29.860] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.860] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.860] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.860] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.863] | : . ' , ; ` | : init: TRUE
[08:08:29.863] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:29.864] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:29.864] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:29.864] | : . ' , ; ` | : .  list()
[08:08:29.864] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:29.864] | : . ' , ; ` | : .  list()
[08:08:29.865] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:29.865] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:29.865] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:29.865] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:29.867] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:29.867] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:29.867] | : . ' , ; readImmediateCondition() ...
[08:08:29.867] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:29.867] | : . ' , ; ` Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:29.867] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.867] | : . ' , ; ` Number of RDS files: 0
[08:08:29.867] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:29.868] | : . ' , ; ` Returned conditions set:
[08:08:29.868] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:29.860] | : . ' , ; ` | : . List of 2
[08:08:29.860] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.860] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.860] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.860] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:29.860] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.860] | : . ' , ; ` | : .     ...)  
[08:08:29.860] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.860] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.860] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:29.860] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.860] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.860] | : . ' , ; ` | : .     ...)  
[08:08:29.860] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.860] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.860] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.860] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:29.860] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.860] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.860] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.860] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.860] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564301521e78> 
[08:08:29.860] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.860] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.868] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:29.868] | : . ' , ; `  list()
[08:08:29.868] | : . ' , ; readImmediateCondition() ... done
[08:08:29.869] | : . ' , ; ` | : . Formals differ
[08:08:29.869] | : . ' , ; ` | : all.equal() for future ... done
[08:08:29.869] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:29.869] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:29.869] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:29.869] | : . ' , ; ` | List of future strategies:
[08:08:29.869] | : . ' , ; ` | 1. multicore:
[08:08:29.869] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:29.869] | : . ' , ; ` |    - tweaked: FALSE
[08:08:29.869] | : . ' , ; ` |    - call: plan(strategy)
[08:08:29.871] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:29.871] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:29.871] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:29.872] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:29.872] | : . ' , ; ` | : New stack:
[08:08:29.870] | : . ' , ; ` | List of 1
[08:08:29.870] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.870] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.870] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.870] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:29.870] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.870] | : . ' , ; ` |     ...)  
[08:08:29.870] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.870] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.870] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:29.870] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.870] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.870] | : . ' , ; ` |     ...)  
[08:08:29.870] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.870] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.875] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:29.875] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:29.875] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.875] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.876] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:29.876] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:29.876] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:29.876] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:29.872] | : . ' , ; ` | : List of 1
[08:08:29.872] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.872] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.872] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.872] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:29.872] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.872] | : . ' , ; ` | :     ...)  
[08:08:29.872] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.872] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.872] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:29.872] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.872] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.872] | : . ' , ; ` | :     ...)  
[08:08:29.872] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.872] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.877] | : . ' , ; ` | : Old stack:
[08:08:29.879] | : . ' , ; readImmediateCondition() ...
[08:08:29.879] | : . ' , ; ` Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:29.879] | : . ' , ; ` Number of RDS files: 0
[08:08:29.880] | : . ' , ; ` Returned conditions set:
[08:08:29.880] | : . ' , ; `  list()
[08:08:29.880] | : . ' , ; readImmediateCondition() ... done
[08:08:29.881] | : . ' , ; Poll #2 (0.03 secs): usedCores() = 2, workers = 2
[08:08:29.877] | : . ' , ; ` | : List of 1
[08:08:29.877] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.877] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.877] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:29.877] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.877] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.877] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.877] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.877] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56430248a890> 
[08:08:29.877] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.877] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.877] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.882] | : . ' , ; ` | : Not identical
[08:08:29.883] | : . ' , ; ` | : all.equal() for future ...
[08:08:29.883] | : . ' , ; ` | : . List of 2
[08:08:29.883] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.883] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.883] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.883] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:29.883] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.883] | : . ' , ; ` | : .     ...)  
[08:08:29.883] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.883] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.883] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:29.883] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.883] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.883] | : . ' , ; ` | : .     ...)  
[08:08:29.883] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.883] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.883] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.883] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:29.883] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.883] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.883] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.883] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.883] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56430248a890> 
[08:08:29.883] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.883] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.891] | : . ' , ; ` | : . Formals differ
[08:08:29.891] | : . ' , ; ` | : all.equal() for future ... done
[08:08:29.892] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:29.892] | : . ' , ; readImmediateCondition() ...
[08:08:29.892] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:29.892] | : . ' , ; ` Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:29.892] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:29.892] | : . ' , ; ` Number of RDS files: 0
[08:08:29.892] | : . ' , ; ` Returned conditions set:
[08:08:29.892] | : . ' , ; ` | List of future strategies:
[08:08:29.892] | : . ' , ; ` | 1. multicore:
[08:08:29.892] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:29.892] | : . ' , ; ` |    - tweaked: FALSE
[08:08:29.892] | : . ' , ; ` |    - call: plan(strategy)
[08:08:29.893] | : . ' , ; `  list()
[08:08:29.893] | : . ' , ; readImmediateCondition() ... done
[08:08:29.893] | : . ' , ; value() for MulticoreFuture (<unnamed-97>) ...
[08:08:29.894] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:29.895] | : . ' , ; ` | readImmediateCondition() ...
[08:08:29.895] | : . ' , ; ` | : Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:29.895] | : . ' , ; ` | : Number of RDS files: 0
[08:08:29.896] | : . ' , ; ` | : Returned conditions set:
[08:08:29.896] | : . ' , ; ` | :  list()
[08:08:29.896] | : . ' , ; ` | readImmediateCondition() ... done
[08:08:29.897] | : . ' , ; ` | result() for MulticoreFuture ...
[08:08:29.897] | : . ' , ; ` | result() for MulticoreFuture ... done
[08:08:29.897] | : . ' , ; ` | signalConditions() ...
[08:08:29.897] | : . ' , ; ` | : include = ‘immediateCondition’
[08:08:29.898] | : . ' , ; ` | : exclude = 
[08:08:29.898] | : . ' , ; ` | : resignal = FALSE
[08:08:29.898] | : . ' , ; ` | : Number of conditions: 6
[08:08:29.898] | : . ' , ; ` | :  int 6
[08:08:29.899] | : . ' , ; ` | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.899] | : . ' , ; ` | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.899] | : . ' , ; ` | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.900] | : . ' , ; ` | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.900] | : . ' , ; ` | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.900] | : . ' , ; ` | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.900] | : . ' , ; ` | signalConditions() ... done
[08:08:29.893] | : . ' , ; ` | List of 1
[08:08:29.893] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.893] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.893] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.893] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:29.893] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.893] | : . ' , ; ` |     ...)  
[08:08:29.893] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.893] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.893] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:29.893] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.893] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.893] | : . ' , ; ` |     ...)  
[08:08:29.893] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.893] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.901] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:29.901] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:29.901] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:29.901] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:29.901] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:29.901] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.901] | : . ' , ; ` signalConditions() ...
[08:08:29.901] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.901] | : . ' , ; ` | include = ‘immediateCondition’
[08:08:29.902] | : . ' , ; ` | exclude = 
[08:08:29.902] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:29.902] | : . ' , ; ` | resignal = FALSE
[08:08:29.902] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:29.902] | : . ' , ; ` | Number of conditions: 6
[08:08:29.902] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:29.902] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:29.902] | : . ' , ; ` |  int 6
[08:08:29.903] | : . ' , ; ` | Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.903] | : . ' , ; ` | Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.903] | : . ' , ; ` | Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.903] | : . ' , ; ` | Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.904] | : . ' , ; ` | Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.904] | : . ' , ; ` | Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.904] | : . ' , ; ` signalConditions() ... done
[08:08:29.904] | : . ' , ; ` check for misuse ...
[08:08:29.904] | : . ' , ; ` check for misuse ... done
[08:08:29.904] | : . ' , ; value() for MulticoreFuture (<unnamed-97>) ... done
[08:08:29.905] | : . ' , requestCore(..., workers = 2) ... done
[08:08:29.907] | : . ' , MulticoreFuture started
[08:08:29.908] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:29.908] | : . Launching futures ... done
[08:08:29.908] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:29.909] | : Using MulticoreFutureBackend ... done
[08:08:29.909] | run() for ‘Future’ (<unnamed-99>) ... done
[08:08:29.909] future(..., label = NULL) ... done
Classes 'listenv', 'environment' <environment: 0x564303b21fd8> 
[08:08:29.911] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.911] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:29.911] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.912] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
Classes 'listenv', 'environment' <environment: 0x5642ffe7a6c8> 
 - attr(*, "dim.")=[08:08:29.912] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:29.912] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:29.912] | : . ' , ; ` | New stack:
 int [1:2] 2 3
 - attr(*, "dimnames.")=List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
[08:08:29.914] resolved() for listenv ...
[08:08:29.916] | resolved() for matrix ...
[08:08:29.916] | : Number of elements: 6
[08:08:29.916] | : Number of futures: 6
[08:08:29.913] | : . ' , ; ` | List of 1
[08:08:29.913] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.913] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.913] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:29.913] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.913] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.913] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.913] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.913] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.917] | : . ' , ; ` | Old stack:
[08:08:29.917] | : readImmediateCondition() ...
[08:08:29.917] | : . Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:29.917] | : . Number of RDS files: 0
[08:08:29.917] | : . Returned conditions set:
[08:08:29.918] | : .  list()
[08:08:29.918] | : readImmediateCondition() ... done
[08:08:29.917] | : . ' , ; ` | List of 1
[08:08:29.917] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.917] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.917] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.917] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:29.917] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.917] | : . ' , ; ` |     ...)  
[08:08:29.917] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.917] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.917] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:29.917] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.917] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.917] | : . ' , ; ` |     ...)  
[08:08:29.917] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.917] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.922] | : . ' , ; ` | Not identical
[08:08:29.922] | : . ' , ; ` | all.equal() for future ...
[08:08:29.928] | : readImmediateCondition() ...
[08:08:29.928] | : . Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:29.929] | : . Number of RDS files: 0
[08:08:29.929] | : . Returned conditions set:
[08:08:29.929] | : .  list()
[08:08:29.929] | : readImmediateCondition() ... done
[08:08:29.922] | : . ' , ; ` | : List of 2
[08:08:29.922] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.922] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.922] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:29.922] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.922] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.922] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.922] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.922] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.922] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.922] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.922] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:29.922] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.922] | : . ' , ; ` | :     ...)  
[08:08:29.922] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.922] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.922] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:29.922] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.922] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.922] | : . ' , ; ` | :     ...)  
[08:08:29.922] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.929] | resolved() for matrix ... done
[08:08:29.930] resolved() for listenv ... done
 logi [1:2, 1:3] TRUE TRUE TRUE FALSE TRUE TRUE
 - attr(*, "dimnames")=[08:08:29.930] | : . ' , ; ` | : Formals differ
List of 2
  ..$ :[08:08:29.930] | : . ' , ; ` | all.equal() for future ... done
[08:08:29.930] | : . ' , ; ` | Future strategies differ at level 1
[08:08:29.931] | : . ' , ; ` all.equal() for FutureStrategyList ... done
 chr [1:2] "a" "b"
  ..$ :[08:08:29.931] | : . ' , ; ` plan(): Setting new future backend stack:
 chr [1:3] "a" "b" "c"
 - attr(*, "names")= chr [1:6] "a" "b" "c" "d" ...
[08:08:29.931] | : . ' , ; ` List of future strategies:
[08:08:29.931] | : . ' , ; ` 1. sequential:
[08:08:29.931] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:29.931] | : . ' , ; `    - tweaked: FALSE
[08:08:29.931] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.932] value() for listenv ...
[08:08:29.932] | recursive: 0
[08:08:29.932] | reduce: FALSE
[08:08:29.933] | length: 6
[08:08:29.933] | elements: ‘a’, ‘b’, ‘c’, ‘d’, ‘’, ‘’
[08:08:29.933] | Number of remaining objects: 6
[08:08:29.933] | checking value #1:
[08:08:29.934] | 'obj' is atomic
[08:08:29.934] | signalConditionsASAP(numeric, pos=1) ...
[08:08:29.934] | : nx: 6
[08:08:29.934] | : relay: TRUE
[08:08:29.934] | : stdout: TRUE
[08:08:29.934] | : signal: TRUE
[08:08:29.934] | : resignal: FALSE
[08:08:29.934] | : force: TRUE
[08:08:29.935] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:29.935] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:29.935] | : until=2
[08:08:29.935] | : relaying element #2
[08:08:29.935] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:29.932] | : . ' , ; ` List of 1
[08:08:29.932] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.932] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.932] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:29.932] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.932] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.932] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.932] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.932] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.935] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:29.935] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:29.935] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:29.935] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:29.936] | length: 5 (resolved future 1)
[08:08:29.936] value() for listenv ... done
[08:08:29.936] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.936] checking value #2:
[08:08:29.936] 'obj' is MulticoreFuture
[08:08:29.936] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:29.936] MulticoreFuture #2
[08:08:29.936] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:29.936] | nx: 6
[08:08:29.936] | relay: TRUE
[08:08:29.936] | stdout: TRUE
[08:08:29.937] | signal: TRUE
[08:08:29.937] | resignal: FALSE
[08:08:29.937] | force: TRUE
[08:08:29.937] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:29.937] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:29.937] | until=2
[08:08:29.937] | relaying element #2
[08:08:29.937] | value() for MulticoreFuture (<unnamed-97>) ...
[08:08:29.938] | : result() for MulticoreFuture ...
[08:08:29.938] | : result() for MulticoreFuture ... done
[08:08:29.938] | : result() for MulticoreFuture ...
[08:08:29.938] | : result() for MulticoreFuture ... done
[08:08:29.938] | : signalConditions() ...
[08:08:29.938] | : . include = ‘immediateCondition’
[08:08:29.938] | : . exclude = 
[08:08:29.938] | : . resignal = FALSE
[08:08:29.939] | : . Number of conditions: 6
[08:08:29.939] | : .  int 6
[08:08:29.936] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.936] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.936] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:29.936] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.936] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.936] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.936] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.939] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.939] | : . ' , ; ` | : init: TRUE
[08:08:29.939] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.939] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:29.940] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.940] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.940] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:29.940] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.940] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:29.940] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.940] | : signalConditions() ... done
[08:08:29.940] | : relay stdout ...
[08:08:29.940] | : . ' , ; ` | : .  list()
[08:08:29.940] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:29.940] | : relay stdout ... done
[08:08:29.941] | : check for misuse ...
[08:08:29.941] | : check for misuse ... done
[08:08:29.941] | : . ' , ; ` | : .  list()
[08:08:29.941] | value() for MulticoreFuture (<unnamed-97>) ... done
[08:08:29.941] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:29.941] | result() for MulticoreFuture ...
[08:08:29.941] | result() for MulticoreFuture ... done
[08:08:29.941] | signalConditions() ...
[08:08:29.941] | : include = ‘immediateCondition’
[08:08:29.941] | : exclude = 
[08:08:29.942] | : resignal = FALSE
[08:08:29.942] | : Number of conditions: 6
[08:08:29.942] | :  int 6
[08:08:29.942] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.941] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:29.941] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:29.941] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:29.942] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.943] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.943] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.943] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:29.943] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.943] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:29.943] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.943] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:29.943] | signalConditions() ... done
[08:08:29.943] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.943] | result() for MulticoreFuture ...
[08:08:29.943] | result() for MulticoreFuture ... done
[08:08:29.943] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:29.943] | signalConditions() ...
[08:08:29.944] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:29.944] | : include = ‘condition’
[08:08:29.944] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:29.944] | : exclude = ‘error’, ‘immediateCondition’
[08:08:29.944] | : resignal = TRUE
[08:08:29.944] | : Number of conditions: 6
[08:08:29.944] | :  int 6
[08:08:29.945] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.945] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.811] | : . ' , attachPackages() ...
[08:08:29.945] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.945] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.812] | : . ' , ; packages: [n=1] ‘future’
[08:08:29.945] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.945] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.812] | : . ' , attachPackages() ... done
[08:08:29.945] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.946] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.812] | : . ' , attachPackages() ...
[08:08:29.946] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.946] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.813] | : . ' , ; packages: [n=0] 
[08:08:29.946] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.946] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.813] | : . ' , attachPackages() ... done
[08:08:29.946] | signalConditions() ... done
[08:08:29.946] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:29.947] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:29.947] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:29.947] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:29.947] value(<MulticoreFuture>, ...) ...
[08:08:29.947] value(<MulticoreFuture>, ...) ... done
[08:08:29.947] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:29.947] value() for MulticoreFuture (<unnamed-97>) ...
[08:08:29.947] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:29.947] | result() for MulticoreFuture ...
[08:08:29.947] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:29.947] | result() for MulticoreFuture ... done
[08:08:29.947] | : . ' , ; ` | : New stack:
[08:08:29.947] | result() for MulticoreFuture ...
[08:08:29.948] | result() for MulticoreFuture ... done
[08:08:29.948] | signalConditions() ...
[08:08:29.948] | : include = ‘immediateCondition’
[08:08:29.948] | : exclude = 
[08:08:29.948] | : resignal = FALSE
[08:08:29.948] | : Number of conditions: 6
[08:08:29.948] | :  int 6
[08:08:29.949] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.949] | : already signaled, skipping
[08:08:29.949] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.949] | : already signaled, skipping
[08:08:29.949] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.949] | : already signaled, skipping
[08:08:29.950] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.950] | : already signaled, skipping
[08:08:29.950] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.950] | : already signaled, skipping
[08:08:29.950] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.950] | : already signaled, skipping
[08:08:29.950] | signalConditions() ... done
[08:08:29.950] | check for misuse ...
[08:08:29.951] | check for misuse ... done
[08:08:29.951] value() for MulticoreFuture (<unnamed-97>) ... done
[08:08:29.951] value: <numeric>
[08:08:29.951] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:29.951] | nx: 6
[08:08:29.951] | relay: TRUE
[08:08:29.951] | stdout: TRUE
[08:08:29.951] | signal: TRUE
[08:08:29.952] | resignal: FALSE
[08:08:29.952] | force: TRUE
[08:08:29.952] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:29.952] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:29.952] | until=3
[08:08:29.948] | : . ' , ; ` | : List of 1
[08:08:29.948] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.948] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.948] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.948] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:29.948] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.948] | : . ' , ; ` | :     ...)  
[08:08:29.948] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.948] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.948] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:29.948] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.948] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.948] | : . ' , ; ` | :     ...)  
[08:08:29.948] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.948] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.952] | relaying element #3
[08:08:29.952] | : . ' , ; ` | : Old stack:
[08:08:29.952] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:29.952] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:29.953] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:29.953] resolve() for MulticoreFuture ...
[08:08:29.953] resolve() for MulticoreFuture ... done
[08:08:29.953] length: 4 (resolved future 2)

[08:08:29.953] checking value #3:
[08:08:29.953] 'obj' is MulticoreFuture
[08:08:29.953] readImmediateCondition() ...
[08:08:29.954] | Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:29.954] | Number of RDS files: 0
[08:08:29.954] | Returned conditions set:
[08:08:29.954] |  list()
[08:08:29.954] readImmediateCondition() ... done
[08:08:29.954] MulticoreFuture #3
[08:08:29.955] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:29.955] | nx: 6
[08:08:29.955] | relay: TRUE
[08:08:29.955] | stdout: TRUE
[08:08:29.955] | signal: TRUE
[08:08:29.955] | resignal: FALSE
[08:08:29.955] | force: TRUE
[08:08:29.955] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:29.956] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:29.956] | until=3
[08:08:29.956] | relaying element #3
[08:08:29.956] | value() for MulticoreFuture (<unnamed-98>) ...
[08:08:29.956] | : result() for MulticoreFuture ...
[08:08:29.952] | : . ' , ; ` | : List of 1
[08:08:29.952] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.952] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.952] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:29.952] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.952] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.952] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.952] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.952] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303acb538> 
[08:08:29.952] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.952] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.952] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.957] | : . readImmediateCondition() ...
[08:08:29.957] | : . ' , ; ` | : Not identical
[08:08:29.957] | : . ' Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:29.957] | : . ' , ; ` | : all.equal() for future ...
[08:08:29.957] | : . ' Number of RDS files: 0
[08:08:29.958] | : . ' Returned conditions set:
[08:08:29.958] | : . '  list()
[08:08:29.958] | : . readImmediateCondition() ... done
[08:08:29.959] | : . result() for MulticoreFuture ...
[08:08:29.959] | : . result() for MulticoreFuture ... done
[08:08:29.959] | : . signalConditions() ...
[08:08:29.959] | : . ' include = ‘immediateCondition’
[08:08:29.960] | : . ' exclude = 
[08:08:29.960] | : . ' resignal = FALSE
[08:08:29.960] | : . ' Number of conditions: 6
[08:08:29.960] | : . '  int 6
[08:08:29.961] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.961] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.961] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.961] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.962] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.962] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.962] | : . signalConditions() ... done
[08:08:29.962] | : result() for MulticoreFuture ... done
[08:08:29.962] | : result() for MulticoreFuture ...
[08:08:29.963] | : result() for MulticoreFuture ... done
[08:08:29.963] | : signalConditions() ...
[08:08:29.963] | : . include = ‘immediateCondition’
[08:08:29.963] | : . exclude = 
[08:08:29.963] | : . resignal = FALSE
[08:08:29.964] | : . Number of conditions: 6
[08:08:29.964] | : .  int 6
[08:08:29.964] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.965] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.965] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.965] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.957] | : . ' , ; ` | : . List of 2
[08:08:29.957] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.957] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.957] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.957] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:29.957] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.957] | : . ' , ; ` | : .     ...)  
[08:08:29.957] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.957] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.957] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:29.957] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.957] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.957] | : . ' , ; ` | : .     ...)  
[08:08:29.957] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.957] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:29.957] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:29.957] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:29.957] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.957] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.957] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.957] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:29.957] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303acb538> 
[08:08:29.957] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:29.957] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:29.965] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.965] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.965] | : signalConditions() ... done
[08:08:29.966] | : relay stdout ...
[08:08:29.966] | : relay stdout ... done
[08:08:29.966] | : . ' , ; ` | : . Formals differ
[08:08:29.966] | : check for misuse ...
[08:08:29.966] | : . ' , ; ` | : all.equal() for future ... done
[08:08:29.966] | : check for misuse ... done
[08:08:29.966] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:29.966] | value() for MulticoreFuture (<unnamed-98>) ... done
[08:08:29.966] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:29.966] | result() for MulticoreFuture ...
[08:08:29.966] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:29.966] | result() for MulticoreFuture ... done
[08:08:29.967] | signalConditions() ...
[08:08:29.967] | : include = ‘immediateCondition’
[08:08:29.967] | : exclude = 
[08:08:29.966] | : . ' , ; ` | List of future strategies:
[08:08:29.966] | : . ' , ; ` | 1. multicore:
[08:08:29.966] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:29.966] | : . ' , ; ` |    - tweaked: FALSE
[08:08:29.966] | : . ' , ; ` |    - call: plan(strategy)
[08:08:29.967] | : resignal = FALSE
[08:08:29.967] | : Number of conditions: 6
[08:08:29.967] | :  int 6
[08:08:29.968] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.968] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.968] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.968] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.968] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.968] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.968] | signalConditions() ... done
[08:08:29.969] | result() for MulticoreFuture ...
[08:08:29.969] | result() for MulticoreFuture ... done
[08:08:29.969] | signalConditions() ...
[08:08:29.969] | : include = ‘condition’
[08:08:29.969] | : exclude = ‘error’, ‘immediateCondition’
[08:08:29.969] | : resignal = TRUE
[08:08:29.969] | : Number of conditions: 6
[08:08:29.969] | :  int 6
[08:08:29.970] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.970] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.825] | : . ' , attachPackages() ...
[08:08:29.970] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.970] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.826] | : . ' , ; packages: [n=1] ‘future’
[08:08:29.971] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.971] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.826] | : . ' , attachPackages() ... done
[08:08:29.971] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.971] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.827] | : . ' , attachPackages() ...
[08:08:29.971] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.971] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.827] | : . ' , ; packages: [n=0] 
[08:08:29.967] | : . ' , ; ` | List of 1
[08:08:29.967] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:29.967] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:29.967] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:29.967] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:29.967] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.967] | : . ' , ; ` |     ...)  
[08:08:29.967] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.967] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.967] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:29.967] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:29.967] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:29.967] | : . ' , ; ` |     ...)  
[08:08:29.967] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:29.967] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:29.972] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.972] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.972] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:29.827] | : . ' , attachPackages() ... done
[08:08:29.972] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:29.972] | signalConditions() ... done
[08:08:29.972] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:29.972] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:29.972] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:29.972] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:29.972] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:29.972] value(<MulticoreFuture>, ...) ...
[08:08:29.972] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:29.972] value(<MulticoreFuture>, ...) ... done
[08:08:29.973] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:29.973] value() for MulticoreFuture (<unnamed-98>) ...
[08:08:29.973] | result() for MulticoreFuture ...
[08:08:29.973] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:29.973] | result() for MulticoreFuture ... done
[08:08:29.973] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:29.973] | result() for MulticoreFuture ...
[08:08:29.973] | result() for MulticoreFuture ... done
[08:08:29.973] | signalConditions() ...
[08:08:29.973] | : include = ‘immediateCondition’
[08:08:29.973] | : exclude = 
[08:08:29.974] | : resignal = FALSE
[08:08:29.974] | : Number of conditions: 6
[08:08:29.974] | :  int 6
[08:08:29.974] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.974] | : already signaled, skipping
[08:08:29.975] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.975] | : already signaled, skipping
[08:08:29.975] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.975] | : already signaled, skipping
[08:08:29.975] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.975] | : already signaled, skipping
[08:08:29.975] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.975] | : already signaled, skipping
[08:08:29.976] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.976] | : already signaled, skipping
[08:08:29.976] | signalConditions() ... done
[08:08:29.976] | check for misuse ...
[08:08:29.976] | check for misuse ... done
[08:08:29.976] value() for MulticoreFuture (<unnamed-98>) ... done
[08:08:29.976] value: <NULL>
[08:08:29.976] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:29.977] | nx: 6
[08:08:29.977] | relay: TRUE
[08:08:29.977] | stdout: TRUE
[08:08:29.977] | signal: TRUE
[08:08:29.977] | resignal: FALSE
[08:08:29.977] | force: TRUE
[08:08:29.977] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:29.977] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:29.978] | until=4
[08:08:29.978] | relaying element #4
[08:08:29.978] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:29.978] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:29.978] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:29.978] resolve() for MulticoreFuture ...
[08:08:29.978] resolve() for MulticoreFuture ... done
[08:08:29.978] length: 3 (resolved future 3)

[08:08:29.979] checking value #4:
[08:08:29.979] 'obj' is MulticoreFuture
[08:08:29.979] readImmediateCondition() ...
[08:08:29.979] | Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:29.979] | Number of RDS files: 0
[08:08:29.979] | Returned conditions set:
[08:08:29.979] |  list()
[08:08:29.980] readImmediateCondition() ... done
[08:08:29.982] MulticoreFuture #4
[08:08:29.983] signalConditionsASAP(MulticoreFuture, pos=4) ...
[08:08:29.983] | nx: 6
[08:08:29.983] | relay: TRUE
[08:08:29.983] | stdout: TRUE
[08:08:29.983] | signal: TRUE
[08:08:29.983] | resignal: FALSE
[08:08:29.983] | force: TRUE
[08:08:29.983] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:29.984] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:29.984] | until=4
[08:08:29.984] | relaying element #4
[08:08:29.984] | value() for MulticoreFuture (<unnamed-99>) ...
[08:08:29.984] | : result() for MulticoreFuture ...
[08:08:29.985] | : . readImmediateCondition() ...
[08:08:29.985] | : . ' Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:29.985] | : . ' Number of RDS files: 0
[08:08:29.985] | : . ' Returned conditions set:
[08:08:29.985] | : . '  list()
[08:08:29.986] | : . readImmediateCondition() ... done
[08:08:29.986] | : . result() for MulticoreFuture ...
[08:08:29.986] | : . result() for MulticoreFuture ... done
[08:08:29.986] | : . signalConditions() ...
[08:08:29.986] | : . ' include = ‘immediateCondition’
[08:08:29.986] | : . ' exclude = 
[08:08:29.986] | : . ' resignal = FALSE
[08:08:29.987] | : . ' Number of conditions: 6
[08:08:29.987] | : . '  int 6
[08:08:29.987] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.987] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.988] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.988] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.988] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.988] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.988] | : . signalConditions() ... done
[08:08:29.988] | : result() for MulticoreFuture ... done
[08:08:29.988] | : result() for MulticoreFuture ...
[08:08:29.989] | : result() for MulticoreFuture ... done
[08:08:29.989] | : signalConditions() ...
[08:08:29.989] | : . include = ‘immediateCondition’
[08:08:29.989] | : . exclude = 
[08:08:29.989] | : . resignal = FALSE
[08:08:29.989] | : . Number of conditions: 6
[08:08:29.989] | : .  int 6
[08:08:29.990] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.990] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.990] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.990] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.990] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.990] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.991] | : signalConditions() ... done
[08:08:29.991] | : relay stdout ...
[08:08:29.991] | : relay stdout ... done
[08:08:29.991] | : check for misuse ...
[08:08:29.991] | : check for misuse ... done
[08:08:29.991] | value() for MulticoreFuture (<unnamed-99>) ... done
[08:08:29.991] | result() for MulticoreFuture ...
[08:08:29.991] | result() for MulticoreFuture ... done
[08:08:29.991] | signalConditions() ...
[08:08:29.992] | : include = ‘immediateCondition’
[08:08:29.992] | : exclude = 
[08:08:29.992] | : resignal = FALSE
[08:08:29.992] | : Number of conditions: 6
[08:08:29.992] | :  int 6
[08:08:29.992] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.993] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.993] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.993] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.993] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.993] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.993] | signalConditions() ... done
[08:08:29.993] | result() for MulticoreFuture ...
[08:08:29.993] | result() for MulticoreFuture ... done
[08:08:29.994] | signalConditions() ...
[08:08:29.994] | : include = ‘condition’
[08:08:29.994] | : exclude = ‘error’, ‘immediateCondition’
[08:08:29.994] | : resignal = TRUE
[08:08:29.994] | : Number of conditions: 6
[08:08:29.994] | :  int 6
[08:08:29.995] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.995] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.908] | : . ' , attachPackages() ...
[08:08:29.995] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.995] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.909] | : . ' , ; packages: [n=1] ‘future’
[08:08:29.995] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.995] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.909] | : . ' , attachPackages() ... done
[08:08:29.995] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.996] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.909] | : . ' , attachPackages() ...
[08:08:29.996] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.996] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.910] | : . ' , ; packages: [n=0] 
[08:08:29.996] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.996] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:29.910] | : . ' , attachPackages() ... done
[08:08:29.996] | signalConditions() ... done
[08:08:29.996] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:29.997] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:29.997] signalConditionsASAP(MulticoreFuture, pos=4) ... done
[08:08:29.997] value(<MulticoreFuture>, ...) ...
[08:08:29.997] value(<MulticoreFuture>, ...) ... done
[08:08:29.997] value() for MulticoreFuture (<unnamed-99>) ...
[08:08:29.997] | result() for MulticoreFuture ...
[08:08:29.997] | result() for MulticoreFuture ... done
[08:08:29.997] | result() for MulticoreFuture ...
[08:08:29.998] | result() for MulticoreFuture ... done
[08:08:29.998] | signalConditions() ...
[08:08:29.998] | : include = ‘immediateCondition’
[08:08:29.998] | : exclude = 
[08:08:29.998] | : resignal = FALSE
[08:08:29.998] | : Number of conditions: 6
[08:08:29.998] | :  int 6
[08:08:29.999] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.999] | : already signaled, skipping
[08:08:29.999] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.999] | : already signaled, skipping
[08:08:29.999] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.999] | : already signaled, skipping
[08:08:29.999] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:29.999] | : already signaled, skipping
[08:08:30.000] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.000] | : already signaled, skipping
[08:08:30.000] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.000] | : already signaled, skipping
[08:08:30.000] | signalConditions() ... done
[08:08:30.000] | check for misuse ...
[08:08:30.000] | check for misuse ... done
[08:08:30.000] value() for MulticoreFuture (<unnamed-99>) ... done
[08:08:30.001] value: <numeric>
[08:08:30.001] signalConditionsASAP(MulticoreFuture, pos=4) ...
[08:08:30.001] | nx: 6
[08:08:30.001] | relay: TRUE
[08:08:30.001] | stdout: TRUE
[08:08:30.001] | signal: TRUE
[08:08:30.001] | resignal: FALSE
[08:08:30.001] | force: TRUE
[08:08:30.002] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.002] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.002] | until=5
[08:08:30.002] | relaying element #5
[08:08:30.002] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.002] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.002] signalConditionsASAP(MulticoreFuture, pos=4) ... done
[08:08:30.002] resolve() for MulticoreFuture ...
[08:08:30.002] resolve() for MulticoreFuture ... done
[08:08:30.003] length: 2 (resolved future 4)

[08:08:30.003] checking value #5:
[08:08:30.003] 'obj' is NULL
[08:08:30.003] signalConditionsASAP(NULL, pos=5) ...
[08:08:30.003] | nx: 6
[08:08:30.003] | relay: TRUE
[08:08:30.003] | stdout: TRUE
[08:08:30.003] | signal: TRUE
[08:08:30.004] | resignal: FALSE
[08:08:30.004] | force: TRUE
[08:08:30.004] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.004] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.004] | until=6
[08:08:30.004] | relaying element #6
[08:08:30.004] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:30.004] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.005] signalConditionsASAP(NULL, pos=5) ... done
[08:08:30.005] signalConditionsASAP(NULL, pos=5) ...
[08:08:30.005] | nx: 6
[08:08:30.005] | relay: TRUE
[08:08:30.005] | stdout: TRUE
[08:08:30.005] | signal: TRUE
[08:08:30.005] | resignal: FALSE
[08:08:30.005] | force: TRUE
[08:08:30.005] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:30.006] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.006] | until=6
[08:08:30.006] | relaying element #6
[08:08:30.006] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:30.006] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.006] signalConditionsASAP(NULL, pos=5) ... done
[08:08:30.006] length: 1 (resolved future 5)

[08:08:30.006] checking value #6:
[08:08:30.007] 'obj' is atomic
[08:08:30.007] signalConditionsASAP(numeric, pos=6) ...
[08:08:30.007] | nx: 6
[08:08:30.007] | relay: TRUE
[08:08:30.007] | stdout: TRUE
[08:08:30.007] | signal: TRUE
[08:08:30.007] | resignal: FALSE
[08:08:30.007] | force: TRUE
[08:08:30.007] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:30.008] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.008] | until=6
[08:08:30.008] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:30.008] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.008] signalConditionsASAP(numeric, pos=6) ... done
[08:08:30.008] length: 0 (resolved future 6)

[08:08:30.009] Relaying remaining futures ...
[08:08:30.009] | signalConditionsASAP(NULL, pos=0) ...
[08:08:30.009] | : nx: 6
[08:08:30.009] | : relay: TRUE
[08:08:30.009] | : stdout: TRUE
[08:08:30.009] | : signal: TRUE
[08:08:30.009] | : resignal: FALSE
[08:08:30.009] | : force: TRUE
[08:08:30.009] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:30.010] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
 - flush all
[08:08:30.010] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:30.010] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.010] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:30.010] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 2 3
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
Dimensions: c(2, 3, 1)
[08:08:30.014] future(..., label = NULL) ...
[08:08:30.014] | lazy: FALSE
[08:08:30.014] | stdout: TRUE
[08:08:30.014] | conditions: [n=1] ‘condition’
[08:08:30.014] | gc: FALSE
[08:08:30.014] | earlySignal: FALSE
[08:08:30.014] | getGlobalsAndPackages() ...
[08:08:30.015] | : Searching for globals ...
[08:08:30.016] | : . globals found: [0] 
[08:08:30.016] | : Searching for globals ... done
[08:08:30.016] | : globals: [0] <none>
[08:08:30.016] | : packages: [0] <none>
[08:08:30.016] | getGlobalsAndPackages() ... done
[08:08:30.017] | run() for ‘Future’ (<unnamed-100>) ...
[08:08:30.017] | : state: ‘created’
[08:08:30.017] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.017] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.017] | : Using MulticoreFutureBackend ...
[08:08:30.017] | : . Number of futures since start: 9 (9 created, 9 launched, 12 finished)
[08:08:30.017] | : . Launching futures ...
[08:08:30.017] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:30.018] | : . ' , getFutureData() ...
[08:08:30.018] | : . ' , ; getFutureCore() ...
[08:08:30.018] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:30.018] | : . ' , ; getFutureCore() ... done
[08:08:30.018] | : . ' , ; getFutureCapture() ...
[08:08:30.018] | : . ' , ; getFutureCapture() ... done
[08:08:30.018] | : . ' , ; getFutureContext() ...
[08:08:30.018] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.018] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:30.019] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.019] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:30.019] | : . ' , ; getFutureContext() ... done
[08:08:30.019] | : . ' , getFutureData() ... done
[08:08:30.019] | : . ' , requestCore(..., workers = 2) ...
[08:08:30.019] | : . ' , requestCore(..., workers = 2) ... done
[08:08:30.022] | : . ' , MulticoreFuture started
[08:08:30.022] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:30.022] | : . Launching futures ... done
[08:08:30.023] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:30.023] | : Using MulticoreFutureBackend ... done
[08:08:30.023] | run() for ‘Future’ (<unnamed-100>) ... done
[08:08:30.023] future(..., label = NULL) ... done
[08:08:30.024] future(..., label = NULL) ...
[08:08:30.024] | lazy: FALSE
[08:08:30.024] | stdout: TRUE
[08:08:30.024] | conditions: [n=1] ‘condition’
[08:08:30.024] | gc: FALSE
[08:08:30.024] | earlySignal: FALSE
[08:08:30.025] | getGlobalsAndPackages() ...
[08:08:30.025] | : Searching for globals ...
[08:08:30.025] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.025] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:30.026] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.026] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:30.026] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:30.027] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:30.027] | : . ' , ; ` | New stack:
[08:08:30.027] | : . globals found: [0] 
[08:08:30.027] | : Searching for globals ... done
[08:08:30.028] | : globals: [0] <none>
[08:08:30.028] | : packages: [0] <none>
[08:08:30.028] | getGlobalsAndPackages() ... done
[08:08:30.028] | run() for ‘Future’ (<unnamed-101>) ...
[08:08:30.028] | : state: ‘created’
[08:08:30.029] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.029] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.029] | : Using MulticoreFutureBackend ...
[08:08:30.029] | : . Number of futures since start: 10 (10 created, 10 launched, 12 finished)
[08:08:30.029] | : . Launching futures ...
[08:08:30.030] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:30.030] | : . ' , getFutureData() ...
[08:08:30.030] | : . ' , ; getFutureCore() ...
[08:08:30.030] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:30.030] | : . ' , ; getFutureCore() ... done
[08:08:30.030] | : . ' , ; getFutureCapture() ...
[08:08:30.030] | : . ' , ; getFutureCapture() ... done
[08:08:30.031] | : . ' , ; getFutureContext() ...
[08:08:30.027] | : . ' , ; ` | List of 1
[08:08:30.027] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.027] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.027] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:30.027] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.027] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.027] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.027] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.027] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.031] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.031] | : . ' , ; ` | Old stack:
[08:08:30.031] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:30.031] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.031] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:30.032] | : . ' , ; getFutureContext() ... done
[08:08:30.032] | : . ' , getFutureData() ... done
[08:08:30.032] | : . ' , requestCore(..., workers = 2) ...
[08:08:30.033] | : . ' , requestCore(..., workers = 2) ... done
[08:08:30.035] | : . ' , MulticoreFuture started
[08:08:30.036] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:30.031] | : . ' , ; ` | List of 1
[08:08:30.031] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.031] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.031] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.031] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:30.031] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.031] | : . ' , ; ` |     ...)  
[08:08:30.031] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.031] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.031] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:30.031] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.031] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.031] | : . ' , ; ` |     ...)  
[08:08:30.031] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.031] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.036] | : . ' , ; ` | Not identical
[08:08:30.036] | : . Launching futures ... done
[08:08:30.036] | : . ' , ; ` | all.equal() for future ...
[08:08:30.036] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:30.037] | : Using MulticoreFutureBackend ... done
[08:08:30.037] | run() for ‘Future’ (<unnamed-101>) ... done
[08:08:30.037] future(..., label = NULL) ... done
[08:08:30.038] future(..., label = NULL) ...
[08:08:30.039] | lazy: FALSE
[08:08:30.039] | stdout: TRUE
[08:08:30.039] | conditions: [n=1] ‘condition’
[08:08:30.039] | gc: FALSE
[08:08:30.040] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.040] | earlySignal: FALSE
[08:08:30.040] | getGlobalsAndPackages() ...
[08:08:30.040] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:30.040] | : Searching for globals ...
[08:08:30.040] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.041] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:30.041] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:30.042] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:30.042] | : . ' , ; ` | New stack:
[08:08:30.036] | : . ' , ; ` | : List of 2
[08:08:30.036] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.036] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.036] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:30.036] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.036] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.036] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.036] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.036] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.036] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.036] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.036] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:30.036] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.036] | : . ' , ; ` | :     ...)  
[08:08:30.036] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.036] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.036] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:30.036] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.036] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.036] | : . ' , ; ` | :     ...)  
[08:08:30.036] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.045] | : . ' , ; ` | : Formals differ
[08:08:30.045] | : . ' , ; ` | all.equal() for future ... done
[08:08:30.045] | : . ' , ; ` | Future strategies differ at level 1
[08:08:30.045] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:30.045] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:30.045] | : . ' , ; ` List of future strategies:
[08:08:30.045] | : . ' , ; ` 1. sequential:
[08:08:30.045] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:30.045] | : . ' , ; `    - tweaked: FALSE
[08:08:30.045] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.042] | : . ' , ; ` | List of 1
[08:08:30.042] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.042] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.042] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:30.042] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.042] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.042] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.042] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.042] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.048] | : . globals found: [1] ‘{’
[08:08:30.048] | : . ' , ; ` | Old stack:
[08:08:30.048] | : Searching for globals ... done
[08:08:30.049] | : Resolving globals: FALSE
[08:08:30.049] | : Search for packages associated with the globals ...
[08:08:30.049] | : . Packages associated with globals: [1] ‘base’
[08:08:30.046] | : . ' , ; ` List of 1
[08:08:30.046] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.046] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.046] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:30.046] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.046] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.046] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.046] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.046] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.050] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:30.050] | : . Packages: [1] ‘base’
[08:08:30.050] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:30.050] | : Search for packages associated with the globals ... done
[08:08:30.050] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.051] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:30.050] | : Packages after dropping 'base': [0] 
[08:08:30.051] | : globals: [0] 
[08:08:30.051] | : packages: [0] 
[08:08:30.051] | getGlobalsAndPackages() ... done
[08:08:30.052] | run() for ‘Future’ (<unnamed-102>) ...
[08:08:30.052] | : state: ‘created’
[08:08:30.052] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.053] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.053] | : Using MulticoreFutureBackend ...
[08:08:30.053] | : . Number of futures since start: 11 (11 created, 11 launched, 12 finished)
[08:08:30.053] | : . Launching futures ...
[08:08:30.051] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.051] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.051] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:30.051] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.051] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.051] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.051] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.054] | : . ' , ; ` | : init: TRUE
[08:08:30.054] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:30.054] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:30.054] | : . ' , getFutureData() ...
[08:08:30.054] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:30.054] | : . ' , ; getFutureCore() ...
[08:08:30.054] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:30.054] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:30.054] | : . ' , ; ` | : .  list()
[08:08:30.054] | : . ' , ; getFutureCore() ... done
[08:08:30.055] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:30.055] | : . ' , ; getFutureCapture() ...
[08:08:30.055] | : . ' , ; getFutureCapture() ... done
[08:08:30.055] | : . ' , ; ` | : .  list()
[08:08:30.055] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:30.055] | : . ' , ; getFutureContext() ...
[08:08:30.055] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.048] | : . ' , ; ` | List of 1
[08:08:30.048] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.048] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.048] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.048] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:30.048] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.048] | : . ' , ; ` |     ...)  
[08:08:30.048] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.048] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.048] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:30.048] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.048] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.048] | : . ' , ; ` |     ...)  
[08:08:30.048] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.048] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.056] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:30.056] | : . ' , ; ` | Not identical
[08:08:30.056] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.056] | : . ' , ; ` | all.equal() for future ...
[08:08:30.056] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:30.056] | : . ' , ; getFutureContext() ... done
[08:08:30.055] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:30.055] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:30.055] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:30.057] | : . ' , getFutureData() ... done
[08:08:30.057] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:30.057] | : . ' , requestCore(..., workers = 2) ...
[08:08:30.057] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:30.057] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:30.057] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.058] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:30.058] | : . ' , ; Poll #1 (0): usedCores() = 2, workers = 2
[08:08:30.058] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:30.058] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:30.061] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:30.061] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:30.061] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:30.062] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:30.062] | : . ' , ; ` | : New stack:
[08:08:30.056] | : . ' , ; ` | : List of 2
[08:08:30.056] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.056] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.056] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:30.056] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.056] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.056] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.056] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.056] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.056] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.056] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.056] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:30.056] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.056] | : . ' , ; ` | :     ...)  
[08:08:30.056] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.056] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.056] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:30.056] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.056] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.056] | : . ' , ; ` | :     ...)  
[08:08:30.056] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.064] | : . ' , ; ` | : Formals differ
[08:08:30.065] | : . ' , ; ` | all.equal() for future ... done
[08:08:30.065] | : . ' , ; ` | Future strategies differ at level 1
[08:08:30.065] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:30.065] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:30.065] | : . ' , ; ` List of future strategies:
[08:08:30.065] | : . ' , ; ` 1. sequential:
[08:08:30.065] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:30.065] | : . ' , ; `    - tweaked: FALSE
[08:08:30.065] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.062] | : . ' , ; ` | : List of 1
[08:08:30.062] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.062] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.062] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.062] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:30.062] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.062] | : . ' , ; ` | :     ...)  
[08:08:30.062] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.062] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.062] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:30.062] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.062] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.062] | : . ' , ; ` | :     ...)  
[08:08:30.062] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.062] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.067] | : . ' , ; ` | : Old stack:
[08:08:30.066] | : . ' , ; ` List of 1
[08:08:30.066] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.066] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.066] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:30.066] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.066] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.066] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.066] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.066] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.070] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:30.070] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:30.070] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.070] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:30.067] | : . ' , ; ` | : List of 1
[08:08:30.067] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.067] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.067] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:30.067] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.067] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.067] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.067] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.067] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564304101788> 
[08:08:30.067] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.067] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.067] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.071] | : . ' , ; ` | : Not identical
[08:08:30.072] | : . ' , ; ` | : all.equal() for future ...
[08:08:30.071] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.071] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.071] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:30.071] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.071] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.071] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.071] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.073] | : . ' , ; ` | : init: TRUE
[08:08:30.074] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:30.074] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:30.074] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:30.074] | : . ' , ; ` | : .  list()
[08:08:30.075] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:30.075] | : . ' , ; ` | : .  list()
[08:08:30.075] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:30.075] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:30.075] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:30.075] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:30.077] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:30.077] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:30.077] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:30.077] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.077] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:30.078] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:30.078] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:30.078] | : . ' , ; readImmediateCondition() ...
[08:08:30.079] | : . ' , ; ` Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:30.079] | : . ' , ; ` Number of RDS files: 0
[08:08:30.079] | : . ' , ; ` Returned conditions set:
[08:08:30.079] | : . ' , ; `  list()
[08:08:30.080] | : . ' , ; readImmediateCondition() ... done
[08:08:30.081] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:30.082] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:30.082] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:30.082] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:30.082] | : . ' , ; ` | : New stack:
[08:08:30.072] | : . ' , ; ` | : . List of 2
[08:08:30.072] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.072] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.072] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.072] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:30.072] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.072] | : . ' , ; ` | : .     ...)  
[08:08:30.072] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.072] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.072] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:30.072] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.072] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.072] | : . ' , ; ` | : .     ...)  
[08:08:30.072] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.072] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.072] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.072] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:30.072] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.072] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.072] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.072] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.072] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564304101788> 
[08:08:30.072] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.072] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.083] | : . ' , ; ` | : . Formals differ
[08:08:30.084] | : . ' , ; ` | : all.equal() for future ... done
[08:08:30.084] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:30.084] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:30.084] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:30.084] | : . ' , ; ` | List of future strategies:
[08:08:30.084] | : . ' , ; ` | 1. multicore:
[08:08:30.084] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:30.084] | : . ' , ; ` |    - tweaked: FALSE
[08:08:30.084] | : . ' , ; ` |    - call: plan(strategy)
[08:08:30.082] | : . ' , ; ` | : List of 1
[08:08:30.082] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.082] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.082] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.082] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:30.082] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.082] | : . ' , ; ` | :     ...)  
[08:08:30.082] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.082] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.082] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:30.082] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.082] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.082] | : . ' , ; ` | :     ...)  
[08:08:30.082] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.082] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.087] | : . ' , ; ` | : Old stack:
[08:08:30.085] | : . ' , ; ` | List of 1
[08:08:30.085] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.085] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.085] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.085] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:30.085] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.085] | : . ' , ; ` |     ...)  
[08:08:30.085] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.085] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.085] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:30.085] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.085] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.085] | : . ' , ; ` |     ...)  
[08:08:30.085] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.085] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.089] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:30.090] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:30.090] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.090] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.090] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:30.090] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:30.090] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:30.090] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:30.090] | : . ' , ; readImmediateCondition() ...
[08:08:30.091] | : . ' , ; ` Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:30.091] | : . ' , ; ` Number of RDS files: 0
[08:08:30.091] | : . ' , ; ` Returned conditions set:
[08:08:30.091] | : . ' , ; `  list()
[08:08:30.092] | : . ' , ; readImmediateCondition() ... done
[08:08:30.092] | : . ' , ; Poll #2 (0.03 secs): usedCores() = 2, workers = 2
[08:08:30.087] | : . ' , ; ` | : List of 1
[08:08:30.087] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.087] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.087] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:30.087] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.087] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.087] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.087] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.087] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303637160> 
[08:08:30.087] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.087] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.087] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.096] | : . ' , ; ` | : Not identical
[08:08:30.096] | : . ' , ; ` | : all.equal() for future ...
[08:08:30.103] | : . ' , ; readImmediateCondition() ...
[08:08:30.103] | : . ' , ; ` Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:30.104] | : . ' , ; ` Number of RDS files: 0
[08:08:30.104] | : . ' , ; ` Returned conditions set:
[08:08:30.104] | : . ' , ; `  list()
[08:08:30.096] | : . ' , ; ` | : . List of 2
[08:08:30.096] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.096] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.096] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.096] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:30.096] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.096] | : . ' , ; ` | : .     ...)  
[08:08:30.096] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.096] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.096] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:30.096] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.096] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.096] | : . ' , ; ` | : .     ...)  
[08:08:30.096] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.096] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.096] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.096] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:30.096] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.096] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.096] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.096] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.096] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564303637160> 
[08:08:30.096] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.096] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.105] | : . ' , ; readImmediateCondition() ... done
[08:08:30.105] | : . ' , ; value() for MulticoreFuture (<unnamed-100>) ...
[08:08:30.105] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:30.105] | : . ' , ; ` | : . Formals differ
[08:08:30.106] | : . ' , ; ` | : all.equal() for future ... done
[08:08:30.106] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:30.106] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:30.106] | : . ' , ; ` | readImmediateCondition() ...
[08:08:30.106] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:30.106] | : . ' , ; ` | : Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:30.107] | : . ' , ; ` | : Number of RDS files: 0
[08:08:30.107] | : . ' , ; ` | : Returned conditions set:
[08:08:30.107] | : . ' , ; ` | List of future strategies:
[08:08:30.107] | : . ' , ; ` | 1. multicore:
[08:08:30.107] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:30.107] | : . ' , ; ` |    - tweaked: FALSE
[08:08:30.107] | : . ' , ; ` |    - call: plan(strategy)
[08:08:30.107] | : . ' , ; ` | :  list()
[08:08:30.108] | : . ' , ; ` | readImmediateCondition() ... done
[08:08:30.108] | : . ' , ; ` | result() for MulticoreFuture ...
[08:08:30.108] | : . ' , ; ` | result() for MulticoreFuture ... done
[08:08:30.109] | : . ' , ; ` | signalConditions() ...
[08:08:30.109] | : . ' , ; ` | : include = ‘immediateCondition’
[08:08:30.109] | : . ' , ; ` | : exclude = 
[08:08:30.109] | : . ' , ; ` | : resignal = FALSE
[08:08:30.110] | : . ' , ; ` | : Number of conditions: 6
[08:08:30.110] | : . ' , ; ` | :  int 6
[08:08:30.111] | : . ' , ; ` | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.111] | : . ' , ; ` | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.111] | : . ' , ; ` | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.111] | : . ' , ; ` | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.111] | : . ' , ; ` | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.112] | : . ' , ; ` | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.112] | : . ' , ; ` | signalConditions() ... done
[08:08:30.112] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:30.112] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:30.113] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:30.113] | : . ' , ; ` signalConditions() ...
[08:08:30.113] | : . ' , ; ` | include = ‘immediateCondition’
[08:08:30.113] | : . ' , ; ` | exclude = 
[08:08:30.113] | : . ' , ; ` | resignal = FALSE
[08:08:30.114] | : . ' , ; ` | Number of conditions: 6
[08:08:30.114] | : . ' , ; ` |  int 6
[08:08:30.107] | : . ' , ; ` | List of 1
[08:08:30.107] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.107] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.107] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.107] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:30.107] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.107] | : . ' , ; ` |     ...)  
[08:08:30.107] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.107] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.107] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:30.107] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.107] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.107] | : . ' , ; ` |     ...)  
[08:08:30.107] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.107] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.115] | : . ' , ; ` | Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.115] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:30.115] | : . ' , ; ` | Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.115] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:30.115] | : . ' , ; ` | Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.115] | : . ' , ; ` | Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.115] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.115] | : . ' , ; ` | Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.116] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.116] | : . ' , ; ` | Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.116] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:30.116] | : . ' , ; ` signalConditions() ... done
[08:08:30.116] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:30.116] | : . ' , ; ` check for misuse ...
[08:08:30.116] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:30.116] | : . ' , ; ` check for misuse ... done
[08:08:30.116] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:30.117] | : . ' , ; value() for MulticoreFuture (<unnamed-100>) ... done
[08:08:30.117] | : . ' , requestCore(..., workers = 2) ... done
[08:08:30.120] | : . ' , MulticoreFuture started
[08:08:30.120] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:30.120] | : . Launching futures ... done
[08:08:30.121] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:30.121] | : Using MulticoreFutureBackend ... done
[08:08:30.121] | run() for ‘Future’ (<unnamed-102>) ... done
[08:08:30.121] future(..., label = NULL) ... done
Classes 'listenv', 'environment' <environment: 0x5642ffd25278> 
[08:08:30.123] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.123] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:30.124] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Classes 'listenv', 'environment' <environment: 0x564304789c08> 
 - attr(*, "dim.")=[08:08:30.124] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:30.124] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:30.125] | : . ' , ; ` all.equal() for FutureStrategyList ...
 int [1:3] 2 3 1
 - attr(*, "dimnames.")=[08:08:30.125] | : . ' , ; ` | New stack:
List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
[08:08:30.127] resolved() for listenv ...
[08:08:30.128] | resolved() for array ...
[08:08:30.129] | : Number of elements: 6
[08:08:30.129] | : Number of futures: 6
[08:08:30.125] | : . ' , ; ` | List of 1
[08:08:30.125] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.125] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.125] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:30.125] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.125] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.125] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.125] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.125] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.129] | : readImmediateCondition() ...
[08:08:30.129] | : . ' , ; ` | Old stack:
[08:08:30.129] | : . Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:30.130] | : . Number of RDS files: 0
[08:08:30.130] | : . Returned conditions set:
[08:08:30.130] | : .  list()
[08:08:30.130] | : readImmediateCondition() ... done
[08:08:30.129] | : . ' , ; ` | List of 1
[08:08:30.129] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.129] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.129] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.129] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:30.129] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.129] | : . ' , ; ` |     ...)  
[08:08:30.129] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.129] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.129] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:30.129] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.129] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.129] | : . ' , ; ` |     ...)  
[08:08:30.129] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.129] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.134] | : . ' , ; ` | Not identical
[08:08:30.134] | : . ' , ; ` | all.equal() for future ...
[08:08:30.141] | : readImmediateCondition() ...
[08:08:30.141] | : . Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:30.141] | : . Number of RDS files: 0
[08:08:30.141] | : . Returned conditions set:
[08:08:30.141] | : .  list()
[08:08:30.142] | : readImmediateCondition() ... done
[08:08:30.142] | resolved() for array ... done
[08:08:30.142] resolved() for listenv ... done
 logi [1:2, 1:3, 1] TRUE TRUE TRUE FALSE TRUE TRUE
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
 - attr(*, "names")= chr [1:6] "a" "b" "c" "d" ...
[08:08:30.144] value() for listenv ...
[08:08:30.144] | recursive: 0
[08:08:30.144] | reduce: FALSE
[08:08:30.146] | length: 6
[08:08:30.134] | : . ' , ; ` | : List of 2
[08:08:30.134] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.134] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.134] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:30.134] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.134] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.134] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] [08:08:30.146] | elements: ‘a’, ‘b’, ‘c’, ‘d’, ‘’, ‘’
"maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.134] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.134] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.134] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.134] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.134] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:30.134] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.134] | : . ' , ; ` | :     ...)  
[08:08:30.134] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.134] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.134] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:30.134] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.134] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.134] | : . ' , ; ` | :     ...)  
[08:08:30.134] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.146] | Number of remaining objects: 6
[08:08:30.146] | checking value #1:
[08:08:30.146] | 'obj' is atomic
[08:08:30.146] | signalConditionsASAP(numeric, pos=1) ...
[08:08:30.146] | : nx: 6
[08:08:30.147] | : relay: TRUE
[08:08:30.147] | : . ' , ; ` | : Formals differ
[08:08:30.147] | : stdout: TRUE
[08:08:30.147] | : signal: TRUE
[08:08:30.147] | : . ' , ; ` | all.equal() for future ... done
[08:08:30.147] | : resignal: FALSE
[08:08:30.147] | : . ' , ; ` | Future strategies differ at level 1
[08:08:30.147] | : force: TRUE
[08:08:30.147] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:30.147] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:30.147] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:30.147] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:30.147] | : until=2
[08:08:30.148] | : relaying element #2
[08:08:30.148] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:30.148] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:30.148] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:30.147] | : . ' , ; ` List of future strategies:
[08:08:30.147] | : . ' , ; ` 1. sequential:
[08:08:30.147] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:30.147] | : . ' , ; `    - tweaked: FALSE
[08:08:30.147] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.148] | length: 5 (resolved future 1)
[08:08:30.148] value() for listenv ... done
[08:08:30.148] checking value #2:
[08:08:30.149] 'obj' is MulticoreFuture
[08:08:30.149] MulticoreFuture #2
[08:08:30.149] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:30.149] | nx: 6
[08:08:30.149] | relay: TRUE
[08:08:30.149] | stdout: TRUE
[08:08:30.149] | signal: TRUE
[08:08:30.149] | resignal: FALSE
[08:08:30.149] | force: TRUE
[08:08:30.150] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:30.150] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:30.148] | : . ' , ; ` List of 1
[08:08:30.148] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.148] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.148] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:30.148] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.148] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.148] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.148] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.148] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.152] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:30.152] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:30.150] | until=2
[08:08:30.152] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.152] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:30.152] | relaying element #2
[08:08:30.153] | value() for MulticoreFuture (<unnamed-100>) ...
[08:08:30.153] | : result() for MulticoreFuture ...
[08:08:30.153] | : result() for MulticoreFuture ... done
[08:08:30.153] | : result() for MulticoreFuture ...
[08:08:30.153] | : result() for MulticoreFuture ... done
[08:08:30.153] | : signalConditions() ...
[08:08:30.154] | : . include = ‘immediateCondition’
[08:08:30.154] | : . exclude = 
[08:08:30.154] | : . resignal = FALSE
[08:08:30.154] | : . Number of conditions: 6
[08:08:30.154] | : .  int 6
[08:08:30.155] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.155] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.155] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.155] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.155] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.155] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.155] | : signalConditions() ... done
[08:08:30.153] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.153] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.153] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:30.153] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.153] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.153] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.153] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.156] | : relay stdout ...
[08:08:30.156] | : . ' , ; ` | : init: TRUE
[08:08:30.156] | : relay stdout ... done
[08:08:30.156] | : check for misuse ...
[08:08:30.156] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:30.156] | : check for misuse ... done
[08:08:30.156] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:30.156] | value() for MulticoreFuture (<unnamed-100>) ... done
[08:08:30.156] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:30.156] | result() for MulticoreFuture ...
[08:08:30.156] | result() for MulticoreFuture ... done
[08:08:30.156] | signalConditions() ...
[08:08:30.156] | : . ' , ; ` | : .  list()
[08:08:30.157] | : include = ‘immediateCondition’
[08:08:30.157] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:30.157] | : exclude = 
[08:08:30.157] | : resignal = FALSE
[08:08:30.157] | : Number of conditions: 6
[08:08:30.157] | : . ' , ; ` | : .  list()
[08:08:30.157] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:30.157] | :  int 6
[08:08:30.157] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.158] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.158] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.158] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.158] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.158] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.158] | signalConditions() ... done
[08:08:30.158] | result() for MulticoreFuture ...
[08:08:30.159] | result() for MulticoreFuture ... done
[08:08:30.157] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:30.157] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:30.157] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:30.159] | signalConditions() ...
[08:08:30.159] | : include = ‘condition’
[08:08:30.159] | : exclude = ‘error’, ‘immediateCondition’
[08:08:30.159] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:30.159] | : resignal = TRUE
[08:08:30.159] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:30.159] | : Number of conditions: 6
[08:08:30.159] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:30.159] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.160] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:30.159] | :  int 6
[08:08:30.160] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:30.160] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.160] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.160] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:30.023] | : . ' , attachPackages() ...
[08:08:30.160] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.160] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.023] | : . ' , ; packages: [n=1] ‘future’
[08:08:30.161] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.161] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.024] | : . ' , attachPackages() ... done
[08:08:30.161] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.161] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.024] | : . ' , attachPackages() ...
[08:08:30.161] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.161] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.024] | : . ' , ; packages: [n=0] 
[08:08:30.161] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.162] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.024] | : . ' , attachPackages() ... done
[08:08:30.162] | signalConditions() ... done
[08:08:30.162] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:30.162] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:30.162] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:30.162] value(<MulticoreFuture>, ...) ...
[08:08:30.162] value(<MulticoreFuture>, ...) ... done
[08:08:30.162] value() for MulticoreFuture (<unnamed-100>) ...
[08:08:30.163] | result() for MulticoreFuture ...
[08:08:30.163] | result() for MulticoreFuture ... done
[08:08:30.163] | result() for MulticoreFuture ...
[08:08:30.163] | result() for MulticoreFuture ... done
[08:08:30.163] | signalConditions() ...
[08:08:30.163] | : include = ‘immediateCondition’
[08:08:30.163] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:30.163] | : exclude = 
[08:08:30.163] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:30.163] | : resignal = FALSE
[08:08:30.164] | : Number of conditions: 6
[08:08:30.164] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:30.164] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:30.164] | : . ' , ; ` | : New stack:
[08:08:30.164] | :  int 6
[08:08:30.164] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.164] | : already signaled, skipping
[08:08:30.164] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.164] | : already signaled, skipping
[08:08:30.165] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.165] | : already signaled, skipping
[08:08:30.165] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.165] | : already signaled, skipping
[08:08:30.165] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.165] | : already signaled, skipping
[08:08:30.165] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.165] | : already signaled, skipping
[08:08:30.166] | signalConditions() ... done
[08:08:30.166] | check for misuse ...
[08:08:30.166] | check for misuse ... done
[08:08:30.166] value() for MulticoreFuture (<unnamed-100>) ... done
[08:08:30.166] value: <numeric>
[08:08:30.166] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:30.166] | nx: 6
[08:08:30.166] | relay: TRUE
[08:08:30.167] | stdout: TRUE
[08:08:30.167] | signal: TRUE
[08:08:30.167] | resignal: FALSE
[08:08:30.167] | force: TRUE
[08:08:30.167] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:30.167] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:30.167] | until=3
[08:08:30.167] | relaying element #3
[08:08:30.168] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:30.168] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:30.168] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:30.168] resolve() for MulticoreFuture ...
[08:08:30.168] resolve() for MulticoreFuture ... done
[08:08:30.168] length: 4 (resolved future 2)

[08:08:30.168] checking value #3:
[08:08:30.164] | : . ' , ; ` | : List of 1
[08:08:30.164] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.164] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.164] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.164] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:30.164] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availabl[08:08:30.169] 'obj' is MulticoreFuture
eCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.164] | : . ' , ; ` | :     ...)  
[08:08:30.164] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.164] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.164] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:30.164] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.164] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.164] | : . ' , ; ` | :     ...)  
[08:08:30.164] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.164] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.169] | : . ' , ; ` | : Old stack:
[08:08:30.169] readImmediateCondition() ...
[08:08:30.169] | Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:30.169] | Number of RDS files: 0
[08:08:30.169] | Returned conditions set:
[08:08:30.169] |  list()
[08:08:30.170] readImmediateCondition() ... done
[08:08:30.170] MulticoreFuture #3
[08:08:30.170] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:30.170] | nx: 6
[08:08:30.170] | relay: TRUE
[08:08:30.171] | stdout: TRUE
[08:08:30.171] | signal: TRUE
[08:08:30.171] | resignal: FALSE
[08:08:30.171] | force: TRUE
[08:08:30.171] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:30.171] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:30.171] | until=3
[08:08:30.171] | relaying element #3
[08:08:30.172] | value() for MulticoreFuture (<unnamed-101>) ...
[08:08:30.172] | : result() for MulticoreFuture ...
[08:08:30.173] | : . readImmediateCondition() ...
[08:08:30.173] | : . ' Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:30.173] | : . ' Number of RDS files: 0
[08:08:30.173] | : . ' Returned conditions set:
[08:08:30.169] | : . ' , ; ` | : List of 1
[08:08:30.169] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.169] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.169] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:30.169] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.169] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.169] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.169] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.169] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302a88b28> 
[08:08:30.169] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.169] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.169] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.174] | : . ' , ; ` | : Not identical
[08:08:30.173] | : . '  list()
[08:08:30.174] | : . ' , ; ` | : all.equal() for future ...
[08:08:30.174] | : . readImmediateCondition() ... done
[08:08:30.175] | : . result() for MulticoreFuture ...
[08:08:30.175] | : . result() for MulticoreFuture ... done
[08:08:30.175] | : . signalConditions() ...
[08:08:30.175] | : . ' include = ‘immediateCondition’
[08:08:30.175] | : . ' exclude = 
[08:08:30.175] | : . ' resignal = FALSE
[08:08:30.176] | : . ' Number of conditions: 6
[08:08:30.176] | : . '  int 6
[08:08:30.176] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.177] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.177] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.177] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.177] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.177] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.178] | : . signalConditions() ... done
[08:08:30.178] | : result() for MulticoreFuture ... done
[08:08:30.178] | : result() for MulticoreFuture ...
[08:08:30.178] | : result() for MulticoreFuture ... done
[08:08:30.178] | : signalConditions() ...
[08:08:30.178] | : . include = ‘immediateCondition’
[08:08:30.179] | : . exclude = 
[08:08:30.179] | : . resignal = FALSE
[08:08:30.179] | : . Number of conditions: 6
[08:08:30.179] | : .  int 6
[08:08:30.180] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.180] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.180] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.180] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.181] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.181] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.181] | : signalConditions() ... done
[08:08:30.181] | : relay stdout ...
[08:08:30.181] | : relay stdout ... done
[08:08:30.181] | : check for misuse ...
[08:08:30.181] | : check for misuse ... done
[08:08:30.182] | value() for MulticoreFuture (<unnamed-101>) ... done
[08:08:30.182] | result() for MulticoreFuture ...
[08:08:30.182] | result() for MulticoreFuture ... done
[08:08:30.182] | signalConditions() ...
[08:08:30.182] | : include = ‘immediateCondition’
[08:08:30.182] | : exclude = 
[08:08:30.174] | : . ' , ; ` | : . List of 2
[08:08:30.174] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.174] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.174] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.174] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:30.174] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.174] | : . ' , ; ` | : .     ...)  
[08:08:30.174] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.174] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.174] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:30.174] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.174] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.174] | : . ' , ; ` | : .     ...)  
[08:08:30.174] | : . ' , ; `[08:08:30.182] | : resignal = FALSE
 | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.174] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.174] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.174] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:30.174] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.174] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.174] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.174] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.174] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302a88b28> 
[08:08:30.174] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.174] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.182] | : Number of conditions: 6
[08:08:30.183] | :  int 6
[08:08:30.183] | : . ' , ; ` | : . Formals differ
[08:08:30.183] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.183] | : . ' , ; ` | : all.equal() for future ... done
[08:08:30.183] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.183] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:30.183] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.183] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:30.184] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.184] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:30.184] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.184] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.184] | signalConditions() ... done
[08:08:30.184] | : . ' , ; ` | List of future strategies:
[08:08:30.184] | : . ' , ; ` | 1. multicore:
[08:08:30.184] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:30.184] | : . ' , ; ` |    - tweaked: FALSE
[08:08:30.184] | : . ' , ; ` |    - call: plan(strategy)
[08:08:30.184] | result() for MulticoreFuture ...
[08:08:30.184] | result() for MulticoreFuture ... done
[08:08:30.184] | signalConditions() ...
[08:08:30.184] | : include = ‘condition’
[08:08:30.185] | : exclude = ‘error’, ‘immediateCondition’
[08:08:30.185] | : resignal = TRUE
[08:08:30.185] | : Number of conditions: 6
[08:08:30.185] | :  int 6
[08:08:30.185] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.186] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.036] | : . ' , attachPackages() ...
[08:08:30.186] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.186] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.037] | : . ' , ; packages: [n=1] ‘future’
[08:08:30.186] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.186] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.037] | : . ' , attachPackages() ... done
[08:08:30.187] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.187] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.038] | : . ' , attachPackages() ...
[08:08:30.187] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.187] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.038] | : . ' , ; packages: [n=0] 
[08:08:30.187] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.187] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.038] | : . ' , attachPackages() ... done
[08:08:30.188] | signalConditions() ... done
[08:08:30.188] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:30.188] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:30.188] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:30.188] value(<MulticoreFuture>, ...) ...
[08:08:30.188] value(<MulticoreFuture>, ...) ... done
[08:08:30.188] value() for MulticoreFuture (<unnamed-101>) ...
[08:08:30.188] | result() for MulticoreFuture ...
[08:08:30.184] | : . ' , ; ` | List of 1
[08:08:30.184] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.184] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.184] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.184] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:30.184] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.184] | : . ' , ; ` |     ...)  
[08:08:30.184] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.184] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.184] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:30.184] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.184] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.184] | : . ' , ; ` |     ...)  
[08:08:30.184] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.184] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.189] | result() for MulticoreFuture ... done
[08:08:30.189] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:30.189] | result() for MulticoreFuture ...
[08:08:30.189] | result() for MulticoreFuture ... done
[08:08:30.189] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:30.189] | signalConditions() ...
[08:08:30.189] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.189] | : include = ‘immediateCondition’
[08:08:30.189] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.189] | : exclude = 
[08:08:30.189] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:30.189] | : resignal = FALSE
[08:08:30.189] | : Number of conditions: 6
[08:08:30.190] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:30.190] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:30.190] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:30.190] | :  int 6
[08:08:30.190] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.190] | : already signaled, skipping
[08:08:30.190] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.191] | : already signaled, skipping
[08:08:30.191] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.191] | : already signaled, skipping
[08:08:30.191] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.191] | : already signaled, skipping
[08:08:30.191] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.191] | : already signaled, skipping
[08:08:30.191] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.192] | : already signaled, skipping
[08:08:30.192] | signalConditions() ... done
[08:08:30.192] | check for misuse ...
[08:08:30.192] | check for misuse ... done
[08:08:30.192] value() for MulticoreFuture (<unnamed-101>) ... done
[08:08:30.192] value: <NULL>
[08:08:30.192] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:30.192] | nx: 6
[08:08:30.193] | relay: TRUE
[08:08:30.193] | stdout: TRUE
[08:08:30.193] | signal: TRUE
[08:08:30.193] | resignal: FALSE
[08:08:30.193] | force: TRUE
[08:08:30.193] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:30.193] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:30.193] | until=4
[08:08:30.193] | relaying element #4
[08:08:30.194] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:30.194] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:30.194] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:30.194] resolve() for MulticoreFuture ...
[08:08:30.194] resolve() for MulticoreFuture ... done
[08:08:30.194] length: 3 (resolved future 3)

[08:08:30.194] checking value #4:
[08:08:30.195] 'obj' is MulticoreFuture
[08:08:30.195] readImmediateCondition() ...
[08:08:30.195] | Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:30.195] | Number of RDS files: 0
[08:08:30.195] | Returned conditions set:
[08:08:30.195] |  list()
[08:08:30.196] readImmediateCondition() ... done
[08:08:30.196] MulticoreFuture #4
[08:08:30.196] signalConditionsASAP(MulticoreFuture, pos=4) ...
[08:08:30.196] | nx: 6
[08:08:30.196] | relay: TRUE
[08:08:30.196] | stdout: TRUE
[08:08:30.196] | signal: TRUE
[08:08:30.196] | resignal: FALSE
[08:08:30.197] | force: TRUE
[08:08:30.197] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:30.197] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:30.197] | until=4
[08:08:30.197] | relaying element #4
[08:08:30.197] | value() for MulticoreFuture (<unnamed-102>) ...
[08:08:30.197] | : result() for MulticoreFuture ...
[08:08:30.198] | : . readImmediateCondition() ...
[08:08:30.198] | : . ' Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:30.198] | : . ' Number of RDS files: 0
[08:08:30.198] | : . ' Returned conditions set:
[08:08:30.199] | : . '  list()
[08:08:30.199] | : . readImmediateCondition() ... done
[08:08:30.199] | : . result() for MulticoreFuture ...
[08:08:30.199] | : . result() for MulticoreFuture ... done
[08:08:30.200] | : . signalConditions() ...
[08:08:30.200] | : . ' include = ‘immediateCondition’
[08:08:30.200] | : . ' exclude = 
[08:08:30.200] | : . ' resignal = FALSE
[08:08:30.200] | : . ' Number of conditions: 6
[08:08:30.200] | : . '  int 6
[08:08:30.201] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.201] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.201] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.201] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.201] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.201] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.202] | : . signalConditions() ... done
[08:08:30.202] | : result() for MulticoreFuture ... done
[08:08:30.202] | : result() for MulticoreFuture ...
[08:08:30.202] | : result() for MulticoreFuture ... done
[08:08:30.202] | : signalConditions() ...
[08:08:30.202] | : . include = ‘immediateCondition’
[08:08:30.202] | : . exclude = 
[08:08:30.202] | : . resignal = FALSE
[08:08:30.203] | : . Number of conditions: 6
[08:08:30.203] | : .  int 6
[08:08:30.203] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.203] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.203] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.204] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.204] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.204] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.204] | : signalConditions() ... done
[08:08:30.204] | : relay stdout ...
[08:08:30.204] | : relay stdout ... done
[08:08:30.204] | : check for misuse ...
[08:08:30.204] | : check for misuse ... done
[08:08:30.205] | value() for MulticoreFuture (<unnamed-102>) ... done
[08:08:30.205] | result() for MulticoreFuture ...
[08:08:30.205] | result() for MulticoreFuture ... done
[08:08:30.205] | signalConditions() ...
[08:08:30.205] | : include = ‘immediateCondition’
[08:08:30.205] | : exclude = 
[08:08:30.205] | : resignal = FALSE
[08:08:30.205] | : Number of conditions: 6
[08:08:30.206] | :  int 6
[08:08:30.206] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.206] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.206] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.206] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.207] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.207] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.207] | signalConditions() ... done
[08:08:30.207] | result() for MulticoreFuture ...
[08:08:30.207] | result() for MulticoreFuture ... done
[08:08:30.207] | signalConditions() ...
[08:08:30.207] | : include = ‘condition’
[08:08:30.207] | : exclude = ‘error’, ‘immediateCondition’
[08:08:30.208] | : resignal = TRUE
[08:08:30.208] | : Number of conditions: 6
[08:08:30.208] | :  int 6
[08:08:30.208] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.208] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.121] | : . ' , attachPackages() ...
[08:08:30.208] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.209] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.121] | : . ' , ; packages: [n=1] ‘future’
[08:08:30.209] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.209] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.122] | : . ' , attachPackages() ... done
[08:08:30.209] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.209] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.122] | : . ' , attachPackages() ...
[08:08:30.209] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.209] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.122] | : . ' , ; packages: [n=0] 
[08:08:30.210] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.210] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.122] | : . ' , attachPackages() ... done
[08:08:30.210] | signalConditions() ... done
[08:08:30.210] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.210] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.210] signalConditionsASAP(MulticoreFuture, pos=4) ... done
[08:08:30.210] value(<MulticoreFuture>, ...) ...
[08:08:30.210] value(<MulticoreFuture>, ...) ... done
[08:08:30.211] value() for MulticoreFuture (<unnamed-102>) ...
[08:08:30.211] | result() for MulticoreFuture ...
[08:08:30.211] | result() for MulticoreFuture ... done
[08:08:30.211] | result() for MulticoreFuture ...
[08:08:30.211] | result() for MulticoreFuture ... done
[08:08:30.211] | signalConditions() ...
[08:08:30.211] | : include = ‘immediateCondition’
[08:08:30.211] | : exclude = 
[08:08:30.212] | : resignal = FALSE
[08:08:30.212] | : Number of conditions: 6
[08:08:30.212] | :  int 6
[08:08:30.212] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.212] | : already signaled, skipping
[08:08:30.212] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.213] | : already signaled, skipping
[08:08:30.213] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.213] | : already signaled, skipping
[08:08:30.213] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.213] | : already signaled, skipping
[08:08:30.213] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.213] | : already signaled, skipping
[08:08:30.213] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.213] | : already signaled, skipping
[08:08:30.214] | signalConditions() ... done
[08:08:30.214] | check for misuse ...
[08:08:30.214] | check for misuse ... done
[08:08:30.214] value() for MulticoreFuture (<unnamed-102>) ... done
[08:08:30.214] value: <numeric>
[08:08:30.214] signalConditionsASAP(MulticoreFuture, pos=4) ...
[08:08:30.214] | nx: 6
[08:08:30.214] | relay: TRUE
[08:08:30.215] | stdout: TRUE
[08:08:30.215] | signal: TRUE
[08:08:30.215] | resignal: FALSE
[08:08:30.215] | force: TRUE
[08:08:30.215] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.215] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.215] | until=5
[08:08:30.215] | relaying element #5
[08:08:30.215] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.216] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.216] signalConditionsASAP(MulticoreFuture, pos=4) ... done
[08:08:30.216] resolve() for MulticoreFuture ...
[08:08:30.216] resolve() for MulticoreFuture ... done
[08:08:30.216] length: 2 (resolved future 4)

[08:08:30.216] checking value #5:
[08:08:30.216] 'obj' is NULL
[08:08:30.217] signalConditionsASAP(NULL, pos=5) ...
[08:08:30.217] | nx: 6
[08:08:30.217] | relay: TRUE
[08:08:30.217] | stdout: TRUE
[08:08:30.217] | signal: TRUE
[08:08:30.217] | resignal: FALSE
[08:08:30.217] | force: TRUE
[08:08:30.217] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.217] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.218] | until=6
[08:08:30.218] | relaying element #6
[08:08:30.218] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:30.218] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.218] signalConditionsASAP(NULL, pos=5) ... done
[08:08:30.218] signalConditionsASAP(NULL, pos=5) ...
[08:08:30.218] | nx: 6
[08:08:30.218] | relay: TRUE
[08:08:30.218] | stdout: TRUE
[08:08:30.219] | signal: TRUE
[08:08:30.219] | resignal: FALSE
[08:08:30.219] | force: TRUE
[08:08:30.219] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:30.219] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.219] | until=6
[08:08:30.219] | relaying element #6
[08:08:30.219] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:30.219] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.220] signalConditionsASAP(NULL, pos=5) ... done
[08:08:30.220] length: 1 (resolved future 5)

[08:08:30.220] checking value #6:
[08:08:30.220] 'obj' is atomic
[08:08:30.220] signalConditionsASAP(numeric, pos=6) ...
[08:08:30.220] | nx: 6
[08:08:30.220] | relay: TRUE
[08:08:30.220] | stdout: TRUE
[08:08:30.221] | signal: TRUE
[08:08:30.221] | resignal: FALSE
[08:08:30.221] | force: TRUE
[08:08:30.221] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:30.221] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.221] | until=6
[08:08:30.221] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:30.221] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.221] signalConditionsASAP(numeric, pos=6) ... done
[08:08:30.222] length: 0 (resolved future 6)

[08:08:30.222] Relaying remaining futures ...
[08:08:30.222] | signalConditionsASAP(NULL, pos=0) ...
[08:08:30.222] | : nx: 6
[08:08:30.222] | : relay: TRUE
[08:08:30.222] | : stdout: TRUE
[08:08:30.222] | : signal: TRUE
[08:08:30.223] | : resignal: FALSE
[08:08:30.223] | : force: TRUE
[08:08:30.223] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:30.223] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
 - flush all
[08:08:30.223] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:30.223] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.223] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:30.223] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:3] 2 3 1
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
Dimensions: c(2, 1, 3, 1)
[08:08:30.227] future(..., label = NULL) ...
[08:08:30.227] | lazy: FALSE
[08:08:30.227] | stdout: TRUE
[08:08:30.228] | conditions: [n=1] ‘condition’
[08:08:30.228] | gc: FALSE
[08:08:30.228] | earlySignal: FALSE
[08:08:30.228] | getGlobalsAndPackages() ...
[08:08:30.228] | : Searching for globals ...
[08:08:30.229] | : . globals found: [0] 
[08:08:30.229] | : Searching for globals ... done
[08:08:30.230] | : globals: [0] <none>
[08:08:30.230] | : packages: [0] <none>
[08:08:30.230] | getGlobalsAndPackages() ... done
[08:08:30.230] | run() for ‘Future’ (<unnamed-103>) ...
[08:08:30.230] | : state: ‘created’
[08:08:30.230] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.230] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.231] | : Using MulticoreFutureBackend ...
[08:08:30.231] | : . Number of futures since start: 12 (12 created, 12 launched, 16 finished)
[08:08:30.231] | : . Launching futures ...
[08:08:30.231] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:30.231] | : . ' , getFutureData() ...
[08:08:30.231] | : . ' , ; getFutureCore() ...
[08:08:30.231] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:30.231] | : . ' , ; getFutureCore() ... done
[08:08:30.231] | : . ' , ; getFutureCapture() ...
[08:08:30.232] | : . ' , ; getFutureCapture() ... done
[08:08:30.232] | : . ' , ; getFutureContext() ...
[08:08:30.232] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.232] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:30.232] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.232] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:30.232] | : . ' , ; getFutureContext() ... done
[08:08:30.232] | : . ' , getFutureData() ... done
[08:08:30.233] | : . ' , requestCore(..., workers = 2) ...
[08:08:30.233] | : . ' , requestCore(..., workers = 2) ... done
[08:08:30.235] | : . ' , MulticoreFuture started
[08:08:30.236] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:30.236] | : . Launching futures ... done
[08:08:30.236] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:30.236] | : Using MulticoreFutureBackend ... done
[08:08:30.236] | run() for ‘Future’ (<unnamed-103>) ... done
[08:08:30.237] future(..., label = NULL) ... done
[08:08:30.237] future(..., label = NULL) ...
[08:08:30.237] | lazy: FALSE
[08:08:30.237] | stdout: TRUE
[08:08:30.237] | conditions: [n=1] ‘condition’
[08:08:30.237] | gc: FALSE
[08:08:30.238] | earlySignal: FALSE
[08:08:30.238] | getGlobalsAndPackages() ...
[08:08:30.238] | : Searching for globals ...
[08:08:30.239] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.239] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:30.239] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.240] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:30.240] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:30.240] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:30.240] | : . ' , ; ` | New stack:
[08:08:30.240] | : . globals found: [0] 
[08:08:30.241] | : Searching for globals ... done
[08:08:30.241] | : globals: [0] <none>
[08:08:30.241] | : packages: [0] <none>
[08:08:30.241] | getGlobalsAndPackages() ... done
[08:08:30.241] | run() for ‘Future’ (<unnamed-104>) ...
[08:08:30.242] | : state: ‘created’
[08:08:30.242] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.242] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.242] | : Using MulticoreFutureBackend ...
[08:08:30.242] | : . Number of futures since start: 13 (13 created, 13 launched, 16 finished)
[08:08:30.242] | : . Launching futures ...
[08:08:30.243] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:30.243] | : . ' , getFutureData() ...
[08:08:30.243] | : . ' , ; getFutureCore() ...
[08:08:30.243] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:30.247] | : . ' , ; getFutureCore() ... done
[08:08:30.240] | : . ' , ; ` | List of 1
[08:08:30.240] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.240] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.240] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:30.240] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.240] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.240] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.240] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.240] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.248] | : . ' , ; getFutureCapture() ...
[08:08:30.248] | : . ' , ; ` | Old stack:
[08:08:30.248] | : . ' , ; getFutureCapture() ... done
[08:08:30.248] | : . ' , ; getFutureContext() ...
[08:08:30.248] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.248] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:30.248] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.249] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:30.249] | : . ' , ; getFutureContext() ... done
[08:08:30.249] | : . ' , getFutureData() ... done
[08:08:30.249] | : . ' , requestCore(..., workers = 2) ...
[08:08:30.250] | : . ' , requestCore(..., workers = 2) ... done
[08:08:30.252] | : . ' , MulticoreFuture started
[08:08:30.248] | : . ' , ; ` | List of 1
[08:08:30.248] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.248] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.248] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.248] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:30.248] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.248] | : . ' , ; ` |     ...)  
[08:08:30.248] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.248] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.248] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:30.248] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.248] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.248] | : . ' , ; ` |     ...)  
[08:08:30.248] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.248] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.253] | : . ' , ; ` | Not identical
[08:08:30.253] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:30.253] | : . ' , ; ` | all.equal() for future ...
[08:08:30.253] | : . Launching futures ... done
[08:08:30.253] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:30.254] | : Using MulticoreFutureBackend ... done
[08:08:30.254] | run() for ‘Future’ (<unnamed-104>) ... done
[08:08:30.254] future(..., label = NULL) ... done
[08:08:30.256] future(..., label = NULL) ...
[08:08:30.256] | lazy: FALSE
[08:08:30.256] | stdout: TRUE
[08:08:30.256] | conditions: [n=1] ‘condition’
[08:08:30.257] | gc: FALSE
[08:08:30.257] | earlySignal: FALSE
[08:08:30.257] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.257] | getGlobalsAndPackages() ...
[08:08:30.257] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:30.257] | : Searching for globals ...
[08:08:30.257] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.258] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:30.258] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:30.259] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:30.259] | : . ' , ; ` | New stack:
[08:08:30.253] | : . ' , ; ` | : List of 2
[08:08:30.253] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.253] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.253] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:30.253] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.253] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.253] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.253] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.253] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.253] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.253] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.253] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:30.253] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.253] | : . ' , ; ` | :     ...)  
[08:08:30.253] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.253] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.253] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:30.253] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.253] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.253] | : . ' , ; ` | :     ...)  
[08:08:30.253] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.261] | : . ' , ; ` | : Formals differ
[08:08:30.261] | : . ' , ; ` | all.equal() for future ... done
[08:08:30.261] | : . ' , ; ` | Future strategies differ at level 1
[08:08:30.261] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:30.262] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:30.262] | : . ' , ; ` List of future strategies:
[08:08:30.262] | : . ' , ; ` 1. sequential:
[08:08:30.262] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:30.262] | : . ' , ; `    - tweaked: FALSE
[08:08:30.262] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.259] | : . ' , ; ` | List of 1
[08:08:30.259] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.259] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.259] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:30.259] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.259] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.259] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.259] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.259] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.265] | : . ' , ; ` | Old stack:
[08:08:30.266] | : . globals found: [1] ‘{’
[08:08:30.262] | : . ' , ; ` List of 1
[08:08:30.262] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.262] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.262] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:30.262] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.262] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.262] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.262] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.262] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.266] | : Searching for globals ... done
[08:08:30.266] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:30.266] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:30.266] | : Resolving globals: FALSE
[08:08:30.267] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.267] | : Search for packages associated with the globals ...
[08:08:30.267] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:30.267] | : . Packages associated with globals: [1] ‘base’
[08:08:30.268] | : . Packages: [1] ‘base’
[08:08:30.268] | : Search for packages associated with the globals ... done
[08:08:30.268] | : Packages after dropping 'base': [0] 
[08:08:30.269] | : globals: [0] 
[08:08:30.269] | : packages: [0] 
[08:08:30.269] | getGlobalsAndPackages() ... done
[08:08:30.270] | run() for ‘Future’ (<unnamed-105>) ...
[08:08:30.267] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.267] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.267] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:30.267] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.267] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.267] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.267] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.270] | : state: ‘created’
[08:08:30.270] | : . ' , ; ` | : init: TRUE
[08:08:30.270] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:30.270] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.270] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:30.270] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.271] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:30.271] | : Using MulticoreFutureBackend ...
[08:08:30.271] | : . Number of futures since start: 14 (14 created, 14 launched, 16 finished)
[08:08:30.271] | : . ' , ; ` | : .  list()
[08:08:30.271] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:30.271] | : . Launching futures ...
[08:08:30.271] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:30.271] | : . ' , ; ` | : .  list()
[08:08:30.272] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:30.272] | : . ' , getFutureData() ...
[08:08:30.272] | : . ' , ; getFutureCore() ...
[08:08:30.272] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:30.272] | : . ' , ; getFutureCore() ... done
[08:08:30.272] | : . ' , ; getFutureCapture() ...
[08:08:30.273] | : . ' , ; getFutureCapture() ... done
[08:08:30.273] | : . ' , ; getFutureContext() ...
[08:08:30.266] | : . ' , ; ` | List of 1
[08:08:30.266] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.266] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.266] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.266] | : . ' , ; ` |   [08:08:30.272] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:30.272] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:30..- attr(*, "init")= chr "done"
[08:08:30.266] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(const.272] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
raints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.266] | : . ' , ; ` |     ...)  
[08:08:30.266] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.266] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.266] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:30.266] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.266] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.266] | : . ' , ; ` |     ...)  
[08:08:30.266] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.266] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.273] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.273] | : . ' , ; ` | Not identical
[08:08:30.273] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:30.273] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:30.273] | : . ' , ; ` | all.equal() for future ...
[08:08:30.274] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:30.274] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.274] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:30.274] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.274] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:30.274] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:30.274] | : . ' , ; getFutureContext() ... done
[08:08:30.274] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:30.274] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:30.274] | : . ' , getFutureData() ... done
[08:08:30.275] | : . ' , requestCore(..., workers = 2) ...
[08:08:30.275] | : . ' , ; Poll #1 (0): usedCores() = 2, workers = 2
[08:08:30.277] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:30.278] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:30.278] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:30.278] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:30.278] | : . ' , ; ` | : New stack:
[08:08:30.274] | : . ' , ; ` | : List of 2
[08:08:30.274] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.274] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.274] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:30.274] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.274] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.274] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.274] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.274] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.274] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.274] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.274] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:30.274] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.274] | : . ' , ; ` | :     ...)  
[08:08:30.274] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.274] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.274] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:30.274] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.274] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.274] | : . ' , ; ` | :     ...)  
[08:08:30.274] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.283] | : . ' , ; ` | : Formals differ
[08:08:30.283] | : . ' , ; ` | all.equal() for future ... done
[08:08:30.283] | : . ' , ; ` | Future strategies differ at level 1
[08:08:30.283] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:30.283] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:30.278] | : . ' , ; ` | : List of 1
[08:08:30.278] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.278] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.278] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.278] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:30.278] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.278] | : . ' , ; ` | :     ...)  
[08:08:30.278] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.278] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.278] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:30.278] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.278] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.278] | : . ' , ; ` | :     ...)  
[08:08:30.278] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.278] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.283] | : . ' , ; ` | : Old stack:
[08:08:30.283] | : . ' , ; ` List of future strategies:
[08:08:30.283] | : . ' , ; ` 1. sequential:
[08:08:30.283] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:30.283] | : . ' , ; `    - tweaked: FALSE
[08:08:30.283] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.284] | : . ' , ; ` List of 1
[08:08:30.284] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.284] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.284] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:30.284] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.284] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.284] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.284] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.284] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.288] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:30.288] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = F[08:08:30.284] | : . ' , ; ` | : List of 1
[08:08:30.284] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, ALSE) ... done
envir = parent.frame())  
[08:08:30.284] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.284] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:30.284] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.284] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.284] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.284] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.284] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564301c2f448> 
[08:08:30.284] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.284] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.284] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.288] | : . ' , ; ` | : Not identical
[08:08:30.288] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.289] | : . ' , ; ` | : all.equal() for future ...
[08:08:30.289] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:30.289] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.289] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.289] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:30.289] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.289] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.289] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.289] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.292] | : . ' , ; ` | : init: TRUE
[08:08:30.292] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:30.292] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:30.292] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:30.292] | : . ' , ; ` | : .  list()
[08:08:30.293] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:30.293] | : . ' , ; ` | : .  list()
[08:08:30.293] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:30.294] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:30.294] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:30.294] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:30.295] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:30.296] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:30.296] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:30.296] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.289] | : . ' , ; ` | : . List of 2
[08:08:30.289] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.289] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.289] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.289] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:30.289] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.289] | : . ' , ; ` | : .     ...)  
[08:08:30.289] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.289] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.289] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:30.289] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.289] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.289] | : . ' , ; ` | : .     ...)  
[08:08:30.289] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.289] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.289] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.289] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:30.289] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.289] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.289] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.289] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.289] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564301c2f448> 
[08:08:30.289] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.289] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.296] | : . ' , ; readImmediateCondition() ...
[08:08:30.296] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:30.296] | : . ' , ; ` Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:30.296] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:30.297] | : . ' , ; ` | : . Formals differ
[08:08:30.297] | : . ' , ; ` Number of RDS files: 0
[08:08:30.297] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:30.297] | : . ' , ; ` | : all.equal() for future ... done
[08:08:30.297] | : . ' , ; ` Returned conditions set:
[08:08:30.297] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:30.297] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:30.297] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:30.297] | : . ' , ; `  list()
[08:08:30.297] | : . ' , ; ` | List of future strategies:
[08:08:30.297] | : . ' , ; ` | 1. multicore:
[08:08:30.297] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:30.297] | : . ' , ; ` |    - tweaked: FALSE
[08:08:30.297] | : . ' , ; ` |    - call: plan(strategy)
[08:08:30.298] | : . ' , ; readImmediateCondition() ... done
[08:08:30.300] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:30.300] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:30.301] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:30.301] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:30.301] | : . ' , ; ` | : New stack:
[08:08:30.298] | : . ' , ; ` | List of 1
[08:08:30.298] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.298] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.298] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.298] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:30.298] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.298] | : . ' , ; ` |     ...)  
[08:08:30.298] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.298] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.298] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:30.298] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.298] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.298] | : . ' , ; ` |     ...)  
[08:08:30.298] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.298] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.302] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:30.303] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:30.303] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.303] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.303] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:30.303] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:30.303] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:30.304] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:30.301] | : . ' , ; ` | : List of 1
[08:08:30.301] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.301] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.301] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.301] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:30.301] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.301] | : . ' , ; ` | :     ...)  
[08:08:30.301] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.301] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.301] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:30.301] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.301] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.301] | : . ' , ; ` | :     ...)  
[08:08:30.301] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.301] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.306] | : . ' , ; ` | : Old stack:
[08:08:30.308] | : . ' , ; readImmediateCondition() ...
[08:08:30.308] | : . ' , ; ` Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:30.309] | : . ' , ; ` Number of RDS files: 0
[08:08:30.309] | : . ' , ; ` Returned conditions set:
[08:08:30.309] | : . ' , ; `  list()
[08:08:30.310] | : . ' , ; readImmediateCondition() ... done
[08:08:30.310] | : . ' , ; Poll #2 (0.03 secs): usedCores() = 2, workers = 2
[08:08:30.306] | : . ' , ; ` | : List of 1
[08:08:30.306] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.306] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.306] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:30.306] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.306] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.306] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.306] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.306] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643007d3650> 
[08:08:30.306] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.306] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.306] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.311] | : . ' , ; ` | : Not identical
[08:08:30.312] | : . ' , ; ` | : all.equal() for future ...
[08:08:30.312] | : . ' , ; ` | : . List of 2
[08:08:30.312] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.312] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.312] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.312] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:30.312] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.312] | : . ' , ; ` | : .     ...)  
[08:08:30.312] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.312] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.312] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:30.312] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.312] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.312] | : . ' , ; ` | : .     ...)  
[08:08:30.312] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.312] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.312] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.312] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:30.312] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.312] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.312] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.312] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.312] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5643007d3650> 
[08:08:30.312] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.312] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.320] | : . ' , ; ` | : . Formals differ
[08:08:30.320] | : . ' , ; ` | : all.equal() for future ... done
[08:08:30.320] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:30.320] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:30.321] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:30.321] | : . ' , ; readImmediateCondition() ...
[08:08:30.321] | : . ' , ; ` | List of future strategies:
[08:08:30.321] | : . ' , ; ` | 1. multicore:
[08:08:30.321] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:30.321] | : . ' , ; ` |    - tweaked: FALSE
[08:08:30.321] | : . ' , ; ` |    - call: plan(strategy)
[08:08:30.321] | : . ' , ; ` Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:30.322] | : . ' , ; ` Number of RDS files: 0
[08:08:30.322] | : . ' , ; ` Returned conditions set:
[08:08:30.322] | : . ' , ; `  list()
[08:08:30.322] | : . ' , ; readImmediateCondition() ... done
[08:08:30.323] | : . ' , ; value() for MulticoreFuture (<unnamed-103>) ...
[08:08:30.323] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:30.324] | : . ' , ; ` | readImmediateCondition() ...
[08:08:30.324] | : . ' , ; ` | : Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:30.325] | : . ' , ; ` | : Number of RDS files: 0
[08:08:30.325] | : . ' , ; ` | : Returned conditions set:
[08:08:30.325] | : . ' , ; ` | :  list()
[08:08:30.325] | : . ' , ; ` | readImmediateCondition() ... done
[08:08:30.326] | : . ' , ; ` | result() for MulticoreFuture ...
[08:08:30.326] | : . ' , ; ` | result() for MulticoreFuture ... done
[08:08:30.326] | : . ' , ; ` | signalConditions() ...
[08:08:30.327] | : . ' , ; ` | : include = ‘immediateCondition’
[08:08:30.327] | : . ' , ; ` | : exclude = 
[08:08:30.327] | : . ' , ; ` | : resignal = FALSE
[08:08:30.327] | : . ' , ; ` | : Number of conditions: 6
[08:08:30.327] | : . ' , ; ` | :  int 6
[08:08:30.328] | : . ' , ; ` | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.321] | : . ' , ; ` | List of 1
[08:08:30.321] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.321] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.321] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.321] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:30.321] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.321] | : . ' , ; ` |     ...)  
[08:08:30.321] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.321] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.321] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:30.321] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.321] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.321] | : . ' , ; ` |     ...)  
[08:08:30.321] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.321] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.328] | : . ' , ; ` | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.329] | : . ' , ; ` | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.329] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:30.329] | : . ' , ; ` | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.329] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:30.329] | : . ' , ; ` | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.329] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.329] | : . ' , ; ` | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.329] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.330] | : . ' , ; ` | signalConditions() ... done
[08:08:30.330] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:30.330] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:30.330] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:30.330] | : . ' , ; ` result() for MulticoreFuture ...
[08:08:30.330] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:30.330] | : . ' , ; ` result() for MulticoreFuture ... done
[08:08:30.330] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:30.330] | : . ' , ; ` signalConditions() ...
[08:08:30.331] | : . ' , ; ` | include = ‘immediateCondition’
[08:08:30.331] | : . ' , ; ` | exclude = 
[08:08:30.331] | : . ' , ; ` | resignal = FALSE
[08:08:30.331] | : . ' , ; ` | Number of conditions: 6
[08:08:30.331] | : . ' , ; ` |  int 6
[08:08:30.332] | : . ' , ; ` | Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.332] | : . ' , ; ` | Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.332] | : . ' , ; ` | Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.332] | : . ' , ; ` | Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.332] | : . ' , ; ` | Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.332] | : . ' , ; ` | Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.333] | : . ' , ; ` signalConditions() ... done
[08:08:30.333] | : . ' , ; ` check for misuse ...
[08:08:30.333] | : . ' , ; ` check for misuse ... done
[08:08:30.333] | : . ' , ; value() for MulticoreFuture (<unnamed-103>) ... done
[08:08:30.334] | : . ' , requestCore(..., workers = 2) ... done
[08:08:30.336] | : . ' , MulticoreFuture started
[08:08:30.337] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:30.337] | : . Launching futures ... done
[08:08:30.337] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:30.337] | : Using MulticoreFutureBackend ... done
[08:08:30.337] | run() for ‘Future’ (<unnamed-105>) ... done
[08:08:30.338] future(..., label = NULL) ... done
Classes 'listenv', 'environment' <environment: 0x5643030d4cf0> 
[08:08:30.340] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.340] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:30.340] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Classes 'listenv', 'environment' <environment: 0x564301814fe8> 
 - attr(*, "dim.")=[08:08:30.340] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:30.341] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:30.341] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:30.341] | : . ' , ; ` | New stack:
 int [1:4] 2 1 3 1
 - attr(*, "dimnames.")=List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
[08:08:30.343] resolved() for listenv ...
[08:08:30.341] | : . ' , ; ` | List of 1
[08:08:30.341] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.341] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.341] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:30.341] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.341] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.341] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.341] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.341] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.345] | : . ' , ; ` | Old stack:
[08:08:30.345] | resolved() for array ...
[08:08:30.345] | : Number of elements: 6
[08:08:30.346] | : Number of futures: 6
[08:08:30.346] | : readImmediateCondition() ...
[08:08:30.346] | : . Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:30.346] | : . Number of RDS files: 0
[08:08:30.347] | : . Returned conditions set:
[08:08:30.347] | : .  list()
[08:08:30.347] | : readImmediateCondition() ... done
[08:08:30.345] | : . ' , ; ` | List of 1
[08:08:30.345] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.345] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.345] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.345] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:30.345] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.345] | : . ' , ; ` |     ...)  
[08:08:30.345] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.345] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.345] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:30.345] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.345] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.345] | : . ' , ; ` |     ...)  
[08:08:30.345] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.345] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.351] | : . ' , ; ` | Not identical
[08:08:30.351] | : . ' , ; ` | all.equal() for future ...
[08:08:30.358] | : readImmediateCondition() ...
[08:08:30.358] | : . Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:30.358] | : . Number of RDS files: 0
[08:08:30.358] | : . Returned conditions set:
[08:08:30.358] | : .  list()
[08:08:30.359] | : readImmediateCondition() ... done
[08:08:30.351] | : . ' , ; ` | : List of 2
[08:08:30.351] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.351] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.351] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:30.351] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.351] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.351] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.351] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.351] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.351] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.351] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.351] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:30.351] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.351] | : . ' , ; ` | :     ...)  
[08:08:30.351] |[08:08:30.359] | resolved() for array ... done
 : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.351] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.351] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:30.351] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.351] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.351] | : . ' , ; ` | :     ...)  
[08:08:30.351] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.359] resolved() for listenv ... done
 logi [1:2, 1, 1:3, 1] TRUE TRUE TRUE FALSE TRUE TRUE
 - attr(*, "dimnames")=List of 4
[08:08:30.360] | : . ' , ; ` | : Formals differ
  ..$ :[08:08:30.360] | : . ' , ; ` | all.equal() for future ... done
 chr [1:2] "a" "b"
[08:08:30.360] | : . ' , ; ` | Future strategies differ at level 1
  ..$ :[08:08:30.360] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:30.360] | : . ' , ; ` plan(): Setting new future backend stack:
 chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
 - attr(*, "names")=[08:08:30.361] | : . ' , ; ` List of future strategies:
[08:08:30.361] | : . ' , ; ` 1. sequential:
[08:08:30.361] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:30.361] | : . ' , ; `    - tweaked: FALSE
[08:08:30.361] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
 chr [1:6] "a" "b" "c" "d" ...
[08:08:30.362] value() for listenv ...
[08:08:30.362] | recursive: 0
[08:08:30.362] | reduce: FALSE
[08:08:30.363] | length: 6
[08:08:30.363] | elements: ‘a’, ‘b’, ‘c’, ‘d’, ‘’, ‘’
[08:08:30.364] | Number of remaining objects: 6
[08:08:30.364] | checking value #1:
[08:08:30.364] | 'obj' is atomic
[08:08:30.364] | signalConditionsASAP(numeric, pos=1) ...
[08:08:30.364] | : nx: 6
[08:08:30.364] | : relay: TRUE
[08:08:30.364] | : stdout: TRUE
[08:08:30.364] | : signal: TRUE
[08:08:30.365] | : resignal: FALSE
[08:08:30.365] | : force: TRUE
[08:08:30.365] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:30.365] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:30.365] | : until=2
[08:08:30.361] | : . ' , ; ` List of 1
[08:08:30.361] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.361] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.361] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:30.361] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.361] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.361] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.361] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.361] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.365] | : relaying element #2
[08:08:30.365] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:30.365] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:30.365] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:30.366] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:30.366] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:30.366] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.366] | length: 5 (resolved future 1)
[08:08:30.366] value() for listenv ... done
[08:08:30.366] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:30.366] checking value #2:
[08:08:30.366] 'obj' is MulticoreFuture
[08:08:30.366] MulticoreFuture #2
[08:08:30.367] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:30.367] | nx: 6
[08:08:30.367] | relay: TRUE
[08:08:30.367] | stdout: TRUE
[08:08:30.367] | signal: TRUE
[08:08:30.367] | resignal: FALSE
[08:08:30.367] | force: TRUE
[08:08:30.367] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:30.367] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:30.368] | until=2
[08:08:30.368] | relaying element #2
[08:08:30.368] | value() for MulticoreFuture (<unnamed-103>) ...
[08:08:30.368] | : result() for MulticoreFuture ...
[08:08:30.368] | : result() for MulticoreFuture ... done
[08:08:30.368] | : result() for MulticoreFuture ...
[08:08:30.368] | : result() for MulticoreFuture ... done
[08:08:30.369] | : signalConditions() ...
[08:08:30.369] | : . include = ‘immediateCondition’
[08:08:30.369] | : . exclude = 
[08:08:30.369] | : . resignal = FALSE
[08:08:30.366] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.366] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.366] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:30.366] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.366] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.366] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.366] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.369] | : . Number of conditions: 6
[08:08:30.369] | : . ' , ; ` | : init: TRUE
[08:08:30.369] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:30.370] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:30.369] | : .  int 6
[08:08:30.370] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:30.370] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.370] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.370] | : . ' , ; ` | : .  list()
[08:08:30.370] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.370] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.370] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:30.370] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.370] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.370] | : . ' , ; ` | : .  list()
[08:08:30.371] | : signalConditions() ... done
[08:08:30.371] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:30.371] | : relay stdout ...
[08:08:30.371] | : relay stdout ... done
[08:08:30.371] | : check for misuse ...
[08:08:30.371] | : check for misuse ... done
[08:08:30.371] | value() for MulticoreFuture (<unnamed-103>) ... done
[08:08:30.371] | result() for MulticoreFuture ...
[08:08:30.372] | result() for MulticoreFuture ... done
[08:08:30.372] | signalConditions() ...
[08:08:30.372] | : include = ‘immediateCondition’
[08:08:30.372] | : exclude = 
[08:08:30.372] | : resignal = FALSE
[08:08:30.372] | : Number of conditions: 6
[08:08:30.371] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:30.371] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:30.371] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:30.372] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:30.372] | :  int 6
[08:08:30.373] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:30.373] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.373] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:30.373] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.373] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.373] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.373] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.373] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:30.373] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.373] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:30.373] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.374] | signalConditions() ... done
[08:08:30.374] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:30.374] | result() for MulticoreFuture ...
[08:08:30.374] | result() for MulticoreFuture ... done
[08:08:30.374] | signalConditions() ...
[08:08:30.374] | : include = ‘condition’
[08:08:30.374] | : exclude = ‘error’, ‘immediateCondition’
[08:08:30.374] | : resignal = TRUE
[08:08:30.375] | : Number of conditions: 6
[08:08:30.375] | :  int 6
[08:08:30.375] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.375] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.236] | : . ' , attachPackages() ...
[08:08:30.376] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.376] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.237] | : . ' , ; packages: [n=1] ‘future’
[08:08:30.376] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.376] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.237] | : . ' , attachPackages() ... done
[08:08:30.376] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.376] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.237] | : . ' , attachPackages() ...
[08:08:30.376] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.377] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.377] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:30.237] | : . ' , ; packages: [n=0] 
[08:08:30.377] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:30.377] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.377] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.377] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:30.238] | : . ' , attachPackages() ... done
[08:08:30.377] | signalConditions() ... done
[08:08:30.377] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:30.377] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:30.378] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:30.378] | : . ' , ; ` | : New stack:
[08:08:30.378] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:30.378] value(<MulticoreFuture>, ...) ...
[08:08:30.378] value(<MulticoreFuture>, ...) ... done
[08:08:30.378] value() for MulticoreFuture (<unnamed-103>) ...
[08:08:30.378] | result() for MulticoreFuture ...
[08:08:30.378] | result() for MulticoreFuture ... done
[08:08:30.379] | result() for MulticoreFuture ...
[08:08:30.379] | result() for MulticoreFuture ... done
[08:08:30.379] | signalConditions() ...
[08:08:30.379] | : include = ‘immediateCondition’
[08:08:30.379] | : exclude = 
[08:08:30.379] | : resignal = FALSE
[08:08:30.379] | : Number of conditions: 6
[08:08:30.379] | :  int 6
[08:08:30.380] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.380] | : already signaled, skipping
[08:08:30.380] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.380] | : already signaled, skipping
[08:08:30.380] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.381] | : already signaled, skipping
[08:08:30.381] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.381] | : already signaled, skipping
[08:08:30.381] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.381] | : already signaled, skipping
[08:08:30.381] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.381] | : already signaled, skipping
[08:08:30.381] | signalConditions() ... done
[08:08:30.382] | check for misuse ...
[08:08:30.382] | check for misuse ... done
[08:08:30.382] value() for MulticoreFuture (<unnamed-103>) ... done
[08:08:30.382] value: <numeric>
[08:08:30.382] signalConditionsASAP(MulticoreFuture, pos=2) ...
[08:08:30.382] | nx: 6
[08:08:30.382] | relay: TRUE
[08:08:30.382] | stdout: TRUE
[08:08:30.383] | signal: TRUE
[08:08:30.378] | : . ' , ; ` | : List of 1
[08:08:30.378] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.378] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.378] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.378] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:30.378] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.378] | : . ' , ; ` | :     ...)  
[08:08:30.378] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.378] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.378] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:30.378] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.378] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.378] | : . ' , ; ` | :     ...)  
[08:08:30.378] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.378] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.383] | resignal: FALSE
[08:08:30.383] | : . ' , ; ` | : Old stack:
[08:08:30.383] | force: TRUE
[08:08:30.383] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:30.383] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:30.383] | until=3
[08:08:30.383] | relaying element #3
[08:08:30.383] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:30.384] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:30.384] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[08:08:30.384] resolve() for MulticoreFuture ...
[08:08:30.384] resolve() for MulticoreFuture ... done
[08:08:30.384] length: 4 (resolved future 2)

[08:08:30.384] checking value #3:
[08:08:30.384] 'obj' is MulticoreFuture
[08:08:30.385] readImmediateCondition() ...
[08:08:30.385] | Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:30.385] | Number of RDS files: 0
[08:08:30.385] | Returned conditions set:
[08:08:30.385] |  list()
[08:08:30.386] readImmediateCondition() ... done
[08:08:30.386] MulticoreFuture #3
[08:08:30.386] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:30.386] | nx: 6
[08:08:30.386] | relay: TRUE
[08:08:30.386] | stdout: TRUE
[08:08:30.386] | signal: TRUE
[08:08:30.387] | resignal: FALSE
[08:08:30.387] | force: TRUE
[08:08:30.387] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:30.387] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:30.387] | until=3
[08:08:30.387] | relaying element #3
[08:08:30.383] | : . ' , ; ` | : List of 1
[08:08:30.383] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.383] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.383] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:30.383] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.383] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.383] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.383] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.383] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564304586420> 
[08:08:30.383] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.383] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.383] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.387] | value() for MulticoreFuture (<unnamed-104>) ...
[08:08:30.387] | : . ' , ; ` | : Not identical
[08:08:30.388] | : result() for MulticoreFuture ...
[08:08:30.388] | : . ' , ; ` | : all.equal() for future ...
[08:08:30.388] | : . readImmediateCondition() ...
[08:08:30.388] | : . ' Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:30.389] | : . ' Number of RDS files: 0
[08:08:30.389] | : . ' Returned conditions set:
[08:08:30.389] | : . '  list()
[08:08:30.390] | : . readImmediateCondition() ... done
[08:08:30.390] | : . result() for MulticoreFuture ...
[08:08:30.390] | : . result() for MulticoreFuture ... done
[08:08:30.391] | : . signalConditions() ...
[08:08:30.391] | : . ' include = ‘immediateCondition’
[08:08:30.391] | : . ' exclude = 
[08:08:30.391] | : . ' resignal = FALSE
[08:08:30.391] | : . ' Number of conditions: 6
[08:08:30.392] | : . '  int 6
[08:08:30.392] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.393] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.393] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.393] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.393] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.393] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.394] | : . signalConditions() ... done
[08:08:30.394] | : result() for MulticoreFuture ... done
[08:08:30.394] | : result() for MulticoreFuture ...
[08:08:30.394] | : result() for MulticoreFuture ... done
[08:08:30.394] | : signalConditions() ...
[08:08:30.395] | : . include = ‘immediateCondition’
[08:08:30.395] | : . exclude = 
[08:08:30.395] | : . resignal = FALSE
[08:08:30.395] | : . Number of conditions: 6
[08:08:30.388] | : . ' , ; ` | : . List of 2
[08:08:30.388] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.388] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.388] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.388] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:30.388] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.388] | : . ' , ; ` | : .     ...)  
[08:08:30.388] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.388] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.388] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:30.388] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.388] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.388] | : . ' , ; ` | : .     ...)  
[08:08:30.388] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.388] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.388] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:30.388] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:30.388] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.388] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.388] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.388] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:30.388] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564304586420> 
[08:08:30.388] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:30.388] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:30.395] | : .  int 6
[08:08:30.396] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.396] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.396] | : . ' , ; ` | : . Formals differ
[08:08:30.396] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.396] | : . ' , ; ` | : all.equal() for future ... done
[08:08:30.397] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:30.396] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.397] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:30.397] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.397] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:30.397] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.397] | : signalConditions() ... done
[08:08:30.397] | : relay stdout ...
[08:08:30.397] | : . ' , ; ` | List of future strategies:
[08:08:30.397] | : . ' , ; ` | 1. multicore:
[08:08:30.397] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:30.397] | : . ' , ; ` |    - tweaked: FALSE
[08:08:30.397] | : . ' , ; ` |    - call: plan(strategy)
[08:08:30.397] | : relay stdout ... done
[08:08:30.398] | : check for misuse ...
[08:08:30.398] | : check for misuse ... done
[08:08:30.398] | value() for MulticoreFuture (<unnamed-104>) ... done
[08:08:30.398] | result() for MulticoreFuture ...
[08:08:30.398] | result() for MulticoreFuture ... done
[08:08:30.398] | signalConditions() ...
[08:08:30.398] | : include = ‘immediateCondition’
[08:08:30.398] | : exclude = 
[08:08:30.399] | : resignal = FALSE
[08:08:30.399] | : Number of conditions: 6
[08:08:30.399] | :  int 6
[08:08:30.399] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.399] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.400] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.400] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.400] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.400] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.400] | signalConditions() ... done
[08:08:30.400] | result() for MulticoreFuture ...
[08:08:30.400] | result() for MulticoreFuture ... done
[08:08:30.400] | signalConditions() ...
[08:08:30.401] | : include = ‘condition’
[08:08:30.401] | : exclude = ‘error’, ‘immediateCondition’
[08:08:30.401] | : resignal = TRUE
[08:08:30.401] | : Number of conditions: 6
[08:08:30.401] | :  int 6
[08:08:30.402] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.402] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.253] | : . ' , attachPackages() ...
[08:08:30.402] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.397] | : . ' , ; ` | List of 1
[08:08:30.397] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.397] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.397] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.397] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:30.397] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.397] | : . ' , ; ` |     ...)  
[08:08:30.397] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.397] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.397] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:30.397] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.397] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.397] | : . ' , ; ` |     ...)  
[08:08:30.397] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.397] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.402] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.254] | : . ' , ; packages: [n=1] ‘future’
[08:08:30.402] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:30.402] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.402] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:30.402] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.254] | : . ' , attachPackages() ... done
[08:08:30.403] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.403] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.403] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.403] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.255] | : . ' , attachPackages() ...
[08:08:30.403] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.403] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:30.403] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.255] | : . ' , ; packages: [n=0] 
[08:08:30.403] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:30.403] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.403] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:30.403] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.255] | : . ' , attachPackages() ... done
[08:08:30.403] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:30.403] | signalConditions() ... done
[08:08:30.404] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:30.404] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:30.404] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:30.404] value(<MulticoreFuture>, ...) ...
[08:08:30.404] value(<MulticoreFuture>, ...) ... done
[08:08:30.404] value() for MulticoreFuture (<unnamed-104>) ...
[08:08:30.404] | result() for MulticoreFuture ...
[08:08:30.404] | result() for MulticoreFuture ... done
[08:08:30.405] | result() for MulticoreFuture ...
[08:08:30.405] | result() for MulticoreFuture ... done
[08:08:30.405] | signalConditions() ...
[08:08:30.405] | : include = ‘immediateCondition’
[08:08:30.405] | : exclude = 
[08:08:30.405] | : resignal = FALSE
[08:08:30.405] | : Number of conditions: 6
[08:08:30.405] | :  int 6
[08:08:30.406] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.406] | : already signaled, skipping
[08:08:30.406] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.406] | : already signaled, skipping
[08:08:30.406] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.407] | : already signaled, skipping
[08:08:30.407] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.407] | : already signaled, skipping
[08:08:30.407] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.407] | : already signaled, skipping
[08:08:30.407] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.407] | : already signaled, skipping
[08:08:30.407] | signalConditions() ... done
[08:08:30.408] | check for misuse ...
[08:08:30.408] | check for misuse ... done
[08:08:30.408] value() for MulticoreFuture (<unnamed-104>) ... done
[08:08:30.408] value: <NULL>
[08:08:30.408] signalConditionsASAP(MulticoreFuture, pos=3) ...
[08:08:30.408] | nx: 6
[08:08:30.408] | relay: TRUE
[08:08:30.408] | stdout: TRUE
[08:08:30.409] | signal: TRUE
[08:08:30.409] | resignal: FALSE
[08:08:30.409] | force: TRUE
[08:08:30.409] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:30.409] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:30.409] | until=4
[08:08:30.409] | relaying element #4
[08:08:30.409] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:30.410] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:30.410] signalConditionsASAP(MulticoreFuture, pos=3) ... done
[08:08:30.410] resolve() for MulticoreFuture ...
[08:08:30.410] resolve() for MulticoreFuture ... done
[08:08:30.410] length: 3 (resolved future 3)

[08:08:30.410] checking value #4:
[08:08:30.410] 'obj' is MulticoreFuture
[08:08:30.411] readImmediateCondition() ...
[08:08:30.411] | Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:30.411] | Number of RDS files: 0
[08:08:30.411] | Returned conditions set:
[08:08:30.411] |  list()
[08:08:30.412] readImmediateCondition() ... done
[08:08:30.412] MulticoreFuture #4
[08:08:30.412] signalConditionsASAP(MulticoreFuture, pos=4) ...
[08:08:30.412] | nx: 6
[08:08:30.412] | relay: TRUE
[08:08:30.412] | stdout: TRUE
[08:08:30.412] | signal: TRUE
[08:08:30.413] | resignal: FALSE
[08:08:30.413] | force: TRUE
[08:08:30.413] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:30.413] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:30.413] | until=4
[08:08:30.413] | relaying element #4
[08:08:30.413] | value() for MulticoreFuture (<unnamed-105>) ...
[08:08:30.414] | : result() for MulticoreFuture ...
[08:08:30.414] | : . readImmediateCondition() ...
[08:08:30.414] | : . ' Path: ‘/tmp/Rtmp3W1J3o/.future/immediateConditions’
[08:08:30.414] | : . ' Number of RDS files: 0
[08:08:30.415] | : . ' Returned conditions set:
[08:08:30.415] | : . '  list()
[08:08:30.415] | : . readImmediateCondition() ... done
[08:08:30.416] | : . result() for MulticoreFuture ...
[08:08:30.416] | : . result() for MulticoreFuture ... done
[08:08:30.416] | : . signalConditions() ...
[08:08:30.416] | : . ' include = ‘immediateCondition’
[08:08:30.416] | : . ' exclude = 
[08:08:30.416] | : . ' resignal = FALSE
[08:08:30.416] | : . ' Number of conditions: 6
[08:08:30.417] | : . '  int 6
[08:08:30.420] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.420] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.420] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.420] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.420] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.420] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.420] | : . signalConditions() ... done
[08:08:30.420] | : result() for MulticoreFuture ... done
[08:08:30.421] | : result() for MulticoreFuture ...
[08:08:30.421] | : result() for MulticoreFuture ... done
[08:08:30.421] | : signalConditions() ...
[08:08:30.421] | : . include = ‘immediateCondition’
[08:08:30.421] | : . exclude = 
[08:08:30.421] | : . resignal = FALSE
[08:08:30.421] | : . Number of conditions: 6
[08:08:30.421] | : .  int 6
[08:08:30.422] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.422] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.422] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.422] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.422] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.422] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.423] | : signalConditions() ... done
[08:08:30.423] | : relay stdout ...
[08:08:30.423] | : relay stdout ... done
[08:08:30.423] | : check for misuse ...
[08:08:30.423] | : check for misuse ... done
[08:08:30.423] | value() for MulticoreFuture (<unnamed-105>) ... done
[08:08:30.423] | result() for MulticoreFuture ...
[08:08:30.423] | result() for MulticoreFuture ... done
[08:08:30.424] | signalConditions() ...
[08:08:30.424] | : include = ‘immediateCondition’
[08:08:30.424] | : exclude = 
[08:08:30.424] | : resignal = FALSE
[08:08:30.424] | : Number of conditions: 6
[08:08:30.424] | :  int 6
[08:08:30.425] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.425] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.425] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.425] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.425] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.425] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.425] | signalConditions() ... done
[08:08:30.425] | result() for MulticoreFuture ...
[08:08:30.426] | result() for MulticoreFuture ... done
[08:08:30.426] | signalConditions() ...
[08:08:30.426] | : include = ‘condition’
[08:08:30.426] | : exclude = ‘error’, ‘immediateCondition’
[08:08:30.426] | : resignal = TRUE
[08:08:30.426] | : Number of conditions: 6
[08:08:30.426] | :  int 6
[08:08:30.427] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.427] | : Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.337] | : . ' , attachPackages() ...
[08:08:30.427] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.427] | : Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.337] | : . ' , ; packages: [n=1] ‘future’
[08:08:30.427] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.427] | : Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.338] | : . ' , attachPackages() ... done
[08:08:30.427] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.428] | : Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.338] | : . ' , attachPackages() ...
[08:08:30.428] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.428] | : Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.338] | : . ' , ; packages: [n=0] 
[08:08:30.428] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.428] | : Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:30.339] | : . ' , attachPackages() ... done
[08:08:30.428] | signalConditions() ... done
[08:08:30.428] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.429] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.429] signalConditionsASAP(MulticoreFuture, pos=4) ... done
[08:08:30.429] value(<MulticoreFuture>, ...) ...
[08:08:30.429] value(<MulticoreFuture>, ...) ... done
[08:08:30.429] value() for MulticoreFuture (<unnamed-105>) ...
[08:08:30.429] | result() for MulticoreFuture ...
[08:08:30.429] | result() for MulticoreFuture ... done
[08:08:30.429] | result() for MulticoreFuture ...
[08:08:30.429] | result() for MulticoreFuture ... done
[08:08:30.430] | signalConditions() ...
[08:08:30.430] | : include = ‘immediateCondition’
[08:08:30.430] | : exclude = 
[08:08:30.430] | : resignal = FALSE
[08:08:30.430] | : Number of conditions: 6
[08:08:30.430] | :  int 6
[08:08:30.431] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.431] | : already signaled, skipping
[08:08:30.431] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.431] | : already signaled, skipping
[08:08:30.431] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.431] | : already signaled, skipping
[08:08:30.431] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.431] | : already signaled, skipping
[08:08:30.432] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.432] | : already signaled, skipping
[08:08:30.432] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:30.432] | : already signaled, skipping
[08:08:30.432] | signalConditions() ... done
[08:08:30.432] | check for misuse ...
[08:08:30.432] | check for misuse ... done
[08:08:30.432] value() for MulticoreFuture (<unnamed-105>) ... done
[08:08:30.432] value: <numeric>
[08:08:30.433] signalConditionsASAP(MulticoreFuture, pos=4) ...
[08:08:30.433] | nx: 6
[08:08:30.433] | relay: TRUE
[08:08:30.433] | stdout: TRUE
[08:08:30.433] | signal: TRUE
[08:08:30.433] | resignal: FALSE
[08:08:30.433] | force: TRUE
[08:08:30.433] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.434] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.434] | until=5
[08:08:30.434] | relaying element #5
[08:08:30.434] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.434] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.434] signalConditionsASAP(MulticoreFuture, pos=4) ... done
[08:08:30.434] resolve() for MulticoreFuture ...
[08:08:30.434] resolve() for MulticoreFuture ... done
[08:08:30.434] length: 2 (resolved future 4)

[08:08:30.435] checking value #5:
[08:08:30.435] 'obj' is NULL
[08:08:30.435] signalConditionsASAP(NULL, pos=5) ...
[08:08:30.435] | nx: 6
[08:08:30.435] | relay: TRUE
[08:08:30.435] | stdout: TRUE
[08:08:30.435] | signal: TRUE
[08:08:30.435] | resignal: FALSE
[08:08:30.436] | force: TRUE
[08:08:30.436] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.436] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.436] | until=6
[08:08:30.436] | relaying element #6
[08:08:30.436] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:30.436] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.436] signalConditionsASAP(NULL, pos=5) ... done
[08:08:30.436] signalConditionsASAP(NULL, pos=5) ...
[08:08:30.437] | nx: 6
[08:08:30.437] | relay: TRUE
[08:08:30.437] | stdout: TRUE
[08:08:30.437] | signal: TRUE
[08:08:30.437] | resignal: FALSE
[08:08:30.437] | force: TRUE
[08:08:30.437] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:30.437] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.437] | until=6
[08:08:30.438] | relaying element #6
[08:08:30.438] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:30.438] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.438] signalConditionsASAP(NULL, pos=5) ... done
[08:08:30.438] length: 1 (resolved future 5)

[08:08:30.438] checking value #6:
[08:08:30.438] 'obj' is atomic
[08:08:30.438] signalConditionsASAP(numeric, pos=6) ...
[08:08:30.439] | nx: 6
[08:08:30.439] | relay: TRUE
[08:08:30.439] | stdout: TRUE
[08:08:30.439] | signal: TRUE
[08:08:30.439] | resignal: FALSE
[08:08:30.439] | force: TRUE
[08:08:30.439] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:30.439] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.439] | until=6
[08:08:30.440] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:30.440] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.440] signalConditionsASAP(numeric, pos=6) ... done
[08:08:30.440] length: 0 (resolved future 6)

[08:08:30.440] Relaying remaining futures ...
[08:08:30.440] | signalConditionsASAP(NULL, pos=0) ...
[08:08:30.440] | : nx: 6
[08:08:30.441] | : relay: TRUE
[08:08:30.441] | : stdout: TRUE
[08:08:30.441] | : signal: TRUE
[08:08:30.441] | : resignal: FALSE
[08:08:30.441] | : force: TRUE
[08:08:30.441] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:30.441] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
 - flush all
[08:08:30.441] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:30.441] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:30.442] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:30.442] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:4] 2 1 3 1
 - attr(*, "dimnames")=List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
Type of future: multisession
[08:08:30.446] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.446] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:30.446] | : all.equal() for FutureStrategyList ...
[08:08:30.446] | : . New stack:
[08:08:30.446] | : . List of 1
[08:08:30.446] | : .  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:30.446] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.446] | : .   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:30.446] | : .   ..- attr(*, "init")= logi TRUE
[08:08:30.446] | : .   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:30.446] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:30.446] | : .   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:30.446] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:30.446] | : .   ..- attr(*, "untweakable")= chr "persistent"
[08:08:30.446] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:30.446] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.449] | : . Old stack:
[08:08:30.449] | : . List of 1
[08:08:30.449] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.449] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.449] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.449] | : .   ..- attr(*, "init")= chr "done"
[08:08:30.449] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.449] | : .     ...)  
[08:08:30.449] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.449] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.449] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:30.449] | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.449] | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.449] | : .     ...)  
[08:08:30.449] | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.449] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.452] | : . Not identical
[08:08:30.452] | : . all.equal() for future ...
[08:08:30.453] | : . ' List of 2
[08:08:30.453] | : . '  $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:30.453] | : . '     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.453] | : . '   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:30.453] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:30.453] | : . '   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:30.453] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:30.453] | : . '   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:30.453] | : . '   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:30.453] | : . '   ..- attr(*, "untweakable")= chr "persistent"
[08:08:30.453] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:30.453] | : . '  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:30.453] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:08:30.453] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:30.453] | : . '   ..- attr(*, "init")= chr "done"
[08:08:30.453] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.453] | : . '     ...)  
[08:08:30.453] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.453] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.453] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:30.453] | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564302d6d918> 
[08:08:30.453] | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:30.453] | : . '     ...)  
[08:08:30.453] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:30.459] | : . ' Formals differ
[08:08:30.459] | : . all.equal() for future ... done
[08:08:30.459] | : . Future strategies differ at level 1
[08:08:30.459] | : all.equal() for FutureStrategyList ... done
[08:08:30.459] | : plan(): Setting new future backend stack:
[08:08:30.459] | : List of future strategies:
[08:08:30.459] | : 1. multisession:
[08:08:30.459] | :    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:30.459] | :    - tweaked: FALSE
[08:08:30.459] | :    - call: plan(strategy)
[08:08:30.460] | : List of 1
[08:08:30.460] | :  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:30.460] | :     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.460] | :   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:30.460] | :   ..- attr(*, "init")= logi TRUE
[08:08:30.460] | :   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:30.460] | :     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:30.460] | :   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:30.460] | :   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:30.460] | :   ..- attr(*, "untweakable")= chr "persistent"
[08:08:30.460] | :   ..- attr(*, "call")= language plan(strategy)
[08:08:30.460] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:30.462] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:08:30.462] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.463] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:30.463] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.463] | : . Legacy shutdown of cluster workers ...
[08:08:30.463] | : . ' Stopping existing cluster ...
[08:08:30.464] | : . ' , No pre-existing cluster. Skipping
[08:08:30.464] | : . ' Stopping existing cluster ... done
[08:08:30.464] | : . Legacy shutdown of cluster workers ... done
[08:08:30.464] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:08:30.464] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:08:30.464] | : . function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:30.464] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:30.464] | : .  - attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:30.464] | : .  - attr(*, "init")= logi TRUE
[08:08:30.464] | : .  - attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:30.464] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:30.464] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:30.464] | : .  - attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:30.464] | : .  - attr(*, "untweakable")= chr "persistent"
[08:08:30.464] | : .  - attr(*, "call")= language plan(strategy)
[08:08:30.466] | : . init: TRUE
[08:08:30.467] | : . makeFutureBackend(<multisession>) ...
[08:08:30.467] | : . ' Backend function: <‘NULL’>
[08:08:30.467] | : . ' Evaluator tweak arguments: [n=0]
[08:08:30.467] | : . '  list()
[08:08:30.467] | : . ' Evaluator formal arguments: [n=4]
[08:08:30.467] | : . '  list()
[08:08:30.468] | : . ' Backend factory arguments: [n=4]
[08:08:30.468] | : . ' Dotted pair list of 4
[08:08:30.468] | : . '  $ workers     : language availableCores()
[08:08:30.468] | : . '  $ rscript_libs: language .libPaths()
[08:08:30.468] | : . '  $ gc          : logi FALSE
[08:08:30.468] | : . '  $ earlySignal : logi FALSE
[08:08:30.469] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ...
[08:08:30.469] | : . ' , Arguments:
[08:08:30.469] | : . ' , List of 5
[08:08:30.469] | : . ' ,  $ workers     : Named int 2
[08:08:30.469] | : . ' ,   ..- attr(*, "names")= chr "mc.cores"
[08:08:30.469] | : . ' ,  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:30.469] | : . ' ,  $ interrupts  : logi TRUE
[08:08:30.469] | : . ' ,  $ gc          : logi FALSE
[08:08:30.469] | : . ' ,  $ earlySignal : logi FALSE
[08:08:30.473] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ...
[08:08:30.473] | : . ' , ; workers: 2
[08:08:30.473] | : . ' , ; getCluster() ...
[08:08:30.474] | : . ' , ; getCluster() ... done
[08:08:30.474] | : . ' , ; Stopping existing cluster ...
[08:08:30.474] | : . ' , ; ` No pre-existing cluster. Skipping
[08:08:30.474] | : . ' , ; Stopping existing cluster ... done
[08:08:30.474] | : . ' , ; Starting new cluster ...
[08:08:30.474] | : . ' , ; ` makeCluster(workers, ...) ...
[08:08:30.474] | : . ' , ; ` | Arguments:
[08:08:30.474] | : . ' , ; ` | List of 2
[08:08:30.474] | : . ' , ; ` |  $             : int 2
[08:08:30.474] | : . ' , ; ` |  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:30.475] | : . ' , ; ` | .makeCluster() ...
[08:08:30.475] | : . ' , ; ` | : workers: ‘2’
[08:08:30.475] | : . ' , ; ` | : R_FUTURE_PLAN: NA
[08:08:30.476] | : . ' , ; ` | : parallelly::makeClusterPSOCK() arguments:
[08:08:30.476] | : . ' , ; ` | : List of 2
[08:08:30.476] | : . ' , ; ` | :  $             : int 2
[08:08:30.476] | : . ' , ; ` | :  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:30.752] | : . ' , ; ` | : Generated cluster UUID
[08:08:30.752] | : . ' , ; ` | : Cluster UUID: ‘297aebe174e28ef42df314fbb4f321b2’
[08:08:30.752] | : . ' , ; ` | : Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:30.754] | : . ' , ; ` | .makeCluster() ... done
[08:08:30.754] | : . ' , ; ` | Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:30.755] | : . ' , ; ` makeCluster(workers, ...) ... done
[08:08:30.755] | : . ' , ; ` Number of workers: 2
[08:08:30.755] | : . ' , ; ` Workers UUID: ‘297aebe174e28ef42df314fbb4f321b2’
[08:08:30.756] | : . ' , ; Starting new cluster ... done
[08:08:30.756] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ... done
[08:08:30.756] | : . ' , Backend: <‘MultisessionFutureBackend’, ‘ClusterFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:30.756] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ... done
[08:08:30.756] | : . makeFutureBackend(<multisession>) ... done
[08:08:30.756] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.757] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.757] | : . plan(): nbrOfWorkers() = 2
[08:08:30.757] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:08:30.757] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
Dimensions: NULL
[08:08:30.757] | future(..., label = NULL) ...
[08:08:30.757] | : lazy: FALSE
[08:08:30.757] | : stdout: TRUE
[08:08:30.757] | : conditions: [n=1] ‘condition’
[08:08:30.758] | : gc: FALSE
[08:08:30.758] | : earlySignal: FALSE
[08:08:30.758] | : getGlobalsAndPackages() ...
[08:08:30.758] | : . Searching for globals ...
[08:08:30.759] | : . ' globals found: [0] 
[08:08:30.759] | : . Searching for globals ... done
[08:08:30.759] | : . globals: [0] <none>
[08:08:30.759] | : . packages: [0] <none>
[08:08:30.760] | : getGlobalsAndPackages() ... done
[08:08:30.760] | : run() for ‘Future’ (<unnamed-106>) ...
[08:08:30.760] | : . state: ‘created’
[08:08:30.760] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.760] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.760] | : . Using MultisessionFutureBackend ...
[08:08:30.760] | : . ' Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:30.761] | : . ' Launching futures ...
[08:08:30.761] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:30.761] | : . ' , ; Workers: [n=2]
[08:08:30.761] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:30.765] | : . ' , ; FutureRegistry: ‘workers-297aebe174e28ef42df314fbb4f321b2’
[08:08:30.765] | : . ' , ; requestWorker() ...
[08:08:30.765] | : . ' , ; ` requestNode() ...
[08:08:30.765] | : . ' , ; ` | Number of workers: 2
[08:08:30.765] | : . ' , ; ` | Polling for a free worker ...
[08:08:30.765] | : . ' , ; ` | : FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:30.766] | : . ' , ; ` | : . Created empty registry ‘workers-297aebe174e28ef42df314fbb4f321b2’
[08:08:30.766] | : . ' , ; ` | : . Listing all futures
[08:08:30.766] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:30.766] | : . ' , ; ` | : FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:30.766] | : . ' , ; ` | : Total time: 0
[08:08:30.766] | : . ' , ; ` | Polling for a free worker ... done
[08:08:30.766] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:30.766] | : . ' , ; ` | : Listing all futures
[08:08:30.766] | : . ' , ; ` | : Number of registered futures: 0
[08:08:30.766] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:30.767] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:30.767] | : . ' , ; ` | Index of first available worker: 1
[08:08:30.767] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:30.835] | : . ' , ; ` | : Worker is functional
[08:08:30.835] | : . ' , ; ` | : FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:30.836] | : . ' , ; ` | : . Listing all futures
[08:08:30.836] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:30.836] | : . ' , ; ` | : FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:30.836] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:30.836] | : . ' , ; ` requestNode() ... done
[08:08:30.836] | : . ' , ; ` cluster node index: 1
[08:08:30.836] | : . ' , ; requestWorker() ... done
[08:08:30.836] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:30.837] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:30.837] | : . ' , ; launchFuture() ...
[08:08:30.837] | : . ' , ; ` cluster node index: 1
[08:08:30.837] | : . ' , ; ` getFutureData() ...
[08:08:30.837] | : . ' , ; ` | getFutureCore() ...
[08:08:30.837] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:30.838] | : . ' , ; ` | getFutureCore() ... done
[08:08:30.838] | : . ' , ; ` | getFutureCapture() ...
[08:08:30.838] | : . ' , ; ` | getFutureCapture() ... done
[08:08:30.838] | : . ' , ; ` | getFutureContext() ...
[08:08:30.838] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.838] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:30.838] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.838] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:30.839] | : . ' , ; ` | getFutureContext() ... done
[08:08:30.839] | : . ' , ; ` getFutureData() ... done
[08:08:30.839] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'add', earlySignal = 0) ...
[08:08:30.839] | : . ' , ; ` | Appended future to position #1
[08:08:30.839] | : . ' , ; ` | Number of registered futures: 1
[08:08:30.839] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'add', earlySignal = 0) ... done
[08:08:30.839] | : . ' , ; launchFuture() ... done
[08:08:30.840] | : . ' , ; MultisessionFuture started
[08:08:30.840] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:30.840] | : . ' Launching futures ... done
[08:08:30.840] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:30.840] | : . Using MultisessionFutureBackend ... done
[08:08:30.840] | : run() for ‘Future’ (<unnamed-106>) ... done
[08:08:30.840] | future(..., label = NULL) ... done
[08:08:30.840] | future(..., label = NULL) ...
[08:08:30.840] | : lazy: FALSE
[08:08:30.841] | : stdout: TRUE
[08:08:30.841] | : conditions: [n=1] ‘condition’
[08:08:30.841] | : gc: FALSE
[08:08:30.841] | : earlySignal: FALSE
[08:08:30.841] | : getGlobalsAndPackages() ...
[08:08:30.841] | : . Searching for globals ...
[08:08:30.842] | : . ' globals found: [0] 
[08:08:30.842] | : . Searching for globals ... done
[08:08:30.843] | : . globals: [0] <none>
[08:08:30.843] | : . packages: [0] <none>
[08:08:30.843] | : getGlobalsAndPackages() ... done
[08:08:30.843] | : run() for ‘Future’ (<unnamed-107>) ...
[08:08:30.843] | : . state: ‘created’
[08:08:30.843] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.843] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.843] | : . Using MultisessionFutureBackend ...
[08:08:30.843] | : . ' Number of futures since start: 1 (1 created, 1 launched, 0 finished)
[08:08:30.844] | : . ' Launching futures ...
[08:08:30.844] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:30.844] | : . ' , ; Workers: [n=2]
[08:08:30.844] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:30.846] | : . ' , ; FutureRegistry: ‘workers-297aebe174e28ef42df314fbb4f321b2’
[08:08:30.846] | : . ' , ; requestWorker() ...
[08:08:30.846] | : . ' , ; ` requestNode() ...
[08:08:30.846] | : . ' , ; ` | Number of workers: 2
[08:08:30.846] | : . ' , ; ` | Polling for a free worker ...
[08:08:30.846] | : . ' , ; ` | : FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:30.846] | : . ' , ; ` | : . Listing all futures
[08:08:30.846] | : . ' , ; ` | : . Number of registered futures: 1
[08:08:30.846] | : . ' , ; ` | : FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:30.846] | : . ' , ; ` | : Total time: 0
[08:08:30.847] | : . ' , ; ` | Polling for a free worker ... done
[08:08:30.847] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:30.847] | : . ' , ; ` | : Listing all futures
[08:08:30.847] | : . ' , ; ` | : Number of registered futures: 1
[08:08:30.847] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:30.847] | : . ' , ; ` | avail: [n=2] ‘2’
[08:08:30.847] | : . ' , ; ` | Index of first available worker: 2
[08:08:30.847] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:30.927] | : . ' , ; ` | : Worker is functional
[08:08:30.927] | : . ' , ; ` | : FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:30.927] | : . ' , ; ` | : . Listing all futures
[08:08:30.927] | : . ' , ; ` | : . Number of registered futures: 1
[08:08:30.928] | : . ' , ; ` | : FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:30.928] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:30.928] | : . ' , ; ` requestNode() ... done
[08:08:30.928] | : . ' , ; ` cluster node index: 2
[08:08:30.928] | : . ' , ; requestWorker() ... done
[08:08:30.928] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:30.929] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:30.929] | : . ' , ; launchFuture() ...
[08:08:30.929] | : . ' , ; ` cluster node index: 2
[08:08:30.929] | : . ' , ; ` getFutureData() ...
[08:08:30.929] | : . ' , ; ` | getFutureCore() ...
[08:08:30.929] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:30.929] | : . ' , ; ` | getFutureCore() ... done
[08:08:30.929] | : . ' , ; ` | getFutureCapture() ...
[08:08:30.930] | : . ' , ; ` | getFutureCapture() ... done
[08:08:30.930] | : . ' , ; ` | getFutureContext() ...
[08:08:30.930] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.930] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:30.930] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.930] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:30.930] | : . ' , ; ` | getFutureContext() ... done
[08:08:30.930] | : . ' , ; ` getFutureData() ... done
[08:08:30.931] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'add', earlySignal = 0) ...
[08:08:30.931] | : . ' , ; ` | Appended future to position #2
[08:08:30.931] | : . ' , ; ` | Number of registered futures: 2
[08:08:30.931] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'add', earlySignal = 0) ... done
[08:08:30.931] | : . ' , ; launchFuture() ... done
[08:08:30.931] | : . ' , ; MultisessionFuture started
[08:08:30.931] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:30.932] | : . ' Launching futures ... done
[08:08:30.932] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:30.932] | : . Using MultisessionFutureBackend ... done
[08:08:30.932] | : run() for ‘Future’ (<unnamed-107>) ... done
[08:08:30.932] | future(..., label = NULL) ... done
[08:08:30.932] | future(..., label = NULL) ...
[08:08:30.933] | : lazy: FALSE
[08:08:30.933] | : stdout: TRUE
[08:08:30.933] | : conditions: [n=1] ‘condition’
[08:08:30.933] | : gc: FALSE
[08:08:30.933] | : earlySignal: FALSE
[08:08:30.933] | : getGlobalsAndPackages() ...
[08:08:30.933] | : . Searching for globals ...
[08:08:30.936] | : . ' globals found: [1] ‘{’
[08:08:30.936] | : . Searching for globals ... done
[08:08:30.937] | : . Resolving globals: FALSE
[08:08:30.937] | : . Search for packages associated with the globals ...
[08:08:30.937] | : . ' Packages associated with globals: [1] ‘base’
[08:08:30.937] | : . ' Packages: [1] ‘base’
[08:08:30.937] | : . Search for packages associated with the globals ... done
[08:08:30.937] | : . Packages after dropping 'base': [0] 
[08:08:30.938] | : . globals: [0] 
[08:08:30.938] | : . packages: [0] 
[08:08:30.938] | : getGlobalsAndPackages() ... done
[08:08:30.938] | : run() for ‘Future’ (<unnamed-108>) ...
[08:08:30.938] | : . state: ‘created’
[08:08:30.938] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:30.938] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:30.938] | : . Using MultisessionFutureBackend ...
[08:08:30.939] | : . ' Number of futures since start: 2 (2 created, 2 launched, 0 finished)
[08:08:30.939] | : . ' Launching futures ...
[08:08:30.939] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:30.939] | : . ' , ; Workers: [n=2]
[08:08:30.939] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:30.941] | : . ' , ; FutureRegistry: ‘workers-297aebe174e28ef42df314fbb4f321b2’
[08:08:30.941] | : . ' , ; requestWorker() ...
[08:08:30.941] | : . ' , ; ` requestNode() ...
[08:08:30.941] | : . ' , ; ` | Number of workers: 2
[08:08:30.941] | : . ' , ; ` | Polling for a free worker ...
[08:08:30.941] | : . ' , ; ` | : FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:30.941] | : . ' , ; ` | : . Listing all futures
[08:08:30.941] | : . ' , ; ` | : . Number of registered futures: 2
[08:08:30.942] | : . ' , ; ` | : FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:30.942] | : . ' , ; ` | : Poll #1 (0): usedNodes() = 2, workers = 2
[08:08:30.952] | : . ' , ; ` | : FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'collect-first', earlySignal = 1) ...
[08:08:30.952] | : . ' , ; ` | : . collectValues('workers-297aebe174e28ef42df314fbb4f321b2', firstOnly = TRUE) ...
[08:08:30.952] | : . ' , ; ` | : . ' resolved() for MultisessionFuture (<unnamed-106>) ...
[08:08:30.953] | : . ' , ; ` | : . ' , Cluster node socket connection: index=4, id=1577
[08:08:30.953] | : . ' , ; ` | : . ' , assertValidConnection() ...
[08:08:30.953] | : . ' , ; ` | : . ' , ; cluster node index: 1
[08:08:30.953] | : . ' , ; ` | : . ' , assertValidConnection() ... done
[08:08:30.954] | : . ' , ; ` | : . ' , receiveMessageFromWorker() for ClusterFuture ...
[08:08:30.954] | : . ' , ; ` | : . ' , ; cluster node index: 1
[08:08:30.954] | : . ' , ; ` | : . ' , ; [1] TRUE
[08:08:30.954] | : . ' , ; ` | : . ' , ; received data:
[08:08:30.954] | : . ' , ; ` | : . ' , ; List of 5
[08:08:30.954] | : . ' , ; ` | : . ' , ;  $ type   : chr "VALUE"
[08:08:30.954] | : . ' , ; ` | : . ' , ;  $ value  :List of 16
[08:08:30.954] | : . ' , ; ` | : . ' , ;   ..$ value              : num 2
[08:08:30.954] | : . ' , ; ` | : . ' , ;   ..$ visible            : logi TRUE
[08:08:30.954] | : . ' , ; ` | : . ' , ;   ..$ stdout             : chr ""
[08:08:30.954] | : . ' , ; ` | : . ' , ;   ..$ conditions         : list()
[08:08:30.954] | : . ' , ; ` | : . ' , ;   ..$ rng                : logi FALSE
[08:08:30.954] | : . ' , ; ` | : . ' , ;   ..$ seed               : NULL
[08:08:30.954] | : . ' , ; ` | : . ' , ;   ..$ misuseGlobalEnv    : NULL
[08:08:30.954] | : . ' , ; ` | : . ' , ;   ..$ misuseConnections  :List of 3
[08:08:30.954] | : . ' , ; ` | : . ' , ;   .. ..$ added   : NULL
[08:08:30.954] | : . ' , ; ` | : . ' , ;   .. ..$ removed : NULL
[08:08:30.954] | : . ' , ; ` | : . ' , ;   .. ..$ replaced: NULL
[08:08:30.954] | : . ' , ; ` | : . ' , ;   ..$ misuseDevices      : NULL
[08:08:30.954] | : . ' , ; ` | : . ' , ;   ..$ misuseDefaultDevice: list()
[08:08:30.954] | : . ' , ; ` | : . ' , ;   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:30"
[08:08:30.954] | : . ' , ; ` | : . ' , ;   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:30"
[08:08:30.954] | : . ' , ; ` | : . ' , ;   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "106"
[08:08:30.954] | : . ' , ; ` | : . ' , ;   ..$ session_uuid       : chr "dee2a208d5ef67f03fdb13c0c9ecc01f"
[08:08:30.954] | : . ' , ; ` | : . ' , ;   .. ..- attr(*, "source")=List of 5
[08:08:30.954] | : . ' , ; ` | : . ' , ;   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:30.954] | : . ' , ; ` | : . ' , ;   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:30.954] | : . ' , ; ` | : . ' , ;   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:30.954] | : . ' , ; ` | : . ' , ;   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:30.954] | : . ' , ; ` | : . ' , ;   .. .. ..$ pid   : int 69208
[08:08:30.954] | : . ' , ; ` | : . ' , ;   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:30"
[08:08:30.954] | : . ' , ; ` | : . ' , ;   .. .. ..$ random: int 2147483647
[08:08:30.954] | : . ' , ; ` | : . ' , ;   ..$ r_info             :List of 4
[08:08:30.954] | : . ' , ; ` | : . ' , ;   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:30.954] | : . ' , ; ` | : . ' , ;   .. .. ..$ : int [1:3] 4 5 0
[08:08:30.954] | : . ' , ; ` | : . ' , ;   .. ..$ os           : chr "unix"
[08:08:30.954] | : . ' , ; ` | : . ' , ;   .. ..$ os_name      : chr "Linux"
[08:08:30.954] | : . ' , ; ` | : . ' , ;   .. ..$ captures_utf8: logi TRUE
[08:08:30.954] | : . ' , ; ` | : . ' , ;   ..$ version            : chr "1.8"
[08:08:30.954] | : . ' , ; ` | : . ' , ;   ..- attr(*, "class")= chr "FutureResult"
[08:08:30.954] | : . ' , ; ` | : . ' , ;  $ success: logi TRUE
[08:08:30.954] | : . ' , ; ` | : . ' , ;  $ time   : 'proc_time' Named num [1:5] 0.062 0.004 0.066 0 0
[08:08:30.954] | : . ' , ; ` | : . ' , ;   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:30.954] | : . ' , ; ` | : . ' , ;  $ tag    : NULL
[08:08:30.966] | : . ' , ; ` | : . ' , ; Received FutureResult
[08:08:30.966] | : . ' , ; ` | : . ' , ; FutureResult:
[08:08:30.966] | : . ' , ; ` | : . ' , ; value: ‘numeric’
[08:08:30.966] | : . ' , ; ` | : . ' , ; visible: TRUE
[08:08:30.966] | : . ' , ; ` | : . ' , ; stdout: character
[08:08:30.966] | : . ' , ; ` | : . ' , ; conditions: [n = 0] 
[08:08:30.966] | : . ' , ; ` | : . ' , ; RNG used: FALSE
[08:08:30.966] | : . ' , ; ` | : . ' , ; duration: 0.06363487 secs (started 2025-06-17 08:08:30.882138)
[08:08:30.966] | : . ' , ; ` | : . ' , ; version: 1.8
[08:08:30.966] | : . ' , ; ` | : . ' , ; FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'remove', earlySignal = 0) ...
[08:08:30.967] | : . ' , ; ` | : . ' , ; ` Removed future from position #1
[08:08:30.967] | : . ' , ; ` | : . ' , ; ` Number of registered futures: 1
[08:08:30.967] | : . ' , ; ` | : . ' , ; FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'remove', earlySignal = 0) ... done
[08:08:30.967] | : . ' , ; ` | : . ' , ; Erased future from future backend
[08:08:30.967] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ...
[08:08:30.967] | : . ' , ; ` | : . ' , ; ` result already collected: FutureResult
[08:08:30.967] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ... done
[08:08:30.967] | : . ' , ; ` | : . ' , ; signalConditions() ...
[08:08:30.967] | : . ' , ; ` | : . ' , ; ` include = ‘immediateCondition’
[08:08:30.968] | : . ' , ; ` | : . ' , ; ` exclude = 
[08:08:30.968] | : . ' , ; ` | : . ' , ; ` resignal = FALSE
[08:08:30.968] | : . ' , ; ` | : . ' , ; ` Number of conditions: 0
[08:08:30.968] | : . ' , ; ` | : . ' , ; `  int 0
[08:08:30.968] | : . ' , ; ` | : . ' , ; signalConditions() ... done
[08:08:30.968] | : . ' , ; ` | : . ' , receiveMessageFromWorker() for ClusterFuture ... done
[08:08:30.969] | : . ' , ; ` | : . ' , receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:30.969] | : . ' , ; ` | : . ' resolved() for MultisessionFuture (<unnamed-106>) ... done
[08:08:30.969] | : . ' , ; ` | : . ' assertFutureResult() ...
[08:08:30.969] | : . ' , ; ` | : . ' , Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:30.969] | : . ' , ; ` | : . ' , Future uuid: 106
[08:08:30.969] | : . ' , ; ` | : . ' , identical; success
[08:08:30.969] | : . ' , ; ` | : . ' assertFutureResult() ... done
[08:08:30.969] | : . ' , ; ` | : . ' Future at position #1 is resolved ...
[08:08:30.969] | : . ' , ; ` | : . ' , value() for MultisessionFuture (<unnamed-106>) ...
[08:08:30.969] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ...
[08:08:30.970] | : . ' , ; ` | : . ' , ; ` result already collected: FutureResult
[08:08:30.970] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ... done
[08:08:30.970] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ...
[08:08:30.970] | : . ' , ; ` | : . ' , ; ` result already collected: FutureResult
[08:08:30.970] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ... done
[08:08:30.970] | : . ' , ; ` | : . ' , ; signalConditions() ...
[08:08:30.970] | : . ' , ; ` | : . ' , ; ` include = ‘immediateCondition’
[08:08:30.970] | : . ' , ; ` | : . ' , ; ` exclude = 
[08:08:30.970] | : . ' , ; ` | : . ' , ; ` resignal = FALSE
[08:08:30.971] | : . ' , ; ` | : . ' , ; ` Number of conditions: 0
[08:08:30.971] | : . ' , ; ` | : . ' , ; `  int 0
[08:08:30.971] | : . ' , ; ` | : . ' , ; signalConditions() ... done
[08:08:30.971] | : . ' , ; ` | : . ' , ; check for misuse ...
[08:08:30.971] | : . ' , ; ` | : . ' , ; check for misuse ... done
[08:08:30.971] | : . ' , ; ` | : . ' , value() for MultisessionFuture (<unnamed-106>) ... done
[08:08:30.972] | : . ' , ; ` | : . ' Future at position #1 is resolved ... done
[08:08:30.972] | : . ' , ; ` | : . collectValues('workers-297aebe174e28ef42df314fbb4f321b2', firstOnly = TRUE) ... done
[08:08:30.972] | : . ' , ; ` | : . Remove collected futures ...
[08:08:30.972] | : . ' , ; ` | : . ' Indices of futures to drop: [n=1] ‘1’
[08:08:30.972] | : . ' , ; ` | : . Remove collected futures ... done
[08:08:30.972] | : . ' , ; ` | : FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'collect-first', earlySignal = 1) ... done
[08:08:30.972] | : . ' , ; ` | : Early signaling of 2 future candidates ...
[08:08:30.972] | : . ' , ; ` | : Number of futures with early signaling requested: 0
[08:08:30.973] | : . ' , ; ` | : Early signaling of 2 future candidates ... done
[08:08:30.973] | : . ' , ; ` | : Number of registered futures: 2
[08:08:30.973] | : . ' , ; ` | Polling for a free worker ... done
[08:08:30.973] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:30.973] | : . ' , ; ` | : Listing all futures
[08:08:30.973] | : . ' , ; ` | : Number of registered futures: 1
[08:08:30.973] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:30.973] | : . ' , ; ` | Total time: 0.0316479206085205
[08:08:30.973] | : . ' , ; ` requestNode() ... done
[08:08:30.974] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:30.974] | : . ' , ; ` | Listing all futures
[08:08:30.974] | : . ' , ; ` | Number of registered futures: 1
[08:08:30.974] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:30.974] | : . ' , ; ` avail: [n=2] ‘1’
[08:08:30.974] | : . ' , ; ` Index of first available worker: 1
[08:08:30.974] | : . ' , ; ` Validate that the worker is functional ...
[08:08:31.072] | : . ' , ; ` | Worker is functional
[08:08:31.072] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:31.073] | : . ' , ; ` | : Listing all futures
[08:08:31.073] | : . ' , ; ` | : Number of registered futures: 1
[08:08:31.073] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:31.073] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:31.073] | : . ' , ; requestWorker() ... done
[08:08:31.073] | : . ' , ; cluster node index: 1
[08:08:31.073] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:31.073] | : . ' , eraseGlobalEnvironment() ...
[08:08:31.074] | : . ' , eraseGlobalEnvironment() ... done
[08:08:31.074] | : . ' , launchFuture() ...
[08:08:31.074] | : . ' , ; cluster node index: 1
[08:08:31.074] | : . ' , ; getFutureData() ...
[08:08:31.074] | : . ' , ; ` getFutureCore() ...
[08:08:31.074] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:31.074] | : . ' , ; ` getFutureCore() ... done
[08:08:31.075] | : . ' , ; ` getFutureCapture() ...
[08:08:31.075] | : . ' , ; ` getFutureCapture() ... done
[08:08:31.075] | : . ' , ; ` getFutureContext() ...
[08:08:31.075] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:31.075] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:31.075] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:31.075] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:31.075] | : . ' , ; ` getFutureContext() ... done
[08:08:31.075] | : . ' , ; getFutureData() ... done
[08:08:31.076] | : . ' , ; FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'add', earlySignal = 0) ...
[08:08:31.076] | : . ' , ; ` Appended future to position #2
[08:08:31.076] | : . ' , ; ` Number of registered futures: 2
[08:08:31.076] | : . ' , ; FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'add', earlySignal = 0) ... done
[08:08:31.076] | : . ' , launchFuture() ... done
[08:08:31.076] | : . ' , MultisessionFuture started
[08:08:31.076] | : . ' Launching futures ... done
[08:08:31.077] | : . Using MultisessionFutureBackend ... done
[08:08:31.077] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:31.077] | : run() for ‘Future’ (<unnamed-108>) ... done
[08:08:31.077] | future(..., label = NULL) ... done
[08:08:31.077] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Classes 'listenv', 'environment' <environment: 0x5643044bb890> 
Classes 'listenv', 'environment' <environment: 0x564302d09ab8> 
[08:08:31.078] resolved() for listenv ...
[08:08:31.079] | resolved() for list ...
[08:08:31.079] | : Number of elements: 6
[08:08:31.080] | : Number of futures: 6
[08:08:31.080] | : resolved() for MultisessionFuture (<unnamed-107>) ...
[08:08:31.080] | : . Cluster node socket connection: index=5, id=1578
[08:08:31.080] | : . assertValidConnection() ...
[08:08:31.080] | : . ' cluster node index: 2
[08:08:31.081] | : . assertValidConnection() ... done
[08:08:31.081] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:31.081] | : . ' cluster node index: 2
[08:08:31.081] | : . ' [1] TRUE
[08:08:31.081] | : . ' received data:
[08:08:31.082] | : . ' List of 5
[08:08:31.082] | : . '  $ type   : chr "VALUE"
[08:08:31.082] | : . '  $ value  :List of 16
[08:08:31.082] | : . '   ..$ value              : NULL
[08:08:31.082] | : . '   ..$ visible            : logi TRUE
[08:08:31.082] | : . '   ..$ stdout             : chr ""
[08:08:31.082] | : . '   ..$ conditions         : list()
[08:08:31.082] | : . '   ..$ rng                : logi FALSE
[08:08:31.082] | : . '   ..$ seed               : NULL
[08:08:31.082] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:31.082] | : . '   ..$ misuseConnections  :List of 3
[08:08:31.082] | : . '   .. ..$ added   : NULL
[08:08:31.082] | : . '   .. ..$ removed : NULL
[08:08:31.082] | : . '   .. ..$ replaced: NULL
[08:08:31.082] | : . '   ..$ misuseDevices      : NULL
[08:08:31.082] | : . '   ..$ misuseDefaultDevice: list()
[08:08:31.082] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:30"
[08:08:31.082] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:31"
[08:08:31.082] | : . '   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "107"
[08:08:31.082] | : . '   ..$ session_uuid       : chr "0b8fc0d1486ac64ba030ccf6b4936216"
[08:08:31.082] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:31.082] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:31.082] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:31.082] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:31.082] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:31.082] | : . '   .. .. ..$ pid   : int 69207
[08:08:31.082] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:30"
[08:08:31.082] | : . '   .. .. ..$ random: int 2147483647
[08:08:31.082] | : . '   ..$ r_info             :List of 4
[08:08:31.082] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:31.082] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:31.082] | : . '   .. ..$ os           : chr "unix"
[08:08:31.082] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:31.082] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:31.082] | : . '   ..$ version            : chr "1.8"
[08:08:31.082] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:31.082] | : . '  $ success: logi TRUE
[08:08:31.082] | : . '  $ time   : 'proc_time' Named num [1:5] 0.058 0.001 0.059 0 0
[08:08:31.082] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:31.082] | : . '  $ tag    : NULL
[08:08:31.092] | : . ' Received FutureResult
[08:08:31.092] | : . ' FutureResult:
[08:08:31.092] | : . ' value: ‘NULL’
[08:08:31.092] | : . ' visible: TRUE
[08:08:31.092] | : . ' stdout: character
[08:08:31.092] | : . ' conditions: [n = 0] 
[08:08:31.092] | : . ' RNG used: FALSE
[08:08:31.092] | : . ' duration: 0.05773735 secs (started 2025-06-17 08:08:30.973438)
[08:08:31.092] | : . ' version: 1.8
[08:08:31.093] | : . ' FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'remove', earlySignal = 0) ...
[08:08:31.093] | : . ' , Removed future from position #1
[08:08:31.093] | : . ' , Number of registered futures: 1
[08:08:31.093] | : . ' FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'remove', earlySignal = 0) ... done
[08:08:31.093] | : . ' Erased future from future backend
[08:08:31.093] | : . ' result() for ClusterFuture ...
[08:08:31.094] | : . ' , result already collected: FutureResult
[08:08:31.094] | : . ' result() for ClusterFuture ... done
[08:08:31.094] | : . ' signalConditions() ...
[08:08:31.094] | : . ' , include = ‘immediateCondition’
[08:08:31.094] | : . ' , exclude = 
[08:08:31.094] | : . ' , resignal = FALSE
[08:08:31.094] | : . ' , Number of conditions: 0
[08:08:31.094] | : . ' ,  int 0
[08:08:31.095] | : . ' signalConditions() ... done
[08:08:31.095] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:31.095] | : . receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:31.095] | : resolved() for MultisessionFuture (<unnamed-107>) ... done
[08:08:31.095] | : assertFutureResult() ...
[08:08:31.095] | : . Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:31.095] | : . Future uuid: 107
[08:08:31.095] | : . identical; success
[08:08:31.096] | : assertFutureResult() ... done
[08:08:31.096] | : resolved() for MultisessionFuture (<unnamed-108>) ...
[08:08:31.096] | : . Cluster node socket connection: index=4, id=1577
[08:08:31.096] | : . assertValidConnection() ...
[08:08:31.096] | : . ' cluster node index: 1
[08:08:31.096] | : . assertValidConnection() ... done
[08:08:31.107] | : . socketSelect(list(<connection #4 (id=1577)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:31.107] | : resolved() for MultisessionFuture (<unnamed-108>) ... done
[08:08:31.107] | resolved() for list ... done
[08:08:31.107] resolved() for listenv ... done
 Named logi [1:6] TRUE TRUE TRUE FALSE TRUE TRUE
 - attr(*, "names")= chr [1:6] "a" "b" "c" "d" ...
[08:08:31.108] value() for listenv ...
[08:08:31.108] | recursive: 0
[08:08:31.108] | reduce: FALSE
[08:08:31.109] | length: 6
[08:08:31.109] | elements: ‘a’, ‘b’, ‘c’, ‘d’, ‘’, ‘’
[08:08:31.109] | Number of remaining objects: 6
[08:08:31.110] | checking value #1:
[08:08:31.110] | 'obj' is atomic
[08:08:31.110] | signalConditionsASAP(numeric, pos=1) ...
[08:08:31.110] | : nx: 6
[08:08:31.110] | : relay: TRUE
[08:08:31.110] | : stdout: TRUE
[08:08:31.110] | : signal: TRUE
[08:08:31.110] | : resignal: FALSE
[08:08:31.110] | : force: TRUE
[08:08:31.110] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:31.110] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:31.111] | : until=2
[08:08:31.111] | : relaying element #2
[08:08:31.111] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:31.111] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:31.111] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:31.111] | length: 5 (resolved future 1)
[08:08:31.111] value() for listenv ... done
[08:08:31.111] checking value #2:
[08:08:31.111] 'obj' is MultisessionFuture
[08:08:31.112] MultisessionFuture #2
[08:08:31.112] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:31.112] | nx: 6
[08:08:31.112] | relay: TRUE
[08:08:31.112] | stdout: TRUE
[08:08:31.112] | signal: TRUE
[08:08:31.112] | resignal: FALSE
[08:08:31.112] | force: TRUE
[08:08:31.112] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:31.112] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:31.113] | until=2
[08:08:31.113] | relaying element #2
[08:08:31.113] | value() for MultisessionFuture (<unnamed-106>) ...
[08:08:31.113] | : result() for ClusterFuture ...
[08:08:31.113] | : . result already collected: FutureResult
[08:08:31.113] | : result() for ClusterFuture ... done
[08:08:31.113] | : result() for ClusterFuture ...
[08:08:31.113] | : . result already collected: FutureResult
[08:08:31.113] | : result() for ClusterFuture ... done
[08:08:31.114] | : signalConditions() ...
[08:08:31.114] | : . include = ‘immediateCondition’
[08:08:31.114] | : . exclude = 
[08:08:31.114] | : . resignal = FALSE
[08:08:31.114] | : . Number of conditions: 0
[08:08:31.114] | : .  int 0
[08:08:31.114] | : signalConditions() ... done
[08:08:31.115] | : relay stdout ...
[08:08:31.115] | : relay stdout ... done
[08:08:31.115] | : check for misuse ...
[08:08:31.115] | : check for misuse ... done
[08:08:31.115] | value() for MultisessionFuture (<unnamed-106>) ... done
[08:08:31.115] | result() for ClusterFuture ...
[08:08:31.115] | : result already collected: FutureResult
[08:08:31.115] | result() for ClusterFuture ... done
[08:08:31.115] | signalConditions() ...
[08:08:31.115] | : include = ‘immediateCondition’
[08:08:31.116] | : exclude = 
[08:08:31.116] | : resignal = FALSE
[08:08:31.116] | : Number of conditions: 0
[08:08:31.116] | :  int 0
[08:08:31.116] | signalConditions() ... done
[08:08:31.116] | result() for ClusterFuture ...
[08:08:31.116] | : result already collected: FutureResult
[08:08:31.117] | result() for ClusterFuture ... done
[08:08:31.117] | signalConditions() ...
[08:08:31.117] | : include = ‘condition’
[08:08:31.117] | : exclude = ‘error’, ‘immediateCondition’
[08:08:31.117] | : resignal = TRUE
[08:08:31.117] | : Number of conditions: 0
[08:08:31.117] | :  int 0
[08:08:31.118] | signalConditions() ... done
[08:08:31.118] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:31.118] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:31.118] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:31.118] value(<MultisessionFuture>, ...) ...
[08:08:31.118] value(<MultisessionFuture>, ...) ... done
[08:08:31.118] value() for MultisessionFuture (<unnamed-106>) ...
[08:08:31.118] | result() for ClusterFuture ...
[08:08:31.118] | : result already collected: FutureResult
[08:08:31.118] | result() for ClusterFuture ... done
[08:08:31.119] | result() for ClusterFuture ...
[08:08:31.119] | : result already collected: FutureResult
[08:08:31.119] | result() for ClusterFuture ... done
[08:08:31.119] | signalConditions() ...
[08:08:31.119] | : include = ‘immediateCondition’
[08:08:31.119] | : exclude = 
[08:08:31.119] | : resignal = FALSE
[08:08:31.119] | : Number of conditions: 0
[08:08:31.119] | :  int 0
[08:08:31.120] | signalConditions() ... done
[08:08:31.120] | check for misuse ...
[08:08:31.120] | check for misuse ... done
[08:08:31.120] value() for MultisessionFuture (<unnamed-106>) ... done
[08:08:31.120] value: <numeric>
[08:08:31.120] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:31.120] | nx: 6
[08:08:31.121] | relay: TRUE
[08:08:31.121] | stdout: TRUE
[08:08:31.121] | signal: TRUE
[08:08:31.121] | resignal: FALSE
[08:08:31.121] | force: TRUE
[08:08:31.121] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:31.121] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:31.121] | until=3
[08:08:31.121] | relaying element #3
[08:08:31.121] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:31.121] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:31.122] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:31.122] resolve() for MultisessionFuture ...
[08:08:31.122] resolve() for MultisessionFuture ... done
[08:08:31.122] length: 4 (resolved future 2)

[08:08:31.122] checking value #3:
[08:08:31.122] 'obj' is MultisessionFuture
[08:08:31.122] MultisessionFuture #3
[08:08:31.122] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:31.122] | nx: 6
[08:08:31.123] | relay: TRUE
[08:08:31.123] | stdout: TRUE
[08:08:31.123] | signal: TRUE
[08:08:31.123] | resignal: FALSE
[08:08:31.123] | force: TRUE
[08:08:31.123] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:31.123] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:31.123] | until=3
[08:08:31.123] | relaying element #3
[08:08:31.123] | value() for MultisessionFuture (<unnamed-107>) ...
[08:08:31.123] | : result() for ClusterFuture ...
[08:08:31.124] | : . result already collected: FutureResult
[08:08:31.124] | : result() for ClusterFuture ... done
[08:08:31.124] | : result() for ClusterFuture ...
[08:08:31.124] | : . result already collected: FutureResult
[08:08:31.124] | : result() for ClusterFuture ... done
[08:08:31.124] | : signalConditions() ...
[08:08:31.124] | : . include = ‘immediateCondition’
[08:08:31.124] | : . exclude = 
[08:08:31.124] | : . resignal = FALSE
[08:08:31.124] | : . Number of conditions: 0
[08:08:31.125] | : .  int 0
[08:08:31.125] | : signalConditions() ... done
[08:08:31.125] | : relay stdout ...
[08:08:31.125] | : relay stdout ... done
[08:08:31.125] | : check for misuse ...
[08:08:31.125] | : check for misuse ... done
[08:08:31.125] | value() for MultisessionFuture (<unnamed-107>) ... done
[08:08:31.126] | result() for ClusterFuture ...
[08:08:31.126] | : result already collected: FutureResult
[08:08:31.126] | result() for ClusterFuture ... done
[08:08:31.126] | signalConditions() ...
[08:08:31.126] | : include = ‘immediateCondition’
[08:08:31.126] | : exclude = 
[08:08:31.126] | : resignal = FALSE
[08:08:31.126] | : Number of conditions: 0
[08:08:31.126] | :  int 0
[08:08:31.127] | signalConditions() ... done
[08:08:31.127] | result() for ClusterFuture ...
[08:08:31.127] | : result already collected: FutureResult
[08:08:31.127] | result() for ClusterFuture ... done
[08:08:31.127] | signalConditions() ...
[08:08:31.127] | : include = ‘condition’
[08:08:31.127] | : exclude = ‘error’, ‘immediateCondition’
[08:08:31.127] | : resignal = TRUE
[08:08:31.128] | : Number of conditions: 0
[08:08:31.128] | :  int 0
[08:08:31.128] | signalConditions() ... done
[08:08:31.128] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:31.128] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:31.128] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:31.128] value(<MultisessionFuture>, ...) ...
[08:08:31.129] value(<MultisessionFuture>, ...) ... done
[08:08:31.129] value() for MultisessionFuture (<unnamed-107>) ...
[08:08:31.129] | result() for ClusterFuture ...
[08:08:31.129] | : result already collected: FutureResult
[08:08:31.129] | result() for ClusterFuture ... done
[08:08:31.129] | result() for ClusterFuture ...
[08:08:31.129] | : result already collected: FutureResult
[08:08:31.129] | result() for ClusterFuture ... done
[08:08:31.129] | signalConditions() ...
[08:08:31.129] | : include = ‘immediateCondition’
[08:08:31.130] | : exclude = 
[08:08:31.130] | : resignal = FALSE
[08:08:31.130] | : Number of conditions: 0
[08:08:31.130] | :  int 0
[08:08:31.130] | signalConditions() ... done
[08:08:31.130] | check for misuse ...
[08:08:31.130] | check for misuse ... done
[08:08:31.131] value() for MultisessionFuture (<unnamed-107>) ... done
[08:08:31.131] value: <NULL>
[08:08:31.131] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:31.131] | nx: 6
[08:08:31.131] | relay: TRUE
[08:08:31.131] | stdout: TRUE
[08:08:31.131] | signal: TRUE
[08:08:31.131] | resignal: FALSE
[08:08:31.131] | force: TRUE
[08:08:31.131] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:31.131] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:31.132] | until=4
[08:08:31.132] | relaying element #4
[08:08:31.132] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:31.132] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:31.132] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:31.132] resolve() for MultisessionFuture ...
[08:08:31.132] resolve() for MultisessionFuture ... done
[08:08:31.132] length: 3 (resolved future 3)

[08:08:31.132] checking value #4:
[08:08:31.133] 'obj' is MultisessionFuture
[08:08:31.133] resolved() for MultisessionFuture (<unnamed-108>) ...
[08:08:31.133] | Cluster node socket connection: index=4, id=1577
[08:08:31.133] | assertValidConnection() ...
[08:08:31.133] | : cluster node index: 1
[08:08:31.133] | assertValidConnection() ... done
[08:08:31.134] | receiveMessageFromWorker() for ClusterFuture ...
[08:08:31.134] | : cluster node index: 1
[08:08:31.134] | : [1] TRUE
[08:08:31.134] | : received data:
[08:08:31.134] | : List of 5
[08:08:31.134] | :  $ type   : chr "VALUE"
[08:08:31.134] | :  $ value  :List of 16
[08:08:31.134] | :   ..$ value              : num 4
[08:08:31.134] | :   ..$ visible            : logi TRUE
[08:08:31.134] | :   ..$ stdout             : chr ""
[08:08:31.134] | :   ..$ conditions         : list()
[08:08:31.134] | :   ..$ rng                : logi FALSE
[08:08:31.134] | :   ..$ seed               : NULL
[08:08:31.134] | :   ..$ misuseGlobalEnv    : NULL
[08:08:31.134] | :   ..$ misuseConnections  :List of 3
[08:08:31.134] | :   .. ..$ added   : NULL
[08:08:31.134] | :   .. ..$ removed : NULL
[08:08:31.134] | :   .. ..$ replaced: NULL
[08:08:31.134] | :   ..$ misuseDevices      : NULL
[08:08:31.134] | :   ..$ misuseDefaultDevice: list()
[08:08:31.134] | :   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:31"
[08:08:31.134] | :   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:31"
[08:08:31.134] | :   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "108"
[08:08:31.134] | :   ..$ session_uuid       : chr "dee2a208d5ef67f03fdb13c0c9ecc01f"
[08:08:31.134] | :   .. ..- attr(*, "source")=List of 5
[08:08:31.134] | :   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:31.134] | :   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:31.134] | :   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:31.134] | :   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:31.134] | :   .. .. ..$ pid   : int 69208
[08:08:31.134] | :   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:30"
[08:08:31.134] | :   .. .. ..$ random: int 2147483647
[08:08:31.134] | :   ..$ r_info             :List of 4
[08:08:31.134] | :   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:31.134] | :   .. .. ..$ : int [1:3] 4 5 0
[08:08:31.134] | :   .. ..$ os           : chr "unix"
[08:08:31.134] | :   .. ..$ os_name      : chr "Linux"
[08:08:31.134] | :   .. ..$ captures_utf8: logi TRUE
[08:08:31.134] | :   ..$ version            : chr "1.8"
[08:08:31.134] | :   ..- attr(*, "class")= chr "FutureResult"
[08:08:31.134] | :  $ success: logi TRUE
[08:08:31.134] | :  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:31.134] | :   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:31.134] | :  $ tag    : NULL
[08:08:31.145] | : Received FutureResult
[08:08:31.145] | : FutureResult:
[08:08:31.145] | : value: ‘numeric’
[08:08:31.145] | : visible: TRUE
[08:08:31.145] | : stdout: character
[08:08:31.145] | : conditions: [n = 0] 
[08:08:31.145] | : RNG used: FALSE
[08:08:31.145] | : duration: 0.002663851 secs (started 2025-06-17 08:08:31.117213)
[08:08:31.145] | : version: 1.8
[08:08:31.146] | : FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'remove', earlySignal = 0) ...
[08:08:31.146] | : . Removed future from position #1
[08:08:31.146] | : . Number of registered futures: 0
[08:08:31.146] | : FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'remove', earlySignal = 0) ... done
[08:08:31.146] | : Erased future from future backend
[08:08:31.146] | : result() for ClusterFuture ...
[08:08:31.146] | : . result already collected: FutureResult
[08:08:31.146] | : result() for ClusterFuture ... done
[08:08:31.146] | : signalConditions() ...
[08:08:31.147] | : . include = ‘immediateCondition’
[08:08:31.147] | : . exclude = 
[08:08:31.147] | : . resignal = FALSE
[08:08:31.147] | : . Number of conditions: 0
[08:08:31.147] | : .  int 0
[08:08:31.149] | : signalConditions() ... done
[08:08:31.150] | receiveMessageFromWorker() for ClusterFuture ... done
[08:08:31.150] | receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:31.150] resolved() for MultisessionFuture (<unnamed-108>) ... done
[08:08:31.150] assertFutureResult() ...
[08:08:31.150] | Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:31.150] | Future uuid: 108
[08:08:31.150] | identical; success
[08:08:31.150] assertFutureResult() ... done
[08:08:31.150] MultisessionFuture #4
[08:08:31.150] signalConditionsASAP(MultisessionFuture, pos=4) ...
[08:08:31.150] | nx: 6
[08:08:31.150] | relay: TRUE
[08:08:31.151] | stdout: TRUE
[08:08:31.151] | signal: TRUE
[08:08:31.151] | resignal: FALSE
[08:08:31.151] | force: TRUE
[08:08:31.151] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:31.151] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:31.151] | until=4
[08:08:31.151] | relaying element #4
[08:08:31.151] | value() for MultisessionFuture (<unnamed-108>) ...
[08:08:31.151] | : result() for ClusterFuture ...
[08:08:31.152] | : . result already collected: FutureResult
[08:08:31.152] | : result() for ClusterFuture ... done
[08:08:31.152] | : result() for ClusterFuture ...
[08:08:31.152] | : . result already collected: FutureResult
[08:08:31.152] | : result() for ClusterFuture ... done
[08:08:31.152] | : signalConditions() ...
[08:08:31.152] | : . include = ‘immediateCondition’
[08:08:31.152] | : . exclude = 
[08:08:31.152] | : . resignal = FALSE
[08:08:31.152] | : . Number of conditions: 0
[08:08:31.152] | : .  int 0
[08:08:31.153] | : signalConditions() ... done
[08:08:31.153] | : relay stdout ...
[08:08:31.153] | : relay stdout ... done
[08:08:31.153] | : check for misuse ...
[08:08:31.153] | : check for misuse ... done
[08:08:31.153] | value() for MultisessionFuture (<unnamed-108>) ... done
[08:08:31.153] | result() for ClusterFuture ...
[08:08:31.154] | : result already collected: FutureResult
[08:08:31.154] | result() for ClusterFuture ... done
[08:08:31.154] | signalConditions() ...
[08:08:31.154] | : include = ‘immediateCondition’
[08:08:31.154] | : exclude = 
[08:08:31.154] | : resignal = FALSE
[08:08:31.154] | : Number of conditions: 0
[08:08:31.154] | :  int 0
[08:08:31.155] | signalConditions() ... done
[08:08:31.155] | result() for ClusterFuture ...
[08:08:31.155] | : result already collected: FutureResult
[08:08:31.155] | result() for ClusterFuture ... done
[08:08:31.155] | signalConditions() ...
[08:08:31.155] | : include = ‘condition’
[08:08:31.155] | : exclude = ‘error’, ‘immediateCondition’
[08:08:31.155] | : resignal = TRUE
[08:08:31.155] | : Number of conditions: 0
[08:08:31.156] | :  int 0
[08:08:31.156] | signalConditions() ... done
[08:08:31.156] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.156] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.156] signalConditionsASAP(MultisessionFuture, pos=4) ... done
[08:08:31.156] value(<MultisessionFuture>, ...) ...
[08:08:31.156] value(<MultisessionFuture>, ...) ... done
[08:08:31.156] value() for MultisessionFuture (<unnamed-108>) ...
[08:08:31.157] | result() for ClusterFuture ...
[08:08:31.157] | : result already collected: FutureResult
[08:08:31.157] | result() for ClusterFuture ... done
[08:08:31.157] | result() for ClusterFuture ...
[08:08:31.157] | : result already collected: FutureResult
[08:08:31.157] | result() for ClusterFuture ... done
[08:08:31.157] | signalConditions() ...
[08:08:31.157] | : include = ‘immediateCondition’
[08:08:31.157] | : exclude = 
[08:08:31.157] | : resignal = FALSE
[08:08:31.158] | : Number of conditions: 0
[08:08:31.158] | :  int 0
[08:08:31.158] | signalConditions() ... done
[08:08:31.158] | check for misuse ...
[08:08:31.158] | check for misuse ... done
[08:08:31.158] value() for MultisessionFuture (<unnamed-108>) ... done
[08:08:31.158] value: <numeric>
[08:08:31.159] signalConditionsASAP(MultisessionFuture, pos=4) ...
[08:08:31.159] | nx: 6
[08:08:31.159] | relay: TRUE
[08:08:31.159] | stdout: TRUE
[08:08:31.159] | signal: TRUE
[08:08:31.159] | resignal: FALSE
[08:08:31.159] | force: TRUE
[08:08:31.159] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.159] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.159] | until=5
[08:08:31.159] | relaying element #5
[08:08:31.160] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.160] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.160] signalConditionsASAP(MultisessionFuture, pos=4) ... done
[08:08:31.160] resolve() for MultisessionFuture ...
[08:08:31.160] resolve() for MultisessionFuture ... done
[08:08:31.160] length: 2 (resolved future 4)

[08:08:31.160] checking value #5:
[08:08:31.160] 'obj' is NULL
[08:08:31.160] signalConditionsASAP(NULL, pos=5) ...
[08:08:31.161] | nx: 6
[08:08:31.161] | relay: TRUE
[08:08:31.161] | stdout: TRUE
[08:08:31.161] | signal: TRUE
[08:08:31.161] | resignal: FALSE
[08:08:31.161] | force: TRUE
[08:08:31.161] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.161] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.161] | until=6
[08:08:31.161] | relaying element #6
[08:08:31.161] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:31.162] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.162] signalConditionsASAP(NULL, pos=5) ... done
[08:08:31.162] signalConditionsASAP(NULL, pos=5) ...
[08:08:31.162] | nx: 6
[08:08:31.162] | relay: TRUE
[08:08:31.162] | stdout: TRUE
[08:08:31.162] | signal: TRUE
[08:08:31.162] | resignal: FALSE
[08:08:31.162] | force: TRUE
[08:08:31.162] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:31.163] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.163] | until=6
[08:08:31.163] | relaying element #6
[08:08:31.163] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:31.163] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.163] signalConditionsASAP(NULL, pos=5) ... done
[08:08:31.163] length: 1 (resolved future 5)

[08:08:31.163] checking value #6:
[08:08:31.163] 'obj' is atomic
[08:08:31.164] signalConditionsASAP(numeric, pos=6) ...
[08:08:31.164] | nx: 6
[08:08:31.164] | relay: TRUE
[08:08:31.164] | stdout: TRUE
[08:08:31.164] | signal: TRUE
[08:08:31.164] | resignal: FALSE
[08:08:31.164] | force: TRUE
[08:08:31.164] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:31.164] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.164] | until=6
[08:08:31.164] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:31.165] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.165] signalConditionsASAP(numeric, pos=6) ... done
[08:08:31.165] length: 0 (resolved future 6)

[08:08:31.165] Relaying remaining futures ...
[08:08:31.165] | signalConditionsASAP(NULL, pos=0) ...
[08:08:31.165] | : nx: 6
[08:08:31.165] | : relay: TRUE
[08:08:31.165] | : stdout: TRUE
[08:08:31.165] | : signal: TRUE
[08:08:31.166] | : resignal: FALSE
[08:08:31.166] | : force: TRUE
[08:08:31.166] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:31.166] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
 - flush all
[08:08:31.166] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:31.166] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.166] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:31.166] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
 $  : NULL
 $  : num 6
Dimensions: c(1, 6)
[08:08:31.168] future(..., label = NULL) ...
[08:08:31.169] | lazy: FALSE
[08:08:31.169] | stdout: TRUE
[08:08:31.169] | conditions: [n=1] ‘condition’
[08:08:31.169] | gc: FALSE
[08:08:31.169] | earlySignal: FALSE
[08:08:31.169] | getGlobalsAndPackages() ...
[08:08:31.169] | : Searching for globals ...
[08:08:31.170] | : . globals found: [0] 
[08:08:31.170] | : Searching for globals ... done
[08:08:31.171] | : globals: [0] <none>
[08:08:31.171] | : packages: [0] <none>
[08:08:31.171] | getGlobalsAndPackages() ... done
[08:08:31.171] | run() for ‘Future’ (<unnamed-109>) ...
[08:08:31.171] | : state: ‘created’
[08:08:31.171] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:31.171] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:31.171] | : Using MultisessionFutureBackend ...
[08:08:31.172] | : . Number of futures since start: 3 (3 created, 3 launched, 4 finished)
[08:08:31.172] | : . Launching futures ...
[08:08:31.172] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:31.172] | : . ' , Workers: [n=2]
[08:08:31.172] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:31.174] | : . ' , FutureRegistry: ‘workers-297aebe174e28ef42df314fbb4f321b2’
[08:08:31.174] | : . ' , requestWorker() ...
[08:08:31.174] | : . ' , ; requestNode() ...
[08:08:31.174] | : . ' , ; ` Number of workers: 2
[08:08:31.174] | : . ' , ; ` Polling for a free worker ...
[08:08:31.174] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:31.174] | : . ' , ; ` | : Listing all futures
[08:08:31.174] | : . ' , ; ` | : Number of registered futures: 0
[08:08:31.174] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:31.175] | : . ' , ; ` | Total time: 0
[08:08:31.175] | : . ' , ; ` Polling for a free worker ... done
[08:08:31.175] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:31.175] | : . ' , ; ` | Listing all futures
[08:08:31.175] | : . ' , ; ` | Number of registered futures: 0
[08:08:31.175] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:31.175] | : . ' , ; ` avail: [n=2] ‘1’, ‘2’
[08:08:31.175] | : . ' , ; ` Index of first available worker: 1
[08:08:31.175] | : . ' , ; ` Validate that the worker is functional ...
[08:08:31.269] | : . ' , ; ` | Worker is functional
[08:08:31.269] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:31.269] | : . ' , ; ` | : Listing all futures
[08:08:31.269] | : . ' , ; ` | : Number of registered futures: 0
[08:08:31.269] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:31.270] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:31.270] | : . ' , ; requestNode() ... done
[08:08:31.270] | : . ' , ; cluster node index: 1
[08:08:31.270] | : . ' , requestWorker() ... done
[08:08:31.270] | : . ' , eraseGlobalEnvironment() ...
[08:08:31.271] | : . ' , eraseGlobalEnvironment() ... done
[08:08:31.271] | : . ' , launchFuture() ...
[08:08:31.271] | : . ' , ; cluster node index: 1
[08:08:31.271] | : . ' , ; getFutureData() ...
[08:08:31.271] | : . ' , ; ` getFutureCore() ...
[08:08:31.271] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:31.271] | : . ' , ; ` getFutureCore() ... done
[08:08:31.271] | : . ' , ; ` getFutureCapture() ...
[08:08:31.271] | : . ' , ; ` getFutureCapture() ... done
[08:08:31.272] | : . ' , ; ` getFutureContext() ...
[08:08:31.272] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:31.272] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:31.272] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:31.272] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:31.272] | : . ' , ; ` getFutureContext() ... done
[08:08:31.272] | : . ' , ; getFutureData() ... done
[08:08:31.273] | : . ' , ; FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'add', earlySignal = 0) ...
[08:08:31.273] | : . ' , ; ` Appended future to position #1
[08:08:31.273] | : . ' , ; ` Number of registered futures: 1
[08:08:31.273] | : . ' , ; FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'add', earlySignal = 0) ... done
[08:08:31.273] | : . ' , launchFuture() ... done
[08:08:31.273] | : . ' , MultisessionFuture started
[08:08:31.273] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:31.273] | : . Launching futures ... done
[08:08:31.273] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:31.274] | : Using MultisessionFutureBackend ... done
[08:08:31.274] | run() for ‘Future’ (<unnamed-109>) ... done
[08:08:31.274] future(..., label = NULL) ... done
[08:08:31.274] future(..., label = NULL) ...
[08:08:31.274] | lazy: FALSE
[08:08:31.274] | stdout: TRUE
[08:08:31.274] | conditions: [n=1] ‘condition’
[08:08:31.274] | gc: FALSE
[08:08:31.274] | earlySignal: FALSE
[08:08:31.275] | getGlobalsAndPackages() ...
[08:08:31.275] | : Searching for globals ...
[08:08:31.276] | : . globals found: [0] 
[08:08:31.276] | : Searching for globals ... done
[08:08:31.276] | : globals: [0] <none>
[08:08:31.276] | : packages: [0] <none>
[08:08:31.276] | getGlobalsAndPackages() ... done
[08:08:31.277] | run() for ‘Future’ (<unnamed-110>) ...
[08:08:31.277] | : state: ‘created’
[08:08:31.277] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:31.277] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:31.277] | : Using MultisessionFutureBackend ...
[08:08:31.277] | : . Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:08:31.277] | : . Launching futures ...
[08:08:31.277] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:31.278] | : . ' , Workers: [n=2]
[08:08:31.278] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:31.279] | : . ' , FutureRegistry: ‘workers-297aebe174e28ef42df314fbb4f321b2’
[08:08:31.279] | : . ' , requestWorker() ...
[08:08:31.279] | : . ' , ; requestNode() ...
[08:08:31.280] | : . ' , ; ` Number of workers: 2
[08:08:31.280] | : . ' , ; ` Polling for a free worker ...
[08:08:31.280] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:31.280] | : . ' , ; ` | : Listing all futures
[08:08:31.280] | : . ' , ; ` | : Number of registered futures: 1
[08:08:31.280] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:31.280] | : . ' , ; ` | Total time: 0
[08:08:31.280] | : . ' , ; ` Polling for a free worker ... done
[08:08:31.280] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:31.281] | : . ' , ; ` | Listing all futures
[08:08:31.281] | : . ' , ; ` | Number of registered futures: 1
[08:08:31.281] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:31.281] | : . ' , ; ` avail: [n=2] ‘2’
[08:08:31.281] | : . ' , ; ` Index of first available worker: 2
[08:08:31.281] | : . ' , ; ` Validate that the worker is functional ...
[08:08:31.334] | : . ' , ; ` | Worker is functional
[08:08:31.334] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:31.334] | : . ' , ; ` | : Listing all futures
[08:08:31.335] | : . ' , ; ` | : Number of registered futures: 1
[08:08:31.335] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:31.335] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:31.335] | : . ' , ; requestNode() ... done
[08:08:31.335] | : . ' , ; cluster node index: 2
[08:08:31.335] | : . ' , requestWorker() ... done
[08:08:31.335] | : . ' , eraseGlobalEnvironment() ...
[08:08:31.336] | : . ' , eraseGlobalEnvironment() ... done
[08:08:31.336] | : . ' , launchFuture() ...
[08:08:31.336] | : . ' , ; cluster node index: 2
[08:08:31.336] | : . ' , ; getFutureData() ...
[08:08:31.336] | : . ' , ; ` getFutureCore() ...
[08:08:31.336] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:31.336] | : . ' , ; ` getFutureCore() ... done
[08:08:31.336] | : . ' , ; ` getFutureCapture() ...
[08:08:31.336] | : . ' , ; ` getFutureCapture() ... done
[08:08:31.337] | : . ' , ; ` getFutureContext() ...
[08:08:31.337] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:31.337] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:31.337] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:31.337] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:31.337] | : . ' , ; ` getFutureContext() ... done
[08:08:31.337] | : . ' , ; getFutureData() ... done
[08:08:31.338] | : . ' , ; FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'add', earlySignal = 0) ...
[08:08:31.338] | : . ' , ; ` Appended future to position #2
[08:08:31.338] | : . ' , ; ` Number of registered futures: 2
[08:08:31.338] | : . ' , ; FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'add', earlySignal = 0) ... done
[08:08:31.338] | : . ' , launchFuture() ... done
[08:08:31.338] | : . ' , MultisessionFuture started
[08:08:31.338] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:31.338] | : . Launching futures ... done
[08:08:31.338] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:31.339] | : Using MultisessionFutureBackend ... done
[08:08:31.339] | run() for ‘Future’ (<unnamed-110>) ... done
[08:08:31.339] future(..., label = NULL) ... done
[08:08:31.339] future(..., label = NULL) ...
[08:08:31.339] | lazy: FALSE
[08:08:31.339] | stdout: TRUE
[08:08:31.339] | conditions: [n=1] ‘condition’
[08:08:31.340] | gc: FALSE
[08:08:31.340] | earlySignal: FALSE
[08:08:31.340] | getGlobalsAndPackages() ...
[08:08:31.340] | : Searching for globals ...
[08:08:31.343] | : . globals found: [1] ‘{’
[08:08:31.343] | : Searching for globals ... done
[08:08:31.343] | : Resolving globals: FALSE
[08:08:31.343] | : Search for packages associated with the globals ...
[08:08:31.343] | : . Packages associated with globals: [1] ‘base’
[08:08:31.344] | : . Packages: [1] ‘base’
[08:08:31.344] | : Search for packages associated with the globals ... done
[08:08:31.344] | : Packages after dropping 'base': [0] 
[08:08:31.344] | : globals: [0] 
[08:08:31.344] | : packages: [0] 
[08:08:31.344] | getGlobalsAndPackages() ... done
[08:08:31.344] | run() for ‘Future’ (<unnamed-111>) ...
[08:08:31.345] | : state: ‘created’
[08:08:31.345] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:31.345] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:31.345] | : Using MultisessionFutureBackend ...
[08:08:31.345] | : . Number of futures since start: 5 (5 created, 5 launched, 4 finished)
[08:08:31.345] | : . Launching futures ...
[08:08:31.345] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:31.345] | : . ' , Workers: [n=2]
[08:08:31.346] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:31.347] | : . ' , FutureRegistry: ‘workers-297aebe174e28ef42df314fbb4f321b2’
[08:08:31.347] | : . ' , requestWorker() ...
[08:08:31.347] | : . ' , ; requestNode() ...
[08:08:31.347] | : . ' , ; ` Number of workers: 2
[08:08:31.348] | : . ' , ; ` Polling for a free worker ...
[08:08:31.348] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:31.348] | : . ' , ; ` | : Listing all futures
[08:08:31.348] | : . ' , ; ` | : Number of registered futures: 2
[08:08:31.348] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:31.348] | : . ' , ; ` | Poll #1 (0): usedNodes() = 2, workers = 2
[08:08:31.358] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'collect-first', earlySignal = 1) ...
[08:08:31.358] | : . ' , ; ` | : collectValues('workers-297aebe174e28ef42df314fbb4f321b2', firstOnly = TRUE) ...
[08:08:31.359] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-109>) ...
[08:08:31.359] | : . ' , ; ` | : . ' Cluster node socket connection: index=4, id=1577
[08:08:31.359] | : . ' , ; ` | : . ' assertValidConnection() ...
[08:08:31.359] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:31.359] | : . ' , ; ` | : . ' assertValidConnection() ... done
[08:08:31.360] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ...
[08:08:31.360] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:31.360] | : . ' , ; ` | : . ' , [1] TRUE
[08:08:31.362] | : . ' , ; ` | : . ' , received data:
[08:08:31.363] | : . ' , ; ` | : . ' , List of 5
[08:08:31.363] | : . ' , ; ` | : . ' ,  $ type   : chr "VALUE"
[08:08:31.363] | : . ' , ; ` | : . ' ,  $ value  :List of 16
[08:08:31.363] | : . ' , ; ` | : . ' ,   ..$ value              : num 2
[08:08:31.363] | : . ' , ; ` | : . ' ,   ..$ visible            : logi TRUE
[08:08:31.363] | : . ' , ; ` | : . ' ,   ..$ stdout             : chr ""
[08:08:31.363] | : . ' , ; ` | : . ' ,   ..$ conditions         : list()
[08:08:31.363] | : . ' , ; ` | : . ' ,   ..$ rng                : logi FALSE
[08:08:31.363] | : . ' , ; ` | : . ' ,   ..$ seed               : NULL
[08:08:31.363] | : . ' , ; ` | : . ' ,   ..$ misuseGlobalEnv    : NULL
[08:08:31.363] | : . ' , ; ` | : . ' ,   ..$ misuseConnections  :List of 3
[08:08:31.363] | : . ' , ; ` | : . ' ,   .. ..$ added   : NULL
[08:08:31.363] | : . ' , ; ` | : . ' ,   .. ..$ removed : NULL
[08:08:31.363] | : . ' , ; ` | : . ' ,   .. ..$ replaced: NULL
[08:08:31.363] | : . ' , ; ` | : . ' ,   ..$ misuseDevices      : NULL
[08:08:31.363] | : . ' , ; ` | : . ' ,   ..$ misuseDefaultDevice: list()
[08:08:31.363] | : . ' , ; ` | : . ' ,   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:31"
[08:08:31.363] | : . ' , ; ` | : . ' ,   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:31"
[08:08:31.363] | : . ' , ; ` | : . ' ,   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "109"
[08:08:31.363] | : . ' , ; ` | : . ' ,   ..$ session_uuid       : chr "dee2a208d5ef67f03fdb13c0c9ecc01f"
[08:08:31.363] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "source")=List of 5
[08:08:31.363] | : . ' , ; ` | : . ' ,   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:31.363] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:31.363] | : . ' , ; ` | : . ' ,   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:31.363] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:31.363] | : . ' , ; ` | : . ' ,   .. .. ..$ pid   : int 69208
[08:08:31.363] | : . ' , ; ` | : . ' ,   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:30"
[08:08:31.363] | : . ' , ; ` | : . ' ,   .. .. ..$ random: int 2147483647
[08:08:31.363] | : . ' , ; ` | : . ' ,   ..$ r_info             :List of 4
[08:08:31.363] | : . ' , ; ` | : . ' ,   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:31.363] | : . ' , ; ` | : . ' ,   .. .. ..$ : int [1:3] 4 5 0
[08:08:31.363] | : . ' , ; ` | : . ' ,   .. ..$ os           : chr "unix"
[08:08:31.363] | : . ' , ; ` | : . ' ,   .. ..$ os_name      : chr "Linux"
[08:08:31.363] | : . ' , ; ` | : . ' ,   .. ..$ captures_utf8: logi TRUE
[08:08:31.363] | : . ' , ; ` | : . ' ,   ..$ version            : chr "1.8"
[08:08:31.363] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr "FutureResult"
[08:08:31.363] | : . ' , ; ` | : . ' ,  $ success: logi TRUE
[08:08:31.363] | : . ' , ; ` | : . ' ,  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[08:08:31.363] | : . ' , ; ` | : . ' ,   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:31.363] | : . ' , ; ` | : . ' ,  $ tag    : NULL
[08:08:31.374] | : . ' , ; ` | : . ' , Received FutureResult
[08:08:31.374] | : . ' , ; ` | : . ' , FutureResult:
[08:08:31.374] | : . ' , ; ` | : . ' , value: ‘numeric’
[08:08:31.374] | : . ' , ; ` | : . ' , visible: TRUE
[08:08:31.374] | : . ' , ; ` | : . ' , stdout: character
[08:08:31.374] | : . ' , ; ` | : . ' , conditions: [n = 0] 
[08:08:31.374] | : . ' , ; ` | : . ' , RNG used: FALSE
[08:08:31.374] | : . ' , ; ` | : . ' , duration: 0.002951622 secs (started 2025-06-17 08:08:31.314155)
[08:08:31.374] | : . ' , ; ` | : . ' , version: 1.8
[08:08:31.374] | : . ' , ; ` | : . ' , FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'remove', earlySignal = 0) ...
[08:08:31.374] | : . ' , ; ` | : . ' , ; Removed future from position #1
[08:08:31.375] | : . ' , ; ` | : . ' , ; Number of registered futures: 1
[08:08:31.375] | : . ' , ; ` | : . ' , FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'remove', earlySignal = 0) ... done
[08:08:31.375] | : . ' , ; ` | : . ' , Erased future from future backend
[08:08:31.375] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:31.375] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:31.375] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:31.375] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:31.375] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:31.375] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:31.376] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:31.376] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:31.376] | : . ' , ; ` | : . ' , ;  int 0
[08:08:31.376] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:31.376] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ... done
[08:08:31.376] | : . ' , ; ` | : . ' receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:31.376] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-109>) ... done
[08:08:31.377] | : . ' , ; ` | : . assertFutureResult() ...
[08:08:31.377] | : . ' , ; ` | : . ' Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:31.377] | : . ' , ; ` | : . ' Future uuid: 109
[08:08:31.377] | : . ' , ; ` | : . ' identical; success
[08:08:31.377] | : . ' , ; ` | : . assertFutureResult() ... done
[08:08:31.377] | : . ' , ; ` | : . Future at position #1 is resolved ...
[08:08:31.377] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-109>) ...
[08:08:31.377] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:31.377] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:31.377] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:31.378] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:31.378] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:31.378] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:31.378] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:31.378] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:31.378] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:31.378] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:31.378] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:31.378] | : . ' , ; ` | : . ' , ;  int 0
[08:08:31.379] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:31.379] | : . ' , ; ` | : . ' , check for misuse ...
[08:08:31.379] | : . ' , ; ` | : . ' , check for misuse ... done
[08:08:31.379] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-109>) ... done
[08:08:31.379] | : . ' , ; ` | : . Future at position #1 is resolved ... done
[08:08:31.379] | : . ' , ; ` | : collectValues('workers-297aebe174e28ef42df314fbb4f321b2', firstOnly = TRUE) ... done
[08:08:31.380] | : . ' , ; ` | : Remove collected futures ...
[08:08:31.380] | : . ' , ; ` | : . Indices of futures to drop: [n=1] ‘1’
[08:08:31.380] | : . ' , ; ` | : Remove collected futures ... done
[08:08:31.380] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'collect-first', earlySignal = 1) ... done
[08:08:31.380] | : . ' , ; ` | Early signaling of 2 future candidates ...
[08:08:31.380] | : . ' , ; ` | Number of futures with early signaling requested: 0
[08:08:31.380] | : . ' , ; ` | Early signaling of 2 future candidates ... done
[08:08:31.380] | : . ' , ; ` | Number of registered futures: 2
[08:08:31.380] | : . ' , ; ` Polling for a free worker ... done
[08:08:31.381] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:31.381] | : . ' , ; ` | Listing all futures
[08:08:31.381] | : . ' , ; ` | Number of registered futures: 1
[08:08:31.381] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:31.381] | : . ' , ; ` Total time: 0.0329315662384033
[08:08:31.381] | : . ' , ; requestNode() ... done
[08:08:31.381] | : . ' , ; FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:31.381] | : . ' , ; ` Listing all futures
[08:08:31.381] | : . ' , ; ` Number of registered futures: 1
[08:08:31.381] | : . ' , ; FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:31.382] | : . ' , ; avail: [n=2] ‘1’
[08:08:31.382] | : . ' , ; Index of first available worker: 1
[08:08:31.382] | : . ' , ; Validate that the worker is functional ...
[08:08:31.482] | : . ' , ; ` Worker is functional
[08:08:31.482] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:31.482] | : . ' , ; ` | Listing all futures
[08:08:31.482] | : . ' , ; ` | Number of registered futures: 1
[08:08:31.483] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:31.483] | : . ' , ; Validate that the worker is functional ... done
[08:08:31.483] | : . ' , requestWorker() ... done
[08:08:31.483] | : . ' , cluster node index: 1
[08:08:31.483] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:31.483] | : . ' eraseGlobalEnvironment() ...
[08:08:31.484] | : . ' eraseGlobalEnvironment() ... done
[08:08:31.484] | : . ' launchFuture() ...
[08:08:31.484] | : . ' , cluster node index: 1
[08:08:31.484] | : . ' , getFutureData() ...
[08:08:31.484] | : . ' , ; getFutureCore() ...
[08:08:31.484] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:31.484] | : . ' , ; getFutureCore() ... done
[08:08:31.484] | : . ' , ; getFutureCapture() ...
[08:08:31.484] | : . ' , ; getFutureCapture() ... done
[08:08:31.485] | : . ' , ; getFutureContext() ...
[08:08:31.485] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:31.485] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:31.485] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:31.485] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:31.485] | : . ' , ; getFutureContext() ... done
[08:08:31.485] | : . ' , getFutureData() ... done
[08:08:31.486] | : . ' , FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'add', earlySignal = 0) ...
[08:08:31.486] | : . ' , ; Appended future to position #2
[08:08:31.486] | : . ' , ; Number of registered futures: 2
[08:08:31.486] | : . ' , FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'add', earlySignal = 0) ... done
[08:08:31.486] | : . ' launchFuture() ... done
[08:08:31.486] | : . ' MultisessionFuture started
[08:08:31.486] | : . Launching futures ... done
[08:08:31.486] | : Using MultisessionFutureBackend ... done
[08:08:31.486] | : Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:31.487] | run() for ‘Future’ (<unnamed-111>) ... done
[08:08:31.487] future(..., label = NULL) ... done

Classes 'listenv', 'environment' <environment: 0x564301831170> 
Classes 'listenv', 'environment' <environment: 0x564302ed8828> 
 - attr(*, "dim.")= int [1:2] 1 6
 - attr(*, "dimnames.")=List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
[08:08:31.490] resolved() for listenv ...
[08:08:31.491] | resolved() for matrix ...
[08:08:31.491] | : Number of elements: 6
[08:08:31.491] | : Number of futures: 6
[08:08:31.491] | : resolved() for MultisessionFuture (<unnamed-110>) ...
[08:08:31.491] | : . Cluster node socket connection: index=5, id=1578
[08:08:31.491] | : . assertValidConnection() ...
[08:08:31.492] | : . ' cluster node index: 2
[08:08:31.492] | : . assertValidConnection() ... done
[08:08:31.492] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:31.492] | : . ' cluster node index: 2
[08:08:31.493] | : . ' [1] TRUE
[08:08:31.493] | : . ' received data:
[08:08:31.493] | : . ' List of 5
[08:08:31.493] | : . '  $ type   : chr "VALUE"
[08:08:31.493] | : . '  $ value  :List of 16
[08:08:31.493] | : . '   ..$ value              : NULL
[08:08:31.493] | : . '   ..$ visible            : logi TRUE
[08:08:31.493] | : . '   ..$ stdout             : chr ""
[08:08:31.493] | : . '   ..$ conditions         : list()
[08:08:31.493] | : . '   ..$ rng                : logi FALSE
[08:08:31.493] | : . '   ..$ seed               : NULL
[08:08:31.493] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:31.493] | : . '   ..$ misuseConnections  :List of 3
[08:08:31.493] | : . '   .. ..$ added   : NULL
[08:08:31.493] | : . '   .. ..$ removed : NULL
[08:08:31.493] | : . '   .. ..$ replaced: NULL
[08:08:31.493] | : . '   ..$ misuseDevices      : NULL
[08:08:31.493] | : . '   ..$ misuseDefaultDevice: list()
[08:08:31.493] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:31"
[08:08:31.493] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:31"
[08:08:31.493] | : . '   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "110"
[08:08:31.493] | : . '   ..$ session_uuid       : chr "0b8fc0d1486ac64ba030ccf6b4936216"
[08:08:31.493] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:31.493] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:31.493] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:31.493] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:31.493] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:31.493] | : . '   .. .. ..$ pid   : int 69207
[08:08:31.493] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:30"
[08:08:31.493] | : . '   .. .. ..$ random: int 2147483647
[08:08:31.493] | : . '   ..$ r_info             :List of 4
[08:08:31.493] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:31.493] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:31.493] | : . '   .. ..$ os           : chr "unix"
[08:08:31.493] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:31.493] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:31.493] | : . '   ..$ version            : chr "1.8"
[08:08:31.493] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:31.493] | : . '  $ success: logi TRUE
[08:08:31.493] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:31.493] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:31.493] | : . '  $ tag    : NULL
[08:08:31.504] | : . ' Received FutureResult
[08:08:31.504] | : . ' FutureResult:
[08:08:31.504] | : . ' value: ‘NULL’
[08:08:31.504] | : . ' visible: TRUE
[08:08:31.504] | : . ' stdout: character
[08:08:31.504] | : . ' conditions: [n = 0] 
[08:08:31.504] | : . ' RNG used: FALSE
[08:08:31.504] | : . ' duration: 0.002551556 secs (started 2025-06-17 08:08:31.37919)
[08:08:31.504] | : . ' version: 1.8
[08:08:31.504] | : . ' FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'remove', earlySignal = 0) ...
[08:08:31.504] | : . ' , Removed future from position #1
[08:08:31.505] | : . ' , Number of registered futures: 1
[08:08:31.505] | : . ' FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'remove', earlySignal = 0) ... done
[08:08:31.505] | : . ' Erased future from future backend
[08:08:31.505] | : . ' result() for ClusterFuture ...
[08:08:31.505] | : . ' , result already collected: FutureResult
[08:08:31.505] | : . ' result() for ClusterFuture ... done
[08:08:31.505] | : . ' signalConditions() ...
[08:08:31.505] | : . ' , include = ‘immediateCondition’
[08:08:31.505] | : . ' , exclude = 
[08:08:31.505] | : . ' , resignal = FALSE
[08:08:31.506] | : . ' , Number of conditions: 0
[08:08:31.506] | : . ' ,  int 0
[08:08:31.506] | : . ' signalConditions() ... done
[08:08:31.506] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:31.506] | : . receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:31.506] | : resolved() for MultisessionFuture (<unnamed-110>) ... done
[08:08:31.506] | : assertFutureResult() ...
[08:08:31.507] | : . Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:31.507] | : . Future uuid: 110
[08:08:31.507] | : . identical; success
[08:08:31.507] | : assertFutureResult() ... done
[08:08:31.507] | : resolved() for MultisessionFuture (<unnamed-111>) ...
[08:08:31.507] | : . Cluster node socket connection: index=4, id=1577
[08:08:31.507] | : . assertValidConnection() ...
[08:08:31.507] | : . ' cluster node index: 1
[08:08:31.508] | : . assertValidConnection() ... done
[08:08:31.518] | : . socketSelect(list(<connection #4 (id=1577)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:31.518] | : resolved() for MultisessionFuture (<unnamed-111>) ... done
[08:08:31.518] | resolved() for matrix ... done
[08:08:31.519] resolved() for listenv ... done
 logi [1, 1:6] TRUE TRUE TRUE FALSE TRUE TRUE
 - attr(*, "dimnames")=List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
 - attr(*, "names")= chr [1:6] "a" "b" "c" "d" ...
[08:08:31.520] value() for listenv ...
[08:08:31.520] | recursive: 0
[08:08:31.520] | reduce: FALSE
[08:08:31.521] | length: 6
[08:08:31.522] | elements: ‘a’, ‘b’, ‘c’, ‘d’, ‘’, ‘’
[08:08:31.522] | Number of remaining objects: 6
[08:08:31.522] | checking value #1:
[08:08:31.522] | 'obj' is atomic
[08:08:31.522] | signalConditionsASAP(numeric, pos=1) ...
[08:08:31.522] | : nx: 6
[08:08:31.522] | : relay: TRUE
[08:08:31.522] | : stdout: TRUE
[08:08:31.522] | : signal: TRUE
[08:08:31.522] | : resignal: FALSE
[08:08:31.523] | : force: TRUE
[08:08:31.523] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:31.523] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:31.523] | : until=2
[08:08:31.523] | : relaying element #2
[08:08:31.523] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:31.523] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:31.523] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:31.523] | length: 5 (resolved future 1)
[08:08:31.524] value() for listenv ... done
[08:08:31.524] checking value #2:
[08:08:31.524] 'obj' is MultisessionFuture
[08:08:31.524] MultisessionFuture #2
[08:08:31.524] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:31.524] | nx: 6
[08:08:31.524] | relay: TRUE
[08:08:31.524] | stdout: TRUE
[08:08:31.524] | signal: TRUE
[08:08:31.524] | resignal: FALSE
[08:08:31.524] | force: TRUE
[08:08:31.525] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:31.525] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:31.525] | until=2
[08:08:31.525] | relaying element #2
[08:08:31.525] | value() for MultisessionFuture (<unnamed-109>) ...
[08:08:31.525] | : result() for ClusterFuture ...
[08:08:31.525] | : . result already collected: FutureResult
[08:08:31.525] | : result() for ClusterFuture ... done
[08:08:31.525] | : result() for ClusterFuture ...
[08:08:31.526] | : . result already collected: FutureResult
[08:08:31.526] | : result() for ClusterFuture ... done
[08:08:31.526] | : signalConditions() ...
[08:08:31.526] | : . include = ‘immediateCondition’
[08:08:31.526] | : . exclude = 
[08:08:31.526] | : . resignal = FALSE
[08:08:31.526] | : . Number of conditions: 0
[08:08:31.526] | : .  int 0
[08:08:31.527] | : signalConditions() ... done
[08:08:31.527] | : relay stdout ...
[08:08:31.527] | : relay stdout ... done
[08:08:31.527] | : check for misuse ...
[08:08:31.527] | : check for misuse ... done
[08:08:31.527] | value() for MultisessionFuture (<unnamed-109>) ... done
[08:08:31.527] | result() for ClusterFuture ...
[08:08:31.527] | : result already collected: FutureResult
[08:08:31.528] | result() for ClusterFuture ... done
[08:08:31.528] | signalConditions() ...
[08:08:31.528] | : include = ‘immediateCondition’
[08:08:31.528] | : exclude = 
[08:08:31.528] | : resignal = FALSE
[08:08:31.528] | : Number of conditions: 0
[08:08:31.528] | :  int 0
[08:08:31.529] | signalConditions() ... done
[08:08:31.529] | result() for ClusterFuture ...
[08:08:31.529] | : result already collected: FutureResult
[08:08:31.529] | result() for ClusterFuture ... done
[08:08:31.529] | signalConditions() ...
[08:08:31.529] | : include = ‘condition’
[08:08:31.529] | : exclude = ‘error’, ‘immediateCondition’
[08:08:31.529] | : resignal = TRUE
[08:08:31.529] | : Number of conditions: 0
[08:08:31.529] | :  int 0
[08:08:31.530] | signalConditions() ... done
[08:08:31.530] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:31.530] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:31.530] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:31.530] value(<MultisessionFuture>, ...) ...
[08:08:31.530] value(<MultisessionFuture>, ...) ... done
[08:08:31.530] value() for MultisessionFuture (<unnamed-109>) ...
[08:08:31.531] | result() for ClusterFuture ...
[08:08:31.531] | : result already collected: FutureResult
[08:08:31.531] | result() for ClusterFuture ... done
[08:08:31.531] | result() for ClusterFuture ...
[08:08:31.531] | : result already collected: FutureResult
[08:08:31.531] | result() for ClusterFuture ... done
[08:08:31.531] | signalConditions() ...
[08:08:31.531] | : include = ‘immediateCondition’
[08:08:31.531] | : exclude = 
[08:08:31.531] | : resignal = FALSE
[08:08:31.532] | : Number of conditions: 0
[08:08:31.532] | :  int 0
[08:08:31.532] | signalConditions() ... done
[08:08:31.532] | check for misuse ...
[08:08:31.532] | check for misuse ... done
[08:08:31.532] value() for MultisessionFuture (<unnamed-109>) ... done
[08:08:31.532] value: <numeric>
[08:08:31.533] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:31.533] | nx: 6
[08:08:31.533] | relay: TRUE
[08:08:31.533] | stdout: TRUE
[08:08:31.533] | signal: TRUE
[08:08:31.533] | resignal: FALSE
[08:08:31.535] | force: TRUE
[08:08:31.535] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:31.536] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:31.536] | until=3
[08:08:31.536] | relaying element #3
[08:08:31.536] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:31.536] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:31.536] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:31.536] resolve() for MultisessionFuture ...
[08:08:31.536] resolve() for MultisessionFuture ... done
[08:08:31.536] length: 4 (resolved future 2)

[08:08:31.537] checking value #3:
[08:08:31.537] 'obj' is MultisessionFuture
[08:08:31.537] MultisessionFuture #3
[08:08:31.537] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:31.537] | nx: 6
[08:08:31.537] | relay: TRUE
[08:08:31.537] | stdout: TRUE
[08:08:31.537] | signal: TRUE
[08:08:31.537] | resignal: FALSE
[08:08:31.537] | force: TRUE
[08:08:31.537] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:31.538] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:31.538] | until=3
[08:08:31.538] | relaying element #3
[08:08:31.538] | value() for MultisessionFuture (<unnamed-110>) ...
[08:08:31.538] | : result() for ClusterFuture ...
[08:08:31.538] | : . result already collected: FutureResult
[08:08:31.538] | : result() for ClusterFuture ... done
[08:08:31.538] | : result() for ClusterFuture ...
[08:08:31.538] | : . result already collected: FutureResult
[08:08:31.538] | : result() for ClusterFuture ... done
[08:08:31.539] | : signalConditions() ...
[08:08:31.539] | : . include = ‘immediateCondition’
[08:08:31.539] | : . exclude = 
[08:08:31.539] | : . resignal = FALSE
[08:08:31.539] | : . Number of conditions: 0
[08:08:31.539] | : .  int 0
[08:08:31.539] | : signalConditions() ... done
[08:08:31.540] | : relay stdout ...
[08:08:31.540] | : relay stdout ... done
[08:08:31.540] | : check for misuse ...
[08:08:31.540] | : check for misuse ... done
[08:08:31.540] | value() for MultisessionFuture (<unnamed-110>) ... done
[08:08:31.540] | result() for ClusterFuture ...
[08:08:31.540] | : result already collected: FutureResult
[08:08:31.540] | result() for ClusterFuture ... done
[08:08:31.540] | signalConditions() ...
[08:08:31.540] | : include = ‘immediateCondition’
[08:08:31.541] | : exclude = 
[08:08:31.541] | : resignal = FALSE
[08:08:31.541] | : Number of conditions: 0
[08:08:31.541] | :  int 0
[08:08:31.541] | signalConditions() ... done
[08:08:31.541] | result() for ClusterFuture ...
[08:08:31.541] | : result already collected: FutureResult
[08:08:31.542] | result() for ClusterFuture ... done
[08:08:31.542] | signalConditions() ...
[08:08:31.542] | : include = ‘condition’
[08:08:31.542] | : exclude = ‘error’, ‘immediateCondition’
[08:08:31.542] | : resignal = TRUE
[08:08:31.542] | : Number of conditions: 0
[08:08:31.542] | :  int 0
[08:08:31.542] | signalConditions() ... done
[08:08:31.543] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:31.543] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:31.543] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:31.543] value(<MultisessionFuture>, ...) ...
[08:08:31.543] value(<MultisessionFuture>, ...) ... done
[08:08:31.543] value() for MultisessionFuture (<unnamed-110>) ...
[08:08:31.543] | result() for ClusterFuture ...
[08:08:31.543] | : result already collected: FutureResult
[08:08:31.543] | result() for ClusterFuture ... done
[08:08:31.543] | result() for ClusterFuture ...
[08:08:31.544] | : result already collected: FutureResult
[08:08:31.544] | result() for ClusterFuture ... done
[08:08:31.544] | signalConditions() ...
[08:08:31.544] | : include = ‘immediateCondition’
[08:08:31.544] | : exclude = 
[08:08:31.544] | : resignal = FALSE
[08:08:31.544] | : Number of conditions: 0
[08:08:31.544] | :  int 0
[08:08:31.545] | signalConditions() ... done
[08:08:31.545] | check for misuse ...
[08:08:31.545] | check for misuse ... done
[08:08:31.545] value() for MultisessionFuture (<unnamed-110>) ... done
[08:08:31.545] value: <NULL>
[08:08:31.545] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:31.545] | nx: 6
[08:08:31.545] | relay: TRUE
[08:08:31.546] | stdout: TRUE
[08:08:31.546] | signal: TRUE
[08:08:31.546] | resignal: FALSE
[08:08:31.546] | force: TRUE
[08:08:31.546] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:31.546] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:31.546] | until=4
[08:08:31.546] | relaying element #4
[08:08:31.546] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:31.546] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:31.546] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:31.547] resolve() for MultisessionFuture ...
[08:08:31.547] resolve() for MultisessionFuture ... done
[08:08:31.547] length: 3 (resolved future 3)

[08:08:31.547] checking value #4:
[08:08:31.547] 'obj' is MultisessionFuture
[08:08:31.547] resolved() for MultisessionFuture (<unnamed-111>) ...
[08:08:31.547] | Cluster node socket connection: index=4, id=1577
[08:08:31.548] | assertValidConnection() ...
[08:08:31.548] | : cluster node index: 1
[08:08:31.548] | assertValidConnection() ... done
[08:08:31.548] | receiveMessageFromWorker() for ClusterFuture ...
[08:08:31.548] | : cluster node index: 1
[08:08:31.548] | : [1] TRUE
[08:08:31.549] | : received data:
[08:08:31.549] | : List of 5
[08:08:31.549] | :  $ type   : chr "VALUE"
[08:08:31.549] | :  $ value  :List of 16
[08:08:31.549] | :   ..$ value              : num 4
[08:08:31.549] | :   ..$ visible            : logi TRUE
[08:08:31.549] | :   ..$ stdout             : chr ""
[08:08:31.549] | :   ..$ conditions         : list()
[08:08:31.549] | :   ..$ rng                : logi FALSE
[08:08:31.549] | :   ..$ seed               : NULL
[08:08:31.549] | :   ..$ misuseGlobalEnv    : NULL
[08:08:31.549] | :   ..$ misuseConnections  :List of 3
[08:08:31.549] | :   .. ..$ added   : NULL
[08:08:31.549] | :   .. ..$ removed : NULL
[08:08:31.549] | :   .. ..$ replaced: NULL
[08:08:31.549] | :   ..$ misuseDevices      : NULL
[08:08:31.549] | :   ..$ misuseDefaultDevice: list()
[08:08:31.549] | :   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:31"
[08:08:31.549] | :   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:31"
[08:08:31.549] | :   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "111"
[08:08:31.549] | :   ..$ session_uuid       : chr "dee2a208d5ef67f03fdb13c0c9ecc01f"
[08:08:31.549] | :   .. ..- attr(*, "source")=List of 5
[08:08:31.549] | :   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:31.549] | :   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:31.549] | :   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:31.549] | :   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:31.549] | :   .. .. ..$ pid   : int 69208
[08:08:31.549] | :   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:30"
[08:08:31.549] | :   .. .. ..$ random: int 2147483647
[08:08:31.549] | :   ..$ r_info             :List of 4
[08:08:31.549] | :   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:31.549] | :   .. .. ..$ : int [1:3] 4 5 0
[08:08:31.549] | :   .. ..$ os           : chr "unix"
[08:08:31.549] | :   .. ..$ os_name      : chr "Linux"
[08:08:31.549] | :   .. ..$ captures_utf8: logi TRUE
[08:08:31.549] | :   ..$ version            : chr "1.8"
[08:08:31.549] | :   ..- attr(*, "class")= chr "FutureResult"
[08:08:31.549] | :  $ success: logi TRUE
[08:08:31.549] | :  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:31.549] | :   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:31.549] | :  $ tag    : NULL
[08:08:31.559] | : Received FutureResult
[08:08:31.559] | : FutureResult:
[08:08:31.559] | : value: ‘numeric’
[08:08:31.559] | : visible: TRUE
[08:08:31.559] | : stdout: character
[08:08:31.559] | : conditions: [n = 0] 
[08:08:31.559] | : RNG used: FALSE
[08:08:31.559] | : duration: 0.002584696 secs (started 2025-06-17 08:08:31.527226)
[08:08:31.559] | : version: 1.8
[08:08:31.560] | : FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'remove', earlySignal = 0) ...
[08:08:31.560] | : . Removed future from position #1
[08:08:31.560] | : . Number of registered futures: 0
[08:08:31.560] | : FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'remove', earlySignal = 0) ... done
[08:08:31.560] | : Erased future from future backend
[08:08:31.560] | : result() for ClusterFuture ...
[08:08:31.561] | : . result already collected: FutureResult
[08:08:31.561] | : result() for ClusterFuture ... done
[08:08:31.561] | : signalConditions() ...
[08:08:31.561] | : . include = ‘immediateCondition’
[08:08:31.561] | : . exclude = 
[08:08:31.561] | : . resignal = FALSE
[08:08:31.561] | : . Number of conditions: 0
[08:08:31.561] | : .  int 0
[08:08:31.562] | : signalConditions() ... done
[08:08:31.562] | receiveMessageFromWorker() for ClusterFuture ... done
[08:08:31.562] | receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:31.562] resolved() for MultisessionFuture (<unnamed-111>) ... done
[08:08:31.562] assertFutureResult() ...
[08:08:31.562] | Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:31.562] | Future uuid: 111
[08:08:31.562] | identical; success
[08:08:31.562] assertFutureResult() ... done
[08:08:31.562] MultisessionFuture #4
[08:08:31.562] signalConditionsASAP(MultisessionFuture, pos=4) ...
[08:08:31.563] | nx: 6
[08:08:31.563] | relay: TRUE
[08:08:31.563] | stdout: TRUE
[08:08:31.563] | signal: TRUE
[08:08:31.563] | resignal: FALSE
[08:08:31.563] | force: TRUE
[08:08:31.563] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:31.563] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:31.563] | until=4
[08:08:31.563] | relaying element #4
[08:08:31.563] | value() for MultisessionFuture (<unnamed-111>) ...
[08:08:31.564] | : result() for ClusterFuture ...
[08:08:31.564] | : . result already collected: FutureResult
[08:08:31.564] | : result() for ClusterFuture ... done
[08:08:31.564] | : result() for ClusterFuture ...
[08:08:31.564] | : . result already collected: FutureResult
[08:08:31.564] | : result() for ClusterFuture ... done
[08:08:31.564] | : signalConditions() ...
[08:08:31.564] | : . include = ‘immediateCondition’
[08:08:31.564] | : . exclude = 
[08:08:31.564] | : . resignal = FALSE
[08:08:31.565] | : . Number of conditions: 0
[08:08:31.565] | : .  int 0
[08:08:31.565] | : signalConditions() ... done
[08:08:31.565] | : relay stdout ...
[08:08:31.565] | : relay stdout ... done
[08:08:31.565] | : check for misuse ...
[08:08:31.565] | : check for misuse ... done
[08:08:31.566] | value() for MultisessionFuture (<unnamed-111>) ... done
[08:08:31.566] | result() for ClusterFuture ...
[08:08:31.566] | : result already collected: FutureResult
[08:08:31.566] | result() for ClusterFuture ... done
[08:08:31.566] | signalConditions() ...
[08:08:31.566] | : include = ‘immediateCondition’
[08:08:31.566] | : exclude = 
[08:08:31.566] | : resignal = FALSE
[08:08:31.566] | : Number of conditions: 0
[08:08:31.566] | :  int 0
[08:08:31.567] | signalConditions() ... done
[08:08:31.567] | result() for ClusterFuture ...
[08:08:31.567] | : result already collected: FutureResult
[08:08:31.567] | result() for ClusterFuture ... done
[08:08:31.567] | signalConditions() ...
[08:08:31.567] | : include = ‘condition’
[08:08:31.567] | : exclude = ‘error’, ‘immediateCondition’
[08:08:31.568] | : resignal = TRUE
[08:08:31.568] | : Number of conditions: 0
[08:08:31.568] | :  int 0
[08:08:31.568] | signalConditions() ... done
[08:08:31.568] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.568] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.568] signalConditionsASAP(MultisessionFuture, pos=4) ... done
[08:08:31.569] value(<MultisessionFuture>, ...) ...
[08:08:31.569] value(<MultisessionFuture>, ...) ... done
[08:08:31.569] value() for MultisessionFuture (<unnamed-111>) ...
[08:08:31.569] | result() for ClusterFuture ...
[08:08:31.569] | : result already collected: FutureResult
[08:08:31.569] | result() for ClusterFuture ... done
[08:08:31.569] | result() for ClusterFuture ...
[08:08:31.569] | : result already collected: FutureResult
[08:08:31.569] | result() for ClusterFuture ... done
[08:08:31.569] | signalConditions() ...
[08:08:31.569] | : include = ‘immediateCondition’
[08:08:31.570] | : exclude = 
[08:08:31.570] | : resignal = FALSE
[08:08:31.570] | : Number of conditions: 0
[08:08:31.570] | :  int 0
[08:08:31.570] | signalConditions() ... done
[08:08:31.570] | check for misuse ...
[08:08:31.570] | check for misuse ... done
[08:08:31.571] value() for MultisessionFuture (<unnamed-111>) ... done
[08:08:31.571] value: <numeric>
[08:08:31.571] signalConditionsASAP(MultisessionFuture, pos=4) ...
[08:08:31.571] | nx: 6
[08:08:31.571] | relay: TRUE
[08:08:31.571] | stdout: TRUE
[08:08:31.571] | signal: TRUE
[08:08:31.571] | resignal: FALSE
[08:08:31.571] | force: TRUE
[08:08:31.571] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.572] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.572] | until=5
[08:08:31.572] | relaying element #5
[08:08:31.572] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.572] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.572] signalConditionsASAP(MultisessionFuture, pos=4) ... done
[08:08:31.572] resolve() for MultisessionFuture ...
[08:08:31.572] resolve() for MultisessionFuture ... done
[08:08:31.572] length: 2 (resolved future 4)

[08:08:31.573] checking value #5:
[08:08:31.573] 'obj' is NULL
[08:08:31.573] signalConditionsASAP(NULL, pos=5) ...
[08:08:31.573] | nx: 6
[08:08:31.573] | relay: TRUE
[08:08:31.573] | stdout: TRUE
[08:08:31.573] | signal: TRUE
[08:08:31.573] | resignal: FALSE
[08:08:31.573] | force: TRUE
[08:08:31.573] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.573] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.574] | until=6
[08:08:31.574] | relaying element #6
[08:08:31.574] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:31.574] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.574] signalConditionsASAP(NULL, pos=5) ... done
[08:08:31.574] signalConditionsASAP(NULL, pos=5) ...
[08:08:31.574] | nx: 6
[08:08:31.574] | relay: TRUE
[08:08:31.574] | stdout: TRUE
[08:08:31.574] | signal: TRUE
[08:08:31.575] | resignal: FALSE
[08:08:31.575] | force: TRUE
[08:08:31.575] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:31.575] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.575] | until=6
[08:08:31.575] | relaying element #6
[08:08:31.575] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:31.575] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.575] signalConditionsASAP(NULL, pos=5) ... done
[08:08:31.575] length: 1 (resolved future 5)

[08:08:31.576] checking value #6:
[08:08:31.576] 'obj' is atomic
[08:08:31.576] signalConditionsASAP(numeric, pos=6) ...
[08:08:31.576] | nx: 6
[08:08:31.576] | relay: TRUE
[08:08:31.576] | stdout: TRUE
[08:08:31.576] | signal: TRUE
[08:08:31.576] | resignal: FALSE
[08:08:31.576] | force: TRUE
[08:08:31.576] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:31.577] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.577] | until=6
[08:08:31.577] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:31.577] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.577] signalConditionsASAP(numeric, pos=6) ... done
[08:08:31.577] length: 0 (resolved future 6)

[08:08:31.577] Relaying remaining futures ...
[08:08:31.577] | signalConditionsASAP(NULL, pos=0) ...
[08:08:31.577] | : nx: 6
[08:08:31.578] | : relay: TRUE
[08:08:31.578] | : stdout: TRUE
[08:08:31.578] | : signal: TRUE
[08:08:31.578] | : resignal: FALSE
[08:08:31.578] | : force: TRUE
[08:08:31.578] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:31.578] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
 - flush all
[08:08:31.578] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:31.578] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.578] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:31.579] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 1 6
 - attr(*, "dimnames")=List of 2
  ..$ : chr "a"
  ..$ : chr [1:6] "a" "b" "c" "d" ...
Dimensions: c(2, 3)
[08:08:31.582] future(..., label = NULL) ...
[08:08:31.582] | lazy: FALSE
[08:08:31.582] | stdout: TRUE
[08:08:31.582] | conditions: [n=1] ‘condition’
[08:08:31.582] | gc: FALSE
[08:08:31.582] | earlySignal: FALSE
[08:08:31.583] | getGlobalsAndPackages() ...
[08:08:31.583] | : Searching for globals ...
[08:08:31.584] | : . globals found: [0] 
[08:08:31.584] | : Searching for globals ... done
[08:08:31.584] | : globals: [0] <none>
[08:08:31.584] | : packages: [0] <none>
[08:08:31.584] | getGlobalsAndPackages() ... done
[08:08:31.585] | run() for ‘Future’ (<unnamed-112>) ...
[08:08:31.585] | : state: ‘created’
[08:08:31.585] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:31.585] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:31.585] | : Using MultisessionFutureBackend ...
[08:08:31.585] | : . Number of futures since start: 6 (6 created, 6 launched, 8 finished)
[08:08:31.585] | : . Launching futures ...
[08:08:31.585] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:31.585] | : . ' , Workers: [n=2]
[08:08:31.586] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:31.587] | : . ' , FutureRegistry: ‘workers-297aebe174e28ef42df314fbb4f321b2’
[08:08:31.587] | : . ' , requestWorker() ...
[08:08:31.587] | : . ' , ; requestNode() ...
[08:08:31.587] | : . ' , ; ` Number of workers: 2
[08:08:31.588] | : . ' , ; ` Polling for a free worker ...
[08:08:31.588] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:31.588] | : . ' , ; ` | : Listing all futures
[08:08:31.588] | : . ' , ; ` | : Number of registered futures: 0
[08:08:31.588] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:31.588] | : . ' , ; ` | Total time: 0
[08:08:31.588] | : . ' , ; ` Polling for a free worker ... done
[08:08:31.588] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:31.588] | : . ' , ; ` | Listing all futures
[08:08:31.588] | : . ' , ; ` | Number of registered futures: 0
[08:08:31.589] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:31.589] | : . ' , ; ` avail: [n=2] ‘1’, ‘2’
[08:08:31.589] | : . ' , ; ` Index of first available worker: 1
[08:08:31.589] | : . ' , ; ` Validate that the worker is functional ...
[08:08:31.650] | : . ' , ; ` | Worker is functional
[08:08:31.650] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:31.651] | : . ' , ; ` | : Listing all futures
[08:08:31.651] | : . ' , ; ` | : Number of registered futures: 0
[08:08:31.651] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:31.651] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:31.651] | : . ' , ; requestNode() ... done
[08:08:31.651] | : . ' , ; cluster node index: 1
[08:08:31.651] | : . ' , requestWorker() ... done
[08:08:31.651] | : . ' , eraseGlobalEnvironment() ...
[08:08:31.652] | : . ' , eraseGlobalEnvironment() ... done
[08:08:31.652] | : . ' , launchFuture() ...
[08:08:31.652] | : . ' , ; cluster node index: 1
[08:08:31.652] | : . ' , ; getFutureData() ...
[08:08:31.652] | : . ' , ; ` getFutureCore() ...
[08:08:31.653] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:31.653] | : . ' , ; ` getFutureCore() ... done
[08:08:31.653] | : . ' , ; ` getFutureCapture() ...
[08:08:31.653] | : . ' , ; ` getFutureCapture() ... done
[08:08:31.653] | : . ' , ; ` getFutureContext() ...
[08:08:31.653] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:31.653] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:31.653] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:31.653] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:31.654] | : . ' , ; ` getFutureContext() ... done
[08:08:31.654] | : . ' , ; getFutureData() ... done
[08:08:31.654] | : . ' , ; FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'add', earlySignal = 0) ...
[08:08:31.654] | : . ' , ; ` Appended future to position #1
[08:08:31.654] | : . ' , ; ` Number of registered futures: 1
[08:08:31.654] | : . ' , ; FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'add', earlySignal = 0) ... done
[08:08:31.655] | : . ' , launchFuture() ... done
[08:08:31.655] | : . ' , MultisessionFuture started
[08:08:31.655] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:31.655] | : . Launching futures ... done
[08:08:31.655] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:31.655] | : Using MultisessionFutureBackend ... done
[08:08:31.655] | run() for ‘Future’ (<unnamed-112>) ... done
[08:08:31.655] future(..., label = NULL) ... done
[08:08:31.658] future(..., label = NULL) ...
[08:08:31.658] | lazy: FALSE
[08:08:31.658] | stdout: TRUE
[08:08:31.658] | conditions: [n=1] ‘condition’
[08:08:31.658] | gc: FALSE
[08:08:31.658] | earlySignal: FALSE
[08:08:31.658] | getGlobalsAndPackages() ...
[08:08:31.659] | : Searching for globals ...
[08:08:31.660] | : . globals found: [0] 
[08:08:31.660] | : Searching for globals ... done
[08:08:31.660] | : globals: [0] <none>
[08:08:31.660] | : packages: [0] <none>
[08:08:31.660] | getGlobalsAndPackages() ... done
[08:08:31.661] | run() for ‘Future’ (<unnamed-113>) ...
[08:08:31.661] | : state: ‘created’
[08:08:31.661] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:31.661] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:31.661] | : Using MultisessionFutureBackend ...
[08:08:31.661] | : . Number of futures since start: 7 (7 created, 7 launched, 8 finished)
[08:08:31.661] | : . Launching futures ...
[08:08:31.661] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:31.662] | : . ' , Workers: [n=2]
[08:08:31.662] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:31.663] | : . ' , FutureRegistry: ‘workers-297aebe174e28ef42df314fbb4f321b2’
[08:08:31.663] | : . ' , requestWorker() ...
[08:08:31.663] | : . ' , ; requestNode() ...
[08:08:31.664] | : . ' , ; ` Number of workers: 2
[08:08:31.664] | : . ' , ; ` Polling for a free worker ...
[08:08:31.664] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:31.664] | : . ' , ; ` | : Listing all futures
[08:08:31.664] | : . ' , ; ` | : Number of registered futures: 1
[08:08:31.664] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:31.664] | : . ' , ; ` | Total time: 0
[08:08:31.664] | : . ' , ; ` Polling for a free worker ... done
[08:08:31.664] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:31.665] | : . ' , ; ` | Listing all futures
[08:08:31.665] | : . ' , ; ` | Number of registered futures: 1
[08:08:31.665] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:31.665] | : . ' , ; ` avail: [n=2] ‘2’
[08:08:31.665] | : . ' , ; ` Index of first available worker: 2
[08:08:31.665] | : . ' , ; ` Validate that the worker is functional ...
[08:08:31.761] | : . ' , ; ` | Worker is functional
[08:08:31.761] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:31.761] | : . ' , ; ` | : Listing all futures
[08:08:31.761] | : . ' , ; ` | : Number of registered futures: 1
[08:08:31.761] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:31.762] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:31.762] | : . ' , ; requestNode() ... done
[08:08:31.762] | : . ' , ; cluster node index: 2
[08:08:31.762] | : . ' , requestWorker() ... done
[08:08:31.762] | : . ' , eraseGlobalEnvironment() ...
[08:08:31.762] | : . ' , eraseGlobalEnvironment() ... done
[08:08:31.763] | : . ' , launchFuture() ...
[08:08:31.763] | : . ' , ; cluster node index: 2
[08:08:31.763] | : . ' , ; getFutureData() ...
[08:08:31.763] | : . ' , ; ` getFutureCore() ...
[08:08:31.763] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:31.763] | : . ' , ; ` getFutureCore() ... done
[08:08:31.763] | : . ' , ; ` getFutureCapture() ...
[08:08:31.763] | : . ' , ; ` getFutureCapture() ... done
[08:08:31.763] | : . ' , ; ` getFutureContext() ...
[08:08:31.763] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:31.764] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:31.764] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:31.764] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:31.764] | : . ' , ; ` getFutureContext() ... done
[08:08:31.764] | : . ' , ; getFutureData() ... done
[08:08:31.764] | : . ' , ; FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'add', earlySignal = 0) ...
[08:08:31.765] | : . ' , ; ` Appended future to position #2
[08:08:31.765] | : . ' , ; ` Number of registered futures: 2
[08:08:31.765] | : . ' , ; FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'add', earlySignal = 0) ... done
[08:08:31.765] | : . ' , launchFuture() ... done
[08:08:31.765] | : . ' , MultisessionFuture started
[08:08:31.765] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:31.765] | : . Launching futures ... done
[08:08:31.765] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:31.765] | : Using MultisessionFutureBackend ... done
[08:08:31.765] | run() for ‘Future’ (<unnamed-113>) ... done
[08:08:31.766] future(..., label = NULL) ... done
[08:08:31.766] future(..., label = NULL) ...
[08:08:31.766] | lazy: FALSE
[08:08:31.766] | stdout: TRUE
[08:08:31.766] | conditions: [n=1] ‘condition’
[08:08:31.766] | gc: FALSE
[08:08:31.766] | earlySignal: FALSE
[08:08:31.767] | getGlobalsAndPackages() ...
[08:08:31.767] | : Searching for globals ...
[08:08:31.770] | : . globals found: [1] ‘{’
[08:08:31.770] | : Searching for globals ... done
[08:08:31.770] | : Resolving globals: FALSE
[08:08:31.770] | : Search for packages associated with the globals ...
[08:08:31.770] | : . Packages associated with globals: [1] ‘base’
[08:08:31.770] | : . Packages: [1] ‘base’
[08:08:31.771] | : Search for packages associated with the globals ... done
[08:08:31.771] | : Packages after dropping 'base': [0] 
[08:08:31.771] | : globals: [0] 
[08:08:31.771] | : packages: [0] 
[08:08:31.771] | getGlobalsAndPackages() ... done
[08:08:31.771] | run() for ‘Future’ (<unnamed-114>) ...
[08:08:31.771] | : state: ‘created’
[08:08:31.771] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:31.772] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:31.772] | : Using MultisessionFutureBackend ...
[08:08:31.772] | : . Number of futures since start: 8 (8 created, 8 launched, 8 finished)
[08:08:31.772] | : . Launching futures ...
[08:08:31.772] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:31.772] | : . ' , Workers: [n=2]
[08:08:31.772] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:31.774] | : . ' , FutureRegistry: ‘workers-297aebe174e28ef42df314fbb4f321b2’
[08:08:31.774] | : . ' , requestWorker() ...
[08:08:31.774] | : . ' , ; requestNode() ...
[08:08:31.774] | : . ' , ; ` Number of workers: 2
[08:08:31.774] | : . ' , ; ` Polling for a free worker ...
[08:08:31.774] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:31.775] | : . ' , ; ` | : Listing all futures
[08:08:31.775] | : . ' , ; ` | : Number of registered futures: 2
[08:08:31.775] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:31.775] | : . ' , ; ` | Poll #1 (0): usedNodes() = 2, workers = 2
[08:08:31.785] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'collect-first', earlySignal = 1) ...
[08:08:31.785] | : . ' , ; ` | : collectValues('workers-297aebe174e28ef42df314fbb4f321b2', firstOnly = TRUE) ...
[08:08:31.785] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-112>) ...
[08:08:31.786] | : . ' , ; ` | : . ' Cluster node socket connection: index=4, id=1577
[08:08:31.786] | : . ' , ; ` | : . ' assertValidConnection() ...
[08:08:31.786] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:31.786] | : . ' , ; ` | : . ' assertValidConnection() ... done
[08:08:31.787] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ...
[08:08:31.787] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:31.787] | : . ' , ; ` | : . ' , [1] TRUE
[08:08:31.787] | : . ' , ; ` | : . ' , received data:
[08:08:31.787] | : . ' , ; ` | : . ' , List of 5
[08:08:31.787] | : . ' , ; ` | : . ' ,  $ type   : chr "VALUE"
[08:08:31.787] | : . ' , ; ` | : . ' ,  $ value  :List of 16
[08:08:31.787] | : . ' , ; ` | : . ' ,   ..$ value              : num 2
[08:08:31.787] | : . ' , ; ` | : . ' ,   ..$ visible            : logi TRUE
[08:08:31.787] | : . ' , ; ` | : . ' ,   ..$ stdout             : chr ""
[08:08:31.787] | : . ' , ; ` | : . ' ,   ..$ conditions         : list()
[08:08:31.787] | : . ' , ; ` | : . ' ,   ..$ rng                : logi FALSE
[08:08:31.787] | : . ' , ; ` | : . ' ,   ..$ seed               : NULL
[08:08:31.787] | : . ' , ; ` | : . ' ,   ..$ misuseGlobalEnv    : NULL
[08:08:31.787] | : . ' , ; ` | : . ' ,   ..$ misuseConnections  :List of 3
[08:08:31.787] | : . ' , ; ` | : . ' ,   .. ..$ added   : NULL
[08:08:31.787] | : . ' , ; ` | : . ' ,   .. ..$ removed : NULL
[08:08:31.787] | : . ' , ; ` | : . ' ,   .. ..$ replaced: NULL
[08:08:31.787] | : . ' , ; ` | : . ' ,   ..$ misuseDevices      : NULL
[08:08:31.787] | : . ' , ; ` | : . ' ,   ..$ misuseDefaultDevice: list()
[08:08:31.787] | : . ' , ; ` | : . ' ,   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:31"
[08:08:31.787] | : . ' , ; ` | : . ' ,   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:31"
[08:08:31.787] | : . ' , ; ` | : . ' ,   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "112"
[08:08:31.787] | : . ' , ; ` | : . ' ,   ..$ session_uuid       : chr "dee2a208d5ef67f03fdb13c0c9ecc01f"
[08:08:31.787] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "source")=List of 5
[08:08:31.787] | : . ' , ; ` | : . ' ,   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:31.787] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:31.787] | : . ' , ; ` | : . ' ,   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:31.787] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:31.787] | : . ' , ; ` | : . ' ,   .. .. ..$ pid   : int 69208
[08:08:31.787] | : . ' , ; ` | : . ' ,   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:30"
[08:08:31.787] | : . ' , ; ` | : . ' ,   .. .. ..$ random: int 2147483647
[08:08:31.787] | : . ' , ; ` | : . ' ,   ..$ r_info             :List of 4
[08:08:31.787] | : . ' , ; ` | : . ' ,   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:31.787] | : . ' , ; ` | : . ' ,   .. .. ..$ : int [1:3] 4 5 0
[08:08:31.787] | : . ' , ; ` | : . ' ,   .. ..$ os           : chr "unix"
[08:08:31.787] | : . ' , ; ` | : . ' ,   .. ..$ os_name      : chr "Linux"
[08:08:31.787] | : . ' , ; ` | : . ' ,   .. ..$ captures_utf8: logi TRUE
[08:08:31.787] | : . ' , ; ` | : . ' ,   ..$ version            : chr "1.8"
[08:08:31.787] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr "FutureResult"
[08:08:31.787] | : . ' , ; ` | : . ' ,  $ success: logi TRUE
[08:08:31.787] | : . ' , ; ` | : . ' ,  $ time   : 'proc_time' Named num [1:5] 0.004 0 0.003 0 0
[08:08:31.787] | : . ' , ; ` | : . ' ,   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:31.787] | : . ' , ; ` | : . ' ,  $ tag    : NULL
[08:08:31.799] | : . ' , ; ` | : . ' , Received FutureResult
[08:08:31.799] | : . ' , ; ` | : . ' , FutureResult:
[08:08:31.799] | : . ' , ; ` | : . ' , value: ‘numeric’
[08:08:31.799] | : . ' , ; ` | : . ' , visible: TRUE
[08:08:31.799] | : . ' , ; ` | : . ' , stdout: character
[08:08:31.799] | : . ' , ; ` | : . ' , conditions: [n = 0] 
[08:08:31.799] | : . ' , ; ` | : . ' , RNG used: FALSE
[08:08:31.799] | : . ' , ; ` | : . ' , duration: 0.002777576 secs (started 2025-06-17 08:08:31.69525)
[08:08:31.799] | : . ' , ; ` | : . ' , version: 1.8
[08:08:31.799] | : . ' , ; ` | : . ' , FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'remove', earlySignal = 0) ...
[08:08:31.799] | : . ' , ; ` | : . ' , ; Removed future from position #1
[08:08:31.799] | : . ' , ; ` | : . ' , ; Number of registered futures: 1
[08:08:31.800] | : . ' , ; ` | : . ' , FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'remove', earlySignal = 0) ... done
[08:08:31.800] | : . ' , ; ` | : . ' , Erased future from future backend
[08:08:31.800] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:31.800] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:31.800] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:31.800] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:31.800] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:31.800] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:31.800] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:31.800] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:31.801] | : . ' , ; ` | : . ' , ;  int 0
[08:08:31.801] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:31.801] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ... done
[08:08:31.801] | : . ' , ; ` | : . ' receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:31.801] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-112>) ... done
[08:08:31.801] | : . ' , ; ` | : . assertFutureResult() ...
[08:08:31.802] | : . ' , ; ` | : . ' Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:31.802] | : . ' , ; ` | : . ' Future uuid: 112
[08:08:31.802] | : . ' , ; ` | : . ' identical; success
[08:08:31.802] | : . ' , ; ` | : . assertFutureResult() ... done
[08:08:31.802] | : . ' , ; ` | : . Future at position #1 is resolved ...
[08:08:31.802] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-112>) ...
[08:08:31.802] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:31.802] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:31.802] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:31.802] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:31.803] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:31.803] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:31.803] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:31.803] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:31.803] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:31.803] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:31.803] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:31.803] | : . ' , ; ` | : . ' , ;  int 0
[08:08:31.804] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:31.804] | : . ' , ; ` | : . ' , check for misuse ...
[08:08:31.804] | : . ' , ; ` | : . ' , check for misuse ... done
[08:08:31.804] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-112>) ... done
[08:08:31.804] | : . ' , ; ` | : . Future at position #1 is resolved ... done
[08:08:31.804] | : . ' , ; ` | : collectValues('workers-297aebe174e28ef42df314fbb4f321b2', firstOnly = TRUE) ... done
[08:08:31.805] | : . ' , ; ` | : Remove collected futures ...
[08:08:31.805] | : . ' , ; ` | : . Indices of futures to drop: [n=1] ‘1’
[08:08:31.805] | : . ' , ; ` | : Remove collected futures ... done
[08:08:31.805] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'collect-first', earlySignal = 1) ... done
[08:08:31.805] | : . ' , ; ` | Early signaling of 2 future candidates ...
[08:08:31.805] | : . ' , ; ` | Number of futures with early signaling requested: 0
[08:08:31.805] | : . ' , ; ` | Early signaling of 2 future candidates ... done
[08:08:31.805] | : . ' , ; ` | Number of registered futures: 2
[08:08:31.805] | : . ' , ; ` Polling for a free worker ... done
[08:08:31.805] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:31.806] | : . ' , ; ` | Listing all futures
[08:08:31.806] | : . ' , ; ` | Number of registered futures: 1
[08:08:31.806] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:31.806] | : . ' , ; ` Total time: 0.0310757160186768
[08:08:31.806] | : . ' , ; requestNode() ... done
[08:08:31.806] | : . ' , ; FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:31.806] | : . ' , ; ` Listing all futures
[08:08:31.806] | : . ' , ; ` Number of registered futures: 1
[08:08:31.806] | : . ' , ; FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:31.807] | : . ' , ; avail: [n=2] ‘1’
[08:08:31.807] | : . ' , ; Index of first available worker: 1
[08:08:31.807] | : . ' , ; Validate that the worker is functional ...
[08:08:31.902] | : . ' , ; ` Worker is functional
[08:08:31.902] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:31.902] | : . ' , ; ` | Listing all futures
[08:08:31.903] | : . ' , ; ` | Number of registered futures: 1
[08:08:31.903] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:31.903] | : . ' , ; Validate that the worker is functional ... done
[08:08:31.903] | : . ' , requestWorker() ... done
[08:08:31.903] | : . ' , cluster node index: 1
[08:08:31.903] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:31.903] | : . ' eraseGlobalEnvironment() ...
[08:08:31.904] | : . ' eraseGlobalEnvironment() ... done
[08:08:31.904] | : . ' launchFuture() ...
[08:08:31.904] | : . ' , cluster node index: 1
[08:08:31.904] | : . ' , getFutureData() ...
[08:08:31.904] | : . ' , ; getFutureCore() ...
[08:08:31.904] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:31.904] | : . ' , ; getFutureCore() ... done
[08:08:31.904] | : . ' , ; getFutureCapture() ...
[08:08:31.905] | : . ' , ; getFutureCapture() ... done
[08:08:31.905] | : . ' , ; getFutureContext() ...
[08:08:31.905] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:31.905] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:31.905] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:31.905] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:31.905] | : . ' , ; getFutureContext() ... done
[08:08:31.905] | : . ' , getFutureData() ... done
[08:08:31.906] | : . ' , FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'add', earlySignal = 0) ...
[08:08:31.906] | : . ' , ; Appended future to position #2
[08:08:31.906] | : . ' , ; Number of registered futures: 2
[08:08:31.906] | : . ' , FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'add', earlySignal = 0) ... done
[08:08:31.906] | : . ' launchFuture() ... done
[08:08:31.906] | : . ' MultisessionFuture started
[08:08:31.906] | : . Launching futures ... done
[08:08:31.906] | : Using MultisessionFutureBackend ... done
[08:08:31.907] | : Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:31.907] | run() for ‘Future’ (<unnamed-114>) ... done
[08:08:31.907] future(..., label = NULL) ... done

Classes 'listenv', 'environment' <environment: 0x564303cae8f8> 
Classes 'listenv', 'environment' <environment: 0x564304393e38> 
 - attr(*, "dim.")= int [1:2] 2 3
 - attr(*, "dimnames.")=List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
[08:08:31.910] resolved() for listenv ...
[08:08:31.911] | resolved() for matrix ...
[08:08:31.911] | : Number of elements: 6
[08:08:31.911] | : Number of futures: 6
[08:08:31.911] | : resolved() for MultisessionFuture (<unnamed-113>) ...
[08:08:31.912] | : . Cluster node socket connection: index=5, id=1578
[08:08:31.912] | : . assertValidConnection() ...
[08:08:31.912] | : . ' cluster node index: 2
[08:08:31.912] | : . assertValidConnection() ... done
[08:08:31.913] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:31.913] | : . ' cluster node index: 2
[08:08:31.913] | : . ' [1] TRUE
[08:08:31.913] | : . ' received data:
[08:08:31.913] | : . ' List of 5
[08:08:31.913] | : . '  $ type   : chr "VALUE"
[08:08:31.913] | : . '  $ value  :List of 16
[08:08:31.913] | : . '   ..$ value              : NULL
[08:08:31.913] | : . '   ..$ visible            : logi TRUE
[08:08:31.913] | : . '   ..$ stdout             : chr ""
[08:08:31.913] | : . '   ..$ conditions         : list()
[08:08:31.913] | : . '   ..$ rng                : logi FALSE
[08:08:31.913] | : . '   ..$ seed               : NULL
[08:08:31.913] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:31.913] | : . '   ..$ misuseConnections  :List of 3
[08:08:31.913] | : . '   .. ..$ added   : NULL
[08:08:31.913] | : . '   .. ..$ removed : NULL
[08:08:31.913] | : . '   .. ..$ replaced: NULL
[08:08:31.913] | : . '   ..$ misuseDevices      : NULL
[08:08:31.913] | : . '   ..$ misuseDefaultDevice: list()
[08:08:31.913] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:31"
[08:08:31.913] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:31"
[08:08:31.913] | : . '   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "113"
[08:08:31.913] | : . '   ..$ session_uuid       : chr "0b8fc0d1486ac64ba030ccf6b4936216"
[08:08:31.913] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:31.913] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:31.913] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:31.913] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:31.913] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:31.913] | : . '   .. .. ..$ pid   : int 69207
[08:08:31.913] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:30"
[08:08:31.913] | : . '   .. .. ..$ random: int 2147483647
[08:08:31.913] | : . '   ..$ r_info             :List of 4
[08:08:31.913] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:31.913] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:31.913] | : . '   .. ..$ os           : chr "unix"
[08:08:31.913] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:31.913] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:31.913] | : . '   ..$ version            : chr "1.8"
[08:08:31.913] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:31.913] | : . '  $ success: logi TRUE
[08:08:31.913] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:31.913] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:31.913] | : . '  $ tag    : NULL
[08:08:31.926] | : . ' Received FutureResult
[08:08:31.926] | : . ' FutureResult:
[08:08:31.926] | : . ' value: ‘NULL’
[08:08:31.926] | : . ' visible: TRUE
[08:08:31.926] | : . ' stdout: character
[08:08:31.926] | : . ' conditions: [n = 0] 
[08:08:31.926] | : . ' RNG used: FALSE
[08:08:31.926] | : . ' duration: 0.002698421 secs (started 2025-06-17 08:08:31.80518)
[08:08:31.926] | : . ' version: 1.8
[08:08:31.927] | : . ' FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'remove', earlySignal = 0) ...
[08:08:31.927] | : . ' , Removed future from position #1
[08:08:31.927] | : . ' , Number of registered futures: 1
[08:08:31.927] | : . ' FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'remove', earlySignal = 0) ... done
[08:08:31.927] | : . ' Erased future from future backend
[08:08:31.928] | : . ' result() for ClusterFuture ...
[08:08:31.928] | : . ' , result already collected: FutureResult
[08:08:31.928] | : . ' result() for ClusterFuture ... done
[08:08:31.928] | : . ' signalConditions() ...
[08:08:31.928] | : . ' , include = ‘immediateCondition’
[08:08:31.928] | : . ' , exclude = 
[08:08:31.928] | : . ' , resignal = FALSE
[08:08:31.928] | : . ' , Number of conditions: 0
[08:08:31.928] | : . ' ,  int 0
[08:08:31.929] | : . ' signalConditions() ... done
[08:08:31.929] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:31.929] | : . receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:31.929] | : resolved() for MultisessionFuture (<unnamed-113>) ... done
[08:08:31.929] | : assertFutureResult() ...
[08:08:31.929] | : . Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:31.929] | : . Future uuid: 113
[08:08:31.929] | : . identical; success
[08:08:31.929] | : assertFutureResult() ... done
[08:08:31.930] | : resolved() for MultisessionFuture (<unnamed-114>) ...
[08:08:31.930] | : . Cluster node socket connection: index=4, id=1577
[08:08:31.930] | : . assertValidConnection() ...
[08:08:31.930] | : . ' cluster node index: 1
[08:08:31.930] | : . assertValidConnection() ... done
[08:08:31.941] | : . socketSelect(list(<connection #4 (id=1577)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:31.941] | : resolved() for MultisessionFuture (<unnamed-114>) ... done
[08:08:31.941] | resolved() for matrix ... done
[08:08:31.941] resolved() for listenv ... done
 logi [1:2, 1:3] TRUE TRUE TRUE FALSE TRUE TRUE
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
 - attr(*, "names")= chr [1:6] "a" "b" "c" "d" ...
[08:08:31.943] value() for listenv ...
[08:08:31.943] | recursive: 0
[08:08:31.943] | reduce: FALSE
[08:08:31.944] | length: 6
[08:08:31.944] | elements: ‘a’, ‘b’, ‘c’, ‘d’, ‘’, ‘’
[08:08:31.944] | Number of remaining objects: 6
[08:08:31.944] | checking value #1:
[08:08:31.944] | 'obj' is atomic
[08:08:31.945] | signalConditionsASAP(numeric, pos=1) ...
[08:08:31.945] | : nx: 6
[08:08:31.945] | : relay: TRUE
[08:08:31.945] | : stdout: TRUE
[08:08:31.945] | : signal: TRUE
[08:08:31.945] | : resignal: FALSE
[08:08:31.945] | : force: TRUE
[08:08:31.945] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:31.945] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:31.945] | : until=2
[08:08:31.946] | : relaying element #2
[08:08:31.946] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:31.946] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:31.946] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:31.946] | length: 5 (resolved future 1)
[08:08:31.946] value() for listenv ... done
[08:08:31.946] checking value #2:
[08:08:31.946] 'obj' is MultisessionFuture
[08:08:31.947] MultisessionFuture #2
[08:08:31.947] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:31.947] | nx: 6
[08:08:31.947] | relay: TRUE
[08:08:31.947] | stdout: TRUE
[08:08:31.947] | signal: TRUE
[08:08:31.947] | resignal: FALSE
[08:08:31.947] | force: TRUE
[08:08:31.947] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:31.947] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:31.947] | until=2
[08:08:31.948] | relaying element #2
[08:08:31.948] | value() for MultisessionFuture (<unnamed-112>) ...
[08:08:31.948] | : result() for ClusterFuture ...
[08:08:31.948] | : . result already collected: FutureResult
[08:08:31.948] | : result() for ClusterFuture ... done
[08:08:31.948] | : result() for ClusterFuture ...
[08:08:31.948] | : . result already collected: FutureResult
[08:08:31.948] | : result() for ClusterFuture ... done
[08:08:31.948] | : signalConditions() ...
[08:08:31.948] | : . include = ‘immediateCondition’
[08:08:31.949] | : . exclude = 
[08:08:31.949] | : . resignal = FALSE
[08:08:31.949] | : . Number of conditions: 0
[08:08:31.949] | : .  int 0
[08:08:31.949] | : signalConditions() ... done
[08:08:31.949] | : relay stdout ...
[08:08:31.950] | : relay stdout ... done
[08:08:31.950] | : check for misuse ...
[08:08:31.950] | : check for misuse ... done
[08:08:31.950] | value() for MultisessionFuture (<unnamed-112>) ... done
[08:08:31.950] | result() for ClusterFuture ...
[08:08:31.950] | : result already collected: FutureResult
[08:08:31.950] | result() for ClusterFuture ... done
[08:08:31.950] | signalConditions() ...
[08:08:31.950] | : include = ‘immediateCondition’
[08:08:31.950] | : exclude = 
[08:08:31.951] | : resignal = FALSE
[08:08:31.951] | : Number of conditions: 0
[08:08:31.951] | :  int 0
[08:08:31.951] | signalConditions() ... done
[08:08:31.951] | result() for ClusterFuture ...
[08:08:31.951] | : result already collected: FutureResult
[08:08:31.951] | result() for ClusterFuture ... done
[08:08:31.952] | signalConditions() ...
[08:08:31.952] | : include = ‘condition’
[08:08:31.952] | : exclude = ‘error’, ‘immediateCondition’
[08:08:31.952] | : resignal = TRUE
[08:08:31.952] | : Number of conditions: 0
[08:08:31.952] | :  int 0
[08:08:31.952] | signalConditions() ... done
[08:08:31.953] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:31.953] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:31.953] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:31.953] value(<MultisessionFuture>, ...) ...
[08:08:31.953] value(<MultisessionFuture>, ...) ... done
[08:08:31.953] value() for MultisessionFuture (<unnamed-112>) ...
[08:08:31.953] | result() for ClusterFuture ...
[08:08:31.953] | : result already collected: FutureResult
[08:08:31.953] | result() for ClusterFuture ... done
[08:08:31.953] | result() for ClusterFuture ...
[08:08:31.954] | : result already collected: FutureResult
[08:08:31.954] | result() for ClusterFuture ... done
[08:08:31.954] | signalConditions() ...
[08:08:31.954] | : include = ‘immediateCondition’
[08:08:31.954] | : exclude = 
[08:08:31.954] | : resignal = FALSE
[08:08:31.954] | : Number of conditions: 0
[08:08:31.954] | :  int 0
[08:08:31.955] | signalConditions() ... done
[08:08:31.955] | check for misuse ...
[08:08:31.955] | check for misuse ... done
[08:08:31.955] value() for MultisessionFuture (<unnamed-112>) ... done
[08:08:31.955] value: <numeric>
[08:08:31.955] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:31.955] | nx: 6
[08:08:31.955] | relay: TRUE
[08:08:31.955] | stdout: TRUE
[08:08:31.956] | signal: TRUE
[08:08:31.956] | resignal: FALSE
[08:08:31.956] | force: TRUE
[08:08:31.956] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:31.956] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:31.956] | until=3
[08:08:31.956] | relaying element #3
[08:08:31.956] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:31.956] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:31.956] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:31.957] resolve() for MultisessionFuture ...
[08:08:31.957] resolve() for MultisessionFuture ... done
[08:08:31.957] length: 4 (resolved future 2)

[08:08:31.957] checking value #3:
[08:08:31.957] 'obj' is MultisessionFuture
[08:08:31.957] MultisessionFuture #3
[08:08:31.957] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:31.957] | nx: 6
[08:08:31.957] | relay: TRUE
[08:08:31.958] | stdout: TRUE
[08:08:31.958] | signal: TRUE
[08:08:31.958] | resignal: FALSE
[08:08:31.958] | force: TRUE
[08:08:31.958] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:31.958] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:31.958] | until=3
[08:08:31.958] | relaying element #3
[08:08:31.958] | value() for MultisessionFuture (<unnamed-113>) ...
[08:08:31.958] | : result() for ClusterFuture ...
[08:08:31.958] | : . result already collected: FutureResult
[08:08:31.959] | : result() for ClusterFuture ... done
[08:08:31.959] | : result() for ClusterFuture ...
[08:08:31.959] | : . result already collected: FutureResult
[08:08:31.959] | : result() for ClusterFuture ... done
[08:08:31.959] | : signalConditions() ...
[08:08:31.959] | : . include = ‘immediateCondition’
[08:08:31.959] | : . exclude = 
[08:08:31.959] | : . resignal = FALSE
[08:08:31.959] | : . Number of conditions: 0
[08:08:31.959] | : .  int 0
[08:08:31.960] | : signalConditions() ... done
[08:08:31.960] | : relay stdout ...
[08:08:31.960] | : relay stdout ... done
[08:08:31.960] | : check for misuse ...
[08:08:31.960] | : check for misuse ... done
[08:08:31.960] | value() for MultisessionFuture (<unnamed-113>) ... done
[08:08:31.961] | result() for ClusterFuture ...
[08:08:31.961] | : result already collected: FutureResult
[08:08:31.961] | result() for ClusterFuture ... done
[08:08:31.961] | signalConditions() ...
[08:08:31.961] | : include = ‘immediateCondition’
[08:08:31.961] | : exclude = 
[08:08:31.961] | : resignal = FALSE
[08:08:31.961] | : Number of conditions: 0
[08:08:31.961] | :  int 0
[08:08:31.962] | signalConditions() ... done
[08:08:31.962] | result() for ClusterFuture ...
[08:08:31.962] | : result already collected: FutureResult
[08:08:31.962] | result() for ClusterFuture ... done
[08:08:31.962] | signalConditions() ...
[08:08:31.962] | : include = ‘condition’
[08:08:31.962] | : exclude = ‘error’, ‘immediateCondition’
[08:08:31.962] | : resignal = TRUE
[08:08:31.962] | : Number of conditions: 0
[08:08:31.963] | :  int 0
[08:08:31.963] | signalConditions() ... done
[08:08:31.963] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:31.963] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:31.963] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:31.963] value(<MultisessionFuture>, ...) ...
[08:08:31.963] value(<MultisessionFuture>, ...) ... done
[08:08:31.964] value() for MultisessionFuture (<unnamed-113>) ...
[08:08:31.964] | result() for ClusterFuture ...
[08:08:31.964] | : result already collected: FutureResult
[08:08:31.964] | result() for ClusterFuture ... done
[08:08:31.964] | result() for ClusterFuture ...
[08:08:31.964] | : result already collected: FutureResult
[08:08:31.964] | result() for ClusterFuture ... done
[08:08:31.964] | signalConditions() ...
[08:08:31.964] | : include = ‘immediateCondition’
[08:08:31.964] | : exclude = 
[08:08:31.965] | : resignal = FALSE
[08:08:31.965] | : Number of conditions: 0
[08:08:31.965] | :  int 0
[08:08:31.965] | signalConditions() ... done
[08:08:31.965] | check for misuse ...
[08:08:31.965] | check for misuse ... done
[08:08:31.965] value() for MultisessionFuture (<unnamed-113>) ... done
[08:08:31.966] value: <NULL>
[08:08:31.966] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:31.966] | nx: 6
[08:08:31.966] | relay: TRUE
[08:08:31.966] | stdout: TRUE
[08:08:31.966] | signal: TRUE
[08:08:31.966] | resignal: FALSE
[08:08:31.966] | force: TRUE
[08:08:31.966] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:31.966] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:31.967] | until=4
[08:08:31.967] | relaying element #4
[08:08:31.967] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:31.967] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:31.967] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:31.967] resolve() for MultisessionFuture ...
[08:08:31.967] resolve() for MultisessionFuture ... done
[08:08:31.967] length: 3 (resolved future 3)

[08:08:31.967] checking value #4:
[08:08:31.968] 'obj' is MultisessionFuture
[08:08:31.968] resolved() for MultisessionFuture (<unnamed-114>) ...
[08:08:31.968] | Cluster node socket connection: index=4, id=1577
[08:08:31.968] | assertValidConnection() ...
[08:08:31.968] | : cluster node index: 1
[08:08:31.969] | assertValidConnection() ... done
[08:08:31.969] | receiveMessageFromWorker() for ClusterFuture ...
[08:08:31.969] | : cluster node index: 1
[08:08:31.969] | : [1] TRUE
[08:08:31.969] | : received data:
[08:08:31.969] | : List of 5
[08:08:31.969] | :  $ type   : chr "VALUE"
[08:08:31.969] | :  $ value  :List of 16
[08:08:31.969] | :   ..$ value              : num 4
[08:08:31.969] | :   ..$ visible            : logi TRUE
[08:08:31.969] | :   ..$ stdout             : chr ""
[08:08:31.969] | :   ..$ conditions         : list()
[08:08:31.969] | :   ..$ rng                : logi FALSE
[08:08:31.969] | :   ..$ seed               : NULL
[08:08:31.969] | :   ..$ misuseGlobalEnv    : NULL
[08:08:31.969] | :   ..$ misuseConnections  :List of 3
[08:08:31.969] | :   .. ..$ added   : NULL
[08:08:31.969] | :   .. ..$ removed : NULL
[08:08:31.969] | :   .. ..$ replaced: NULL
[08:08:31.969] | :   ..$ misuseDevices      : NULL
[08:08:31.969] | :   ..$ misuseDefaultDevice: list()
[08:08:31.969] | :   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:31"
[08:08:31.969] | :   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:31"
[08:08:31.969] | :   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "114"
[08:08:31.969] | :   ..$ session_uuid       : chr "dee2a208d5ef67f03fdb13c0c9ecc01f"
[08:08:31.969] | :   .. ..- attr(*, "source")=List of 5
[08:08:31.969] | :   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:31.969] | :   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:31.969] | :   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:31.969] | :   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:31.969] | :   .. .. ..$ pid   : int 69208
[08:08:31.969] | :   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:30"
[08:08:31.969] | :   .. .. ..$ random: int 2147483647
[08:08:31.969] | :   ..$ r_info             :List of 4
[08:08:31.969] | :   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:31.969] | :   .. .. ..$ : int [1:3] 4 5 0
[08:08:31.969] | :   .. ..$ os           : chr "unix"
[08:08:31.969] | :   .. ..$ os_name      : chr "Linux"
[08:08:31.969] | :   .. ..$ captures_utf8: logi TRUE
[08:08:31.969] | :   ..$ version            : chr "1.8"
[08:08:31.969] | :   ..- attr(*, "class")= chr "FutureResult"
[08:08:31.969] | :  $ success: logi TRUE
[08:08:31.969] | :  $ time   : 'proc_time' Named num [1:5] 0.004 0 0.003 0 0
[08:08:31.969] | :   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:31.969] | :  $ tag    : NULL
[08:08:31.980] | : Received FutureResult
[08:08:31.980] | : FutureResult:
[08:08:31.980] | : value: ‘numeric’
[08:08:31.980] | : visible: TRUE
[08:08:31.980] | : stdout: character
[08:08:31.980] | : conditions: [n = 0] 
[08:08:31.980] | : RNG used: FALSE
[08:08:31.980] | : duration: 0.002903461 secs (started 2025-06-17 08:08:31.947225)
[08:08:31.980] | : version: 1.8
[08:08:31.981] | : FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'remove', earlySignal = 0) ...
[08:08:31.981] | : . Removed future from position #1
[08:08:31.981] | : . Number of registered futures: 0
[08:08:31.981] | : FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'remove', earlySignal = 0) ... done
[08:08:31.981] | : Erased future from future backend
[08:08:31.981] | : result() for ClusterFuture ...
[08:08:31.981] | : . result already collected: FutureResult
[08:08:31.981] | : result() for ClusterFuture ... done
[08:08:31.982] | : signalConditions() ...
[08:08:31.982] | : . include = ‘immediateCondition’
[08:08:31.982] | : . exclude = 
[08:08:31.982] | : . resignal = FALSE
[08:08:31.982] | : . Number of conditions: 0
[08:08:31.982] | : .  int 0
[08:08:31.982] | : signalConditions() ... done
[08:08:31.983] | receiveMessageFromWorker() for ClusterFuture ... done
[08:08:31.983] | receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:31.983] resolved() for MultisessionFuture (<unnamed-114>) ... done
[08:08:31.983] assertFutureResult() ...
[08:08:31.983] | Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:31.983] | Future uuid: 114
[08:08:31.983] | identical; success
[08:08:31.983] assertFutureResult() ... done
[08:08:31.983] MultisessionFuture #4
[08:08:31.983] signalConditionsASAP(MultisessionFuture, pos=4) ...
[08:08:31.983] | nx: 6
[08:08:31.983] | relay: TRUE
[08:08:31.984] | stdout: TRUE
[08:08:31.984] | signal: TRUE
[08:08:31.984] | resignal: FALSE
[08:08:31.984] | force: TRUE
[08:08:31.984] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:31.984] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:31.984] | until=4
[08:08:31.984] | relaying element #4
[08:08:31.984] | value() for MultisessionFuture (<unnamed-114>) ...
[08:08:31.984] | : result() for ClusterFuture ...
[08:08:31.985] | : . result already collected: FutureResult
[08:08:31.985] | : result() for ClusterFuture ... done
[08:08:31.985] | : result() for ClusterFuture ...
[08:08:31.985] | : . result already collected: FutureResult
[08:08:31.985] | : result() for ClusterFuture ... done
[08:08:31.985] | : signalConditions() ...
[08:08:31.985] | : . include = ‘immediateCondition’
[08:08:31.985] | : . exclude = 
[08:08:31.985] | : . resignal = FALSE
[08:08:31.985] | : . Number of conditions: 0
[08:08:31.986] | : .  int 0
[08:08:31.986] | : signalConditions() ... done
[08:08:31.986] | : relay stdout ...
[08:08:31.986] | : relay stdout ... done
[08:08:31.986] | : check for misuse ...
[08:08:31.986] | : check for misuse ... done
[08:08:31.986] | value() for MultisessionFuture (<unnamed-114>) ... done
[08:08:31.987] | result() for ClusterFuture ...
[08:08:31.987] | : result already collected: FutureResult
[08:08:31.987] | result() for ClusterFuture ... done
[08:08:31.987] | signalConditions() ...
[08:08:31.987] | : include = ‘immediateCondition’
[08:08:31.987] | : exclude = 
[08:08:31.987] | : resignal = FALSE
[08:08:31.987] | : Number of conditions: 0
[08:08:31.987] | :  int 0
[08:08:31.988] | signalConditions() ... done
[08:08:31.988] | result() for ClusterFuture ...
[08:08:31.988] | : result already collected: FutureResult
[08:08:31.988] | result() for ClusterFuture ... done
[08:08:31.988] | signalConditions() ...
[08:08:31.988] | : include = ‘condition’
[08:08:31.988] | : exclude = ‘error’, ‘immediateCondition’
[08:08:31.988] | : resignal = TRUE
[08:08:31.989] | : Number of conditions: 0
[08:08:31.989] | :  int 0
[08:08:31.989] | signalConditions() ... done
[08:08:31.989] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.989] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.989] signalConditionsASAP(MultisessionFuture, pos=4) ... done
[08:08:31.989] value(<MultisessionFuture>, ...) ...
[08:08:31.990] value(<MultisessionFuture>, ...) ... done
[08:08:31.990] value() for MultisessionFuture (<unnamed-114>) ...
[08:08:31.990] | result() for ClusterFuture ...
[08:08:31.990] | : result already collected: FutureResult
[08:08:31.990] | result() for ClusterFuture ... done
[08:08:31.990] | result() for ClusterFuture ...
[08:08:31.990] | : result already collected: FutureResult
[08:08:31.990] | result() for ClusterFuture ... done
[08:08:31.990] | signalConditions() ...
[08:08:31.990] | : include = ‘immediateCondition’
[08:08:31.991] | : exclude = 
[08:08:31.991] | : resignal = FALSE
[08:08:31.991] | : Number of conditions: 0
[08:08:31.991] | :  int 0
[08:08:31.991] | signalConditions() ... done
[08:08:31.991] | check for misuse ...
[08:08:31.992] | check for misuse ... done
[08:08:31.992] value() for MultisessionFuture (<unnamed-114>) ... done
[08:08:31.992] value: <numeric>
[08:08:31.992] signalConditionsASAP(MultisessionFuture, pos=4) ...
[08:08:31.992] | nx: 6
[08:08:31.994] | relay: TRUE
[08:08:31.994] | stdout: TRUE
[08:08:31.994] | signal: TRUE
[08:08:31.995] | resignal: FALSE
[08:08:31.995] | force: TRUE
[08:08:31.995] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.995] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.995] | until=5
[08:08:31.995] | relaying element #5
[08:08:31.995] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.995] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.995] signalConditionsASAP(MultisessionFuture, pos=4) ... done
[08:08:31.995] resolve() for MultisessionFuture ...
[08:08:31.996] resolve() for MultisessionFuture ... done
[08:08:31.996] length: 2 (resolved future 4)

[08:08:31.996] checking value #5:
[08:08:31.996] 'obj' is NULL
[08:08:31.996] signalConditionsASAP(NULL, pos=5) ...
[08:08:31.996] | nx: 6
[08:08:31.996] | relay: TRUE
[08:08:31.996] | stdout: TRUE
[08:08:31.996] | signal: TRUE
[08:08:31.996] | resignal: FALSE
[08:08:31.997] | force: TRUE
[08:08:31.997] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.997] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.997] | until=6
[08:08:31.997] | relaying element #6
[08:08:31.997] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:31.997] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.997] signalConditionsASAP(NULL, pos=5) ... done
[08:08:31.997] signalConditionsASAP(NULL, pos=5) ...
[08:08:31.997] | nx: 6
[08:08:31.998] | relay: TRUE
[08:08:31.998] | stdout: TRUE
[08:08:31.998] | signal: TRUE
[08:08:31.998] | resignal: FALSE
[08:08:31.998] | force: TRUE
[08:08:31.998] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:31.998] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.998] | until=6
[08:08:31.998] | relaying element #6
[08:08:31.998] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:31.998] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:31.999] signalConditionsASAP(NULL, pos=5) ... done
[08:08:31.999] length: 1 (resolved future 5)

[08:08:31.999] checking value #6:
[08:08:31.999] 'obj' is atomic
[08:08:31.999] signalConditionsASAP(numeric, pos=6) ...
[08:08:31.999] | nx: 6
[08:08:31.999] | relay: TRUE
[08:08:31.999] | stdout: TRUE
[08:08:31.999] | signal: TRUE
[08:08:32.000] | resignal: FALSE
[08:08:32.000] | force: TRUE
[08:08:32.000] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:32.000] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:32.000] | until=6
[08:08:32.000] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:32.000] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:32.000] signalConditionsASAP(numeric, pos=6) ... done
[08:08:32.000] length: 0 (resolved future 6)

[08:08:32.001] Relaying remaining futures ...
[08:08:32.001] | signalConditionsASAP(NULL, pos=0) ...
[08:08:32.001] | : nx: 6
[08:08:32.001] | : relay: TRUE
[08:08:32.001] | : stdout: TRUE
[08:08:32.001] | : signal: TRUE
[08:08:32.001] | : resignal: FALSE
[08:08:32.001] | : force: TRUE
[08:08:32.001] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:32.001] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
 - flush all
[08:08:32.002] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:32.002] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:32.002] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:32.002] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:2] 2 3
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
Dimensions: c(2, 3, 1)
[08:08:32.005] future(..., label = NULL) ...
[08:08:32.005] | lazy: FALSE
[08:08:32.005] | stdout: TRUE
[08:08:32.006] | conditions: [n=1] ‘condition’
[08:08:32.006] | gc: FALSE
[08:08:32.006] | earlySignal: FALSE
[08:08:32.006] | getGlobalsAndPackages() ...
[08:08:32.006] | : Searching for globals ...
[08:08:32.007] | : . globals found: [0] 
[08:08:32.007] | : Searching for globals ... done
[08:08:32.007] | : globals: [0] <none>
[08:08:32.007] | : packages: [0] <none>
[08:08:32.008] | getGlobalsAndPackages() ... done
[08:08:32.008] | run() for ‘Future’ (<unnamed-115>) ...
[08:08:32.008] | : state: ‘created’
[08:08:32.008] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.008] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.008] | : Using MultisessionFutureBackend ...
[08:08:32.008] | : . Number of futures since start: 9 (9 created, 9 launched, 12 finished)
[08:08:32.008] | : . Launching futures ...
[08:08:32.009] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:32.009] | : . ' , Workers: [n=2]
[08:08:32.009] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:32.010] | : . ' , FutureRegistry: ‘workers-297aebe174e28ef42df314fbb4f321b2’
[08:08:32.010] | : . ' , requestWorker() ...
[08:08:32.011] | : . ' , ; requestNode() ...
[08:08:32.011] | : . ' , ; ` Number of workers: 2
[08:08:32.011] | : . ' , ; ` Polling for a free worker ...
[08:08:32.011] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:32.011] | : . ' , ; ` | : Listing all futures
[08:08:32.011] | : . ' , ; ` | : Number of registered futures: 0
[08:08:32.011] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:32.011] | : . ' , ; ` | Total time: 0
[08:08:32.011] | : . ' , ; ` Polling for a free worker ... done
[08:08:32.012] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:32.012] | : . ' , ; ` | Listing all futures
[08:08:32.012] | : . ' , ; ` | Number of registered futures: 0
[08:08:32.012] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:32.012] | : . ' , ; ` avail: [n=2] ‘1’, ‘2’
[08:08:32.012] | : . ' , ; ` Index of first available worker: 1
[08:08:32.012] | : . ' , ; ` Validate that the worker is functional ...
[08:08:32.110] | : . ' , ; ` | Worker is functional
[08:08:32.110] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:32.110] | : . ' , ; ` | : Listing all futures
[08:08:32.110] | : . ' , ; ` | : Number of registered futures: 0
[08:08:32.110] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:32.111] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:32.111] | : . ' , ; requestNode() ... done
[08:08:32.111] | : . ' , ; cluster node index: 1
[08:08:32.111] | : . ' , requestWorker() ... done
[08:08:32.111] | : . ' , eraseGlobalEnvironment() ...
[08:08:32.111] | : . ' , eraseGlobalEnvironment() ... done
[08:08:32.112] | : . ' , launchFuture() ...
[08:08:32.112] | : . ' , ; cluster node index: 1
[08:08:32.112] | : . ' , ; getFutureData() ...
[08:08:32.112] | : . ' , ; ` getFutureCore() ...
[08:08:32.112] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:32.112] | : . ' , ; ` getFutureCore() ... done
[08:08:32.112] | : . ' , ; ` getFutureCapture() ...
[08:08:32.112] | : . ' , ; ` getFutureCapture() ... done
[08:08:32.112] | : . ' , ; ` getFutureContext() ...
[08:08:32.113] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.113] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:32.113] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.113] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:32.113] | : . ' , ; ` getFutureContext() ... done
[08:08:32.113] | : . ' , ; getFutureData() ... done
[08:08:32.113] | : . ' , ; FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'add', earlySignal = 0) ...
[08:08:32.114] | : . ' , ; ` Appended future to position #1
[08:08:32.114] | : . ' , ; ` Number of registered futures: 1
[08:08:32.114] | : . ' , ; FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'add', earlySignal = 0) ... done
[08:08:32.114] | : . ' , launchFuture() ... done
[08:08:32.114] | : . ' , MultisessionFuture started
[08:08:32.114] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:32.114] | : . Launching futures ... done
[08:08:32.114] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:32.114] | : Using MultisessionFutureBackend ... done
[08:08:32.114] | run() for ‘Future’ (<unnamed-115>) ... done
[08:08:32.115] future(..., label = NULL) ... done
[08:08:32.115] future(..., label = NULL) ...
[08:08:32.115] | lazy: FALSE
[08:08:32.115] | stdout: TRUE
[08:08:32.115] | conditions: [n=1] ‘condition’
[08:08:32.115] | gc: FALSE
[08:08:32.115] | earlySignal: FALSE
[08:08:32.115] | getGlobalsAndPackages() ...
[08:08:32.115] | : Searching for globals ...
[08:08:32.117] | : . globals found: [0] 
[08:08:32.117] | : Searching for globals ... done
[08:08:32.117] | : globals: [0] <none>
[08:08:32.117] | : packages: [0] <none>
[08:08:32.117] | getGlobalsAndPackages() ... done
[08:08:32.117] | run() for ‘Future’ (<unnamed-116>) ...
[08:08:32.117] | : state: ‘created’
[08:08:32.118] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.118] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.118] | : Using MultisessionFutureBackend ...
[08:08:32.118] | : . Number of futures since start: 10 (10 created, 10 launched, 12 finished)
[08:08:32.118] | : . Launching futures ...
[08:08:32.118] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:32.118] | : . ' , Workers: [n=2]
[08:08:32.118] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:32.120] | : . ' , FutureRegistry: ‘workers-297aebe174e28ef42df314fbb4f321b2’
[08:08:32.120] | : . ' , requestWorker() ...
[08:08:32.120] | : . ' , ; requestNode() ...
[08:08:32.120] | : . ' , ; ` Number of workers: 2
[08:08:32.120] | : . ' , ; ` Polling for a free worker ...
[08:08:32.120] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:32.120] | : . ' , ; ` | : Listing all futures
[08:08:32.121] | : . ' , ; ` | : Number of registered futures: 1
[08:08:32.121] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:32.121] | : . ' , ; ` | Total time: 0
[08:08:32.121] | : . ' , ; ` Polling for a free worker ... done
[08:08:32.121] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:32.121] | : . ' , ; ` | Listing all futures
[08:08:32.121] | : . ' , ; ` | Number of registered futures: 1
[08:08:32.121] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:32.121] | : . ' , ; ` avail: [n=2] ‘2’
[08:08:32.122] | : . ' , ; ` Index of first available worker: 2
[08:08:32.122] | : . ' , ; ` Validate that the worker is functional ...
[08:08:32.215] | : . ' , ; ` | Worker is functional
[08:08:32.215] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:32.215] | : . ' , ; ` | : Listing all futures
[08:08:32.215] | : . ' , ; ` | : Number of registered futures: 1
[08:08:32.215] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:32.216] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:32.216] | : . ' , ; requestNode() ... done
[08:08:32.216] | : . ' , ; cluster node index: 2
[08:08:32.216] | : . ' , requestWorker() ... done
[08:08:32.216] | : . ' , eraseGlobalEnvironment() ...
[08:08:32.216] | : . ' , eraseGlobalEnvironment() ... done
[08:08:32.217] | : . ' , launchFuture() ...
[08:08:32.217] | : . ' , ; cluster node index: 2
[08:08:32.217] | : . ' , ; getFutureData() ...
[08:08:32.217] | : . ' , ; ` getFutureCore() ...
[08:08:32.217] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:32.217] | : . ' , ; ` getFutureCore() ... done
[08:08:32.217] | : . ' , ; ` getFutureCapture() ...
[08:08:32.217] | : . ' , ; ` getFutureCapture() ... done
[08:08:32.217] | : . ' , ; ` getFutureContext() ...
[08:08:32.217] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.218] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:32.218] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.218] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:32.218] | : . ' , ; ` getFutureContext() ... done
[08:08:32.218] | : . ' , ; getFutureData() ... done
[08:08:32.218] | : . ' , ; FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'add', earlySignal = 0) ...
[08:08:32.219] | : . ' , ; ` Appended future to position #2
[08:08:32.219] | : . ' , ; ` Number of registered futures: 2
[08:08:32.219] | : . ' , ; FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'add', earlySignal = 0) ... done
[08:08:32.219] | : . ' , launchFuture() ... done
[08:08:32.219] | : . ' , MultisessionFuture started
[08:08:32.219] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:32.219] | : . Launching futures ... done
[08:08:32.219] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:32.219] | : Using MultisessionFutureBackend ... done
[08:08:32.220] | run() for ‘Future’ (<unnamed-116>) ... done
[08:08:32.220] future(..., label = NULL) ... done
[08:08:32.220] future(..., label = NULL) ...
[08:08:32.220] | lazy: FALSE
[08:08:32.220] | stdout: TRUE
[08:08:32.220] | conditions: [n=1] ‘condition’
[08:08:32.220] | gc: FALSE
[08:08:32.221] | earlySignal: FALSE
[08:08:32.221] | getGlobalsAndPackages() ...
[08:08:32.221] | : Searching for globals ...
[08:08:32.224] | : . globals found: [1] ‘{’
[08:08:32.224] | : Searching for globals ... done
[08:08:32.224] | : Resolving globals: FALSE
[08:08:32.224] | : Search for packages associated with the globals ...
[08:08:32.224] | : . Packages associated with globals: [1] ‘base’
[08:08:32.225] | : . Packages: [1] ‘base’
[08:08:32.225] | : Search for packages associated with the globals ... done
[08:08:32.225] | : Packages after dropping 'base': [0] 
[08:08:32.225] | : globals: [0] 
[08:08:32.225] | : packages: [0] 
[08:08:32.225] | getGlobalsAndPackages() ... done
[08:08:32.225] | run() for ‘Future’ (<unnamed-117>) ...
[08:08:32.226] | : state: ‘created’
[08:08:32.226] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.226] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.226] | : Using MultisessionFutureBackend ...
[08:08:32.226] | : . Number of futures since start: 11 (11 created, 11 launched, 12 finished)
[08:08:32.226] | : . Launching futures ...
[08:08:32.226] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:32.226] | : . ' , Workers: [n=2]
[08:08:32.227] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:32.228] | : . ' , FutureRegistry: ‘workers-297aebe174e28ef42df314fbb4f321b2’
[08:08:32.228] | : . ' , requestWorker() ...
[08:08:32.228] | : . ' , ; requestNode() ...
[08:08:32.229] | : . ' , ; ` Number of workers: 2
[08:08:32.229] | : . ' , ; ` Polling for a free worker ...
[08:08:32.229] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:32.229] | : . ' , ; ` | : Listing all futures
[08:08:32.229] | : . ' , ; ` | : Number of registered futures: 2
[08:08:32.229] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:32.229] | : . ' , ; ` | Poll #1 (0): usedNodes() = 2, workers = 2
[08:08:32.239] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'collect-first', earlySignal = 1) ...
[08:08:32.240] | : . ' , ; ` | : collectValues('workers-297aebe174e28ef42df314fbb4f321b2', firstOnly = TRUE) ...
[08:08:32.240] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-115>) ...
[08:08:32.240] | : . ' , ; ` | : . ' Cluster node socket connection: index=4, id=1577
[08:08:32.240] | : . ' , ; ` | : . ' assertValidConnection() ...
[08:08:32.240] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:32.241] | : . ' , ; ` | : . ' assertValidConnection() ... done
[08:08:32.241] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ...
[08:08:32.241] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:32.241] | : . ' , ; ` | : . ' , [1] TRUE
[08:08:32.242] | : . ' , ; ` | : . ' , received data:
[08:08:32.242] | : . ' , ; ` | : . ' , List of 5
[08:08:32.242] | : . ' , ; ` | : . ' ,  $ type   : chr "VALUE"
[08:08:32.242] | : . ' , ; ` | : . ' ,  $ value  :List of 16
[08:08:32.242] | : . ' , ; ` | : . ' ,   ..$ value              : num 2
[08:08:32.242] | : . ' , ; ` | : . ' ,   ..$ visible            : logi TRUE
[08:08:32.242] | : . ' , ; ` | : . ' ,   ..$ stdout             : chr ""
[08:08:32.242] | : . ' , ; ` | : . ' ,   ..$ conditions         : list()
[08:08:32.242] | : . ' , ; ` | : . ' ,   ..$ rng                : logi FALSE
[08:08:32.242] | : . ' , ; ` | : . ' ,   ..$ seed               : NULL
[08:08:32.242] | : . ' , ; ` | : . ' ,   ..$ misuseGlobalEnv    : NULL
[08:08:32.242] | : . ' , ; ` | : . ' ,   ..$ misuseConnections  :List of 3
[08:08:32.242] | : . ' , ; ` | : . ' ,   .. ..$ added   : NULL
[08:08:32.242] | : . ' , ; ` | : . ' ,   .. ..$ removed : NULL
[08:08:32.242] | : . ' , ; ` | : . ' ,   .. ..$ replaced: NULL
[08:08:32.242] | : . ' , ; ` | : . ' ,   ..$ misuseDevices      : NULL
[08:08:32.242] | : . ' , ; ` | : . ' ,   ..$ misuseDefaultDevice: list()
[08:08:32.242] | : . ' , ; ` | : . ' ,   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:32"
[08:08:32.242] | : . ' , ; ` | : . ' ,   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:32"
[08:08:32.242] | : . ' , ; ` | : . ' ,   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "115"
[08:08:32.242] | : . ' , ; ` | : . ' ,   ..$ session_uuid       : chr "dee2a208d5ef67f03fdb13c0c9ecc01f"
[08:08:32.242] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "source")=List of 5
[08:08:32.242] | : . ' , ; ` | : . ' ,   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:32.242] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:32.242] | : . ' , ; ` | : . ' ,   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:32.242] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:32.242] | : . ' , ; ` | : . ' ,   .. .. ..$ pid   : int 69208
[08:08:32.242] | : . ' , ; ` | : . ' ,   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:30"
[08:08:32.242] | : . ' , ; ` | : . ' ,   .. .. ..$ random: int 2147483647
[08:08:32.242] | : . ' , ; ` | : . ' ,   ..$ r_info             :List of 4
[08:08:32.242] | : . ' , ; ` | : . ' ,   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:32.242] | : . ' , ; ` | : . ' ,   .. .. ..$ : int [1:3] 4 5 0
[08:08:32.242] | : . ' , ; ` | : . ' ,   .. ..$ os           : chr "unix"
[08:08:32.242] | : . ' , ; ` | : . ' ,   .. ..$ os_name      : chr "Linux"
[08:08:32.242] | : . ' , ; ` | : . ' ,   .. ..$ captures_utf8: logi TRUE
[08:08:32.242] | : . ' , ; ` | : . ' ,   ..$ version            : chr "1.8"
[08:08:32.242] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr "FutureResult"
[08:08:32.242] | : . ' , ; ` | : . ' ,  $ success: logi TRUE
[08:08:32.242] | : . ' , ; ` | : . ' ,  $ time   : 'proc_time' Named num [1:5] 0.006 0.001 0.006 0 0
[08:08:32.242] | : . ' , ; ` | : . ' ,   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:32.242] | : . ' , ; ` | : . ' ,  $ tag    : NULL
[08:08:32.255] | : . ' , ; ` | : . ' , Received FutureResult
[08:08:32.255] | : . ' , ; ` | : . ' , FutureResult:
[08:08:32.255] | : . ' , ; ` | : . ' , value: ‘numeric’
[08:08:32.255] | : . ' , ; ` | : . ' , visible: TRUE
[08:08:32.255] | : . ' , ; ` | : . ' , stdout: character
[08:08:32.255] | : . ' , ; ` | : . ' , conditions: [n = 0] 
[08:08:32.255] | : . ' , ; ` | : . ' , RNG used: FALSE
[08:08:32.255] | : . ' , ; ` | : . ' , duration: 0.005212307 secs (started 2025-06-17 08:08:32.15416)
[08:08:32.255] | : . ' , ; ` | : . ' , version: 1.8
[08:08:32.256] | : . ' , ; ` | : . ' , FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'remove', earlySignal = 0) ...
[08:08:32.256] | : . ' , ; ` | : . ' , ; Removed future from position #1
[08:08:32.256] | : . ' , ; ` | : . ' , ; Number of registered futures: 1
[08:08:32.256] | : . ' , ; ` | : . ' , FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'remove', earlySignal = 0) ... done
[08:08:32.256] | : . ' , ; ` | : . ' , Erased future from future backend
[08:08:32.257] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:32.257] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:32.257] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:32.257] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:32.257] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:32.257] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:32.257] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:32.257] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:32.257] | : . ' , ; ` | : . ' , ;  int 0
[08:08:32.258] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:32.258] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ... done
[08:08:32.258] | : . ' , ; ` | : . ' receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:32.258] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-115>) ... done
[08:08:32.258] | : . ' , ; ` | : . assertFutureResult() ...
[08:08:32.258] | : . ' , ; ` | : . ' Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:32.258] | : . ' , ; ` | : . ' Future uuid: 115
[08:08:32.258] | : . ' , ; ` | : . ' identical; success
[08:08:32.259] | : . ' , ; ` | : . assertFutureResult() ... done
[08:08:32.259] | : . ' , ; ` | : . Future at position #1 is resolved ...
[08:08:32.259] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-115>) ...
[08:08:32.259] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:32.259] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:32.259] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:32.259] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:32.259] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:32.259] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:32.260] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:32.260] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:32.260] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:32.260] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:32.260] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:32.260] | : . ' , ; ` | : . ' , ;  int 0
[08:08:32.260] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:32.261] | : . ' , ; ` | : . ' , check for misuse ...
[08:08:32.261] | : . ' , ; ` | : . ' , check for misuse ... done
[08:08:32.261] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-115>) ... done
[08:08:32.261] | : . ' , ; ` | : . Future at position #1 is resolved ... done
[08:08:32.261] | : . ' , ; ` | : collectValues('workers-297aebe174e28ef42df314fbb4f321b2', firstOnly = TRUE) ... done
[08:08:32.261] | : . ' , ; ` | : Remove collected futures ...
[08:08:32.261] | : . ' , ; ` | : . Indices of futures to drop: [n=1] ‘1’
[08:08:32.261] | : . ' , ; ` | : Remove collected futures ... done
[08:08:32.262] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'collect-first', earlySignal = 1) ... done
[08:08:32.262] | : . ' , ; ` | Early signaling of 2 future candidates ...
[08:08:32.262] | : . ' , ; ` | Number of futures with early signaling requested: 0
[08:08:32.262] | : . ' , ; ` | Early signaling of 2 future candidates ... done
[08:08:32.262] | : . ' , ; ` | Number of registered futures: 2
[08:08:32.262] | : . ' , ; ` Polling for a free worker ... done
[08:08:32.262] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:32.262] | : . ' , ; ` | Listing all futures
[08:08:32.262] | : . ' , ; ` | Number of registered futures: 1
[08:08:32.263] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:32.263] | : . ' , ; ` Total time: 0.033419132232666
[08:08:32.263] | : . ' , ; requestNode() ... done
[08:08:32.263] | : . ' , ; FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:32.263] | : . ' , ; ` Listing all futures
[08:08:32.263] | : . ' , ; ` Number of registered futures: 1
[08:08:32.263] | : . ' , ; FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:32.263] | : . ' , ; avail: [n=2] ‘1’
[08:08:32.263] | : . ' , ; Index of first available worker: 1
[08:08:32.263] | : . ' , ; Validate that the worker is functional ...
[08:08:32.359] | : . ' , ; ` Worker is functional
[08:08:32.359] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:32.359] | : . ' , ; ` | Listing all futures
[08:08:32.359] | : . ' , ; ` | Number of registered futures: 1
[08:08:32.360] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:32.360] | : . ' , ; Validate that the worker is functional ... done
[08:08:32.360] | : . ' , requestWorker() ... done
[08:08:32.360] | : . ' , cluster node index: 1
[08:08:32.360] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:32.360] | : . ' eraseGlobalEnvironment() ...
[08:08:32.361] | : . ' eraseGlobalEnvironment() ... done
[08:08:32.361] | : . ' launchFuture() ...
[08:08:32.361] | : . ' , cluster node index: 1
[08:08:32.361] | : . ' , getFutureData() ...
[08:08:32.361] | : . ' , ; getFutureCore() ...
[08:08:32.361] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:32.361] | : . ' , ; getFutureCore() ... done
[08:08:32.361] | : . ' , ; getFutureCapture() ...
[08:08:32.361] | : . ' , ; getFutureCapture() ... done
[08:08:32.362] | : . ' , ; getFutureContext() ...
[08:08:32.362] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.362] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:32.362] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.362] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:32.362] | : . ' , ; getFutureContext() ... done
[08:08:32.362] | : . ' , getFutureData() ... done
[08:08:32.363] | : . ' , FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'add', earlySignal = 0) ...
[08:08:32.363] | : . ' , ; Appended future to position #2
[08:08:32.363] | : . ' , ; Number of registered futures: 2
[08:08:32.363] | : . ' , FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'add', earlySignal = 0) ... done
[08:08:32.363] | : . ' launchFuture() ... done
[08:08:32.363] | : . ' MultisessionFuture started
[08:08:32.363] | : . Launching futures ... done
[08:08:32.363] | : Using MultisessionFutureBackend ... done
[08:08:32.363] | : Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:32.364] | run() for ‘Future’ (<unnamed-117>) ... done
[08:08:32.364] future(..., label = NULL) ... done

Classes 'listenv', 'environment' <environment: 0x5643025393a8> 
Classes 'listenv', 'environment' <environment: 0x564300777170> 
 - attr(*, "dim.")= int [1:3] 2 3 1
 - attr(*, "dimnames.")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
[08:08:32.367] resolved() for listenv ...
[08:08:32.368] | resolved() for array ...
[08:08:32.368] | : Number of elements: 6
[08:08:32.368] | : Number of futures: 6
[08:08:32.369] | : resolved() for MultisessionFuture (<unnamed-116>) ...
[08:08:32.369] | : . Cluster node socket connection: index=5, id=1578
[08:08:32.369] | : . assertValidConnection() ...
[08:08:32.369] | : . ' cluster node index: 2
[08:08:32.369] | : . assertValidConnection() ... done
[08:08:32.370] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:32.370] | : . ' cluster node index: 2
[08:08:32.370] | : . ' [1] TRUE
[08:08:32.370] | : . ' received data:
[08:08:32.370] | : . ' List of 5
[08:08:32.370] | : . '  $ type   : chr "VALUE"
[08:08:32.370] | : . '  $ value  :List of 16
[08:08:32.370] | : . '   ..$ value              : NULL
[08:08:32.370] | : . '   ..$ visible            : logi TRUE
[08:08:32.370] | : . '   ..$ stdout             : chr ""
[08:08:32.370] | : . '   ..$ conditions         : list()
[08:08:32.370] | : . '   ..$ rng                : logi FALSE
[08:08:32.370] | : . '   ..$ seed               : NULL
[08:08:32.370] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:32.370] | : . '   ..$ misuseConnections  :List of 3
[08:08:32.370] | : . '   .. ..$ added   : NULL
[08:08:32.370] | : . '   .. ..$ removed : NULL
[08:08:32.370] | : . '   .. ..$ replaced: NULL
[08:08:32.370] | : . '   ..$ misuseDevices      : NULL
[08:08:32.370] | : . '   ..$ misuseDefaultDevice: list()
[08:08:32.370] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:32"
[08:08:32.370] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:32"
[08:08:32.370] | : . '   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "116"
[08:08:32.370] | : . '   ..$ session_uuid       : chr "0b8fc0d1486ac64ba030ccf6b4936216"
[08:08:32.370] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:32.370] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:32.370] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:32.370] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:32.370] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:32.370] | : . '   .. .. ..$ pid   : int 69207
[08:08:32.370] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:30"
[08:08:32.370] | : . '   .. .. ..$ random: int 2147483647
[08:08:32.370] | : . '   ..$ r_info             :List of 4
[08:08:32.370] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:32.370] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:32.370] | : . '   .. ..$ os           : chr "unix"
[08:08:32.370] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:32.370] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:32.370] | : . '   ..$ version            : chr "1.8"
[08:08:32.370] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:32.370] | : . '  $ success: logi TRUE
[08:08:32.370] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:32.370] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:32.370] | : . '  $ tag    : NULL
[08:08:32.381] | : . ' Received FutureResult
[08:08:32.381] | : . ' FutureResult:
[08:08:32.381] | : . ' value: ‘NULL’
[08:08:32.381] | : . ' visible: TRUE
[08:08:32.381] | : . ' stdout: character
[08:08:32.381] | : . ' conditions: [n = 0] 
[08:08:32.381] | : . ' RNG used: FALSE
[08:08:32.381] | : . ' duration: 0.002608299 secs (started 2025-06-17 08:08:32.259232)
[08:08:32.381] | : . ' version: 1.8
[08:08:32.382] | : . ' FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'remove', earlySignal = 0) ...
[08:08:32.382] | : . ' , Removed future from position #1
[08:08:32.382] | : . ' , Number of registered futures: 1
[08:08:32.382] | : . ' FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'remove', earlySignal = 0) ... done
[08:08:32.382] | : . ' Erased future from future backend
[08:08:32.382] | : . ' result() for ClusterFuture ...
[08:08:32.382] | : . ' , result already collected: FutureResult
[08:08:32.383] | : . ' result() for ClusterFuture ... done
[08:08:32.383] | : . ' signalConditions() ...
[08:08:32.383] | : . ' , include = ‘immediateCondition’
[08:08:32.383] | : . ' , exclude = 
[08:08:32.383] | : . ' , resignal = FALSE
[08:08:32.383] | : . ' , Number of conditions: 0
[08:08:32.383] | : . ' ,  int 0
[08:08:32.384] | : . ' signalConditions() ... done
[08:08:32.384] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:32.384] | : . receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:32.384] | : resolved() for MultisessionFuture (<unnamed-116>) ... done
[08:08:32.384] | : assertFutureResult() ...
[08:08:32.384] | : . Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:32.384] | : . Future uuid: 116
[08:08:32.384] | : . identical; success
[08:08:32.384] | : assertFutureResult() ... done
[08:08:32.384] | : resolved() for MultisessionFuture (<unnamed-117>) ...
[08:08:32.385] | : . Cluster node socket connection: index=4, id=1577
[08:08:32.385] | : . assertValidConnection() ...
[08:08:32.385] | : . ' cluster node index: 1
[08:08:32.385] | : . assertValidConnection() ... done
[08:08:32.396] | : . socketSelect(list(<connection #4 (id=1577)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:32.396] | : resolved() for MultisessionFuture (<unnamed-117>) ... done
[08:08:32.396] | resolved() for array ... done
[08:08:32.396] resolved() for listenv ... done
 logi [1:2, 1:3, 1] TRUE TRUE TRUE FALSE TRUE TRUE
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
 - attr(*, "names")= chr [1:6] "a" "b" "c" "d" ...
[08:08:32.398] value() for listenv ...
[08:08:32.398] | recursive: 0
[08:08:32.398] | reduce: FALSE
[08:08:32.399] | length: 6
[08:08:32.399] | elements: ‘a’, ‘b’, ‘c’, ‘d’, ‘’, ‘’
[08:08:32.399] | Number of remaining objects: 6
[08:08:32.400] | checking value #1:
[08:08:32.400] | 'obj' is atomic
[08:08:32.400] | signalConditionsASAP(numeric, pos=1) ...
[08:08:32.400] | : nx: 6
[08:08:32.400] | : relay: TRUE
[08:08:32.400] | : stdout: TRUE
[08:08:32.400] | : signal: TRUE
[08:08:32.400] | : resignal: FALSE
[08:08:32.400] | : force: TRUE
[08:08:32.400] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:32.400] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:32.401] | : until=2
[08:08:32.401] | : relaying element #2
[08:08:32.401] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:32.401] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:32.401] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:32.401] | length: 5 (resolved future 1)
[08:08:32.401] value() for listenv ... done
[08:08:32.401] checking value #2:
[08:08:32.402] 'obj' is MultisessionFuture
[08:08:32.402] MultisessionFuture #2
[08:08:32.402] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:32.402] | nx: 6
[08:08:32.402] | relay: TRUE
[08:08:32.402] | stdout: TRUE
[08:08:32.402] | signal: TRUE
[08:08:32.402] | resignal: FALSE
[08:08:32.402] | force: TRUE
[08:08:32.402] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:32.402] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:32.403] | until=2
[08:08:32.403] | relaying element #2
[08:08:32.403] | value() for MultisessionFuture (<unnamed-115>) ...
[08:08:32.403] | : result() for ClusterFuture ...
[08:08:32.403] | : . result already collected: FutureResult
[08:08:32.403] | : result() for ClusterFuture ... done
[08:08:32.403] | : result() for ClusterFuture ...
[08:08:32.403] | : . result already collected: FutureResult
[08:08:32.403] | : result() for ClusterFuture ... done
[08:08:32.404] | : signalConditions() ...
[08:08:32.404] | : . include = ‘immediateCondition’
[08:08:32.404] | : . exclude = 
[08:08:32.404] | : . resignal = FALSE
[08:08:32.404] | : . Number of conditions: 0
[08:08:32.404] | : .  int 0
[08:08:32.405] | : signalConditions() ... done
[08:08:32.405] | : relay stdout ...
[08:08:32.405] | : relay stdout ... done
[08:08:32.405] | : check for misuse ...
[08:08:32.405] | : check for misuse ... done
[08:08:32.405] | value() for MultisessionFuture (<unnamed-115>) ... done
[08:08:32.405] | result() for ClusterFuture ...
[08:08:32.405] | : result already collected: FutureResult
[08:08:32.405] | result() for ClusterFuture ... done
[08:08:32.405] | signalConditions() ...
[08:08:32.406] | : include = ‘immediateCondition’
[08:08:32.406] | : exclude = 
[08:08:32.406] | : resignal = FALSE
[08:08:32.406] | : Number of conditions: 0
[08:08:32.406] | :  int 0
[08:08:32.406] | signalConditions() ... done
[08:08:32.406] | result() for ClusterFuture ...
[08:08:32.407] | : result already collected: FutureResult
[08:08:32.407] | result() for ClusterFuture ... done
[08:08:32.407] | signalConditions() ...
[08:08:32.407] | : include = ‘condition’
[08:08:32.407] | : exclude = ‘error’, ‘immediateCondition’
[08:08:32.407] | : resignal = TRUE
[08:08:32.407] | : Number of conditions: 0
[08:08:32.407] | :  int 0
[08:08:32.408] | signalConditions() ... done
[08:08:32.408] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:32.408] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:32.408] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:32.408] value(<MultisessionFuture>, ...) ...
[08:08:32.408] value(<MultisessionFuture>, ...) ... done
[08:08:32.408] value() for MultisessionFuture (<unnamed-115>) ...
[08:08:32.408] | result() for ClusterFuture ...
[08:08:32.408] | : result already collected: FutureResult
[08:08:32.409] | result() for ClusterFuture ... done
[08:08:32.409] | result() for ClusterFuture ...
[08:08:32.409] | : result already collected: FutureResult
[08:08:32.409] | result() for ClusterFuture ... done
[08:08:32.409] | signalConditions() ...
[08:08:32.409] | : include = ‘immediateCondition’
[08:08:32.409] | : exclude = 
[08:08:32.409] | : resignal = FALSE
[08:08:32.409] | : Number of conditions: 0
[08:08:32.409] | :  int 0
[08:08:32.410] | signalConditions() ... done
[08:08:32.410] | check for misuse ...
[08:08:32.410] | check for misuse ... done
[08:08:32.410] value() for MultisessionFuture (<unnamed-115>) ... done
[08:08:32.410] value: <numeric>
[08:08:32.410] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:32.411] | nx: 6
[08:08:32.411] | relay: TRUE
[08:08:32.411] | stdout: TRUE
[08:08:32.411] | signal: TRUE
[08:08:32.411] | resignal: FALSE
[08:08:32.411] | force: TRUE
[08:08:32.411] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:32.411] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:32.411] | until=3
[08:08:32.411] | relaying element #3
[08:08:32.412] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:32.412] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:32.412] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:32.412] resolve() for MultisessionFuture ...
[08:08:32.412] resolve() for MultisessionFuture ... done
[08:08:32.412] length: 4 (resolved future 2)

[08:08:32.412] checking value #3:
[08:08:32.412] 'obj' is MultisessionFuture
[08:08:32.412] MultisessionFuture #3
[08:08:32.413] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:32.413] | nx: 6
[08:08:32.413] | relay: TRUE
[08:08:32.413] | stdout: TRUE
[08:08:32.413] | signal: TRUE
[08:08:32.413] | resignal: FALSE
[08:08:32.413] | force: TRUE
[08:08:32.413] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:32.413] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:32.413] | until=3
[08:08:32.413] | relaying element #3
[08:08:32.414] | value() for MultisessionFuture (<unnamed-116>) ...
[08:08:32.414] | : result() for ClusterFuture ...
[08:08:32.414] | : . result already collected: FutureResult
[08:08:32.414] | : result() for ClusterFuture ... done
[08:08:32.414] | : result() for ClusterFuture ...
[08:08:32.414] | : . result already collected: FutureResult
[08:08:32.414] | : result() for ClusterFuture ... done
[08:08:32.414] | : signalConditions() ...
[08:08:32.414] | : . include = ‘immediateCondition’
[08:08:32.414] | : . exclude = 
[08:08:32.415] | : . resignal = FALSE
[08:08:32.415] | : . Number of conditions: 0
[08:08:32.415] | : .  int 0
[08:08:32.415] | : signalConditions() ... done
[08:08:32.415] | : relay stdout ...
[08:08:32.415] | : relay stdout ... done
[08:08:32.415] | : check for misuse ...
[08:08:32.416] | : check for misuse ... done
[08:08:32.416] | value() for MultisessionFuture (<unnamed-116>) ... done
[08:08:32.416] | result() for ClusterFuture ...
[08:08:32.416] | : result already collected: FutureResult
[08:08:32.416] | result() for ClusterFuture ... done
[08:08:32.416] | signalConditions() ...
[08:08:32.416] | : include = ‘immediateCondition’
[08:08:32.416] | : exclude = 
[08:08:32.416] | : resignal = FALSE
[08:08:32.417] | : Number of conditions: 0
[08:08:32.417] | :  int 0
[08:08:32.419] | signalConditions() ... done
[08:08:32.420] | result() for ClusterFuture ...
[08:08:32.420] | : result already collected: FutureResult
[08:08:32.420] | result() for ClusterFuture ... done
[08:08:32.420] | signalConditions() ...
[08:08:32.420] | : include = ‘condition’
[08:08:32.420] | : exclude = ‘error’, ‘immediateCondition’
[08:08:32.420] | : resignal = TRUE
[08:08:32.420] | : Number of conditions: 0
[08:08:32.420] | :  int 0
[08:08:32.421] | signalConditions() ... done
[08:08:32.421] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:32.421] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:32.421] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:32.421] value(<MultisessionFuture>, ...) ...
[08:08:32.421] value(<MultisessionFuture>, ...) ... done
[08:08:32.421] value() for MultisessionFuture (<unnamed-116>) ...
[08:08:32.421] | result() for ClusterFuture ...
[08:08:32.422] | : result already collected: FutureResult
[08:08:32.422] | result() for ClusterFuture ... done
[08:08:32.422] | result() for ClusterFuture ...
[08:08:32.422] | : result already collected: FutureResult
[08:08:32.422] | result() for ClusterFuture ... done
[08:08:32.422] | signalConditions() ...
[08:08:32.422] | : include = ‘immediateCondition’
[08:08:32.422] | : exclude = 
[08:08:32.422] | : resignal = FALSE
[08:08:32.422] | : Number of conditions: 0
[08:08:32.422] | :  int 0
[08:08:32.423] | signalConditions() ... done
[08:08:32.423] | check for misuse ...
[08:08:32.423] | check for misuse ... done
[08:08:32.423] value() for MultisessionFuture (<unnamed-116>) ... done
[08:08:32.423] value: <NULL>
[08:08:32.423] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:32.424] | nx: 6
[08:08:32.424] | relay: TRUE
[08:08:32.424] | stdout: TRUE
[08:08:32.424] | signal: TRUE
[08:08:32.424] | resignal: FALSE
[08:08:32.424] | force: TRUE
[08:08:32.424] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:32.424] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:32.424] | until=4
[08:08:32.424] | relaying element #4
[08:08:32.424] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:32.425] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:32.425] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:32.425] resolve() for MultisessionFuture ...
[08:08:32.425] resolve() for MultisessionFuture ... done
[08:08:32.425] length: 3 (resolved future 3)

[08:08:32.425] checking value #4:
[08:08:32.425] 'obj' is MultisessionFuture
[08:08:32.425] resolved() for MultisessionFuture (<unnamed-117>) ...
[08:08:32.426] | Cluster node socket connection: index=4, id=1577
[08:08:32.426] | assertValidConnection() ...
[08:08:32.426] | : cluster node index: 1
[08:08:32.426] | assertValidConnection() ... done
[08:08:32.426] | receiveMessageFromWorker() for ClusterFuture ...
[08:08:32.426] | : cluster node index: 1
[08:08:32.427] | : [1] TRUE
[08:08:32.427] | : received data:
[08:08:32.427] | : List of 5
[08:08:32.427] | :  $ type   : chr "VALUE"
[08:08:32.427] | :  $ value  :List of 16
[08:08:32.427] | :   ..$ value              : num 4
[08:08:32.427] | :   ..$ visible            : logi TRUE
[08:08:32.427] | :   ..$ stdout             : chr ""
[08:08:32.427] | :   ..$ conditions         : list()
[08:08:32.427] | :   ..$ rng                : logi FALSE
[08:08:32.427] | :   ..$ seed               : NULL
[08:08:32.427] | :   ..$ misuseGlobalEnv    : NULL
[08:08:32.427] | :   ..$ misuseConnections  :List of 3
[08:08:32.427] | :   .. ..$ added   : NULL
[08:08:32.427] | :   .. ..$ removed : NULL
[08:08:32.427] | :   .. ..$ replaced: NULL
[08:08:32.427] | :   ..$ misuseDevices      : NULL
[08:08:32.427] | :   ..$ misuseDefaultDevice: list()
[08:08:32.427] | :   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:32"
[08:08:32.427] | :   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:32"
[08:08:32.427] | :   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "117"
[08:08:32.427] | :   ..$ session_uuid       : chr "dee2a208d5ef67f03fdb13c0c9ecc01f"
[08:08:32.427] | :   .. ..- attr(*, "source")=List of 5
[08:08:32.427] | :   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:32.427] | :   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:32.427] | :   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:32.427] | :   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:32.427] | :   .. .. ..$ pid   : int 69208
[08:08:32.427] | :   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:30"
[08:08:32.427] | :   .. .. ..$ random: int 2147483647
[08:08:32.427] | :   ..$ r_info             :List of 4
[08:08:32.427] | :   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:32.427] | :   .. .. ..$ : int [1:3] 4 5 0
[08:08:32.427] | :   .. ..$ os           : chr "unix"
[08:08:32.427] | :   .. ..$ os_name      : chr "Linux"
[08:08:32.427] | :   .. ..$ captures_utf8: logi TRUE
[08:08:32.427] | :   ..$ version            : chr "1.8"
[08:08:32.427] | :   ..- attr(*, "class")= chr "FutureResult"
[08:08:32.427] | :  $ success: logi TRUE
[08:08:32.427] | :  $ time   : 'proc_time' Named num [1:5] 0.004 0 0.003 0 0
[08:08:32.427] | :   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:32.427] | :  $ tag    : NULL
[08:08:32.438] | : Received FutureResult
[08:08:32.438] | : FutureResult:
[08:08:32.438] | : value: ‘numeric’
[08:08:32.438] | : visible: TRUE
[08:08:32.438] | : stdout: character
[08:08:32.438] | : conditions: [n = 0] 
[08:08:32.438] | : RNG used: FALSE
[08:08:32.438] | : duration: 0.002845526 secs (started 2025-06-17 08:08:32.404267)
[08:08:32.438] | : version: 1.8
[08:08:32.438] | : FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'remove', earlySignal = 0) ...
[08:08:32.438] | : . Removed future from position #1
[08:08:32.438] | : . Number of registered futures: 0
[08:08:32.439] | : FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'remove', earlySignal = 0) ... done
[08:08:32.439] | : Erased future from future backend
[08:08:32.439] | : result() for ClusterFuture ...
[08:08:32.439] | : . result already collected: FutureResult
[08:08:32.439] | : result() for ClusterFuture ... done
[08:08:32.439] | : signalConditions() ...
[08:08:32.439] | : . include = ‘immediateCondition’
[08:08:32.439] | : . exclude = 
[08:08:32.439] | : . resignal = FALSE
[08:08:32.439] | : . Number of conditions: 0
[08:08:32.440] | : .  int 0
[08:08:32.440] | : signalConditions() ... done
[08:08:32.440] | receiveMessageFromWorker() for ClusterFuture ... done
[08:08:32.440] | receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:32.440] resolved() for MultisessionFuture (<unnamed-117>) ... done
[08:08:32.440] assertFutureResult() ...
[08:08:32.440] | Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:32.440] | Future uuid: 117
[08:08:32.441] | identical; success
[08:08:32.441] assertFutureResult() ... done
[08:08:32.441] MultisessionFuture #4
[08:08:32.441] signalConditionsASAP(MultisessionFuture, pos=4) ...
[08:08:32.441] | nx: 6
[08:08:32.441] | relay: TRUE
[08:08:32.441] | stdout: TRUE
[08:08:32.441] | signal: TRUE
[08:08:32.441] | resignal: FALSE
[08:08:32.441] | force: TRUE
[08:08:32.441] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:32.442] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:32.442] | until=4
[08:08:32.442] | relaying element #4
[08:08:32.442] | value() for MultisessionFuture (<unnamed-117>) ...
[08:08:32.442] | : result() for ClusterFuture ...
[08:08:32.442] | : . result already collected: FutureResult
[08:08:32.442] | : result() for ClusterFuture ... done
[08:08:32.442] | : result() for ClusterFuture ...
[08:08:32.442] | : . result already collected: FutureResult
[08:08:32.442] | : result() for ClusterFuture ... done
[08:08:32.443] | : signalConditions() ...
[08:08:32.443] | : . include = ‘immediateCondition’
[08:08:32.443] | : . exclude = 
[08:08:32.443] | : . resignal = FALSE
[08:08:32.443] | : . Number of conditions: 0
[08:08:32.443] | : .  int 0
[08:08:32.443] | : signalConditions() ... done
[08:08:32.444] | : relay stdout ...
[08:08:32.444] | : relay stdout ... done
[08:08:32.444] | : check for misuse ...
[08:08:32.444] | : check for misuse ... done
[08:08:32.444] | value() for MultisessionFuture (<unnamed-117>) ... done
[08:08:32.444] | result() for ClusterFuture ...
[08:08:32.444] | : result already collected: FutureResult
[08:08:32.444] | result() for ClusterFuture ... done
[08:08:32.444] | signalConditions() ...
[08:08:32.444] | : include = ‘immediateCondition’
[08:08:32.445] | : exclude = 
[08:08:32.445] | : resignal = FALSE
[08:08:32.445] | : Number of conditions: 0
[08:08:32.445] | :  int 0
[08:08:32.445] | signalConditions() ... done
[08:08:32.445] | result() for ClusterFuture ...
[08:08:32.445] | : result already collected: FutureResult
[08:08:32.446] | result() for ClusterFuture ... done
[08:08:32.446] | signalConditions() ...
[08:08:32.446] | : include = ‘condition’
[08:08:32.446] | : exclude = ‘error’, ‘immediateCondition’
[08:08:32.446] | : resignal = TRUE
[08:08:32.446] | : Number of conditions: 0
[08:08:32.446] | :  int 0
[08:08:32.447] | signalConditions() ... done
[08:08:32.447] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:32.447] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:32.447] signalConditionsASAP(MultisessionFuture, pos=4) ... done
[08:08:32.447] value(<MultisessionFuture>, ...) ...
[08:08:32.447] value(<MultisessionFuture>, ...) ... done
[08:08:32.447] value() for MultisessionFuture (<unnamed-117>) ...
[08:08:32.447] | result() for ClusterFuture ...
[08:08:32.447] | : result already collected: FutureResult
[08:08:32.447] | result() for ClusterFuture ... done
[08:08:32.448] | result() for ClusterFuture ...
[08:08:32.448] | : result already collected: FutureResult
[08:08:32.448] | result() for ClusterFuture ... done
[08:08:32.448] | signalConditions() ...
[08:08:32.448] | : include = ‘immediateCondition’
[08:08:32.448] | : exclude = 
[08:08:32.448] | : resignal = FALSE
[08:08:32.448] | : Number of conditions: 0
[08:08:32.448] | :  int 0
[08:08:32.449] | signalConditions() ... done
[08:08:32.449] | check for misuse ...
[08:08:32.449] | check for misuse ... done
[08:08:32.449] value() for MultisessionFuture (<unnamed-117>) ... done
[08:08:32.449] value: <numeric>
[08:08:32.449] signalConditionsASAP(MultisessionFuture, pos=4) ...
[08:08:32.449] | nx: 6
[08:08:32.450] | relay: TRUE
[08:08:32.450] | stdout: TRUE
[08:08:32.450] | signal: TRUE
[08:08:32.450] | resignal: FALSE
[08:08:32.450] | force: TRUE
[08:08:32.450] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:32.450] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:32.450] | until=5
[08:08:32.450] | relaying element #5
[08:08:32.450] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:32.450] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:32.451] signalConditionsASAP(MultisessionFuture, pos=4) ... done
[08:08:32.451] resolve() for MultisessionFuture ...
[08:08:32.451] resolve() for MultisessionFuture ... done
[08:08:32.451] length: 2 (resolved future 4)

[08:08:32.451] checking value #5:
[08:08:32.451] 'obj' is NULL
[08:08:32.451] signalConditionsASAP(NULL, pos=5) ...
[08:08:32.451] | nx: 6
[08:08:32.451] | relay: TRUE
[08:08:32.452] | stdout: TRUE
[08:08:32.452] | signal: TRUE
[08:08:32.452] | resignal: FALSE
[08:08:32.452] | force: TRUE
[08:08:32.452] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:32.452] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:32.452] | until=6
[08:08:32.452] | relaying element #6
[08:08:32.452] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:32.452] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:32.452] signalConditionsASAP(NULL, pos=5) ... done
[08:08:32.453] signalConditionsASAP(NULL, pos=5) ...
[08:08:32.453] | nx: 6
[08:08:32.453] | relay: TRUE
[08:08:32.453] | stdout: TRUE
[08:08:32.453] | signal: TRUE
[08:08:32.453] | resignal: FALSE
[08:08:32.453] | force: TRUE
[08:08:32.453] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:32.453] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:32.453] | until=6
[08:08:32.454] | relaying element #6
[08:08:32.454] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:32.454] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:32.454] signalConditionsASAP(NULL, pos=5) ... done
[08:08:32.454] length: 1 (resolved future 5)

[08:08:32.454] checking value #6:
[08:08:32.454] 'obj' is atomic
[08:08:32.454] signalConditionsASAP(numeric, pos=6) ...
[08:08:32.454] | nx: 6
[08:08:32.454] | relay: TRUE
[08:08:32.455] | stdout: TRUE
[08:08:32.455] | signal: TRUE
[08:08:32.455] | resignal: FALSE
[08:08:32.455] | force: TRUE
[08:08:32.455] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:32.455] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:32.455] | until=6
[08:08:32.455] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:32.455] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:32.455] signalConditionsASAP(numeric, pos=6) ... done
[08:08:32.456] length: 0 (resolved future 6)

[08:08:32.456] Relaying remaining futures ...
[08:08:32.456] | signalConditionsASAP(NULL, pos=0) ...
[08:08:32.456] | : nx: 6
[08:08:32.456] | : relay: TRUE
[08:08:32.456] | : stdout: TRUE
[08:08:32.456] | : signal: TRUE
[08:08:32.456] | : resignal: FALSE
[08:08:32.456] | : force: TRUE
[08:08:32.457] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:32.457] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
 - flush all
[08:08:32.457] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:32.457] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:32.457] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:32.457] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:3] 2 3 1
 - attr(*, "dimnames")=List of 3
  ..$ : chr [1:2] "a" "b"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
Dimensions: c(2, 1, 3, 1)
[08:08:32.461] future(..., label = NULL) ...
[08:08:32.461] | lazy: FALSE
[08:08:32.461] | stdout: TRUE
[08:08:32.461] | conditions: [n=1] ‘condition’
[08:08:32.461] | gc: FALSE
[08:08:32.462] | earlySignal: FALSE
[08:08:32.462] | getGlobalsAndPackages() ...
[08:08:32.462] | : Searching for globals ...
[08:08:32.463] | : . globals found: [0] 
[08:08:32.463] | : Searching for globals ... done
[08:08:32.463] | : globals: [0] <none>
[08:08:32.463] | : packages: [0] <none>
[08:08:32.463] | getGlobalsAndPackages() ... done
[08:08:32.464] | run() for ‘Future’ (<unnamed-118>) ...
[08:08:32.464] | : state: ‘created’
[08:08:32.464] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.464] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.464] | : Using MultisessionFutureBackend ...
[08:08:32.464] | : . Number of futures since start: 12 (12 created, 12 launched, 16 finished)
[08:08:32.464] | : . Launching futures ...
[08:08:32.464] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:32.465] | : . ' , Workers: [n=2]
[08:08:32.465] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:32.466] | : . ' , FutureRegistry: ‘workers-297aebe174e28ef42df314fbb4f321b2’
[08:08:32.466] | : . ' , requestWorker() ...
[08:08:32.466] | : . ' , ; requestNode() ...
[08:08:32.467] | : . ' , ; ` Number of workers: 2
[08:08:32.467] | : . ' , ; ` Polling for a free worker ...
[08:08:32.467] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:32.467] | : . ' , ; ` | : Listing all futures
[08:08:32.467] | : . ' , ; ` | : Number of registered futures: 0
[08:08:32.467] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:32.467] | : . ' , ; ` | Total time: 0
[08:08:32.467] | : . ' , ; ` Polling for a free worker ... done
[08:08:32.467] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:32.468] | : . ' , ; ` | Listing all futures
[08:08:32.468] | : . ' , ; ` | Number of registered futures: 0
[08:08:32.468] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:32.468] | : . ' , ; ` avail: [n=2] ‘1’, ‘2’
[08:08:32.468] | : . ' , ; ` Index of first available worker: 1
[08:08:32.468] | : . ' , ; ` Validate that the worker is functional ...
[08:08:32.561] | : . ' , ; ` | Worker is functional
[08:08:32.561] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:32.561] | : . ' , ; ` | : Listing all futures
[08:08:32.561] | : . ' , ; ` | : Number of registered futures: 0
[08:08:32.561] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:32.561] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:32.562] | : . ' , ; requestNode() ... done
[08:08:32.562] | : . ' , ; cluster node index: 1
[08:08:32.562] | : . ' , requestWorker() ... done
[08:08:32.562] | : . ' , eraseGlobalEnvironment() ...
[08:08:32.562] | : . ' , eraseGlobalEnvironment() ... done
[08:08:32.562] | : . ' , launchFuture() ...
[08:08:32.563] | : . ' , ; cluster node index: 1
[08:08:32.563] | : . ' , ; getFutureData() ...
[08:08:32.563] | : . ' , ; ` getFutureCore() ...
[08:08:32.563] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:32.563] | : . ' , ; ` getFutureCore() ... done
[08:08:32.563] | : . ' , ; ` getFutureCapture() ...
[08:08:32.563] | : . ' , ; ` getFutureCapture() ... done
[08:08:32.563] | : . ' , ; ` getFutureContext() ...
[08:08:32.563] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.564] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:32.564] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.564] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:32.564] | : . ' , ; ` getFutureContext() ... done
[08:08:32.564] | : . ' , ; getFutureData() ... done
[08:08:32.564] | : . ' , ; FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'add', earlySignal = 0) ...
[08:08:32.564] | : . ' , ; ` Appended future to position #1
[08:08:32.565] | : . ' , ; ` Number of registered futures: 1
[08:08:32.565] | : . ' , ; FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'add', earlySignal = 0) ... done
[08:08:32.565] | : . ' , launchFuture() ... done
[08:08:32.565] | : . ' , MultisessionFuture started
[08:08:32.565] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:32.565] | : . Launching futures ... done
[08:08:32.565] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:32.565] | : Using MultisessionFutureBackend ... done
[08:08:32.565] | run() for ‘Future’ (<unnamed-118>) ... done
[08:08:32.566] future(..., label = NULL) ... done
[08:08:32.566] future(..., label = NULL) ...
[08:08:32.566] | lazy: FALSE
[08:08:32.566] | stdout: TRUE
[08:08:32.566] | conditions: [n=1] ‘condition’
[08:08:32.566] | gc: FALSE
[08:08:32.566] | earlySignal: FALSE
[08:08:32.566] | getGlobalsAndPackages() ...
[08:08:32.566] | : Searching for globals ...
[08:08:32.568] | : . globals found: [0] 
[08:08:32.568] | : Searching for globals ... done
[08:08:32.568] | : globals: [0] <none>
[08:08:32.568] | : packages: [0] <none>
[08:08:32.568] | getGlobalsAndPackages() ... done
[08:08:32.568] | run() for ‘Future’ (<unnamed-119>) ...
[08:08:32.568] | : state: ‘created’
[08:08:32.568] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.569] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.569] | : Using MultisessionFutureBackend ...
[08:08:32.569] | : . Number of futures since start: 13 (13 created, 13 launched, 16 finished)
[08:08:32.569] | : . Launching futures ...
[08:08:32.569] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:32.569] | : . ' , Workers: [n=2]
[08:08:32.569] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:32.573] | : . ' , FutureRegistry: ‘workers-297aebe174e28ef42df314fbb4f321b2’
[08:08:32.573] | : . ' , requestWorker() ...
[08:08:32.573] | : . ' , ; requestNode() ...
[08:08:32.574] | : . ' , ; ` Number of workers: 2
[08:08:32.574] | : . ' , ; ` Polling for a free worker ...
[08:08:32.574] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:32.574] | : . ' , ; ` | : Listing all futures
[08:08:32.574] | : . ' , ; ` | : Number of registered futures: 1
[08:08:32.574] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:32.574] | : . ' , ; ` | Total time: 0
[08:08:32.574] | : . ' , ; ` Polling for a free worker ... done
[08:08:32.574] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:32.574] | : . ' , ; ` | Listing all futures
[08:08:32.575] | : . ' , ; ` | Number of registered futures: 1
[08:08:32.575] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:32.575] | : . ' , ; ` avail: [n=2] ‘2’
[08:08:32.575] | : . ' , ; ` Index of first available worker: 2
[08:08:32.575] | : . ' , ; ` Validate that the worker is functional ...
[08:08:32.640] | : . ' , ; ` | Worker is functional
[08:08:32.641] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:32.641] | : . ' , ; ` | : Listing all futures
[08:08:32.641] | : . ' , ; ` | : Number of registered futures: 1
[08:08:32.641] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:32.641] | : . ' , ; ` Validate that the worker is functional ... done
[08:08:32.641] | : . ' , ; requestNode() ... done
[08:08:32.642] | : . ' , ; cluster node index: 2
[08:08:32.642] | : . ' , requestWorker() ... done
[08:08:32.642] | : . ' , eraseGlobalEnvironment() ...
[08:08:32.642] | : . ' , eraseGlobalEnvironment() ... done
[08:08:32.642] | : . ' , launchFuture() ...
[08:08:32.642] | : . ' , ; cluster node index: 2
[08:08:32.643] | : . ' , ; getFutureData() ...
[08:08:32.643] | : . ' , ; ` getFutureCore() ...
[08:08:32.643] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:32.643] | : . ' , ; ` getFutureCore() ... done
[08:08:32.643] | : . ' , ; ` getFutureCapture() ...
[08:08:32.643] | : . ' , ; ` getFutureCapture() ... done
[08:08:32.643] | : . ' , ; ` getFutureContext() ...
[08:08:32.643] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.643] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:32.644] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.644] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:32.644] | : . ' , ; ` getFutureContext() ... done
[08:08:32.644] | : . ' , ; getFutureData() ... done
[08:08:32.644] | : . ' , ; FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'add', earlySignal = 0) ...
[08:08:32.644] | : . ' , ; ` Appended future to position #2
[08:08:32.645] | : . ' , ; ` Number of registered futures: 2
[08:08:32.645] | : . ' , ; FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'add', earlySignal = 0) ... done
[08:08:32.645] | : . ' , launchFuture() ... done
[08:08:32.645] | : . ' , MultisessionFuture started
[08:08:32.645] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:32.645] | : . Launching futures ... done
[08:08:32.645] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:32.645] | : Using MultisessionFutureBackend ... done
[08:08:32.645] | run() for ‘Future’ (<unnamed-119>) ... done
[08:08:32.646] future(..., label = NULL) ... done
[08:08:32.646] future(..., label = NULL) ...
[08:08:32.646] | lazy: FALSE
[08:08:32.646] | stdout: TRUE
[08:08:32.646] | conditions: [n=1] ‘condition’
[08:08:32.646] | gc: FALSE
[08:08:32.646] | earlySignal: FALSE
[08:08:32.647] | getGlobalsAndPackages() ...
[08:08:32.647] | : Searching for globals ...
[08:08:32.650] | : . globals found: [1] ‘{’
[08:08:32.650] | : Searching for globals ... done
[08:08:32.650] | : Resolving globals: FALSE
[08:08:32.650] | : Search for packages associated with the globals ...
[08:08:32.650] | : . Packages associated with globals: [1] ‘base’
[08:08:32.651] | : . Packages: [1] ‘base’
[08:08:32.651] | : Search for packages associated with the globals ... done
[08:08:32.651] | : Packages after dropping 'base': [0] 
[08:08:32.651] | : globals: [0] 
[08:08:32.651] | : packages: [0] 
[08:08:32.651] | getGlobalsAndPackages() ... done
[08:08:32.651] | run() for ‘Future’ (<unnamed-120>) ...
[08:08:32.652] | : state: ‘created’
[08:08:32.652] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.652] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.652] | : Using MultisessionFutureBackend ...
[08:08:32.652] | : . Number of futures since start: 14 (14 created, 14 launched, 16 finished)
[08:08:32.652] | : . Launching futures ...
[08:08:32.652] | : . ' launchFuture() for ClusterFutureBackend ...
[08:08:32.652] | : . ' , Workers: [n=2]
[08:08:32.652] | : . ' , Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:32.654] | : . ' , FutureRegistry: ‘workers-297aebe174e28ef42df314fbb4f321b2’
[08:08:32.654] | : . ' , requestWorker() ...
[08:08:32.654] | : . ' , ; requestNode() ...
[08:08:32.654] | : . ' , ; ` Number of workers: 2
[08:08:32.655] | : . ' , ; ` Polling for a free worker ...
[08:08:32.655] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:32.655] | : . ' , ; ` | : Listing all futures
[08:08:32.655] | : . ' , ; ` | : Number of registered futures: 2
[08:08:32.655] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:32.655] | : . ' , ; ` | Poll #1 (0): usedNodes() = 2, workers = 2
[08:08:32.665] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'collect-first', earlySignal = 1) ...
[08:08:32.665] | : . ' , ; ` | : collectValues('workers-297aebe174e28ef42df314fbb4f321b2', firstOnly = TRUE) ...
[08:08:32.666] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-118>) ...
[08:08:32.666] | : . ' , ; ` | : . ' Cluster node socket connection: index=4, id=1577
[08:08:32.666] | : . ' , ; ` | : . ' assertValidConnection() ...
[08:08:32.666] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:32.667] | : . ' , ; ` | : . ' assertValidConnection() ... done
[08:08:32.667] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ...
[08:08:32.667] | : . ' , ; ` | : . ' , cluster node index: 1
[08:08:32.667] | : . ' , ; ` | : . ' , [1] TRUE
[08:08:32.668] | : . ' , ; ` | : . ' , received data:
[08:08:32.668] | : . ' , ; ` | : . ' , List of 5
[08:08:32.668] | : . ' , ; ` | : . ' ,  $ type   : chr "VALUE"
[08:08:32.668] | : . ' , ; ` | : . ' ,  $ value  :List of 16
[08:08:32.668] | : . ' , ; ` | : . ' ,   ..$ value              : num 2
[08:08:32.668] | : . ' , ; ` | : . ' ,   ..$ visible            : logi TRUE
[08:08:32.668] | : . ' , ; ` | : . ' ,   ..$ stdout             : chr ""
[08:08:32.668] | : . ' , ; ` | : . ' ,   ..$ conditions         : list()
[08:08:32.668] | : . ' , ; ` | : . ' ,   ..$ rng                : logi FALSE
[08:08:32.668] | : . ' , ; ` | : . ' ,   ..$ seed               : NULL
[08:08:32.668] | : . ' , ; ` | : . ' ,   ..$ misuseGlobalEnv    : NULL
[08:08:32.668] | : . ' , ; ` | : . ' ,   ..$ misuseConnections  :List of 3
[08:08:32.668] | : . ' , ; ` | : . ' ,   .. ..$ added   : NULL
[08:08:32.668] | : . ' , ; ` | : . ' ,   .. ..$ removed : NULL
[08:08:32.668] | : . ' , ; ` | : . ' ,   .. ..$ replaced: NULL
[08:08:32.668] | : . ' , ; ` | : . ' ,   ..$ misuseDevices      : NULL
[08:08:32.668] | : . ' , ; ` | : . ' ,   ..$ misuseDefaultDevice: list()
[08:08:32.668] | : . ' , ; ` | : . ' ,   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:32"
[08:08:32.668] | : . ' , ; ` | : . ' ,   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:32"
[08:08:32.668] | : . ' , ; ` | : . ' ,   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "118"
[08:08:32.668] | : . ' , ; ` | : . ' ,   ..$ session_uuid       : chr "dee2a208d5ef67f03fdb13c0c9ecc01f"
[08:08:32.668] | : . ' , ; ` | : . ' ,   .. ..- attr(*, "source")=List of 5
[08:08:32.668] | : . ' , ; ` | : . ' ,   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:32.668] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:32.668] | : . ' , ; ` | : . ' ,   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:32.668] | : . ' , ; ` | : . ' ,   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:32.668] | : . ' , ; ` | : . ' ,   .. .. ..$ pid   : int 69208
[08:08:32.668] | : . ' , ; ` | : . ' ,   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:30"
[08:08:32.668] | : . ' , ; ` | : . ' ,   .. .. ..$ random: int 2147483647
[08:08:32.668] | : . ' , ; ` | : . ' ,   ..$ r_info             :List of 4
[08:08:32.668] | : . ' , ; ` | : . ' ,   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:32.668] | : . ' , ; ` | : . ' ,   .. .. ..$ : int [1:3] 4 5 0
[08:08:32.668] | : . ' , ; ` | : . ' ,   .. ..$ os           : chr "unix"
[08:08:32.668] | : . ' , ; ` | : . ' ,   .. ..$ os_name      : chr "Linux"
[08:08:32.668] | : . ' , ; ` | : . ' ,   .. ..$ captures_utf8: logi TRUE
[08:08:32.668] | : . ' , ; ` | : . ' ,   ..$ version            : chr "1.8"
[08:08:32.668] | : . ' , ; ` | : . ' ,   ..- attr(*, "class")= chr "FutureResult"
[08:08:32.668] | : . ' , ; ` | : . ' ,  $ success: logi TRUE
[08:08:32.668] | : . ' , ; ` | : . ' ,  $ time   : 'proc_time' Named num [1:5] 0.006 0 0.007 0 0
[08:08:32.668] | : . ' , ; ` | : . ' ,   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:32.668] | : . ' , ; ` | : . ' ,  $ tag    : NULL
[08:08:32.679] | : . ' , ; ` | : . ' , Received FutureResult
[08:08:32.679] | : . ' , ; ` | : . ' , FutureResult:
[08:08:32.679] | : . ' , ; ` | : . ' , value: ‘numeric’
[08:08:32.679] | : . ' , ; ` | : . ' , visible: TRUE
[08:08:32.679] | : . ' , ; ` | : . ' , stdout: character
[08:08:32.679] | : . ' , ; ` | : . ' , conditions: [n = 0] 
[08:08:32.679] | : . ' , ; ` | : . ' , RNG used: FALSE
[08:08:32.679] | : . ' , ; ` | : . ' , duration: 0.003579617 secs (started 2025-06-17 08:08:32.605139)
[08:08:32.679] | : . ' , ; ` | : . ' , version: 1.8
[08:08:32.680] | : . ' , ; ` | : . ' , FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'remove', earlySignal = 0) ...
[08:08:32.680] | : . ' , ; ` | : . ' , ; Removed future from position #1
[08:08:32.680] | : . ' , ; ` | : . ' , ; Number of registered futures: 1
[08:08:32.680] | : . ' , ; ` | : . ' , FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'remove', earlySignal = 0) ... done
[08:08:32.680] | : . ' , ; ` | : . ' , Erased future from future backend
[08:08:32.680] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:32.680] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:32.681] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:32.681] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:32.681] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:32.681] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:32.681] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:32.681] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:32.681] | : . ' , ; ` | : . ' , ;  int 0
[08:08:32.682] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:32.682] | : . ' , ; ` | : . ' receiveMessageFromWorker() for ClusterFuture ... done
[08:08:32.682] | : . ' , ; ` | : . ' receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:32.682] | : . ' , ; ` | : . resolved() for MultisessionFuture (<unnamed-118>) ... done
[08:08:32.682] | : . ' , ; ` | : . assertFutureResult() ...
[08:08:32.682] | : . ' , ; ` | : . ' Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:32.682] | : . ' , ; ` | : . ' Future uuid: 118
[08:08:32.682] | : . ' , ; ` | : . ' identical; success
[08:08:32.682] | : . ' , ; ` | : . assertFutureResult() ... done
[08:08:32.682] | : . ' , ; ` | : . Future at position #1 is resolved ...
[08:08:32.683] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-118>) ...
[08:08:32.683] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:32.683] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:32.683] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:32.683] | : . ' , ; ` | : . ' , result() for ClusterFuture ...
[08:08:32.683] | : . ' , ; ` | : . ' , ; result already collected: FutureResult
[08:08:32.683] | : . ' , ; ` | : . ' , result() for ClusterFuture ... done
[08:08:32.683] | : . ' , ; ` | : . ' , signalConditions() ...
[08:08:32.684] | : . ' , ; ` | : . ' , ; include = ‘immediateCondition’
[08:08:32.684] | : . ' , ; ` | : . ' , ; exclude = 
[08:08:32.684] | : . ' , ; ` | : . ' , ; resignal = FALSE
[08:08:32.684] | : . ' , ; ` | : . ' , ; Number of conditions: 0
[08:08:32.684] | : . ' , ; ` | : . ' , ;  int 0
[08:08:32.684] | : . ' , ; ` | : . ' , signalConditions() ... done
[08:08:32.684] | : . ' , ; ` | : . ' , check for misuse ...
[08:08:32.685] | : . ' , ; ` | : . ' , check for misuse ... done
[08:08:32.685] | : . ' , ; ` | : . ' value() for MultisessionFuture (<unnamed-118>) ... done
[08:08:32.685] | : . ' , ; ` | : . Future at position #1 is resolved ... done
[08:08:32.685] | : . ' , ; ` | : collectValues('workers-297aebe174e28ef42df314fbb4f321b2', firstOnly = TRUE) ... done
[08:08:32.685] | : . ' , ; ` | : Remove collected futures ...
[08:08:32.685] | : . ' , ; ` | : . Indices of futures to drop: [n=1] ‘1’
[08:08:32.685] | : . ' , ; ` | : Remove collected futures ... done
[08:08:32.686] | : . ' , ; ` | FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'collect-first', earlySignal = 1) ... done
[08:08:32.686] | : . ' , ; ` | Early signaling of 2 future candidates ...
[08:08:32.686] | : . ' , ; ` | Number of futures with early signaling requested: 0
[08:08:32.686] | : . ' , ; ` | Early signaling of 2 future candidates ... done
[08:08:32.686] | : . ' , ; ` | Number of registered futures: 2
[08:08:32.686] | : . ' , ; ` Polling for a free worker ... done
[08:08:32.686] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:32.686] | : . ' , ; ` | Listing all futures
[08:08:32.686] | : . ' , ; ` | Number of registered futures: 1
[08:08:32.687] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:32.687] | : . ' , ; ` Total time: 0.0314373970031738
[08:08:32.687] | : . ' , ; requestNode() ... done
[08:08:32.687] | : . ' , ; FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:32.687] | : . ' , ; ` Listing all futures
[08:08:32.687] | : . ' , ; ` Number of registered futures: 1
[08:08:32.687] | : . ' , ; FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:32.687] | : . ' , ; avail: [n=2] ‘1’
[08:08:32.687] | : . ' , ; Index of first available worker: 1
[08:08:32.687] | : . ' , ; Validate that the worker is functional ...
[08:08:32.781] | : . ' , ; ` Worker is functional
[08:08:32.781] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ...
[08:08:32.781] | : . ' , ; ` | Listing all futures
[08:08:32.781] | : . ' , ; ` | Number of registered futures: 1
[08:08:32.782] | : . ' , ; ` FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'list', earlySignal = 0) ... done
[08:08:32.782] | : . ' , ; Validate that the worker is functional ... done
[08:08:32.782] | : . ' , requestWorker() ... done
[08:08:32.782] | : . ' , cluster node index: 1
[08:08:32.782] | : . ' launchFuture() for ClusterFutureBackend ... done
[08:08:32.782] | : . ' eraseGlobalEnvironment() ...
[08:08:32.783] | : . ' eraseGlobalEnvironment() ... done
[08:08:32.783] | : . ' launchFuture() ...
[08:08:32.783] | : . ' , cluster node index: 1
[08:08:32.783] | : . ' , getFutureData() ...
[08:08:32.783] | : . ' , ; getFutureCore() ...
[08:08:32.783] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:32.783] | : . ' , ; getFutureCore() ... done
[08:08:32.783] | : . ' , ; getFutureCapture() ...
[08:08:32.783] | : . ' , ; getFutureCapture() ... done
[08:08:32.784] | : . ' , ; getFutureContext() ...
[08:08:32.784] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:32.784] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:32.784] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:32.784] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:32.784] | : . ' , ; getFutureContext() ... done
[08:08:32.784] | : . ' , getFutureData() ... done
[08:08:32.785] | : . ' , FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'add', earlySignal = 0) ...
[08:08:32.785] | : . ' , ; Appended future to position #2
[08:08:32.785] | : . ' , ; Number of registered futures: 2
[08:08:32.785] | : . ' , FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'add', earlySignal = 0) ... done
[08:08:32.785] | : . ' launchFuture() ... done
[08:08:32.785] | : . ' MultisessionFuture started
[08:08:32.785] | : . Launching futures ... done
[08:08:32.785] | : Using MultisessionFutureBackend ... done
[08:08:32.786] | : Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:32.786] | run() for ‘Future’ (<unnamed-120>) ... done
[08:08:32.786] future(..., label = NULL) ... done

Classes 'listenv', 'environment' <environment: 0x564304718528> 
Classes 'listenv', 'environment' <environment: 0x564303db4650> 
 - attr(*, "dim.")= int [1:4] 2 1 3 1
 - attr(*, "dimnames.")=List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
[08:08:32.789] resolved() for listenv ...
[08:08:32.790] | resolved() for array ...
[08:08:32.790] | : Number of elements: 6
[08:08:32.790] | : Number of futures: 6
[08:08:32.791] | : resolved() for MultisessionFuture (<unnamed-119>) ...
[08:08:32.791] | : . Cluster node socket connection: index=5, id=1578
[08:08:32.791] | : . assertValidConnection() ...
[08:08:32.791] | : . ' cluster node index: 2
[08:08:32.791] | : . assertValidConnection() ... done
[08:08:32.792] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:32.792] | : . ' cluster node index: 2
[08:08:32.792] | : . ' [1] TRUE
[08:08:32.792] | : . ' received data:
[08:08:32.792] | : . ' List of 5
[08:08:32.792] | : . '  $ type   : chr "VALUE"
[08:08:32.792] | : . '  $ value  :List of 16
[08:08:32.792] | : . '   ..$ value              : NULL
[08:08:32.792] | : . '   ..$ visible            : logi TRUE
[08:08:32.792] | : . '   ..$ stdout             : chr ""
[08:08:32.792] | : . '   ..$ conditions         : list()
[08:08:32.792] | : . '   ..$ rng                : logi FALSE
[08:08:32.792] | : . '   ..$ seed               : NULL
[08:08:32.792] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:32.792] | : . '   ..$ misuseConnections  :List of 3
[08:08:32.792] | : . '   .. ..$ added   : NULL
[08:08:32.792] | : . '   .. ..$ removed : NULL
[08:08:32.792] | : . '   .. ..$ replaced: NULL
[08:08:32.792] | : . '   ..$ misuseDevices      : NULL
[08:08:32.792] | : . '   ..$ misuseDefaultDevice: list()
[08:08:32.792] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:32"
[08:08:32.792] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:32"
[08:08:32.792] | : . '   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "119"
[08:08:32.792] | : . '   ..$ session_uuid       : chr "0b8fc0d1486ac64ba030ccf6b4936216"
[08:08:32.792] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:32.792] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:32.792] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:32.792] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:32.792] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:32.792] | : . '   .. .. ..$ pid   : int 69207
[08:08:32.792] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:30"
[08:08:32.792] | : . '   .. .. ..$ random: int 2147483647
[08:08:32.792] | : . '   ..$ r_info             :List of 4
[08:08:32.792] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:32.792] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:32.792] | : . '   .. ..$ os           : chr "unix"
[08:08:32.792] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:32.792] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:32.792] | : . '   ..$ version            : chr "1.8"
[08:08:32.792] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:32.792] | : . '  $ success: logi TRUE
[08:08:32.792] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:32.792] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:32.792] | : . '  $ tag    : NULL
[08:08:32.805] | : . ' Received FutureResult
[08:08:32.806] | : . ' FutureResult:
[08:08:32.806] | : . ' value: ‘NULL’
[08:08:32.806] | : . ' visible: TRUE
[08:08:32.806] | : . ' stdout: character
[08:08:32.806] | : . ' conditions: [n = 0] 
[08:08:32.806] | : . ' RNG used: FALSE
[08:08:32.806] | : . ' duration: 0.002680302 secs (started 2025-06-17 08:08:32.6852)
[08:08:32.806] | : . ' version: 1.8
[08:08:32.806] | : . ' FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'remove', earlySignal = 0) ...
[08:08:32.806] | : . ' , Removed future from position #1
[08:08:32.806] | : . ' , Number of registered futures: 1
[08:08:32.806] | : . ' FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'remove', earlySignal = 0) ... done
[08:08:32.807] | : . ' Erased future from future backend
[08:08:32.807] | : . ' result() for ClusterFuture ...
[08:08:32.807] | : . ' , result already collected: FutureResult
[08:08:32.807] | : . ' result() for ClusterFuture ... done
[08:08:32.807] | : . ' signalConditions() ...
[08:08:32.807] | : . ' , include = ‘immediateCondition’
[08:08:32.807] | : . ' , exclude = 
[08:08:32.807] | : . ' , resignal = FALSE
[08:08:32.807] | : . ' , Number of conditions: 0
[08:08:32.807] | : . ' ,  int 0
[08:08:32.808] | : . ' signalConditions() ... done
[08:08:32.808] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:32.808] | : . receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:32.808] | : resolved() for MultisessionFuture (<unnamed-119>) ... done
[08:08:32.808] | : assertFutureResult() ...
[08:08:32.808] | : . Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:32.808] | : . Future uuid: 119
[08:08:32.808] | : . identical; success
[08:08:32.809] | : assertFutureResult() ... done
[08:08:32.809] | : resolved() for MultisessionFuture (<unnamed-120>) ...
[08:08:32.809] | : . Cluster node socket connection: index=4, id=1577
[08:08:32.809] | : . assertValidConnection() ...
[08:08:32.809] | : . ' cluster node index: 1
[08:08:32.809] | : . assertValidConnection() ... done
[08:08:32.820] | : . socketSelect(list(<connection #4 (id=1577)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:32.820] | : resolved() for MultisessionFuture (<unnamed-120>) ... done
[08:08:32.820] | resolved() for array ... done
[08:08:32.820] resolved() for listenv ... done
 logi [1:2, 1, 1:3, 1] TRUE TRUE TRUE FALSE TRUE TRUE
 - attr(*, "dimnames")=List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
 - attr(*, "names")= chr [1:6] "a" "b" "c" "d" ...
[08:08:32.823] value() for listenv ...
[08:08:32.823] | recursive: 0
[08:08:32.823] | reduce: FALSE
[08:08:32.824] | length: 6
[08:08:32.824] | elements: ‘a’, ‘b’, ‘c’, ‘d’, ‘’, ‘’
[08:08:32.824] | Number of remaining objects: 6
[08:08:32.824] | checking value #1:
[08:08:32.824] | 'obj' is atomic
[08:08:32.824] | signalConditionsASAP(numeric, pos=1) ...
[08:08:32.825] | : nx: 6
[08:08:32.825] | : relay: TRUE
[08:08:32.825] | : stdout: TRUE
[08:08:32.825] | : signal: TRUE
[08:08:32.825] | : resignal: FALSE
[08:08:32.825] | : force: TRUE
[08:08:32.825] | : relayed: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:32.825] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:32.825] | : until=2
[08:08:32.825] | : relaying element #2
[08:08:32.826] | : relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:32.826] | : queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:32.826] | signalConditionsASAP(numeric, pos=1) ... done
[08:08:32.826] | length: 5 (resolved future 1)
[08:08:32.826] value() for listenv ... done
[08:08:32.826] checking value #2:
[08:08:32.826] 'obj' is MultisessionFuture
[08:08:32.827] MultisessionFuture #2
[08:08:32.827] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:32.827] | nx: 6
[08:08:32.827] | relay: TRUE
[08:08:32.827] | stdout: TRUE
[08:08:32.827] | signal: TRUE
[08:08:32.827] | resignal: FALSE
[08:08:32.827] | force: TRUE
[08:08:32.827] | relayed: [n=6] TRUE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:32.827] | queued futures: [n=6] FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
[08:08:32.827] | until=2
[08:08:32.828] | relaying element #2
[08:08:32.828] | value() for MultisessionFuture (<unnamed-118>) ...
[08:08:32.828] | : result() for ClusterFuture ...
[08:08:32.828] | : . result already collected: FutureResult
[08:08:32.828] | : result() for ClusterFuture ... done
[08:08:32.828] | : result() for ClusterFuture ...
[08:08:32.828] | : . result already collected: FutureResult
[08:08:32.828] | : result() for ClusterFuture ... done
[08:08:32.828] | : signalConditions() ...
[08:08:32.828] | : . include = ‘immediateCondition’
[08:08:32.829] | : . exclude = 
[08:08:32.829] | : . resignal = FALSE
[08:08:32.829] | : . Number of conditions: 0
[08:08:32.829] | : .  int 0
[08:08:32.829] | : signalConditions() ... done
[08:08:32.829] | : relay stdout ...
[08:08:32.830] | : relay stdout ... done
[08:08:32.830] | : check for misuse ...
[08:08:32.830] | : check for misuse ... done
[08:08:32.830] | value() for MultisessionFuture (<unnamed-118>) ... done
[08:08:32.830] | result() for ClusterFuture ...
[08:08:32.830] | : result already collected: FutureResult
[08:08:32.830] | result() for ClusterFuture ... done
[08:08:32.830] | signalConditions() ...
[08:08:32.830] | : include = ‘immediateCondition’
[08:08:32.830] | : exclude = 
[08:08:32.831] | : resignal = FALSE
[08:08:32.831] | : Number of conditions: 0
[08:08:32.831] | :  int 0
[08:08:32.831] | signalConditions() ... done
[08:08:32.831] | result() for ClusterFuture ...
[08:08:32.831] | : result already collected: FutureResult
[08:08:32.831] | result() for ClusterFuture ... done
[08:08:32.832] | signalConditions() ...
[08:08:32.832] | : include = ‘condition’
[08:08:32.832] | : exclude = ‘error’, ‘immediateCondition’
[08:08:32.832] | : resignal = TRUE
[08:08:32.832] | : Number of conditions: 0
[08:08:32.832] | :  int 0
[08:08:32.832] | signalConditions() ... done
[08:08:32.833] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:32.833] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:32.833] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:32.833] value(<MultisessionFuture>, ...) ...
[08:08:32.833] value(<MultisessionFuture>, ...) ... done
[08:08:32.833] value() for MultisessionFuture (<unnamed-118>) ...
[08:08:32.833] | result() for ClusterFuture ...
[08:08:32.833] | : result already collected: FutureResult
[08:08:32.833] | result() for ClusterFuture ... done
[08:08:32.834] | result() for ClusterFuture ...
[08:08:32.834] | : result already collected: FutureResult
[08:08:32.834] | result() for ClusterFuture ... done
[08:08:32.834] | signalConditions() ...
[08:08:32.834] | : include = ‘immediateCondition’
[08:08:32.834] | : exclude = 
[08:08:32.834] | : resignal = FALSE
[08:08:32.834] | : Number of conditions: 0
[08:08:32.834] | :  int 0
[08:08:32.835] | signalConditions() ... done
[08:08:32.835] | check for misuse ...
[08:08:32.835] | check for misuse ... done
[08:08:32.835] value() for MultisessionFuture (<unnamed-118>) ... done
[08:08:32.835] value: <numeric>
[08:08:32.835] signalConditionsASAP(MultisessionFuture, pos=2) ...
[08:08:32.835] | nx: 6
[08:08:32.835] | relay: TRUE
[08:08:32.836] | stdout: TRUE
[08:08:32.836] | signal: TRUE
[08:08:32.836] | resignal: FALSE
[08:08:32.836] | force: TRUE
[08:08:32.836] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:32.836] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:32.836] | until=3
[08:08:32.836] | relaying element #3
[08:08:32.836] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:32.836] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:32.837] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[08:08:32.837] resolve() for MultisessionFuture ...
[08:08:32.837] resolve() for MultisessionFuture ... done
[08:08:32.837] length: 4 (resolved future 2)

[08:08:32.837] checking value #3:
[08:08:32.837] 'obj' is MultisessionFuture
[08:08:32.837] MultisessionFuture #3
[08:08:32.837] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:32.837] | nx: 6
[08:08:32.838] | relay: TRUE
[08:08:32.838] | stdout: TRUE
[08:08:32.838] | signal: TRUE
[08:08:32.838] | resignal: FALSE
[08:08:32.838] | force: TRUE
[08:08:32.838] | relayed: [n=6] TRUE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:32.838] | queued futures: [n=6] FALSE, TRUE, FALSE, FALSE, FALSE, FALSE
[08:08:32.838] | until=3
[08:08:32.838] | relaying element #3
[08:08:32.838] | value() for MultisessionFuture (<unnamed-119>) ...
[08:08:32.838] | : result() for ClusterFuture ...
[08:08:32.839] | : . result already collected: FutureResult
[08:08:32.839] | : result() for ClusterFuture ... done
[08:08:32.839] | : result() for ClusterFuture ...
[08:08:32.839] | : . result already collected: FutureResult
[08:08:32.839] | : result() for ClusterFuture ... done
[08:08:32.839] | : signalConditions() ...
[08:08:32.839] | : . include = ‘immediateCondition’
[08:08:32.839] | : . exclude = 
[08:08:32.839] | : . resignal = FALSE
[08:08:32.839] | : . Number of conditions: 0
[08:08:32.840] | : .  int 0
[08:08:32.840] | : signalConditions() ... done
[08:08:32.840] | : relay stdout ...
[08:08:32.840] | : relay stdout ... done
[08:08:32.840] | : check for misuse ...
[08:08:32.840] | : check for misuse ... done
[08:08:32.841] | value() for MultisessionFuture (<unnamed-119>) ... done
[08:08:32.841] | result() for ClusterFuture ...
[08:08:32.841] | : result already collected: FutureResult
[08:08:32.841] | result() for ClusterFuture ... done
[08:08:32.841] | signalConditions() ...
[08:08:32.841] | : include = ‘immediateCondition’
[08:08:32.841] | : exclude = 
[08:08:32.841] | : resignal = FALSE
[08:08:32.841] | : Number of conditions: 0
[08:08:32.841] | :  int 0
[08:08:32.842] | signalConditions() ... done
[08:08:32.842] | result() for ClusterFuture ...
[08:08:32.842] | : result already collected: FutureResult
[08:08:32.842] | result() for ClusterFuture ... done
[08:08:32.842] | signalConditions() ...
[08:08:32.842] | : include = ‘condition’
[08:08:32.842] | : exclude = ‘error’, ‘immediateCondition’
[08:08:32.843] | : resignal = TRUE
[08:08:32.843] | : Number of conditions: 0
[08:08:32.843] | :  int 0
[08:08:32.843] | signalConditions() ... done
[08:08:32.843] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:32.843] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:32.843] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:32.843] value(<MultisessionFuture>, ...) ...
[08:08:32.844] value(<MultisessionFuture>, ...) ... done
[08:08:32.844] value() for MultisessionFuture (<unnamed-119>) ...
[08:08:32.844] | result() for ClusterFuture ...
[08:08:32.844] | : result already collected: FutureResult
[08:08:32.844] | result() for ClusterFuture ... done
[08:08:32.844] | result() for ClusterFuture ...
[08:08:32.844] | : result already collected: FutureResult
[08:08:32.844] | result() for ClusterFuture ... done
[08:08:32.844] | signalConditions() ...
[08:08:32.844] | : include = ‘immediateCondition’
[08:08:32.845] | : exclude = 
[08:08:32.845] | : resignal = FALSE
[08:08:32.845] | : Number of conditions: 0
[08:08:32.845] | :  int 0
[08:08:32.845] | signalConditions() ... done
[08:08:32.845] | check for misuse ...
[08:08:32.845] | check for misuse ... done
[08:08:32.846] value() for MultisessionFuture (<unnamed-119>) ... done
[08:08:32.846] value: <NULL>
[08:08:32.846] signalConditionsASAP(MultisessionFuture, pos=3) ...
[08:08:32.846] | nx: 6
[08:08:32.846] | relay: TRUE
[08:08:32.846] | stdout: TRUE
[08:08:32.846] | signal: TRUE
[08:08:32.846] | resignal: FALSE
[08:08:32.846] | force: TRUE
[08:08:32.846] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:32.847] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:32.847] | until=4
[08:08:32.847] | relaying element #4
[08:08:32.847] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:32.847] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:32.847] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[08:08:32.847] resolve() for MultisessionFuture ...
[08:08:32.847] resolve() for MultisessionFuture ... done
[08:08:32.847] length: 3 (resolved future 3)

[08:08:32.848] checking value #4:
[08:08:32.848] 'obj' is MultisessionFuture
[08:08:32.848] resolved() for MultisessionFuture (<unnamed-120>) ...
[08:08:32.848] | Cluster node socket connection: index=4, id=1577
[08:08:32.848] | assertValidConnection() ...
[08:08:32.848] | : cluster node index: 1
[08:08:32.849] | assertValidConnection() ... done
[08:08:32.849] | receiveMessageFromWorker() for ClusterFuture ...
[08:08:32.849] | : cluster node index: 1
[08:08:32.849] | : [1] TRUE
[08:08:32.849] | : received data:
[08:08:32.849] | : List of 5
[08:08:32.849] | :  $ type   : chr "VALUE"
[08:08:32.849] | :  $ value  :List of 16
[08:08:32.849] | :   ..$ value              : num 4
[08:08:32.849] | :   ..$ visible            : logi TRUE
[08:08:32.849] | :   ..$ stdout             : chr ""
[08:08:32.849] | :   ..$ conditions         : list()
[08:08:32.849] | :   ..$ rng                : logi FALSE
[08:08:32.849] | :   ..$ seed               : NULL
[08:08:32.849] | :   ..$ misuseGlobalEnv    : NULL
[08:08:32.849] | :   ..$ misuseConnections  :List of 3
[08:08:32.849] | :   .. ..$ added   : NULL
[08:08:32.849] | :   .. ..$ removed : NULL
[08:08:32.849] | :   .. ..$ replaced: NULL
[08:08:32.849] | :   ..$ misuseDevices      : NULL
[08:08:32.849] | :   ..$ misuseDefaultDevice: list()
[08:08:32.849] | :   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:32"
[08:08:32.849] | :   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:32"
[08:08:32.849] | :   ..$ uuid               : chr [1:2] "3df9dcad6f359117ca84f1bde097c106" "120"
[08:08:32.849] | :   ..$ session_uuid       : chr "dee2a208d5ef67f03fdb13c0c9ecc01f"
[08:08:32.849] | :   .. ..- attr(*, "source")=List of 5
[08:08:32.849] | :   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:32.849] | :   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:32.849] | :   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:32.849] | :   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:32.849] | :   .. .. ..$ pid   : int 69208
[08:08:32.849] | :   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:30"
[08:08:32.849] | :   .. .. ..$ random: int 2147483647
[08:08:32.849] | :   ..$ r_info             :List of 4
[08:08:32.849] | :   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:32.849] | :   .. .. ..$ : int [1:3] 4 5 0
[08:08:32.849] | :   .. ..$ os           : chr "unix"
[08:08:32.849] | :   .. ..$ os_name      : chr "Linux"
[08:08:32.849] | :   .. ..$ captures_utf8: logi TRUE
[08:08:32.849] | :   ..$ version            : chr "1.8"
[08:08:32.849] | :   ..- attr(*, "class")= chr "FutureResult"
[08:08:32.849] | :  $ success: logi TRUE
[08:08:32.849] | :  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[08:08:32.849] | :   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:32.849] | :  $ tag    : NULL
[08:08:32.860] | : Received FutureResult
[08:08:32.860] | : FutureResult:
[08:08:32.860] | : value: ‘numeric’
[08:08:32.860] | : visible: TRUE
[08:08:32.860] | : stdout: character
[08:08:32.860] | : conditions: [n = 0] 
[08:08:32.860] | : RNG used: FALSE
[08:08:32.860] | : duration: 0.00303936 secs (started 2025-06-17 08:08:32.826289)
[08:08:32.860] | : version: 1.8
[08:08:32.861] | : FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'remove', earlySignal = 0) ...
[08:08:32.861] | : . Removed future from position #1
[08:08:32.861] | : . Number of registered futures: 0
[08:08:32.861] | : FutureRegistry('workers-297aebe174e28ef42df314fbb4f321b2', action = 'remove', earlySignal = 0) ... done
[08:08:32.861] | : Erased future from future backend
[08:08:32.861] | : result() for ClusterFuture ...
[08:08:32.861] | : . result already collected: FutureResult
[08:08:32.862] | : result() for ClusterFuture ... done
[08:08:32.862] | : signalConditions() ...
[08:08:32.862] | : . include = ‘immediateCondition’
[08:08:32.862] | : . exclude = 
[08:08:32.862] | : . resignal = FALSE
[08:08:32.862] | : . Number of conditions: 0
[08:08:32.862] | : .  int 0
[08:08:32.863] | : signalConditions() ... done
[08:08:32.863] | receiveMessageFromWorker() for ClusterFuture ... done
[08:08:32.863] | receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:08:32.863] resolved() for MultisessionFuture (<unnamed-120>) ... done
[08:08:32.863] assertFutureResult() ...
[08:08:32.863] | Future uuid: 3df9dcad6f359117ca84f1bde097c106[08:08:32.863] | Future uuid: 120
[08:08:32.863] | identical; success
[08:08:32.863] assertFutureResult() ... done
[08:08:32.863] MultisessionFuture #4
[08:08:32.863] signalConditionsASAP(MultisessionFuture, pos=4) ...
[08:08:32.864] | nx: 6
[08:08:32.864] | relay: TRUE
[08:08:32.864] | stdout: TRUE
[08:08:32.864] | signal: TRUE
[08:08:32.864] | resignal: FALSE
[08:08:32.864] | force: TRUE
[08:08:32.864] | relayed: [n=6] TRUE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:32.864] | queued futures: [n=6] FALSE, TRUE, TRUE, FALSE, FALSE, FALSE
[08:08:32.864] | until=4
[08:08:32.864] | relaying element #4
[08:08:32.865] | value() for MultisessionFuture (<unnamed-120>) ...
[08:08:32.865] | : result() for ClusterFuture ...
[08:08:32.865] | : . result already collected: FutureResult
[08:08:32.865] | : result() for ClusterFuture ... done
[08:08:32.865] | : result() for ClusterFuture ...
[08:08:32.865] | : . result already collected: FutureResult
[08:08:32.865] | : result() for ClusterFuture ... done
[08:08:32.865] | : signalConditions() ...
[08:08:32.865] | : . include = ‘immediateCondition’
[08:08:32.865] | : . exclude = 
[08:08:32.866] | : . resignal = FALSE
[08:08:32.866] | : . Number of conditions: 0
[08:08:32.866] | : .  int 0
[08:08:32.866] | : signalConditions() ... done
[08:08:32.866] | : relay stdout ...
[08:08:32.866] | : relay stdout ... done
[08:08:32.866] | : check for misuse ...
[08:08:32.867] | : check for misuse ... done
[08:08:32.867] | value() for MultisessionFuture (<unnamed-120>) ... done
[08:08:32.867] | result() for ClusterFuture ...
[08:08:32.867] | : result already collected: FutureResult
[08:08:32.867] | result() for ClusterFuture ... done
[08:08:32.867] | signalConditions() ...
[08:08:32.867] | : include = ‘immediateCondition’
[08:08:32.867] | : exclude = 
[08:08:32.867] | : resignal = FALSE
[08:08:32.867] | : Number of conditions: 0
[08:08:32.868] | :  int 0
[08:08:32.868] | signalConditions() ... done
[08:08:32.868] | result() for ClusterFuture ...
[08:08:32.868] | : result already collected: FutureResult
[08:08:32.868] | result() for ClusterFuture ... done
[08:08:32.868] | signalConditions() ...
[08:08:32.869] | : include = ‘condition’
[08:08:32.869] | : exclude = ‘error’, ‘immediateCondition’
[08:08:32.869] | : resignal = TRUE
[08:08:32.869] | : Number of conditions: 0
[08:08:32.869] | :  int 0
[08:08:32.869] | signalConditions() ... done
[08:08:32.869] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:32.870] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:32.870] signalConditionsASAP(MultisessionFuture, pos=4) ... done
[08:08:32.870] value(<MultisessionFuture>, ...) ...
[08:08:32.870] value(<MultisessionFuture>, ...) ... done
[08:08:32.870] value() for MultisessionFuture (<unnamed-120>) ...
[08:08:32.870] | result() for ClusterFuture ...
[08:08:32.870] | : result already collected: FutureResult
[08:08:32.870] | result() for ClusterFuture ... done
[08:08:32.870] | result() for ClusterFuture ...
[08:08:32.870] | : result already collected: FutureResult
[08:08:32.871] | result() for ClusterFuture ... done
[08:08:32.871] | signalConditions() ...
[08:08:32.871] | : include = ‘immediateCondition’
[08:08:32.871] | : exclude = 
[08:08:32.871] | : resignal = FALSE
[08:08:32.871] | : Number of conditions: 0
[08:08:32.871] | :  int 0
[08:08:32.871] | signalConditions() ... done
[08:08:32.872] | check for misuse ...
[08:08:32.872] | check for misuse ... done
[08:08:32.872] value() for MultisessionFuture (<unnamed-120>) ... done
[08:08:32.872] value: <numeric>
[08:08:32.872] signalConditionsASAP(MultisessionFuture, pos=4) ...
[08:08:32.872] | nx: 6
[08:08:32.872] | relay: TRUE
[08:08:32.872] | stdout: TRUE
[08:08:32.872] | signal: TRUE
[08:08:32.873] | resignal: FALSE
[08:08:32.873] | force: TRUE
[08:08:32.873] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:32.873] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:32.873] | until=5
[08:08:32.873] | relaying element #5
[08:08:32.873] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:32.873] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:32.873] signalConditionsASAP(MultisessionFuture, pos=4) ... done
[08:08:32.876] resolve() for MultisessionFuture ...
[08:08:32.876] resolve() for MultisessionFuture ... done
[08:08:32.876] length: 2 (resolved future 4)

[08:08:32.876] checking value #5:
[08:08:32.876] 'obj' is NULL
[08:08:32.876] signalConditionsASAP(NULL, pos=5) ...
[08:08:32.876] | nx: 6
[08:08:32.877] | relay: TRUE
[08:08:32.877] | stdout: TRUE
[08:08:32.877] | signal: TRUE
[08:08:32.877] | resignal: FALSE
[08:08:32.877] | force: TRUE
[08:08:32.877] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:32.877] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:32.877] | until=6
[08:08:32.877] | relaying element #6
[08:08:32.877] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:32.877] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:32.878] signalConditionsASAP(NULL, pos=5) ... done
[08:08:32.878] signalConditionsASAP(NULL, pos=5) ...
[08:08:32.878] | nx: 6
[08:08:32.878] | relay: TRUE
[08:08:32.878] | stdout: TRUE
[08:08:32.878] | signal: TRUE
[08:08:32.878] | resignal: FALSE
[08:08:32.878] | force: TRUE
[08:08:32.878] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:32.878] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:32.879] | until=6
[08:08:32.879] | relaying element #6
[08:08:32.879] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:32.879] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:32.879] signalConditionsASAP(NULL, pos=5) ... done
[08:08:32.879] length: 1 (resolved future 5)

[08:08:32.879] checking value #6:
[08:08:32.879] 'obj' is atomic
[08:08:32.880] signalConditionsASAP(numeric, pos=6) ...
[08:08:32.880] | nx: 6
[08:08:32.880] | relay: TRUE
[08:08:32.880] | stdout: TRUE
[08:08:32.880] | signal: TRUE
[08:08:32.880] | resignal: FALSE
[08:08:32.880] | force: TRUE
[08:08:32.880] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, FALSE
[08:08:32.880] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:32.880] | until=6
[08:08:32.880] | relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:32.881] | queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:32.881] signalConditionsASAP(numeric, pos=6) ... done
[08:08:32.881] length: 0 (resolved future 6)

[08:08:32.881] Relaying remaining futures ...
[08:08:32.881] | signalConditionsASAP(NULL, pos=0) ...
[08:08:32.881] | : nx: 6
[08:08:32.881] | : relay: TRUE
[08:08:32.881] | : stdout: TRUE
[08:08:32.881] | : signal: TRUE
[08:08:32.882] | : resignal: FALSE
[08:08:32.882] | : force: TRUE
[08:08:32.882] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:32.882] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
 - flush all
[08:08:32.882] | : relayed: [n=6] TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
[08:08:32.882] | : queued futures: [n=6] FALSE, TRUE, TRUE, TRUE, FALSE, FALSE
[08:08:32.882] | signalConditionsASAP(NULL, pos=0) ... done
[08:08:32.882] Relaying remaining futures ... done

List of 6
 $ a: num 1
 $ b: num 2
 $ c: NULL
 $ d: num 4
 $  : NULL
 $  : num 6
 - attr(*, "dim")= int [1:4] 2 1 3 1
 - attr(*, "dimnames")=List of 4
  ..$ : chr [1:2] "a" "b"
  ..$ : chr "a"
  ..$ : chr [1:3] "a" "b" "c"
  ..$ : chr "a"
*** futures() - listenv ... DONE
Testing with 2 cores ... DONE

> message("*** futures() / resolved() / value() ... DONE")
*** futures() / resolved() / value() ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=8s, sys.self=0.7s, elapsed=1e+01s, user.child=2s, sys.child=1s
Test ‘futures’ ... success
> 
