
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script incl/testme/test-invalid-owner.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("invalid-owner")
Test ‘invalid-owner’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-invalid-owner.R’

> library(future)
[10:53:46.935] Option 'future.startup.script': TRUE
[10:53:46.935] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[10:53:46.935] Future startup scripts found: <none>

> options(future.debug = FALSE)

> usedNodes <- function(future) {
+     backend <- future[["backend"]]
+     workers <- backend[["workers"]]
+     reg <- backend[["reg"]]
+     c(use .... [TRUNCATED] 

> plan(multisession, workers = 2)

> message("*** future() - invalid ownership ...")
*** future() - invalid ownership ...

> session_uuid <- future:::session_uuid(attributes = TRUE)

> cat(sprintf("Main R process: %s\n", session_uuid))
Main R process: 2a7469ce805fbbdd8361e24848d3625a

> message("- Asserting ownership ...")
- Asserting ownership ...

> message("Creating future #1:")
Creating future #1:

> f1 <- future({
+     future:::session_uuid(attributes = TRUE)
+ })

> stopifnot(inherits(f1, "MultisessionFuture"))

> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1

> v1 <- value(f1)

> cat(sprintf("Future #1 R process: %s\n", v1))
Future #1 R process: 9947ae220d97f7defd7df2632a690581

> stopifnot(v1 != session_uuid)

> message("Creating future #2:")
Creating future #2:

> f2 <- future({
+     future:::session_uuid(attributes = TRUE)
+ })

> stopifnot(inherits(f2, "MultisessionFuture"))

> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 1

> v2 <- value(f2)

> cat(sprintf("Future #2 R process: %s\n", v2))
Future #2 R process: 9947ae220d97f7defd7df2632a690581

> stopifnot(v2 != session_uuid)

> message("Creating future #3:")
Creating future #3:

> f3 <- future({
+     f1$owner
+ })

> stopifnot(inherits(f3, "MultisessionFuture"))

> cat(sprintf("Future #3 session: %d\n", f3$node))
Future #3 session: 1

> v3 <- value(f3)

> cat(sprintf("Future #3 owner: %s\n", v3))
Future #3 owner: 2a7469ce805fbbdd8361e24848d3625a

> stopifnot(v3 == session_uuid)

> message("Creating future #4:")
Creating future #4:

> f4 <- future({
+     f1$owner
+ })

> stopifnot(inherits(f4, "MultisessionFuture"))

> cat(sprintf("Future #4 session: %d\n", f4$node))
Future #4 session: 1

> v4 <- value(f4)

> cat(sprintf("Future #4 owner: %s\n", v4))
Future #4 owner: 2a7469ce805fbbdd8361e24848d3625a

> stopifnot(v4 == session_uuid)

> message("Creating future #5:")
Creating future #5:

> f5 <- future({
+     stopifnot(f1$owner != future:::session_uuid(attributes = TRUE))
+     "not-owner"
+ })

> stopifnot(inherits(f5, "MultisessionFuture"))

> v5 <- value(f5)

> stopifnot(v5 == "not-owner")

> message("- Asserting ownership ... DONE")
- Asserting ownership ... DONE

> message("- Trying with invalid ownership ...")
- Trying with invalid ownership ...

> message("Creating future #1:")
Creating future #1:

> f1 <- future({
+     42
+ })

> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1

> stopifnot(identical(f1$owner, session_uuid))

> print(usedNodes(f1))
 used total 
    1     2 

> message("Creating future #2:")
Creating future #2:

> f2 <- future({
+     value(f1)
+ })

> print(f2)
MultisessionFuture:
Label: NULL
Expression:
{
    value(f1)
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Globals: 1 objects totaling 314.42 KiB (MultisessionFuture ‘f1’ of 314.42 KiB)
Packages: 1 packages (‘future’)
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2a7469ce805fbbdd8361e24848d3625a
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’

> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 2

> stopifnot(identical(f2$owner, session_uuid))

> print(usedNodes(f2))
 used total 
    2     2 

> message("Getting value of future #2:")
Getting value of future #2:

> res <- tryCatch(value(f2), error = identity)

> print(res)
<FutureError: Invalid usage of futures: A future (here ‘MultisessionFuture’) whose value has not yet been collected can only be queried by the R process (2a7469ce805fbbdd8361e24848d3625a; pid 72492 on 5995ac22cdae) that created it, not by any other R processes (2839e47f1bef7311d21cc79a0e38e6b9; pid 72545 on 5995ac22cdae): {; 42L; }>


Future UUID: 2a7469ce805fbbdd8361e24848d3625a-6


DEBUG: BEGIN TROUBLESHOOTING HELP
Future involved:
MultisessionFuture:
Label: NULL
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2a7469ce805fbbdd8361e24848d3625a
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’

DEBUG: END TROUBLESHOOTING HELP

> stopifnot(inherits(res, "error"))

> v1 <- value(f1)

> print(v1)
[1] 42

> stopifnot(v1 == 42)

> message("- Trying with invalid ownership ... DONE")
- Trying with invalid ownership ... DONE

> message("*** future() - invalid ownership ... DONE")
*** future() - invalid ownership ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.5s, sys.self=0.03s, elapsed=1s, user.child=0.2s, sys.child=0.4s
Test ‘invalid-owner’ ... success
> 
