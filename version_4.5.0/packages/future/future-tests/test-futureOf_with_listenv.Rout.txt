
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-futureOf_with_listenv.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("futureOf_with_listenv")
Test ‘futureOf_with_listenv’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-futureOf_with_listenv.R’

> library(future)
[08:08:19.291] Option 'future.startup.script': TRUE
[08:08:19.291] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:08:19.291] Future startup scripts found: <none>

> library(listenv)

> message("*** futureOf() with listenv ...")
*** futureOf() with listenv ...

> message("*** futureOf() with listenv - future assignments ...")
*** futureOf() with listenv - future assignments ...

> x <- listenv()

> x$a %<-% {
+     1
+ } %lazy% TRUE
[08:08:19.296] future(..., label = NULL) ...
[08:08:19.296] | lazy: TRUE
[08:08:19.296] | stdout: TRUE
[08:08:19.296] | conditions: [n=1] ‘condition’
[08:08:19.296] | gc: FALSE
[08:08:19.296] | earlySignal: FALSE
[08:08:19.297] | getGlobalsAndPackages() ...
[08:08:19.297] | : Searching for globals ...
[08:08:19.308] | : . globals found: [1] ‘{’
[08:08:19.308] | : Searching for globals ... done
[08:08:19.308] | : Resolving globals: FALSE
[08:08:19.308] | : Search for packages associated with the globals ...
[08:08:19.308] | : . Packages associated with globals: [1] ‘base’
[08:08:19.309] | : . Packages: [1] ‘base’
[08:08:19.309] | : Search for packages associated with the globals ... done
[08:08:19.309] | : Packages after dropping 'base': [0] 
[08:08:19.309] | : globals: [0] 
[08:08:19.309] | : packages: [0] 
[08:08:19.309] | getGlobalsAndPackages() ... done
[08:08:19.310] future(..., label = NULL) ... done

> f1 <- futureOf("a", envir = x)

> print(f1)
Future:
Label: <unnamed-1>
Expression:
{
    1
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: TRUE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘created’
Resolved: FALSE
Unique identifier: 5f7c1083d2097786b0781bd3190c618a-1
Owner process: 5f7c1083d2097786b0781bd3190c618a
Class: ‘Future’, ‘environment’
Value: <not collected>
Conditions captured: <none>

> f2 <- futureOf(a, envir = x)

> f3 <- futureOf(1, envir = x)

> f4 <- futureOf(x[["a"]])

> f5 <- futureOf(x$a)

> f6 <- futureOf(x[[1]])

> stopifnot(identical(f2, f1), identical(f3, f2), identical(f4, 
+     f3), identical(f5, f4), identical(f6, f5))

> x[[3]] %<-% {
+     3
+ } %lazy% TRUE
[08:08:19.312] future(..., label = NULL) ...
[08:08:19.312] | lazy: TRUE
[08:08:19.312] | stdout: TRUE
[08:08:19.313] | conditions: [n=1] ‘condition’
[08:08:19.313] | gc: FALSE
[08:08:19.313] | earlySignal: FALSE
[08:08:19.313] | getGlobalsAndPackages() ...
[08:08:19.313] | : Searching for globals ...
[08:08:19.316] | : . globals found: [1] ‘{’
[08:08:19.316] | : Searching for globals ... done
[08:08:19.316] | : Resolving globals: FALSE
[08:08:19.316] | : Search for packages associated with the globals ...
[08:08:19.316] | : . Packages associated with globals: [1] ‘base’
[08:08:19.316] | : . Packages: [1] ‘base’
[08:08:19.316] | : Search for packages associated with the globals ... done
[08:08:19.317] | : Packages after dropping 'base': [0] 
[08:08:19.317] | : globals: [0] 
[08:08:19.317] | : packages: [0] 
[08:08:19.317] | getGlobalsAndPackages() ... done
[08:08:19.317] future(..., label = NULL) ... done

> x$d %<-% {
+     4
+ } %lazy% TRUE
[08:08:19.318] future(..., label = NULL) ...
[08:08:19.318] | lazy: TRUE
[08:08:19.318] | stdout: TRUE
[08:08:19.318] | conditions: [n=1] ‘condition’
[08:08:19.318] | gc: FALSE
[08:08:19.318] | earlySignal: FALSE
[08:08:19.318] | getGlobalsAndPackages() ...
[08:08:19.318] | : Searching for globals ...
[08:08:19.321] | : . globals found: [1] ‘{’
[08:08:19.321] | : Searching for globals ... done
[08:08:19.321] | : Resolving globals: FALSE
[08:08:19.322] | : Search for packages associated with the globals ...
[08:08:19.322] | : . Packages associated with globals: [1] ‘base’
[08:08:19.322] | : . Packages: [1] ‘base’
[08:08:19.322] | : Search for packages associated with the globals ... done
[08:08:19.322] | : Packages after dropping 'base': [0] 
[08:08:19.322] | : globals: [0] 
[08:08:19.322] | : packages: [0] 
[08:08:19.322] | getGlobalsAndPackages() ... done
[08:08:19.323] future(..., label = NULL) ... done

> x[[5]] <- 5

> fs <- futureOf(envir = x)

> print(fs)
$a
Future:
Label: <unnamed-1>
Expression:
{
    1
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: TRUE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘created’
Resolved: FALSE
Unique identifier: 5f7c1083d2097786b0781bd3190c618a-1
Owner process: 5f7c1083d2097786b0781bd3190c618a
Class: ‘Future’, ‘environment’
Value: <not collected>
Conditions captured: <none>

[[2]]
[1] NA
attr(,"reason")
[1] "No such future variable: 2L"

[[3]]
Future:
Label: <unnamed-2>
Expression:
{
    3
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: TRUE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘created’
Resolved: FALSE
Unique identifier: 5f7c1083d2097786b0781bd3190c618a-2
Owner process: 5f7c1083d2097786b0781bd3190c618a
Class: ‘Future’, ‘environment’
Value: <not collected>
Conditions captured: <none>

$d
Future:
Label: <unnamed-3>
Expression:
{
    4
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: TRUE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘created’
Resolved: FALSE
Unique identifier: 5f7c1083d2097786b0781bd3190c618a-3
Owner process: 5f7c1083d2097786b0781bd3190c618a
Class: ‘Future’, ‘environment’
Value: <not collected>
Conditions captured: <none>

[[5]]
[1] NA
attr(,"reason")
[1] "Future (‘.listenv_var_2.000000’) not found in listenv ‘<noname>’: ‘5L’"


> stopifnot(identical(names(fs), names(x)))

> stopifnot(identical(fs$a, f1))

> stopifnot(identical(fs[[3]], futureOf(3, envir = x)))

> stopifnot(identical(fs$d, futureOf("d", envir = x)))

> fsD <- futureOf(envir = x, drop = TRUE)

> print(fsD)
$a
Future:
Label: <unnamed-1>
Expression:
{
    1
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: TRUE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘created’
Resolved: FALSE
Unique identifier: 5f7c1083d2097786b0781bd3190c618a-1
Owner process: 5f7c1083d2097786b0781bd3190c618a
Class: ‘Future’, ‘environment’
Value: <not collected>
Conditions captured: <none>

[[2]]
Future:
Label: <unnamed-2>
Expression:
{
    3
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: TRUE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘created’
Resolved: FALSE
Unique identifier: 5f7c1083d2097786b0781bd3190c618a-2
Owner process: 5f7c1083d2097786b0781bd3190c618a
Class: ‘Future’, ‘environment’
Value: <not collected>
Conditions captured: <none>

$d
Future:
Label: <unnamed-3>
Expression:
{
    4
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: TRUE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘created’
Resolved: FALSE
Unique identifier: 5f7c1083d2097786b0781bd3190c618a-3
Owner process: 5f7c1083d2097786b0781bd3190c618a
Class: ‘Future’, ‘environment’
Value: <not collected>
Conditions captured: <none>


> stopifnot(all(sapply(fsD, FUN = inherits, "Future")))

> stopifnot(!identical(fsD, fs))

> message("*** futureOf() with listenv - future assignments ... DONE")
*** futureOf() with listenv - future assignments ... DONE

> message("*** futureOf() with listenv - futures ...")
*** futureOf() with listenv - futures ...

> x <- listenv()

> x$a <- future({
+     1
+ }, lazy = TRUE)
[08:08:19.327] future(..., label = NULL) ...
[08:08:19.327] | lazy: TRUE
[08:08:19.327] | stdout: TRUE
[08:08:19.327] | conditions: [n=1] ‘condition’
[08:08:19.327] | gc: FALSE
[08:08:19.327] | earlySignal: FALSE
[08:08:19.327] | getGlobalsAndPackages() ...
[08:08:19.327] | : Searching for globals ...
[08:08:19.332] | : . globals found: [1] ‘{’
[08:08:19.333] | : Searching for globals ... done
[08:08:19.333] | : Resolving globals: FALSE
[08:08:19.333] | : Search for packages associated with the globals ...
[08:08:19.333] | : . Packages associated with globals: [1] ‘base’
[08:08:19.333] | : . Packages: [1] ‘base’
[08:08:19.333] | : Search for packages associated with the globals ... done
[08:08:19.333] | : Packages after dropping 'base': [0] 
[08:08:19.333] | : globals: [0] 
[08:08:19.334] | : packages: [0] 
[08:08:19.334] | getGlobalsAndPackages() ... done
[08:08:19.334] future(..., label = NULL) ... done

> f1 <- futureOf("a", envir = x)

> print(f1)
Future:
Label: <unnamed-4>
Expression:
{
    1
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: TRUE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘created’
Resolved: FALSE
Unique identifier: 5f7c1083d2097786b0781bd3190c618a-4
Owner process: 5f7c1083d2097786b0781bd3190c618a
Class: ‘Future’, ‘environment’
Value: <not collected>
Conditions captured: <none>

> stopifnot(identical(f1, x$a))

> f2 <- futureOf(a, envir = x)

> stopifnot(identical(f2, x$a))

> f3 <- futureOf(1, envir = x)

> stopifnot(identical(f3, x$a))

> f4 <- futureOf(x[["a"]])

> stopifnot(identical(f4, x$a))

> f5 <- futureOf(x$a)

> stopifnot(identical(f5, x$a))

> f6 <- futureOf(x[[1]])

> stopifnot(identical(f6, x$a))

> x[[3]] <- future({
+     3
+ }, lazy = TRUE)
[08:08:19.336] future(..., label = NULL) ...
[08:08:19.336] | lazy: TRUE
[08:08:19.336] | stdout: TRUE
[08:08:19.336] | conditions: [n=1] ‘condition’
[08:08:19.336] | gc: FALSE
[08:08:19.336] | earlySignal: FALSE
[08:08:19.337] | getGlobalsAndPackages() ...
[08:08:19.337] | : Searching for globals ...
[08:08:19.339] | : . globals found: [1] ‘{’
[08:08:19.340] | : Searching for globals ... done
[08:08:19.340] | : Resolving globals: FALSE
[08:08:19.340] | : Search for packages associated with the globals ...
[08:08:19.340] | : . Packages associated with globals: [1] ‘base’
[08:08:19.340] | : . Packages: [1] ‘base’
[08:08:19.340] | : Search for packages associated with the globals ... done
[08:08:19.340] | : Packages after dropping 'base': [0] 
[08:08:19.341] | : globals: [0] 
[08:08:19.341] | : packages: [0] 
[08:08:19.341] | getGlobalsAndPackages() ... done
[08:08:19.341] future(..., label = NULL) ... done

> x$d <- future({
+     4
+ }, lazy = TRUE)
[08:08:19.341] future(..., label = NULL) ...
[08:08:19.341] | lazy: TRUE
[08:08:19.341] | stdout: TRUE
[08:08:19.341] | conditions: [n=1] ‘condition’
[08:08:19.342] | gc: FALSE
[08:08:19.342] | earlySignal: FALSE
[08:08:19.342] | getGlobalsAndPackages() ...
[08:08:19.342] | : Searching for globals ...
[08:08:19.344] | : . globals found: [1] ‘{’
[08:08:19.345] | : Searching for globals ... done
[08:08:19.345] | : Resolving globals: FALSE
[08:08:19.345] | : Search for packages associated with the globals ...
[08:08:19.345] | : . Packages associated with globals: [1] ‘base’
[08:08:19.345] | : . Packages: [1] ‘base’
[08:08:19.345] | : Search for packages associated with the globals ... done
[08:08:19.345] | : Packages after dropping 'base': [0] 
[08:08:19.345] | : globals: [0] 
[08:08:19.346] | : packages: [0] 
[08:08:19.346] | getGlobalsAndPackages() ... done
[08:08:19.346] future(..., label = NULL) ... done

> x[[5]] <- 5

> fs <- futureOf(envir = x)

> print(fs)
$a
Future:
Label: <unnamed-4>
Expression:
{
    1
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: TRUE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘created’
Resolved: FALSE
Unique identifier: 5f7c1083d2097786b0781bd3190c618a-4
Owner process: 5f7c1083d2097786b0781bd3190c618a
Class: ‘Future’, ‘environment’
Value: <not collected>
Conditions captured: <none>

[[2]]
[1] NA
attr(,"reason")
[1] "No such future variable: 2L"

[[3]]
Future:
Label: <unnamed-5>
Expression:
{
    3
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: TRUE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘created’
Resolved: FALSE
Unique identifier: 5f7c1083d2097786b0781bd3190c618a-5
Owner process: 5f7c1083d2097786b0781bd3190c618a
Class: ‘Future’, ‘environment’
Value: <not collected>
Conditions captured: <none>

$d
Future:
Label: <unnamed-6>
Expression:
{
    4
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: TRUE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘created’
Resolved: FALSE
Unique identifier: 5f7c1083d2097786b0781bd3190c618a-6
Owner process: 5f7c1083d2097786b0781bd3190c618a
Class: ‘Future’, ‘environment’
Value: <not collected>
Conditions captured: <none>

[[5]]
[1] NA
attr(,"reason")
[1] "Future (‘.listenv_var_2.000000’) not found in listenv ‘<noname>’: ‘5L’"


> stopifnot(identical(names(fs), names(x)))

> stopifnot(identical(fs$a, f1))

> stopifnot(identical(fs[[3]], futureOf(3, envir = x)))

> stopifnot(identical(fs$d, futureOf("d", envir = x)))

> fsD <- futureOf(envir = x, drop = TRUE)

> print(fsD)
$a
Future:
Label: <unnamed-4>
Expression:
{
    1
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: TRUE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘created’
Resolved: FALSE
Unique identifier: 5f7c1083d2097786b0781bd3190c618a-4
Owner process: 5f7c1083d2097786b0781bd3190c618a
Class: ‘Future’, ‘environment’
Value: <not collected>
Conditions captured: <none>

[[2]]
Future:
Label: <unnamed-5>
Expression:
{
    3
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: TRUE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘created’
Resolved: FALSE
Unique identifier: 5f7c1083d2097786b0781bd3190c618a-5
Owner process: 5f7c1083d2097786b0781bd3190c618a
Class: ‘Future’, ‘environment’
Value: <not collected>
Conditions captured: <none>

$d
Future:
Label: <unnamed-6>
Expression:
{
    4
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: TRUE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘created’
Resolved: FALSE
Unique identifier: 5f7c1083d2097786b0781bd3190c618a-6
Owner process: 5f7c1083d2097786b0781bd3190c618a
Class: ‘Future’, ‘environment’
Value: <not collected>
Conditions captured: <none>


> stopifnot(all(sapply(fsD, FUN = inherits, "Future")))

> stopifnot(!identical(fsD, fs))

> message("*** futureOf() with listenv - futures ... DONE")
*** futureOf() with listenv - futures ... DONE

> message("*** futureOf() with listenv - exceptions ...")
*** futureOf() with listenv - exceptions ...

> res <- tryCatch(futureOf(x[[0]], mustExist = FALSE), 
+     error = identity)

> stopifnot(inherits(res, "error"))

> res <- tryCatch(futureOf(x[[0]], mustExist = TRUE), 
+     error = identity)

> stopifnot(inherits(res, "error"))

> stopifnot(is.na(futureOf(x[[10]], mustExist = FALSE)))

> res <- tryCatch(futureOf(x[[10]], mustExist = TRUE), 
+     error = identity)
[08:08:19.350] ERROR: No such future variable: x[[10]]

> stopifnot(inherits(res, "error"))

> res <- tryCatch(futureOf(x[[1 + (0+2i)]], mustExist = TRUE), 
+     error = identity)

> stopifnot(inherits(res, "error"))

> res <- tryCatch(futureOf(z[[1]], mustExist = TRUE), 
+     error = identity)

> stopifnot(inherits(res, "error"))

> message("*** futureOf() with listenv - exceptions ... DONE")
*** futureOf() with listenv - exceptions ... DONE

> message("*** futureOf() with listenv ... DONE")
*** futureOf() with listenv ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.1s, sys.self=0.004s, elapsed=0.1s, user.child=0.001s, sys.child=0.004s
Test ‘futureOf_with_listenv’ ... success
> 
