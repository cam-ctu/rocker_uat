
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-future.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("future")
Test ‘future’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-future.R’

> library(future)
[08:08:04.169] Option 'future.startup.script': TRUE
[08:08:04.169] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:08:04.169] Future startup scripts found: <none>

> message("*** future() ...")
*** future() ...

> message("*** future() w/ lazy = TRUE ...")
*** future() w/ lazy = TRUE ...

> f <- future({
+     42
+ }, lazy = TRUE)
[08:08:04.170] future(..., label = NULL) ...
[08:08:04.171] | lazy: TRUE
[08:08:04.171] | stdout: TRUE
[08:08:04.171] | conditions: [n=1] ‘condition’
[08:08:04.171] | gc: FALSE
[08:08:04.171] | earlySignal: FALSE
[08:08:04.172] | getGlobalsAndPackages() ...
[08:08:04.172] | : Searching for globals ...
[08:08:04.184] | : . globals found: [1] ‘{’
[08:08:04.184] | : Searching for globals ... done
[08:08:04.184] | : Resolving globals: FALSE
[08:08:04.184] | : Search for packages associated with the globals ...
[08:08:04.184] | : . Packages associated with globals: [1] ‘base’
[08:08:04.185] | : . Packages: [1] ‘base’
[08:08:04.185] | : Search for packages associated with the globals ... done
[08:08:04.185] | : Packages after dropping 'base': [0] 
[08:08:04.185] | : globals: [0] 
[08:08:04.185] | : packages: [0] 
[08:08:04.185] | getGlobalsAndPackages() ... done
[08:08:04.186] future(..., label = NULL) ... done

> print(resolved(f))
[08:08:04.186] resolved() for Future (<unnamed-1>) ...
[08:08:04.186] | state: ‘created’
[08:08:04.186] | run: TRUE
[08:08:04.186] | run() ...
[08:08:04.187] | : run() for ‘Future’ (<unnamed-1>) ...
[08:08:04.187] | : . state: ‘created’
[08:08:04.187] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.187] | : . ' plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:04.187] | : . ' , function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.187] | : . ' ,  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.187] | : . ' ,  - attr(*, "init")= logi TRUE
[08:08:04.187] | : . ' ,  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.187] | : . ' ,   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.187] | : . ' ,  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.187] | : . ' ,  - attr(*, "call")= language plan(sequential)
[08:08:04.191] | : . ' , init: TRUE
[08:08:04.192] | : . ' , makeFutureBackend(<sequential>) ...
[08:08:04.192] | : . ' , ; Backend function: <‘NULL’>
[08:08:04.192] | : . ' , ; Evaluator tweak arguments: [n=0]
[08:08:04.192] | : . ' , ;  list()
[08:08:04.192] | : . ' , ; Evaluator formal arguments: [n=2]
[08:08:04.192] | : . ' , ;  list()
[08:08:04.193] | : . ' , ; Backend factory arguments: [n=2]
[08:08:04.193] | : . ' , ; Dotted pair list of 2
[08:08:04.193] | : . ' , ;  $ gc         : logi FALSE
[08:08:04.193] | : . ' , ;  $ earlySignal: logi FALSE
[08:08:04.194] | : . ' , ; Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:04.194] | : . ' , makeFutureBackend(<sequential>) ... done
[08:08:04.194] | : . ' plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:04.194] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.194] | : . Using SequentialFutureBackend ...
[08:08:04.194] | : . ' Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:04.195] | : . ' Launching futures ...
[08:08:04.195] | : . ' , launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:04.195] | : . ' , ; getFutureData() ...
[08:08:04.195] | : . ' , ; ` getFutureCore() ...
[08:08:04.195] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:04.195] | : . ' , ; ` getFutureCore() ... done
[08:08:04.196] | : . ' , ; ` getFutureCapture() ...
[08:08:04.196] | : . ' , ; ` getFutureCapture() ... done
[08:08:04.196] | : . ' , ; ` getFutureContext() ...
[08:08:04.196] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.196] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:04.196] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.196] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:04.196] | : . ' , ; ` getFutureContext() ... done
[08:08:04.197] | : . ' , ; getFutureData() ... done
[08:08:04.199] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.199] | : . ' , ; ` Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:04.199] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.200] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.200] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.200] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:04.200] | : . ' , ; ` | : New stack:
[08:08:04.200] | : . ' , ; ` | : List of 1
[08:08:04.200] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.200] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.200] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:04.200] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.200] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.200] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.200] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.200] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.203] | : . ' , ; ` | : Old stack:
[08:08:04.203] | : . ' , ; ` | : List of 1
[08:08:04.203] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.203] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.203] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.203] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.203] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.203] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.203] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:04.203] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5566103e78c0> 
[08:08:04.203] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.203] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.203] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.206] | : . ' , ; ` | : Not identical
[08:08:04.206] | : . ' , ; ` | : all.equal() for future ...
[08:08:04.206] | : . ' , ; ` | : . List of 2
[08:08:04.206] | : . ' , ; ` | : .  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.206] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.206] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:08:04.206] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.206] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.206] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.206] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.206] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.206] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.206] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:04.206] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.206] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.206] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.206] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:04.206] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5566103e78c0> 
[08:08:04.206] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.206] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.213] | : . ' , ; ` | : all.equal() for future ... done
[08:08:04.213] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:04.213] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:04.213] | : . ' , ; ` | List of future strategies:
[08:08:04.213] | : . ' , ; ` | 1. sequential:
[08:08:04.213] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:04.213] | : . ' , ; ` |    - tweaked: FALSE
[08:08:04.213] | : . ' , ; ` |    - call: plan(sequential)
[08:08:04.214] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.214] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.216] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.216] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.217] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.217] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:08:04.217] | : . ' , ; ` | : . New stack:
[08:08:04.217] | : . ' , ; ` | : . List of 1
[08:08:04.217] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.217] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.217] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:04.217] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.217] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.217] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.217] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:04.217] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5566103e78c0> 
[08:08:04.217] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.217] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.217] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.220] | : . ' , ; ` | : . Old stack:
[08:08:04.220] | : . ' , ; ` | : . List of 1
[08:08:04.220] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.220] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.220] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:04.220] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.220] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.220] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.220] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:04.220] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5566103e78c0> 
[08:08:04.220] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.220] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.220] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.223] | : . ' , ; ` | : . Identical
[08:08:04.223] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:08:04.223] | : . ' , ; ` | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:04.224] | : . ' , ; ` | : List of future strategies:
[08:08:04.224] | : . ' , ; ` | : 1. sequential:
[08:08:04.224] | : . ' , ; ` | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:04.224] | : . ' , ; ` | :    - tweaked: FALSE
[08:08:04.224] | : . ' , ; ` | :    - call: plan(sequential)
[08:08:04.224] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.224] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.224] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.227] | : . ' , ; SequentialFuture started (and completed)
[08:08:04.228] | : . ' , ; signalConditions() ...
[08:08:04.228] | : . ' , ; ` include = ‘immediateCondition’
[08:08:04.228] | : . ' , ; ` exclude = 
[08:08:04.228] | : . ' , ; ` resignal = FALSE
[08:08:04.228] | : . ' , ; ` Number of conditions: 6
[08:08:04.228] | : . ' , ; `  int 6
[08:08:04.228] | : . ' , ; ` Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.229] | : . ' , ; ` Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.229] | : . ' , ; ` Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.229] | : . ' , ; ` Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.229] | : . ' , ; ` Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.229] | : . ' , ; ` Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.229] | : . ' , ; signalConditions() ... done
[08:08:04.229] | : . ' , launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:04.229] | : . ' Launching futures ... done
[08:08:04.230] | : . ' Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:04.230] | : . Using SequentialFutureBackend ... done
[08:08:04.230] | : run() for ‘Future’ (<unnamed-1>) ... done
[08:08:04.230] | run() ... done
[08:08:04.230] | resolved() ...
[08:08:04.230] | : resolved() for SequentialFuture (<unnamed-1>) ...
[08:08:04.230] | : . state: ‘finished’
[08:08:04.230] | : . run: TRUE
[08:08:04.230] | : . result: ‘FutureResult’
[08:08:04.230] | : resolved() for SequentialFuture (<unnamed-1>) ... done
[08:08:04.231] | : resolved: TRUE
[08:08:04.231] | resolved() ... done
[08:08:04.231] resolved() for Future (<unnamed-1>) ... done
[1] TRUE

> y <- value(f)
[08:08:04.231] value() for SequentialFuture (<unnamed-1>) ...
[08:08:04.231] | signalConditions() ...
[08:08:04.231] | : include = ‘immediateCondition’
[08:08:04.232] | : exclude = 
[08:08:04.232] | : resignal = FALSE
[08:08:04.232] | : Number of conditions: 6
[08:08:04.232] | :  int 6
[08:08:04.232] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.233] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.233] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.234] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.234] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.234] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.234] | signalConditions() ... done
[08:08:04.234] | relay stdout ...
[08:08:04.234] | relay stdout ... done
[08:08:04.234] | check for misuse ...
[08:08:04.234] | check for misuse ... done
[08:08:04.234] | relay conditions ...
[08:08:04.234] | : Future state: ‘finished’
[08:08:04.235] | : signalConditions() ...
[08:08:04.235] | : . include = ‘condition’
[08:08:04.235] | : . exclude = ‘immediateCondition’
[08:08:04.235] | : . resignal = TRUE
[08:08:04.235] | : . Number of conditions: 6
[08:08:04.235] | : .  int 6
[08:08:04.235] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.236] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.198] | : . ' , ; attachPackages() ...
[08:08:04.236] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.236] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.198] | : . ' , ; ` packages: [n=1] ‘future’
[08:08:04.236] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.236] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.198] | : . ' , ; attachPackages() ... done
[08:08:04.236] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.236] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.198] | : . ' , ; attachPackages() ...
[08:08:04.236] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.236] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.198] | : . ' , ; ` packages: [n=0] 
[08:08:04.237] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.237] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.199] | : . ' , ; attachPackages() ... done
[08:08:04.237] | : signalConditions() ... done
[08:08:04.237] | relay conditions ... done
[08:08:04.237] value() for SequentialFuture (<unnamed-1>) ... done

> print(y)
[1] 42

> stopifnot(y == 42)

> message("*** future() w/ lazy = TRUE ... DONE")
*** future() w/ lazy = TRUE ... DONE

> message("*** future() w/ lazy = TRUE in local() ...")
*** future() w/ lazy = TRUE in local() ...

> local({
+     a <- 42
+     f <- future({
+         a
+     }, lazy = TRUE)
+     a <- 0
+     y <- value(f)
+     print(y)
+     stopifnot(y == 42) .... [TRUNCATED] 
[08:08:04.238] future(..., label = NULL) ...
[08:08:04.238] | lazy: TRUE
[08:08:04.238] | stdout: TRUE
[08:08:04.238] | conditions: [n=1] ‘condition’
[08:08:04.238] | gc: FALSE
[08:08:04.238] | earlySignal: FALSE
[08:08:04.238] | getGlobalsAndPackages() ...
[08:08:04.238] | : Searching for globals ...
[08:08:04.241] | : . globals found: [2] ‘{’, ‘a’
[08:08:04.241] | : Searching for globals ... done
[08:08:04.242] | : Resolving globals: FALSE
[08:08:04.242] | : Search for packages associated with the globals ...
[08:08:04.242] | : . Packages associated with globals: [1] ‘base’
[08:08:04.242] | : . Packages: [1] ‘base’
[08:08:04.242] | : Search for packages associated with the globals ... done
[08:08:04.242] | : Packages after dropping 'base': [0] 
[08:08:04.243] | : globals: [1] ‘a’
[08:08:04.243] | : packages: [0] 
[08:08:04.243] | getGlobalsAndPackages() ... done
[08:08:04.243] future(..., label = NULL) ... done
[08:08:04.243] value() for Future (<unnamed-2>) ...
[08:08:04.243] | run() for ‘Future’ (<unnamed-2>) ...
[08:08:04.243] | : state: ‘created’
[08:08:04.243] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.243] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.244] | : Using SequentialFutureBackend ...
[08:08:04.244] | : . Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:08:04.244] | : . Launching futures ...
[08:08:04.244] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:04.244] | : . ' , getFutureData() ...
[08:08:04.244] | : . ' , ; getFutureCore() ...
[08:08:04.244] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:04.244] | : . ' , ; getFutureCore() ... done
[08:08:04.244] | : . ' , ; getFutureCapture() ...
[08:08:04.244] | : . ' , ; getFutureCapture() ... done
[08:08:04.245] | : . ' , ; getFutureContext() ...
[08:08:04.245] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.245] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:04.245] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.245] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:04.245] | : . ' , ; getFutureContext() ... done
[08:08:04.245] | : . ' , getFutureData() ... done
[08:08:04.246] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.247] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:04.247] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.247] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.247] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.247] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:04.247] | : . ' , ; ` | New stack:
[08:08:04.247] | : . ' , ; ` | List of 1
[08:08:04.247] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.247] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.247] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:04.247] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.247] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.247] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.247] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.247] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.250] | : . ' , ; ` | Old stack:
[08:08:04.250] | : . ' , ; ` | List of 1
[08:08:04.250] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.250] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.250] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:04.250] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.250] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.250] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.250] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:04.250] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5566103e78c0> 
[08:08:04.250] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.250] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.250] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.254] | : . ' , ; ` | Not identical
[08:08:04.254] | : . ' , ; ` | all.equal() for future ...
[08:08:04.254] | : . ' , ; ` | : List of 2
[08:08:04.254] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.254] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.254] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:04.254] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.254] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.254] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.254] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.254] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.254] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.254] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.254] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.254] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.254] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.254] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:04.254] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5566103e78c0> 
[08:08:04.254] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.254] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.259] | : . ' , ; ` | all.equal() for future ... done
[08:08:04.259] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:04.259] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:04.259] | : . ' , ; ` List of future strategies:
[08:08:04.259] | : . ' , ; ` 1. sequential:
[08:08:04.259] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:04.259] | : . ' , ; `    - tweaked: FALSE
[08:08:04.259] | : . ' , ; `    - call: plan(sequential)
[08:08:04.260] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.260] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.260] | : . ' , assign_globals() ...
[08:08:04.260] | : . ' , List of 1
[08:08:04.260] | : . ' ,  $ a: int 42
[08:08:04.260] | : . ' ,  - attr(*, "where")=List of 1
[08:08:04.260] | : . ' ,   ..$ a:<environment: 0x55660e8726e8> 
[08:08:04.260] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:04.260] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:08:04.260] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:04.260] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:04.263] | : . ' , - copied ‘a’ to environment
[08:08:04.263] | : . ' , assign_globals() ... done
[08:08:04.264] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.264] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.264] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.264] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:04.265] | : . ' , ; ` | : New stack:
[08:08:04.265] | : . ' , ; ` | : List of 1
[08:08:04.265] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.265] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.265] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.265] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.265] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.265] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.265] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:04.265] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5566103e78c0> 
[08:08:04.265] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.265] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.265] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.268] | : . ' , ; ` | : Old stack:
[08:08:04.268] | : . ' , ; ` | : List of 1
[08:08:04.268] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.268] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.268] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.268] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.268] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.268] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.268] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:04.268] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5566103e78c0> 
[08:08:04.268] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.268] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.268] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.271] | : . ' , ; ` | : Identical
[08:08:04.271] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:04.271] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:04.271] | : . ' , ; ` | List of future strategies:
[08:08:04.271] | : . ' , ; ` | 1. sequential:
[08:08:04.271] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:04.271] | : . ' , ; ` |    - tweaked: FALSE
[08:08:04.271] | : . ' , ; ` |    - call: plan(sequential)
[08:08:04.272] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.272] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.272] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.272] | : . ' , SequentialFuture started (and completed)
[08:08:04.272] | : . ' , signalConditions() ...
[08:08:04.272] | : . ' , ; include = ‘immediateCondition’
[08:08:04.272] | : . ' , ; exclude = 
[08:08:04.272] | : . ' , ; resignal = FALSE
[08:08:04.273] | : . ' , ; Number of conditions: 6
[08:08:04.273] | : . ' , ;  int 6
[08:08:04.274] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.274] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.274] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.274] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.274] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.274] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.274] | : . ' , signalConditions() ... done
[08:08:04.274] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:04.275] | : . Launching futures ... done
[08:08:04.275] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:04.275] | : Using SequentialFutureBackend ... done
[08:08:04.275] | run() for ‘Future’ (<unnamed-2>) ... done
[08:08:04.275] | signalConditions() ...
[08:08:04.275] | : include = ‘immediateCondition’
[08:08:04.275] | : exclude = 
[08:08:04.275] | : resignal = FALSE
[08:08:04.275] | : Number of conditions: 6
[08:08:04.275] | :  int 6
[08:08:04.276] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.276] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.276] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.276] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.276] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.276] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.276] | signalConditions() ... done
[08:08:04.277] | relay stdout ...
[08:08:04.277] | relay stdout ... done
[08:08:04.277] | check for misuse ...
[08:08:04.277] | check for misuse ... done
[08:08:04.277] | relay conditions ...
[08:08:04.277] | : Future state: ‘finished’
[08:08:04.277] | : signalConditions() ...
[08:08:04.277] | : . include = ‘condition’
[08:08:04.277] | : . exclude = ‘immediateCondition’
[08:08:04.277] | : . resignal = TRUE
[08:08:04.278] | : . Number of conditions: 6
[08:08:04.278] | : .  int 6
[08:08:04.278] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.278] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.245] | : . ' , attachPackages() ...
[08:08:04.278] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.278] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.246] | : . ' , ; packages: [n=1] ‘future’
[08:08:04.278] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.279] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.246] | : . ' , attachPackages() ... done
[08:08:04.279] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.279] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.246] | : . ' , attachPackages() ...
[08:08:04.279] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.279] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.246] | : . ' , ; packages: [n=0] 
[08:08:04.279] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.279] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.246] | : . ' , attachPackages() ... done
[08:08:04.279] | : signalConditions() ... done
[08:08:04.279] | relay conditions ... done
[08:08:04.280] value() for Future (<unnamed-2>) ... done
[1] 42

> message("*** future() w/ lazy = TRUE in local() ... DONE")
*** future() w/ lazy = TRUE in local() ... DONE

> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...

> f <- future(42, gc = TRUE, lazy = TRUE)
[08:08:04.280] future(..., label = NULL) ...
[08:08:04.280] | lazy: TRUE
[08:08:04.280] | stdout: TRUE
[08:08:04.280] | conditions: [n=1] ‘condition’
[08:08:04.280] | gc: TRUE
[08:08:04.280] | earlySignal: FALSE
[08:08:04.281] | getGlobalsAndPackages() ...
[08:08:04.281] | : Searching for globals ...
[08:08:04.282] | : . globals found: [0] 
[08:08:04.282] | : Searching for globals ... done
[08:08:04.282] | : globals: [0] <none>
[08:08:04.282] | : packages: [0] <none>
[08:08:04.282] | getGlobalsAndPackages() ... done
[08:08:04.282] future(..., label = NULL) ... done

> print(f)
Future:
Label: <unnamed-3>
Expression:
[1] 42
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: TRUE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘created’
Resolved: FALSE
Unique identifier: ce7a737d2fb10bf595b79e5cb0851428-3
Owner process: ce7a737d2fb10bf595b79e5cb0851428
Class: ‘Future’, ‘environment’
Value: <not collected>
Conditions captured: <none>

> y <- value(f)
[08:08:04.283] value() for Future (<unnamed-3>) ...
[08:08:04.283] | run() for ‘Future’ (<unnamed-3>) ...
[08:08:04.283] | : state: ‘created’
[08:08:04.283] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.284] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.284] | : Using SequentialFutureBackend ...
[08:08:04.284] | : . Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:08:04.284] | : . Launching futures ...
[08:08:04.284] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:04.284] | : . ' , getFutureData() ...
[08:08:04.284] | : . ' , ; getFutureCore() ...
[08:08:04.284] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:04.284] | : . ' , ; getFutureCore() ... done
[08:08:04.284] | : . ' , ; getFutureCapture() ...
[08:08:04.285] | : . ' , ; getFutureCapture() ... done
[08:08:04.285] | : . ' , ; getFutureContext() ...
[08:08:04.285] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.285] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:04.285] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.285] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:04.285] | : . ' , ; getFutureContext() ... done
[08:08:04.285] | : . ' , getFutureData() ... done
[08:08:04.286] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.287] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:04.287] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.287] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.287] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.287] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:04.287] | : . ' , ; ` | New stack:
[08:08:04.287] | : . ' , ; ` | List of 1
[08:08:04.287] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.287] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.287] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:04.287] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.287] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.287] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.287] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.287] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.290] | : . ' , ; ` | Old stack:
[08:08:04.290] | : . ' , ; ` | List of 1
[08:08:04.290] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.290] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.290] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:04.290] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.290] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.290] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.290] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:04.290] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5566103e78c0> 
[08:08:04.290] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.290] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.290] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.294] | : . ' , ; ` | Not identical
[08:08:04.294] | : . ' , ; ` | all.equal() for future ...
[08:08:04.294] | : . ' , ; ` | : List of 2
[08:08:04.294] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.294] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.294] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:04.294] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.294] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.294] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.294] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.294] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.294] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.294] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.294] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.294] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.294] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.294] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:04.294] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5566103e78c0> 
[08:08:04.294] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.294] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.299] | : . ' , ; ` | all.equal() for future ... done
[08:08:04.299] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:04.299] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:04.299] | : . ' , ; ` List of future strategies:
[08:08:04.299] | : . ' , ; ` 1. sequential:
[08:08:04.299] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:04.299] | : . ' , ; `    - tweaked: FALSE
[08:08:04.299] | : . ' , ; `    - call: plan(sequential)
[08:08:04.300] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.300] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.301] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.301] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.301] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.301] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:04.301] | : . ' , ; ` | : New stack:
[08:08:04.302] | : . ' , ; ` | : List of 1
[08:08:04.302] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.302] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.302] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.302] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.302] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.302] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.302] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:04.302] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5566103e78c0> 
[08:08:04.302] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.302] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.302] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.305] | : . ' , ; ` | : Old stack:
[08:08:04.305] | : . ' , ; ` | : List of 1
[08:08:04.305] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.305] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.305] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.305] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.305] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.305] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.305] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:04.305] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5566103e78c0> 
[08:08:04.305] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.305] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.305] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.308] | : . ' , ; ` | : Identical
[08:08:04.308] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:04.308] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:04.308] | : . ' , ; ` | List of future strategies:
[08:08:04.308] | : . ' , ; ` | 1. sequential:
[08:08:04.308] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:04.308] | : . ' , ; ` |    - tweaked: FALSE
[08:08:04.308] | : . ' , ; ` |    - call: plan(sequential)
[08:08:04.308] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.309] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.309] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.309] | : . ' , SequentialFuture started (and completed)
[08:08:04.309] | : . ' , signalConditions() ...
[08:08:04.309] | : . ' , ; include = ‘immediateCondition’
[08:08:04.309] | : . ' , ; exclude = 
[08:08:04.309] | : . ' , ; resignal = FALSE
[08:08:04.309] | : . ' , ; Number of conditions: 6
[08:08:04.310] | : . ' , ;  int 6
[08:08:04.310] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.310] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.310] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.310] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.310] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.310] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.311] | : . ' , signalConditions() ... done
[08:08:04.311] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:04.311] | : . Launching futures ... done
[08:08:04.311] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:04.311] | : Using SequentialFutureBackend ... done
[08:08:04.311] | run() for ‘Future’ (<unnamed-3>) ... done
[08:08:04.311] | signalConditions() ...
[08:08:04.311] | : include = ‘immediateCondition’
[08:08:04.311] | : exclude = 
[08:08:04.312] | : resignal = FALSE
[08:08:04.312] | : Number of conditions: 6
[08:08:04.312] | :  int 6
[08:08:04.312] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.313] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.314] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.314] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.314] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.314] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.314] | signalConditions() ... done
[08:08:04.314] | relay stdout ...
[08:08:04.314] | relay stdout ... done
[08:08:04.314] | check for misuse ...
[08:08:04.314] | check for misuse ... done
[08:08:04.314] | relay conditions ...
[08:08:04.315] | : Future state: ‘finished’
[08:08:04.315] | : signalConditions() ...
[08:08:04.315] | : . include = ‘condition’
[08:08:04.315] | : . exclude = ‘immediateCondition’
[08:08:04.315] | : . resignal = TRUE
[08:08:04.315] | : . Number of conditions: 6
[08:08:04.315] | : .  int 6
[08:08:04.316] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.316] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.286] | : . ' , attachPackages() ...
[08:08:04.316] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.316] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.286] | : . ' , ; packages: [n=1] ‘future’
[08:08:04.316] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.316] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.286] | : . ' , attachPackages() ... done
[08:08:04.316] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.316] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.286] | : . ' , attachPackages() ...
[08:08:04.317] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.317] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.286] | : . ' , ; packages: [n=0] 
[08:08:04.317] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.317] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.286] | : . ' , attachPackages() ... done
[08:08:04.317] | : signalConditions() ... done
[08:08:04.317] | relay conditions ... done
[08:08:04.317] value() for Future (<unnamed-3>) ... done

> print(y)
[1] 42

> stopifnot(y == 42)

> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE

> message("*** future() ... DONE")
*** future() ... DONE

> message("*** future() ...")
*** future() ...

> f <- future({
+     42
+ }, lazy = TRUE)
[08:08:04.318] future(..., label = NULL) ...
[08:08:04.318] | lazy: TRUE
[08:08:04.318] | stdout: TRUE
[08:08:04.318] | conditions: [n=1] ‘condition’
[08:08:04.318] | gc: FALSE
[08:08:04.318] | earlySignal: FALSE
[08:08:04.318] | getGlobalsAndPackages() ...
[08:08:04.319] | : Searching for globals ...
[08:08:04.321] | : . globals found: [1] ‘{’
[08:08:04.322] | : Searching for globals ... done
[08:08:04.322] | : Resolving globals: FALSE
[08:08:04.322] | : Search for packages associated with the globals ...
[08:08:04.322] | : . Packages associated with globals: [1] ‘base’
[08:08:04.322] | : . Packages: [1] ‘base’
[08:08:04.322] | : Search for packages associated with the globals ... done
[08:08:04.322] | : Packages after dropping 'base': [0] 
[08:08:04.322] | : globals: [0] 
[08:08:04.323] | : packages: [0] 
[08:08:04.323] | getGlobalsAndPackages() ... done
[08:08:04.323] future(..., label = NULL) ... done

> print(resolved(f))
[08:08:04.323] resolved() for Future (<unnamed-4>) ...
[08:08:04.323] | state: ‘created’
[08:08:04.323] | run: TRUE
[08:08:04.323] | run() ...
[08:08:04.323] | : run() for ‘Future’ (<unnamed-4>) ...
[08:08:04.324] | : . state: ‘created’
[08:08:04.324] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.324] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.324] | : . Using SequentialFutureBackend ...
[08:08:04.324] | : . ' Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:08:04.324] | : . ' Launching futures ...
[08:08:04.324] | : . ' , launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:04.324] | : . ' , ; getFutureData() ...
[08:08:04.324] | : . ' , ; ` getFutureCore() ...
[08:08:04.324] | : . ' , ; ` | Packages needed by the future expression (n = 0): <none>
[08:08:04.325] | : . ' , ; ` getFutureCore() ... done
[08:08:04.325] | : . ' , ; ` getFutureCapture() ...
[08:08:04.325] | : . ' , ; ` getFutureCapture() ... done
[08:08:04.325] | : . ' , ; ` getFutureContext() ...
[08:08:04.325] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.325] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:08:04.325] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.325] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:08:04.325] | : . ' , ; ` getFutureContext() ... done
[08:08:04.326] | : . ' , ; getFutureData() ... done
[08:08:04.327] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.327] | : . ' , ; ` Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:04.327] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.327] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.327] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.327] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:04.328] | : . ' , ; ` | : New stack:
[08:08:04.328] | : . ' , ; ` | : List of 1
[08:08:04.328] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.328] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.328] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:04.328] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.328] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.328] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.328] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.328] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.330] | : . ' , ; ` | : Old stack:
[08:08:04.330] | : . ' , ; ` | : List of 1
[08:08:04.330] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.330] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.330] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.330] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.330] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.330] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.330] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:04.330] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5566103e78c0> 
[08:08:04.330] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.330] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.330] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.334] | : . ' , ; ` | : Not identical
[08:08:04.335] | : . ' , ; ` | : all.equal() for future ...
[08:08:04.335] | : . ' , ; ` | : . List of 2
[08:08:04.335] | : . ' , ; ` | : .  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.335] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.335] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:08:04.335] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.335] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.335] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.335] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.335] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.335] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.335] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:04.335] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.335] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.335] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.335] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:04.335] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5566103e78c0> 
[08:08:04.335] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.335] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.340] | : . ' , ; ` | : all.equal() for future ... done
[08:08:04.340] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:04.340] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:04.340] | : . ' , ; ` | List of future strategies:
[08:08:04.340] | : . ' , ; ` | 1. sequential:
[08:08:04.340] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:04.340] | : . ' , ; ` |    - tweaked: FALSE
[08:08:04.340] | : . ' , ; ` |    - call: plan(sequential)
[08:08:04.341] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.341] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.342] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.342] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.342] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.342] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:08:04.343] | : . ' , ; ` | : . New stack:
[08:08:04.343] | : . ' , ; ` | : . List of 1
[08:08:04.343] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.343] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.343] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:04.343] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.343] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.343] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.343] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:04.343] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5566103e78c0> 
[08:08:04.343] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.343] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.343] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.346] | : . ' , ; ` | : . Old stack:
[08:08:04.346] | : . ' , ; ` | : . List of 1
[08:08:04.346] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.346] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.346] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:04.346] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.346] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.346] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.346] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:04.346] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5566103e78c0> 
[08:08:04.346] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.346] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.346] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.349] | : . ' , ; ` | : . Identical
[08:08:04.349] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:08:04.349] | : . ' , ; ` | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:04.349] | : . ' , ; ` | : List of future strategies:
[08:08:04.349] | : . ' , ; ` | : 1. sequential:
[08:08:04.349] | : . ' , ; ` | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:04.349] | : . ' , ; ` | :    - tweaked: FALSE
[08:08:04.349] | : . ' , ; ` | :    - call: plan(sequential)
[08:08:04.350] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.350] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.350] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.350] | : . ' , ; SequentialFuture started (and completed)
[08:08:04.350] | : . ' , ; signalConditions() ...
[08:08:04.350] | : . ' , ; ` include = ‘immediateCondition’
[08:08:04.350] | : . ' , ; ` exclude = 
[08:08:04.350] | : . ' , ; ` resignal = FALSE
[08:08:04.351] | : . ' , ; ` Number of conditions: 6
[08:08:04.351] | : . ' , ; `  int 6
[08:08:04.351] | : . ' , ; ` Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.351] | : . ' , ; ` Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.351] | : . ' , ; ` Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.351] | : . ' , ; ` Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.351] | : . ' , ; ` Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.352] | : . ' , ; ` Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.352] | : . ' , ; signalConditions() ... done
[08:08:04.352] | : . ' , launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:04.352] | : . ' Launching futures ... done
[08:08:04.352] | : . ' Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:04.353] | : . Using SequentialFutureBackend ... done
[08:08:04.353] | : run() for ‘Future’ (<unnamed-4>) ... done
[08:08:04.353] | run() ... done
[08:08:04.353] | resolved() ...
[08:08:04.354] | : resolved() for SequentialFuture (<unnamed-4>) ...
[08:08:04.354] | : . state: ‘finished’
[08:08:04.354] | : . run: TRUE
[08:08:04.354] | : . result: ‘FutureResult’
[08:08:04.354] | : resolved() for SequentialFuture (<unnamed-4>) ... done
[08:08:04.354] | : resolved: TRUE
[08:08:04.354] | resolved() ... done
[08:08:04.354] resolved() for Future (<unnamed-4>) ... done
[1] TRUE

> y <- value(f)
[08:08:04.354] value() for SequentialFuture (<unnamed-4>) ...
[08:08:04.355] | signalConditions() ...
[08:08:04.355] | : include = ‘immediateCondition’
[08:08:04.355] | : exclude = 
[08:08:04.355] | : resignal = FALSE
[08:08:04.355] | : Number of conditions: 6
[08:08:04.355] | :  int 6
[08:08:04.355] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.356] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.356] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.356] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.356] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.356] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.356] | signalConditions() ... done
[08:08:04.356] | relay stdout ...
[08:08:04.356] | relay stdout ... done
[08:08:04.356] | check for misuse ...
[08:08:04.357] | check for misuse ... done
[08:08:04.357] | relay conditions ...
[08:08:04.357] | : Future state: ‘finished’
[08:08:04.357] | : signalConditions() ...
[08:08:04.357] | : . include = ‘condition’
[08:08:04.357] | : . exclude = ‘immediateCondition’
[08:08:04.357] | : . resignal = TRUE
[08:08:04.357] | : . Number of conditions: 6
[08:08:04.357] | : .  int 6
[08:08:04.358] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.358] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.326] | : . ' , ; attachPackages() ...
[08:08:04.358] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.358] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.326] | : . ' , ; ` packages: [n=1] ‘future’
[08:08:04.358] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.358] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.326] | : . ' , ; attachPackages() ... done
[08:08:04.358] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.358] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.326] | : . ' , ; attachPackages() ...
[08:08:04.359] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.359] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.326] | : . ' , ; ` packages: [n=0] 
[08:08:04.359] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.359] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.326] | : . ' , ; attachPackages() ... done
[08:08:04.359] | : signalConditions() ... done
[08:08:04.359] | relay conditions ... done
[08:08:04.359] value() for SequentialFuture (<unnamed-4>) ... done

> print(y)
[1] 42

> stopifnot(y == 42)

> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...

> f <- future(42, gc = TRUE, lazy = TRUE)
[08:08:04.360] future(..., label = NULL) ...
[08:08:04.360] | lazy: TRUE
[08:08:04.360] | stdout: TRUE
[08:08:04.360] | conditions: [n=1] ‘condition’
[08:08:04.360] | gc: TRUE
[08:08:04.360] | earlySignal: FALSE
[08:08:04.360] | getGlobalsAndPackages() ...
[08:08:04.360] | : Searching for globals ...
[08:08:04.361] | : . globals found: [0] 
[08:08:04.361] | : Searching for globals ... done
[08:08:04.362] | : globals: [0] <none>
[08:08:04.362] | : packages: [0] <none>
[08:08:04.362] | getGlobalsAndPackages() ... done
[08:08:04.362] future(..., label = NULL) ... done

> print(f)
Future:
Label: <unnamed-5>
Expression:
[1] 42
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: TRUE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘created’
Resolved: FALSE
Unique identifier: ce7a737d2fb10bf595b79e5cb0851428-5
Owner process: ce7a737d2fb10bf595b79e5cb0851428
Class: ‘Future’, ‘environment’
Value: <not collected>
Conditions captured: <none>

> y <- value(f)
[08:08:04.362] value() for Future (<unnamed-5>) ...
[08:08:04.363] | run() for ‘Future’ (<unnamed-5>) ...
[08:08:04.363] | : state: ‘created’
[08:08:04.363] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.363] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.363] | : Using SequentialFutureBackend ...
[08:08:04.363] | : . Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:08:04.363] | : . Launching futures ...
[08:08:04.363] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:04.363] | : . ' , getFutureData() ...
[08:08:04.364] | : . ' , ; getFutureCore() ...
[08:08:04.364] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:04.364] | : . ' , ; getFutureCore() ... done
[08:08:04.364] | : . ' , ; getFutureCapture() ...
[08:08:04.364] | : . ' , ; getFutureCapture() ... done
[08:08:04.364] | : . ' , ; getFutureContext() ...
[08:08:04.364] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.364] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:04.364] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.364] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:04.365] | : . ' , ; getFutureContext() ... done
[08:08:04.365] | : . ' , getFutureData() ... done
[08:08:04.366] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.366] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:04.366] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.366] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.366] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.367] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:04.367] | : . ' , ; ` | New stack:
[08:08:04.367] | : . ' , ; ` | List of 1
[08:08:04.367] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.367] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.367] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:04.367] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.367] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.367] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.367] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.367] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.369] | : . ' , ; ` | Old stack:
[08:08:04.369] | : . ' , ; ` | List of 1
[08:08:04.369] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.369] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.369] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:04.369] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.369] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.369] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.369] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:04.369] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5566103e78c0> 
[08:08:04.369] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.369] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.369] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.373] | : . ' , ; ` | Not identical
[08:08:04.373] | : . ' , ; ` | all.equal() for future ...
[08:08:04.373] | : . ' , ; ` | : List of 2
[08:08:04.373] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.373] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.373] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:04.373] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.373] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.373] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.373] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.373] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.373] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.373] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.373] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.373] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.373] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.373] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:04.373] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5566103e78c0> 
[08:08:04.373] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.373] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.378] | : . ' , ; ` | all.equal() for future ... done
[08:08:04.379] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:04.379] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:04.379] | : . ' , ; ` List of future strategies:
[08:08:04.379] | : . ' , ; ` 1. sequential:
[08:08:04.379] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:04.379] | : . ' , ; `    - tweaked: FALSE
[08:08:04.379] | : . ' , ; `    - call: plan(sequential)
[08:08:04.379] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.379] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.381] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.381] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.381] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.381] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:04.381] | : . ' , ; ` | : New stack:
[08:08:04.381] | : . ' , ; ` | : List of 1
[08:08:04.381] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.381] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.381] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.381] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.381] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.381] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.381] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:04.381] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5566103e78c0> 
[08:08:04.381] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.381] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.381] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.384] | : . ' , ; ` | : Old stack:
[08:08:04.384] | : . ' , ; ` | : List of 1
[08:08:04.384] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.384] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.384] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.384] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.384] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.384] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.384] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:04.384] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5566103e78c0> 
[08:08:04.384] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.384] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.384] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.387] | : . ' , ; ` | : Identical
[08:08:04.387] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:04.388] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:04.388] | : . ' , ; ` | List of future strategies:
[08:08:04.388] | : . ' , ; ` | 1. sequential:
[08:08:04.388] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:04.388] | : . ' , ; ` |    - tweaked: FALSE
[08:08:04.388] | : . ' , ; ` |    - call: plan(sequential)
[08:08:04.388] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.388] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.388] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.389] | : . ' , SequentialFuture started (and completed)
[08:08:04.389] | : . ' , signalConditions() ...
[08:08:04.389] | : . ' , ; include = ‘immediateCondition’
[08:08:04.389] | : . ' , ; exclude = 
[08:08:04.389] | : . ' , ; resignal = FALSE
[08:08:04.389] | : . ' , ; Number of conditions: 6
[08:08:04.389] | : . ' , ;  int 6
[08:08:04.390] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.390] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.390] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.390] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.390] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.390] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.390] | : . ' , signalConditions() ... done
[08:08:04.390] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:04.390] | : . Launching futures ... done
[08:08:04.390] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:04.391] | : Using SequentialFutureBackend ... done
[08:08:04.391] | run() for ‘Future’ (<unnamed-5>) ... done
[08:08:04.391] | signalConditions() ...
[08:08:04.391] | : include = ‘immediateCondition’
[08:08:04.392] | : exclude = 
[08:08:04.392] | : resignal = FALSE
[08:08:04.392] | : Number of conditions: 6
[08:08:04.392] | :  int 6
[08:08:04.393] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.393] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.393] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.393] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.393] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.393] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.393] | signalConditions() ... done
[08:08:04.393] | relay stdout ...
[08:08:04.393] | relay stdout ... done
[08:08:04.393] | check for misuse ...
[08:08:04.394] | check for misuse ... done
[08:08:04.394] | relay conditions ...
[08:08:04.394] | : Future state: ‘finished’
[08:08:04.394] | : signalConditions() ...
[08:08:04.394] | : . include = ‘condition’
[08:08:04.394] | : . exclude = ‘immediateCondition’
[08:08:04.394] | : . resignal = TRUE
[08:08:04.394] | : . Number of conditions: 6
[08:08:04.394] | : .  int 6
[08:08:04.395] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.395] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.365] | : . ' , attachPackages() ...
[08:08:04.395] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.395] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.365] | : . ' , ; packages: [n=1] ‘future’
[08:08:04.395] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.395] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.365] | : . ' , attachPackages() ... done
[08:08:04.395] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.396] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.365] | : . ' , attachPackages() ...
[08:08:04.396] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.396] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.365] | : . ' , ; packages: [n=0] 
[08:08:04.396] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.396] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.366] | : . ' , attachPackages() ... done
[08:08:04.396] | : signalConditions() ... done
[08:08:04.396] | relay conditions ... done
[08:08:04.396] value() for Future (<unnamed-5>) ... done

> print(y)
[1] 42

> stopifnot(y == 42)

> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE

> message("*** future() - exceptions ...")
*** future() - exceptions ...

> target <- list(name = "<unknown>", envir = new.env(), 
+     code = "Yo!", exists = TRUE)

> res <- tryCatch(get_future(target, mustExist = TRUE), 
+     error = identity)
[08:08:04.397] ERROR: Future (‘<unknown>’) not found in environment ‘<noname>’: ‘Yo!’

> stopifnot(inherits(res, "error"))

> message("*** future() - exceptions ... DONE")
*** future() - exceptions ... DONE

> message("*** future() ... DONE")
*** future() ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.3s, sys.self=0.008s, elapsed=0.3s, user.child=0.002s, sys.child=0.003s
Test ‘future’ ... success
> 
