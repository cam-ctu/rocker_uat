
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script incl/testme/test-future.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("future")
Test ‘future’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-future.R’

> library(future)
[10:52:41.224] Option 'future.startup.script': TRUE
[10:52:41.224] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[10:52:41.224] Future startup scripts found: <none>

> message("*** future() ...")
*** future() ...

> message("*** future() w/ lazy = TRUE ...")
*** future() w/ lazy = TRUE ...

> f <- future({
+     42
+ }, lazy = TRUE)
[10:52:41.226] getGlobalsAndPackages() ...
[10:52:41.226] |  Searching for globals ...
[10:52:41.232] |  :  globals found: [1] ‘{’
[10:52:41.232] |  Searching for globals ... DONE
[10:52:41.232] |  Resolving globals: FALSE
[10:52:41.232] |  Search for packages associated with the globals ...
[10:52:41.233] |  :  Packages associated with globals: [1] ‘base’
[10:52:41.233] |  :  Packages: [1] ‘base’
[10:52:41.233] |  Search for packages associated with the globals ... DONE
[10:52:41.233] |  Packages after dropping 'base': [0] 
[10:52:41.233] |  globals: [0] 
[10:52:41.233] |  packages: [0] 
[10:52:41.234] getGlobalsAndPackages() ... done

> print(resolved(f))
[10:52:41.234] resolved() for ‘Future’ ...
[10:52:41.234] |  state: ‘created’
[10:52:41.234] |  run: TRUE
[10:52:41.234] |  run() ...
[10:52:41.235] |  :  run() for Future (‘Future’) ...
[10:52:41.235] |  :  .  state: ‘created’
[10:52:41.235] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:41.235] |  :  .  |  makeFutureBackend(<sequential>) ...
[10:52:41.235] |  :  .  |  :  Backend function: <‘NULL’>
[10:52:41.236] |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:41.236] |  :  .  |  makeFutureBackend(<sequential>) ... done
[10:52:41.236] |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:41.236] |  :  .  Using SequentialFutureBackend ...
[10:52:41.236] |  :  .  |  Launching futures ...
[10:52:41.236] |  :  .  |  :  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:41.238] |  :  .  |  :  .  getFutureData() ...
[10:52:41.238] |  :  .  |  :  .  |  getFutureCore() ...
[10:52:41.238] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 0): <none>
[10:52:41.238] |  :  .  |  :  .  |  getFutureCore() ... done
[10:52:41.239] |  :  .  |  :  .  |  getFutureCapture() ...
[10:52:41.239] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:52:41.239] |  :  .  |  :  .  |  getFutureContext() ...
[10:52:41.239] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:41.239] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:52:41.239] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:41.239] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:52:41.239] |  :  .  |  :  .  |  getFutureContext() ... done
[10:52:41.240] |  :  .  |  :  .  getFutureData() ... done
[10:52:41.241] |  :  .  |  :  .  attachPackages() ...
[10:52:41.241] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:52:41.241] |  :  .  |  :  .  attachPackages() ... DONE
[10:52:41.241] |  :  .  |  :  .  attachPackages() ...
[10:52:41.241] |  :  .  |  :  .  |  packages: [n=0] 
[10:52:41.241] |  :  .  |  :  .  attachPackages() ... DONE
[10:52:41.242] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:41.242] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:41.242] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:41.242] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:41.242] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:41.243] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:52:41.243] |  :  .  |  :  .  |  :  .  New stack:
[10:52:41.243] |  :  .  |  :  .  |  :  .  List of 1
[10:52:41.243] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.243] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.243] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.243] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.243] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.243] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:41.243] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.246] |  :  .  |  :  .  |  :  .  Old stack:
[10:52:41.247] |  :  .  |  :  .  |  :  .  List of 1
[10:52:41.247] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.247] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.247] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.247] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.247] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.247] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:52:41.247] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55fec239bf00> 
[10:52:41.247] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.247] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.247] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.250] |  :  .  |  :  .  |  :  .  Not identical
[10:52:41.250] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:52:41.250] |  :  .  |  :  .  |  :  .  |  List of 2
[10:52:41.250] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.250] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.250] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.250] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.250] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.250] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:41.250] |  :  .  |  :  .  |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.250] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.250] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.250] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.250] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.250] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:41.250] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55fec239bf00> 
[10:52:41.250] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.250] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.255] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:52:41.255] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:52:41.255] |  :  .  |  :  .  |  :  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:41.255] |  :  .  |  :  .  |  :  List of future strategies:
[10:52:41.255] |  :  .  |  :  .  |  :  1. sequential:
[10:52:41.255] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:41.255] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:52:41.255] |  :  .  |  :  .  |  :     - call: plan(sequential)
[10:52:41.256] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:41.256] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:41.258] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:41.258] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:41.258] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:41.258] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:41.258] |  :  .  |  :  .  |  :  .  |  New stack:
[10:52:41.258] |  :  .  |  :  .  |  :  .  |  List of 1
[10:52:41.258] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.258] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.258] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.258] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.258] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.258] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:41.258] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55fec239bf00> 
[10:52:41.258] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.258] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.258] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.261] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:52:41.261] |  :  .  |  :  .  |  :  .  |  List of 1
[10:52:41.261] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.261] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.261] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.261] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.261] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.261] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:41.261] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55fec239bf00> 
[10:52:41.261] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.261] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.261] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.265] |  :  .  |  :  .  |  :  .  |  Identical
[10:52:41.266] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:41.266] |  :  .  |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:41.266] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:52:41.266] |  :  .  |  :  .  |  :  .  1. sequential:
[10:52:41.266] |  :  .  |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:41.266] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:52:41.266] |  :  .  |  :  .  |  :  .     - call: plan(sequential)
[10:52:41.266] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:41.266] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:41.266] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:41.267] |  :  .  |  :  .  SequentialFuture started (and completed)
[10:52:41.267] |  :  .  |  :  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:41.267] |  :  .  |  Launching futures ... done
[10:52:41.267] |  :  .  |  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:41.267] |  :  .  Using SequentialFutureBackend ... done
[10:52:41.267] |  :  run() for Future (‘SequentialFuture’) ... done
[10:52:41.267] |  run() ... done
[10:52:41.268] |  resolved() ...
[10:52:41.268] |  :  resolved() for ‘SequentialFuture’ ...
[10:52:41.268] |  :  .  state: ‘finished’
[10:52:41.268] |  :  .  run: TRUE
[10:52:41.268] |  :  .  result: ‘FutureResult’
[10:52:41.268] |  :  resolved() for ‘SequentialFuture’ ... done
[10:52:41.268] |  :  resolved: TRUE
[10:52:41.268] |  resolved() ... done
[10:52:41.268] resolved() for ‘SequentialFuture’ ... done
[1] TRUE

> y <- value(f)

> print(y)
[1] 42

> stopifnot(y == 42)

> message("*** future() w/ lazy = TRUE ... DONE")
*** future() w/ lazy = TRUE ... DONE

> message("*** future() w/ lazy = TRUE in local() ...")
*** future() w/ lazy = TRUE in local() ...

> local({
+     a <- 42
+     f <- future({
+         a
+     }, lazy = TRUE)
+     a <- 0
+     y <- value(f)
+     print(y)
+     stopifnot(y == 42) .... [TRUNCATED] 
[10:52:41.269] getGlobalsAndPackages() ...
[10:52:41.269] |  Searching for globals ...
[10:52:41.270] |  :  globals found: [2] ‘{’, ‘a’
[10:52:41.270] |  Searching for globals ... DONE
[10:52:41.270] |  Resolving globals: FALSE
[10:52:41.271] |  Search for packages associated with the globals ...
[10:52:41.271] |  :  Packages associated with globals: [1] ‘base’
[10:52:41.271] |  :  Packages: [1] ‘base’
[10:52:41.271] |  Search for packages associated with the globals ... DONE
[10:52:41.271] |  Packages after dropping 'base': [0] 
[10:52:41.271] |  globals: [1] ‘a’
[10:52:41.271] |  packages: [0] 
[10:52:41.272] getGlobalsAndPackages() ... done
[10:52:41.272] run() for Future (‘Future’) ...
[10:52:41.272] |  state: ‘created’
[10:52:41.272] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:41.272] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:41.272] |  Using SequentialFutureBackend ...
[10:52:41.272] |  :  Launching futures ...
[10:52:41.272] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:41.272] |  :  .  |  getFutureData() ...
[10:52:41.273] |  :  .  |  :  getFutureCore() ...
[10:52:41.273] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:41.273] |  :  .  |  :  getFutureCore() ... done
[10:52:41.273] |  :  .  |  :  getFutureCapture() ...
[10:52:41.273] |  :  .  |  :  getFutureCapture() ... done
[10:52:41.273] |  :  .  |  :  getFutureContext() ...
[10:52:41.273] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:41.273] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:41.273] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:41.273] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:41.273] |  :  .  |  :  getFutureContext() ... done
[10:52:41.274] |  :  .  |  getFutureData() ... done
[10:52:41.274] |  :  .  |  attachPackages() ...
[10:52:41.274] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:41.274] |  :  .  |  attachPackages() ... DONE
[10:52:41.274] |  :  .  |  attachPackages() ...
[10:52:41.274] |  :  .  |  :  packages: [n=0] 
[10:52:41.274] |  :  .  |  attachPackages() ... DONE
[10:52:41.275] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:41.275] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:41.275] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:41.275] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:41.275] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:41.275] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:41.275] |  :  .  |  :  .  |  New stack:
[10:52:41.275] |  :  .  |  :  .  |  List of 1
[10:52:41.275] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.275] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.275] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.275] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.275] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.275] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:41.275] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.278] |  :  .  |  :  .  |  Old stack:
[10:52:41.278] |  :  .  |  :  .  |  List of 1
[10:52:41.278] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.278] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.278] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.278] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.278] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.278] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:41.278] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55fec239bf00> 
[10:52:41.278] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.278] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.278] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.280] |  :  .  |  :  .  |  Not identical
[10:52:41.281] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:41.281] |  :  .  |  :  .  |  :  List of 2
[10:52:41.281] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.281] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.281] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.281] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.281] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.281] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:41.281] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.281] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.281] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.281] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.281] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.281] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:41.281] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55fec239bf00> 
[10:52:41.281] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.281] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.285] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:41.285] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:41.285] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:41.285] |  :  .  |  :  .  List of future strategies:
[10:52:41.285] |  :  .  |  :  .  1. sequential:
[10:52:41.285] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:41.285] |  :  .  |  :  .     - tweaked: FALSE
[10:52:41.285] |  :  .  |  :  .     - call: plan(sequential)
[10:52:41.286] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:41.286] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:41.286] |  :  .  |  assign_globals() ...
[10:52:41.286] |  :  .  |  List of 1
[10:52:41.286] |  :  .  |   $ a: int 42
[10:52:41.286] |  :  .  |   - attr(*, "where")=List of 1
[10:52:41.286] |  :  .  |    ..$ a:<environment: R_EmptyEnv> 
[10:52:41.286] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:41.286] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:52:41.286] |  :  .  |   - attr(*, "total_size")= num NA
[10:52:41.286] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:52:41.290] |  :  .  |  - copied ‘a’ to environment
[10:52:41.290] |  :  .  |  assign_globals() ... done
[10:52:41.291] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:41.292] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:41.292] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:41.292] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:41.292] |  :  .  |  :  .  |  :  New stack:
[10:52:41.292] |  :  .  |  :  .  |  :  List of 1
[10:52:41.292] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.292] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.292] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.292] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.292] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.292] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:41.292] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55fec239bf00> 
[10:52:41.292] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.292] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.292] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.295] |  :  .  |  :  .  |  :  Old stack:
[10:52:41.295] |  :  .  |  :  .  |  :  List of 1
[10:52:41.295] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.295] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.295] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.295] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.295] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.295] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:41.295] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55fec239bf00> 
[10:52:41.295] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.295] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.295] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.298] |  :  .  |  :  .  |  :  Identical
[10:52:41.298] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:41.298] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:41.298] |  :  .  |  :  .  |  List of future strategies:
[10:52:41.298] |  :  .  |  :  .  |  1. sequential:
[10:52:41.298] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:41.298] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:41.298] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:41.299] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:41.299] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:41.299] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:41.299] |  :  .  |  SequentialFuture started (and completed)
[10:52:41.299] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:41.299] |  :  Launching futures ... done
[10:52:41.299] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:41.299] |  Using SequentialFutureBackend ... done
[10:52:41.299] run() for Future (‘SequentialFuture’) ... done
[1] 42

> message("*** future() w/ lazy = TRUE in local() ... DONE")
*** future() w/ lazy = TRUE in local() ... DONE

> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...

> f <- future(42, gc = TRUE, lazy = TRUE)
[10:52:41.300] getGlobalsAndPackages() ...
[10:52:41.300] |  Searching for globals ...
[10:52:41.300] |  :  globals found: [0] 
[10:52:41.300] |  Searching for globals ... DONE
[10:52:41.301] |  globals: [0] <none>
[10:52:41.301] |  packages: [0] <none>
[10:52:41.301] getGlobalsAndPackages() ... done

> print(f)
Future:
Label: NULL
Expression:
[1] 42
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 109fa49744c5ba9d4400663ce7502b9d
Class: ‘Future’, ‘environment’

> y <- value(f)
[10:52:41.302] run() for Future (‘Future’) ...
[10:52:41.302] |  state: ‘created’
[10:52:41.302] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:41.302] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:41.302] |  Using SequentialFutureBackend ...
[10:52:41.302] |  :  Launching futures ...
[10:52:41.302] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:41.302] |  :  .  |  getFutureData() ...
[10:52:41.302] |  :  .  |  :  getFutureCore() ...
[10:52:41.302] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:41.303] |  :  .  |  :  getFutureCore() ... done
[10:52:41.303] |  :  .  |  :  getFutureCapture() ...
[10:52:41.303] |  :  .  |  :  getFutureCapture() ... done
[10:52:41.303] |  :  .  |  :  getFutureContext() ...
[10:52:41.303] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:41.303] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:41.303] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:41.303] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:41.303] |  :  .  |  :  getFutureContext() ... done
[10:52:41.303] |  :  .  |  getFutureData() ... done
[10:52:41.304] |  :  .  |  attachPackages() ...
[10:52:41.304] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:41.304] |  :  .  |  attachPackages() ... DONE
[10:52:41.304] |  :  .  |  attachPackages() ...
[10:52:41.304] |  :  .  |  :  packages: [n=0] 
[10:52:41.304] |  :  .  |  attachPackages() ... DONE
[10:52:41.304] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:41.304] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:41.305] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:41.305] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:41.305] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:41.305] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:41.305] |  :  .  |  :  .  |  New stack:
[10:52:41.305] |  :  .  |  :  .  |  List of 1
[10:52:41.305] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.305] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.305] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.305] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.305] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.305] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:41.305] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.307] |  :  .  |  :  .  |  Old stack:
[10:52:41.307] |  :  .  |  :  .  |  List of 1
[10:52:41.307] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.307] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.307] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.307] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.307] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.307] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:41.307] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55fec239bf00> 
[10:52:41.307] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.307] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.307] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.311] |  :  .  |  :  .  |  Not identical
[10:52:41.311] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:41.312] |  :  .  |  :  .  |  :  List of 2
[10:52:41.312] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.312] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.312] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.312] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.312] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.312] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:41.312] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.312] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.312] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.312] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.312] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.312] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:41.312] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55fec239bf00> 
[10:52:41.312] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.312] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.316] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:41.316] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:41.316] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:41.316] |  :  .  |  :  .  List of future strategies:
[10:52:41.316] |  :  .  |  :  .  1. sequential:
[10:52:41.316] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:41.316] |  :  .  |  :  .     - tweaked: FALSE
[10:52:41.316] |  :  .  |  :  .     - call: plan(sequential)
[10:52:41.317] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:41.317] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:41.318] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:41.318] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:41.318] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:41.318] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:41.319] |  :  .  |  :  .  |  :  New stack:
[10:52:41.319] |  :  .  |  :  .  |  :  List of 1
[10:52:41.319] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.319] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.319] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.319] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.319] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.319] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:41.319] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55fec239bf00> 
[10:52:41.319] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.319] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.319] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.321] |  :  .  |  :  .  |  :  Old stack:
[10:52:41.322] |  :  .  |  :  .  |  :  List of 1
[10:52:41.322] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.322] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.322] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.322] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.322] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.322] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:41.322] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55fec239bf00> 
[10:52:41.322] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.322] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.322] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.324] |  :  .  |  :  .  |  :  Identical
[10:52:41.324] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:41.325] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:41.325] |  :  .  |  :  .  |  List of future strategies:
[10:52:41.325] |  :  .  |  :  .  |  1. sequential:
[10:52:41.325] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:41.325] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:41.325] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:41.325] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:41.325] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:41.325] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:41.325] |  :  .  |  SequentialFuture started (and completed)
[10:52:41.326] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:41.326] |  :  Launching futures ... done
[10:52:41.326] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:41.326] |  Using SequentialFutureBackend ... done
[10:52:41.326] run() for Future (‘SequentialFuture’) ... done

> print(y)
[1] 42

> stopifnot(y == 42)

> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE

> message("*** future() ... DONE")
*** future() ... DONE

> message("*** future() ...")
*** future() ...

> f <- future({
+     42
+ }, lazy = TRUE)
[10:52:41.327] getGlobalsAndPackages() ...
[10:52:41.327] |  Searching for globals ...
[10:52:41.327] |  :  globals found: [1] ‘{’
[10:52:41.327] |  Searching for globals ... DONE
[10:52:41.328] |  Resolving globals: FALSE
[10:52:41.328] |  Search for packages associated with the globals ...
[10:52:41.328] |  :  Packages associated with globals: [1] ‘base’
[10:52:41.328] |  :  Packages: [1] ‘base’
[10:52:41.328] |  Search for packages associated with the globals ... DONE
[10:52:41.328] |  Packages after dropping 'base': [0] 
[10:52:41.328] |  globals: [0] 
[10:52:41.328] |  packages: [0] 
[10:52:41.328] getGlobalsAndPackages() ... done

> print(resolved(f))
[10:52:41.329] resolved() for ‘Future’ ...
[10:52:41.329] |  state: ‘created’
[10:52:41.329] |  run: TRUE
[10:52:41.329] |  run() ...
[10:52:41.329] |  :  run() for Future (‘Future’) ...
[10:52:41.329] |  :  .  state: ‘created’
[10:52:41.329] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:41.329] |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:41.330] |  :  .  Using SequentialFutureBackend ...
[10:52:41.330] |  :  .  |  Launching futures ...
[10:52:41.330] |  :  .  |  :  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:41.330] |  :  .  |  :  .  getFutureData() ...
[10:52:41.330] |  :  .  |  :  .  |  getFutureCore() ...
[10:52:41.330] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 0): <none>
[10:52:41.330] |  :  .  |  :  .  |  getFutureCore() ... done
[10:52:41.330] |  :  .  |  :  .  |  getFutureCapture() ...
[10:52:41.330] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:52:41.330] |  :  .  |  :  .  |  getFutureContext() ...
[10:52:41.330] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:41.331] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:52:41.331] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:41.332] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:52:41.332] |  :  .  |  :  .  |  getFutureContext() ... done
[10:52:41.332] |  :  .  |  :  .  getFutureData() ... done
[10:52:41.332] |  :  .  |  :  .  attachPackages() ...
[10:52:41.332] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:52:41.332] |  :  .  |  :  .  attachPackages() ... DONE
[10:52:41.332] |  :  .  |  :  .  attachPackages() ...
[10:52:41.332] |  :  .  |  :  .  |  packages: [n=0] 
[10:52:41.332] |  :  .  |  :  .  attachPackages() ... DONE
[10:52:41.333] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:41.333] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:41.333] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:41.333] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:41.333] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:41.334] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:52:41.334] |  :  .  |  :  .  |  :  .  New stack:
[10:52:41.334] |  :  .  |  :  .  |  :  .  List of 1
[10:52:41.334] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.334] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.334] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.334] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.334] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.334] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:41.334] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.336] |  :  .  |  :  .  |  :  .  Old stack:
[10:52:41.336] |  :  .  |  :  .  |  :  .  List of 1
[10:52:41.336] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.336] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.336] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.336] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.336] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.336] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:52:41.336] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55fec239bf00> 
[10:52:41.336] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.336] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.336] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.339] |  :  .  |  :  .  |  :  .  Not identical
[10:52:41.339] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:52:41.339] |  :  .  |  :  .  |  :  .  |  List of 2
[10:52:41.339] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.339] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.339] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.339] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.339] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.339] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:41.339] |  :  .  |  :  .  |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.339] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.339] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.339] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.339] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.339] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:41.339] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55fec239bf00> 
[10:52:41.339] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.339] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.343] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:52:41.343] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:52:41.343] |  :  .  |  :  .  |  :  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:41.343] |  :  .  |  :  .  |  :  List of future strategies:
[10:52:41.343] |  :  .  |  :  .  |  :  1. sequential:
[10:52:41.343] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:41.343] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:52:41.343] |  :  .  |  :  .  |  :     - call: plan(sequential)
[10:52:41.344] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:41.344] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:41.345] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:41.345] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:41.346] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:41.346] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:41.346] |  :  .  |  :  .  |  :  .  |  New stack:
[10:52:41.346] |  :  .  |  :  .  |  :  .  |  List of 1
[10:52:41.346] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.346] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.346] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.346] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.346] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.346] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:41.346] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55fec239bf00> 
[10:52:41.346] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.346] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.346] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.349] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:52:41.350] |  :  .  |  :  .  |  :  .  |  List of 1
[10:52:41.350] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.350] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.350] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.350] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.350] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.350] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:41.350] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55fec239bf00> 
[10:52:41.350] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.350] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.350] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.354] |  :  .  |  :  .  |  :  .  |  Identical
[10:52:41.354] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:41.354] |  :  .  |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:41.355] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:52:41.355] |  :  .  |  :  .  |  :  .  1. sequential:
[10:52:41.355] |  :  .  |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:41.355] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:52:41.355] |  :  .  |  :  .  |  :  .     - call: plan(sequential)
[10:52:41.355] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:41.355] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:41.355] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:41.355] |  :  .  |  :  .  SequentialFuture started (and completed)
[10:52:41.355] |  :  .  |  :  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:41.356] |  :  .  |  Launching futures ... done
[10:52:41.356] |  :  .  |  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:41.356] |  :  .  Using SequentialFutureBackend ... done
[10:52:41.356] |  :  run() for Future (‘SequentialFuture’) ... done
[10:52:41.356] |  run() ... done
[10:52:41.356] |  resolved() ...
[10:52:41.356] |  :  resolved() for ‘SequentialFuture’ ...
[10:52:41.356] |  :  .  state: ‘finished’
[10:52:41.356] |  :  .  run: TRUE
[10:52:41.357] |  :  .  result: ‘FutureResult’
[10:52:41.357] |  :  resolved() for ‘SequentialFuture’ ... done
[10:52:41.357] |  :  resolved: TRUE
[10:52:41.357] |  resolved() ... done
[10:52:41.357] resolved() for ‘SequentialFuture’ ... done
[1] TRUE

> y <- value(f)

> print(y)
[1] 42

> stopifnot(y == 42)

> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...

> f <- future(42, gc = TRUE, lazy = TRUE)
[10:52:41.357] getGlobalsAndPackages() ...
[10:52:41.358] |  Searching for globals ...
[10:52:41.358] |  :  globals found: [0] 
[10:52:41.358] |  Searching for globals ... DONE
[10:52:41.358] |  globals: [0] <none>
[10:52:41.358] |  packages: [0] <none>
[10:52:41.358] getGlobalsAndPackages() ... done

> print(f)
Future:
Label: NULL
Expression:
[1] 42
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 109fa49744c5ba9d4400663ce7502b9d
Class: ‘Future’, ‘environment’

> y <- value(f)
[10:52:41.359] run() for Future (‘Future’) ...
[10:52:41.359] |  state: ‘created’
[10:52:41.359] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:41.359] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:41.359] |  Using SequentialFutureBackend ...
[10:52:41.359] |  :  Launching futures ...
[10:52:41.360] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:41.360] |  :  .  |  getFutureData() ...
[10:52:41.360] |  :  .  |  :  getFutureCore() ...
[10:52:41.360] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:41.360] |  :  .  |  :  getFutureCore() ... done
[10:52:41.360] |  :  .  |  :  getFutureCapture() ...
[10:52:41.360] |  :  .  |  :  getFutureCapture() ... done
[10:52:41.360] |  :  .  |  :  getFutureContext() ...
[10:52:41.360] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:41.360] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:41.361] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:41.361] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:41.361] |  :  .  |  :  getFutureContext() ... done
[10:52:41.361] |  :  .  |  getFutureData() ... done
[10:52:41.361] |  :  .  |  attachPackages() ...
[10:52:41.361] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:41.361] |  :  .  |  attachPackages() ... DONE
[10:52:41.361] |  :  .  |  attachPackages() ...
[10:52:41.361] |  :  .  |  :  packages: [n=0] 
[10:52:41.362] |  :  .  |  attachPackages() ... DONE
[10:52:41.362] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:41.362] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:41.362] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:41.362] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:41.362] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:41.363] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:41.363] |  :  .  |  :  .  |  New stack:
[10:52:41.363] |  :  .  |  :  .  |  List of 1
[10:52:41.363] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.363] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.363] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.363] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.363] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.363] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:41.363] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.365] |  :  .  |  :  .  |  Old stack:
[10:52:41.365] |  :  .  |  :  .  |  List of 1
[10:52:41.365] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.365] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.365] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.365] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.365] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.365] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:41.365] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55fec239bf00> 
[10:52:41.365] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.365] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.365] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.368] |  :  .  |  :  .  |  Not identical
[10:52:41.368] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:41.368] |  :  .  |  :  .  |  :  List of 2
[10:52:41.368] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.368] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.368] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.368] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.368] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.368] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:41.368] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.368] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.368] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.368] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.368] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.368] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:41.368] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55fec239bf00> 
[10:52:41.368] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.368] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.372] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:41.372] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:41.373] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:41.373] |  :  .  |  :  .  List of future strategies:
[10:52:41.373] |  :  .  |  :  .  1. sequential:
[10:52:41.373] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:41.373] |  :  .  |  :  .     - tweaked: FALSE
[10:52:41.373] |  :  .  |  :  .     - call: plan(sequential)
[10:52:41.373] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:41.373] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:41.375] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:41.376] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:41.376] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:41.376] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:41.376] |  :  .  |  :  .  |  :  New stack:
[10:52:41.376] |  :  .  |  :  .  |  :  List of 1
[10:52:41.376] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.376] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.376] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.376] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.376] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.376] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:41.376] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55fec239bf00> 
[10:52:41.376] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.376] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.376] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.379] |  :  .  |  :  .  |  :  Old stack:
[10:52:41.379] |  :  .  |  :  .  |  :  List of 1
[10:52:41.379] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.379] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.379] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.379] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.379] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.379] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:41.379] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55fec239bf00> 
[10:52:41.379] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.379] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.379] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.382] |  :  .  |  :  .  |  :  Identical
[10:52:41.382] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:41.382] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:41.382] |  :  .  |  :  .  |  List of future strategies:
[10:52:41.382] |  :  .  |  :  .  |  1. sequential:
[10:52:41.382] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:41.382] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:41.382] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:41.382] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:41.383] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:41.383] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:41.383] |  :  .  |  SequentialFuture started (and completed)
[10:52:41.383] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:41.383] |  :  Launching futures ... done
[10:52:41.383] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:41.383] |  Using SequentialFutureBackend ... done
[10:52:41.383] run() for Future (‘SequentialFuture’) ... done

> print(y)
[1] 42

> stopifnot(y == 42)

> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE

> message("*** future() - exceptions ...")
*** future() - exceptions ...

> target <- list(name = "<unknown>", envir = new.env(), 
+     code = "Yo!", exists = TRUE)

> res <- tryCatch(get_future(target, mustExist = TRUE), 
+     error = identity)
[10:52:41.384] ERROR: Future (‘<unknown>’) not found in environment ‘<noname>’: ‘Yo!’

> stopifnot(inherits(res, "error"))

> message("*** future() - exceptions ... DONE")
*** future() - exceptions ... DONE

> message("*** future() ... DONE")
*** future() ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.2s, sys.self=0.008s, elapsed=0.2s, user.child=0.005s, sys.child=0.001s
Test ‘future’ ... success
> 
