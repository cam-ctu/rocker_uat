
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script incl/testme/test-startup-onLoad.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("startup-onLoad")
Test ‘startup-onLoad’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-startup-onLoad.R’

> library(future)
[10:54:45.275] Option 'future.startup.script': TRUE
[10:54:45.275] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[10:54:45.275] Future startup scripts found: <none>

> options(future.debug = FALSE)

> maxCores <- min(2, availableCores(methods = "system"))

> plan("default")

> strategy0 <- plan()

> message("*** .onLoad() ...")
*** .onLoad() ...

> plan("default")

> pkgname <- "future"

> message("- .onLoad() w/out command-line options ...")
- .onLoad() w/out command-line options ...

> options(future.plan = NULL, future.cmdargs = NULL)

> .onLoad(pkgname, pkgname)

> strategy <- plan("next")

> print(strategy)
sequential:
- args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: plan(sequential)
FutureBackend to be launched

> stopifnot(all(class(strategy) == class(strategy0)))

> plan("default")

> message("- .onLoad() w/out command-line options ... DONE")
- .onLoad() w/out command-line options ... DONE

> message("- .onLoad() w/ -p 1 ...")
- .onLoad() w/ -p 1 ...

> options(future.plan = NULL, future.cmdargs = c("-p", 
+     1))

> .onLoad(pkgname, pkgname)

> strategy <- plan("next")

> print(strategy)
sequential:
- args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: plan(sequential)
FutureBackend to be launched

> default <- getOption("future.plan", "sequential")

> if (is.function(default)) default <- class(default)

> stopifnot(inherits(strategy, default))

> plan("default")

> message("- .onLoad() w/ -p 1 ... DONE")
- .onLoad() w/ -p 1 ... DONE

> message("- .onLoad() w/ --parallel=1 ...")
- .onLoad() w/ --parallel=1 ...

> plan("default")

> options(future.plan = NULL, future.cmdargs = "-parallel=1")

> .onLoad(pkgname, pkgname)

> strategy <- plan("next")

> print(strategy)
sequential:
- args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: plan(sequential)
FutureBackend to be launched

> default <- getOption("future.plan", "sequential")

> if (is.function(default)) default <- class(default)

> stopifnot(inherits(strategy, default))

> plan("default")

> message("- .onLoad() w/ --parallel=1 ... DONE")
- .onLoad() w/ --parallel=1 ... DONE

> message("- .onLoad() w/ -p 2 ...")
- .onLoad() w/ -p 2 ...

> options(future.plan = NULL, future.cmdargs = c("-p", 
+     2))

> .onLoad(pkgname, pkgname)

> strategy <- plan("next")

> print(strategy)
multisession:
- args: function (..., workers = 2L, envir = parent.frame())
- tweaked: TRUE
- call: NULL
FutureBackend to be launched

> if (maxCores >= 2) {
+     stopifnot(inherits(strategy, "multiprocess"))
+ } else {
+     stopifnot(all(class(strategy) == class(strategy0)))
+ }

> plan("default")

> message("- .onLoad() w/ -p 2 ... DONE")
- .onLoad() w/ -p 2 ... DONE

> message("- .onLoad() w/ -p 0 ...")
- .onLoad() w/ -p 0 ...

> options(future.plan = NULL, future.cmdargs = c("-p", 
+     0))

> .onLoad(pkgname, pkgname)
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0

> strategy <- plan("next")

> print(strategy)
sequential:
- args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
FutureBackend to be launched

> stopifnot(all(class(strategy) == class(strategy0)))

> plan("default")

> message("- .onLoad() w/ -p 0 ... DONE")
- .onLoad() w/ -p 0 ... DONE

> message("- .onLoad() w/ -p -1 ...")
- .onLoad() w/ -p -1 ...

> options(future.plan = NULL, future.cmdargs = c("-p", 
+     -1))

> .onLoad(pkgname, pkgname)
Warning: future: Ignoring invalid number of processes specified in command-line option: -p -1

> strategy <- plan("next")

> print(strategy)
sequential:
- args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
FutureBackend to be launched

> stopifnot(all(class(strategy) == class(strategy0)))

> plan("default")

> message("- .onLoad() w/ -p -1 ... DONE")
- .onLoad() w/ -p -1 ... DONE

> message("- .onLoad() w/ -p foo ...")
- .onLoad() w/ -p foo ...

> options(future.plan = NULL, future.cmdargs = c("-p", 
+     "foo"))

> .onLoad(pkgname, pkgname)
Warning in parseCmdArgs() : NAs introduced by coercion
Warning: future: Ignoring invalid number of processes specified in command-line option: -p foo

> strategy <- plan("next")

> print(strategy)
sequential:
- args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
FutureBackend to be launched

> stopifnot(all(class(strategy) == class(strategy0)))

> plan("default")

> message("- .onLoad() w/ -p foo ... DONE")
- .onLoad() w/ -p foo ... DONE

> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...

> Sys.setenv(R_FUTURE_PLAN = "multisession")

> options(future.plan = NULL, future.cmdargs = NULL)

> .onLoad(pkgname, pkgname)

> strategy <- plan("next")

> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
FutureBackend to be launched

> stopifnot(inherits(strategy, "multisession"))

> plan("default")

> Sys.setenv(R_FUTURE_PLAN = "")

> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE

> message("- .onLoad() w/ future.plan = 'multisession' ...")
- .onLoad() w/ future.plan = 'multisession' ...

> options(future.plan = NULL, future.plan = "multisession", 
+     future.cmdargs = NULL)

> .onLoad(pkgname, pkgname)

> strategy <- plan("next")

> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
FutureBackend to be launched

> stopifnot(inherits(strategy, "multisession"))

> plan("default")

> message("- .onLoad() w/ future.plan = 'multisession' ... DONE")
- .onLoad() w/ future.plan = 'multisession' ... DONE

> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...

> Sys.setenv(R_FUTURE_PLAN = "multisession")

> options(future.plan = NULL, future.cmdargs = c("-p", 
+     1))

> .onLoad(pkgname, pkgname)

> strategy <- plan("next")

> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
FutureBackend to be launched

> stopifnot(inherits(strategy, "multisession"))

> plan("default")

> Sys.setenv(R_FUTURE_PLAN = "")

> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE

> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...

> options(future.plan = "multisession", future.cmdargs = c("-p", 
+     "1"))

> .onLoad(pkgname, pkgname)

> strategy <- plan("next")

> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
FutureBackend to be launched

> stopifnot(inherits(strategy, "multisession"))

> plan("default")

> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE

> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...

> options(future.plan = multisession, future.cmdargs = c("-p", 
+     "1"))

> .onLoad(pkgname, pkgname)

> strategy <- plan("next")

> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
FutureBackend to be launched

> stopifnot(inherits(strategy, "multisession"))

> plan("default")

> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE

> options(future.plan = NULL, future.cmdargs = NULL, 
+     future.availableCores.system = NULL, future.availableCores.fallback = NULL)

> message("*** .onLoad() ... DONE")
*** .onLoad() ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.2s, sys.self=0.008s, elapsed=0.9s, user.child=0.2s, sys.child=0.3s
Test ‘startup-onLoad’ ... success
> 
