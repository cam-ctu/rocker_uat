
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-bquote.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("bquote")
Test ‘bquote’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-bquote.R’

> library(future)
[08:07:42.856] Option 'future.startup.script': TRUE
[08:07:42.856] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:07:42.856] Future startup scripts found: <none>

> bquote_compile <- future:::bquote_compile

> bquote_apply <- future:::bquote_apply

> message("*** bquote_compile() & bquote_apply() ...")
*** bquote_compile() & bquote_apply() ...

> exprs <- list(A = quote(.(a)), B = quote(1 + .(a)), 
+     C = quote(.(a) + 2), D = quote({
+         .(a)
+     }), E = quote({
+         1 + .(a)
 .... [TRUNCATED] 

> for (kk in seq_along(exprs)) {
+     name <- names(exprs)[kk]
+     message(sprintf("Expression #%d (%s) of %d:", kk, sQuote(name), 
+         lengt .... [TRUNCATED] 
Expression #1 (‘A’) of 10:
.(a)
List of 2
 $ a: num 1
 $ b: num 1
[1] 1
List of 2
 $ a: num 1
 $ b: symbol B
[1] 1
List of 2
 $ a: num 1
 $ b: language c()
[1] 1
List of 2
 $ a: num 1
 $ b: NULL
[1] 1
List of 2
 $ a: symbol A
 $ b: num 1
A
List of 2
 $ a: symbol A
 $ b: symbol B
A
List of 2
 $ a: symbol A
 $ b: language c()
A
List of 2
 $ a: symbol A
 $ b: NULL
A
List of 2
 $ a: language c()
 $ b: num 1
c()
List of 2
 $ a: language c()
 $ b: symbol B
c()
List of 2
 $ a: language c()
 $ b: language c()
c()
List of 2
 $ a: language c()
 $ b: NULL
c()
List of 2
 $ a: NULL
 $ b: num 1
NULL
List of 2
 $ a: NULL
 $ b: symbol B
NULL
List of 2
 $ a: NULL
 $ b: language c()
NULL
List of 2
 $ a: NULL
 $ b: NULL
NULL
Expression #2 (‘B’) of 10:
1 + .(a)
List of 2
 $ a: num 1
 $ b: num 1
1 + 1
List of 2
 $ a: num 1
 $ b: symbol B
1 + 1
List of 2
 $ a: num 1
 $ b: language c()
1 + 1
List of 2
 $ a: num 1
 $ b: NULL
1 + 1
List of 2
 $ a: symbol A
 $ b: num 1
1 + A
List of 2
 $ a: symbol A
 $ b: symbol B
1 + A
List of 2
 $ a: symbol A
 $ b: language c()
1 + A
List of 2
 $ a: symbol A
 $ b: NULL
1 + A
List of 2
 $ a: language c()
 $ b: num 1
1 + c()
List of 2
 $ a: language c()
 $ b: symbol B
1 + c()
List of 2
 $ a: language c()
 $ b: language c()
1 + c()
List of 2
 $ a: language c()
 $ b: NULL
1 + c()
List of 2
 $ a: NULL
 $ b: num 1
1 + NULL
List of 2
 $ a: NULL
 $ b: symbol B
1 + NULL
List of 2
 $ a: NULL
 $ b: language c()
1 + NULL
List of 2
 $ a: NULL
 $ b: NULL
1 + NULL
Expression #3 (‘C’) of 10:
.(a) + 2
List of 2
 $ a: num 1
 $ b: num 1
1 + 2
List of 2
 $ a: num 1
 $ b: symbol B
1 + 2
List of 2
 $ a: num 1
 $ b: language c()
1 + 2
List of 2
 $ a: num 1
 $ b: NULL
1 + 2
List of 2
 $ a: symbol A
 $ b: num 1
A + 2
List of 2
 $ a: symbol A
 $ b: symbol B
A + 2
List of 2
 $ a: symbol A
 $ b: language c()
A + 2
List of 2
 $ a: symbol A
 $ b: NULL
A + 2
List of 2
 $ a: language c()
 $ b: num 1
c() + 2
List of 2
 $ a: language c()
 $ b: symbol B
c() + 2
List of 2
 $ a: language c()
 $ b: language c()
c() + 2
List of 2
 $ a: language c()
 $ b: NULL
c() + 2
List of 2
 $ a: NULL
 $ b: num 1
NULL + 2
List of 2
 $ a: NULL
 $ b: symbol B
NULL + 2
List of 2
 $ a: NULL
 $ b: language c()
NULL + 2
List of 2
 $ a: NULL
 $ b: NULL
NULL + 2
Expression #4 (‘D’) of 10:
{
    .(a)
}
List of 2
 $ a: num 1
 $ b: num 1
{
    1
}
List of 2
 $ a: num 1
 $ b: symbol B
{
    1
}
List of 2
 $ a: num 1
 $ b: language c()
{
    1
}
List of 2
 $ a: num 1
 $ b: NULL
{
    1
}
List of 2
 $ a: symbol A
 $ b: num 1
{
    A
}
List of 2
 $ a: symbol A
 $ b: symbol B
{
    A
}
List of 2
 $ a: symbol A
 $ b: language c()
{
    A
}
List of 2
 $ a: symbol A
 $ b: NULL
{
    A
}
List of 2
 $ a: language c()
 $ b: num 1
{
    c()
}
List of 2
 $ a: language c()
 $ b: symbol B
{
    c()
}
List of 2
 $ a: language c()
 $ b: language c()
{
    c()
}
List of 2
 $ a: language c()
 $ b: NULL
{
    c()
}
List of 2
 $ a: NULL
 $ b: num 1
{
    NULL
}
List of 2
 $ a: NULL
 $ b: symbol B
{
    NULL
}
List of 2
 $ a: NULL
 $ b: language c()
{
    NULL
}
List of 2
 $ a: NULL
 $ b: NULL
{
    NULL
}
Expression #5 (‘E’) of 10:
{
    1 + .(a)
}
List of 2
 $ a: num 1
 $ b: num 1
{
    1 + 1
}
List of 2
 $ a: num 1
 $ b: symbol B
{
    1 + 1
}
List of 2
 $ a: num 1
 $ b: language c()
{
    1 + 1
}
List of 2
 $ a: num 1
 $ b: NULL
{
    1 + 1
}
List of 2
 $ a: symbol A
 $ b: num 1
{
    1 + A
}
List of 2
 $ a: symbol A
 $ b: symbol B
{
    1 + A
}
List of 2
 $ a: symbol A
 $ b: language c()
{
    1 + A
}
List of 2
 $ a: symbol A
 $ b: NULL
{
    1 + A
}
List of 2
 $ a: language c()
 $ b: num 1
{
    1 + c()
}
List of 2
 $ a: language c()
 $ b: symbol B
{
    1 + c()
}
List of 2
 $ a: language c()
 $ b: language c()
{
    1 + c()
}
List of 2
 $ a: language c()
 $ b: NULL
{
    1 + c()
}
List of 2
 $ a: NULL
 $ b: num 1
{
    1 + NULL
}
List of 2
 $ a: NULL
 $ b: symbol B
{
    1 + NULL
}
List of 2
 $ a: NULL
 $ b: language c()
{
    1 + NULL
}
List of 2
 $ a: NULL
 $ b: NULL
{
    1 + NULL
}
Expression #6 (‘F’) of 10:
function(x = 42) {
    x + .(a)
}
List of 2
 $ a: num 1
 $ b: num 1
function(x = 42) {
    x + 1
}
List of 2
 $ a: num 1
 $ b: symbol B
function(x = 42) {
    x + 1
}
List of 2
 $ a: num 1
 $ b: language c()
function(x = 42) {
    x + 1
}
List of 2
 $ a: num 1
 $ b: NULL
function(x = 42) {
    x + 1
}
List of 2
 $ a: symbol A
 $ b: num 1
function(x = 42) {
    x + A
}
List of 2
 $ a: symbol A
 $ b: symbol B
function(x = 42) {
    x + A
}
List of 2
 $ a: symbol A
 $ b: language c()
function(x = 42) {
    x + A
}
List of 2
 $ a: symbol A
 $ b: NULL
function(x = 42) {
    x + A
}
List of 2
 $ a: language c()
 $ b: num 1
function(x = 42) {
    x + c()
}
List of 2
 $ a: language c()
 $ b: symbol B
function(x = 42) {
    x + c()
}
List of 2
 $ a: language c()
 $ b: language c()
function(x = 42) {
    x + c()
}
List of 2
 $ a: language c()
 $ b: NULL
function(x = 42) {
    x + c()
}
List of 2
 $ a: NULL
 $ b: num 1
function(x = 42) {
    x + NULL
}
List of 2
 $ a: NULL
 $ b: symbol B
function(x = 42) {
    x + NULL
}
List of 2
 $ a: NULL
 $ b: language c()
function(x = 42) {
    x + NULL
}
List of 2
 $ a: NULL
 $ b: NULL
function(x = 42) {
    x + NULL
}
Expression #7 (‘G’) of 10:
{
    1 + .(a + 2) * c(1, 2, .(b))
}
List of 2
 $ a: num 1
 $ b: num 1
{
    1 + 3 * c(1, 2, 1)
}
List of 2
 $ a: num 1
 $ b: symbol B
{
    1 + 3 * c(1, 2, B)
}
List of 2
 $ a: num 1
 $ b: language c()
{
    1 + 3 * c(1, 2, c())
}
List of 2
 $ a: num 1
 $ b: NULL
{
    1 + 3 * c(1, 2, NULL)
}
List of 2
 $ a: symbol A
 $ b: num 1
List of 2
 $ a: symbol A
 $ b: symbol B
List of 2
 $ a: symbol A
 $ b: language c()
List of 2
 $ a: symbol A
 $ b: NULL
List of 2
 $ a: language c()
 $ b: num 1
List of 2
 $ a: language c()
 $ b: symbol B
List of 2
 $ a: language c()
 $ b: language c()
List of 2
 $ a: language c()
 $ b: NULL
List of 2
 $ a: NULL
 $ b: num 1
{
    1 + numeric(0) * c(1, 2, 1)
}
List of 2
 $ a: NULL
 $ b: symbol B
{
    1 + numeric(0) * c(1, 2, B)
}
List of 2
 $ a: NULL
 $ b: language c()
{
    1 + numeric(0) * c(1, 2, c())
}
List of 2
 $ a: NULL
 $ b: NULL
{
    1 + numeric(0) * c(1, 2, NULL)
}
Expression #8 (‘H’) of 10:
.(a + 1)
List of 2
 $ a: num 1
 $ b: num 1
[1] 2
List of 2
 $ a: num 1
 $ b: symbol B
[1] 2
List of 2
 $ a: num 1
 $ b: language c()
[1] 2
List of 2
 $ a: num 1
 $ b: NULL
[1] 2
List of 2
 $ a: symbol A
 $ b: num 1
List of 2
 $ a: symbol A
 $ b: symbol B
List of 2
 $ a: symbol A
 $ b: language c()
List of 2
 $ a: symbol A
 $ b: NULL
List of 2
 $ a: language c()
 $ b: num 1
List of 2
 $ a: language c()
 $ b: symbol B
List of 2
 $ a: language c()
 $ b: language c()
List of 2
 $ a: language c()
 $ b: NULL
List of 2
 $ a: NULL
 $ b: num 1
numeric(0)
List of 2
 $ a: NULL
 $ b: symbol B
numeric(0)
List of 2
 $ a: NULL
 $ b: language c()
numeric(0)
List of 2
 $ a: NULL
 $ b: NULL
numeric(0)
Expression #9 (‘I’) of 10:
.(a + 1) + .(a)
List of 2
 $ a: num 1
 $ b: num 1
2 + 1
List of 2
 $ a: num 1
 $ b: symbol B
2 + 1
List of 2
 $ a: num 1
 $ b: language c()
2 + 1
List of 2
 $ a: num 1
 $ b: NULL
2 + 1
List of 2
 $ a: symbol A
 $ b: num 1
List of 2
 $ a: symbol A
 $ b: symbol B
List of 2
 $ a: symbol A
 $ b: language c()
List of 2
 $ a: symbol A
 $ b: NULL
List of 2
 $ a: language c()
 $ b: num 1
List of 2
 $ a: language c()
 $ b: symbol B
List of 2
 $ a: language c()
 $ b: language c()
List of 2
 $ a: language c()
 $ b: NULL
List of 2
 $ a: NULL
 $ b: num 1
numeric(0) + NULL
List of 2
 $ a: NULL
 $ b: symbol B
numeric(0) + NULL
List of 2
 $ a: NULL
 $ b: language c()
numeric(0) + NULL
List of 2
 $ a: NULL
 $ b: NULL
numeric(0) + NULL
Expression #10 (‘J’) of 10:
function(a = .(a)) NULL
List of 2
 $ a: num 1
 $ b: num 1
function(a = 1) NULL
List of 2
 $ a: num 1
 $ b: symbol B
function(a = 1) NULL
List of 2
 $ a: num 1
 $ b: language c()
function(a = 1) NULL
List of 2
 $ a: num 1
 $ b: NULL
function(a = 1) NULL
List of 2
 $ a: symbol A
 $ b: num 1
function(a = A) NULL
List of 2
 $ a: symbol A
 $ b: symbol B
function(a = A) NULL
List of 2
 $ a: symbol A
 $ b: language c()
function(a = A) NULL
List of 2
 $ a: symbol A
 $ b: NULL
function(a = A) NULL
List of 2
 $ a: language c()
 $ b: num 1
function(a = c()) NULL
List of 2
 $ a: language c()
 $ b: symbol B
function(a = c()) NULL
List of 2
 $ a: language c()
 $ b: language c()
function(a = c()) NULL
List of 2
 $ a: language c()
 $ b: NULL
function(a = c()) NULL
List of 2
 $ a: NULL
 $ b: num 1
function(a = NULL) NULL
List of 2
 $ a: NULL
 $ b: symbol B
function(a = NULL) NULL
List of 2
 $ a: NULL
 $ b: language c()
function(a = NULL) NULL
List of 2
 $ a: NULL
 $ b: NULL
function(a = NULL) NULL

> message("*** bquote_compile() & bquote_apply() ... DONE")
*** bquote_compile() & bquote_apply() ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.2s, sys.self=0.009s, elapsed=0.2s, user.child=0.003s, sys.child=0.003s
Test ‘bquote’ ... success
> 
