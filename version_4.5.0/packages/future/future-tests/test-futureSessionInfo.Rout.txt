
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script incl/testme/test-futureSessionInfo.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("futureSessionInfo")
Test ‘futureSessionInfo’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-futureSessionInfo.R’

> library(future)
[10:53:05.409] Option 'future.startup.script': TRUE
[10:53:05.409] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[10:53:05.410] Future startup scripts found: <none>

> message("*** futureSessionInfo() ...")
*** futureSessionInfo() ...

> message(" - test = FALSE")
 - test = FALSE

> futureSessionInfo(test = FALSE)
*** Package versions
future 1.40.0, parallelly 1.43.0, parallel 4.5.0, globals 0.17.0, listenv 0.9.1

*** Allocations
availableCores():
           system /proc/self/status             nproc          mc.cores 
                4                 4                 4                 2 
availableWorkers():
$mc.cores
[1] "localhost" "localhost"

$nproc
[1] "localhost" "localhost" "localhost" "localhost"

$system
[1] "localhost" "localhost" "localhost" "localhost"


*** Settings
- future.plan=<not set>
- future.fork.multithreading.enable=<not set>
- future.globals.maxSize=<not set>
- future.globals.onReference=<not set>
- future.resolve.recursive=<not set>
- future.rng.onMisuse=<not set>
- future.wait.timeout=<not set>
- future.wait.interval=<not set>
- future.wait.alpha=<not set>
- future.startup.script=<not set>

*** Backends
[10:53:05.417] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:05.417] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:05.417] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:05.417] Backend function: <‘NULL’>
[10:53:05.418] Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
Number of workers: 1
[10:53:05.418] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:05.418] |  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:05.418] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
List of future strategies:
1. sequential:
   - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
   - tweaked: FALSE
   - call: plan(sequential)

*** Basic tests

> message(" - test = TRUE")
 - test = TRUE

> futureSessionInfo(test = TRUE)
*** Package versions
future 1.40.0, parallelly 1.43.0, parallel 4.5.0, globals 0.17.0, listenv 0.9.1

*** Allocations
availableCores():
           system /proc/self/status             nproc          mc.cores 
                4                 4                 4                 2 
availableWorkers():
$mc.cores
[1] "localhost" "localhost"

$nproc
[1] "localhost" "localhost" "localhost" "localhost"

$system
[1] "localhost" "localhost" "localhost" "localhost"


*** Settings
- future.plan=<not set>
- future.fork.multithreading.enable=<not set>
- future.globals.maxSize=<not set>
- future.globals.onReference=<not set>
- future.resolve.recursive=<not set>
- future.rng.onMisuse=<not set>
- future.wait.timeout=<not set>
- future.wait.interval=<not set>
- future.wait.alpha=<not set>
- future.startup.script=<not set>

*** Backends
[10:53:05.426] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:05.426] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:05.426] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:05.426] Backend function: <‘NULL’>
[10:53:05.427] Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
Number of workers: 1
[10:53:05.427] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:05.427] |  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:05.427] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
List of future strategies:
1. sequential:
   - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
   - tweaked: FALSE
   - call: plan(sequential)

*** Basic tests
Main R session details:
    pid     r sysname           release
1 70300 4.5.0   Linux 6.11.0-1012-azure
                                              version nodename machine   login
1 #12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025  host001  x86_64 user002
     user effective_user
1 user001        user001
[10:53:05.431] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:05.431] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:05.431] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:05.431] Backend function: <‘NULL’>
[10:53:05.432] Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:53:05.432] getGlobalsAndPackages() ...
[10:53:05.433] |  Searching for globals ...
[10:53:05.440] |  :  globals found: [9] ‘{’, ‘Sys.sleep’, ‘delay’, ‘data.frame’, ‘ii’, ‘Sys.getpid’, ‘getRversion’, ‘as.list’, ‘Sys.info’
[10:53:05.440] |  Searching for globals ... DONE
[10:53:05.440] |  Resolving globals: FALSE
[10:53:05.440] |  Search for packages associated with the globals ...
[10:53:05.441] |  :  Packages associated with globals: [1] ‘base’
[10:53:05.441] |  :  Packages: [1] ‘base’
[10:53:05.441] |  Search for packages associated with the globals ... DONE
[10:53:05.441] |  Packages after dropping 'base': [0] 
[10:53:05.441] |  globals: [2] ‘delay’, ‘ii’
[10:53:05.442] |  packages: [0] 
[10:53:05.442] getGlobalsAndPackages() ... done
[10:53:05.442] run() for Future (‘Future’) ...
[10:53:05.443] |  state: ‘created’
[10:53:05.443] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:05.443] |  :  makeFutureBackend(<sequential>) ...
[10:53:05.443] |  :  .  Backend function: <‘NULL’>
[10:53:05.443] |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:53:05.443] |  :  makeFutureBackend(<sequential>) ... done
[10:53:05.443] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:05.444] |  Using SequentialFutureBackend ...
[10:53:05.444] |  :  Launching futures ...
[10:53:05.444] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:53:05.444] |  :  .  |  getFutureData() ...
[10:53:05.444] |  :  .  |  :  getFutureCore() ...
[10:53:05.445] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:53:05.445] |  :  .  |  :  getFutureCore() ... done
[10:53:05.445] |  :  .  |  :  getFutureCapture() ...
[10:53:05.445] |  :  .  |  :  getFutureCapture() ... done
[10:53:05.445] |  :  .  |  :  getFutureContext() ...
[10:53:05.445] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:05.446] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:53:05.446] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:05.446] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:53:05.446] |  :  .  |  :  getFutureContext() ... done
[10:53:05.446] |  :  .  |  getFutureData() ... done
[10:53:05.447] |  :  .  |  attachPackages() ...
[10:53:05.448] |  :  .  |  :  packages: [n=1] ‘future’
[10:53:05.448] |  :  .  |  attachPackages() ... DONE
[10:53:05.448] |  :  .  |  attachPackages() ...
[10:53:05.448] |  :  .  |  :  packages: [n=0] 
[10:53:05.448] |  :  .  |  attachPackages() ... DONE
[10:53:05.448] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:05.449] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:05.449] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:05.449] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:05.449] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:05.449] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:53:05.450] |  :  .  |  :  .  |  New stack:
[10:53:05.450] |  :  .  |  :  .  |  List of 1
[10:53:05.450] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:05.450] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:05.450] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:05.450] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:05.450] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:05.450] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:05.450] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:05.453] |  :  .  |  :  .  |  Old stack:
[10:53:05.453] |  :  .  |  :  .  |  List of 1
[10:53:05.453] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:05.453] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:05.453] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:05.453] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:05.453] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:05.453] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:53:05.453] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55b5928af388> 
[10:53:05.453] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:05.453] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:05.453] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:05.456] |  :  .  |  :  .  |  Not identical
[10:53:05.459] |  :  .  |  :  .  |  all.equal() for future ...
[10:53:05.459] |  :  .  |  :  .  |  :  List of 2
[10:53:05.459] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:05.459] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:05.459] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:05.459] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:05.459] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:05.459] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:05.459] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:05.459] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:05.459] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:05.459] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:05.459] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:05.459] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:05.459] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55b5928af388> 
[10:53:05.459] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:05.459] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:05.464] |  :  .  |  :  .  |  all.equal() for future ... done
[10:53:05.464] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:53:05.464] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:53:05.464] |  :  .  |  :  .  List of future strategies:
[10:53:05.464] |  :  .  |  :  .  1. sequential:
[10:53:05.464] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:05.464] |  :  .  |  :  .     - tweaked: FALSE
[10:53:05.464] |  :  .  |  :  .     - call: plan(sequential)
[10:53:05.465] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:05.465] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:05.465] |  :  .  |  assign_globals() ...
[10:53:05.465] |  :  .  |  List of 2
[10:53:05.465] |  :  .  |   $ delay: num 1
[10:53:05.465] |  :  .  |   $ ii   : int 1
[10:53:05.465] |  :  .  |   - attr(*, "where")=List of 2
[10:53:05.465] |  :  .  |    ..$ delay:<environment: R_EmptyEnv> 
[10:53:05.465] |  :  .  |    ..$ ii   :<environment: R_EmptyEnv> 
[10:53:05.465] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:53:05.465] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:53:05.465] |  :  .  |   - attr(*, "total_size")= num NA
[10:53:05.465] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:53:05.469] |  :  .  |  - copied ‘delay’ to environment
[10:53:05.469] |  :  .  |  - copied ‘ii’ to environment
[10:53:05.469] |  :  .  |  assign_globals() ... done
[10:53:06.474] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:06.474] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:06.474] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:06.474] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:53:06.474] |  :  .  |  :  .  |  :  New stack:
[10:53:06.474] |  :  .  |  :  .  |  :  List of 1
[10:53:06.474] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:06.474] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:06.474] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:06.474] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:06.474] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:06.474] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:06.474] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55b5928af388> 
[10:53:06.474] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:06.474] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:06.474] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:06.477] |  :  .  |  :  .  |  :  Old stack:
[10:53:06.478] |  :  .  |  :  .  |  :  List of 1
[10:53:06.478] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:06.478] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:06.478] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:06.478] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:06.478] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:06.478] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:53:06.478] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55b5928af388> 
[10:53:06.478] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:06.478] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:06.478] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:06.480] |  :  .  |  :  .  |  :  Identical
[10:53:06.481] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:53:06.481] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:53:06.481] |  :  .  |  :  .  |  List of future strategies:
[10:53:06.481] |  :  .  |  :  .  |  1. sequential:
[10:53:06.481] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:06.481] |  :  .  |  :  .  |     - tweaked: FALSE
[10:53:06.481] |  :  .  |  :  .  |     - call: plan(sequential)
[10:53:06.481] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:06.481] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:06.481] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:53:06.482] |  :  .  |  SequentialFuture started (and completed)
[10:53:06.482] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:53:06.482] |  :  Launching futures ... done
[10:53:06.482] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:53:06.482] |  Using SequentialFutureBackend ... done
[10:53:06.482] run() for Future (‘SequentialFuture’) ... done
[10:53:06.483] value() on list ...
[10:53:06.483] |  recursive: 0
[10:53:06.484] |  length: 1
[10:53:06.484] |  
[10:53:06.484] |  Number of remaining objects: 1
[10:53:06.484] |  checking value #1 ...
[10:53:06.484] |  :  'obj' is SequentialFuture
[10:53:06.486] |  :  resolved() for ‘SequentialFuture’ ...
[10:53:06.486] |  :  .  state: ‘finished’
[10:53:06.486] |  :  .  run: TRUE
[10:53:06.486] |  :  .  result: ‘FutureResult’
[10:53:06.486] |  :  resolved() for ‘SequentialFuture’ ... done
[10:53:06.486] |  :  SequentialFuture #1
[10:53:06.486] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:53:06.486] |  :  .  nx: 1
[10:53:06.487] |  :  .  relay: TRUE
[10:53:06.487] |  :  .  stdout: TRUE
[10:53:06.487] |  :  .  signal: TRUE
[10:53:06.487] |  :  .  resignal: FALSE
[10:53:06.487] |  :  .  force: TRUE
[10:53:06.487] |  :  .  relayed: [n=1] FALSE
[10:53:06.487] |  :  .  queued futures: [n=1] FALSE
[10:53:06.487] |  :  .  until=1
[10:53:06.487] |  :  .  relaying element #1
[10:53:06.488] |  :  .  relayed: [n=1] TRUE
[10:53:06.488] |  :  .  queued futures: [n=1] TRUE
[10:53:06.488] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:53:06.488] |  :  value(<SequentialFuture>, ...) ...
[10:53:06.488] |  :  .  value: <data.frame>
[10:53:06.488] |  :  value(<SequentialFuture>, ...) ... done
[10:53:06.488] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:53:06.488] |  :  .  nx: 1
[10:53:06.488] |  :  .  relay: TRUE
[10:53:06.489] |  :  .  stdout: TRUE
[10:53:06.489] |  :  .  signal: TRUE
[10:53:06.489] |  :  .  resignal: FALSE
[10:53:06.489] |  :  .  force: TRUE
[10:53:06.489] |  :  .  relayed: [n=1] TRUE
[10:53:06.489] |  :  .  queued futures: [n=1] TRUE
[10:53:06.489] |  :  .  until=1
[10:53:06.489] |  :  .  relayed: [n=1] TRUE
[10:53:06.489] |  :  .  queued futures: [n=1] TRUE
[10:53:06.489] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:53:06.490] |  :  length: 0 (resolved future 1)
[10:53:06.490] |  checking value #1 ... done
[10:53:06.490] |  Relaying remaining futures ...
[10:53:06.490] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:53:06.490] |  :  .  nx: 1
[10:53:06.490] |  :  .  relay: TRUE
[10:53:06.490] |  :  .  stdout: TRUE
[10:53:06.490] |  :  .  signal: TRUE
[10:53:06.490] |  :  .  resignal: FALSE
[10:53:06.490] |  :  .  force: TRUE
[10:53:06.491] |  :  .  relayed: [n=1] TRUE
[10:53:06.491] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:53:06.491] |  :  .  relayed: [n=1] TRUE
[10:53:06.491] |  :  .  queued futures: [n=1] TRUE
[10:53:06.491] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:53:06.491] |  Relaying remaining futures ... done
[10:53:06.491] value() on list ... done
Worker R session details:
  worker   pid     r sysname           release
1      1 70300 4.5.0   Linux 6.11.0-1012-azure
                                              version nodename machine   login
1 #12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025  host001  x86_64 user002
     user effective_user
1 user001        user001
[10:53:06.493] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:06.493] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:06.493] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
Number of unique worker PIDs: 1 (as expected)

> message("*** futureSessionInfo() ... DONE")
*** futureSessionInfo() ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.1s, sys.self=0.008s, elapsed=1s, user.child=0.002s, sys.child=0.003s
Test ‘futureSessionInfo’ ... success
> 
