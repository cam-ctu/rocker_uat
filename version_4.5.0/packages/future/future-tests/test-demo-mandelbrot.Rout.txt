
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-demo-mandelbrot.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("demo-mandelbrot")
Test ‘demo-mandelbrot’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-demo-mandelbrot.R’

> library(future)
[08:07:53.922] Option 'future.startup.script': TRUE
[08:07:53.923] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:07:53.923] Future startup scripts found: <none>

> if (getRversion() < "4.1") options(future.debug = FALSE)

> message("*** Mandelbrot demo of the 'future' package ...")
*** Mandelbrot demo of the 'future' package ...

> options(future.demo.mandelbrot.nrow = 2)

> options(future.demo.mandelbrot.resolution = 50)

> options(future.demo.mandelbrot.delay = FALSE)

> for (cores in 1:availCores) {
+     message(sprintf("Testing with %d cores ...", cores))
+     options(mc.cores = cores)
+     for (strategy in supp .... [TRUNCATED] 
Testing with 1 cores ...
- plan('sequential') ...
[08:07:53.930] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:53.930] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:07:53.930] | : all.equal() for FutureStrategyList ...
[08:07:53.930] | : . New stack:
[08:07:53.930] | : . List of 1
[08:07:53.930] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:53.930] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:53.930] | : .   ..- attr(*, "init")= logi TRUE
[08:07:53.930] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:53.930] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:53.930] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:53.930] | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:53.930] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:53.936] | : . Old stack:
[08:07:53.936] | : . List of 1
[08:07:53.936] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:53.936] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:53.936] | : .   ..- attr(*, "init")= logi TRUE
[08:07:53.936] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:53.936] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:53.936] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:53.936] | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:53.936] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:53.939] | : . Not identical
[08:07:53.939] | : . all.equal() for future ...
[08:07:53.939] | : . ' List of 2
[08:07:53.939] | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:53.939] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:53.939] | : . '   ..- attr(*, "init")= logi TRUE
[08:07:53.939] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:53.939] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:53.939] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:53.939] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:07:53.939] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:53.939] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:53.939] | : . '   ..- attr(*, "init")= logi TRUE
[08:07:53.939] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:53.939] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:53.939] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:53.939] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:07:53.944] | : . all.equal() for future ... done
[08:07:53.944] | : all.equal() for FutureStrategyList ... done
[08:07:53.944] | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:53.944] | : List of future strategies:
[08:07:53.944] | : 1. sequential:
[08:07:53.944] | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:53.944] | :    - tweaked: FALSE
[08:07:53.944] | :    - call: plan(sequential)
[08:07:53.945] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:07:53.945] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library(future)

> library(graphics)

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1] 1 2 3 4

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[08:07:53.974] future(..., label = NULL) ...
[08:07:53.974] | lazy: TRUE
[08:07:53.974] | stdout: TRUE
[08:07:53.974] | conditions: [n=1] ‘condition’
[08:07:53.974] | gc: FALSE
[08:07:53.975] | earlySignal: FALSE
[08:07:53.975] | getGlobalsAndPackages() ...
[08:07:53.975] | : Searching for globals ...
[08:07:54.007] | : . globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[08:07:54.007] | : Searching for globals ... done
[08:07:54.007] | : Resolving globals: FALSE
[08:07:54.007] | : Search for packages associated with the globals ...
[08:07:54.007] | : . Packages associated with globals: [2] ‘base’, ‘future’
[08:07:54.008] | : . Packages: [2] ‘base’, ‘future’
[08:07:54.008] | : Search for packages associated with the globals ... done
[08:07:54.008] | : Packages after dropping 'base': [1] ‘future’
[08:07:54.008] | : Packages after dropping non-attached packages: [1] ‘future’
[08:07:54.008] | : globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[08:07:54.009] | : packages: [1] ‘future’
[08:07:54.009] | getGlobalsAndPackages() ... done
[08:07:54.009] future(..., label = NULL) ... done
 2[08:07:54.013] future(..., label = NULL) ...
[08:07:54.013] | lazy: TRUE
[08:07:54.013] | stdout: TRUE
[08:07:54.013] | conditions: [n=1] ‘condition’
[08:07:54.013] | gc: FALSE
[08:07:54.013] | earlySignal: FALSE
[08:07:54.013] | getGlobalsAndPackages() ...
[08:07:54.013] | : Searching for globals ...
[08:07:54.035] | : . globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[08:07:54.035] | : Searching for globals ... done
[08:07:54.036] | : Resolving globals: FALSE
[08:07:54.036] | : Search for packages associated with the globals ...
[08:07:54.036] | : . Packages associated with globals: [2] ‘base’, ‘future’
[08:07:54.036] | : . Packages: [2] ‘base’, ‘future’
[08:07:54.036] | : Search for packages associated with the globals ... done
[08:07:54.036] | : Packages after dropping 'base': [1] ‘future’
[08:07:54.037] | : Packages after dropping non-attached packages: [1] ‘future’
[08:07:54.037] | : globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[08:07:54.037] | : packages: [1] ‘future’
[08:07:54.037] | getGlobalsAndPackages() ... done
[08:07:54.037] future(..., label = NULL) ... done
 3[08:07:54.037] future(..., label = NULL) ...
[08:07:54.037] | lazy: TRUE
[08:07:54.038] | stdout: TRUE
[08:07:54.038] | conditions: [n=1] ‘condition’
[08:07:54.038] | gc: FALSE
[08:07:54.038] | earlySignal: FALSE
[08:07:54.038] | getGlobalsAndPackages() ...
[08:07:54.038] | : Searching for globals ...
[08:07:54.060] | : . globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[08:07:54.061] | : Searching for globals ... done
[08:07:54.061] | : Resolving globals: FALSE
[08:07:54.061] | : Search for packages associated with the globals ...
[08:07:54.061] | : . Packages associated with globals: [2] ‘base’, ‘future’
[08:07:54.061] | : . Packages: [2] ‘base’, ‘future’
[08:07:54.061] | : Search for packages associated with the globals ... done
[08:07:54.062] | : Packages after dropping 'base': [1] ‘future’
[08:07:54.062] | : Packages after dropping non-attached packages: [1] ‘future’
[08:07:54.062] | : globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[08:07:54.062] | : packages: [1] ‘future’
[08:07:54.062] | getGlobalsAndPackages() ... done
[08:07:54.062] future(..., label = NULL) ... done
 4[08:07:54.062] future(..., label = NULL) ...
[08:07:54.063] | lazy: TRUE
[08:07:54.063] | stdout: TRUE
[08:07:54.063] | conditions: [n=1] ‘condition’
[08:07:54.063] | gc: FALSE
[08:07:54.063] | earlySignal: FALSE
[08:07:54.063] | getGlobalsAndPackages() ...
[08:07:54.063] | : Searching for globals ...
[08:07:54.085] | : . globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[08:07:54.085] | : Searching for globals ... done
[08:07:54.085] | : Resolving globals: FALSE
[08:07:54.085] | : Search for packages associated with the globals ...
[08:07:54.085] | : . Packages associated with globals: [2] ‘base’, ‘future’
[08:07:54.086] | : . Packages: [2] ‘base’, ‘future’
[08:07:54.086] | : Search for packages associated with the globals ... done
[08:07:54.086] | : Packages after dropping 'base': [1] ‘future’
[08:07:54.086] | : Packages after dropping non-attached packages: [1] ‘future’
[08:07:54.086] | : globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[08:07:54.086] | : packages: [1] ‘future’
[08:07:54.086] | getGlobalsAndPackages() ... done
[08:07:54.087] future(..., label = NULL) ... done

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[08:07:54.096] resolved() for Future (<unnamed-1>) ...
[08:07:54.096] | state: ‘created’
[08:07:54.096] | run: TRUE
[08:07:54.096] | run() ...
[08:07:54.097] | : run() for ‘Future’ (<unnamed-1>) ...
[08:07:54.097] | : . state: ‘created’
[08:07:54.097] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.097] | : . ' plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:07:54.097] | : . ' , function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.097] | : . ' ,  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.097] | : . ' ,  - attr(*, "init")= logi TRUE
[08:07:54.097] | : . ' ,  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.097] | : . ' ,   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.097] | : . ' ,  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.097] | : . ' ,  - attr(*, "call")= language plan(sequential)
[08:07:54.099] | : . ' , init: TRUE
[08:07:54.100] | : . ' , makeFutureBackend(<sequential>) ...
[08:07:54.100] | : . ' , ; Backend function: <‘NULL’>
[08:07:54.100] | : . ' , ; Evaluator tweak arguments: [n=0]
[08:07:54.100] | : . ' , ;  list()
[08:07:54.100] | : . ' , ; Evaluator formal arguments: [n=2]
[08:07:54.101] | : . ' , ;  list()
[08:07:54.101] | : . ' , ; Backend factory arguments: [n=2]
[08:07:54.101] | : . ' , ; Dotted pair list of 2
[08:07:54.101] | : . ' , ;  $ gc         : logi FALSE
[08:07:54.101] | : . ' , ;  $ earlySignal: logi FALSE
[08:07:54.102] | : . ' , ; Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:54.102] | : . ' , makeFutureBackend(<sequential>) ... done
[08:07:54.102] | : . ' plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:07:54.103] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.103] | : . Using SequentialFutureBackend ...
[08:07:54.103] | : . ' Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:07:54.103] | : . ' Launching futures ...
[08:07:54.103] | : . ' , launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:54.103] | : . ' , ; getFutureData() ...
[08:07:54.104] | : . ' , ; ` getFutureCore() ...
[08:07:54.104] | : . ' , ; ` | Packages needed by the future expression (n = 1): ‘future’
[08:07:54.104] | : . ' , ; ` getFutureCore() ... done
[08:07:54.104] | : . ' , ; ` getFutureCapture() ...
[08:07:54.104] | : . ' , ; ` getFutureCapture() ... done
[08:07:54.104] | : . ' , ; ` getFutureContext() ...
[08:07:54.104] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.105] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:07:54.105] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.105] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:07:54.105] | : . ' , ; ` getFutureContext() ... done
[08:07:54.105] | : . ' , ; getFutureData() ... done
[08:07:54.108] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.108] | : . ' , ; ` Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:54.108] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.109] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:54.109] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:54.109] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:54.109] | : . ' , ; ` | : New stack:
[08:07:54.109] | : . ' , ; ` | : List of 1
[08:07:54.109] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.109] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.109] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:54.109] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.109] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.109] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.109] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.109] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.114] | : . ' , ; ` | : Old stack:
[08:07:54.114] | : . ' , ; ` | : List of 1
[08:07:54.114] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.114] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.114] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:54.114] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.114] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.114] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.114] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:54.114] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b9af4c98> 
[08:07:54.114] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.114] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.114] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.117] | : . ' , ; ` | : Not identical
[08:07:54.118] | : . ' , ; ` | : all.equal() for future ...
[08:07:54.118] | : . ' , ; ` | : . List of 2
[08:07:54.118] | : . ' , ; ` | : .  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.118] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.118] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:07:54.118] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.118] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.118] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.118] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.118] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.118] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.118] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:54.118] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.118] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.118] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.118] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:54.118] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b9af4c98> 
[08:07:54.118] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.118] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.123] | : . ' , ; ` | : all.equal() for future ... done
[08:07:54.123] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:54.123] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:54.123] | : . ' , ; ` | List of future strategies:
[08:07:54.123] | : . ' , ; ` | 1. sequential:
[08:07:54.123] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:54.123] | : . ' , ; ` |    - tweaked: FALSE
[08:07:54.123] | : . ' , ; ` |    - call: plan(sequential)
[08:07:54.124] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:54.124] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:54.124] | : . ' , ; assign_globals() ...
[08:07:54.124] | : . ' , ; List of 4
[08:07:54.124] | : . ' , ;  $ ii   : int 1
[08:07:54.124] | : . ' , ;  $ n    : int 4
[08:07:54.124] | : . ' , ;  $ C    : cplx [1:25, 1:25] -2.25-1.5i -2.25-1.44i -2.25-1.38i ...
[08:07:54.124] | : . ' , ;   ..- attr(*, "region")=List of 2
[08:07:54.124] | : . ' , ;   .. ..$ xrange: num [1:2] -2.25 -0.781
[08:07:54.124] | : . ' , ;   .. ..$ yrange: num [1:2] -1.5 -0.0306
[08:07:54.124] | : . ' , ;   ..- attr(*, "tile")= int [1:2] 1 1
[08:07:54.124] | : . ' , ;  $ delay:function (counts)  
[08:07:54.124] | : . ' , ;   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[08:07:54.124] | : . ' , ;   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x55c5b92f6de8> 
[08:07:54.124] | : . ' , ;  - attr(*, "where")=List of 4
[08:07:54.124] | : . ' , ;   ..$ ii   :<environment: 0x55c5b97b2a08> 
[08:07:54.124] | : . ' , ;   ..$ n    :<environment: R_GlobalEnv> 
[08:07:54.124] | : . ' , ;   ..$ C    :<environment: 0x55c5b97b2a08> 
[08:07:54.124] | : . ' , ;   ..$ delay:<environment: R_GlobalEnv> 
[08:07:54.124] | : . ' , ;  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:54.124] | : . ' , ;  - attr(*, "resolved")= logi FALSE
[08:07:54.124] | : . ' , ;  - attr(*, "total_size")= num NA
[08:07:54.124] | : . ' , ;  - attr(*, "already-done")= logi TRUE
[08:07:54.131] | : . ' , ; - copied ‘ii’ to environment
[08:07:54.131] | : . ' , ; - copied ‘n’ to environment
[08:07:54.131] | : . ' , ; - copied ‘C’ to environment
[08:07:54.131] | : . ' , ; - reassign environment for ‘delay’ [where=globalenv()]
[08:07:54.131] | : . ' , ; - copied ‘delay’ to environment
[08:07:54.131] | : . ' , ; assign_globals() ... done
[08:07:54.136] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:54.136] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:54.136] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:54.137] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:07:54.137] | : . ' , ; ` | : . New stack:
[08:07:54.137] | : . ' , ; ` | : . List of 1
[08:07:54.137] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.137] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.137] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:54.137] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.137] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.137] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.137] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:54.137] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b9af4c98> 
[08:07:54.137] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.137] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.137] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.140] | : . ' , ; ` | : . Old stack:
[08:07:54.140] | : . ' , ; ` | : . List of 1
[08:07:54.140] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.140] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.140] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:54.140] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.140] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.140] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.140] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:54.140] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b9af4c98> 
[08:07:54.140] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.140] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.140] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.143] | : . ' , ; ` | : . Identical
[08:07:54.144] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:07:54.144] | : . ' , ; ` | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:54.144] | : . ' , ; ` | : List of future strategies:
[08:07:54.144] | : . ' , ; ` | : 1. sequential:
[08:07:54.144] | : . ' , ; ` | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:54.144] | : . ' , ; ` | :    - tweaked: FALSE
[08:07:54.144] | : . ' , ; ` | :    - call: plan(sequential)
[08:07:54.144] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:54.144] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:54.144] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:54.147] | : . ' , ; SequentialFuture started (and completed)
[08:07:54.148] | : . ' , ; signalConditions() ...
[08:07:54.148] | : . ' , ; ` include = ‘immediateCondition’
[08:07:54.148] | : . ' , ; ` exclude = 
[08:07:54.148] | : . ' , ; ` resignal = FALSE
[08:07:54.148] | : . ' , ; ` Number of conditions: 8
[08:07:54.148] | : . ' , ; `  int 8
[08:07:54.149] | : . ' , ; ` Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.149] | : . ' , ; ` Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.149] | : . ' , ; ` Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.149] | : . ' , ; ` Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.149] | : . ' , ; ` Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.149] | : . ' , ; ` Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.149] | : . ' , ; ` Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.150] | : . ' , ; ` Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.150] | : . ' , ; signalConditions() ... done
[08:07:54.150] | : . ' , launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:54.150] | : . ' Launching futures ... done
[08:07:54.150] | : . ' Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:54.150] | : . Using SequentialFutureBackend ... done
[08:07:54.150] | : run() for ‘Future’ (<unnamed-1>) ... done
[08:07:54.150] | run() ... done
[08:07:54.150] | resolved() ...
[08:07:54.151] | : resolved() for SequentialFuture (<unnamed-1>) ...
[08:07:54.151] | : . state: ‘finished’
[08:07:54.151] | : . run: TRUE
[08:07:54.151] | : . result: ‘FutureResult’
[08:07:54.151] | : resolved() for SequentialFuture (<unnamed-1>) ... done
[08:07:54.151] | : resolved: TRUE
[08:07:54.151] | resolved() ... done
[08:07:54.151] resolved() for Future (<unnamed-1>) ... done
Plotting tile #1 of 4 ...
[08:07:54.152] value() for SequentialFuture (<unnamed-1>) ...
[08:07:54.152] | signalConditions() ...
[08:07:54.152] | : include = ‘immediateCondition’
[08:07:54.152] | : exclude = 
[08:07:54.152] | : resignal = FALSE
[08:07:54.152] | : Number of conditions: 8
[08:07:54.152] | :  int 8
[08:07:54.153] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.153] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.155] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.155] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.155] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.155] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.155] | : Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.155] | : Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.155] | signalConditions() ... done
[08:07:54.155] | relay stdout ...
[08:07:54.156] | relay stdout ... done
[08:07:54.156] | check for misuse ...
[08:07:54.156] | check for misuse ... done
[08:07:54.156] | relay conditions ...
[08:07:54.156] | : Future state: ‘finished’
[08:07:54.156] | : signalConditions() ...
[08:07:54.156] | : . include = ‘condition’
[08:07:54.156] | : . exclude = ‘immediateCondition’
[08:07:54.156] | : . resignal = TRUE
[08:07:54.156] | : . Number of conditions: 8
[08:07:54.157] | : .  int 8
[08:07:54.157] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.157] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.107] | : . ' , ; attachPackages() ...
[08:07:54.157] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.157] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.107] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:54.158] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.158] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.107] | : . ' , ; attachPackages() ... done
[08:07:54.158] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.158] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.107] | : . ' , ; attachPackages() ...
[08:07:54.158] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.158] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.107] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:54.158] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.158] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.107] | : . ' , ; attachPackages() ... done
[08:07:54.159] | : . Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.159] | : . Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[08:07:54.159] | : . Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.159] | : . Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
 done
[08:07:54.159] | : signalConditions() ... done
[08:07:54.159] | relay conditions ... done
[08:07:54.159] value() for SequentialFuture (<unnamed-1>) ... done
[08:07:54.161] resolved() for Future (<unnamed-2>) ...
[08:07:54.161] | state: ‘created’
[08:07:54.161] | run: TRUE
[08:07:54.161] | run() ...
[08:07:54.161] | : run() for ‘Future’ (<unnamed-2>) ...
[08:07:54.161] | : . state: ‘created’
[08:07:54.161] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.161] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.161] | : . Using SequentialFutureBackend ...
[08:07:54.162] | : . ' Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:07:54.162] | : . ' Launching futures ...
[08:07:54.162] | : . ' , launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:54.162] | : . ' , ; getFutureData() ...
[08:07:54.162] | : . ' , ; ` getFutureCore() ...
[08:07:54.162] | : . ' , ; ` | Packages needed by the future expression (n = 1): ‘future’
[08:07:54.162] | : . ' , ; ` getFutureCore() ... done
[08:07:54.162] | : . ' , ; ` getFutureCapture() ...
[08:07:54.162] | : . ' , ; ` getFutureCapture() ... done
[08:07:54.163] | : . ' , ; ` getFutureContext() ...
[08:07:54.163] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.163] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:07:54.163] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.163] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:07:54.163] | : . ' , ; ` getFutureContext() ... done
[08:07:54.163] | : . ' , ; getFutureData() ... done
[08:07:54.165] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.165] | : . ' , ; ` Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:54.165] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.165] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:54.165] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:54.165] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:54.165] | : . ' , ; ` | : New stack:
[08:07:54.165] | : . ' , ; ` | : List of 1
[08:07:54.165] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.165] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.165] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:54.165] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.165] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.165] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.165] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.165] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.168] | : . ' , ; ` | : Old stack:
[08:07:54.168] | : . ' , ; ` | : List of 1
[08:07:54.168] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.168] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.168] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:54.168] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.168] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.168] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.168] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:54.168] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b9af4c98> 
[08:07:54.168] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.168] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.168] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.171] | : . ' , ; ` | : Not identical
[08:07:54.171] | : . ' , ; ` | : all.equal() for future ...
[08:07:54.171] | : . ' , ; ` | : . List of 2
[08:07:54.171] | : . ' , ; ` | : .  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.171] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.171] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:07:54.171] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.171] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.171] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.171] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.171] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.171] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.171] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:54.171] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.171] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.171] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.171] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:54.171] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b9af4c98> 
[08:07:54.171] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.171] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.178] | : . ' , ; ` | : all.equal() for future ... done
[08:07:54.178] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:54.178] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:54.178] | : . ' , ; ` | List of future strategies:
[08:07:54.178] | : . ' , ; ` | 1. sequential:
[08:07:54.178] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:54.178] | : . ' , ; ` |    - tweaked: FALSE
[08:07:54.178] | : . ' , ; ` |    - call: plan(sequential)
[08:07:54.179] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:54.179] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:54.179] | : . ' , ; assign_globals() ...
[08:07:54.179] | : . ' , ; List of 4
[08:07:54.179] | : . ' , ;  $ ii   : int 2
[08:07:54.179] | : . ' , ;  $ n    : int 4
[08:07:54.179] | : . ' , ;  $ C    : cplx [1:25, 1:25] -0.719-1.5i -0.719-1.44i -0.719-1.38i ...
[08:07:54.179] | : . ' , ;   ..- attr(*, "region")=List of 2
[08:07:54.179] | : . ' , ;   .. ..$ xrange: num [1:2] -0.719 0.75
[08:07:54.179] | : . ' , ;   .. ..$ yrange: num [1:2] -1.5 -0.0306
[08:07:54.179] | : . ' , ;   ..- attr(*, "tile")= int [1:2] 1 2
[08:07:54.179] | : . ' , ;  $ delay:function (counts)  
[08:07:54.179] | : . ' , ;   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[08:07:54.179] | : . ' , ;   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x55c5b92f6de8> 
[08:07:54.179] | : . ' , ;  - attr(*, "where")=List of 4
[08:07:54.179] | : . ' , ;   ..$ ii   :<environment: 0x55c5b75e46a8> 
[08:07:54.179] | : . ' , ;   ..$ n    :<environment: R_GlobalEnv> 
[08:07:54.179] | : . ' , ;   ..$ C    :<environment: 0x55c5b75e46a8> 
[08:07:54.179] | : . ' , ;   ..$ delay:<environment: R_GlobalEnv> 
[08:07:54.179] | : . ' , ;  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:54.179] | : . ' , ;  - attr(*, "resolved")= logi FALSE
[08:07:54.179] | : . ' , ;  - attr(*, "total_size")= num NA
[08:07:54.179] | : . ' , ;  - attr(*, "already-done")= logi TRUE
[08:07:54.185] | : . ' , ; - copied ‘ii’ to environment
[08:07:54.185] | : . ' , ; - copied ‘n’ to environment
[08:07:54.186] | : . ' , ; - copied ‘C’ to environment
[08:07:54.186] | : . ' , ; - reassign environment for ‘delay’ [where=globalenv()]
[08:07:54.186] | : . ' , ; - copied ‘delay’ to environment
[08:07:54.186] | : . ' , ; assign_globals() ... done
[08:07:54.189] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:54.189] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:54.189] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:54.189] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:07:54.189] | : . ' , ; ` | : . New stack:
[08:07:54.189] | : . ' , ; ` | : . List of 1
[08:07:54.189] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.189] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.189] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:54.189] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.189] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.189] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.189] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:54.189] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b9af4c98> 
[08:07:54.189] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.189] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.189] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.194] | : . ' , ; ` | : . Old stack:
[08:07:54.194] | : . ' , ; ` | : . List of 1
[08:07:54.194] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.194] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.194] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:54.194] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.194] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.194] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.194] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:54.194] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b9af4c98> 
[08:07:54.194] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.194] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.194] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.197] | : . ' , ; ` | : . Identical
[08:07:54.197] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:07:54.197] | : . ' , ; ` | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:54.197] | : . ' , ; ` | : List of future strategies:
[08:07:54.197] | : . ' , ; ` | : 1. sequential:
[08:07:54.197] | : . ' , ; ` | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:54.197] | : . ' , ; ` | :    - tweaked: FALSE
[08:07:54.197] | : . ' , ; ` | :    - call: plan(sequential)
[08:07:54.198] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:54.198] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:54.198] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:54.198] | : . ' , ; SequentialFuture started (and completed)
[08:07:54.198] | : . ' , ; signalConditions() ...
[08:07:54.199] | : . ' , ; ` include = ‘immediateCondition’
[08:07:54.199] | : . ' , ; ` exclude = 
[08:07:54.199] | : . ' , ; ` resignal = FALSE
[08:07:54.199] | : . ' , ; ` Number of conditions: 8
[08:07:54.199] | : . ' , ; `  int 8
[08:07:54.199] | : . ' , ; ` Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.199] | : . ' , ; ` Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.200] | : . ' , ; ` Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.200] | : . ' , ; ` Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.200] | : . ' , ; ` Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.200] | : . ' , ; ` Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.200] | : . ' , ; ` Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.200] | : . ' , ; ` Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.200] | : . ' , ; signalConditions() ... done
[08:07:54.200] | : . ' , launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:54.200] | : . ' Launching futures ... done
[08:07:54.200] | : . ' Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:54.201] | : . Using SequentialFutureBackend ... done
[08:07:54.201] | : run() for ‘Future’ (<unnamed-2>) ... done
[08:07:54.201] | run() ... done
[08:07:54.201] | resolved() ...
[08:07:54.201] | : resolved() for SequentialFuture (<unnamed-2>) ...
[08:07:54.201] | : . state: ‘finished’
[08:07:54.201] | : . run: TRUE
[08:07:54.201] | : . result: ‘FutureResult’
[08:07:54.201] | : resolved() for SequentialFuture (<unnamed-2>) ... done
[08:07:54.201] | : resolved: TRUE
[08:07:54.202] | resolved() ... done
[08:07:54.202] resolved() for Future (<unnamed-2>) ... done
Plotting tile #2 of 4 ...
[08:07:54.202] value() for SequentialFuture (<unnamed-2>) ...
[08:07:54.202] | signalConditions() ...
[08:07:54.202] | : include = ‘immediateCondition’
[08:07:54.202] | : exclude = 
[08:07:54.202] | : resignal = FALSE
[08:07:54.202] | : Number of conditions: 8
[08:07:54.202] | :  int 8
[08:07:54.203] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.203] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.203] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.203] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.203] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.203] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.203] | : Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.203] | : Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.204] | signalConditions() ... done
[08:07:54.204] | relay stdout ...
[08:07:54.204] | relay stdout ... done
[08:07:54.204] | check for misuse ...
[08:07:54.204] | check for misuse ... done
[08:07:54.204] | relay conditions ...
[08:07:54.204] | : Future state: ‘finished’
[08:07:54.204] | : signalConditions() ...
[08:07:54.204] | : . include = ‘condition’
[08:07:54.204] | : . exclude = ‘immediateCondition’
[08:07:54.205] | : . resignal = TRUE
[08:07:54.205] | : . Number of conditions: 8
[08:07:54.205] | : .  int 8
[08:07:54.205] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.205] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.163] | : . ' , ; attachPackages() ...
[08:07:54.205] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.205] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.164] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:54.206] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.206] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.164] | : . ' , ; attachPackages() ... done
[08:07:54.206] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.206] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.164] | : . ' , ; attachPackages() ...
[08:07:54.206] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.206] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.164] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:54.206] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.206] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.164] | : . ' , ; attachPackages() ... done
[08:07:54.207] | : . Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.207] | : . Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[08:07:54.207] | : . Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.207] | : . Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
 done
[08:07:54.207] | : signalConditions() ... done
[08:07:54.207] | relay conditions ... done
[08:07:54.207] value() for SequentialFuture (<unnamed-2>) ... done
[08:07:54.208] resolved() for Future (<unnamed-3>) ...
[08:07:54.208] | state: ‘created’
[08:07:54.208] | run: TRUE
[08:07:54.208] | run() ...
[08:07:54.208] | : run() for ‘Future’ (<unnamed-3>) ...
[08:07:54.208] | : . state: ‘created’
[08:07:54.208] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.209] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.209] | : . Using SequentialFutureBackend ...
[08:07:54.209] | : . ' Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:07:54.209] | : . ' Launching futures ...
[08:07:54.209] | : . ' , launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:54.209] | : . ' , ; getFutureData() ...
[08:07:54.209] | : . ' , ; ` getFutureCore() ...
[08:07:54.210] | : . ' , ; ` | Packages needed by the future expression (n = 1): ‘future’
[08:07:54.211] | : . ' , ; ` getFutureCore() ... done
[08:07:54.211] | : . ' , ; ` getFutureCapture() ...
[08:07:54.211] | : . ' , ; ` getFutureCapture() ... done
[08:07:54.211] | : . ' , ; ` getFutureContext() ...
[08:07:54.211] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.211] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:07:54.211] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.211] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:07:54.211] | : . ' , ; ` getFutureContext() ... done
[08:07:54.211] | : . ' , ; getFutureData() ... done
[08:07:54.213] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.213] | : . ' , ; ` Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:54.213] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.213] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:54.213] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:54.214] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:54.214] | : . ' , ; ` | : New stack:
[08:07:54.214] | : . ' , ; ` | : List of 1
[08:07:54.214] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.214] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.214] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:54.214] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.214] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.214] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.214] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.214] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.216] | : . ' , ; ` | : Old stack:
[08:07:54.216] | : . ' , ; ` | : List of 1
[08:07:54.216] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.216] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.216] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:54.216] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.216] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.216] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.216] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:54.216] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b9af4c98> 
[08:07:54.216] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.216] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.216] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.219] | : . ' , ; ` | : Not identical
[08:07:54.219] | : . ' , ; ` | : all.equal() for future ...
[08:07:54.220] | : . ' , ; ` | : . List of 2
[08:07:54.220] | : . ' , ; ` | : .  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.220] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.220] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:07:54.220] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.220] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.220] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.220] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.220] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.220] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.220] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:54.220] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.220] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.220] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.220] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:54.220] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b9af4c98> 
[08:07:54.220] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.220] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.225] | : . ' , ; ` | : all.equal() for future ... done
[08:07:54.225] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:54.225] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:54.225] | : . ' , ; ` | List of future strategies:
[08:07:54.225] | : . ' , ; ` | 1. sequential:
[08:07:54.225] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:54.225] | : . ' , ; ` |    - tweaked: FALSE
[08:07:54.225] | : . ' , ; ` |    - call: plan(sequential)
[08:07:54.225] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:54.225] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:54.226] | : . ' , ; assign_globals() ...
[08:07:54.226] | : . ' , ; List of 4
[08:07:54.226] | : . ' , ;  $ ii   : int 3
[08:07:54.226] | : . ' , ;  $ n    : int 4
[08:07:54.226] | : . ' , ;  $ C    : cplx [1:25, 1:25] -2.25+0.0306i -2.25+0.0918i -2.25+0.1531i ...
[08:07:54.226] | : . ' , ;   ..- attr(*, "region")=List of 2
[08:07:54.226] | : . ' , ;   .. ..$ xrange: num [1:2] -2.25 -0.781
[08:07:54.226] | : . ' , ;   .. ..$ yrange: num [1:2] 0.0306 1.5
[08:07:54.226] | : . ' , ;   ..- attr(*, "tile")= int [1:2] 2 1
[08:07:54.226] | : . ' , ;  $ delay:function (counts)  
[08:07:54.226] | : . ' , ;   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[08:07:54.226] | : . ' , ;   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x55c5b92f6de8> 
[08:07:54.226] | : . ' , ;  - attr(*, "where")=List of 4
[08:07:54.226] | : . ' , ;   ..$ ii   :<environment: 0x55c5b9e3b6d0> 
[08:07:54.226] | : . ' , ;   ..$ n    :<environment: R_GlobalEnv> 
[08:07:54.226] | : . ' , ;   ..$ C    :<environment: 0x55c5b9e3b6d0> 
[08:07:54.226] | : . ' , ;   ..$ delay:<environment: R_GlobalEnv> 
[08:07:54.226] | : . ' , ;  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:54.226] | : . ' , ;  - attr(*, "resolved")= logi FALSE
[08:07:54.226] | : . ' , ;  - attr(*, "total_size")= num NA
[08:07:54.226] | : . ' , ;  - attr(*, "already-done")= logi TRUE
[08:07:54.233] | : . ' , ; - copied ‘ii’ to environment
[08:07:54.233] | : . ' , ; - copied ‘n’ to environment
[08:07:54.233] | : . ' , ; - copied ‘C’ to environment
[08:07:54.233] | : . ' , ; - reassign environment for ‘delay’ [where=globalenv()]
[08:07:54.233] | : . ' , ; - copied ‘delay’ to environment
[08:07:54.233] | : . ' , ; assign_globals() ... done
[08:07:54.236] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:54.236] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:54.236] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:54.236] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:07:54.236] | : . ' , ; ` | : . New stack:
[08:07:54.236] | : . ' , ; ` | : . List of 1
[08:07:54.236] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.236] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.236] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:54.236] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.236] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.236] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.236] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:54.236] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b9af4c98> 
[08:07:54.236] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.236] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.236] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.239] | : . ' , ; ` | : . Old stack:
[08:07:54.239] | : . ' , ; ` | : . List of 1
[08:07:54.239] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.239] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.239] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:54.239] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.239] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.239] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.239] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:54.239] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b9af4c98> 
[08:07:54.239] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.239] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.239] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.242] | : . ' , ; ` | : . Identical
[08:07:54.243] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:07:54.243] | : . ' , ; ` | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:54.243] | : . ' , ; ` | : List of future strategies:
[08:07:54.243] | : . ' , ; ` | : 1. sequential:
[08:07:54.243] | : . ' , ; ` | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:54.243] | : . ' , ; ` | :    - tweaked: FALSE
[08:07:54.243] | : . ' , ; ` | :    - call: plan(sequential)
[08:07:54.243] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:54.243] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:54.244] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:54.245] | : . ' , ; SequentialFuture started (and completed)
[08:07:54.245] | : . ' , ; signalConditions() ...
[08:07:54.245] | : . ' , ; ` include = ‘immediateCondition’
[08:07:54.245] | : . ' , ; ` exclude = 
[08:07:54.245] | : . ' , ; ` resignal = FALSE
[08:07:54.245] | : . ' , ; ` Number of conditions: 8
[08:07:54.245] | : . ' , ; `  int 8
[08:07:54.246] | : . ' , ; ` Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.246] | : . ' , ; ` Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.246] | : . ' , ; ` Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.246] | : . ' , ; ` Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.246] | : . ' , ; ` Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.246] | : . ' , ; ` Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.246] | : . ' , ; ` Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.246] | : . ' , ; ` Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.247] | : . ' , ; signalConditions() ... done
[08:07:54.247] | : . ' , launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:54.247] | : . ' Launching futures ... done
[08:07:54.247] | : . ' Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:54.247] | : . Using SequentialFutureBackend ... done
[08:07:54.247] | : run() for ‘Future’ (<unnamed-3>) ... done
[08:07:54.247] | run() ... done
[08:07:54.247] | resolved() ...
[08:07:54.247] | : resolved() for SequentialFuture (<unnamed-3>) ...
[08:07:54.247] | : . state: ‘finished’
[08:07:54.248] | : . run: TRUE
[08:07:54.248] | : . result: ‘FutureResult’
[08:07:54.248] | : resolved() for SequentialFuture (<unnamed-3>) ... done
[08:07:54.248] | : resolved: TRUE
[08:07:54.248] | resolved() ... done
[08:07:54.248] resolved() for Future (<unnamed-3>) ... done
Plotting tile #3 of 4 ...
[08:07:54.248] value() for SequentialFuture (<unnamed-3>) ...
[08:07:54.248] | signalConditions() ...
[08:07:54.248] | : include = ‘immediateCondition’
[08:07:54.249] | : exclude = 
[08:07:54.249] | : resignal = FALSE
[08:07:54.249] | : Number of conditions: 8
[08:07:54.249] | :  int 8
[08:07:54.249] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.249] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.249] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.249] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.250] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.250] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.250] | : Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.250] | : Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.250] | signalConditions() ... done
[08:07:54.250] | relay stdout ...
[08:07:54.250] | relay stdout ... done
[08:07:54.250] | check for misuse ...
[08:07:54.250] | check for misuse ... done
[08:07:54.250] | relay conditions ...
[08:07:54.251] | : Future state: ‘finished’
[08:07:54.251] | : signalConditions() ...
[08:07:54.251] | : . include = ‘condition’
[08:07:54.251] | : . exclude = ‘immediateCondition’
[08:07:54.251] | : . resignal = TRUE
[08:07:54.251] | : . Number of conditions: 8
[08:07:54.251] | : .  int 8
[08:07:54.252] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.252] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.212] | : . ' , ; attachPackages() ...
[08:07:54.252] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.252] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.212] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:54.252] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.252] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.212] | : . ' , ; attachPackages() ... done
[08:07:54.252] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.252] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.212] | : . ' , ; attachPackages() ...
[08:07:54.252] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.253] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.212] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:54.253] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.253] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.212] | : . ' , ; attachPackages() ... done
[08:07:54.253] | : . Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.253] | : . Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[08:07:54.253] | : . Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.253] | : . Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
 done
[08:07:54.253] | : signalConditions() ... done
[08:07:54.253] | relay conditions ... done
[08:07:54.254] value() for SequentialFuture (<unnamed-3>) ... done
[08:07:54.254] resolved() for Future (<unnamed-4>) ...
[08:07:54.254] | state: ‘created’
[08:07:54.254] | run: TRUE
[08:07:54.254] | run() ...
[08:07:54.254] | : run() for ‘Future’ (<unnamed-4>) ...
[08:07:54.255] | : . state: ‘created’
[08:07:54.255] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.255] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.255] | : . Using SequentialFutureBackend ...
[08:07:54.255] | : . ' Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:07:54.255] | : . ' Launching futures ...
[08:07:54.255] | : . ' , launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:54.255] | : . ' , ; getFutureData() ...
[08:07:54.255] | : . ' , ; ` getFutureCore() ...
[08:07:54.256] | : . ' , ; ` | Packages needed by the future expression (n = 1): ‘future’
[08:07:54.256] | : . ' , ; ` getFutureCore() ... done
[08:07:54.256] | : . ' , ; ` getFutureCapture() ...
[08:07:54.256] | : . ' , ; ` getFutureCapture() ... done
[08:07:54.256] | : . ' , ; ` getFutureContext() ...
[08:07:54.256] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.256] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:07:54.256] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.256] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:07:54.256] | : . ' , ; ` getFutureContext() ... done
[08:07:54.257] | : . ' , ; getFutureData() ... done
[08:07:54.258] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.258] | : . ' , ; ` Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:54.258] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.258] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:54.258] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:54.259] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:54.259] | : . ' , ; ` | : New stack:
[08:07:54.259] | : . ' , ; ` | : List of 1
[08:07:54.259] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.259] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.259] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:54.259] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.259] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.259] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.259] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.259] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.262] | : . ' , ; ` | : Old stack:
[08:07:54.262] | : . ' , ; ` | : List of 1
[08:07:54.262] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.262] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.262] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:54.262] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.262] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.262] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.262] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:54.262] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b9af4c98> 
[08:07:54.262] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.262] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.262] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.265] | : . ' , ; ` | : Not identical
[08:07:54.265] | : . ' , ; ` | : all.equal() for future ...
[08:07:54.266] | : . ' , ; ` | : . List of 2
[08:07:54.266] | : . ' , ; ` | : .  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.266] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.266] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:07:54.266] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.266] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.266] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.266] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.266] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.266] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.266] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:54.266] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.266] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.266] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.266] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:54.266] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b9af4c98> 
[08:07:54.266] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.266] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.270] | : . ' , ; ` | : all.equal() for future ... done
[08:07:54.271] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:54.271] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:54.271] | : . ' , ; ` | List of future strategies:
[08:07:54.271] | : . ' , ; ` | 1. sequential:
[08:07:54.271] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:54.271] | : . ' , ; ` |    - tweaked: FALSE
[08:07:54.271] | : . ' , ; ` |    - call: plan(sequential)
[08:07:54.271] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:54.271] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:54.272] | : . ' , ; assign_globals() ...
[08:07:54.272] | : . ' , ; List of 4
[08:07:54.272] | : . ' , ;  $ ii   : int 4
[08:07:54.272] | : . ' , ;  $ n    : int 4
[08:07:54.272] | : . ' , ;  $ C    : cplx [1:25, 1:25] -0.719+0.0306i -0.719+0.0918i -0.719+0.1531i ...
[08:07:54.272] | : . ' , ;   ..- attr(*, "region")=List of 2
[08:07:54.272] | : . ' , ;   .. ..$ xrange: num [1:2] -0.719 0.75
[08:07:54.272] | : . ' , ;   .. ..$ yrange: num [1:2] 0.0306 1.5
[08:07:54.272] | : . ' , ;   ..- attr(*, "tile")= int [1:2] 2 2
[08:07:54.272] | : . ' , ;  $ delay:function (counts)  
[08:07:54.272] | : . ' , ;   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[08:07:54.272] | : . ' , ;   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x55c5b92f6de8> 
[08:07:54.272] | : . ' , ;  - attr(*, "where")=List of 4
[08:07:54.272] | : . ' , ;   ..$ ii   :<environment: 0x55c5b91cdf40> 
[08:07:54.272] | : . ' , ;   ..$ n    :<environment: R_GlobalEnv> 
[08:07:54.272] | : . ' , ;   ..$ C    :<environment: 0x55c5b91cdf40> 
[08:07:54.272] | : . ' , ;   ..$ delay:<environment: R_GlobalEnv> 
[08:07:54.272] | : . ' , ;  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:54.272] | : . ' , ;  - attr(*, "resolved")= logi FALSE
[08:07:54.272] | : . ' , ;  - attr(*, "total_size")= num NA
[08:07:54.272] | : . ' , ;  - attr(*, "already-done")= logi TRUE
[08:07:54.278] | : . ' , ; - copied ‘ii’ to environment
[08:07:54.279] | : . ' , ; - copied ‘n’ to environment
[08:07:54.279] | : . ' , ; - copied ‘C’ to environment
[08:07:54.279] | : . ' , ; - reassign environment for ‘delay’ [where=globalenv()]
[08:07:54.279] | : . ' , ; - copied ‘delay’ to environment
[08:07:54.279] | : . ' , ; assign_globals() ... done
[08:07:54.282] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:54.282] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:54.282] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:54.282] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:07:54.282] | : . ' , ; ` | : . New stack:
[08:07:54.282] | : . ' , ; ` | : . List of 1
[08:07:54.282] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.282] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.282] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:54.282] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.282] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.282] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.282] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:54.282] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b9af4c98> 
[08:07:54.282] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.282] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.282] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.285] | : . ' , ; ` | : . Old stack:
[08:07:54.286] | : . ' , ; ` | : . List of 1
[08:07:54.286] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.286] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.286] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:54.286] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.286] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.286] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.286] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:54.286] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b9af4c98> 
[08:07:54.286] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.286] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.286] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.289] | : . ' , ; ` | : . Identical
[08:07:54.289] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:07:54.289] | : . ' , ; ` | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:54.289] | : . ' , ; ` | : List of future strategies:
[08:07:54.289] | : . ' , ; ` | : 1. sequential:
[08:07:54.289] | : . ' , ; ` | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:54.289] | : . ' , ; ` | :    - tweaked: FALSE
[08:07:54.289] | : . ' , ; ` | :    - call: plan(sequential)
[08:07:54.289] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:54.289] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:54.289] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:54.290] | : . ' , ; SequentialFuture started (and completed)
[08:07:54.290] | : . ' , ; signalConditions() ...
[08:07:54.290] | : . ' , ; ` include = ‘immediateCondition’
[08:07:54.290] | : . ' , ; ` exclude = 
[08:07:54.290] | : . ' , ; ` resignal = FALSE
[08:07:54.290] | : . ' , ; ` Number of conditions: 8
[08:07:54.290] | : . ' , ; `  int 8
[08:07:54.291] | : . ' , ; ` Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.291] | : . ' , ; ` Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.291] | : . ' , ; ` Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.291] | : . ' , ; ` Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.291] | : . ' , ; ` Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.291] | : . ' , ; ` Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.291] | : . ' , ; ` Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.292] | : . ' , ; ` Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.292] | : . ' , ; signalConditions() ... done
[08:07:54.292] | : . ' , launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:54.292] | : . ' Launching futures ... done
[08:07:54.292] | : . ' Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:54.292] | : . Using SequentialFutureBackend ... done
[08:07:54.292] | : run() for ‘Future’ (<unnamed-4>) ... done
[08:07:54.292] | run() ... done
[08:07:54.292] | resolved() ...
[08:07:54.292] | : resolved() for SequentialFuture (<unnamed-4>) ...
[08:07:54.293] | : . state: ‘finished’
[08:07:54.293] | : . run: TRUE
[08:07:54.293] | : . result: ‘FutureResult’
[08:07:54.293] | : resolved() for SequentialFuture (<unnamed-4>) ... done
[08:07:54.293] | : resolved: TRUE
[08:07:54.293] | resolved() ... done
[08:07:54.293] resolved() for Future (<unnamed-4>) ... done
Plotting tile #4 of 4 ...
[08:07:54.293] value() for SequentialFuture (<unnamed-4>) ...
[08:07:54.293] | signalConditions() ...
[08:07:54.293] | : include = ‘immediateCondition’
[08:07:54.294] | : exclude = 
[08:07:54.294] | : resignal = FALSE
[08:07:54.294] | : Number of conditions: 8
[08:07:54.294] | :  int 8
[08:07:54.294] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.321] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.321] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.321] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.321] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.321] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.321] | : Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.322] | : Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.322] | signalConditions() ... done
[08:07:54.322] | relay stdout ...
[08:07:54.322] | relay stdout ... done
[08:07:54.322] | check for misuse ...
[08:07:54.322] | check for misuse ... done
[08:07:54.322] | relay conditions ...
[08:07:54.322] | : Future state: ‘finished’
[08:07:54.323] | : signalConditions() ...
[08:07:54.323] | : . include = ‘condition’
[08:07:54.323] | : . exclude = ‘immediateCondition’
[08:07:54.323] | : . resignal = TRUE
[08:07:54.323] | : . Number of conditions: 8
[08:07:54.323] | : .  int 8
[08:07:54.324] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.324] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.257] | : . ' , ; attachPackages() ...
[08:07:54.324] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.324] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.257] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:54.324] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.324] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.257] | : . ' , ; attachPackages() ... done
[08:07:54.324] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.324] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.257] | : . ' , ; attachPackages() ...
[08:07:54.325] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.325] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.257] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:54.325] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.325] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.258] | : . ' , ; attachPackages() ... done
[08:07:54.325] | : . Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.325] | : . Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[08:07:54.325] | : . Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.325] | : . Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
 done
[08:07:54.325] | : signalConditions() ... done
[08:07:54.326] | relay conditions ... done
[08:07:54.326] value() for SequentialFuture (<unnamed-4>) ... done

> close.screen()
[1] 1 2 3 4

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('sequential') ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
- plan('multicore') ...
[08:07:54.327] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.327] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:07:54.328] | : all.equal() for FutureStrategyList ...
[08:07:54.328] | : . New stack:
[08:07:54.328] | : . List of 1
[08:07:54.328] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:54.328] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:54.328] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:54.328] | : .   ..- attr(*, "init")= logi TRUE
[08:07:54.328] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.328] | : .     ...)  
[08:07:54.328] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.328] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.328] | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:54.328] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.330] | : . Old stack:
[08:07:54.331] | : . List of 1
[08:07:54.331] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.331] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.331] | : .   ..- attr(*, "init")= chr "done"
[08:07:54.331] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.331] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.331] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.331] | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:54.331] | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b9af4c98> 
[08:07:54.331] | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.331] | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.331] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.334] | : . Not identical
[08:07:54.334] | : . all.equal() for future ...
[08:07:54.334] | : . ' List of 2
[08:07:54.334] | : . '  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:54.334] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:07:54.334] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:54.334] | : . '   ..- attr(*, "init")= logi TRUE
[08:07:54.334] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.334] | : . '     ...)  
[08:07:54.334] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.334] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.334] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:07:54.334] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.334] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.334] | : . '   ..- attr(*, "init")= chr "done"
[08:07:54.334] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.334] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.334] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.334] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:07:54.334] | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b9af4c98> 
[08:07:54.334] | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.334] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.339] | : . ' Formals differ
[08:07:54.339] | : . all.equal() for future ... done
[08:07:54.339] | : . Future strategies differ at level 1
[08:07:54.339] | : all.equal() for FutureStrategyList ... done
[08:07:54.340] | : plan(): Setting new future backend stack:
[08:07:54.341] | : List of future strategies:
[08:07:54.341] | : 1. multicore:
[08:07:54.341] | :    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:07:54.341] | :    - tweaked: FALSE
[08:07:54.341] | :    - call: plan(strategy)
[08:07:54.341] | : List of 1
[08:07:54.341] | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:54.341] | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:54.341] | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:54.341] | :   ..- attr(*, "init")= logi TRUE
[08:07:54.341] | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.341] | :     ...)  
[08:07:54.341] | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.341] | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.341] | :   ..- attr(*, "call")= language plan(strategy)
[08:07:54.341] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.344] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:07:54.345] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.345] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:54.345] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.345] | : . Legacy shutdown of cluster workers ...
[08:07:54.345] | : . ' Stopping existing cluster ...
[08:07:54.345] | : . ' , No pre-existing cluster. Skipping
[08:07:54.345] | : . ' Stopping existing cluster ... done
[08:07:54.346] | : . Legacy shutdown of cluster workers ... done
[08:07:54.346] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:07:54.346] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:07:54.346] | : . function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:54.346] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:54.346] | : .  - attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:54.346] | : .  - attr(*, "init")= logi TRUE
[08:07:54.346] | : .  - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.346] | : .     ...)  
[08:07:54.346] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.346] | : .  - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.346] | : .  - attr(*, "call")= language plan(strategy)
[08:07:54.348] | : . init: TRUE
[08:07:54.348] | : . makeFutureBackend(<multicore>) ...
[08:07:54.348] | : . ' Backend function: <‘NULL’>
[08:07:54.348] | : . ' Evaluator tweak arguments: [n=0]
[08:07:54.348] | : . '  list()
[08:07:54.349] | : . ' Evaluator formal arguments: [n=3]
[08:07:54.349] | : . '  list()
[08:07:54.349] | : . ' Backend factory arguments: [n=3]
[08:07:54.349] | : . ' Dotted pair list of 3
[08:07:54.349] | : . '  $ workers    : language availableCores(constraints = "multicore")
[08:07:54.349] | : . '  $ gc         : logi FALSE
[08:07:54.349] | : . '  $ earlySignal: logi FALSE
[08:07:54.352] | : . ' Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:54.353] | : . makeFutureBackend(<multicore>) ... done
[08:07:54.353] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:07:54.353] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.353] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.353] | : plan(): nbrOfWorkers() = 2
[08:07:54.353] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:07:54.353] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library(future)

> library(graphics)

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1] 5 6 7 8

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[08:07:54.357] future(..., label = NULL) ...
[08:07:54.357] | lazy: TRUE
[08:07:54.357] | stdout: TRUE
[08:07:54.358] | conditions: [n=1] ‘condition’
[08:07:54.358] | gc: FALSE
[08:07:54.358] | earlySignal: FALSE
[08:07:54.358] | getGlobalsAndPackages() ...
[08:07:54.358] | : Searching for globals ...
[08:07:54.384] | : . globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[08:07:54.384] | : Searching for globals ... done
[08:07:54.384] | : Resolving globals: FALSE
[08:07:54.384] | : Search for packages associated with the globals ...
[08:07:54.384] | : . Packages associated with globals: [2] ‘base’, ‘future’
[08:07:54.385] | : . Packages: [2] ‘base’, ‘future’
[08:07:54.385] | : Search for packages associated with the globals ... done
[08:07:54.385] | : Packages after dropping 'base': [1] ‘future’
[08:07:54.385] | : Packages after dropping non-attached packages: [1] ‘future’
[08:07:54.385] | : globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[08:07:54.385] | : packages: [1] ‘future’
[08:07:54.385] | getGlobalsAndPackages() ... done
[08:07:54.386] future(..., label = NULL) ... done
 2[08:07:54.389] future(..., label = NULL) ...
[08:07:54.390] | lazy: TRUE
[08:07:54.390] | stdout: TRUE
[08:07:54.390] | conditions: [n=1] ‘condition’
[08:07:54.390] | gc: FALSE
[08:07:54.390] | earlySignal: FALSE
[08:07:54.390] | getGlobalsAndPackages() ...
[08:07:54.390] | : Searching for globals ...
[08:07:54.414] | : . globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[08:07:54.414] | : Searching for globals ... done
[08:07:54.415] | : Resolving globals: FALSE
[08:07:54.415] | : Search for packages associated with the globals ...
[08:07:54.415] | : . Packages associated with globals: [2] ‘base’, ‘future’
[08:07:54.415] | : . Packages: [2] ‘base’, ‘future’
[08:07:54.415] | : Search for packages associated with the globals ... done
[08:07:54.415] | : Packages after dropping 'base': [1] ‘future’
[08:07:54.416] | : Packages after dropping non-attached packages: [1] ‘future’
[08:07:54.416] | : globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[08:07:54.416] | : packages: [1] ‘future’
[08:07:54.416] | getGlobalsAndPackages() ... done
[08:07:54.416] future(..., label = NULL) ... done
 3[08:07:54.416] future(..., label = NULL) ...
[08:07:54.416] | lazy: TRUE
[08:07:54.417] | stdout: TRUE
[08:07:54.417] | conditions: [n=1] ‘condition’
[08:07:54.417] | gc: FALSE
[08:07:54.417] | earlySignal: FALSE
[08:07:54.417] | getGlobalsAndPackages() ...
[08:07:54.417] | : Searching for globals ...
[08:07:54.441] | : . globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[08:07:54.441] | : Searching for globals ... done
[08:07:54.441] | : Resolving globals: FALSE
[08:07:54.441] | : Search for packages associated with the globals ...
[08:07:54.441] | : . Packages associated with globals: [2] ‘base’, ‘future’
[08:07:54.442] | : . Packages: [2] ‘base’, ‘future’
[08:07:54.442] | : Search for packages associated with the globals ... done
[08:07:54.442] | : Packages after dropping 'base': [1] ‘future’
[08:07:54.442] | : Packages after dropping non-attached packages: [1] ‘future’
[08:07:54.442] | : globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[08:07:54.442] | : packages: [1] ‘future’
[08:07:54.443] | getGlobalsAndPackages() ... done
[08:07:54.443] future(..., label = NULL) ... done
 4[08:07:54.443] future(..., label = NULL) ...
[08:07:54.443] | lazy: TRUE
[08:07:54.443] | stdout: TRUE
[08:07:54.443] | conditions: [n=1] ‘condition’
[08:07:54.443] | gc: FALSE
[08:07:54.443] | earlySignal: FALSE
[08:07:54.444] | getGlobalsAndPackages() ...
[08:07:54.444] | : Searching for globals ...
[08:07:54.466] | : . globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[08:07:54.466] | : Searching for globals ... done
[08:07:54.466] | : Resolving globals: FALSE
[08:07:54.466] | : Search for packages associated with the globals ...
[08:07:54.467] | : . Packages associated with globals: [2] ‘base’, ‘future’
[08:07:54.467] | : . Packages: [2] ‘base’, ‘future’
[08:07:54.467] | : Search for packages associated with the globals ... done
[08:07:54.467] | : Packages after dropping 'base': [1] ‘future’
[08:07:54.467] | : Packages after dropping non-attached packages: [1] ‘future’
[08:07:54.467] | : globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[08:07:54.468] | : packages: [1] ‘future’
[08:07:54.468] | getGlobalsAndPackages() ... done
[08:07:54.468] future(..., label = NULL) ... done

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[08:07:54.477] resolved() for Future (<unnamed-5>) ...
[08:07:54.477] | state: ‘created’
[08:07:54.478] | run: TRUE
[08:07:54.478] | run() ...
[08:07:54.478] | : run() for ‘Future’ (<unnamed-5>) ...
[08:07:54.478] | : . state: ‘created’
[08:07:54.478] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.478] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.478] | : . Using MulticoreFutureBackend ...
[08:07:54.478] | : . ' Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:07:54.478] | : . ' Launching futures ...
[08:07:54.479] | : . ' , launchFuture() for MulticoreFutureBackend ...
[08:07:54.479] | : . ' , ; getFutureData() ...
[08:07:54.479] | : . ' , ; ` getFutureCore() ...
[08:07:54.479] | : . ' , ; ` | Packages needed by the future expression (n = 1): ‘future’
[08:07:54.479] | : . ' , ; ` getFutureCore() ... done
[08:07:54.479] | : . ' , ; ` getFutureCapture() ...
[08:07:54.479] | : . ' , ; ` getFutureCapture() ... done
[08:07:54.479] | : . ' , ; ` getFutureContext() ...
[08:07:54.480] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.480] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:07:54.480] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.480] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:07:54.480] | : . ' , ; ` getFutureContext() ... done
[08:07:54.481] | : . ' , ; getFutureData() ... done
[08:07:54.481] | : . ' , ; requestCore(..., workers = 2) ...
[08:07:54.481] | : . ' , ; requestCore(..., workers = 2) ... done
[08:07:54.484] | : . ' , ; MulticoreFuture started
[08:07:54.484] | : . ' , launchFuture() for MulticoreFutureBackend ... done
[08:07:54.485] | : . ' Launching futures ... done
[08:07:54.485] | : . ' Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:54.485] | : . Using MulticoreFutureBackend ... done
[08:07:54.486] | : run() for ‘Future’ (<unnamed-5>) ... done
[08:07:54.486] | run() ... done
[08:07:54.486] | resolved() ...
[08:07:54.487] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.487] | : . ' , ; ` Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:07:54.488] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.488] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:54.488] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:54.489] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:54.489] | : . ' , ; ` | : New stack:
[08:07:54.489] | : . ' , ; ` | : List of 1
[08:07:54.489] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.489] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.489] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:54.489] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.489] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.489] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.489] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.489] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.494] | : . ' , ; ` | : Old stack:
[08:07:54.498] | : readImmediateCondition() ...
[08:07:54.498] | : . Path: ‘/tmp/RtmpmrlPwL/.future/immediateConditions’
[08:07:54.498] | : . Number of RDS files: 0
[08:07:54.498] | : . Returned conditions set:
[08:07:54.498] | : .  list()
[08:07:54.499] | : readImmediateCondition() ... done
[08:07:54.499] | : resolved: FALSE
[08:07:54.499] | resolved() ... done
[08:07:54.499] resolved() for Future (<unnamed-5>) ... done
[08:07:54.500] resolved() for Future (<unnamed-6>) ...
[08:07:54.500] | state: ‘created’
[08:07:54.500] | run: TRUE
[08:07:54.500] | run() ...
[08:07:54.500] | : run() for ‘Future’ (<unnamed-6>) ...
[08:07:54.500] | : . state: ‘created’
[08:07:54.501] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.501] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.501] | : . Using MulticoreFutureBackend ...
[08:07:54.501] | : . ' Number of futures since start: 1 (1 created, 1 launched, 0 finished)
[08:07:54.501] | : . ' Launching futures ...
[08:07:54.501] | : . ' , launchFuture() for MulticoreFutureBackend ...
[08:07:54.502] | : . ' , ; getFutureData() ...
[08:07:54.502] | : . ' , ; ` getFutureCore() ...
[08:07:54.502] | : . ' , ; ` | Packages needed by the future expression (n = 1): ‘future’
[08:07:54.502] | : . ' , ; ` getFutureCore() ... done
[08:07:54.502] | : . ' , ; ` getFutureCapture() ...
[08:07:54.502] | : . ' , ; ` getFutureCapture() ... done
[08:07:54.503] | : . ' , ; ` getFutureContext() ...
[08:07:54.503] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.503] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:07:54.503] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.503] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:07:54.503] | : . ' , ; ` getFutureContext() ... done
[08:07:54.504] | : . ' , ; getFutureData() ... done
[08:07:54.494] | : . ' , ; ` | : List of 1
[08:07:54.494] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:54.494] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:54.494] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:54.494] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:54.494] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.494] | : . ' , ; ` | :     ...)  
[08:07:54.494] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.494] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.494] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:54.494] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b92a5d28> 
[08:07:54.494] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.494] | : . ' , ; ` | :     ...)  
[08:07:54.494] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.494] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.504] | : . ' , ; ` | : Not identical
[08:07:54.504] | : . ' , ; ` | : all.equal() for future ...
[08:07:54.504] | : . ' , ; requestCore(..., workers = 2) ...
[08:07:54.506] | : . ' , ; requestCore(..., workers = 2) ... done
[08:07:54.509] | : . ' , ; MulticoreFuture started
[08:07:54.510] | : . ' , launchFuture() for MulticoreFutureBackend ... done
[08:07:54.511] | : . ' Launching futures ... done
[08:07:54.504] | : . ' , ; ` | : . List of 2
[08:07:54.504] | : . ' , ; ` | : .  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.504] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.504] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:07:54.504] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.504] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.504] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.504] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.504] | : . ' , ; ` | : .  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:54.504] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:54.504] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:54.504] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:54.504] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.504] | : . ' , ; ` | : .     ...)  
[08:07:54.504] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.504] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.504] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:54.504] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b92a5d28> 
[08:07:54.504] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.504] | : . ' , ; ` | : .     ...)  
[08:07:54.504] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.512] | : . ' Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:54.512] | : . ' , ; ` | : . Formals differ
[08:07:54.513] | : . ' , ; ` | : all.equal() for future ... done
[08:07:54.512] | : . Using MulticoreFutureBackend ... done
[08:07:54.513] | : . ' , ; ` | : Future strategies differ at level 1
[08:07:54.513] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:54.513] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:07:54.513] | : run() for ‘Future’ (<unnamed-6>) ... done
[08:07:54.513] | run() ... done
[08:07:54.513] | : . ' , ; ` | List of future strategies:
[08:07:54.513] | : . ' , ; ` | 1. sequential:
[08:07:54.513] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:54.513] | : . ' , ; ` |    - tweaked: FALSE
[08:07:54.513] | : . ' , ; ` |    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.514] | resolved() ...
[08:07:54.516] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.516] | : . ' , ; ` Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:07:54.517] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.517] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:54.514] | : . ' , ; ` | List of 1
[08:07:54.514] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.514] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.514] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:54.514] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.514] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.514] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.514] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.514] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.518] | : . ' , ; ` | plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:54.518] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:54.518] | : . ' , ; ` | plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:54.518] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.518] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:54.518] | : . ' , ; ` | : plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:07:54.518] | : . ' , ; ` | : New stack:
[08:07:54.518] | : . ' , ; ` | : . function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.518] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.518] | : . ' , ; ` | : .  - attr(*, "init")= logi TRUE
[08:07:54.518] | : . ' , ; ` | : .  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.518] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.518] | : . ' , ; ` | : .  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.518] | : . ' , ; ` | : .  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.521] | : . ' , ; ` | : . init: TRUE
[08:07:54.521] | : . ' , ; ` | : . makeFutureBackend(<sequential>) ...
[08:07:54.521] | : . ' , ; ` | : . ' Backend function: <‘NULL’>
[08:07:54.521] | : . ' , ; ` | : . ' Evaluator tweak arguments: [n=0]
[08:07:54.521] | : . ' , ; ` | : . '  list()
[08:07:54.521] | : . ' , ; ` | : . ' Evaluator formal arguments: [n=2]
[08:07:54.521] | : . ' , ; ` | : . '  list()
[08:07:54.522] | : . ' , ; ` | : . ' Backend factory arguments: [n=2]
[08:07:54.522] | : . ' , ; ` | : . ' Dotted pair list of 2
[08:07:54.522] | : . ' , ; ` | : . '  $ gc         : logi FALSE
[08:07:54.522] | : . ' , ; ` | : . '  $ earlySignal: logi FALSE
[08:07:54.523] | : . ' , ; ` | : . ' Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:54.519] | : . ' , ; ` | : List of 1
[08:07:54.519] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.519] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.519] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:54.519] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.519] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.519] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.519] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.519] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.524] | : . ' , ; ` | : Old stack:
[08:07:54.524] | : readImmediateCondition() ...
[08:07:54.523] | : . ' , ; ` | : . makeFutureBackend(<sequential>) ... done
[08:07:54.525] | : . ' , ; ` | : plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:07:54.525] | : . Path: ‘/tmp/RtmpmrlPwL/.future/immediateConditions’
[08:07:54.525] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.525] | : . ' , ; ` | plan(): nbrOfWorkers() = 1
[08:07:54.526] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:54.525] | : . Number of RDS files: 0
[08:07:54.526] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:54.526] | : . Returned conditions set:
[08:07:54.526] | : . ' , ; assign_globals() ...
[08:07:54.526] | : .  list()
[08:07:54.527] | : readImmediateCondition() ... done
[08:07:54.527] | : resolved: FALSE
[08:07:54.527] | resolved() ... done
[08:07:54.528] resolved() for Future (<unnamed-6>) ... done
[08:07:54.528] resolved() for Future (<unnamed-7>) ...
[08:07:54.528] | state: ‘created’
[08:07:54.528] | run: TRUE
[08:07:54.529] | run() ...
[08:07:54.529] | : run() for ‘Future’ (<unnamed-7>) ...
[08:07:54.529] | : . state: ‘created’
[08:07:54.529] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.530] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.530] | : . Using MulticoreFutureBackend ...
[08:07:54.530] | : . ' Number of futures since start: 2 (2 created, 2 launched, 0 finished)
[08:07:54.531] | : . ' Launching futures ...
[08:07:54.531] | : . ' , launchFuture() for MulticoreFutureBackend ...
[08:07:54.531] | : . ' , ; getFutureData() ...
[08:07:54.531] | : . ' , ; ` getFutureCore() ...
[08:07:54.532] | : . ' , ; ` | Packages needed by the future expression (n = 1): ‘future’
[08:07:54.532] | : . ' , ; ` getFutureCore() ... done
[08:07:54.532] | : . ' , ; ` getFutureCapture() ...
[08:07:54.532] | : . ' , ; ` getFutureCapture() ... done
[08:07:54.533] | : . ' , ; ` getFutureContext() ...
[08:07:54.533] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.524] | : . ' , ; ` | : List of 1
[08:07:54.524] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:54.524] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:54.524] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:54.524] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:54.524] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.524] | : . ' , ; ` | :     ...)  
[08:07:54.524] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.524] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.524] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:54.524] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b92a5d28> 
[08:07:54.524] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.524] | : . ' , ; ` | :     ...)  
[08:07:54.524] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.524] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.526] | : . ' , ; List of 4
[08:07:54.526] | : . ' , ;  $ ii   : int 1
[08:07:54.526] | : . ' , ;  $ n    : int 4
[08:07:54.526] | : . ' , ;  $ C    : cplx [1:25, 1:25] -2.25-1.5i -2.25-1.44i -2.25-1.38i ...
[08:07:54.526] | : . ' , ;   ..- attr(*, "region")=List of 2
[08:07:54.526] | : . ' , ;   .. ..$ xrange: num [1:2] -2.25 -0.781
[08:07:54.526] | : . ' , ;   .. ..$ yrange: num [1:2] -1.5 -0.0306
[08:07:54.526] | : . ' , ;   ..- attr(*, "tile")= int [1:2] 1 1
[08:07:54.526] | : . ' , ;  $ delay:function (counts)  
[08:07:54.526] | : . ' , ;   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[08:07:54.526] | : . ' , ;   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x55c5b945f2a0> 
[08:07:54.526] | : . ' , ;  - attr(*, "where")=List of 4
[08:07:54.526] | : . ' , ;   ..$ ii   :<environment: 0x55c5b9609048> 
[08:07:54.526] | : . ' , ;   ..$ n    :<environment: R_GlobalEnv> 
[08:07:54.526] | : . ' , ;   ..$ C    :<environment: 0x55c5b9609048> 
[08:07:54.526] | : . ' , ;   ..$ delay:<environment: R_GlobalEnv> 
[08:07:54.526] | : . ' , ;  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:54.526] | : . ' , ;  - attr(*, "resolved")= logi FALSE
[08:07:54.526] | : . ' , ;  - attr(*, "total_size")= num NA
[08:07:54.526] | : . ' , ;  - attr(*, "already-done")= logi TRUE
[08:07:54.533] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:07:54.533] | : . ' , ; ` | : Not identical
[08:07:54.533] | : . ' , ; - copied ‘ii’ to environment
[08:07:54.533] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.534] | : . ' , ; - copied ‘n’ to environment
[08:07:54.533] | : . ' , ; ` | : all.equal() for future ...
[08:07:54.534] | : . ' , ; - copied ‘C’ to environment
[08:07:54.534] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:07:54.534] | : . ' , ; - reassign environment for ‘delay’ [where=globalenv()]
[08:07:54.534] | : . ' , ; - copied ‘delay’ to environment
[08:07:54.534] | : . ' , ; assign_globals() ... done
[08:07:54.534] | : . ' , ; ` getFutureContext() ... done
[08:07:54.534] | : . ' , ; getFutureData() ... done
[08:07:54.535] | : . ' , ; requestCore(..., workers = 2) ...
[08:07:54.535] | : . ' , ; ` Poll #1 (0): usedCores() = 2, workers = 2
[08:07:54.538] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:54.538] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:54.538] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:54.538] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:07:54.538] | : . ' , ; ` | : . New stack:
[08:07:54.534] | : . ' , ; ` | : . List of 2
[08:07:54.534] | : . ' , ; ` | : .  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.534] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.534] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:07:54.534] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.534] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.534] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.534] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.534] | : . ' , ; ` | : .  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:54.534] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:54.534] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:54.534] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:54.534] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.534] | : . ' , ; ` | : .     ...)  
[08:07:54.534] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.534] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.534] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:54.534] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b92a5d28> 
[08:07:54.534] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.534] | : . ' , ; ` | : .     ...)  
[08:07:54.534] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.538] | : . ' , ; ` | : . List of 1
[08:07:54.538] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:54.538] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:54.538] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:54.538] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:54.538] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.538] | : . ' , ; ` | : .     ...)  
[08:07:54.538] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.538] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.538] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:54.538] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b92a5d28> 
[08:07:54.538] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.538] | : . ' , ; ` | : .     ...)  
[08:07:54.538] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.538] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.542] | : . ' , ; ` | : . Old stack:
[08:07:54.542] | : . ' , ; ` | : . Formals differ
[08:07:54.542] | : . ' , ; ` | : all.equal() for future ... done
[08:07:54.543] | : . ' , ; ` | : Future strategies differ at level 1
[08:07:54.543] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:54.543] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:07:54.543] | : . ' , ; ` | List of future strategies:
[08:07:54.543] | : . ' , ; ` | 1. sequential:
[08:07:54.543] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:54.543] | : . ' , ; ` |    - tweaked: FALSE
[08:07:54.543] | : . ' , ; ` |    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.542] | : . ' , ; ` | : . List of 1
[08:07:54.542] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.542] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.542] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:54.542] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.542] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.542] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.542] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.542] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5ba1fca28> 
[08:07:54.542] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.542] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.542] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.547] | : . ' , ; ` | : . Not identical
[08:07:54.547] | : . ' , ; ` | : . all.equal() for future ...
[08:07:54.544] | : . ' , ; ` | List of 1
[08:07:54.544] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.544] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.544] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:54.544] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.544] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.544] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.544] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.544] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.549] | : . ' , ; ` | plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:54.550] | : . ' , ; ` | plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:54.550] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.550] | : . ' , ; ` | : plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:07:54.550] | : . ' , ; ` | : . function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.550] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.550] | : . ' , ; ` | : .  - attr(*, "init")= logi TRUE
[08:07:54.550] | : . ' , ; ` | : .  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.550] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.550] | : . ' , ; ` | : .  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.550] | : . ' , ; ` | : .  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.552] | : . ' , ; ` | : . init: TRUE
[08:07:54.553] | : . ' , ; ` | : . makeFutureBackend(<sequential>) ...
[08:07:54.553] | : . ' , ; ` | : . ' Backend function: <‘NULL’>
[08:07:54.553] | : . ' , ; ` | : . ' Evaluator tweak arguments: [n=0]
[08:07:54.553] | : . ' , ; ` | : . '  list()
[08:07:54.553] | : . ' , ; ` | : . ' Evaluator formal arguments: [n=2]
[08:07:54.547] | : . ' , ; ` | : . ' List of 2
[08:07:54.547] | : . ' , ; ` | : . '  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:54.547] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:07:54.547] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:54.547] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:07:54.547] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.547] | : . ' , ; ` | : . '     ...)  
[08:07:54.547] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.547] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.547] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:07:54.547] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b92a5d28> 
[08:07:54.547] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.547] | : . ' , ; ` | : . '     ...)  
[08:07:54.547] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.547] | : . ' , ; ` | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.547] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.547] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:07:54.547] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.547] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.547] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.547] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.547] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5ba1fca28> 
[08:07:54.547] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.547] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.553] | : . ' , ; ` | : . '  list()
[08:07:54.554] | : . ' , ; ` | : . ' Backend factory arguments: [n=2]
[08:07:54.554] | : . ' , ; ` | : . ' Formals differ
[08:07:54.554] | : . ' , ; ` | : . all.equal() for future ... done
[08:07:54.554] | : . ' , ; ` | : . Future strategies differ at level 1
[08:07:54.554] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:07:54.554] | : . ' , ; ` | : plan(): Setting new future backend stack:
[08:07:54.554] | : . ' , ; ` | : . ' Dotted pair list of 2
[08:07:54.554] | : . ' , ; ` | : . '  $ gc         : logi FALSE
[08:07:54.554] | : . ' , ; ` | : . '  $ earlySignal: logi FALSE
[08:07:54.554] | : . ' , ; ` | : List of future strategies:
[08:07:54.554] | : . ' , ; ` | : 1. multicore:
[08:07:54.554] | : . ' , ; ` | :    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:07:54.554] | : . ' , ; ` | :    - tweaked: FALSE
[08:07:54.554] | : . ' , ; ` | :    - call: plan(strategy)
[08:07:54.555] | : . ' , ; ` | : . ' Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:54.555] | : . ' , ; ` | : . makeFutureBackend(<sequential>) ... done
[08:07:54.555] | : . ' , ; ` | : plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:07:54.555] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.555] | : . ' , ; ` | plan(): nbrOfWorkers() = 1
[08:07:54.556] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:54.556] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:54.556] | : . ' , ; assign_globals() ...
[08:07:54.556] | : . ' , ; ` readImmediateCondition() ...
[08:07:54.556] | : . ' , ; ` | Path: ‘/tmp/RtmpmrlPwL/.future/immediateConditions’
[08:07:54.557] | : . ' , ; ` | Number of RDS files: 0
[08:07:54.557] | : . ' , ; ` | Returned conditions set:
[08:07:54.557] | : . ' , ; ` |  list()
[08:07:54.558] | : . ' , ; ` readImmediateCondition() ... done
[08:07:54.555] | : . ' , ; ` | : List of 1
[08:07:54.555] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:54.555] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:54.555] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:54.555] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:54.555] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.555] | : . ' , ; ` | :     ...)  
[08:07:54.555] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.555] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.555] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:54.555] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b92a5d28> 
[08:07:54.555] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.555] | : . ' , ; ` | :     ...)  
[08:07:54.555] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.555] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.558] | : . ' , ; ` | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:54.558] | : . ' , ; ` | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:54.559] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.559] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.559] | : . ' , ; ` | : plan(): nbrOfWorkers() = 2
[08:07:54.559] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:54.559] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:54.559] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:54.556] | : . ' , ; List of 4
[08:07:54.556] | : . ' , ;  $ ii   : int 2
[08:07:54.556] | : . ' , ;  $ n    : int 4
[08:07:54.556] | : . ' , ;  $ C    : cplx [1:25, 1:25] -0.719-1.5i -0.719-1.44i -0.719-1.38i ...
[08:07:54.556] | : . ' , ;   ..- attr(*, "region")=List of 2
[08:07:54.556] | : . ' , ;   .. ..$ xrange: num [1:2] -0.719 0.75
[08:07:54.556] | : . ' , ;   .. ..$ yrange: num [1:2] -1.5 -0.0306
[08:07:54.556] | : . ' , ;   ..- attr(*, "tile")= int [1:2] 1 2
[08:07:54.556] | : . ' , ;  $ delay:function (counts)  
[08:07:54.556] | : . ' , ;   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[08:07:54.556] | : . ' , ;   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x55c5b945f2a0> 
[08:07:54.556] | : . ' , ;  - attr(*, "where")=List of 4
[08:07:54.556] | : . ' , ;   ..$ ii   :<environment: 0x55c5b90e9aa0> 
[08:07:54.556] | : . ' , ;   ..$ n    :<environment: R_GlobalEnv> 
[08:07:54.556] | : . ' , ;   ..$ C    :<environment: 0x55c5b90e9aa0> 
[08:07:54.556] | : . ' , ;   ..$ delay:<environment: R_GlobalEnv> 
[08:07:54.556] | : . ' , ;  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:54.556] | : . ' , ;  - attr(*, "resolved")= logi FALSE
[08:07:54.556] | : . ' , ;  - attr(*, "total_size")= num NA
[08:07:54.556] | : . ' , ;  - attr(*, "already-done")= logi TRUE
[08:07:54.564] | : . ' , ; - copied ‘ii’ to environment
[08:07:54.564] | : . ' , ; - copied ‘n’ to environment
[08:07:54.564] | : . ' , ; - copied ‘C’ to environment
[08:07:54.564] | : . ' , ; - reassign environment for ‘delay’ [where=globalenv()]
[08:07:54.564] | : . ' , ; - copied ‘delay’ to environment
[08:07:54.564] | : . ' , ; assign_globals() ... done
[08:07:54.568] | : . ' , ; ` readImmediateCondition() ...
[08:07:54.568] | : . ' , ; ` | Path: ‘/tmp/RtmpmrlPwL/.future/immediateConditions’
[08:07:54.569] | : . ' , ; ` | Number of RDS files: 0
[08:07:54.569] | : . ' , ; ` | Returned conditions set:
[08:07:54.569] | : . ' , ; ` |  list()
[08:07:54.570] | : . ' , ; ` readImmediateCondition() ... done
[08:07:54.570] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:54.570] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:54.570] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:54.571] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:07:54.571] | : . ' , ; ` | : . New stack:
[08:07:54.570] | : . ' , ; ` Poll #2 (0.04 secs): usedCores() = 2, workers = 2
[08:07:54.571] | : . ' , ; ` | : . List of 1
[08:07:54.571] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:54.571] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:54.571] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:54.571] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:54.571] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.571] | : . ' , ; ` | : .     ...)  
[08:07:54.571] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.571] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.571] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:54.571] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b92a5d28> 
[08:07:54.571] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.571] | : . ' , ; ` | : .     ...)  
[08:07:54.571] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.571] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.576] | : . ' , ; ` | : . Old stack:
[08:07:54.577] | : . ' , ; ` | : . List of 1
[08:07:54.577] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.577] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.577] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:54.577] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.577] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.577] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.577] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.577] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b765a9d8> 
[08:07:54.577] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.577] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.577] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.580] | : . ' , ; ` | : . Not identical
[08:07:54.580] | : . ' , ; ` | : . all.equal() for future ...
[08:07:54.580] | : . ' , ; ` | : . ' List of 2
[08:07:54.580] | : . ' , ; ` | : . '  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:54.580] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:07:54.580] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:54.580] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:07:54.580] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.580] | : . ' , ; ` | : . '     ...)  
[08:07:54.580] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.580] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.580] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:07:54.580] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b92a5d28> 
[08:07:54.580] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.580] | : . ' , ; ` | : . '     ...)  
[08:07:54.580] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.580] | : . ' , ; ` | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.580] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.580] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:07:54.580] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.580] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.580] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.580] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.580] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b765a9d8> 
[08:07:54.580] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.580] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.590] | : . ' , ; ` | : . ' Formals differ
[08:07:54.590] | : . ' , ; ` | : . all.equal() for future ... done
[08:07:54.590] | : . ' , ; ` | : . Future strategies differ at level 1
[08:07:54.590] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:07:54.590] | : . ' , ; ` | : plan(): Setting new future backend stack:
[08:07:54.590] | : . ' , ; ` | : List of future strategies:
[08:07:54.590] | : . ' , ; ` | : 1. multicore:
[08:07:54.590] | : . ' , ; ` | :    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:07:54.590] | : . ' , ; ` | :    - tweaked: FALSE
[08:07:54.590] | : . ' , ; ` | :    - call: plan(strategy)
[08:07:54.591] | : . ' , ; ` | : List of 1
[08:07:54.591] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:54.591] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:54.591] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:54.591] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:54.591] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.591] | : . ' , ; ` | :     ...)  
[08:07:54.591] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.591] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.591] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:54.591] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b92a5d28> 
[08:07:54.591] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.591] | : . ' , ; ` | :     ...)  
[08:07:54.591] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.591] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.594] | : . ' , ; ` | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:54.594] | : . ' , ; ` | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:54.596] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.596] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.596] | : . ' , ; ` | : plan(): nbrOfWorkers() = 2
[08:07:54.596] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:54.596] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:54.597] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:54.619] | : . ' , ; ` readImmediateCondition() ...
[08:07:54.619] | : . ' , ; ` | Path: ‘/tmp/RtmpmrlPwL/.future/immediateConditions’
[08:07:54.619] | : . ' , ; ` | Number of RDS files: 0
[08:07:54.619] | : . ' , ; ` | Returned conditions set:
[08:07:54.620] | : . ' , ; ` |  list()
[08:07:54.620] | : . ' , ; ` readImmediateCondition() ... done
[08:07:54.620] | : . ' , ; ` value() for MulticoreFuture (<unnamed-5>) ...
[08:07:54.621] | : . ' , ; ` | result() for MulticoreFuture ...
[08:07:54.622] | : . ' , ; ` | : readImmediateCondition() ...
[08:07:54.622] | : . ' , ; ` | : . Path: ‘/tmp/RtmpmrlPwL/.future/immediateConditions’
[08:07:54.623] | : . ' , ; ` | : . Number of RDS files: 0
[08:07:54.623] | : . ' , ; ` | : . Returned conditions set:
[08:07:54.623] | : . ' , ; ` | : .  list()
[08:07:54.623] | : . ' , ; ` | : readImmediateCondition() ... done
[08:07:54.624] | : . ' , ; ` | : result() for MulticoreFuture ...
[08:07:54.624] | : . ' , ; ` | : result() for MulticoreFuture ... done
[08:07:54.624] | : . ' , ; ` | : signalConditions() ...
[08:07:54.624] | : . ' , ; ` | : . include = ‘immediateCondition’
[08:07:54.625] | : . ' , ; ` | : . exclude = 
[08:07:54.625] | : . ' , ; ` | : . resignal = FALSE
[08:07:54.625] | : . ' , ; ` | : . Number of conditions: 8
[08:07:54.625] | : . ' , ; ` | : .  int 8
[08:07:54.626] | : . ' , ; ` | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.626] | : . ' , ; ` | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.626] | : . ' , ; ` | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.626] | : . ' , ; ` | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.626] | : . ' , ; ` | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.627] | : . ' , ; ` | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.627] | : . ' , ; ` | : . Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.627] | : . ' , ; ` | : . Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.627] | : . ' , ; ` | : signalConditions() ... done
[08:07:54.627] | : . ' , ; ` | result() for MulticoreFuture ... done
[08:07:54.627] | : . ' , ; ` | result() for MulticoreFuture ...
[08:07:54.628] | : . ' , ; ` | result() for MulticoreFuture ... done
[08:07:54.628] | : . ' , ; ` | signalConditions() ...
[08:07:54.628] | : . ' , ; ` | : include = ‘immediateCondition’
[08:07:54.628] | : . ' , ; ` | : exclude = 
[08:07:54.628] | : . ' , ; ` | : resignal = FALSE
[08:07:54.628] | : . ' , ; ` | : Number of conditions: 8
[08:07:54.628] | : . ' , ; ` | :  int 8
[08:07:54.629] | : . ' , ; ` | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.629] | : . ' , ; ` | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.629] | : . ' , ; ` | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.629] | : . ' , ; ` | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.629] | : . ' , ; ` | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.629] | : . ' , ; ` | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.629] | : . ' , ; ` | : Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.630] | : . ' , ; ` | : Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.630] | : . ' , ; ` | signalConditions() ... done
[08:07:54.630] | : . ' , ; ` | check for misuse ...
[08:07:54.630] | : . ' , ; ` | check for misuse ... done
[08:07:54.630] | : . ' , ; ` value() for MulticoreFuture (<unnamed-5>) ... done
[08:07:54.631] | : . ' , ; requestCore(..., workers = 2) ... done
[08:07:54.633] | : . ' , ; MulticoreFuture started
[08:07:54.633] | : . ' , launchFuture() for MulticoreFutureBackend ... done
[08:07:54.633] | : . ' Launching futures ... done
[08:07:54.634] | : . ' Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:54.634] | : . Using MulticoreFutureBackend ... done
[08:07:54.634] | : run() for ‘Future’ (<unnamed-7>) ... done
[08:07:54.635] | run() ... done
[08:07:54.635] | resolved() ...
[08:07:54.636] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.636] | : . ' , ; ` Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:07:54.637] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.637] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:54.638] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:54.638] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:54.638] | : . ' , ; ` | : New stack:
[08:07:54.638] | : . ' , ; ` | : List of 1
[08:07:54.638] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.638] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.638] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:54.638] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.638] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.638] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.638] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.638] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.643] | : . ' , ; ` | : Old stack:
[08:07:54.645] | : readImmediateCondition() ...
[08:07:54.646] | : . Path: ‘/tmp/RtmpmrlPwL/.future/immediateConditions’
[08:07:54.646] | : . Number of RDS files: 0
[08:07:54.646] | : . Returned conditions set:
[08:07:54.646] | : .  list()
[08:07:54.647] | : readImmediateCondition() ... done
[08:07:54.647] | : resolved: FALSE
[08:07:54.647] | resolved() ... done
[08:07:54.647] resolved() for Future (<unnamed-7>) ... done
[08:07:54.647] resolved() for Future (<unnamed-8>) ...
[08:07:54.647] | state: ‘created’
[08:07:54.648] | run: TRUE
[08:07:54.648] | run() ...
[08:07:54.648] | : run() for ‘Future’ (<unnamed-8>) ...
[08:07:54.648] | : . state: ‘created’
[08:07:54.648] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.648] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.649] | : . Using MulticoreFutureBackend ...
[08:07:54.649] | : . ' Number of futures since start: 3 (3 created, 3 launched, 2 finished)
[08:07:54.649] | : . ' Launching futures ...
[08:07:54.649] | : . ' , launchFuture() for MulticoreFutureBackend ...
[08:07:54.649] | : . ' , ; getFutureData() ...
[08:07:54.649] | : . ' , ; ` getFutureCore() ...
[08:07:54.650] | : . ' , ; ` | Packages needed by the future expression (n = 1): ‘future’
[08:07:54.650] | : . ' , ; ` getFutureCore() ... done
[08:07:54.650] | : . ' , ; ` getFutureCapture() ...
[08:07:54.650] | : . ' , ; ` getFutureCapture() ... done
[08:07:54.650] | : . ' , ; ` getFutureContext() ...
[08:07:54.650] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.651] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:07:54.651] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.651] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:07:54.651] | : . ' , ; ` getFutureContext() ... done
[08:07:54.651] | : . ' , ; getFutureData() ... done
[08:07:54.652] | : . ' , ; requestCore(..., workers = 2) ...
[08:07:54.652] | : . ' , ; ` Poll #1 (0): usedCores() = 2, workers = 2
[08:07:54.644] | : . ' , ; ` | : List of 1
[08:07:54.644] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:54.644] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:54.644] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:54.644] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:54.644] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.644] | : . ' , ; ` | :     ...)  
[08:07:54.644] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.644] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.644] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:54.644] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b92a5d28> 
[08:07:54.644] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.644] | : . ' , ; ` | :     ...)  
[08:07:54.644] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.644] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.654] | : . ' , ; ` | : Not identical
[08:07:54.654] | : . ' , ; ` | : all.equal() for future ...
[08:07:54.654] | : . ' , ; ` | : . List of 2
[08:07:54.654] | : . ' , ; ` | : .  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.654] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.654] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:07:54.654] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.654] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.654] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.654] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.654] | : . ' , ; ` | : .  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:54.654] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:54.654] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:54.654] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:54.654] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.654] | : . ' , ; ` | : .     ...)  
[08:07:54.654] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.654] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.654] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:54.654] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b92a5d28> 
[08:07:54.654] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.654] | : . ' , ; ` | : .     ...)  
[08:07:54.654] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.662] | : . ' , ; ` | : . Formals differ
[08:07:54.662] | : . ' , ; ` readImmediateCondition() ...
[08:07:54.663] | : . ' , ; ` | : all.equal() for future ... done
[08:07:54.663] | : . ' , ; ` | Path: ‘/tmp/RtmpmrlPwL/.future/immediateConditions’
[08:07:54.663] | : . ' , ; ` | : Future strategies differ at level 1
[08:07:54.663] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:54.663] | : . ' , ; ` | Number of RDS files: 0
[08:07:54.663] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:07:54.663] | : . ' , ; ` | Returned conditions set:
[08:07:54.663] | : . ' , ; ` |  list()
[08:07:54.664] | : . ' , ; ` readImmediateCondition() ... done
[08:07:54.663] | : . ' , ; ` | List of future strategies:
[08:07:54.663] | : . ' , ; ` | 1. sequential:
[08:07:54.663] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:54.663] | : . ' , ; ` |    - tweaked: FALSE
[08:07:54.663] | : . ' , ; ` |    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.664] | : . ' , ; ` value() for MulticoreFuture (<unnamed-6>) ...
[08:07:54.664] | : . ' , ; ` | result() for MulticoreFuture ...
[08:07:54.665] | : . ' , ; ` | : readImmediateCondition() ...
[08:07:54.665] | : . ' , ; ` | : . Path: ‘/tmp/RtmpmrlPwL/.future/immediateConditions’
[08:07:54.666] | : . ' , ; ` | : . Number of RDS files: 0
[08:07:54.666] | : . ' , ; ` | : . Returned conditions set:
[08:07:54.666] | : . ' , ; ` | : .  list()
[08:07:54.666] | : . ' , ; ` | : readImmediateCondition() ... done
[08:07:54.664] | : . ' , ; ` | List of 1
[08:07:54.664] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.664] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.664] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:54.664] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.664] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.664] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.664] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.664] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.668] | : . ' , ; ` | plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:54.668] | : . ' , ; ` | plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:54.668] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.669] | : . ' , ; ` | : plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:07:54.667] | : . ' , ; ` | : result() for MulticoreFuture ...
[08:07:54.669] | : . ' , ; ` | : result() for MulticoreFuture ... done
[08:07:54.669] | : . ' , ; ` | : signalConditions() ...
[08:07:54.669] | : . ' , ; ` | : . include = ‘immediateCondition’
[08:07:54.670] | : . ' , ; ` | : . exclude = 
[08:07:54.670] | : . ' , ; ` | : . resignal = FALSE
[08:07:54.670] | : . ' , ; ` | : . Number of conditions: 8
[08:07:54.670] | : . ' , ; ` | : .  int 8
[08:07:54.671] | : . ' , ; ` | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.671] | : . ' , ; ` | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.669] | : . ' , ; ` | : . function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.669] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.669] | : . ' , ; ` | : .  - attr(*, "init")= logi TRUE
[08:07:54.669] | : . ' , ; ` | : .  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.669] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.669] | : . ' , ; ` | : .  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.669] | : . ' , ; ` | : .  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.672] | : . ' , ; ` | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.672] | : . ' , ; ` | : . init: TRUE
[08:07:54.672] | : . ' , ; ` | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.672] | : . ' , ; ` | : . makeFutureBackend(<sequential>) ...
[08:07:54.672] | : . ' , ; ` | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.672] | : . ' , ; ` | : . ' Backend function: <‘NULL’>
[08:07:54.672] | : . ' , ; ` | : . ' Evaluator tweak arguments: [n=0]
[08:07:54.672] | : . ' , ; ` | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.672] | : . ' , ; ` | : . Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.672] | : . ' , ; ` | : . '  list()
[08:07:54.672] | : . ' , ; ` | : . Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.672] | : . ' , ; ` | : . ' Evaluator formal arguments: [n=2]
[08:07:54.672] | : . ' , ; ` | : signalConditions() ... done
[08:07:54.673] | : . ' , ; ` | result() for MulticoreFuture ... done
[08:07:54.673] | : . ' , ; ` | : . '  list()
[08:07:54.673] | : . ' , ; ` | result() for MulticoreFuture ...
[08:07:54.673] | : . ' , ; ` | : . ' Backend factory arguments: [n=2]
[08:07:54.673] | : . ' , ; ` | result() for MulticoreFuture ... done
[08:07:54.673] | : . ' , ; ` | signalConditions() ...
[08:07:54.673] | : . ' , ; ` | : include = ‘immediateCondition’
[08:07:54.673] | : . ' , ; ` | : exclude = 
[08:07:54.673] | : . ' , ; ` | : resignal = FALSE
[08:07:54.674] | : . ' , ; ` | : Number of conditions: 8
[08:07:54.673] | : . ' , ; ` | : . ' Dotted pair list of 2
[08:07:54.673] | : . ' , ; ` | : . '  $ gc         : logi FALSE
[08:07:54.673] | : . ' , ; ` | : . '  $ earlySignal: logi FALSE
[08:07:54.674] | : . ' , ; ` | :  int 8
[08:07:54.674] | : . ' , ; ` | : . ' Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:54.674] | : . ' , ; ` | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.674] | : . ' , ; ` | : . makeFutureBackend(<sequential>) ... done
[08:07:54.674] | : . ' , ; ` | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.674] | : . ' , ; ` | : plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:07:54.675] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.675] | : . ' , ; ` | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.675] | : . ' , ; ` | plan(): nbrOfWorkers() = 1
[08:07:54.675] | : . ' , ; ` | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.675] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:54.675] | : . ' , ; ` | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.675] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:54.675] | : . ' , ; ` | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.675] | : . ' , ; assign_globals() ...
[08:07:54.675] | : . ' , ; ` | : Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.675] | : . ' , ; ` | : Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.675] | : . ' , ; ` | signalConditions() ... done
[08:07:54.676] | : . ' , ; ` | check for misuse ...
[08:07:54.676] | : . ' , ; ` | check for misuse ... done
[08:07:54.676] | : . ' , ; ` value() for MulticoreFuture (<unnamed-6>) ... done
[08:07:54.676] | : . ' , ; requestCore(..., workers = 2) ... done
[08:07:54.678] | : . ' , ; MulticoreFuture started
[08:07:54.679] | : . ' , launchFuture() for MulticoreFutureBackend ... done
[08:07:54.679] | : . ' Launching futures ... done
[08:07:54.680] | : . ' Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:54.680] | : . Using MulticoreFutureBackend ... done
[08:07:54.680] | : run() for ‘Future’ (<unnamed-8>) ... done
[08:07:54.681] | run() ... done
[08:07:54.681] | resolved() ...
[08:07:54.683] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.683] | : . ' , ; ` Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:07:54.683] | : . ' , ; plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.684] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:54.675] | : . ' , ; List of 4
[08:07:54.675] | : . ' , ;  $ ii   : int 3
[08:07:54.675] | : . ' , ;  $ n    : int 4
[08:07:54.675] | : . ' , ;  $ C    : cplx [1:25, 1:25] -2.25+0.0306i -2.25+0.0918i -2.25+0.1531i ...
[08:07:54.675] | : . ' , ;   ..- attr(*, "region")=List of 2
[08:07:54.675] | : . ' , ;   .. ..$ xrange: num [1:2] -2.25 -0.781
[08:07:54.675] | : . ' , ;   .. ..$ yrange: num [1:2] 0.0306 1.5
[08:07:54.675] | : . ' , ;   ..- attr(*, "tile")= int [1:2] 2 1
[08:07:54.675] | : . ' , ;  $ delay:function (counts)  
[08:07:54.675] | : . ' , ;   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[08:07:54.675] | : . ' , ;   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x55c5b945f2a0> 
[08:07:54.675] | : . ' , ;  - attr(*, "where")=List of 4
[08:07:54.675] | : . ' , ;   ..$ ii   :<environment: 0x55c5b7da6c28> 
[08:07:54.675] | : . ' , ;   ..$ n    :<environment: R_GlobalEnv> 
[08:07:54.675] | : . ' , ;   ..$ C    :<environment: 0x55c5b7da6c28> 
[08:07:54.675] | : . ' , ;   ..$ delay:<environment: R_GlobalEnv> 
[08:07:54.675] | : . ' , ;  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:54.675] | : . ' , ;  - attr(*, "resolved")= logi FALSE
[08:07:54.675] | : . ' , ;  - attr(*, "total_size")= num NA
[08:07:54.675] | : . ' , ;  - attr(*, "already-done")= logi TRUE
[08:07:54.684] | : . ' , ; - copied ‘ii’ to environment
[08:07:54.684] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:54.684] | : . ' , ; - copied ‘n’ to environment
[08:07:54.685] | : . ' , ; - copied ‘C’ to environment
[08:07:54.685] | : . ' , ; - reassign environment for ‘delay’ [where=globalenv()]
[08:07:54.685] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:54.685] | : . ' , ; - copied ‘delay’ to environment
[08:07:54.685] | : . ' , ; assign_globals() ... done
[08:07:54.685] | : . ' , ; ` | : New stack:
[08:07:54.689] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:54.689] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:54.689] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:54.689] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:07:54.689] | : . ' , ; ` | : . New stack:
[08:07:54.685] | : . ' , ; ` | : List of 1
[08:07:54.685] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.685] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.685] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:54.685] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.685] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.685] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.685] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.685] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.690] | : . ' , ; ` | : Old stack:
[08:07:54.692] | : readImmediateCondition() ...
[08:07:54.692] | : . Path: ‘/tmp/RtmpmrlPwL/.future/immediateConditions’
[08:07:54.692] | : . Number of RDS files: 0
[08:07:54.689] | : . ' , ; ` | : . List of 1
[08:07:54.689] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:54.689] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:54.689] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:54.689] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:54.689] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.689] | : . ' , ; ` | : .     ...)  
[08:07:54.689] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.689] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.689] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:54.689] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b92a5d28> 
[08:07:54.689] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.689] | : . ' , ; ` | : .     ...)  
[08:07:54.689] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.689] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.693] | : . Returned conditions set:
[08:07:54.693] | : . ' , ; ` | : . Old stack:
[08:07:54.693] | : .  list()
[08:07:54.694] | : readImmediateCondition() ... done
[08:07:54.694] | : resolved: FALSE
[08:07:54.694] | resolved() ... done
[08:07:54.694] resolved() for Future (<unnamed-8>) ... done
Plotting tile #1 of 4 ...
[08:07:54.695] value() for MulticoreFuture (<unnamed-5>) ...
[08:07:54.695] | result() for MulticoreFuture ...
[08:07:54.696] | result() for MulticoreFuture ... done
[08:07:54.696] | result() for MulticoreFuture ...
[08:07:54.696] | result() for MulticoreFuture ... done
[08:07:54.696] | signalConditions() ...
[08:07:54.697] | : include = ‘immediateCondition’
[08:07:54.697] | : exclude = 
[08:07:54.697] | : resignal = FALSE
[08:07:54.697] | : Number of conditions: 8
[08:07:54.690] | : . ' , ; ` | : List of 1
[08:07:54.690] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:54.690] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:54.690] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:54.690] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:54.690] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.690] | : . ' , ; ` | :     ...)  
[08:07:54.690] | : . ' [08:07:54.693] | : . ' , ; ` | : . List of 1
[08:07:54.693] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FAL, ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.690SE, envir = parent.frame())  
[08:07:54.693] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "fu] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07ture" "function"
[08:07:54.693] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:54.693] | : . ' , ; ` | : .   ..- a:54.690] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:54.690] | : . ' , ; ` | :   ..- attr(*, "backenttr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.693] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chd")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b92a5d28> r [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.693] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= ch
[08:07:54.690] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.693] | : . ' , ; ` | : .   ..- attr(*, "call")= languagSizeOfObjects = +Inf, 
[08:07:54.690] | : . ' , ; ` | :     ...)  
[08:07:54.690] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakabe plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.693] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'Sequenle")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.690] | : . ' , ; ` | :  - attr(*, "clatialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b9de5f70> 
[08:07:54.693] | : . ' , ; ` | : .   .. ..- atss")= chr [1:2] "FutureStrategyList" "list"
tr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.693] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.693] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.697] | :  int 8
[08:07:54.698] | : . ' , ; ` | : . Not identical
[08:07:54.698] | : . ' , ; ` | : Not identical
[08:07:54.698] | : . ' , ; ` | : . all.equal() for future ...
[08:07:54.698] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.698] | : . ' , ; ` | : all.equal() for future ...
[08:07:54.699] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.699] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.699] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.699] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.700] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.700] | : Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.700] | : Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.700] | signalConditions() ... done
[08:07:54.700] | relay stdout ...
[08:07:54.701] | relay stdout ... done
[08:07:54.701] | check for misuse ...
[08:07:54.701] | check for misuse ... done
[08:07:54.701] | relay conditions ...
[08:07:54.702] | : Future state: ‘finished’
[08:07:54.702] | : result() for MulticoreFuture ...
[08:07:54.702] | : result() for MulticoreFuture ... done
[08:07:54.702] | : signalConditions() ...
[08:07:54.703] | : . include = ‘condition’
[08:07:54.703] | : . exclude = ‘immediateCondition’
[08:07:54.703] | : . resignal = TRUE
[08:07:54.703] | : . Number of conditions: 8
[08:07:54.703] | : .  int 8
[08:07:54.698] | : . ' , ; ` | : . ' List of 2
[08:07:54.698] | : . ' , ; ` | : . '  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:54.698] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:07:54.698] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:54.698] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:07:54.698] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.698] | : . ' , ; ` | : . '     ...)  
[08:07:54.698] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.698] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.698] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:07:54.698] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b92a5d28> 
[08:07:54.698] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.698] | : . ' , ; ` | : . '     ...)  
[08:07:54.698] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.698] | : . ' , ; ` | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.698] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.698] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:07:54.698] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.698] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.698] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.698] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.698] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b9de5f70> 
[08:07:54.698] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.698] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.704] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.704] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.484] | : . ' , ; attachPackages() ...
[08:07:54.705] | : . ' , ; ` | : . ' Formals differ
[08:07:54.705] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.705] | : . ' , ; ` | : . all.equal() for future ... done
[08:07:54.705] | : . ' , ; ` | : . Future strategies differ at level 1
[08:07:54.705] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.705] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:07:54.485] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:54.705] | : . ' , ; ` | : plan(): Setting new future backend stack:
[08:07:54.705] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.705] | : . ' , ; ` | : List of future strategies:
[08:07:54.705] | : . ' , ; ` | : 1. multicore:
[08:07:54.705] | : . ' , ; ` | :    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:07:54.705] | : . ' , ; ` | :    - tweaked: FALSE
[08:07:54.705] | : . ' , ; ` | :    - call: plan(strategy)
[08:07:54.706] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.485] | : . ' , ; attachPackages() ... done
[08:07:54.706] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.706] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.486] | : . ' , ; attachPackages() ...
[08:07:54.706] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.707] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.486] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:54.707] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.707] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.486] | : . ' , ; attachPackages() ... done
[08:07:54.707] | : . Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.707] | : . Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[08:07:54.708] | : . Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.708] | : . Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
 done
[08:07:54.708] | : signalConditions() ... done
[08:07:54.708] | relay conditions ... done
[08:07:54.709] value() for MulticoreFuture (<unnamed-5>) ... done
[08:07:54.706] | : . ' , ; ` | : List of 1
[08:07:54.706] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:54.706] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:54.706] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:54.706] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:54.706] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.706] | : . ' , ; ` | :     ...)  
[08:07:54.706] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.706] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.706] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:54.706] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b92a5d28> 
[08:07:54.706] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.706] | : . ' , ; ` | :     ...)  
[08:07:54.706] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.706] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.709] | : . ' , ; ` | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:54.709] | : . ' , ; ` | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:54.709] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.710] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.710] | : . ' , ; ` | : plan(): nbrOfWorkers() = 2
[08:07:54.710] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:54.710] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:54.710] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
Plotting tile #2 of 4 ...
[08:07:54.710] value() for MulticoreFuture (<unnamed-6>) ...
[08:07:54.710] | result() for MulticoreFuture ...
[08:07:54.711] | result() for MulticoreFuture ... done
[08:07:54.711] | result() for MulticoreFuture ...
[08:07:54.711] | result() for MulticoreFuture ... done
[08:07:54.711] | signalConditions() ...
[08:07:54.712] | : include = ‘immediateCondition’
[08:07:54.712] | : exclude = 
[08:07:54.712] | : resignal = FALSE
[08:07:54.712] | : Number of conditions: 8
[08:07:54.712] | :  int 8
[08:07:54.713] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.713] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.714] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.714] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.714] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.714] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.715] | : Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.715] | : Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.715] | signalConditions() ... done
[08:07:54.715] | relay stdout ...
[08:07:54.699] | : . ' , ; ` | : . List of 2
[08:07:54.699] | : . ' , ; ` | : .  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.699] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.699] | : . ' , ; ` | : .   ..- attr(*, "init")= logi TRUE
[08:07:54.699] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.699] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.699] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.699] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.699] | : . ' , ; ` | : .  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:54.699] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:54.699] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:54.699] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:54.699] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.699] | : . ' , ; ` | : .     ...)  
[08:07:54.699] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.699] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.699] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:54.699] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b92a5d28> 
[08:07:54.699] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.699] | : . ' , ; ` | : .     ...)  
[08:07:54.699] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.716] | : . ' , ; ` | : . Formals differ
[08:07:54.717] | : . ' , ; ` | : all.equal() for future ... done
[08:07:54.717] | : . ' , ; ` | : Future strategies differ at level 1
[08:07:54.717] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:54.718] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:07:54.716] | relay stdout ... done
[08:07:54.718] | check for misuse ...
[08:07:54.719] | check for misuse ... done
[08:07:54.718] | : . ' , ; ` | List of future strategies:
[08:07:54.718] | : . ' , ; ` | 1. sequential:
[08:07:54.718] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:54.718] | : . ' , ; ` |    - tweaked: FALSE
[08:07:54.718] | : . ' , ; ` |    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.719] | relay conditions ...
[08:07:54.719] | : Future state: ‘finished’
[08:07:54.720] | : result() for MulticoreFuture ...
[08:07:54.720] | : result() for MulticoreFuture ... done
[08:07:54.720] | : signalConditions() ...
[08:07:54.721] | : . include = ‘condition’
[08:07:54.721] | : . exclude = ‘immediateCondition’
[08:07:54.721] | : . resignal = TRUE
[08:07:54.721] | : . Number of conditions: 8
[08:07:54.721] | : .  int 8
[08:07:54.722] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.723] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.511] | : . ' , ; attachPackages() ...
[08:07:54.723] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.723] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.512] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:54.723] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.724] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.513] | : . ' , ; attachPackages() ... done
[08:07:54.719] | : . ' , ; ` | List of 1
[08:07:54.719] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.719] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.719] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:54.719] | : . ' , ; ` |   ..- attr(*, "factory")=fun[08:07:54.724] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
ction (..., maxSizeOfObjects = +Inf)  
[08:07:54.719] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.719] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.719] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.719] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.724] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.724] | : . ' , ; ` | plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:54.513] | : . ' , ; attachPackages() ...
[08:07:54.724] | : . ' , ; ` | plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:54.724] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.724] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.724] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.514] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:54.725] | : . ' , ; ` | : plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:07:54.725] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.725] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.515] | : . ' , ; attachPackages() ... done
[08:07:54.725] | : . Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.725] | : . Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[08:07:54.725] | : . Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.725] | : . Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
 done
[08:07:54.726] | : signalConditions() ... done
[08:07:54.726] | relay conditions ... done
[08:07:54.726] value() for MulticoreFuture (<unnamed-6>) ... done
[08:07:54.727] readImmediateCondition() ...
[08:07:54.725] | : . ' , ; ` | : . function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.725] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.725] | : . ' , ; ` | : .  - attr(*, "init")= logi TRUE
[08:07:54.725] | : . ' , ; ` | : .  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.725] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.725] | : . ' , ; ` | : .  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.725] | : . ' , ; ` | : .  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.727] | Path: ‘/tmp/RtmpmrlPwL/.future/immediateConditions’
[08:07:54.727] | : . ' , ; ` | : . init: TRUE
[08:07:54.727] | : . ' , ; ` | : . makeFutureBackend(<sequential>) ...
[08:07:54.727] | Number of RDS files: 0
[08:07:54.727] | : . ' , ; ` | : . ' Backend function: <‘NULL’>
[08:07:54.727] | Returned conditions set:
[08:07:54.727] | : . ' , ; ` | : . ' Evaluator tweak arguments: [n=0]
[08:07:54.727] |  list()
[08:07:54.727] | : . ' , ; ` | : . '  list()
[08:07:54.728] readImmediateCondition() ... done
[08:07:54.728] | : . ' , ; ` | : . ' Evaluator formal arguments: [n=2]
Plotting tile #3 of 4 ...
[08:07:54.728] value() for MulticoreFuture (<unnamed-7>) ...
[08:07:54.728] | result() for MulticoreFuture ...
[08:07:54.728] | : . ' , ; ` | : . '  list()
[08:07:54.728] | : . ' , ; ` | : . ' Backend factory arguments: [n=2]
[08:07:54.729] | : readImmediateCondition() ...
[08:07:54.728] | : . ' , ; ` | : . ' Dotted pair list of 2
[08:07:54.728] | : . ' , ; ` | : . '  $ gc         : logi FALSE
[08:0[08:07:54.729] | : . Path: ‘/tmp/RtmpmrlPwL/.future/immediateConditions’
7:54.728] | : . ' , ; ` | : . '  $ earlySignal: logi FALSE
[08:07:54.729] | : . Number of RDS files: 0
[08:07:54.729] | : . ' , ; ` | : . ' Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:54.729] | : . Returned conditions set:
[08:07:54.730] | : . ' , ; ` | : . makeFutureBackend(<sequential>) ... done
[08:07:54.730] | : . ' , ; ` | : plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:07:54.730] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.730] | : .  list()
[08:07:54.730] | : . ' , ; ` | plan(): nbrOfWorkers() = 1
[08:07:54.730] | : readImmediateCondition() ... done
[08:07:54.730] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:54.730] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:54.730] | : . ' , ; assign_globals() ...
[08:07:54.730] | : result() for MulticoreFuture ...
[08:07:54.731] | : result() for MulticoreFuture ... done
[08:07:54.731] | : signalConditions() ...
[08:07:54.731] | : . include = ‘immediateCondition’
[08:07:54.731] | : . exclude = 
[08:07:54.731] | : . resignal = FALSE
[08:07:54.731] | : . Number of conditions: 8
[08:07:54.732] | : .  int 8
[08:07:54.732] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.732] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.732] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.733] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.733] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.733] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.733] | : . Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.733] | : . Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.733] | : signalConditions() ... done
[08:07:54.734] | result() for MulticoreFuture ... done
[08:07:54.734] | result() for MulticoreFuture ...
[08:07:54.734] | result() for MulticoreFuture ... done
[08:07:54.734] | signalConditions() ...
[08:07:54.734] | : include = ‘immediateCondition’
[08:07:54.734] | : exclude = 
[08:07:54.734] | : resignal = FALSE
[08:07:54.734] | : Number of conditions: 8
[08:07:54.735] | :  int 8
[08:07:54.735] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.735] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.735] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.735] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.735] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.736] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.736] | : Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.736] | : Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.736] | signalConditions() ... done
[08:07:54.736] | relay stdout ...
[08:07:54.736] | relay stdout ... done
[08:07:54.736] | check for misuse ...
[08:07:54.736] | check for misuse ... done
[08:07:54.737] | relay conditions ...
[08:07:54.737] | : Future state: ‘finished’
[08:07:54.737] | : result() for MulticoreFuture ...
[08:07:54.737] | : result() for MulticoreFuture ... done
[08:07:54.737] | : signalConditions() ...
[08:07:54.737] | : . include = ‘condition’
[08:07:54.737] | : . exclude = ‘immediateCondition’
[08:07:54.737] | : . resignal = TRUE
[08:07:54.737] | : . Number of conditions: 8
[08:07:54.737] | : .  int 8
[08:07:54.738] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.738] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.633] | : . ' , ; attachPackages() ...
[08:07:54.738] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.738] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.634] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:54.738] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.739] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.634] | : . ' , ; attachPackages() ... done
[08:07:54.739] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.739] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.635] | : . ' , ; attachPackages() ...
[08:07:54.739] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.739] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.635] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:54.739] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.739] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.635] | : . ' , ; attachPackages() ... done
[08:07:54.739] | : . Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.740] | : . Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[08:07:54.740] | : . Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.740] | : . Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
 done
[08:07:54.740] | : signalConditions() ... done
[08:07:54.740] | relay conditions ... done
[08:07:54.740] value() for MulticoreFuture (<unnamed-7>) ... done
[08:07:54.730] | : . ' , ; List of 4
[08:07:54.730] | : . ' , ;  $ ii   : int 4
[08:07:54.730] | : . ' , ;  $ n    : int 4
[08:07:54.730] | : . ' , ;  $ C    : cplx [1:25, 1:25] -0.719+0.0306i -0.719+0.0918i -0.719+0.1531i ...
[08:07:54.730] | : . ' , ;   ..- attr(*, "region")=List of 2
[08:07:54.730] | : . ' , ;   .. ..$ xrange: num [1:2] -0.719 0.75
[08:07:54.730] | : . ' , ;   .. ..$ yrange: num [1:2] 0.0306 1.5
[08:07:54.730] | : . ' , ;   ..- attr(*, "tile")= int [1:2] 2 2
[08:07:54.730] | : . ' , ;  $ delay:function (counts)  
[08:07:54.730] | : . ' , ;   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[08:07:54.730] | : . ' , ;   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x55c5b945f2a0> 
[08:07:54.730] | : . ' , ;  - attr(*, "where")=List of 4
[08:07:54.730] | : . ' , ;   ..$ ii   :<environment: 0x55c5b80b7810> 
[08:07:54.730] | : . ' , ;   ..$ n    :<environment: R_GlobalEnv> 
[08:07:54.730] | : . ' , ;   ..$ C    :<environment: 0x55c5b80b7810> 
[08:07:54.730] | : . ' , ;   ..$ delay:<environment: R_GlobalEnv> 
[08:07:54.730] | : . ' , ;  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:07:54.730] | : . ' , ;  - attr(*, "resolved")= logi FALSE
[08:07:54.730] | : . ' , ;  - attr(*, "total_size")= num NA
[08:07:54.730] | : . ' , ;  - attr(*, "already-done")= logi TRUE
[08:07:54.742] | : . ' , ; - copied ‘ii’ to environment
[08:07:54.742] | : . ' , ; - copied ‘n’ to environment
[08:07:54.742] | : . ' , ; - copied ‘C’ to environment
[08:07:54.743] | : . ' , ; - reassign environment for ‘delay’ [where=globalenv()]
[08:07:54.743] | : . ' , ; - copied ‘delay’ to environment
[08:07:54.743] | : . ' , ; assign_globals() ... done
[08:07:54.747] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:54.748] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:54.748] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:54.748] | : . ' , ; ` | : all.equal() for FutureStrategyList ...
[08:07:54.748] | : . ' , ; ` | : . New stack:
[08:07:54.751] readImmediateCondition() ...
[08:07:54.751] | Path: ‘/tmp/RtmpmrlPwL/.future/immediateConditions’
[08:07:54.751] | Number of RDS files: 0
[08:07:54.751] | Returned conditions set:
[08:07:54.748] | : . ' , ; ` | : . List of 1
[08:07:54.748] | : . ' , ; ` | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:54.748] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:54.748] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:54.748] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:54.748] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.748] | : . ' , ; ` | : .     ...)  
[08:07:54.748] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.748] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.748] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:54.748] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b92a5d28> 
[08:07:54.748] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.748] | : . ' , ; ` | : .     ...)  
[08:07:54.748] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.748] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.751] |  list()
[08:07:54.752] | : . ' , ; ` | : . Old stack:
[08:07:54.752] readImmediateCondition() ... done
[08:07:54.752] | : . ' , ; ` | : . List of 1
[08:07:54.752] | : . ' , ; ` | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.752] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.752] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:07:54.752] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.752] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.752] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.752] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.752] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b9521400> 
[08:07:54.752] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.752] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.752] | : . ' , ; ` | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.755] | : . ' , ; ` | : . Not identical
[08:07:54.755] | : . ' , ; ` | : . all.equal() for future ...
[08:07:54.762] readImmediateCondition() ...
[08:07:54.762] | Path: ‘/tmp/RtmpmrlPwL/.future/immediateConditions’
[08:07:54.762] | Number of RDS files: 0
[08:07:54.763] | Returned conditions set:
[08:07:54.755] | : . ' , ; ` | : . ' List of 2
[08:07:54.755] | : . ' , ; ` | : . '  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:54.755] | : . ' , ; ` | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:07:54.755] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:54.755] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:07:54.755] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.755] | : . ' , ; ` | : . '     ...)  
[08:07:54.755] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.755] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.755] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategy)
[08:07:54.755] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b92a5d28> 
[08:07:54.755] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.755] | : . ' , ; ` | : . '     ...)  
[08:07:54.755] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.755] | : . ' , ; ` | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.755] | : . ' , ; ` | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:54.755] | : . ' , ; ` | : . '   ..- attr(*, "init")= chr "done"
[08:07:54.755] | : . ' , ; ` | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.755] | : . ' , ; ` | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.755] | : . ' , ; ` | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.755] | : . ' , ; ` | : . '   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:54.755] | : . ' , ; ` | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b9521400> 
[08:07:54.755] | : . ' , ; ` | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:54.755] | : . ' , ; ` | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:54.763] | : . ' , ; ` | : . ' Formals differ
[08:07:54.764] | : . ' , ; ` | : . all.equal() for future ... done
[08:07:54.764] | : . ' , ; ` | : . Future strategies differ at level 1
[08:07:54.764] | : . ' , ; ` | : all.equal() for FutureStrategyList ... done
[08:07:54.764] | : . ' , ; ` | : plan(): Setting new future backend stack:
[08:07:54.764] | : . ' , ; ` | : List of future strategies:
[08:07:54.764] | : . ' , ; ` | : 1. multicore:
[08:07:54.764] | : . ' , ; ` | :    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:07:54.764] | : . ' , ; ` | :    - tweaked: FALSE
[08:07:54.764] | : . ' , ; ` | :    - call: plan(strategy)
[08:07:54.763] |  list()
[08:07:54.765] readImmediateCondition() ... done
[08:07:54.764] | : . ' , ; ` | : List of 1
[08:07:54.764] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:54.764] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:07:54.764] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:54.764] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:54.764] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.764] | : . ' , ; ` | :     ...)  
[08:07:54.764] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.764] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.764] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:07:54.764] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b92a5d28> 
[08:07:54.764] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.764] | : . ' , ; ` | :     ...)  
[08:07:54.764] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.764] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.768] | : . ' , ; ` | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:07:54.768] | : . ' , ; ` | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:07:54.768] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.768] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.768] | : . ' , ; ` | : plan(): nbrOfWorkers() = 2
[08:07:54.768] | : . ' , ; ` | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:54.769] | : . ' , ; ` plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:54.769] | : . ' , ; plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:54.769] readImmediateCondition() ...
[08:07:54.769] | Path: ‘/tmp/RtmpmrlPwL/.future/immediateConditions’
[08:07:54.770] | Number of RDS files: 0
[08:07:54.770] | Returned conditions set:
[08:07:54.770] |  list()
[08:07:54.770] readImmediateCondition() ... done
Plotting tile #4 of 4 ...
[08:07:54.770] value() for MulticoreFuture (<unnamed-8>) ...
[08:07:54.771] | result() for MulticoreFuture ...
[08:07:54.771] | : readImmediateCondition() ...
[08:07:54.771] | : . Path: ‘/tmp/RtmpmrlPwL/.future/immediateConditions’
[08:07:54.772] | : . Number of RDS files: 0
[08:07:54.772] | : . Returned conditions set:
[08:07:54.772] | : .  list()
[08:07:54.772] | : readImmediateCondition() ... done
[08:07:54.772] | : result() for MulticoreFuture ...
[08:07:54.772] | : result() for MulticoreFuture ... done
[08:07:54.773] | : signalConditions() ...
[08:07:54.773] | : . include = ‘immediateCondition’
[08:07:54.773] | : . exclude = 
[08:07:54.773] | : . resignal = FALSE
[08:07:54.773] | : . Number of conditions: 8
[08:07:54.773] | : .  int 8
[08:07:54.774] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.774] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.774] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.774] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.774] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.774] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.774] | : . Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.774] | : . Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.774] | : signalConditions() ... done
[08:07:54.775] | result() for MulticoreFuture ... done
[08:07:54.775] | result() for MulticoreFuture ...
[08:07:54.775] | result() for MulticoreFuture ... done
[08:07:54.775] | signalConditions() ...
[08:07:54.775] | : include = ‘immediateCondition’
[08:07:54.775] | : exclude = 
[08:07:54.775] | : resignal = FALSE
[08:07:54.775] | : Number of conditions: 8
[08:07:54.775] | :  int 8
[08:07:54.776] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.776] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.776] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.776] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.776] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.776] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.777] | : Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.777] | : Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.777] | signalConditions() ... done
[08:07:54.777] | relay stdout ...
[08:07:54.777] | relay stdout ... done
[08:07:54.777] | check for misuse ...
[08:07:54.777] | check for misuse ... done
[08:07:54.777] | relay conditions ...
[08:07:54.777] | : Future state: ‘finished’
[08:07:54.778] | : result() for MulticoreFuture ...
[08:07:54.778] | : result() for MulticoreFuture ... done
[08:07:54.778] | : signalConditions() ...
[08:07:54.778] | : . include = ‘condition’
[08:07:54.778] | : . exclude = ‘immediateCondition’
[08:07:54.778] | : . resignal = TRUE
[08:07:54.778] | : . Number of conditions: 8
[08:07:54.778] | : .  int 8
[08:07:54.779] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.779] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.680] | : . ' , ; attachPackages() ...
[08:07:54.779] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.779] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.680] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:54.779] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.779] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.681] | : . ' , ; attachPackages() ... done
[08:07:54.779] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.780] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.681] | : . ' , ; attachPackages() ...
[08:07:54.780] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.780] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.681] | : . ' , ; ` packages: [n=1] ‘future’
[08:07:54.780] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.780] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:07:54.682] | : . ' , ; attachPackages() ... done
[08:07:54.780] | : . Condition #7 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.780] | : . Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[08:07:54.780] | : . Condition #8 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:54.781] | : . Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
 done
[08:07:54.781] | : signalConditions() ... done
[08:07:54.781] | relay conditions ... done
[08:07:54.781] value() for MulticoreFuture (<unnamed-8>) ... done

> close.screen()
[1] 1 2 3 4 5 6 7 8

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('multicore') ... DONE
- plan('multisession') ...
[08:07:54.782] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.783] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:07:54.783] | : all.equal() for FutureStrategyList ...
[08:07:54.783] | : . New stack:
[08:07:54.783] | : . List of 1
[08:07:54.783] | : .  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:07:54.783] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.783] | : .   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:07:54.783] | : .   ..- attr(*, "init")= logi TRUE
[08:07:54.783] | : .   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:07:54.783] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:07:54.783] | : .   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:54.783] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:54.783] | : .   ..- attr(*, "untweakable")= chr "persistent"
[08:07:54.783] | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:54.783] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.786] | : . Old stack:
[08:07:54.786] | : . List of 1
[08:07:54.786] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:54.786] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:07:54.786] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:54.786] | : .   ..- attr(*, "init")= chr "done"
[08:07:54.786] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.786] | : .     ...)  
[08:07:54.786] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.786] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.786] | : .   ..- attr(*, "call")= language plan(strategy)
[08:07:54.786] | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b92a5d28> 
[08:07:54.786] | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.786] | : .     ...)  
[08:07:54.786] | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.786] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.791] | : . Not identical
[08:07:54.792] | : . all.equal() for future ...
[08:07:54.792] | : . ' List of 2
[08:07:54.792] | : . '  $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:07:54.792] | : . '     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.792] | : . '   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:07:54.792] | : . '   ..- attr(*, "init")= logi TRUE
[08:07:54.792] | : . '   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:07:54.792] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:07:54.792] | : . '   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:54.792] | : . '   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:54.792] | : . '   ..- attr(*, "untweakable")= chr "persistent"
[08:07:54.792] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:07:54.792] | : . '  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:07:54.792] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:07:54.792] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:07:54.792] | : . '   ..- attr(*, "init")= chr "done"
[08:07:54.792] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.792] | : . '     ...)  
[08:07:54.792] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.792] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.792] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:07:54.792] | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55c5b92a5d28> 
[08:07:54.792] | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:07:54.792] | : . '     ...)  
[08:07:54.792] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:07:54.797] | : . ' Formals differ
[08:07:54.798] | : . all.equal() for future ... done
[08:07:54.798] | : . Future strategies differ at level 1
[08:07:54.798] | : all.equal() for FutureStrategyList ... done
[08:07:54.798] | : plan(): Setting new future backend stack:
[08:07:54.798] | : List of future strategies:
[08:07:54.798] | : 1. multisession:
[08:07:54.798] | :    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:07:54.798] | :    - tweaked: FALSE
[08:07:54.798] | :    - call: plan(strategy)
[08:07:54.798] | : List of 1
[08:07:54.798] | :  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:07:54.798] | :     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.798] | :   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:07:54.798] | :   ..- attr(*, "init")= logi TRUE
[08:07:54.798] | :   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:07:54.798] | :     gc = FALSE, earlySignal = FALSE, ...)  
[08:07:54.798] | :   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:54.798] | :   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:54.798] | :   ..- attr(*, "untweakable")= chr "persistent"
[08:07:54.798] | :   ..- attr(*, "call")= language plan(strategy)
[08:07:54.798] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:54.801] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:07:54.801] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:54.802] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:07:54.802] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:54.803] | : . Legacy shutdown of cluster workers ...
[08:07:54.803] | : . ' Stopping existing cluster ...
[08:07:54.803] | : . ' , No pre-existing cluster. Skipping
[08:07:54.803] | : . ' Stopping existing cluster ... done
[08:07:54.803] | : . Legacy shutdown of cluster workers ... done
[08:07:54.803] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:07:54.803] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:07:54.803] | : . function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:07:54.803] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:54.803] | : .  - attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:07:54.803] | : .  - attr(*, "init")= logi TRUE
[08:07:54.803] | : .  - attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:07:54.803] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:07:54.803] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:54.803] | : .  - attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:54.803] | : .  - attr(*, "untweakable")= chr "persistent"
[08:07:54.803] | : .  - attr(*, "call")= language plan(strategy)
[08:07:54.809] | : . init: TRUE
[08:07:54.809] | : . makeFutureBackend(<multisession>) ...
[08:07:54.809] | : . ' Backend function: <‘NULL’>
[08:07:54.809] | : . ' Evaluator tweak arguments: [n=0]
[08:07:54.809] | : . '  list()
[08:07:54.809] | : . ' Evaluator formal arguments: [n=4]
[08:07:54.810] | : . '  list()
[08:07:54.810] | : . ' Backend factory arguments: [n=4]
[08:07:54.810] | : . ' Dotted pair list of 4
[08:07:54.810] | : . '  $ workers     : language availableCores()
[08:07:54.810] | : . '  $ rscript_libs: language .libPaths()
[08:07:54.810] | : . '  $ gc          : logi FALSE
[08:07:54.810] | : . '  $ earlySignal : logi FALSE
[08:07:54.812] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ...
[08:07:54.812] | : . ' , Arguments:
[08:07:54.812] | : . ' , List of 5
[08:07:54.812] | : . ' ,  $ workers     : Named int 2
[08:07:54.812] | : . ' ,   ..- attr(*, "names")= chr "mc.cores"
[08:07:54.812] | : . ' ,  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:07:54.812] | : . ' ,  $ interrupts  : logi TRUE
[08:07:54.812] | : . ' ,  $ gc          : logi FALSE
[08:07:54.812] | : . ' ,  $ earlySignal : logi FALSE
[08:07:54.816] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ...
[08:07:54.816] | : . ' , ; workers: 2
[08:07:54.816] | : . ' , ; getCluster() ...
[08:07:54.816] | : . ' , ; getCluster() ... done
[08:07:54.816] | : . ' , ; Stopping existing cluster ...
[08:07:54.816] | : . ' , ; ` No pre-existing cluster. Skipping
[08:07:54.817] | : . ' , ; Stopping existing cluster ... done
[08:07:54.817] | : . ' , ; Starting new cluster ...
[08:07:54.817] | : . ' , ; ` makeCluster(workers, ...) ...
[08:07:54.817] | : . ' , ; ` | Arguments:
[08:07:54.817] | : . ' , ; ` | List of 2
[08:07:54.817] | : . ' , ; ` |  $             : int 2
[08:07:54.817] | : . ' , ; ` |  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:07:54.818] | : . ' , ; ` | .makeCluster() ...
[08:07:54.818] | : . ' , ; ` | : workers: ‘2’
[08:07:54.818] | : . ' , ; ` | : R_FUTURE_PLAN: NA
[08:07:54.818] | : . ' , ; ` | : parallelly::makeClusterPSOCK() arguments:
[08:07:54.819] | : . ' , ; ` | : List of 2
[08:07:54.819] | : . ' , ; ` | :  $             : int 2
[08:07:54.819] | : . ' , ; ` | :  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:07:55.327] | : . ' , ; ` | : Generated cluster UUID
[08:07:55.328] | : . ' , ; ` | : Cluster UUID: ‘0ddfd5d6d9b70c50ad97cad8d7ad488a’
[08:07:55.328] | : . ' , ; ` | : Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:07:55.330] | : . ' , ; ` | .makeCluster() ... done
[08:07:55.330] | : . ' , ; ` | Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:07:55.332] | : . ' , ; ` makeCluster(workers, ...) ... done
[08:07:55.332] | : . ' , ; ` Number of workers: 2
[08:07:55.332] | : . ' , ; ` Workers UUID: ‘0ddfd5d6d9b70c50ad97cad8d7ad488a’
[08:07:55.332] | : . ' , ; Starting new cluster ... done
[08:07:55.332] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ... done
[08:07:55.332] | : . ' , Backend: <‘MultisessionFutureBackend’, ‘ClusterFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:55.333] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ... done
[08:07:55.333] | : . makeFutureBackend(<multisession>) ... done
[08:07:55.333] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:55.333] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:55.333] | : . plan(): nbrOfWorkers() = 2
[08:07:55.333] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:07:55.333] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library(future)

> library(graphics)

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1]  9 10 11 12

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[08:07:55.337] | future(..., label = NULL) ...
[08:07:55.337] | : lazy: TRUE
[08:07:55.337] | : stdout: TRUE
[08:07:55.337] | : conditions: [n=1] ‘condition’
[08:07:55.337] | : gc: FALSE
[08:07:55.338] | : earlySignal: FALSE
[08:07:55.338] | : getGlobalsAndPackages() ...
[08:07:55.338] | : . Searching for globals ...
[08:07:55.366] | : . ' globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[08:07:55.366] | : . Searching for globals ... done
[08:07:55.366] | : . Resolving globals: FALSE
[08:07:55.367] | : . Search for packages associated with the globals ...
[08:07:55.367] | : . ' Packages associated with globals: [2] ‘base’, ‘future’
[08:07:55.367] | : . ' Packages: [2] ‘base’, ‘future’
[08:07:55.367] | : . Search for packages associated with the globals ... done
[08:07:55.368] | : . Packages after dropping 'base': [1] ‘future’
[08:07:55.368] | : . Packages after dropping non-attached packages: [1] ‘future’
[08:07:55.368] | : . globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[08:07:55.368] | : . packages: [1] ‘future’
[08:07:55.368] | : getGlobalsAndPackages() ... done
[08:07:55.369] | future(..., label = NULL) ... done
 2[08:07:55.373] | future(..., label = NULL) ...
[08:07:55.374] | : lazy: TRUE
[08:07:55.374] | : stdout: TRUE
[08:07:55.374] | : conditions: [n=1] ‘condition’
[08:07:55.374] | : gc: FALSE
[08:07:55.374] | : earlySignal: FALSE
[08:07:55.374] | : getGlobalsAndPackages() ...
[08:07:55.374] | : . Searching for globals ...
[08:07:55.406] | : . ' globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[08:07:55.406] | : . Searching for globals ... done
[08:07:55.406] | : . Resolving globals: FALSE
[08:07:55.406] | : . Search for packages associated with the globals ...
[08:07:55.406] | : . ' Packages associated with globals: [2] ‘base’, ‘future’
[08:07:55.407] | : . ' Packages: [2] ‘base’, ‘future’
[08:07:55.407] | : . Search for packages associated with the globals ... done
[08:07:55.407] | : . Packages after dropping 'base': [1] ‘future’
[08:07:55.407] | : . Packages after dropping non-attached packages: [1] ‘future’
[08:07:55.407] | : . globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[08:07:55.407] | : . packages: [1] ‘future’
[08:07:55.407] | : getGlobalsAndPackages() ... done
[08:07:55.408] | future(..., label = NULL) ... done
 3[08:07:55.408] | future(..., label = NULL) ...
[08:07:55.408] | : lazy: TRUE
[08:07:55.408] | : stdout: TRUE
[08:07:55.408] | : conditions: [n=1] ‘condition’
[08:07:55.408] | : gc: FALSE
[08:07:55.408] | : earlySignal: FALSE
[08:07:55.408] | : getGlobalsAndPackages() ...
[08:07:55.408] | : . Searching for globals ...
[08:07:55.431] | : . ' globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[08:07:55.431] | : . Searching for globals ... done
[08:07:55.432] | : . Resolving globals: FALSE
[08:07:55.432] | : . Search for packages associated with the globals ...
[08:07:55.432] | : . ' Packages associated with globals: [2] ‘base’, ‘future’
[08:07:55.432] | : . ' Packages: [2] ‘base’, ‘future’
[08:07:55.432] | : . Search for packages associated with the globals ... done
[08:07:55.433] | : . Packages after dropping 'base': [1] ‘future’
[08:07:55.433] | : . Packages after dropping non-attached packages: [1] ‘future’
[08:07:55.433] | : . globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[08:07:55.433] | : . packages: [1] ‘future’
[08:07:55.433] | : getGlobalsAndPackages() ... done
[08:07:55.433] | future(..., label = NULL) ... done
 4[08:07:55.433] | future(..., label = NULL) ...
[08:07:55.434] | : lazy: TRUE
[08:07:55.434] | : stdout: TRUE
[08:07:55.434] | : conditions: [n=1] ‘condition’
[08:07:55.434] | : gc: FALSE
[08:07:55.434] | : earlySignal: FALSE
[08:07:55.434] | : getGlobalsAndPackages() ...
[08:07:55.434] | : . Searching for globals ...
[08:07:55.456] | : . ' globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[08:07:55.456] | : . Searching for globals ... done
[08:07:55.456] | : . Resolving globals: FALSE
[08:07:55.457] | : . Search for packages associated with the globals ...
[08:07:55.457] | : . ' Packages associated with globals: [2] ‘base’, ‘future’
[08:07:55.457] | : . ' Packages: [2] ‘base’, ‘future’
[08:07:55.457] | : . Search for packages associated with the globals ... done
[08:07:55.457] | : . Packages after dropping 'base': [1] ‘future’
[08:07:55.458] | : . Packages after dropping non-attached packages: [1] ‘future’
[08:07:55.458] | : . globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[08:07:55.458] | : . packages: [1] ‘future’
[08:07:55.458] | : getGlobalsAndPackages() ... done
[08:07:55.458] | future(..., label = NULL) ... done

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[08:07:55.468] | resolved() for Future (<unnamed-9>) ...
[08:07:55.468] | : state: ‘created’
[08:07:55.469] | : run: TRUE
[08:07:55.469] | : run() ...
[08:07:55.469] | : . run() for ‘Future’ (<unnamed-9>) ...
[08:07:55.469] | : . ' state: ‘created’
[08:07:55.469] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:55.469] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:55.469] | : . ' Using MultisessionFutureBackend ...
[08:07:55.469] | : . ' , Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:07:55.469] | : . ' , Launching futures ...
[08:07:55.470] | : . ' , ; launchFuture() for ClusterFutureBackend ...
[08:07:55.470] | : . ' , ; ` Workers: [n=2]
[08:07:55.470] | : . ' , ; ` Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:07:55.472] | : . ' , ; ` FutureRegistry: ‘workers-0ddfd5d6d9b70c50ad97cad8d7ad488a’
[08:07:55.472] | : . ' , ; ` requestWorker() ...
[08:07:55.472] | : . ' , ; ` | requestNode() ...
[08:07:55.472] | : . ' , ; ` | : Number of workers: 2
[08:07:55.472] | : . ' , ; ` | : Polling for a free worker ...
[08:07:55.472] | : . ' , ; ` | : . FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'list', earlySignal = 0) ...
[08:07:55.472] | : . ' , ; ` | : . ' Created empty registry ‘workers-0ddfd5d6d9b70c50ad97cad8d7ad488a’
[08:07:55.472] | : . ' , ; ` | : . ' Listing all futures
[08:07:55.472] | : . ' , ; ` | : . ' Number of registered futures: 0
[08:07:55.473] | : . ' , ; ` | : . FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'list', earlySignal = 0) ... done
[08:07:55.473] | : . ' , ; ` | : . Total time: 0
[08:07:55.473] | : . ' , ; ` | : Polling for a free worker ... done
[08:07:55.473] | : . ' , ; ` | : FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'list', earlySignal = 0) ...
[08:07:55.473] | : . ' , ; ` | : . Listing all futures
[08:07:55.473] | : . ' , ; ` | : . Number of registered futures: 0
[08:07:55.473] | : . ' , ; ` | : FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'list', earlySignal = 0) ... done
[08:07:55.473] | : . ' , ; ` | : avail: [n=2] ‘1’, ‘2’
[08:07:55.473] | : . ' , ; ` | : Index of first available worker: 1
[08:07:55.473] | : . ' , ; ` | : Validate that the worker is functional ...
[08:07:55.540] | : . ' , ; ` | : . Worker is functional
[08:07:55.541] | : . ' , ; ` | : . FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'list', earlySignal = 0) ...
[08:07:55.541] | : . ' , ; ` | : . ' Listing all futures
[08:07:55.541] | : . ' , ; ` | : . ' Number of registered futures: 0
[08:07:55.541] | : . ' , ; ` | : . FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'list', earlySignal = 0) ... done
[08:07:55.541] | : . ' , ; ` | : Validate that the worker is functional ... done
[08:07:55.541] | : . ' , ; ` | requestNode() ... done
[08:07:55.541] | : . ' , ; ` | cluster node index: 1
[08:07:55.542] | : . ' , ; ` requestWorker() ... done
[08:07:55.542] | : . ' , ; ` eraseGlobalEnvironment() ...
[08:07:55.542] | : . ' , ; ` eraseGlobalEnvironment() ... done
[08:07:55.542] | : . ' , ; ` launchFuture() ...
[08:07:55.542] | : . ' , ; ` | cluster node index: 1
[08:07:55.543] | : . ' , ; ` | getFutureData() ...
[08:07:55.543] | : . ' , ; ` | : getFutureCore() ...
[08:07:55.543] | : . ' , ; ` | : . Packages needed by the future expression (n = 1): ‘future’
[08:07:55.543] | : . ' , ; ` | : getFutureCore() ... done
[08:07:55.543] | : . ' , ; ` | : getFutureCapture() ...
[08:07:55.543] | : . ' , ; ` | : getFutureCapture() ... done
[08:07:55.543] | : . ' , ; ` | : getFutureContext() ...
[08:07:55.543] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:55.543] | : . ' , ; ` | : . ' Getting stack without first backend: [n=0] 
[08:07:55.544] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:55.544] | : . ' , ; ` | : . Packages needed by future backend (n = 0): <none>
[08:07:55.544] | : . ' , ; ` | : getFutureContext() ... done
[08:07:55.544] | : . ' , ; ` | getFutureData() ... done
[08:07:55.545] | : . ' , ; ` | FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'add', earlySignal = 0) ...
[08:07:55.545] | : . ' , ; ` | : Appended future to position #1
[08:07:55.545] | : . ' , ; ` | : Number of registered futures: 1
[08:07:55.545] | : . ' , ; ` | FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'add', earlySignal = 0) ... done
[08:07:55.545] | : . ' , ; ` launchFuture() ... done
[08:07:55.545] | : . ' , ; ` MultisessionFuture started
[08:07:55.545] | : . ' , ; launchFuture() for ClusterFutureBackend ... done
[08:07:55.545] | : . ' , Launching futures ... done
[08:07:55.546] | : . ' , Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:55.546] | : . ' Using MultisessionFutureBackend ... done
[08:07:55.546] | : . run() for ‘Future’ (<unnamed-9>) ... done
[08:07:55.546] | : run() ... done
[08:07:55.546] | : resolved() ...
[08:07:55.546] | : . resolved() for MultisessionFuture (<unnamed-9>) ...
[08:07:55.547] | : . ' Cluster node socket connection: index=4, id=409
[08:07:55.547] | : . ' assertValidConnection() ...
[08:07:55.547] | : . ' , cluster node index: 1
[08:07:55.547] | : . ' assertValidConnection() ... done
[08:07:55.558] | : . ' socketSelect(list(<connection #4 (id=409)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:55.558] | : . resolved() for MultisessionFuture (<unnamed-9>) ... done
[08:07:55.558] | : . resolved: FALSE
[08:07:55.558] | : resolved() ... done
[08:07:55.558] | resolved() for Future (<unnamed-9>) ... done
[08:07:55.559] | resolved() for Future (<unnamed-10>) ...
[08:07:55.559] | : state: ‘created’
[08:07:55.559] | : run: TRUE
[08:07:55.559] | : run() ...
[08:07:55.559] | : . run() for ‘Future’ (<unnamed-10>) ...
[08:07:55.559] | : . ' state: ‘created’
[08:07:55.559] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:55.559] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:55.559] | : . ' Using MultisessionFutureBackend ...
[08:07:55.560] | : . ' , Number of futures since start: 1 (1 created, 1 launched, 0 finished)
[08:07:55.560] | : . ' , Launching futures ...
[08:07:55.560] | : . ' , ; launchFuture() for ClusterFutureBackend ...
[08:07:55.560] | : . ' , ; ` Workers: [n=2]
[08:07:55.560] | : . ' , ; ` Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:07:55.562] | : . ' , ; ` FutureRegistry: ‘workers-0ddfd5d6d9b70c50ad97cad8d7ad488a’
[08:07:55.562] | : . ' , ; ` requestWorker() ...
[08:07:55.562] | : . ' , ; ` | requestNode() ...
[08:07:55.562] | : . ' , ; ` | : Number of workers: 2
[08:07:55.562] | : . ' , ; ` | : Polling for a free worker ...
[08:07:55.562] | : . ' , ; ` | : . FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'list', earlySignal = 0) ...
[08:07:55.562] | : . ' , ; ` | : . ' Listing all futures
[08:07:55.562] | : . ' , ; ` | : . ' Number of registered futures: 1
[08:07:55.563] | : . ' , ; ` | : . FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'list', earlySignal = 0) ... done
[08:07:55.563] | : . ' , ; ` | : . Total time: 0
[08:07:55.563] | : . ' , ; ` | : Polling for a free worker ... done
[08:07:55.563] | : . ' , ; ` | : FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'list', earlySignal = 0) ...
[08:07:55.563] | : . ' , ; ` | : . Listing all futures
[08:07:55.563] | : . ' , ; ` | : . Number of registered futures: 1
[08:07:55.563] | : . ' , ; ` | : FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'list', earlySignal = 0) ... done
[08:07:55.563] | : . ' , ; ` | : avail: [n=2] ‘2’
[08:07:55.563] | : . ' , ; ` | : Index of first available worker: 2
[08:07:55.564] | : . ' , ; ` | : Validate that the worker is functional ...
[08:07:55.632] | : . ' , ; ` | : . Worker is functional
[08:07:55.633] | : . ' , ; ` | : . FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'list', earlySignal = 0) ...
[08:07:55.633] | : . ' , ; ` | : . ' Listing all futures
[08:07:55.633] | : . ' , ; ` | : . ' Number of registered futures: 1
[08:07:55.633] | : . ' , ; ` | : . FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'list', earlySignal = 0) ... done
[08:07:55.633] | : . ' , ; ` | : Validate that the worker is functional ... done
[08:07:55.634] | : . ' , ; ` | requestNode() ... done
[08:07:55.634] | : . ' , ; ` | cluster node index: 2
[08:07:55.634] | : . ' , ; ` requestWorker() ... done
[08:07:55.634] | : . ' , ; ` eraseGlobalEnvironment() ...
[08:07:55.635] | : . ' , ; ` eraseGlobalEnvironment() ... done
[08:07:55.635] | : . ' , ; ` launchFuture() ...
[08:07:55.635] | : . ' , ; ` | cluster node index: 2
[08:07:55.635] | : . ' , ; ` | getFutureData() ...
[08:07:55.636] | : . ' , ; ` | : getFutureCore() ...
[08:07:55.636] | : . ' , ; ` | : . Packages needed by the future expression (n = 1): ‘future’
[08:07:55.636] | : . ' , ; ` | : getFutureCore() ... done
[08:07:55.636] | : . ' , ; ` | : getFutureCapture() ...
[08:07:55.636] | : . ' , ; ` | : getFutureCapture() ... done
[08:07:55.637] | : . ' , ; ` | : getFutureContext() ...
[08:07:55.637] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:55.637] | : . ' , ; ` | : . ' Getting stack without first backend: [n=0] 
[08:07:55.637] | : . ' , ; ` | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:55.637] | : . ' , ; ` | : . Packages needed by future backend (n = 0): <none>
[08:07:55.638] | : . ' , ; ` | : getFutureContext() ... done
[08:07:55.638] | : . ' , ; ` | getFutureData() ... done
[08:07:55.639] | : . ' , ; ` | FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'add', earlySignal = 0) ...
[08:07:55.639] | : . ' , ; ` | : Appended future to position #2
[08:07:55.639] | : . ' , ; ` | : Number of registered futures: 2
[08:07:55.639] | : . ' , ; ` | FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'add', earlySignal = 0) ... done
[08:07:55.639] | : . ' , ; ` launchFuture() ... done
[08:07:55.640] | : . ' , ; ` MultisessionFuture started
[08:07:55.640] | : . ' , ; launchFuture() for ClusterFutureBackend ... done
[08:07:55.640] | : . ' , Launching futures ... done
[08:07:55.640] | : . ' , Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:55.640] | : . ' Using MultisessionFutureBackend ... done
[08:07:55.641] | : . run() for ‘Future’ (<unnamed-10>) ... done
[08:07:55.641] | : run() ... done
[08:07:55.641] | : resolved() ...
[08:07:55.641] | : . resolved() for MultisessionFuture (<unnamed-10>) ...
[08:07:55.642] | : . ' Cluster node socket connection: index=5, id=410
[08:07:55.642] | : . ' assertValidConnection() ...
[08:07:55.642] | : . ' , cluster node index: 2
[08:07:55.643] | : . ' assertValidConnection() ... done
[08:07:55.653] | : . ' socketSelect(list(<connection #5 (id=410)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:55.653] | : . resolved() for MultisessionFuture (<unnamed-10>) ... done
[08:07:55.654] | : . resolved: FALSE
[08:07:55.654] | : resolved() ... done
[08:07:55.654] | resolved() for Future (<unnamed-10>) ... done
[08:07:55.654] | resolved() for Future (<unnamed-11>) ...
[08:07:55.654] | : state: ‘created’
[08:07:55.655] | : run: TRUE
[08:07:55.655] | : run() ...
[08:07:55.655] | : . run() for ‘Future’ (<unnamed-11>) ...
[08:07:55.655] | : . ' state: ‘created’
[08:07:55.655] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:55.655] | : . ' plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:55.656] | : . ' Using MultisessionFutureBackend ...
[08:07:55.656] | : . ' , Number of futures since start: 2 (2 created, 2 launched, 0 finished)
[08:07:55.656] | : . ' , Launching futures ...
[08:07:55.656] | : . ' , ; launchFuture() for ClusterFutureBackend ...
[08:07:55.656] | : . ' , ; ` Workers: [n=2]
[08:07:55.657] | : . ' , ; ` Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:07:55.659] | : . ' , ; ` FutureRegistry: ‘workers-0ddfd5d6d9b70c50ad97cad8d7ad488a’
[08:07:55.659] | : . ' , ; ` requestWorker() ...
[08:07:55.659] | : . ' , ; ` | requestNode() ...
[08:07:55.659] | : . ' , ; ` | : Number of workers: 2
[08:07:55.659] | : . ' , ; ` | : Polling for a free worker ...
[08:07:55.660] | : . ' , ; ` | : . FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'list', earlySignal = 0) ...
[08:07:55.660] | : . ' , ; ` | : . ' Listing all futures
[08:07:55.660] | : . ' , ; ` | : . ' Number of registered futures: 2
[08:07:55.660] | : . ' , ; ` | : . FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'list', earlySignal = 0) ... done
[08:07:55.660] | : . ' , ; ` | : . Poll #1 (0): usedNodes() = 2, workers = 2
[08:07:55.670] | : . ' , ; ` | : . FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'collect-first', earlySignal = 1) ...
[08:07:55.670] | : . ' , ; ` | : . ' collectValues('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', firstOnly = TRUE) ...
[08:07:55.671] | : . ' , ; ` | : . ' , resolved() for MultisessionFuture (<unnamed-9>) ...
[08:07:55.671] | : . ' , ; ` | : . ' , ; Cluster node socket connection: index=4, id=409
[08:07:55.671] | : . ' , ; ` | : . ' , ; assertValidConnection() ...
[08:07:55.671] | : . ' , ; ` | : . ' , ; ` cluster node index: 1
[08:07:55.672] | : . ' , ; ` | : . ' , ; assertValidConnection() ... done
[08:07:55.672] | : . ' , ; ` | : . ' , ; receiveMessageFromWorker() for ClusterFuture ...
[08:07:55.672] | : . ' , ; ` | : . ' , ; ` cluster node index: 1
[08:07:55.673] | : . ' , ; ` | : . ' , ; ` [1] TRUE
[08:07:55.673] | : . ' , ; ` | : . ' , ; ` received data:
[08:07:55.673] | : . ' , ; ` | : . ' , ; ` List of 5
[08:07:55.673] | : . ' , ; ` | : . ' , ; `  $ type   : chr "VALUE"
[08:07:55.673] | : . ' , ; ` | : . ' , ; `  $ value  :List of 16
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   ..$ value              : 'Mandelbrot' int [1:25, 1:25] 1 1 1 1 1 1 1 1 1 1 ...
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. ..- attr(*, "params")=List of 3
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. .. ..$ Z      : cplx [1:25, 1:25] -2.25-1.5i -2.25-1.44i -2.25-1.38i ...
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. .. .. ..- attr(*, "region")=List of 2
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. .. .. .. ..$ xrange: num [1:2] -2.25 -0.781
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. .. .. .. ..$ yrange: num [1:2] -1.5 -0.0306
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. .. .. ..- attr(*, "tile")= int [1:2] 1 1
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. .. ..$ maxIter: int 200
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. .. ..$ tau    : num 2
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   ..$ visible            : logi TRUE
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   ..$ stdout             : chr ""
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   ..$ conditions         :List of 2
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. ..$ :List of 2
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. .. ..$ condition:List of 2
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. .. .. ..$ message: chr "Calculating tile #1 of 4 ..."
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. .. .. ..$ call   : language message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. .. .. .. ..- attr(*, "srcref")= 'srcref' int [1:8] 69 5 69 79 5 79 69 69
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. .. .. .. .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x55c5bb615e50> 
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. .. ..$ signaled : int 0
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. ..$ :List of 2
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. .. ..$ condition:List of 2
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. .. .. ..$ message: chr " done\n"
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. .. .. ..$ call   : language message(" done")
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. .. .. .. ..- attr(*, "srcref")= 'srcref' int [1:8] 75 5 75 20 5 20 75 75
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. .. .. .. .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x55c5bb615e50> 
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. .. ..$ signaled : int 0
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   ..$ rng                : logi FALSE
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   ..$ seed               : NULL
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   ..$ misuseGlobalEnv    : NULL
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   ..$ misuseConnections  :List of 3
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. ..$ added   : NULL
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. ..$ removed : NULL
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. ..$ replaced: NULL
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   ..$ misuseDevices      : NULL
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   ..$ misuseDefaultDevice: list()
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:07:55"
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:07:55"
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   ..$ uuid               : chr [1:2] "f65ddd9fbff7c63a830cf24ab09e06bb" "9"
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   ..$ session_uuid       : chr "b5aaa2445e4d55dde1e5668ae7a4d9ea"
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. ..- attr(*, "source")=List of 5
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. .. ..$ host  : Named chr "285a5f234941"
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. .. ..$ pid   : int 67461
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:07:55"
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. .. ..$ random: int 2147483647
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   ..$ r_info             :List of 4
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. .. ..$ : int [1:3] 4 5 0
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. ..$ os           : chr "unix"
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. ..$ os_name      : chr "Linux"
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   .. ..$ captures_utf8: logi TRUE
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   ..$ version            : chr "1.8"
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   ..- attr(*, "class")= chr "FutureResult"
[08:07:55.673] | : . ' , ; ` | : . ' , ; `  $ success: logi TRUE
[08:07:55.673] | : . ' , ; ` | : . ' , ; `  $ time   : 'proc_time' Named num [1:5] 0.072 0.002 0.074 0 0
[08:07:55.673] | : . ' , ; ` | : . ' , ; `   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:07:55.673] | : . ' , ; ` | : . ' , ; `  $ tag    : NULL
[08:07:55.698] | : . ' , ; ` | : . ' , ; ` Received FutureResult
[08:07:55.698] | : . ' , ; ` | : . ' , ; ` FutureResult:
[08:07:55.698] | : . ' , ; ` | : . ' , ; ` value: ‘Mandelbrot’, ‘matrix’, ‘array’
[08:07:55.698] | : . ' , ; ` | : . ' , ; ` visible: TRUE
[08:07:55.698] | : . ' , ; ` | : . ' , ; ` stdout: character
[08:07:55.698] | : . ' , ; ` | : . ' , ; ` conditions: [n = 2] simpleMessage, simpleMessage
[08:07:55.698] | : . ' , ; ` | : . ' , ; ` RNG used: FALSE
[08:07:55.698] | : . ' , ; ` | : . ' , ; ` duration: 0.0714457 secs (started 2025-06-17 08:07:55.58798)
[08:07:55.698] | : . ' , ; ` | : . ' , ; ` version: 1.8
[08:07:55.699] | : . ' , ; ` | : . ' , ; ` FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'remove', earlySignal = 0) ...
[08:07:55.699] | : . ' , ; ` | : . ' , ; ` | Removed future from position #1
[08:07:55.699] | : . ' , ; ` | : . ' , ; ` | Number of registered futures: 1
[08:07:55.699] | : . ' , ; ` | : . ' , ; ` FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'remove', earlySignal = 0) ... done
[08:07:55.700] | : . ' , ; ` | : . ' , ; ` Erased future from future backend
[08:07:55.700] | : . ' , ; ` | : . ' , ; ` result() for ClusterFuture ...
[08:07:55.700] | : . ' , ; ` | : . ' , ; ` | result already collected: FutureResult
[08:07:55.700] | : . ' , ; ` | : . ' , ; ` result() for ClusterFuture ... done
[08:07:55.700] | : . ' , ; ` | : . ' , ; ` signalConditions() ...
[08:07:55.700] | : . ' , ; ` | : . ' , ; ` | include = ‘immediateCondition’
[08:07:55.700] | : . ' , ; ` | : . ' , ; ` | exclude = 
[08:07:55.700] | : . ' , ; ` | : . ' , ; ` | resignal = FALSE
[08:07:55.701] | : . ' , ; ` | : . ' , ; ` | Number of conditions: 2
[08:07:55.701] | : . ' , ; ` | : . ' , ; ` |  int 2
[08:07:55.701] | : . ' , ; ` | : . ' , ; ` | Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:55.701] | : . ' , ; ` | : . ' , ; ` | Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:55.701] | : . ' , ; ` | : . ' , ; ` signalConditions() ... done
[08:07:55.701] | : . ' , ; ` | : . ' , ; receiveMessageFromWorker() for ClusterFuture ... done
[08:07:55.702] | : . ' , ; ` | : . ' , ; receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:07:55.702] | : . ' , ; ` | : . ' , resolved() for MultisessionFuture (<unnamed-9>) ... done
[08:07:55.702] | : . ' , ; ` | : . ' , assertFutureResult() ...
[08:07:55.702] | : . ' , ; ` | : . ' , ; Future uuid: f65ddd9fbff7c63a830cf24ab09e06bb[08:07:55.702] | : . ' , ; ` | : . ' , ; Future uuid: 9
[08:07:55.702] | : . ' , ; ` | : . ' , ; identical; success
[08:07:55.702] | : . ' , ; ` | : . ' , assertFutureResult() ... done
[08:07:55.702] | : . ' , ; ` | : . ' , Future at position #1 is resolved ...
[08:07:55.702] | : . ' , ; ` | : . ' , ; value() for MultisessionFuture (<unnamed-9>) ...
[08:07:55.702] | : . ' , ; ` | : . ' , ; ` result() for ClusterFuture ...
[08:07:55.703] | : . ' , ; ` | : . ' , ; ` | result already collected: FutureResult
[08:07:55.703] | : . ' , ; ` | : . ' , ; ` result() for ClusterFuture ... done
[08:07:55.703] | : . ' , ; ` | : . ' , ; ` result() for ClusterFuture ...
[08:07:55.703] | : . ' , ; ` | : . ' , ; ` | result already collected: FutureResult
[08:07:55.703] | : . ' , ; ` | : . ' , ; ` result() for ClusterFuture ... done
[08:07:55.703] | : . ' , ; ` | : . ' , ; ` signalConditions() ...
[08:07:55.703] | : . ' , ; ` | : . ' , ; ` | include = ‘immediateCondition’
[08:07:55.703] | : . ' , ; ` | : . ' , ; ` | exclude = 
[08:07:55.703] | : . ' , ; ` | : . ' , ; ` | resignal = FALSE
[08:07:55.704] | : . ' , ; ` | : . ' , ; ` | Number of conditions: 2
[08:07:55.704] | : . ' , ; ` | : . ' , ; ` |  int 2
[08:07:55.704] | : . ' , ; ` | : . ' , ; ` | Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:55.704] | : . ' , ; ` | : . ' , ; ` | Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:55.704] | : . ' , ; ` | : . ' , ; ` signalConditions() ... done
[08:07:55.704] | : . ' , ; ` | : . ' , ; ` check for misuse ...
[08:07:55.705] | : . ' , ; ` | : . ' , ; ` check for misuse ... done
[08:07:55.705] | : . ' , ; ` | : . ' , ; value() for MultisessionFuture (<unnamed-9>) ... done
[08:07:55.705] | : . ' , ; ` | : . ' , Future at position #1 is resolved ... done
[08:07:55.705] | : . ' , ; ` | : . ' collectValues('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', firstOnly = TRUE) ... done
[08:07:55.705] | : . ' , ; ` | : . ' Remove collected futures ...
[08:07:55.705] | : . ' , ; ` | : . ' , Indices of futures to drop: [n=1] ‘1’
[08:07:55.705] | : . ' , ; ` | : . ' Remove collected futures ... done
[08:07:55.706] | : . ' , ; ` | : . FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'collect-first', earlySignal = 1) ... done
[08:07:55.706] | : . ' , ; ` | : . Early signaling of 2 future candidates ...
[08:07:55.706] | : . ' , ; ` | : . Number of futures with early signaling requested: 0
[08:07:55.706] | : . ' , ; ` | : . Early signaling of 2 future candidates ... done
[08:07:55.706] | : . ' , ; ` | : . Number of registered futures: 2
[08:07:55.706] | : . ' , ; ` | : Polling for a free worker ... done
[08:07:55.706] | : . ' , ; ` | : FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'list', earlySignal = 0) ...
[08:07:55.706] | : . ' , ; ` | : . Listing all futures
[08:07:55.706] | : . ' , ; ` | : . Number of registered futures: 1
[08:07:55.706] | : . ' , ; ` | : FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'list', earlySignal = 0) ... done
[08:07:55.707] | : . ' , ; ` | : Total time: 0.0465438365936279
[08:07:55.707] | : . ' , ; ` | requestNode() ... done
[08:07:55.707] | : . ' , ; ` | FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'list', earlySignal = 0) ...
[08:07:55.707] | : . ' , ; ` | : Listing all futures
[08:07:55.707] | : . ' , ; ` | : Number of registered futures: 1
[08:07:55.707] | : . ' , ; ` | FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'list', earlySignal = 0) ... done
[08:07:55.707] | : . ' , ; ` | avail: [n=2] ‘1’
[08:07:55.707] | : . ' , ; ` | Index of first available worker: 1
[08:07:55.707] | : . ' , ; ` | Validate that the worker is functional ...
[08:07:55.766] | : . ' , ; ` | : Worker is functional
[08:07:55.767] | : . ' , ; ` | : FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'list', earlySignal = 0) ...
[08:07:55.767] | : . ' , ; ` | : . Listing all futures
[08:07:55.767] | : . ' , ; ` | : . Number of registered futures: 1
[08:07:55.767] | : . ' , ; ` | : FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'list', earlySignal = 0) ... done
[08:07:55.769] | : . ' , ; ` | Validate that the worker is functional ... done
[08:07:55.769] | : . ' , ; ` requestWorker() ... done
[08:07:55.769] | : . ' , ; ` cluster node index: 1
[08:07:55.769] | : . ' , ; launchFuture() for ClusterFutureBackend ... done
[08:07:55.769] | : . ' , ; eraseGlobalEnvironment() ...
[08:07:55.770] | : . ' , ; eraseGlobalEnvironment() ... done
[08:07:55.770] | : . ' , ; launchFuture() ...
[08:07:55.770] | : . ' , ; ` cluster node index: 1
[08:07:55.770] | : . ' , ; ` getFutureData() ...
[08:07:55.770] | : . ' , ; ` | getFutureCore() ...
[08:07:55.770] | : . ' , ; ` | : Packages needed by the future expression (n = 1): ‘future’
[08:07:55.771] | : . ' , ; ` | getFutureCore() ... done
[08:07:55.771] | : . ' , ; ` | getFutureCapture() ...
[08:07:55.771] | : . ' , ; ` | getFutureCapture() ... done
[08:07:55.771] | : . ' , ; ` | getFutureContext() ...
[08:07:55.771] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:55.771] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:07:55.771] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:55.771] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:07:55.771] | : . ' , ; ` | getFutureContext() ... done
[08:07:55.772] | : . ' , ; ` getFutureData() ... done
[08:07:55.772] | : . ' , ; ` FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'add', earlySignal = 0) ...
[08:07:55.772] | : . ' , ; ` | Appended future to position #2
[08:07:55.772] | : . ' , ; ` | Number of registered futures: 2
[08:07:55.772] | : . ' , ; ` FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'add', earlySignal = 0) ... done
[08:07:55.772] | : . ' , ; launchFuture() ... done
[08:07:55.773] | : . ' , ; MultisessionFuture started
[08:07:55.773] | : . ' , Launching futures ... done
[08:07:55.773] | : . ' Using MultisessionFutureBackend ... done
[08:07:55.773] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:55.773] | : . run() for ‘Future’ (<unnamed-11>) ... done
[08:07:55.773] | : run() ... done
[08:07:55.773] | resolved() for Future (<unnamed-11>) ... done
[08:07:55.773] | resolved() ...
[08:07:55.773] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:55.774] | : . Cluster node socket connection: index=4, id=409
[08:07:55.774] | : . assertValidConnection() ...
[08:07:55.774] | : . ' cluster node index: 1
[08:07:55.774] | : . assertValidConnection() ... done
[08:07:55.785] | : . socketSelect(list(<connection #4 (id=409)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:55.785] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:55.785] | : resolved: FALSE
[08:07:55.785] | resolved() ... done
[08:07:55.785] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:55.785] resolved() for Future (<unnamed-12>) ...
[08:07:55.786] | state: ‘created’
[08:07:55.786] | run: TRUE
[08:07:55.786] | run() ...
[08:07:55.786] | : run() for ‘Future’ (<unnamed-12>) ...
[08:07:55.786] | : . state: ‘created’
[08:07:55.786] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:55.786] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:55.786] | : . Using MultisessionFutureBackend ...
[08:07:55.786] | : . ' Number of futures since start: 3 (3 created, 3 launched, 2 finished)
[08:07:55.787] | : . ' Launching futures ...
[08:07:55.787] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:07:55.787] | : . ' , ; Workers: [n=2]
[08:07:55.787] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:07:55.788] | : . ' , ; FutureRegistry: ‘workers-0ddfd5d6d9b70c50ad97cad8d7ad488a’
[08:07:55.789] | : . ' , ; requestWorker() ...
[08:07:55.789] | : . ' , ; ` requestNode() ...
[08:07:55.789] | : . ' , ; ` | Number of workers: 2
[08:07:55.789] | : . ' , ; ` | Polling for a free worker ...
[08:07:55.789] | : . ' , ; ` | : FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'list', earlySignal = 0) ...
[08:07:55.789] | : . ' , ; ` | : . Listing all futures
[08:07:55.789] | : . ' , ; ` | : . Number of registered futures: 2
[08:07:55.789] | : . ' , ; ` | : FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'list', earlySignal = 0) ... done
[08:07:55.789] | : . ' , ; ` | : Poll #1 (0): usedNodes() = 2, workers = 2
[08:07:55.800] | : . ' , ; ` | : FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'collect-first', earlySignal = 1) ...
[08:07:55.800] | : . ' , ; ` | : . collectValues('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', firstOnly = TRUE) ...
[08:07:55.800] | : . ' , ; ` | : . ' resolved() for MultisessionFuture (<unnamed-10>) ...
[08:07:55.800] | : . ' , ; ` | : . ' , Cluster node socket connection: index=5, id=410
[08:07:55.801] | : . ' , ; ` | : . ' , assertValidConnection() ...
[08:07:55.801] | : . ' , ; ` | : . ' , ; cluster node index: 2
[08:07:55.801] | : . ' , ; ` | : . ' , assertValidConnection() ... done
[08:07:55.801] | : . ' , ; ` | : . ' , receiveMessageFromWorker() for ClusterFuture ...
[08:07:55.801] | : . ' , ; ` | : . ' , ; cluster node index: 2
[08:07:55.802] | : . ' , ; ` | : . ' , ; [1] TRUE
[08:07:55.802] | : . ' , ; ` | : . ' , ; received data:
[08:07:55.802] | : . ' , ; ` | : . ' , ; List of 5
[08:07:55.802] | : . ' , ; ` | : . ' , ;  $ type   : chr "VALUE"
[08:07:55.802] | : . ' , ; ` | : . ' , ;  $ value  :List of 16
[08:07:55.802] | : . ' , ; ` | : . ' , ;   ..$ value              : 'Mandelbrot' int [1:25, 1:25] 1 1 1 1 2 2 2 2 2 3 ...
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. ..- attr(*, "params")=List of 3
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. .. ..$ Z      : cplx [1:25, 1:25] -0.719-1.5i -0.719-1.44i -0.719-1.38i ...
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. .. .. ..- attr(*, "region")=List of 2
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. .. .. .. ..$ xrange: num [1:2] -0.719 0.75
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. .. .. .. ..$ yrange: num [1:2] -1.5 -0.0306
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. .. .. ..- attr(*, "tile")= int [1:2] 1 2
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. .. ..$ maxIter: int 200
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. .. ..$ tau    : num 2
[08:07:55.802] | : . ' , ; ` | : . ' , ;   ..$ visible            : logi TRUE
[08:07:55.802] | : . ' , ; ` | : . ' , ;   ..$ stdout             : chr ""
[08:07:55.802] | : . ' , ; ` | : . ' , ;   ..$ conditions         :List of 2
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. ..$ :List of 2
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. .. ..$ condition:List of 2
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. .. .. ..$ message: chr "Calculating tile #2 of 4 ..."
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. .. .. ..$ call   : language message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. .. .. .. ..- attr(*, "srcref")= 'srcref' int [1:8] 69 5 69 79 5 79 69 69
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. .. .. .. .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x55c5b9726330> 
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. .. ..$ signaled : int 0
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. ..$ :List of 2
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. .. ..$ condition:List of 2
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. .. .. ..$ message: chr " done\n"
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. .. .. ..$ call   : language message(" done")
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. .. .. .. ..- attr(*, "srcref")= 'srcref' int [1:8] 75 5 75 20 5 20 75 75
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. .. .. .. .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x55c5b9726330> 
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. .. ..$ signaled : int 0
[08:07:55.802] | : . ' , ; ` | : . ' , ;   ..$ rng                : logi FALSE
[08:07:55.802] | : . ' , ; ` | : . ' , ;   ..$ seed               : NULL
[08:07:55.802] | : . ' , ; ` | : . ' , ;   ..$ misuseGlobalEnv    : NULL
[08:07:55.802] | : . ' , ; ` | : . ' , ;   ..$ misuseConnections  :List of 3
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. ..$ added   : NULL
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. ..$ removed : NULL
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. ..$ replaced: NULL
[08:07:55.802] | : . ' , ; ` | : . ' , ;   ..$ misuseDevices      : NULL
[08:07:55.802] | : . ' , ; ` | : . ' , ;   ..$ misuseDefaultDevice: list()
[08:07:55.802] | : . ' , ; ` | : . ' , ;   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:07:55"
[08:07:55.802] | : . ' , ; ` | : . ' , ;   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:07:55"
[08:07:55.802] | : . ' , ; ` | : . ' , ;   ..$ uuid               : chr [1:2] "f65ddd9fbff7c63a830cf24ab09e06bb" "10"
[08:07:55.802] | : . ' , ; ` | : . ' , ;   ..$ session_uuid       : chr "089201a029fdb485aefbf937f3b68733"
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. ..- attr(*, "source")=List of 5
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. .. ..$ host  : Named chr "285a5f234941"
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. .. ..$ pid   : int 67460
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:07:55"
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. .. ..$ random: int 2147483647
[08:07:55.802] | : . ' , ; ` | : . ' , ;   ..$ r_info             :List of 4
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. .. ..$ : int [1:3] 4 5 0
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. ..$ os           : chr "unix"
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. ..$ os_name      : chr "Linux"
[08:07:55.802] | : . ' , ; ` | : . ' , ;   .. ..$ captures_utf8: logi TRUE
[08:07:55.802] | : . ' , ; ` | : . ' , ;   ..$ version            : chr "1.8"
[08:07:55.802] | : . ' , ; ` | : . ' , ;   ..- attr(*, "class")= chr "FutureResult"
[08:07:55.802] | : . ' , ; ` | : . ' , ;  $ success: logi TRUE
[08:07:55.802] | : . ' , ; ` | : . ' , ;  $ time   : 'proc_time' Named num [1:5] 0.054 0.002 0.056 0 0
[08:07:55.802] | : . ' , ; ` | : . ' , ;   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:07:55.802] | : . ' , ; ` | : . ' , ;  $ tag    : NULL
[08:07:55.820] | : . ' , ; ` | : . ' , ; Received FutureResult
[08:07:55.821] | : . ' , ; ` | : . ' , ; FutureResult:
[08:07:55.821] | : . ' , ; ` | : . ' , ; value: ‘Mandelbrot’, ‘matrix’, ‘array’
[08:07:55.821] | : . ' , ; ` | : . ' , ; visible: TRUE
[08:07:55.821] | : . ' , ; ` | : . ' , ; stdout: character
[08:07:55.821] | : . ' , ; ` | : . ' , ; conditions: [n = 2] simpleMessage, simpleMessage
[08:07:55.821] | : . ' , ; ` | : . ' , ; RNG used: FALSE
[08:07:55.821] | : . ' , ; ` | : . ' , ; duration: 0.05408764 secs (started 2025-06-17 08:07:55.682019)
[08:07:55.821] | : . ' , ; ` | : . ' , ; version: 1.8
[08:07:55.821] | : . ' , ; ` | : . ' , ; FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'remove', earlySignal = 0) ...
[08:07:55.821] | : . ' , ; ` | : . ' , ; ` Removed future from position #1
[08:07:55.821] | : . ' , ; ` | : . ' , ; ` Number of registered futures: 1
[08:07:55.821] | : . ' , ; ` | : . ' , ; FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'remove', earlySignal = 0) ... done
[08:07:55.822] | : . ' , ; ` | : . ' , ; Erased future from future backend
[08:07:55.822] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ...
[08:07:55.822] | : . ' , ; ` | : . ' , ; ` result already collected: FutureResult
[08:07:55.822] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ... done
[08:07:55.822] | : . ' , ; ` | : . ' , ; signalConditions() ...
[08:07:55.822] | : . ' , ; ` | : . ' , ; ` include = ‘immediateCondition’
[08:07:55.822] | : . ' , ; ` | : . ' , ; ` exclude = 
[08:07:55.822] | : . ' , ; ` | : . ' , ; ` resignal = FALSE
[08:07:55.822] | : . ' , ; ` | : . ' , ; ` Number of conditions: 2
[08:07:55.823] | : . ' , ; ` | : . ' , ; `  int 2
[08:07:55.823] | : . ' , ; ` | : . ' , ; ` Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:55.823] | : . ' , ; ` | : . ' , ; ` Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:55.823] | : . ' , ; ` | : . ' , ; signalConditions() ... done
[08:07:55.823] | : . ' , ; ` | : . ' , receiveMessageFromWorker() for ClusterFuture ... done
[08:07:55.823] | : . ' , ; ` | : . ' , receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:07:55.823] | : . ' , ; ` | : . ' resolved() for MultisessionFuture (<unnamed-10>) ... done
[08:07:55.824] | : . ' , ; ` | : . ' assertFutureResult() ...
[08:07:55.824] | : . ' , ; ` | : . ' , Future uuid: f65ddd9fbff7c63a830cf24ab09e06bb[08:07:55.824] | : . ' , ; ` | : . ' , Future uuid: 10
[08:07:55.824] | : . ' , ; ` | : . ' , identical; success
[08:07:55.824] | : . ' , ; ` | : . ' assertFutureResult() ... done
[08:07:55.824] | : . ' , ; ` | : . ' Future at position #1 is resolved ...
[08:07:55.824] | : . ' , ; ` | : . ' , value() for MultisessionFuture (<unnamed-10>) ...
[08:07:55.824] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ...
[08:07:55.824] | : . ' , ; ` | : . ' , ; ` result already collected: FutureResult
[08:07:55.824] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ... done
[08:07:55.825] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ...
[08:07:55.825] | : . ' , ; ` | : . ' , ; ` result already collected: FutureResult
[08:07:55.825] | : . ' , ; ` | : . ' , ; result() for ClusterFuture ... done
[08:07:55.825] | : . ' , ; ` | : . ' , ; signalConditions() ...
[08:07:55.825] | : . ' , ; ` | : . ' , ; ` include = ‘immediateCondition’
[08:07:55.825] | : . ' , ; ` | : . ' , ; ` exclude = 
[08:07:55.825] | : . ' , ; ` | : . ' , ; ` resignal = FALSE
[08:07:55.825] | : . ' , ; ` | : . ' , ; ` Number of conditions: 2
[08:07:55.825] | : . ' , ; ` | : . ' , ; `  int 2
[08:07:55.826] | : . ' , ; ` | : . ' , ; ` Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:55.826] | : . ' , ; ` | : . ' , ; ` Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:55.826] | : . ' , ; ` | : . ' , ; signalConditions() ... done
[08:07:55.826] | : . ' , ; ` | : . ' , ; check for misuse ...
[08:07:55.826] | : . ' , ; ` | : . ' , ; check for misuse ... done
[08:07:55.826] | : . ' , ; ` | : . ' , value() for MultisessionFuture (<unnamed-10>) ... done
[08:07:55.827] | : . ' , ; ` | : . ' Future at position #1 is resolved ... done
[08:07:55.827] | : . ' , ; ` | : . collectValues('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', firstOnly = TRUE) ... done
[08:07:55.827] | : . ' , ; ` | : . Remove collected futures ...
[08:07:55.827] | : . ' , ; ` | : . ' Indices of futures to drop: [n=1] ‘1’
[08:07:55.827] | : . ' , ; ` | : . Remove collected futures ... done
[08:07:55.827] | : . ' , ; ` | : FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'collect-first', earlySignal = 1) ... done
[08:07:55.827] | : . ' , ; ` | : Early signaling of 2 future candidates ...
[08:07:55.827] | : . ' , ; ` | : Number of futures with early signaling requested: 0
[08:07:55.827] | : . ' , ; ` | : Early signaling of 2 future candidates ... done
[08:07:55.828] | : . ' , ; ` | : Number of registered futures: 2
[08:07:55.828] | : . ' , ; ` | Polling for a free worker ... done
[08:07:55.828] | : . ' , ; ` | FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'list', earlySignal = 0) ...
[08:07:55.828] | : . ' , ; ` | : Listing all futures
[08:07:55.828] | : . ' , ; ` | : Number of registered futures: 1
[08:07:55.828] | : . ' , ; ` | FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'list', earlySignal = 0) ... done
[08:07:55.828] | : . ' , ; ` | Total time: 0.0386936664581299
[08:07:55.828] | : . ' , ; ` requestNode() ... done
[08:07:55.828] | : . ' , ; ` FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'list', earlySignal = 0) ...
[08:07:55.828] | : . ' , ; ` | Listing all futures
[08:07:55.829] | : . ' , ; ` | Number of registered futures: 1
[08:07:55.829] | : . ' , ; ` FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'list', earlySignal = 0) ... done
[08:07:55.829] | : . ' , ; ` avail: [n=2] ‘2’
[08:07:55.829] | : . ' , ; ` Index of first available worker: 2
[08:07:55.829] | : . ' , ; ` Validate that the worker is functional ...
[08:07:55.884] | : . ' , ; ` | Worker is functional
[08:07:55.885] | : . ' , ; ` | FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'list', earlySignal = 0) ...
[08:07:55.885] | : . ' , ; ` | : Listing all futures
[08:07:55.885] | : . ' , ; ` | : Number of registered futures: 1
[08:07:55.885] | : . ' , ; ` | FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'list', earlySignal = 0) ... done
[08:07:55.885] | : . ' , ; ` Validate that the worker is functional ... done
[08:07:55.885] | : . ' , ; requestWorker() ... done
[08:07:55.885] | : . ' , ; cluster node index: 2
[08:07:55.885] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:07:55.885] | : . ' , eraseGlobalEnvironment() ...
[08:07:55.886] | : . ' , eraseGlobalEnvironment() ... done
[08:07:55.886] | : . ' , launchFuture() ...
[08:07:55.886] | : . ' , ; cluster node index: 2
[08:07:55.886] | : . ' , ; getFutureData() ...
[08:07:55.886] | : . ' , ; ` getFutureCore() ...
[08:07:55.886] | : . ' , ; ` | Packages needed by the future expression (n = 1): ‘future’
[08:07:55.886] | : . ' , ; ` getFutureCore() ... done
[08:07:55.887] | : . ' , ; ` getFutureCapture() ...
[08:07:55.887] | : . ' , ; ` getFutureCapture() ... done
[08:07:55.887] | : . ' , ; ` getFutureContext() ...
[08:07:55.887] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:55.887] | : . ' , ; ` | : Getting stack without first backend: [n=0] 
[08:07:55.887] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:55.887] | : . ' , ; ` | Packages needed by future backend (n = 0): <none>
[08:07:55.887] | : . ' , ; ` getFutureContext() ... done
[08:07:55.888] | : . ' , ; getFutureData() ... done
[08:07:55.888] | : . ' , ; FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'add', earlySignal = 0) ...
[08:07:55.888] | : . ' , ; ` Appended future to position #2
[08:07:55.888] | : . ' , ; ` Number of registered futures: 2
[08:07:55.888] | : . ' , ; FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'add', earlySignal = 0) ... done
[08:07:55.888] | : . ' , launchFuture() ... done
[08:07:55.889] | : . ' , MultisessionFuture started
[08:07:55.889] | : . ' Launching futures ... done
[08:07:55.889] | : . Using MultisessionFutureBackend ... done
[08:07:55.889] | : . Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:55.889] | : run() for ‘Future’ (<unnamed-12>) ... done
[08:07:55.889] | run() ... done
[08:07:55.889] resolved() for Future (<unnamed-12>) ... done
[08:07:55.889] resolved() ...
[08:07:55.889] | resolved() for MultisessionFuture (<unnamed-12>) ...
[08:07:55.890] | : Cluster node socket connection: index=5, id=410
[08:07:55.890] | : assertValidConnection() ...
[08:07:55.890] | : . cluster node index: 2
[08:07:55.890] | : assertValidConnection() ... done
[08:07:55.901] | : socketSelect(list(<connection #5 (id=410)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:55.901] | resolved() for MultisessionFuture (<unnamed-12>) ... done
[08:07:55.901] | resolved: FALSE
[08:07:55.901] resolved() ... done

Plotting tile #1 of 4 ...
[08:07:55.901] value() for MultisessionFuture (<unnamed-9>) ...
[08:07:55.901] | result() for ClusterFuture ...
[08:07:55.902] | : result already collected: FutureResult
[08:07:55.902] | result() for ClusterFuture ... done
[08:07:55.902] | result() for ClusterFuture ...
[08:07:55.902] | : result already collected: FutureResult
[08:07:55.902] | result() for ClusterFuture ... done
[08:07:55.902] | signalConditions() ...
[08:07:55.902] | : include = ‘immediateCondition’
[08:07:55.902] | : exclude = 
[08:07:55.902] | : resignal = FALSE
[08:07:55.902] | : Number of conditions: 2
[08:07:55.903] | :  int 2
[08:07:55.903] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:55.903] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:55.903] | signalConditions() ... done
[08:07:55.903] | relay stdout ...
[08:07:55.903] | relay stdout ... done
[08:07:55.904] | check for misuse ...
[08:07:55.904] | check for misuse ... done
[08:07:55.904] | relay conditions ...
[08:07:55.904] | : Future state: ‘finished’
[08:07:55.904] | : result() for ClusterFuture ...
[08:07:55.904] | : . result already collected: FutureResult
[08:07:55.904] | : result() for ClusterFuture ... done
[08:07:55.904] | : signalConditions() ...
[08:07:55.904] | : . include = ‘condition’
[08:07:55.904] | : . exclude = ‘immediateCondition’
[08:07:55.905] | : . resignal = TRUE
[08:07:55.905] | : . Number of conditions: 2
[08:07:55.905] | : .  int 2
[08:07:55.905] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:55.905] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[08:07:55.905] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:55.906] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[08:07:55.906] | : signalConditions() ... done
[08:07:55.906] | relay conditions ... done
[08:07:55.906] value() for MultisessionFuture (<unnamed-9>) ... done
Plotting tile #2 of 4 ...
[08:07:55.907] value() for MultisessionFuture (<unnamed-10>) ...
[08:07:55.907] | result() for ClusterFuture ...
[08:07:55.907] | : result already collected: FutureResult
[08:07:55.907] | result() for ClusterFuture ... done
[08:07:55.907] | result() for ClusterFuture ...
[08:07:55.907] | : result already collected: FutureResult
[08:07:55.907] | result() for ClusterFuture ... done
[08:07:55.907] | signalConditions() ...
[08:07:55.907] | : include = ‘immediateCondition’
[08:07:55.908] | : exclude = 
[08:07:55.908] | : resignal = FALSE
[08:07:55.908] | : Number of conditions: 2
[08:07:55.908] | :  int 2
[08:07:55.908] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:55.908] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:55.908] | signalConditions() ... done
[08:07:55.909] | relay stdout ...
[08:07:55.909] | relay stdout ... done
[08:07:55.909] | check for misuse ...
[08:07:55.909] | check for misuse ... done
[08:07:55.909] | relay conditions ...
[08:07:55.909] | : Future state: ‘finished’
[08:07:55.909] | : result() for ClusterFuture ...
[08:07:55.909] | : . result already collected: FutureResult
[08:07:55.909] | : result() for ClusterFuture ... done
[08:07:55.909] | : signalConditions() ...
[08:07:55.910] | : . include = ‘condition’
[08:07:55.910] | : . exclude = ‘immediateCondition’
[08:07:55.910] | : . resignal = TRUE
[08:07:55.910] | : . Number of conditions: 2
[08:07:55.910] | : .  int 2
[08:07:55.910] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:55.910] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[08:07:55.911] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:55.911] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[08:07:55.911] | : signalConditions() ... done
[08:07:55.911] | relay conditions ... done
[08:07:55.911] value() for MultisessionFuture (<unnamed-10>) ... done
[08:07:55.912] resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:55.912] | Cluster node socket connection: index=4, id=409
[08:07:55.912] | assertValidConnection() ...
[08:07:55.912] | : cluster node index: 1
[08:07:55.912] | assertValidConnection() ... done
[08:07:55.913] | receiveMessageFromWorker() for ClusterFuture ...
[08:07:55.913] | : cluster node index: 1
[08:07:55.913] | : [1] TRUE
[08:07:55.913] | : received data:
[08:07:55.913] | : List of 5
[08:07:55.913] | :  $ type   : chr "VALUE"
[08:07:55.913] | :  $ value  :List of 16
[08:07:55.913] | :   ..$ value              : 'Mandelbrot' int [1:25, 1:25] 1 1 1 1 1 1 1 1 1 1 ...
[08:07:55.913] | :   .. ..- attr(*, "params")=List of 3
[08:07:55.913] | :   .. .. ..$ Z      : cplx [1:25, 1:25] -2.25+0.0306i -2.25+0.0918i -2.25+0.1531i ...
[08:07:55.913] | :   .. .. .. ..- attr(*, "region")=List of 2
[08:07:55.913] | :   .. .. .. .. ..$ xrange: num [1:2] -2.25 -0.781
[08:07:55.913] | :   .. .. .. .. ..$ yrange: num [1:2] 0.0306 1.5
[08:07:55.913] | :   .. .. .. ..- attr(*, "tile")= int [1:2] 2 1
[08:07:55.913] | :   .. .. ..$ maxIter: int 200
[08:07:55.913] | :   .. .. ..$ tau    : num 2
[08:07:55.913] | :   ..$ visible            : logi TRUE
[08:07:55.913] | :   ..$ stdout             : chr ""
[08:07:55.913] | :   ..$ conditions         :List of 2
[08:07:55.913] | :   .. ..$ :List of 2
[08:07:55.913] | :   .. .. ..$ condition:List of 2
[08:07:55.913] | :   .. .. .. ..$ message: chr "Calculating tile #3 of 4 ..."
[08:07:55.913] | :   .. .. .. ..$ call   : language message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
[08:07:55.913] | :   .. .. .. .. ..- attr(*, "srcref")= 'srcref' int [1:8] 69 5 69 79 5 79 69 69
[08:07:55.913] | :   .. .. .. .. .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x55c5bc0dd100> 
[08:07:55.913] | :   .. .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
[08:07:55.913] | :   .. .. ..$ signaled : int 0
[08:07:55.913] | :   .. ..$ :List of 2
[08:07:55.913] | :   .. .. ..$ condition:List of 2
[08:07:55.913] | :   .. .. .. ..$ message: chr " done\n"
[08:07:55.913] | :   .. .. .. ..$ call   : language message(" done")
[08:07:55.913] | :   .. .. .. .. ..- attr(*, "srcref")= 'srcref' int [1:8] 75 5 75 20 5 20 75 75
[08:07:55.913] | :   .. .. .. .. .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x55c5bc0dd100> 
[08:07:55.913] | :   .. .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
[08:07:55.913] | :   .. .. ..$ signaled : int 0
[08:07:55.913] | :   ..$ rng                : logi FALSE
[08:07:55.913] | :   ..$ seed               : NULL
[08:07:55.913] | :   ..$ misuseGlobalEnv    : NULL
[08:07:55.913] | :   ..$ misuseConnections  :List of 3
[08:07:55.913] | :   .. ..$ added   : NULL
[08:07:55.913] | :   .. ..$ removed : NULL
[08:07:55.913] | :   .. ..$ replaced: NULL
[08:07:55.913] | :   ..$ misuseDevices      : NULL
[08:07:55.913] | :   ..$ misuseDefaultDevice: list()
[08:07:55.913] | :   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:07:55"
[08:07:55.913] | :   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:07:55"
[08:07:55.913] | :   ..$ uuid               : chr [1:2] "f65ddd9fbff7c63a830cf24ab09e06bb" "11"
[08:07:55.913] | :   ..$ session_uuid       : chr "b5aaa2445e4d55dde1e5668ae7a4d9ea"
[08:07:55.913] | :   .. ..- attr(*, "source")=List of 5
[08:07:55.913] | :   .. .. ..$ host  : Named chr "285a5f234941"
[08:07:55.913] | :   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:07:55.913] | :   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:07:55.913] | :   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:07:55.913] | :   .. .. ..$ pid   : int 67461
[08:07:55.913] | :   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:07:55"
[08:07:55.913] | :   .. .. ..$ random: int 2147483647
[08:07:55.913] | :   ..$ r_info             :List of 4
[08:07:55.913] | :   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:07:55.913] | :   .. .. ..$ : int [1:3] 4 5 0
[08:07:55.913] | :   .. ..$ os           : chr "unix"
[08:07:55.913] | :   .. ..$ os_name      : chr "Linux"
[08:07:55.913] | :   .. ..$ captures_utf8: logi TRUE
[08:07:55.913] | :   ..$ version            : chr "1.8"
[08:07:55.913] | :   ..- attr(*, "class")= chr "FutureResult"
[08:07:55.913] | :  $ success: logi TRUE
[08:07:55.913] | :  $ time   : 'proc_time' Named num [1:5] 0.004 0 0.004 0 0
[08:07:55.913] | :   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:07:55.913] | :  $ tag    : NULL
[08:07:55.934] | : Received FutureResult
[08:07:55.934] | : FutureResult:
[08:07:55.934] | : value: ‘Mandelbrot’, ‘matrix’, ‘array’
[08:07:55.934] | : visible: TRUE
[08:07:55.934] | : stdout: character
[08:07:55.934] | : conditions: [n = 2] simpleMessage, simpleMessage
[08:07:55.934] | : RNG used: FALSE
[08:07:55.934] | : duration: 0.00338459 secs (started 2025-06-17 08:07:55.81313)
[08:07:55.934] | : version: 1.8
[08:07:55.934] | : FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'remove', earlySignal = 0) ...
[08:07:55.934] | : . Removed future from position #1
[08:07:55.934] | : . Number of registered futures: 1
[08:07:55.935] | : FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'remove', earlySignal = 0) ... done
[08:07:55.935] | : Erased future from future backend
[08:07:55.935] | : result() for ClusterFuture ...
[08:07:55.935] | : . result already collected: FutureResult
[08:07:55.935] | : result() for ClusterFuture ... done
[08:07:55.935] | : signalConditions() ...
[08:07:55.935] | : . include = ‘immediateCondition’
[08:07:55.935] | : . exclude = 
[08:07:55.935] | : . resignal = FALSE
[08:07:55.935] | : . Number of conditions: 2
[08:07:55.936] | : .  int 2
[08:07:55.936] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:55.936] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:55.936] | : signalConditions() ... done
[08:07:55.936] | receiveMessageFromWorker() for ClusterFuture ... done
[08:07:55.936] | receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:07:55.937] resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:55.937] assertFutureResult() ...
[08:07:55.937] | Future uuid: f65ddd9fbff7c63a830cf24ab09e06bb[08:07:55.937] | Future uuid: 11
[08:07:55.937] | identical; success
[08:07:55.937] assertFutureResult() ... done
Plotting tile #3 of 4 ...
[08:07:55.937] value() for MultisessionFuture (<unnamed-11>) ...
[08:07:55.937] | result() for ClusterFuture ...
[08:07:55.937] | : result already collected: FutureResult
[08:07:55.937] | result() for ClusterFuture ... done
[08:07:55.937] | result() for ClusterFuture ...
[08:07:55.938] | : result already collected: FutureResult
[08:07:55.938] | result() for ClusterFuture ... done
[08:07:55.938] | signalConditions() ...
[08:07:55.938] | : include = ‘immediateCondition’
[08:07:55.938] | : exclude = 
[08:07:55.938] | : resignal = FALSE
[08:07:55.938] | : Number of conditions: 2
[08:07:55.938] | :  int 2
[08:07:55.939] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:55.939] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:55.939] | signalConditions() ... done
[08:07:55.939] | relay stdout ...
[08:07:55.939] | relay stdout ... done
[08:07:55.939] | check for misuse ...
[08:07:55.939] | check for misuse ... done
[08:07:55.939] | relay conditions ...
[08:07:55.939] | : Future state: ‘finished’
[08:07:55.940] | : result() for ClusterFuture ...
[08:07:55.940] | : . result already collected: FutureResult
[08:07:55.940] | : result() for ClusterFuture ... done
[08:07:55.940] | : signalConditions() ...
[08:07:55.940] | : . include = ‘condition’
[08:07:55.940] | : . exclude = ‘immediateCondition’
[08:07:55.940] | : . resignal = TRUE
[08:07:55.940] | : . Number of conditions: 2
[08:07:55.940] | : .  int 2
[08:07:55.941] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:55.941] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[08:07:55.941] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:55.941] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[08:07:55.941] | : signalConditions() ... done
[08:07:55.941] | relay conditions ... done
[08:07:55.941] value() for MultisessionFuture (<unnamed-11>) ... done
[08:07:55.942] resolved() for MultisessionFuture (<unnamed-12>) ...
[08:07:55.942] | Cluster node socket connection: index=5, id=410
[08:07:55.942] | assertValidConnection() ...
[08:07:55.943] | : cluster node index: 2
[08:07:55.943] | assertValidConnection() ... done
[08:07:55.943] | receiveMessageFromWorker() for ClusterFuture ...
[08:07:55.943] | : cluster node index: 2
[08:07:55.943] | : [1] TRUE
[08:07:55.944] | : received data:
[08:07:55.944] | : List of 5
[08:07:55.944] | :  $ type   : chr "VALUE"
[08:07:55.944] | :  $ value  :List of 16
[08:07:55.944] | :   ..$ value              : 'Mandelbrot' int [1:25, 1:25] 200 200 200 109 195 15 9 8 5 5 ...
[08:07:55.944] | :   .. ..- attr(*, "params")=List of 3
[08:07:55.944] | :   .. .. ..$ Z      : cplx [1:25, 1:25] -0.719+0.0306i -0.719+0.0918i -0.719+0.1531i ...
[08:07:55.944] | :   .. .. .. ..- attr(*, "region")=List of 2
[08:07:55.944] | :   .. .. .. .. ..$ xrange: num [1:2] -0.719 0.75
[08:07:55.944] | :   .. .. .. .. ..$ yrange: num [1:2] 0.0306 1.5
[08:07:55.944] | :   .. .. .. ..- attr(*, "tile")= int [1:2] 2 2
[08:07:55.944] | :   .. .. ..$ maxIter: int 200
[08:07:55.944] | :   .. .. ..$ tau    : num 2
[08:07:55.944] | :   ..$ visible            : logi TRUE
[08:07:55.944] | :   ..$ stdout             : chr ""
[08:07:55.944] | :   ..$ conditions         :List of 2
[08:07:55.944] | :   .. ..$ :List of 2
[08:07:55.944] | :   .. .. ..$ condition:List of 2
[08:07:55.944] | :   .. .. .. ..$ message: chr "Calculating tile #4 of 4 ..."
[08:07:55.944] | :   .. .. .. ..$ call   : language message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
[08:07:55.944] | :   .. .. .. .. ..- attr(*, "srcref")= 'srcref' int [1:8] 69 5 69 79 5 79 69 69
[08:07:55.944] | :   .. .. .. .. .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x55c5b910a098> 
[08:07:55.944] | :   .. .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
[08:07:55.944] | :   .. .. ..$ signaled : int 0
[08:07:55.944] | :   .. ..$ :List of 2
[08:07:55.944] | :   .. .. ..$ condition:List of 2
[08:07:55.944] | :   .. .. .. ..$ message: chr " done\n"
[08:07:55.944] | :   .. .. .. ..$ call   : language message(" done")
[08:07:55.944] | :   .. .. .. .. ..- attr(*, "srcref")= 'srcref' int [1:8] 75 5 75 20 5 20 75 75
[08:07:55.944] | :   .. .. .. .. .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x55c5b910a098> 
[08:07:55.944] | :   .. .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
[08:07:55.944] | :   .. .. ..$ signaled : int 0
[08:07:55.944] | :   ..$ rng                : logi FALSE
[08:07:55.944] | :   ..$ seed               : NULL
[08:07:55.944] | :   ..$ misuseGlobalEnv    : NULL
[08:07:55.944] | :   ..$ misuseConnections  :List of 3
[08:07:55.944] | :   .. ..$ added   : NULL
[08:07:55.944] | :   .. ..$ removed : NULL
[08:07:55.944] | :   .. ..$ replaced: NULL
[08:07:55.944] | :   ..$ misuseDevices      : NULL
[08:07:55.944] | :   ..$ misuseDefaultDevice: list()
[08:07:55.944] | :   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:07:55"
[08:07:55.944] | :   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:07:55"
[08:07:55.944] | :   ..$ uuid               : chr [1:2] "f65ddd9fbff7c63a830cf24ab09e06bb" "12"
[08:07:55.944] | :   ..$ session_uuid       : chr "089201a029fdb485aefbf937f3b68733"
[08:07:55.944] | :   .. ..- attr(*, "source")=List of 5
[08:07:55.944] | :   .. .. ..$ host  : Named chr "285a5f234941"
[08:07:55.944] | :   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:07:55.944] | :   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:07:55.944] | :   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:07:55.944] | :   .. .. ..$ pid   : int 67460
[08:07:55.944] | :   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:07:55"
[08:07:55.944] | :   .. .. ..$ random: int 2147483647
[08:07:55.944] | :   ..$ r_info             :List of 4
[08:07:55.944] | :   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:07:55.944] | :   .. .. ..$ : int [1:3] 4 5 0
[08:07:55.944] | :   .. ..$ os           : chr "unix"
[08:07:55.944] | :   .. ..$ os_name      : chr "Linux"
[08:07:55.944] | :   .. ..$ captures_utf8: logi TRUE
[08:07:55.944] | :   ..$ version            : chr "1.8"
[08:07:55.944] | :   ..- attr(*, "class")= chr "FutureResult"
[08:07:55.944] | :  $ success: logi TRUE
[08:07:55.944] | :  $ time   : 'proc_time' Named num [1:5] 0.005 0 0.005 0 0
[08:07:55.944] | :   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:07:55.944] | :  $ tag    : NULL
[08:07:55.962] | : Received FutureResult
[08:07:55.962] | : FutureResult:
[08:07:55.962] | : value: ‘Mandelbrot’, ‘matrix’, ‘array’
[08:07:55.962] | : visible: TRUE
[08:07:55.962] | : stdout: character
[08:07:55.962] | : conditions: [n = 2] simpleMessage, simpleMessage
[08:07:55.962] | : RNG used: FALSE
[08:07:55.962] | : duration: 0.004127264 secs (started 2025-06-17 08:07:55.929151)
[08:07:55.962] | : version: 1.8
[08:07:55.962] | : FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'remove', earlySignal = 0) ...
[08:07:55.963] | : . Removed future from position #1
[08:07:55.963] | : . Number of registered futures: 0
[08:07:55.963] | : FutureRegistry('workers-0ddfd5d6d9b70c50ad97cad8d7ad488a', action = 'remove', earlySignal = 0) ... done
[08:07:55.963] | : Erased future from future backend
[08:07:55.963] | : result() for ClusterFuture ...
[08:07:55.963] | : . result already collected: FutureResult
[08:07:55.963] | : result() for ClusterFuture ... done
[08:07:55.963] | : signalConditions() ...
[08:07:55.963] | : . include = ‘immediateCondition’
[08:07:55.964] | : . exclude = 
[08:07:55.964] | : . resignal = FALSE
[08:07:55.964] | : . Number of conditions: 2
[08:07:55.964] | : .  int 2
[08:07:55.964] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:55.964] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:55.964] | : signalConditions() ... done
[08:07:55.965] | receiveMessageFromWorker() for ClusterFuture ... done
[08:07:55.965] | receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:07:55.965] resolved() for MultisessionFuture (<unnamed-12>) ... done
[08:07:55.965] assertFutureResult() ...
[08:07:55.965] | Future uuid: f65ddd9fbff7c63a830cf24ab09e06bb[08:07:55.965] | Future uuid: 12
[08:07:55.965] | identical; success
[08:07:55.965] assertFutureResult() ... done
Plotting tile #4 of 4 ...
[08:07:55.965] value() for MultisessionFuture (<unnamed-12>) ...
[08:07:55.965] | result() for ClusterFuture ...
[08:07:55.965] | : result already collected: FutureResult
[08:07:55.966] | result() for ClusterFuture ... done
[08:07:55.966] | result() for ClusterFuture ...
[08:07:55.966] | : result already collected: FutureResult
[08:07:55.966] | result() for ClusterFuture ... done
[08:07:55.966] | signalConditions() ...
[08:07:55.966] | : include = ‘immediateCondition’
[08:07:55.966] | : exclude = 
[08:07:55.966] | : resignal = FALSE
[08:07:55.966] | : Number of conditions: 2
[08:07:55.966] | :  int 2
[08:07:55.967] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:55.967] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:55.967] | signalConditions() ... done
[08:07:55.967] | relay stdout ...
[08:07:55.967] | relay stdout ... done
[08:07:55.967] | check for misuse ...
[08:07:55.968] | check for misuse ... done
[08:07:55.968] | relay conditions ...
[08:07:55.968] | : Future state: ‘finished’
[08:07:55.968] | : result() for ClusterFuture ...
[08:07:55.968] | : . result already collected: FutureResult
[08:07:55.968] | : result() for ClusterFuture ... done
[08:07:55.968] | : signalConditions() ...
[08:07:55.968] | : . include = ‘condition’
[08:07:55.968] | : . exclude = ‘immediateCondition’
[08:07:55.968] | : . resignal = TRUE
[08:07:55.968] | : . Number of conditions: 2
[08:07:55.969] | : .  int 2
[08:07:55.969] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:55.969] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[08:07:55.969] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:55.969] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[08:07:55.970] | : signalConditions() ... done
[08:07:55.970] | relay conditions ... done
[08:07:55.970] value() for MultisessionFuture (<unnamed-12>) ... done

> close.screen()
 [1]  1  2  3  4  5  6  7  8  9 10 11 12

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('multisession') ... DONE
Testing with 2 cores ... DONE

> message("*** Mandelbrot demo of the 'future' package ... DONE")
*** Mandelbrot demo of the 'future' package ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=1s, sys.self=0.09s, elapsed=2s, user.child=0.5s, sys.child=0.4s
Test ‘demo-mandelbrot’ ... success
> 
