
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script incl/testme/test-demo-mandelbrot.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("demo-mandelbrot")
Test ‘demo-mandelbrot’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-demo-mandelbrot.R’

> library(future)
[10:52:30.902] Option 'future.startup.script': TRUE
[10:52:30.902] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[10:52:30.902] Future startup scripts found: <none>

> if (getRversion() < "4.1") options(future.debug = FALSE)

> message("*** Mandelbrot demo of the 'future' package ...")
*** Mandelbrot demo of the 'future' package ...

> options(future.demo.mandelbrot.nrow = 2)

> options(future.demo.mandelbrot.resolution = 50)

> options(future.demo.mandelbrot.delay = FALSE)

> for (cores in 1:availCores) {
+     message(sprintf("Testing with %d cores ...", cores))
+     options(mc.cores = cores)
+     for (strategy in supp .... [TRUNCATED] 
Testing with 1 cores ...
- plan('sequential') ...
[10:52:30.909] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:30.910] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:52:30.910] |  :  all.equal() for FutureStrategyList ...
[10:52:30.910] |  :  .  New stack:
[10:52:30.910] |  :  .  List of 1
[10:52:30.910] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:30.910] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:30.910] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:30.910] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:30.910] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:30.910] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:30.910] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:30.915] |  :  .  Old stack:
[10:52:30.916] |  :  .  List of 1
[10:52:30.916] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:30.916] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:30.916] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:30.916] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:30.916] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:30.916] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:52:30.916] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:30.918] |  :  .  Not identical
[10:52:30.918] |  :  .  all.equal() for future ...
[10:52:30.918] |  :  .  |  List of 2
[10:52:30.918] |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:30.918] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:30.918] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:30.918] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:30.918] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:30.918] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:30.918] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:30.918] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:30.918] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:30.918] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:30.918] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:30.918] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:30.922] |  :  .  all.equal() for future ... done
[10:52:30.922] |  :  all.equal() for FutureStrategyList ... done
[10:52:30.922] |  :  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:30.922] |  :  List of future strategies:
[10:52:30.922] |  :  1. sequential:
[10:52:30.922] |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:30.922] |  :     - tweaked: FALSE
[10:52:30.922] |  :     - call: plan(sequential)
[10:52:30.923] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:52:30.923] plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library(future)

> library(graphics)

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1] 1 2 3 4

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[10:52:30.955] getGlobalsAndPackages() ...
[10:52:30.955] |  Searching for globals ...
[10:52:30.964] |  :  globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[10:52:30.964] |  Searching for globals ... DONE
[10:52:30.964] |  Resolving globals: FALSE
[10:52:30.964] |  Search for packages associated with the globals ...
[10:52:30.965] |  :  Packages associated with globals: [2] ‘base’, ‘future’
[10:52:30.965] |  :  Packages: [2] ‘base’, ‘future’
[10:52:30.965] |  Search for packages associated with the globals ... DONE
[10:52:30.966] |  Packages after dropping 'base': [1] ‘future’
[10:52:30.966] |  Packages after dropping non-attached packages: [1] ‘future’
[10:52:30.966] |  globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[10:52:30.966] |  packages: [1] ‘future’
[10:52:30.966] getGlobalsAndPackages() ... done
 2[10:52:30.972] getGlobalsAndPackages() ...
[10:52:30.972] |  Searching for globals ...
[10:52:30.975] |  :  globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[10:52:30.976] |  Searching for globals ... DONE
[10:52:30.976] |  Resolving globals: FALSE
[10:52:30.976] |  Search for packages associated with the globals ...
[10:52:30.976] |  :  Packages associated with globals: [2] ‘base’, ‘future’
[10:52:30.976] |  :  Packages: [2] ‘base’, ‘future’
[10:52:30.976] |  Search for packages associated with the globals ... DONE
[10:52:30.977] |  Packages after dropping 'base': [1] ‘future’
[10:52:30.977] |  Packages after dropping non-attached packages: [1] ‘future’
[10:52:30.977] |  globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[10:52:30.977] |  packages: [1] ‘future’
[10:52:30.977] getGlobalsAndPackages() ... done
 3[10:52:30.977] getGlobalsAndPackages() ...
[10:52:30.977] |  Searching for globals ...
[10:52:30.981] |  :  globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[10:52:30.981] |  Searching for globals ... DONE
[10:52:30.981] |  Resolving globals: FALSE
[10:52:30.981] |  Search for packages associated with the globals ...
[10:52:30.981] |  :  Packages associated with globals: [2] ‘base’, ‘future’
[10:52:30.982] |  :  Packages: [2] ‘base’, ‘future’
[10:52:30.982] |  Search for packages associated with the globals ... DONE
[10:52:30.982] |  Packages after dropping 'base': [1] ‘future’
[10:52:30.982] |  Packages after dropping non-attached packages: [1] ‘future’
[10:52:30.982] |  globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[10:52:30.982] |  packages: [1] ‘future’
[10:52:30.982] getGlobalsAndPackages() ... done
 4[10:52:30.983] getGlobalsAndPackages() ...
[10:52:30.983] |  Searching for globals ...
[10:52:30.986] |  :  globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[10:52:30.986] |  Searching for globals ... DONE
[10:52:30.986] |  Resolving globals: FALSE
[10:52:30.986] |  Search for packages associated with the globals ...
[10:52:30.987] |  :  Packages associated with globals: [2] ‘base’, ‘future’
[10:52:30.987] |  :  Packages: [2] ‘base’, ‘future’
[10:52:30.987] |  Search for packages associated with the globals ... DONE
[10:52:30.987] |  Packages after dropping 'base': [1] ‘future’
[10:52:30.987] |  Packages after dropping non-attached packages: [1] ‘future’
[10:52:30.987] |  globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[10:52:30.987] |  packages: [1] ‘future’
[10:52:30.988] getGlobalsAndPackages() ... done

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[10:52:30.997] resolved() for ‘Future’ ...
[10:52:30.998] |  state: ‘created’
[10:52:30.998] |  run: TRUE
[10:52:30.998] |  run() ...
[10:52:30.998] |  :  run() for Future (‘Future’) ...
[10:52:30.998] |  :  .  state: ‘created’
[10:52:30.998] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:30.998] |  :  .  |  makeFutureBackend(<sequential>) ...
[10:52:30.999] |  :  .  |  :  Backend function: <‘NULL’>
[10:52:30.999] |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:30.999] |  :  .  |  makeFutureBackend(<sequential>) ... done
[10:52:30.999] |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:30.999] |  :  .  Using SequentialFutureBackend ...
[10:52:30.999] |  :  .  |  Launching futures ...
[10:52:31.000] |  :  .  |  :  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:31.000] |  :  .  |  :  .  getFutureData() ...
[10:52:31.000] |  :  .  |  :  .  |  getFutureCore() ...
[10:52:31.000] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future’
[10:52:31.000] |  :  .  |  :  .  |  getFutureCore() ... done
[10:52:31.000] |  :  .  |  :  .  |  getFutureCapture() ...
[10:52:31.000] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:52:31.000] |  :  .  |  :  .  |  getFutureContext() ...
[10:52:31.001] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.001] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:52:31.001] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.001] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:52:31.001] |  :  .  |  :  .  |  getFutureContext() ... done
[10:52:31.001] |  :  .  |  :  .  getFutureData() ... done
[10:52:31.002] |  :  .  |  :  .  attachPackages() ...
[10:52:31.002] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:52:31.002] |  :  .  |  :  .  attachPackages() ... DONE
[10:52:31.003] |  :  .  |  :  .  attachPackages() ...
[10:52:31.003] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:52:31.003] |  :  .  |  :  .  attachPackages() ... DONE
[10:52:31.003] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.003] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:31.003] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.004] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:31.004] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:31.004] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:52:31.004] |  :  .  |  :  .  |  :  .  New stack:
[10:52:31.004] |  :  .  |  :  .  |  :  .  List of 1
[10:52:31.004] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.004] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.004] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.004] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.004] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.004] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.004] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.007] |  :  .  |  :  .  |  :  .  Old stack:
[10:52:31.007] |  :  .  |  :  .  |  :  .  List of 1
[10:52:31.007] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.007] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.007] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.007] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.007] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.007] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:52:31.007] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x559713108cf8> 
[10:52:31.007] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.007] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.007] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.011] |  :  .  |  :  .  |  :  .  Not identical
[10:52:31.011] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:52:31.011] |  :  .  |  :  .  |  :  .  |  List of 2
[10:52:31.011] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.011] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.011] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.011] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.011] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.011] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.011] |  :  .  |  :  .  |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.011] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.011] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.011] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.011] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.011] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:31.011] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x559713108cf8> 
[10:52:31.011] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.011] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.016] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:52:31.016] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:52:31.016] |  :  .  |  :  .  |  :  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:31.016] |  :  .  |  :  .  |  :  List of future strategies:
[10:52:31.016] |  :  .  |  :  .  |  :  1. sequential:
[10:52:31.016] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:31.016] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:52:31.016] |  :  .  |  :  .  |  :     - call: plan(sequential)
[10:52:31.017] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:31.017] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:31.017] |  :  .  |  :  .  assign_globals() ...
[10:52:31.017] |  :  .  |  :  .  List of 4
[10:52:31.017] |  :  .  |  :  .   $ ii   : int 1
[10:52:31.017] |  :  .  |  :  .   $ n    : int 4
[10:52:31.017] |  :  .  |  :  .   $ C    : cplx [1:25, 1:25] -2.25-1.5i -2.25-1.44i -2.25-1.38i ...
[10:52:31.017] |  :  .  |  :  .    ..- attr(*, "region")=List of 2
[10:52:31.017] |  :  .  |  :  .    .. ..$ xrange: num [1:2] -2.25 -0.781
[10:52:31.017] |  :  .  |  :  .    .. ..$ yrange: num [1:2] -1.5 -0.0306
[10:52:31.017] |  :  .  |  :  .    ..- attr(*, "tile")= int [1:2] 1 1
[10:52:31.017] |  :  .  |  :  .   $ delay:function (counts)  
[10:52:31.017] |  :  .  |  :  .    ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[10:52:31.017] |  :  .  |  :  .    .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x559712e4bc68> 
[10:52:31.017] |  :  .  |  :  .   - attr(*, "where")=List of 4
[10:52:31.017] |  :  .  |  :  .    ..$ ii   :<environment: R_EmptyEnv> 
[10:52:31.017] |  :  .  |  :  .    ..$ n    :<environment: R_EmptyEnv> 
[10:52:31.017] |  :  .  |  :  .    ..$ C    :<environment: R_EmptyEnv> 
[10:52:31.017] |  :  .  |  :  .    ..$ delay:<environment: R_EmptyEnv> 
[10:52:31.017] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:31.017] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:52:31.017] |  :  .  |  :  .   - attr(*, "total_size")= num NA
[10:52:31.017] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:52:31.023] |  :  .  |  :  .  - copied ‘ii’ to environment
[10:52:31.023] |  :  .  |  :  .  - copied ‘n’ to environment
[10:52:31.023] |  :  .  |  :  .  - copied ‘C’ to environment
[10:52:31.024] |  :  .  |  :  .  - reassign environment for ‘delay’ [where=emptyenv()]
[10:52:31.024] |  :  .  |  :  .  - copied ‘delay’ to environment
[10:52:31.024] |  :  .  |  :  .  assign_globals() ... done
[10:52:31.027] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:31.027] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:31.027] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:31.027] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:31.027] |  :  .  |  :  .  |  :  .  |  New stack:
[10:52:31.027] |  :  .  |  :  .  |  :  .  |  List of 1
[10:52:31.027] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.027] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.027] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.027] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.027] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.027] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:31.027] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x559713108cf8> 
[10:52:31.027] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.027] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.027] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.030] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:52:31.030] |  :  .  |  :  .  |  :  .  |  List of 1
[10:52:31.030] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.030] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.030] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.030] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.030] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.030] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:31.030] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x559713108cf8> 
[10:52:31.030] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.030] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.030] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.034] |  :  .  |  :  .  |  :  .  |  Identical
[10:52:31.034] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:31.034] |  :  .  |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:31.035] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:52:31.035] |  :  .  |  :  .  |  :  .  1. sequential:
[10:52:31.035] |  :  .  |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:31.035] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:52:31.035] |  :  .  |  :  .  |  :  .     - call: plan(sequential)
[10:52:31.035] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:31.035] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:31.035] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:31.035] |  :  .  |  :  .  SequentialFuture started (and completed)
[10:52:31.036] |  :  .  |  :  .  signalConditions() ...
[10:52:31.036] |  :  .  |  :  .  |  include = ‘immediateCondition’
[10:52:31.036] |  :  .  |  :  .  |  exclude = 
[10:52:31.036] |  :  .  |  :  .  |  resignal = FALSE
[10:52:31.036] |  :  .  |  :  .  |  Number of conditions: 2
[10:52:31.036] |  :  .  |  :  .  signalConditions() ... done
[10:52:31.036] |  :  .  |  :  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:31.037] |  :  .  |  Launching futures ... done
[10:52:31.037] |  :  .  |  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:31.037] |  :  .  Using SequentialFutureBackend ... done
[10:52:31.037] |  :  run() for Future (‘SequentialFuture’) ... done
[10:52:31.037] |  run() ... done
[10:52:31.037] |  resolved() ...
[10:52:31.037] |  :  resolved() for ‘SequentialFuture’ ...
[10:52:31.037] |  :  .  state: ‘finished’
[10:52:31.037] |  :  .  run: TRUE
[10:52:31.037] |  :  .  result: ‘FutureResult’
[10:52:31.037] |  :  resolved() for ‘SequentialFuture’ ... done
[10:52:31.038] |  :  resolved: TRUE
[10:52:31.038] |  resolved() ... done
[10:52:31.038] resolved() for ‘SequentialFuture’ ... done
Plotting tile #1 of 4 ...
[10:52:31.038] signalConditions() ...
[10:52:31.038] |  include = ‘immediateCondition’
[10:52:31.038] |  exclude = 
[10:52:31.038] |  resignal = FALSE
[10:52:31.039] |  Number of conditions: 2
[10:52:31.039] signalConditions() ... done
[10:52:31.039] Future state: ‘finished’
[10:52:31.039] signalConditions() ...
[10:52:31.039] |  include = ‘condition’
[10:52:31.039] |  exclude = ‘immediateCondition’
[10:52:31.039] |  resignal = TRUE
[10:52:31.039] |  Number of conditions: 2
[10:52:31.039] |  Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[10:52:31.039] |  Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[10:52:31.040] signalConditions() ... done
[10:52:31.041] resolved() for ‘Future’ ...
[10:52:31.041] |  state: ‘created’
[10:52:31.041] |  run: TRUE
[10:52:31.041] |  run() ...
[10:52:31.041] |  :  run() for Future (‘Future’) ...
[10:52:31.041] |  :  .  state: ‘created’
[10:52:31.041] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.042] |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.042] |  :  .  Using SequentialFutureBackend ...
[10:52:31.042] |  :  .  |  Launching futures ...
[10:52:31.042] |  :  .  |  :  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:31.042] |  :  .  |  :  .  getFutureData() ...
[10:52:31.042] |  :  .  |  :  .  |  getFutureCore() ...
[10:52:31.042] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future’
[10:52:31.042] |  :  .  |  :  .  |  getFutureCore() ... done
[10:52:31.042] |  :  .  |  :  .  |  getFutureCapture() ...
[10:52:31.042] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:52:31.043] |  :  .  |  :  .  |  getFutureContext() ...
[10:52:31.043] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.043] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:52:31.043] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.043] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:52:31.043] |  :  .  |  :  .  |  getFutureContext() ... done
[10:52:31.043] |  :  .  |  :  .  getFutureData() ... done
[10:52:31.043] |  :  .  |  :  .  attachPackages() ...
[10:52:31.043] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:52:31.044] |  :  .  |  :  .  attachPackages() ... DONE
[10:52:31.044] |  :  .  |  :  .  attachPackages() ...
[10:52:31.044] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:52:31.044] |  :  .  |  :  .  attachPackages() ... DONE
[10:52:31.044] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.044] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:31.044] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.045] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:31.045] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:31.045] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:52:31.045] |  :  .  |  :  .  |  :  .  New stack:
[10:52:31.045] |  :  .  |  :  .  |  :  .  List of 1
[10:52:31.045] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.045] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.045] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.045] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.045] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.045] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.045] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.047] |  :  .  |  :  .  |  :  .  Old stack:
[10:52:31.047] |  :  .  |  :  .  |  :  .  List of 1
[10:52:31.047] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.047] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.047] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.047] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.047] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.047] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:52:31.047] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x559713108cf8> 
[10:52:31.047] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.047] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.047] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.050] |  :  .  |  :  .  |  :  .  Not identical
[10:52:31.050] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:52:31.050] |  :  .  |  :  .  |  :  .  |  List of 2
[10:52:31.050] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.050] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.050] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.050] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.050] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.050] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.050] |  :  .  |  :  .  |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.050] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.050] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.050] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.050] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.050] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:31.050] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x559713108cf8> 
[10:52:31.050] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.050] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.056] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:52:31.056] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:52:31.056] |  :  .  |  :  .  |  :  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:31.056] |  :  .  |  :  .  |  :  List of future strategies:
[10:52:31.056] |  :  .  |  :  .  |  :  1. sequential:
[10:52:31.056] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:31.056] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:52:31.056] |  :  .  |  :  .  |  :     - call: plan(sequential)
[10:52:31.057] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:31.057] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:31.057] |  :  .  |  :  .  assign_globals() ...
[10:52:31.057] |  :  .  |  :  .  List of 4
[10:52:31.057] |  :  .  |  :  .   $ ii   : int 2
[10:52:31.057] |  :  .  |  :  .   $ n    : int 4
[10:52:31.057] |  :  .  |  :  .   $ C    : cplx [1:25, 1:25] -0.719-1.5i -0.719-1.44i -0.719-1.38i ...
[10:52:31.057] |  :  .  |  :  .    ..- attr(*, "region")=List of 2
[10:52:31.057] |  :  .  |  :  .    .. ..$ xrange: num [1:2] -0.719 0.75
[10:52:31.057] |  :  .  |  :  .    .. ..$ yrange: num [1:2] -1.5 -0.0306
[10:52:31.057] |  :  .  |  :  .    ..- attr(*, "tile")= int [1:2] 1 2
[10:52:31.057] |  :  .  |  :  .   $ delay:function (counts)  
[10:52:31.057] |  :  .  |  :  .    ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[10:52:31.057] |  :  .  |  :  .    .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x559712e4bc68> 
[10:52:31.057] |  :  .  |  :  .   - attr(*, "where")=List of 4
[10:52:31.057] |  :  .  |  :  .    ..$ ii   :<environment: R_EmptyEnv> 
[10:52:31.057] |  :  .  |  :  .    ..$ n    :<environment: R_EmptyEnv> 
[10:52:31.057] |  :  .  |  :  .    ..$ C    :<environment: R_EmptyEnv> 
[10:52:31.057] |  :  .  |  :  .    ..$ delay:<environment: R_EmptyEnv> 
[10:52:31.057] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:31.057] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:52:31.057] |  :  .  |  :  .   - attr(*, "total_size")= num NA
[10:52:31.057] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:52:31.063] |  :  .  |  :  .  - copied ‘ii’ to environment
[10:52:31.063] |  :  .  |  :  .  - copied ‘n’ to environment
[10:52:31.063] |  :  .  |  :  .  - copied ‘C’ to environment
[10:52:31.063] |  :  .  |  :  .  - reassign environment for ‘delay’ [where=emptyenv()]
[10:52:31.063] |  :  .  |  :  .  - copied ‘delay’ to environment
[10:52:31.064] |  :  .  |  :  .  assign_globals() ... done
[10:52:31.066] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:31.066] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:31.067] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:31.067] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:31.067] |  :  .  |  :  .  |  :  .  |  New stack:
[10:52:31.067] |  :  .  |  :  .  |  :  .  |  List of 1
[10:52:31.067] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.067] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.067] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.067] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.067] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.067] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:31.067] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x559713108cf8> 
[10:52:31.067] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.067] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.067] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.070] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:52:31.070] |  :  .  |  :  .  |  :  .  |  List of 1
[10:52:31.070] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.070] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.070] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.070] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.070] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.070] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:31.070] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x559713108cf8> 
[10:52:31.070] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.070] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.070] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.074] |  :  .  |  :  .  |  :  .  |  Identical
[10:52:31.074] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:31.074] |  :  .  |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:31.075] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:52:31.075] |  :  .  |  :  .  |  :  .  1. sequential:
[10:52:31.075] |  :  .  |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:31.075] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:52:31.075] |  :  .  |  :  .  |  :  .     - call: plan(sequential)
[10:52:31.075] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:31.075] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:31.075] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:31.075] |  :  .  |  :  .  SequentialFuture started (and completed)
[10:52:31.076] |  :  .  |  :  .  signalConditions() ...
[10:52:31.076] |  :  .  |  :  .  |  include = ‘immediateCondition’
[10:52:31.076] |  :  .  |  :  .  |  exclude = 
[10:52:31.076] |  :  .  |  :  .  |  resignal = FALSE
[10:52:31.076] |  :  .  |  :  .  |  Number of conditions: 2
[10:52:31.076] |  :  .  |  :  .  signalConditions() ... done
[10:52:31.076] |  :  .  |  :  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:31.076] |  :  .  |  Launching futures ... done
[10:52:31.076] |  :  .  |  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:31.076] |  :  .  Using SequentialFutureBackend ... done
[10:52:31.076] |  :  run() for Future (‘SequentialFuture’) ... done
[10:52:31.077] |  run() ... done
[10:52:31.077] |  resolved() ...
[10:52:31.077] |  :  resolved() for ‘SequentialFuture’ ...
[10:52:31.077] |  :  .  state: ‘finished’
[10:52:31.077] |  :  .  run: TRUE
[10:52:31.077] |  :  .  result: ‘FutureResult’
[10:52:31.077] |  :  resolved() for ‘SequentialFuture’ ... done
[10:52:31.077] |  :  resolved: TRUE
[10:52:31.077] |  resolved() ... done
[10:52:31.077] resolved() for ‘SequentialFuture’ ... done
Plotting tile #2 of 4 ...
[10:52:31.078] signalConditions() ...
[10:52:31.078] |  include = ‘immediateCondition’
[10:52:31.078] |  exclude = 
[10:52:31.078] |  resignal = FALSE
[10:52:31.078] |  Number of conditions: 2
[10:52:31.078] signalConditions() ... done
[10:52:31.078] Future state: ‘finished’
[10:52:31.078] signalConditions() ...
[10:52:31.078] |  include = ‘condition’
[10:52:31.078] |  exclude = ‘immediateCondition’
[10:52:31.078] |  resignal = TRUE
[10:52:31.079] |  Number of conditions: 2
[10:52:31.079] |  Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[10:52:31.079] |  Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[10:52:31.079] signalConditions() ... done
[10:52:31.079] resolved() for ‘Future’ ...
[10:52:31.080] |  state: ‘created’
[10:52:31.080] |  run: TRUE
[10:52:31.080] |  run() ...
[10:52:31.080] |  :  run() for Future (‘Future’) ...
[10:52:31.080] |  :  .  state: ‘created’
[10:52:31.080] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.080] |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.080] |  :  .  Using SequentialFutureBackend ...
[10:52:31.080] |  :  .  |  Launching futures ...
[10:52:31.081] |  :  .  |  :  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:31.081] |  :  .  |  :  .  getFutureData() ...
[10:52:31.081] |  :  .  |  :  .  |  getFutureCore() ...
[10:52:31.081] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future’
[10:52:31.081] |  :  .  |  :  .  |  getFutureCore() ... done
[10:52:31.081] |  :  .  |  :  .  |  getFutureCapture() ...
[10:52:31.081] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:52:31.081] |  :  .  |  :  .  |  getFutureContext() ...
[10:52:31.081] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.081] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:52:31.082] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.082] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:52:31.082] |  :  .  |  :  .  |  getFutureContext() ... done
[10:52:31.082] |  :  .  |  :  .  getFutureData() ... done
[10:52:31.082] |  :  .  |  :  .  attachPackages() ...
[10:52:31.082] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:52:31.082] |  :  .  |  :  .  attachPackages() ... DONE
[10:52:31.082] |  :  .  |  :  .  attachPackages() ...
[10:52:31.082] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:52:31.083] |  :  .  |  :  .  attachPackages() ... DONE
[10:52:31.083] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.083] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:31.083] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.083] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:31.084] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:31.084] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:52:31.084] |  :  .  |  :  .  |  :  .  New stack:
[10:52:31.084] |  :  .  |  :  .  |  :  .  List of 1
[10:52:31.084] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.084] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.084] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.084] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.084] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.084] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.084] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.086] |  :  .  |  :  .  |  :  .  Old stack:
[10:52:31.086] |  :  .  |  :  .  |  :  .  List of 1
[10:52:31.086] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.086] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.086] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.086] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.086] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.086] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:52:31.086] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x559713108cf8> 
[10:52:31.086] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.086] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.086] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.089] |  :  .  |  :  .  |  :  .  Not identical
[10:52:31.089] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:52:31.089] |  :  .  |  :  .  |  :  .  |  List of 2
[10:52:31.089] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.089] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.089] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.089] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.089] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.089] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.089] |  :  .  |  :  .  |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.089] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.089] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.089] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.089] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.089] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:31.089] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x559713108cf8> 
[10:52:31.089] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.089] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.095] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:52:31.095] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:52:31.095] |  :  .  |  :  .  |  :  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:31.095] |  :  .  |  :  .  |  :  List of future strategies:
[10:52:31.095] |  :  .  |  :  .  |  :  1. sequential:
[10:52:31.095] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:31.095] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:52:31.095] |  :  .  |  :  .  |  :     - call: plan(sequential)
[10:52:31.095] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:31.095] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:31.096] |  :  .  |  :  .  assign_globals() ...
[10:52:31.096] |  :  .  |  :  .  List of 4
[10:52:31.096] |  :  .  |  :  .   $ ii   : int 3
[10:52:31.096] |  :  .  |  :  .   $ n    : int 4
[10:52:31.096] |  :  .  |  :  .   $ C    : cplx [1:25, 1:25] -2.25+0.0306i -2.25+0.0918i -2.25+0.1531i ...
[10:52:31.096] |  :  .  |  :  .    ..- attr(*, "region")=List of 2
[10:52:31.096] |  :  .  |  :  .    .. ..$ xrange: num [1:2] -2.25 -0.781
[10:52:31.096] |  :  .  |  :  .    .. ..$ yrange: num [1:2] 0.0306 1.5
[10:52:31.096] |  :  .  |  :  .    ..- attr(*, "tile")= int [1:2] 2 1
[10:52:31.096] |  :  .  |  :  .   $ delay:function (counts)  
[10:52:31.096] |  :  .  |  :  .    ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[10:52:31.096] |  :  .  |  :  .    .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x559712e4bc68> 
[10:52:31.096] |  :  .  |  :  .   - attr(*, "where")=List of 4
[10:52:31.096] |  :  .  |  :  .    ..$ ii   :<environment: R_EmptyEnv> 
[10:52:31.096] |  :  .  |  :  .    ..$ n    :<environment: R_EmptyEnv> 
[10:52:31.096] |  :  .  |  :  .    ..$ C    :<environment: R_EmptyEnv> 
[10:52:31.096] |  :  .  |  :  .    ..$ delay:<environment: R_EmptyEnv> 
[10:52:31.096] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:31.096] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:52:31.096] |  :  .  |  :  .   - attr(*, "total_size")= num NA
[10:52:31.096] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:52:31.102] |  :  .  |  :  .  - copied ‘ii’ to environment
[10:52:31.102] |  :  .  |  :  .  - copied ‘n’ to environment
[10:52:31.102] |  :  .  |  :  .  - copied ‘C’ to environment
[10:52:31.102] |  :  .  |  :  .  - reassign environment for ‘delay’ [where=emptyenv()]
[10:52:31.102] |  :  .  |  :  .  - copied ‘delay’ to environment
[10:52:31.102] |  :  .  |  :  .  assign_globals() ... done
[10:52:31.104] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:31.104] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:31.105] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:31.105] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:31.105] |  :  .  |  :  .  |  :  .  |  New stack:
[10:52:31.105] |  :  .  |  :  .  |  :  .  |  List of 1
[10:52:31.105] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.105] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.105] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.105] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.105] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.105] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:31.105] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x559713108cf8> 
[10:52:31.105] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.105] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.105] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.108] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:52:31.108] |  :  .  |  :  .  |  :  .  |  List of 1
[10:52:31.108] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.108] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.108] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.108] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.108] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.108] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:31.108] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x559713108cf8> 
[10:52:31.108] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.108] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.108] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.112] |  :  .  |  :  .  |  :  .  |  Identical
[10:52:31.112] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:31.112] |  :  .  |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:31.112] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:52:31.112] |  :  .  |  :  .  |  :  .  1. sequential:
[10:52:31.112] |  :  .  |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:31.112] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:52:31.112] |  :  .  |  :  .  |  :  .     - call: plan(sequential)
[10:52:31.112] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:31.113] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:31.113] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:31.113] |  :  .  |  :  .  SequentialFuture started (and completed)
[10:52:31.113] |  :  .  |  :  .  signalConditions() ...
[10:52:31.113] |  :  .  |  :  .  |  include = ‘immediateCondition’
[10:52:31.113] |  :  .  |  :  .  |  exclude = 
[10:52:31.113] |  :  .  |  :  .  |  resignal = FALSE
[10:52:31.113] |  :  .  |  :  .  |  Number of conditions: 2
[10:52:31.113] |  :  .  |  :  .  signalConditions() ... done
[10:52:31.113] |  :  .  |  :  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:31.114] |  :  .  |  Launching futures ... done
[10:52:31.114] |  :  .  |  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:31.114] |  :  .  Using SequentialFutureBackend ... done
[10:52:31.114] |  :  run() for Future (‘SequentialFuture’) ... done
[10:52:31.114] |  run() ... done
[10:52:31.114] |  resolved() ...
[10:52:31.114] |  :  resolved() for ‘SequentialFuture’ ...
[10:52:31.114] |  :  .  state: ‘finished’
[10:52:31.114] |  :  .  run: TRUE
[10:52:31.114] |  :  .  result: ‘FutureResult’
[10:52:31.114] |  :  resolved() for ‘SequentialFuture’ ... done
[10:52:31.115] |  :  resolved: TRUE
[10:52:31.115] |  resolved() ... done
[10:52:31.115] resolved() for ‘SequentialFuture’ ... done
Plotting tile #3 of 4 ...
[10:52:31.115] signalConditions() ...
[10:52:31.115] |  include = ‘immediateCondition’
[10:52:31.115] |  exclude = 
[10:52:31.115] |  resignal = FALSE
[10:52:31.115] |  Number of conditions: 2
[10:52:31.115] signalConditions() ... done
[10:52:31.115] Future state: ‘finished’
[10:52:31.116] signalConditions() ...
[10:52:31.116] |  include = ‘condition’
[10:52:31.116] |  exclude = ‘immediateCondition’
[10:52:31.116] |  resignal = TRUE
[10:52:31.116] |  Number of conditions: 2
[10:52:31.116] |  Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[10:52:31.116] |  Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[10:52:31.116] signalConditions() ... done
[10:52:31.117] resolved() for ‘Future’ ...
[10:52:31.117] |  state: ‘created’
[10:52:31.117] |  run: TRUE
[10:52:31.117] |  run() ...
[10:52:31.117] |  :  run() for Future (‘Future’) ...
[10:52:31.117] |  :  .  state: ‘created’
[10:52:31.117] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.117] |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.117] |  :  .  Using SequentialFutureBackend ...
[10:52:31.118] |  :  .  |  Launching futures ...
[10:52:31.118] |  :  .  |  :  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:31.118] |  :  .  |  :  .  getFutureData() ...
[10:52:31.118] |  :  .  |  :  .  |  getFutureCore() ...
[10:52:31.118] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future’
[10:52:31.118] |  :  .  |  :  .  |  getFutureCore() ... done
[10:52:31.118] |  :  .  |  :  .  |  getFutureCapture() ...
[10:52:31.118] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:52:31.118] |  :  .  |  :  .  |  getFutureContext() ...
[10:52:31.118] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.119] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:52:31.119] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.119] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:52:31.119] |  :  .  |  :  .  |  getFutureContext() ... done
[10:52:31.119] |  :  .  |  :  .  getFutureData() ... done
[10:52:31.119] |  :  .  |  :  .  attachPackages() ...
[10:52:31.119] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:52:31.119] |  :  .  |  :  .  attachPackages() ... DONE
[10:52:31.119] |  :  .  |  :  .  attachPackages() ...
[10:52:31.120] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:52:31.120] |  :  .  |  :  .  attachPackages() ... DONE
[10:52:31.120] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.120] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:31.120] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.120] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:31.121] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:31.121] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:52:31.121] |  :  .  |  :  .  |  :  .  New stack:
[10:52:31.121] |  :  .  |  :  .  |  :  .  List of 1
[10:52:31.121] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.121] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.121] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.121] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.121] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.121] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.121] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.123] |  :  .  |  :  .  |  :  .  Old stack:
[10:52:31.123] |  :  .  |  :  .  |  :  .  List of 1
[10:52:31.123] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.123] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.123] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.123] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.123] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.123] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:52:31.123] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x559713108cf8> 
[10:52:31.123] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.123] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.123] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.126] |  :  .  |  :  .  |  :  .  Not identical
[10:52:31.126] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:52:31.126] |  :  .  |  :  .  |  :  .  |  List of 2
[10:52:31.126] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.126] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.126] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.126] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.126] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.126] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.126] |  :  .  |  :  .  |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.126] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.126] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.126] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.126] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.126] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:31.126] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x559713108cf8> 
[10:52:31.126] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.126] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.131] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:52:31.131] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:52:31.131] |  :  .  |  :  .  |  :  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:31.132] |  :  .  |  :  .  |  :  List of future strategies:
[10:52:31.132] |  :  .  |  :  .  |  :  1. sequential:
[10:52:31.132] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:31.132] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:52:31.132] |  :  .  |  :  .  |  :     - call: plan(sequential)
[10:52:31.132] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:31.132] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:31.132] |  :  .  |  :  .  assign_globals() ...
[10:52:31.132] |  :  .  |  :  .  List of 4
[10:52:31.132] |  :  .  |  :  .   $ ii   : int 4
[10:52:31.132] |  :  .  |  :  .   $ n    : int 4
[10:52:31.132] |  :  .  |  :  .   $ C    : cplx [1:25, 1:25] -0.719+0.0306i -0.719+0.0918i -0.719+0.1531i ...
[10:52:31.132] |  :  .  |  :  .    ..- attr(*, "region")=List of 2
[10:52:31.132] |  :  .  |  :  .    .. ..$ xrange: num [1:2] -0.719 0.75
[10:52:31.132] |  :  .  |  :  .    .. ..$ yrange: num [1:2] 0.0306 1.5
[10:52:31.132] |  :  .  |  :  .    ..- attr(*, "tile")= int [1:2] 2 2
[10:52:31.132] |  :  .  |  :  .   $ delay:function (counts)  
[10:52:31.132] |  :  .  |  :  .    ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[10:52:31.132] |  :  .  |  :  .    .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x559712e4bc68> 
[10:52:31.132] |  :  .  |  :  .   - attr(*, "where")=List of 4
[10:52:31.132] |  :  .  |  :  .    ..$ ii   :<environment: R_EmptyEnv> 
[10:52:31.132] |  :  .  |  :  .    ..$ n    :<environment: R_EmptyEnv> 
[10:52:31.132] |  :  .  |  :  .    ..$ C    :<environment: R_EmptyEnv> 
[10:52:31.132] |  :  .  |  :  .    ..$ delay:<environment: R_EmptyEnv> 
[10:52:31.132] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:31.132] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:52:31.132] |  :  .  |  :  .   - attr(*, "total_size")= num NA
[10:52:31.132] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:52:31.138] |  :  .  |  :  .  - copied ‘ii’ to environment
[10:52:31.138] |  :  .  |  :  .  - copied ‘n’ to environment
[10:52:31.138] |  :  .  |  :  .  - copied ‘C’ to environment
[10:52:31.138] |  :  .  |  :  .  - reassign environment for ‘delay’ [where=emptyenv()]
[10:52:31.139] |  :  .  |  :  .  - copied ‘delay’ to environment
[10:52:31.139] |  :  .  |  :  .  assign_globals() ... done
[10:52:31.141] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:31.141] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:31.142] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:31.142] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:31.142] |  :  .  |  :  .  |  :  .  |  New stack:
[10:52:31.142] |  :  .  |  :  .  |  :  .  |  List of 1
[10:52:31.142] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.142] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.142] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.142] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.142] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.142] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:31.142] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x559713108cf8> 
[10:52:31.142] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.142] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.142] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.145] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:52:31.145] |  :  .  |  :  .  |  :  .  |  List of 1
[10:52:31.145] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.145] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.145] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.145] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.145] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.145] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:31.145] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x559713108cf8> 
[10:52:31.145] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.145] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.145] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.148] |  :  .  |  :  .  |  :  .  |  Identical
[10:52:31.149] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:31.149] |  :  .  |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:31.149] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:52:31.149] |  :  .  |  :  .  |  :  .  1. sequential:
[10:52:31.149] |  :  .  |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:31.149] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:52:31.149] |  :  .  |  :  .  |  :  .     - call: plan(sequential)
[10:52:31.149] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:31.149] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:31.149] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:31.149] |  :  .  |  :  .  SequentialFuture started (and completed)
[10:52:31.150] |  :  .  |  :  .  signalConditions() ...
[10:52:31.150] |  :  .  |  :  .  |  include = ‘immediateCondition’
[10:52:31.150] |  :  .  |  :  .  |  exclude = 
[10:52:31.150] |  :  .  |  :  .  |  resignal = FALSE
[10:52:31.150] |  :  .  |  :  .  |  Number of conditions: 2
[10:52:31.150] |  :  .  |  :  .  signalConditions() ... done
[10:52:31.150] |  :  .  |  :  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:31.150] |  :  .  |  Launching futures ... done
[10:52:31.150] |  :  .  |  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:31.150] |  :  .  Using SequentialFutureBackend ... done
[10:52:31.151] |  :  run() for Future (‘SequentialFuture’) ... done
[10:52:31.151] |  run() ... done
[10:52:31.151] |  resolved() ...
[10:52:31.151] |  :  resolved() for ‘SequentialFuture’ ...
[10:52:31.151] |  :  .  state: ‘finished’
[10:52:31.151] |  :  .  run: TRUE
[10:52:31.151] |  :  .  result: ‘FutureResult’
[10:52:31.151] |  :  resolved() for ‘SequentialFuture’ ... done
[10:52:31.151] |  :  resolved: TRUE
[10:52:31.151] |  resolved() ... done
[10:52:31.151] resolved() for ‘SequentialFuture’ ... done
Plotting tile #4 of 4 ...
[10:52:31.152] signalConditions() ...
[10:52:31.152] |  include = ‘immediateCondition’
[10:52:31.152] |  exclude = 
[10:52:31.152] |  resignal = FALSE
[10:52:31.152] |  Number of conditions: 2
[10:52:31.152] signalConditions() ... done
[10:52:31.152] Future state: ‘finished’
[10:52:31.152] signalConditions() ...
[10:52:31.152] |  include = ‘condition’
[10:52:31.152] |  exclude = ‘immediateCondition’
[10:52:31.153] |  resignal = TRUE
[10:52:31.153] |  Number of conditions: 2
[10:52:31.153] |  Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[10:52:31.153] |  Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[10:52:31.153] signalConditions() ... done

> close.screen()
[1] 1 2 3 4

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('sequential') ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
- plan('multicore') ...
[10:52:31.154] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.155] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:52:31.155] |  :  all.equal() for FutureStrategyList ...
[10:52:31.155] |  :  .  New stack:
[10:52:31.155] |  :  .  List of 1
[10:52:31.155] |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:31.155] |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:52:31.155] |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:31.155] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.155] |  :  .      ...)  
[10:52:31.155] |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.155] |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.155] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:31.155] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.157] |  :  .  Old stack:
[10:52:31.157] |  :  .  List of 1
[10:52:31.157] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.157] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.157] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.157] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.157] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.157] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:52:31.157] |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x559713108cf8> 
[10:52:31.157] |  :  .    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.157] |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.157] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.160] |  :  .  Not identical
[10:52:31.160] |  :  .  all.equal() for future ...
[10:52:31.160] |  :  .  |  List of 2
[10:52:31.160] |  :  .  |   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:31.160] |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:31.160] |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:31.160] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.160] |  :  .  |      ...)  
[10:52:31.160] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.160] |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.160] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:31.160] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.160] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.160] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.160] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.160] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.160] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:31.160] |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x559713108cf8> 
[10:52:31.160] |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.160] |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.164] |  :  .  |  Formals differ
[10:52:31.165] |  :  .  all.equal() for future ... done
[10:52:31.165] |  :  .  Future strategies differ at level 1
[10:52:31.165] |  :  all.equal() for FutureStrategyList ... done
[10:52:31.165] |  :  plan(): Setting new future strategy stack:
[10:52:31.165] |  :  List of future strategies:
[10:52:31.165] |  :  1. multicore:
[10:52:31.165] |  :     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:52:31.165] |  :     - tweaked: FALSE
[10:52:31.165] |  :     - call: plan(strategy)
[10:52:31.166] |  :  List of 1
[10:52:31.166] |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:31.166] |  :      earlySignal = FALSE, envir = parent.frame())  
[10:52:31.166] |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:31.166] |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.166] |  :      ...)  
[10:52:31.166] |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.166] |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.166] |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:31.166] |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.169] |  :  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:52:31.169] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.169] |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:31.169] |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.169] |  :  .  Legacy shutdown of cluster workers ...
[10:52:31.169] |  :  .  |  Stopping existing cluster ...
[10:52:31.169] |  :  .  |  :  No pre-existing cluster. Skipping
[10:52:31.169] |  :  .  |  Stopping existing cluster ... done
[10:52:31.170] |  :  .  Legacy shutdown of cluster workers ... done
[10:52:31.170] |  :  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:52:31.170] |  :  plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:52:31.170] |  :  .  function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:31.170] |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:52:31.170] |  :  .   - attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:31.170] |  :  .   - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.170] |  :  .      ...)  
[10:52:31.170] |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.170] |  :  .   - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.170] |  :  .   - attr(*, "call")= language plan(strategy)
[10:52:31.171] |  :  .  init: NULL
[10:52:31.172] |  :  plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[10:52:31.172] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.172] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:31.172] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.172] |  :  Backend function: <‘NULL’>
[10:52:31.174] |  :  Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:31.174] |  :  plan(): nbrOfWorkers() = 2
[10:52:31.174] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:52:31.174] plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library(future)

> library(graphics)

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1] 5 6 7 8

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[10:52:31.178] getGlobalsAndPackages() ...
[10:52:31.178] |  Searching for globals ...
[10:52:31.181] |  :  globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[10:52:31.181] |  Searching for globals ... DONE
[10:52:31.181] |  Resolving globals: FALSE
[10:52:31.181] |  Search for packages associated with the globals ...
[10:52:31.182] |  :  Packages associated with globals: [2] ‘base’, ‘future’
[10:52:31.182] |  :  Packages: [2] ‘base’, ‘future’
[10:52:31.182] |  Search for packages associated with the globals ... DONE
[10:52:31.182] |  Packages after dropping 'base': [1] ‘future’
[10:52:31.182] |  Packages after dropping non-attached packages: [1] ‘future’
[10:52:31.183] |  globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[10:52:31.183] |  packages: [1] ‘future’
[10:52:31.183] getGlobalsAndPackages() ... done
 2[10:52:31.188] getGlobalsAndPackages() ...
[10:52:31.188] |  Searching for globals ...
[10:52:31.191] |  :  globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[10:52:31.191] |  Searching for globals ... DONE
[10:52:31.191] |  Resolving globals: FALSE
[10:52:31.191] |  Search for packages associated with the globals ...
[10:52:31.192] |  :  Packages associated with globals: [2] ‘base’, ‘future’
[10:52:31.192] |  :  Packages: [2] ‘base’, ‘future’
[10:52:31.192] |  Search for packages associated with the globals ... DONE
[10:52:31.192] |  Packages after dropping 'base': [1] ‘future’
[10:52:31.192] |  Packages after dropping non-attached packages: [1] ‘future’
[10:52:31.193] |  globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[10:52:31.193] |  packages: [1] ‘future’
[10:52:31.193] getGlobalsAndPackages() ... done
 3[10:52:31.193] getGlobalsAndPackages() ...
[10:52:31.193] |  Searching for globals ...
[10:52:31.196] |  :  globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[10:52:31.196] |  Searching for globals ... DONE
[10:52:31.197] |  Resolving globals: FALSE
[10:52:31.197] |  Search for packages associated with the globals ...
[10:52:31.197] |  :  Packages associated with globals: [2] ‘base’, ‘future’
[10:52:31.197] |  :  Packages: [2] ‘base’, ‘future’
[10:52:31.197] |  Search for packages associated with the globals ... DONE
[10:52:31.197] |  Packages after dropping 'base': [1] ‘future’
[10:52:31.198] |  Packages after dropping non-attached packages: [1] ‘future’
[10:52:31.198] |  globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[10:52:31.198] |  packages: [1] ‘future’
[10:52:31.198] getGlobalsAndPackages() ... done
 4[10:52:31.198] getGlobalsAndPackages() ...
[10:52:31.198] |  Searching for globals ...
[10:52:31.202] |  :  globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[10:52:31.202] |  Searching for globals ... DONE
[10:52:31.203] |  Resolving globals: FALSE
[10:52:31.203] |  Search for packages associated with the globals ...
[10:52:31.203] |  :  Packages associated with globals: [2] ‘base’, ‘future’
[10:52:31.203] |  :  Packages: [2] ‘base’, ‘future’
[10:52:31.203] |  Search for packages associated with the globals ... DONE
[10:52:31.203] |  Packages after dropping 'base': [1] ‘future’
[10:52:31.204] |  Packages after dropping non-attached packages: [1] ‘future’
[10:52:31.204] |  globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[10:52:31.204] |  packages: [1] ‘future’
[10:52:31.204] getGlobalsAndPackages() ... done

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[10:52:31.212] resolved() for ‘Future’ ...
[10:52:31.212] |  state: ‘created’
[10:52:31.213] |  run: TRUE
[10:52:31.213] |  run() ...
[10:52:31.213] |  :  run() for Future (‘Future’) ...
[10:52:31.213] |  :  .  state: ‘created’
[10:52:31.213] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.213] |  :  .  |  makeFutureBackend(<multicore>) ...
[10:52:31.213] |  :  .  |  :  Backend function: <‘NULL’>
[10:52:31.224] |  :  .  |  :  Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:31.224] |  :  .  |  makeFutureBackend(<multicore>) ... done
[10:52:31.224] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.224] |  :  .  Using MulticoreFutureBackend ...
[10:52:31.224] |  :  .  |  Launching futures ...
[10:52:31.225] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:52:31.225] |  :  .  |  :  .  getFutureData() ...
[10:52:31.225] |  :  .  |  :  .  |  getFutureCore() ...
[10:52:31.225] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future’
[10:52:31.225] |  :  .  |  :  .  |  getFutureCore() ... done
[10:52:31.225] |  :  .  |  :  .  |  getFutureCapture() ...
[10:52:31.225] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:52:31.225] |  :  .  |  :  .  |  getFutureContext() ...
[10:52:31.225] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.225] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:52:31.226] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.226] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:52:31.226] |  :  .  |  :  .  |  getFutureContext() ... done
[10:52:31.226] |  :  .  |  :  .  getFutureData() ... done
[10:52:31.226] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:52:31.227] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:52:31.229] |  :  .  |  :  .  MulticoreFuture started
[10:52:31.230] |  :  .  |  :  .  attachPackages() ...
[10:52:31.230] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:52:31.230] |  :  .  |  Launching futures ... done
[10:52:31.230] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:52:31.230] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:31.230] |  :  .  |  :  .  attachPackages() ... DONE
[10:52:31.231] |  :  .  Using MulticoreFutureBackend ... done
[10:52:31.231] |  :  .  |  :  .  attachPackages() ...
[10:52:31.231] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:52:31.231] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:52:31.231] |  run() ... done
[10:52:31.231] |  :  .  |  :  .  attachPackages() ... DONE
[10:52:31.231] |  resolved() ...
[10:52:31.232] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.232] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:31.232] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.233] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:31.233] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:31.234] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:52:31.234] |  :  .  |  :  .  |  :  .  New stack:
[10:52:31.234] |  :  .  |  :  .  |  :  .  List of 1
[10:52:31.234] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.234] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.234] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.234] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.234] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.234] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.234] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.238] |  :  .  |  :  .  |  :  .  Old stack:
[10:52:31.243] |  :  readImmediateCondition() ...
[10:52:31.243] |  :    - path: ‘/tmp/Rtmp4JYH2l/.future/immediateConditions’
[10:52:31.243] |  :   - Number of RDS files: 0
[10:52:31.243] |  :  readImmediateCondition() ... DONE
[10:52:31.243] |  :  resolved: FALSE
[10:52:31.244] |  resolved() ... done
[10:52:31.244] resolved() for ‘MulticoreFuture’ ... done
[10:52:31.244] resolved() for ‘Future’ ...
[10:52:31.244] |  state: ‘created’
[10:52:31.244] |  run: TRUE
[10:52:31.244] |  run() ...
[10:52:31.244] |  :  run() for Future (‘Future’) ...
[10:52:31.245] |  :  .  state: ‘created’
[10:52:31.245] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.245] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.245] |  :  .  Using MulticoreFutureBackend ...
[10:52:31.245] |  :  .  |  Launching futures ...
[10:52:31.245] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:52:31.246] |  :  .  |  :  .  getFutureData() ...
[10:52:31.246] |  :  .  |  :  .  |  getFutureCore() ...
[10:52:31.246] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future’
[10:52:31.246] |  :  .  |  :  .  |  getFutureCore() ... done
[10:52:31.246] |  :  .  |  :  .  |  getFutureCapture() ...
[10:52:31.246] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:52:31.246] |  :  .  |  :  .  |  getFutureContext() ...
[10:52:31.247] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.247] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:52:31.247] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.247] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:52:31.247] |  :  .  |  :  .  |  getFutureContext() ... done
[10:52:31.247] |  :  .  |  :  .  getFutureData() ... done
[10:52:31.248] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:52:31.248] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:52:31.238] |  :  .  |  :  .  |  :  .  List of 1
[10:52:31.238] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:31.238] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:52:31.238] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:31.238] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.238] |  :  .  |  :  .  |  :  .      ...)  
[10:52:31.238] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.238] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.238] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:31.238] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x559712eb6cc8> 
[10:52:31.238] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.238] |  :  .  |  :  .  |  :  .      ...)  
[10:52:31.238] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.238] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.249] |  :  .  |  :  .  |  :  .  Not identical
[10:52:31.249] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:52:31.256] |  :  .  |  :  .  MulticoreFuture started
[10:52:31.256] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:52:31.249] |  :  .  |  :  .  |  :  .  |  List of 2
[10:52:31.249] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.249] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.249] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.249] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.249] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.249] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.249] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:31.249] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:31.249] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:31.249] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.249] |  :  .  |  :  .  |  :  .  |      ...)  
[10:52:31.249] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.249] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.249] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:31.249] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x559712eb6cc8> 
[10:52:31.249] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.249] |  :  .  |  :  .  |  :  .  |      ...)  
[10:52:31.249] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.257] |  :  .  |  Launching futures ... done
[10:52:31.257] |  :  .  |  :  .  attachPackages() ...
[10:52:31.257] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:31.258] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:52:31.258] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:52:31.258] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:52:31.258] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:52:31.258] |  :  .  Using MulticoreFutureBackend ... done
[10:52:31.258] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:52:31.258] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:52:31.258] |  :  .  |  :  .  attachPackages() ... DONE
[10:52:31.258] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:52:31.259] |  :  .  |  :  .  attachPackages() ...
[10:52:31.258] |  :  .  |  :  .  |  :  List of future strategies:
[10:52:31.258] |  :  .  |  :  .  |  :  1. sequential:
[10:52:31.258] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:31.258] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:52:31.258] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.259] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:52:31.259] |  run() ... done
[10:52:31.259] |  resolved() ...
[10:52:31.259] |  :  .  |  :  .  attachPackages() ... DONE
[10:52:31.261] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.261] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:31.261] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.262] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:31.262] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:31.259] |  :  .  |  :  .  |  :  List of 1
[10:52:31.259] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.259] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.259] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.259] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.259] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.259] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.259] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.262] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:52:31.262] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:31.263] |  :  .  |  :  .  |  :  .  New stack:
[10:52:31.263] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:31.263] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.263] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:31.263] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.264] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:52:31.264] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:31.264] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:52:31.264] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:31.264] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:31.265] |  :  .  |  :  .  assign_globals() ...
[10:52:31.263] |  :  .  |  :  .  |  :  .  List of 1
[10:52:31.263] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.263] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.263] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.263] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.263] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.263] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.263] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.267] |  :  .  |  :  .  |  :  .  Old stack:
[10:52:31.270] |  :  readImmediateCondition() ...
[10:52:31.270] |  :    - path: ‘/tmp/Rtmp4JYH2l/.future/immediateConditions’
[10:52:31.271] |  :   - Number of RDS files: 0
[10:52:31.271] |  :  readImmediateCondition() ... DONE
[10:52:31.271] |  :  resolved: FALSE
[10:52:31.265] |  :  .  |  :  .  List of 4
[10:52:31.265] |  :  .  |  :  .   $ ii   : int 1
[10:52:31.265] |  :  .  |  :  .   $ n    : int 4
[10:52:31.265] |  :  .  |  :  .   $ C    : cplx [1:25, 1:25] -2.25-1.5i -2.25-1.44i -2.25-1.38i ...
[10:52:31.265] |  :  .  |  :  .    ..- attr(*, "region")=List of 2
[10:52:31.265] |  :  .  |  :  .    .. ..$ xrange: num [1:2] -2.25 -0.781
[10:52:31.265] |  :  .  |  :  .    .. ..$ yrange: num [1:2] -1.5 -0.0306
[10:52:31.265] |  :  .  |  :  .    ..- attr(*, "tile")= int [1:2] 1 1
[10:52:31.265] |  :  .  |  :  .   $ delay:function (counts)  
[10:52:31.265] |  :  .  |  :  .    ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[10:52:31.265] |  :  .  |  :  .    .. ..- attr(*, "srcfile")=Classes 'srcfilecopy[10:52:31.271] |  resolved() ... done
', 'srcfile' <environment: 0x559712ded750> 
[10:52:31.265] |  :  .  |  :  .   - attr(*, "where")=List of 4
[10:52:31.265] |  :  .  |  :  .    ..$ ii   :<environment: R_EmptyEnv> 
[10:52:31.265] |  :  .  |  :  .    ..$ n    :<environment: R_EmptyEnv> 
[10:52:31.265] |  :  .  |  :  .    ..$ C    :<environment: R_EmptyEnv> 
[10:52:31.265] |  :  .  |  :  .    ..$ delay:<environment: R_EmptyEnv> 
[10:52:31.265] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:31.265] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:52:31.265] |  :  .  |  :  .   - attr(*, "total_size")= num NA
[10:52:31.265] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:52:31.272] |  :  .  |  :  .  - copied ‘ii’ to environment
[10:52:31.272] resolved() for ‘MulticoreFuture’ ... done
[10:52:31.272] |  :  .  |  :  .  - copied ‘n’ to environment
[10:52:31.272] |  :  .  |  :  .  - copied ‘C’ to environment
[10:52:31.272] resolved() for ‘Future’ ...
[10:52:31.272] |  :  .  |  :  .  - reassign environment for ‘delay’ [where=emptyenv()]
[10:52:31.272] |  :  .  |  :  .  - copied ‘delay’ to environment
[10:52:31.272] |  :  .  |  :  .  assign_globals() ... done
[10:52:31.272] |  state: ‘created’
[10:52:31.272] |  run: TRUE
[10:52:31.273] |  run() ...
[10:52:31.273] |  :  run() for Future (‘Future’) ...
[10:52:31.273] |  :  .  state: ‘created’
[10:52:31.273] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.274] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.274] |  :  .  Using MulticoreFutureBackend ...
[10:52:31.274] |  :  .  |  Launching futures ...
[10:52:31.268] |  :  .  |  :  .  |  :  .  List of 1
[10:52:31.268] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:31.268] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:52:31.268] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:31.268] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.268] |  :  .  |  :  .  |  :  .      ...)  
[10:52:31.268] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.268] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.268] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:31.268] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x559712eb6cc8> 
[10:52:31.268] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.268] |  :  .  |  :  .  |  :  .      ...)  
[10:52:31.268] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.268] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.274] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:52:31.275] |  :  .  |  :  .  getFutureData() ...
[10:52:31.275] |  :  .  |  :  .  |  :  .  Not identical
[10:52:31.275] |  :  .  |  :  .  |  getFutureCore() ...
[10:52:31.275] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:52:31.275] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future’
[10:52:31.275] |  :  .  |  :  .  |  getFutureCore() ... done
[10:52:31.276] |  :  .  |  :  .  |  getFutureCapture() ...
[10:52:31.276] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:52:31.276] |  :  .  |  :  .  |  getFutureContext() ...
[10:52:31.276] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.277] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:52:31.277] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.277] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:52:31.277] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:31.277] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:31.277] |  :  .  |  :  .  |  getFutureContext() ... done
[10:52:31.277] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:31.278] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:31.278] |  :  .  |  :  .  getFutureData() ... done
[10:52:31.278] |  :  .  |  :  .  |  :  .  |  New stack:
[10:52:31.278] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:52:31.279] |  :  .  |  :  .  |  Poll #1 (0): usedCores() = 2, workers = 2
[10:52:31.278] |  :  .  |  :  .  |  :  .  |  List of 1
[10:52:31.278] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:31.278] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:31.278] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:31.278] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.278] |  :  .  |  :  .  |  :  .  |      ...)  
[10:52:31.278] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.278] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.278] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:31.278] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x559712eb6cc8> 
[10:52:31.278] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.278] |  :  .  |  :  .  |  :  .  |      ...)  
[10:52:31.278] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.278] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.281] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:52:31.281] |  :  .  |  :  .  |  :  .  |  List of 1
[10:52:31.281] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.281] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.281] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.281] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.281] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.281] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.281] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.283] |  :  .  |  :  .  |  :  .  |  Not identical
[10:52:31.275] |  :  .  |  :  .  |  :  .  |  List of 2
[10:52:31.275] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.275] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.275] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.275] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.275] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.275] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.275] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:31.275] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:31.275] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:31.275] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.275] |  :  .  |  :  .  |  :  .  |      ...)  
[10:52:31.275] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.275] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.275] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:31.275] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x559712eb6cc8> 
[10:52:31.275] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.275] |  :  .  |  :  .  |  :  .  |      ...)  
[10:52:31.275] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.283] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:52:31.284] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:52:31.284] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:52:31.284] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:52:31.285] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:52:31.285] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:52:31.285] |  :  .  |  :  .  |  :  List of future strategies:
[10:52:31.285] |  :  .  |  :  .  |  :  1. sequential:
[10:52:31.285] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:31.285] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:52:31.285] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.283] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:52:31.283] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:31.283] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:52:31.283] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:31.283] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.283] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:52:31.283] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.283] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.283] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:31.283] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x559712eb6cc8> 
[10:52:31.283] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.283] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:52:31.283] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.283] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.283] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.283] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.283] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.283] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.283] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.288] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:52:31.288] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:31.288] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:52:31.288] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:31.288] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:52:31.286] |  :  .  |  :  .  |  :  List of 1
[10:52:31.286] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.286] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.286] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.286] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.286] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.286] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.286] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.289] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:52:31.289] |  :  .  |  :  .  |  :  .  1. multicore:
[10:52:31.289] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:52:31.289] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:52:31.289] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:52:31.289] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:31.289] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:31.289] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.290] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:31.290] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.290] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:52:31.290] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:31.291] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:52:31.291] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:31.291] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:31.291] |  :  .  |  :  .  assign_globals() ...
[10:52:31.289] |  :  .  |  :  .  |  :  .  List of 1
[10:52:31.289] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:31.289] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:52:31.289] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:31.289] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.289] |  :  .  |  :  .  |  :  .      ...)  
[10:52:31.289] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.289] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.289] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:31.289] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x559712eb6cc8> 
[10:52:31.289] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.289] |  :  .  |  :  .  |  :  .      ...)  
[10:52:31.289] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.289] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.293] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:31.294] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:31.294] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.294] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:31.294] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.294] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:52:31.294] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:31.294] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:31.294] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:31.295] |  :  .  |  :  .  |  readImmediateCondition() ...
[10:52:31.295] |  :  .  |  :  .  |    - path: ‘/tmp/Rtmp4JYH2l/.future/immediateConditions’
[10:52:31.295] |  :  .  |  :  .  |   - Number of RDS files: 0
[10:52:31.296] |  :  .  |  :  .  |  readImmediateCondition() ... DONE
[10:52:31.298] |  :  .  |  :  .  |  result() for MulticoreFuture ...
[10:52:31.300] |  :  .  |  :  .  |  :  readImmediateCondition() ...
[10:52:31.300] |  :  .  |  :  .  |  :    - path: ‘/tmp/Rtmp4JYH2l/.future/immediateConditions’
[10:52:31.300] |  :  .  |  :  .  |  :   - Number of RDS files: 0
[10:52:31.300] |  :  .  |  :  .  |  :  readImmediateCondition() ... DONE
[10:52:31.301] |  :  .  |  :  .  |  :  result() for MulticoreFuture ...
[10:52:31.301] |  :  .  |  :  .  |  :  result() for MulticoreFuture ... done
[10:52:31.301] |  :  .  |  :  .  |  :  signalConditions() ...
[10:52:31.301] |  :  .  |  :  .  |  :  .  include = ‘immediateCondition’
[10:52:31.301] |  :  .  |  :  .  |  :  .  exclude = 
[10:52:31.302] |  :  .  |  :  .  |  :  .  resignal = FALSE
[10:52:31.302] |  :  .  |  :  .  |  :  .  Number of conditions: 2
[10:52:31.302] |  :  .  |  :  .  |  :  signalConditions() ... done
[10:52:31.302] |  :  .  |  :  .  |  result() for MulticoreFuture ... done
[10:52:31.303] |  :  .  |  :  .  |  result() for MulticoreFuture ...
[10:52:31.291] |  :  .  |  :  .  List of 4
[10:52:31.291] |  :  .  |  :  .   $ ii   : int 2
[10:52:31.291] |  :  .  |  :  .   $ [10:52:31.303] |  :  .  |  :  .  |  result() for MulticoreFuture ... done
n    : int 4
[10:52:31.291] |  :  .  |  :  .   $ C    : cplx [1:25, 1:25] -0.719-1.5i -0.719-1.44i -0.719-1.38i ...
[10:52:31.291] |  :  .  |  :  .    ..- attr(*, "region")=List of 2
[10:52:31.291] |  :  .  |  :  .    .. ..$ xrange: num [1:2] -0.719 0.75
[10:52:31.291] |  :  .  |  :  .    .. ..$ yrange: num [1:2] -1.5 -0.0306
[10:52:31.291] |  :  .  |  :  .    ..- attr(*, "tile")= int [1:2] 1 2
[10:52:31.291] |  :  .  |  :  .   $ delay:function (counts)  
[10:52:31.291] |  :  .  |  :  .    ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[10:52:31.291] |  :  .  |  :  .    .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x559712ded750> 
[10:52:31.291] |  :  .  |  :  .   - attr(*, "where")=List of 4
[10:52:31.291] |  :  .  |  :  .    ..$ ii   :<environment: R_EmptyEnv> 
[10:52:31.291] |  :  .  |  :  .    ..$ n    :<environment: R_EmptyEnv> 
[10:52:31.291] |  :  .  |  :  .    ..$ C    :<environment: R_EmptyEnv> 
[10:52:31.291] |  :  .  |  :  .    ..$ delay:<environment: R_EmptyEnv> 
[10:52:31.291] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:31.291] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:52:31.291] |  :  .  |  :  .   - attr(*, "total_size")= num NA
[10:52:31.291] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:52:31.303] |  :  .  |  :  .  |  signalConditions() ...
[10:52:31.303] |  :  .  |  :  .  - copied ‘ii’ to environment
[10:52:31.303] |  :  .  |  :  .  - copied ‘n’ to environment
[10:52:31.303] |  :  .  |  :  .  |  :  include = ‘immediateCondition’
[10:52:31.303] |  :  .  |  :  .  - copied ‘C’ to environment
[10:52:31.303] |  :  .  |  :  .  |  :  exclude = 
[10:52:31.304] |  :  .  |  :  .  - reassign environment for ‘delay’ [where=emptyenv()]
[10:52:31.304] |  :  .  |  :  .  |  :  resignal = FALSE
[10:52:31.304] |  :  .  |  :  .  - copied ‘delay’ to environment
[10:52:31.304] |  :  .  |  :  .  |  :  Number of conditions: 2
[10:52:31.304] |  :  .  |  :  .  assign_globals() ... done
[10:52:31.304] |  :  .  |  :  .  |  signalConditions() ... done
[10:52:31.305] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:52:31.308] |  :  .  |  :  .  MulticoreFuture started
[10:52:31.308] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:52:31.308] |  :  .  |  :  .  attachPackages() ...
[10:52:31.308] |  :  .  |  Launching futures ... done
[10:52:31.309] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:52:31.309] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:31.309] |  :  .  |  :  .  attachPackages() ... DONE
[10:52:31.309] |  :  .  Using MulticoreFutureBackend ... done
[10:52:31.309] |  :  .  |  :  .  attachPackages() ...
[10:52:31.309] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:52:31.309] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:52:31.310] |  :  .  |  :  .  attachPackages() ... DONE
[10:52:31.310] |  run() ... done
[10:52:31.310] |  resolved() ...
[10:52:31.310] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:31.310] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.311] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:31.311] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:31.311] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:31.311] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:31.311] |  :  .  |  :  .  |  :  .  |  New stack:
[10:52:31.311] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.312] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:31.312] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:31.312] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:52:31.312] |  :  .  |  :  .  |  :  .  New stack:
[10:52:31.311] |  :  .  |  :  .  |  :  .  |  List of 1
[10:52:31.311] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:31.311] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:31.311] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:31.311] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.311] |  :  .  |  :  .  |  :  .  |      ...)  
[10:52:31.311] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.311] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.311] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:31.311] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x559712eb6cc8> 
[10:52:31.311] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.311] |  :  .  |  :  .  |  :  .  |      ...)  
[10:52:31.311] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.311] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.314] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:52:31.314] |  :  .  |  :  .  |  :  .  |  List of 1
[10:52:31.314] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.314] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.314] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.314] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.314] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.314] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.314] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.317] |  :  .  |  :  .  |  :  .  |  Not identical
[10:52:31.317] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:52:31.313] |  :  .  |  :  .  |  :  .  List of 1
[10:52:31.313] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.313] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.313] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.313] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.313] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.313] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.313] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.317] |  :  .  |  :  .  |  :  .  Old stack:
[10:52:31.320] |  :  readImmediateCondition() ...
[10:52:31.321] |  :    - path: ‘/tmp/Rtmp4JYH2l/.future/immediateConditions’
[10:52:31.321] |  :   - Number of RDS files: 0
[10:52:31.321] |  :  readImmediateCondition() ... DONE
[10:52:31.321] |  :  resolved: FALSE
[10:52:31.317] |  :  .  |  :  .  |  :  .  List of 1
[10:52:31.317] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:31.317] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:52:31.317] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:31.317] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.317] |  :  .  |  :  .  |  :  .      ...)  
[10:52:31.317] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.317] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.317] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:31.317] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x559712eb6cc8> 
[10:52:31.317] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.317] |  :  .  |  :  .  |  :  .      ...)  
[10:52:31.317] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.317] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.322] |  resolved() ... done
[10:52:31.322] |  :  .  |  :  .  |  :  .  Not identical
[10:52:31.322] resolved() for ‘MulticoreFuture’ ... done
[10:52:31.322] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:52:31.322] resolved() for ‘Future’ ...
[10:52:31.322] |  state: ‘created’
[10:52:31.323] |  run: TRUE
[10:52:31.323] |  run() ...
[10:52:31.323] |  :  run() for Future (‘Future’) ...
[10:52:31.323] |  :  .  state: ‘created’
[10:52:31.323] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.324] |  :  .  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.324] |  :  .  Using MulticoreFutureBackend ...
[10:52:31.324] |  :  .  |  Launching futures ...
[10:52:31.324] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:52:31.325] |  :  .  |  :  .  getFutureData() ...
[10:52:31.317] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:52:31.317] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:31.317] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:52:31.317] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:31.317] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.317] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:52:31.317] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.317] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.317] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:31.317] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x559712eb6cc8> 
[10:52:31.317] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.317] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:52:31.317] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.317] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.317] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.317] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.317] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.317] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.317] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.325] |  :  .  |  :  .  |  getFutureCore() ...
[10:52:31.325] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future’
[10:52:31.325] |  :  .  |  :  .  |  getFutureCore() ... done
[10:52:31.325] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:52:31.326] |  :  .  |  :  .  |  getFutureCapture() ...
[10:52:31.326] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:31.326] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:52:31.326] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:52:31.326] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:31.326] |  :  .  |  :  .  |  getFutureContext() ...
[10:52:31.326] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:52:31.326] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.326] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:52:31.326] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:52:31.326] |  :  .  |  :  .  |  :  .  1. multicore:
[10:52:31.326] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:52:31.326] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:52:31.326] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:52:31.327] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.327] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:52:31.327] |  :  .  |  :  .  |  getFutureContext() ... done
[10:52:31.327] |  :  .  |  :  .  getFutureData() ... done
[10:52:31.328] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:52:31.328] |  :  .  |  :  .  |  Poll #1 (0): usedCores() = 2, workers = 2
[10:52:31.327] |  :  .  |  :  .  |  :  .  List of 1
[10:52:31.327] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:31.327] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:52:31.327] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:31.327] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.327] |  :  .  |  :  .  |  :  .      ...)  
[10:52:31.327] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.327] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.327] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:31.327] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x559712eb6cc8> 
[10:52:31.327] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.327] |  :  .  |  :  .  |  :  .      ...)  
[10:52:31.327] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.327] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.331] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:31.331] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:31.331] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.331] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:31.331] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.331] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:52:31.332] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:31.332] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:31.332] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:31.322] |  :  .  |  :  .  |  :  .  |  List of 2
[10:52:31.322] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.322] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.322] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.322] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.322] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.322] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.322] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:31.322] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:31.322] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:31.322] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.322] |  :  .  |  :  .  |  :  .  |      ...)  
[10:52:31.322] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.322] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.322] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:31.322] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x559712eb6cc8> 
[10:52:31.322] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.322] |  :  .  |  :  .  |  :  .  |      ...)  
[10:52:31.322] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.334] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:52:31.334] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:52:31.334] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:52:31.334] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:52:31.334] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:52:31.334] |  :  .  |  :  .  |  :  List of future strategies:
[10:52:31.334] |  :  .  |  :  .  |  :  1. sequential:
[10:52:31.334] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:31.334] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:52:31.334] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.335] |  :  .  |  :  .  |  :  List of 1
[10:52:31.335] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.335] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.335] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.335] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.335] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.335] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.335] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.339] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:31.339] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:31.339] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.339] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:31.339] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.340] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:52:31.340] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:31.340] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:52:31.340] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:31.340] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:31.341] |  :  .  |  :  .  assign_globals() ...
[10:52:31.341] |  :  .  |  :  .  List of 4
[10:52:31.341] |  :  .  |  :  .   $ ii   : int 3
[10:52:31.341] |  :  .  |  :  .   $ n    : int 4
[10:52:31.341] |  :  .  |  :  .   $ C    : cplx [1:25, 1:25] -2.25+0.0306i -2.25+0.0918i -2.25+0.1531i ...
[10:52:31.341] |  :  .  |  :  .    ..- attr(*, "region")=List of 2
[10:52:31.341] |  :  .  |  :  .    .. ..$ xrange: num [1:2] -2.25 -0.781
[10:52:31.341] |  :  .  |  :  .    .. ..$ yrange: num [1:2] 0.0306 1.5
[10:52:31.341] |  :  .  |  :  .    ..- attr(*, "tile")= int [1:2] 2 1
[10:52:31.341] |  :  .  |  :  .   $ delay:function (counts)  
[10:52:31.341] |  :  .  |  :  .    ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[10:52:31.341] |  :  .  |  :  .    .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x559712ded750> 
[10:52:31.341] |  :  .  |  :  .   - attr(*, "where")=List of 4
[10:52:31.341] |  :  .  |  :  .    ..$ ii   :<environment: R_EmptyEnv> 
[10:52:31.341] |  :  .  |  :  .    ..$ n    :<environment: R_EmptyEnv> 
[10:52:31.341] |  :  .  |  :  .    ..$ C    :<environment: R_EmptyEnv> 
[10:52:31.341] |  :  .  |  :  .    ..$ delay:<environment: R_EmptyEnv> 
[10:52:31.341] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:31.341] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:52:31.341] |  :  .  |  :  .   - attr(*, "total_size")= num NA
[10:52:31.341] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:52:31.347] |  :  .  |  :  .  - copied ‘ii’ to environment
[10:52:31.348] |  :  .  |  :  .  - copied ‘n’ to environment
[10:52:31.348] |  :  .  |  :  .  - copied ‘C’ to environment
[10:52:31.348] |  :  .  |  :  .  - reassign environment for ‘delay’ [where=emptyenv()]
[10:52:31.348] |  :  .  |  :  .  - copied ‘delay’ to environment
[10:52:31.348] |  :  .  |  :  .  assign_globals() ... done
[10:52:31.353] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:31.353] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:31.353] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:31.353] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:31.353] |  :  .  |  :  .  |  :  .  |  New stack:
[10:52:31.353] |  :  .  |  :  .  |  :  .  |  List of 1
[10:52:31.353] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:31.353] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:31.353] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:31.353] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.353] |  :  .  |  :  .  |  :  .  |      ...)  
[10:52:31.353] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.353] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.353] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:31.353] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x559712eb6cc8> 
[10:52:31.353] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.353] |  :  .  |  :  .  |  :  .  |      ...)  
[10:52:31.353] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.353] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.357] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:52:31.357] |  :  .  |  :  .  |  :  .  |  List of 1
[10:52:31.357] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.357] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.357] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.357] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.357] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.357] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.357] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.359] |  :  .  |  :  .  |  :  .  |  Not identical
[10:52:31.359] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:52:31.359] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:52:31.359] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:31.359] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:52:31.359] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:31.359] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.359] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:52:31.359] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.359] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.359] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:31.359] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x559712eb6cc8> 
[10:52:31.359] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.359] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:52:31.359] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.359] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.359] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.359] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.359] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.359] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.359] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.363] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:52:31.364] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:31.364] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:52:31.364] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:31.364] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:52:31.364] |  :  .  |  :  .  |  readImmediateCondition() ...
[10:52:31.364] |  :  .  |  :  .  |    - path: ‘/tmp/Rtmp4JYH2l/.future/immediateConditions’
[10:52:31.364] |  :  .  |  :  .  |   - Number of RDS files: 0
[10:52:31.364] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:52:31.364] |  :  .  |  :  .  |  :  .  1. multicore:
[10:52:31.364] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:52:31.364] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:52:31.364] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:52:31.364] |  :  .  |  :  .  |  readImmediateCondition() ... DONE
[10:52:31.364] |  :  .  |  :  .  |  result() for MulticoreFuture ...
[10:52:31.365] |  :  .  |  :  .  |  :  readImmediateCondition() ...
[10:52:31.365] |  :  .  |  :  .  |  :    - path: ‘/tmp/Rtmp4JYH2l/.future/immediateConditions’
[10:52:31.366] |  :  .  |  :  .  |  :   - Number of RDS files: 0
[10:52:31.366] |  :  .  |  :  .  |  :  readImmediateCondition() ... DONE
[10:52:31.364] |  :  .  |  :  .  |  :  .  List of 1
[10:52:31.364] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:31.364] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:52:31.364] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:31.364] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.364] |  :  .  |  :  .  |  :  .      ...)  
[10:52:31.364] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.364] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.364] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:31.364] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x559712eb6cc8> 
[10:52:31.364] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.364] |  :  .  |  :  .  |  :  .      ...)  
[10:52:31.364] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.364] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.367] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:31.368] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:31.368] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.368] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:31.368] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.366] |  :  .  |  :  .  |  :  result() for MulticoreFuture ...
[10:52:31.368] |  :  .  |  :  .  |  :  result() for MulticoreFuture ... done
[10:52:31.368] |  :  .  |  :  .  |  :  signalConditions() ...
[10:52:31.369] |  :  .  |  :  .  |  :  .  include = ‘immediateCondition’
[10:52:31.369] |  :  .  |  :  .  |  :  .  exclude = 
[10:52:31.369] |  :  .  |  :  .  |  :  .  resignal = FALSE
[10:52:31.369] |  :  .  |  :  .  |  :  .  Number of conditions: 2
[10:52:31.369] |  :  .  |  :  .  |  :  signalConditions() ... done
[10:52:31.369] |  :  .  |  :  .  |  result() for MulticoreFuture ... done
[10:52:31.370] |  :  .  |  :  .  |  result() for MulticoreFuture ...
[10:52:31.370] |  :  .  |  :  .  |  result() for MulticoreFuture ... done
[10:52:31.370] |  :  .  |  :  .  |  signalConditions() ...
[10:52:31.370] |  :  .  |  :  .  |  :  include = ‘immediateCondition’
[10:52:31.370] |  :  .  |  :  .  |  :  exclude = 
[10:52:31.370] |  :  .  |  :  .  |  :  resignal = FALSE
[10:52:31.370] |  :  .  |  :  .  |  :  Number of conditions: 2
[10:52:31.371] |  :  .  |  :  .  |  signalConditions() ... done
[10:52:31.371] |  :  .  |  :  .  requestCore(..., workers = 2) ...
[10:52:31.373] |  :  .  |  :  .  MulticoreFuture started
[10:52:31.374] |  :  .  |  :  launchFuture() for MulticoreFutureBackend ...
[10:52:31.374] |  :  .  |  Launching futures ... done
[10:52:31.374] |  :  .  |  :  .  attachPackages() ...
[10:52:31.374] |  :  .  |  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:31.375] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:52:31.375] |  :  .  Using MulticoreFutureBackend ... done
[10:52:31.375] |  :  .  |  :  .  attachPackages() ... DONE
[10:52:31.375] |  :  run() for Future (‘MulticoreFuture’) ... done
[10:52:31.376] |  :  .  |  :  .  attachPackages() ...
[10:52:31.376] |  run() ... done
[10:52:31.376] |  :  .  |  :  .  |  packages: [n=1] ‘future’
[10:52:31.376] |  resolved() ...
[10:52:31.376] |  :  .  |  :  .  attachPackages() ... DONE
[10:52:31.377] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.377] |  :  .  |  :  .  |  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:31.378] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.378] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:31.379] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:31.379] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:52:31.379] |  :  .  |  :  .  |  :  .  New stack:
[10:52:31.379] |  :  .  |  :  .  |  :  .  List of 1
[10:52:31.379] |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.379] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.379] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.379] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.379] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.379] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.379] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.384] |  :  .  |  :  .  |  :  .  Old stack:
[10:52:31.387] |  :  readImmediateCondition() ...
[10:52:31.387] |  :    - path: ‘/tmp/Rtmp4JYH2l/.future/immediateConditions’
[10:52:31.387] |  :   - Number of RDS files: 0
[10:52:31.387] |  :  readImmediateCondition() ... DONE
[10:52:31.388] |  :  resolved: FALSE
[10:52:31.388] |  resolved() ... done
[10:52:31.388] resolved() for ‘MulticoreFuture’ ... done
Plotting tile #1 of 4 ...
[10:52:31.389] result() for MulticoreFuture ...
[10:52:31.389] result() for MulticoreFuture ... done
[10:52:31.389] result() for MulticoreFuture ...
[10:52:31.389] result() for MulticoreFuture ... done
[10:52:31.390] signalConditions() ...
[10:52:31.390] |  include = ‘immediateCondition’
[10:52:31.390] |  exclude = 
[10:52:31.390] |  resignal = FALSE
[10:52:31.390] |  Number of conditions: 2
[10:52:31.391] signalConditions() ... done
[10:52:31.391] Future state: ‘finished’
[10:52:31.384] |  :  .  |  :  .  |  :  .  List of 1
[10:52:31.384] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:31.384] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:52:31.384] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:31.384] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.384] |  :  .  |  :  .  |  :  .      ...)  
[10:52:31.384] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.384] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.384] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:31.384] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x559712eb6cc8> 
[10:52:31.384] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.384] |  :  .  |  :  .  |  :  .      ...)  
[10:52:31.384] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.384] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.391] |  :  .  |  :  .  |  :  .  Not identical
[10:52:31.391] result() for MulticoreFuture ...
[10:52:31.391] |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:52:31.391] result() for MulticoreFuture ... done
[10:52:31.392] signalConditions() ...
[10:52:31.392] |  include = ‘condition’
[10:52:31.392] |  exclude = ‘immediateCondition’
[10:52:31.392] |  resignal = TRUE
[10:52:31.392] |  Number of conditions: 2
[10:52:31.392] |  Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[10:52:31.393] |  Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[10:52:31.393] signalConditions() ... done
Plotting tile #2 of 4 ...
[10:52:31.395] result() for MulticoreFuture ...
[10:52:31.395] result() for MulticoreFuture ... done
[10:52:31.395] result() for MulticoreFuture ...
[10:52:31.395] result() for MulticoreFuture ... done
[10:52:31.395] signalConditions() ...
[10:52:31.396] |  include = ‘immediateCondition’
[10:52:31.396] |  exclude = 
[10:52:31.396] |  resignal = FALSE
[10:52:31.396] |  Number of conditions: 2
[10:52:31.396] signalConditions() ... done
[10:52:31.397] Future state: ‘finished’
[10:52:31.397] result() for MulticoreFuture ...
[10:52:31.397] result() for MulticoreFuture ... done
[10:52:31.397] signalConditions() ...
[10:52:31.397] |  include = ‘condition’
[10:52:31.398] |  exclude = ‘immediateCondition’
[10:52:31.398] |  resignal = TRUE
[10:52:31.398] |  Number of conditions: 2
[10:52:31.398] |  Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[10:52:31.398] |  Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[10:52:31.399] signalConditions() ... done
[10:52:31.392] |  :  .  |  :  .  |  :  .  |  List of 2
[10:52:31.392] |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.392] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.392] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.392] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.392] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.392] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.392] |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:31.392] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:31.392] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:31.392] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.392] |  :  .  |  :  .  |  :  .  |      ...)  
[10:52:31.392] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.392] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.392] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:31.392] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x559712eb6cc8> 
[10:52:31.392] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.392] |  :  .  |  :  .  |  :  .  |      ...)  
[10:52:31.392] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.401] |  :  .  |  :  .  |  :  .  |  Formals differ
[10:52:31.401] |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:52:31.401] |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:52:31.401] |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:52:31.401] |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:52:31.402] |  :  .  |  :  .  |  :  List of future strategies:
[10:52:31.402] |  :  .  |  :  .  |  :  1. sequential:
[10:52:31.402] |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:31.402] |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:52:31.402] |  :  .  |  :  .  |  :     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.410] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:52:31.410] readImmediateCondition() ...
[10:52:31.410] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:31.410]   - path: ‘/tmp/Rtmp4JYH2l/.future/immediateConditions’
[10:52:31.410] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:31.410]  - Number of RDS files: 0
[10:52:31.410] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:31.411] readImmediateCondition() ... DONE
[10:52:31.421] readImmediateCondition() ...
[10:52:31.421]   - path: ‘/tmp/Rtmp4JYH2l/.future/immediateConditions’
[10:52:31.422]  - Number of RDS files: 0
[10:52:31.422] readImmediateCondition() ... DONE
[10:52:31.422] readImmediateCondition() ...
[10:52:31.422]   - path: ‘/tmp/Rtmp4JYH2l/.future/immediateConditions’
[10:52:31.422]  - Number of RDS files: 0
[10:52:31.422] readImmediateCondition() ... DONE
Plotting tile #3 of 4 ...
[10:52:31.423] result() for MulticoreFuture ...
[10:52:31.424] |  readImmediateCondition() ...
[10:52:31.424] |    - path: ‘/tmp/Rtmp4JYH2l/.future/immediateConditions’
[10:52:31.424] |   - Number of RDS files: 0
[10:52:31.424] |  readImmediateCondition() ... DONE
[10:52:31.424] |  result() for MulticoreFuture ...
[10:52:31.425] |  result() for MulticoreFuture ... done
[10:52:31.425] |  signalConditions() ...
[10:52:31.425] |  :  include = ‘immediateCondition’
[10:52:31.425] |  :  exclude = 
[10:52:31.425] |  :  resignal = FALSE
[10:52:31.425] |  :  Number of conditions: 2
[10:52:31.426] |  signalConditions() ... done
[10:52:31.426] result() for MulticoreFuture ... done
[10:52:31.426] result() for MulticoreFuture ...
[10:52:31.426] result() for MulticoreFuture ... done
[10:52:31.426] signalConditions() ...
[10:52:31.427] |  include = ‘immediateCondition’
[10:52:31.427] |  exclude = 
[10:52:31.427] |  resignal = FALSE
[10:52:31.427] |  Number of conditions: 2
[10:52:31.427] signalConditions() ... done
[10:52:31.427] Future state: ‘finished’
[10:52:31.428] result() for MulticoreFuture ...
[10:52:31.428] result() for MulticoreFuture ... done
[10:52:31.428] signalConditions() ...
[10:52:31.428] |  include = ‘condition’
[10:52:31.428] |  exclude = ‘immediateCondition’
[10:52:31.428] |  resignal = TRUE
[10:52:31.429] |  Number of conditions: 2
[10:52:31.429] |  Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[10:52:31.429] |  Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[10:52:31.429] signalConditions() ... done
[10:52:31.440] readImmediateCondition() ...
[10:52:31.441]   - path: ‘/tmp/Rtmp4JYH2l/.future/immediateConditions’
[10:52:31.441]  - Number of RDS files: 0
[10:52:31.441] readImmediateCondition() ... DONE
[10:52:31.403] |  :  .  |  :  .  |  :  List of 1
[10:52:31.403] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.403] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.403] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.403] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.403] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.403] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.403] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.451] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:31.451] |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:31.451] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.451] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:31.451] readImmediateCondition() ...
[10:52:31.451] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.451]   - path: ‘/tmp/Rtmp4JYH2l/.future/immediateConditions’
[10:52:31.452] |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:52:31.452]  - Number of RDS files: 0
[10:52:31.452] readImmediateCondition() ... DONE
[10:52:31.452] |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:31.452] |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:52:31.452] |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:31.452] |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:31.452] |  :  .  |  :  .  assign_globals() ...
[10:52:31.453] |  :  .  |  :  .  List of 4
[10:52:31.453] |  :  .  |  :  .   $ ii   : int 4
[10:52:31.453] |  :  .  |  :  .   $ n    : int 4
[10:52:31.453] |  :  .  |  :  .   $ C    : cplx [1:25, 1:25] -0.719+0.0306i -0.719+0.0918i -0.719+0.1531i ...
[10:52:31.453] |  :  .  |  :  .    ..- attr(*, "region")=List of 2
[10:52:31.453] |  :  .  |  :  .    .. ..$ xrange: num [1:2] -0.719 0.75
[10:52:31.453] |  :  .  |  :  .    .. ..$ yrange: num [1:2] 0.0306 1.5
[10:52:31.453] |  :  .  |  :  .    ..- attr(*, "tile")= int [1:2] 2 2
[10:52:31.453] |  :  .  |  :  .   $ delay:function (counts)  
[10:52:31.453] |  :  .  |  :  .    ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[10:52:31.453] |  :  .  |  :  .    .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x559712ded750> 
[10:52:31.453] |  :  .  |  :  .   - attr(*, "where")=List of 4
[10:52:31.453] |  :  .  |  :  .    ..$ ii   :<environment: R_EmptyEnv> 
[10:52:31.453] |  :  .  |  :  .    ..$ n    :<environment: R_EmptyEnv> 
[10:52:31.453] |  :  .  |  :  .    ..$ C    :<environment: R_EmptyEnv> 
[10:52:31.453] |  :  .  |  :  .    ..$ delay:<environment: R_EmptyEnv> 
[10:52:31.453] |  :  .  |  :  .   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:31.453] |  :  .  |  :  .   - attr(*, "resolved")= logi FALSE
[10:52:31.453] |  :  .  |  :  .   - attr(*, "total_size")= num NA
[10:52:31.453] |  :  .  |  :  .   - attr(*, "already-done")= logi TRUE
[10:52:31.459] |  :  .  |  :  .  - copied ‘ii’ to environment
[10:52:31.459] |  :  .  |  :  .  - copied ‘n’ to environment
[10:52:31.459] |  :  .  |  :  .  - copied ‘C’ to environment
[10:52:31.459] |  :  .  |  :  .  - reassign environment for ‘delay’ [where=emptyenv()]
[10:52:31.460] |  :  .  |  :  .  - copied ‘delay’ to environment
[10:52:31.460] |  :  .  |  :  .  assign_globals() ... done
[10:52:31.462] readImmediateCondition() ...
[10:52:31.462]   - path: ‘/tmp/Rtmp4JYH2l/.future/immediateConditions’
[10:52:31.463]  - Number of RDS files: 0
[10:52:31.463] readImmediateCondition() ... DONE
[10:52:31.463] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:31.463] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:31.464] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:31.464] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:31.464] |  :  .  |  :  .  |  :  .  |  New stack:
[10:52:31.464] |  :  .  |  :  .  |  :  .  |  List of 1
[10:52:31.464] |  :  .  |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:31.464] |  :  .  |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:31.464] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:31.464] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.464] |  :  .  |  :  .  |  :  .  |      ...)  
[10:52:31.464] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.464] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.464] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:31.464] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x559712eb6cc8> 
[10:52:31.464] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.464] |  :  .  |  :  .  |  :  .  |      ...)  
[10:52:31.464] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.464] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.467] |  :  .  |  :  .  |  :  .  |  Old stack:
[10:52:31.467] |  :  .  |  :  .  |  :  .  |  List of 1
[10:52:31.467] |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.467] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.467] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.467] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.467] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.467] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.467] |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.469] |  :  .  |  :  .  |  :  .  |  Not identical
[10:52:31.470] |  :  .  |  :  .  |  :  .  |  all.equal() for future ...
[10:52:31.473] readImmediateCondition() ...
[10:52:31.473]   - path: ‘/tmp/Rtmp4JYH2l/.future/immediateConditions’
[10:52:31.473]  - Number of RDS files: 0
[10:52:31.473] readImmediateCondition() ... DONE
[10:52:31.470] |  :  .  |  :  .  |  :  .  |  :  List of 2
[10:52:31.470] |  :  .  |  :  .  |  :  .  |  :   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:31.470] |  :  .  |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:52:31.470] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:31.470] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.470] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:52:31.470] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.470] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.470] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:31.470] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x559712eb6cc8> 
[10:52:31.470] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.470] |  :  .  |  :  .  |  :  .  |  :      ...)  
[10:52:31.470] |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.470] |  :  .  |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.470] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:31.470] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:31.470] |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.470] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:31.470] |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:31.476] |  :  .  |  :  .  |  :  .  |  :  Formals differ
[10:52:31.476] |  :  .  |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:31.476] |  :  .  |  :  .  |  :  .  |  Future strategies differ at level 1
[10:52:31.476] |  :  .  |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:31.476] |  :  .  |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:52:31.476] |  :  .  |  :  .  |  :  .  List of future strategies:
[10:52:31.476] |  :  .  |  :  .  |  :  .  1. multicore:
[10:52:31.476] |  :  .  |  :  .  |  :  .     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:52:31.476] |  :  .  |  :  .  |  :  .     - tweaked: FALSE
[10:52:31.476] |  :  .  |  :  .  |  :  .     - call: plan(strategy)
[10:52:31.477] |  :  .  |  :  .  |  :  .  List of 1
[10:52:31.477] |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:31.477] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:52:31.477] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:31.477] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.477] |  :  .  |  :  .  |  :  .      ...)  
[10:52:31.477] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.477] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.477] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:31.477] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x559712eb6cc8> 
[10:52:31.477] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.477] |  :  .  |  :  .  |  :  .      ...)  
[10:52:31.477] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.477] |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.480] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:52:31.480] |  :  .  |  :  .  |  :  .  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:52:31.480] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.480] |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:31.480] |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.480] |  :  .  |  :  .  |  :  .  plan(): nbrOfWorkers() = 2
[10:52:31.481] |  :  .  |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:31.481] |  :  .  |  :  .  |  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:31.481] |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:31.481] readImmediateCondition() ...
[10:52:31.481]   - path: ‘/tmp/Rtmp4JYH2l/.future/immediateConditions’
[10:52:31.481]  - Number of RDS files: 0
[10:52:31.482] readImmediateCondition() ... DONE
Plotting tile #4 of 4 ...
[10:52:31.482] result() for MulticoreFuture ...
[10:52:31.483] |  readImmediateCondition() ...
[10:52:31.483] |    - path: ‘/tmp/Rtmp4JYH2l/.future/immediateConditions’
[10:52:31.483] |   - Number of RDS files: 0
[10:52:31.483] |  readImmediateCondition() ... DONE
[10:52:31.483] |  result() for MulticoreFuture ...
[10:52:31.519] |  result() for MulticoreFuture ... done
[10:52:31.520] |  signalConditions() ...
[10:52:31.520] |  :  include = ‘immediateCondition’
[10:52:31.520] |  :  exclude = 
[10:52:31.520] |  :  resignal = FALSE
[10:52:31.520] |  :  Number of conditions: 2
[10:52:31.520] |  signalConditions() ... done
[10:52:31.520] result() for MulticoreFuture ... done
[10:52:31.520] result() for MulticoreFuture ...
[10:52:31.521] result() for MulticoreFuture ... done
[10:52:31.521] signalConditions() ...
[10:52:31.521] |  include = ‘immediateCondition’
[10:52:31.521] |  exclude = 
[10:52:31.521] |  resignal = FALSE
[10:52:31.521] |  Number of conditions: 2
[10:52:31.521] signalConditions() ... done
[10:52:31.521] Future state: ‘finished’
[10:52:31.521] result() for MulticoreFuture ...
[10:52:31.522] result() for MulticoreFuture ... done
[10:52:31.522] signalConditions() ...
[10:52:31.522] |  include = ‘condition’
[10:52:31.522] |  exclude = ‘immediateCondition’
[10:52:31.522] |  resignal = TRUE
[10:52:31.522] |  Number of conditions: 2
[10:52:31.522] |  Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[10:52:31.522] |  Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[10:52:31.522] signalConditions() ... done

> close.screen()
[1] 1 2 3 4 5 6 7 8

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('multicore') ... DONE
- plan('multisession') ...
[10:52:31.524] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.524] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:52:31.524] |  :  all.equal() for FutureStrategyList ...
[10:52:31.524] |  :  .  New stack:
[10:52:31.524] |  :  .  List of 1
[10:52:31.524] |  :  .   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:52:31.524] |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.524] |  :  .    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:52:31.524] |  :  .    ..- attr(*, "init")= logi TRUE
[10:52:31.524] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:31.524] |  :  .    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:31.524] |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:31.524] |  :  .    ..- attr(*, "untweakable")= chr "persistent"
[10:52:31.524] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:31.524] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.527] |  :  .  Old stack:
[10:52:31.527] |  :  .  List of 1
[10:52:31.527] |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:31.527] |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:52:31.527] |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:31.527] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.527] |  :  .      ...)  
[10:52:31.527] |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.527] |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.527] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:52:31.527] |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x559712eb6cc8> 
[10:52:31.527] |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.527] |  :  .      ...)  
[10:52:31.527] |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.527] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.530] |  :  .  Not identical
[10:52:31.530] |  :  .  all.equal() for future ...
[10:52:31.531] |  :  .  |  List of 2
[10:52:31.531] |  :  .  |   $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:52:31.531] |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.531] |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:52:31.531] |  :  .  |    ..- attr(*, "init")= logi TRUE
[10:52:31.531] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:31.531] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:31.531] |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:31.531] |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:52:31.531] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:31.531] |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:52:31.531] |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:52:31.531] |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:52:31.531] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.531] |  :  .  |      ...)  
[10:52:31.531] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.531] |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.531] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:52:31.531] |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x559712eb6cc8> 
[10:52:31.531] |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:52:31.531] |  :  .  |      ...)  
[10:52:31.531] |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:52:31.536] |  :  .  |  Formals differ
[10:52:31.536] |  :  .  all.equal() for future ... done
[10:52:31.536] |  :  .  Future strategies differ at level 1
[10:52:31.536] |  :  all.equal() for FutureStrategyList ... done
[10:52:31.536] |  :  plan(): Setting new future strategy stack:
[10:52:31.536] |  :  List of future strategies:
[10:52:31.536] |  :  1. multisession:
[10:52:31.536] |  :     - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:52:31.536] |  :     - tweaked: FALSE
[10:52:31.536] |  :     - call: plan(strategy)
[10:52:31.537] |  :  List of 1
[10:52:31.537] |  :   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:52:31.537] |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.537] |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:52:31.537] |  :    ..- attr(*, "init")= logi TRUE
[10:52:31.537] |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:31.537] |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:31.537] |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:31.537] |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:52:31.537] |  :    ..- attr(*, "call")= language plan(strategy)
[10:52:31.537] |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:31.540] |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:52:31.540] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:31.540] |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:52:31.540] |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:31.541] |  :  .  Legacy shutdown of cluster workers ...
[10:52:31.541] |  :  .  |  Stopping existing cluster ...
[10:52:31.542] |  :  .  |  :  No pre-existing cluster. Skipping
[10:52:31.542] |  :  .  |  Stopping existing cluster ... done
[10:52:31.542] |  :  .  Legacy shutdown of cluster workers ... done
[10:52:31.542] |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:52:31.542] |  :  plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:52:31.542] |  :  .  function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:52:31.542] |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:31.542] |  :  .   - attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:52:31.542] |  :  .   - attr(*, "init")= logi TRUE
[10:52:31.542] |  :  .   - attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:31.542] |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:31.542] |  :  .   - attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:31.542] |  :  .   - attr(*, "untweakable")= chr "persistent"
[10:52:31.542] |  :  .   - attr(*, "call")= language plan(strategy)
[10:52:31.544] |  :  .  init: TRUE
[10:52:31.544] |  :  .  makeFutureBackend(<multisession>) ...
[10:52:31.544] |  :  .  |  Backend function: <‘NULL’>
[10:52:31.546] |  :  .  |  ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ...
[10:52:31.546] |  :  .  |  :  workers: 2
[10:52:31.546] |  :  .  |  :  getCluster() ...
[10:52:31.546] |  :  .  |  :  getCluster() ... done
[10:52:31.546] |  :  .  |  :  Stopping existing cluster ...
[10:52:31.546] |  :  .  |  :  .  No pre-existing cluster. Skipping
[10:52:31.547] |  :  .  |  :  Stopping existing cluster ... done
[10:52:31.547] |  :  .  |  :  Starting new cluster ...
[10:52:31.547] |  :  .  |  :  .  makeCluster(workers, ...) ...
[10:52:31.547] |  :  .  |  :  .  |  Arguments:
[10:52:31.547] |  :  .  |  :  .  |  List of 2
[10:52:31.547] |  :  .  |  :  .  |   $             : int 2
[10:52:31.547] |  :  .  |  :  .  |   $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:52:32.044] |  :  .  |  :  .  |  Generated cluster UUID
[10:52:32.044] |  :  .  |  :  .  |  Cluster UUID: ‘074195bc642d71daf77f7c7a4b6e56f2’
[10:52:32.044] |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:52:32.046] |  :  .  |  :  .  makeCluster(workers, ...) ... done
[10:52:32.046] |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:52:32.048] |  :  .  |  :  Starting new cluster ... done
[10:52:32.048] |  :  .  |  :  Number of workers: 2
[10:52:32.048] |  :  .  |  :  Workers UUID: ‘074195bc642d71daf77f7c7a4b6e56f2’
[10:52:32.048] |  :  .  |  ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ... done
[10:52:32.048] |  :  .  |  Backend: <‘MultisessionFutureBackend’, ‘ClusterFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:32.048] |  :  .  makeFutureBackend(<multisession>) ... done
[10:52:32.049] |  :  plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[10:52:32.049] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:32.049] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:52:32.049] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:32.049] |  :  plan(): nbrOfWorkers() = 2
[10:52:32.049] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:52:32.049] plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library(future)

> library(graphics)

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1]  9 10 11 12

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[10:52:32.053] getGlobalsAndPackages() ...
[10:52:32.053] |  Searching for globals ...
[10:52:32.057] |  :  globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[10:52:32.057] |  Searching for globals ... DONE
[10:52:32.057] |  Resolving globals: FALSE
[10:52:32.057] |  Search for packages associated with the globals ...
[10:52:32.057] |  :  Packages associated with globals: [2] ‘base’, ‘future’
[10:52:32.058] |  :  Packages: [2] ‘base’, ‘future’
[10:52:32.058] |  Search for packages associated with the globals ... DONE
[10:52:32.058] |  Packages after dropping 'base': [1] ‘future’
[10:52:32.058] |  Packages after dropping non-attached packages: [1] ‘future’
[10:52:32.058] |  globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[10:52:32.058] |  packages: [1] ‘future’
[10:52:32.058] getGlobalsAndPackages() ... done
 2[10:52:32.063] getGlobalsAndPackages() ...
[10:52:32.063] |  Searching for globals ...
[10:52:32.067] |  :  globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[10:52:32.067] |  Searching for globals ... DONE
[10:52:32.068] |  Resolving globals: FALSE
[10:52:32.068] |  Search for packages associated with the globals ...
[10:52:32.068] |  :  Packages associated with globals: [2] ‘base’, ‘future’
[10:52:32.068] |  :  Packages: [2] ‘base’, ‘future’
[10:52:32.069] |  Search for packages associated with the globals ... DONE
[10:52:32.069] |  Packages after dropping 'base': [1] ‘future’
[10:52:32.069] |  Packages after dropping non-attached packages: [1] ‘future’
[10:52:32.069] |  globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[10:52:32.069] |  packages: [1] ‘future’
[10:52:32.069] getGlobalsAndPackages() ... done
 3[10:52:32.070] getGlobalsAndPackages() ...
[10:52:32.070] |  Searching for globals ...
[10:52:32.074] |  :  globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[10:52:32.075] |  Searching for globals ... DONE
[10:52:32.075] |  Resolving globals: FALSE
[10:52:32.075] |  Search for packages associated with the globals ...
[10:52:32.075] |  :  Packages associated with globals: [2] ‘base’, ‘future’
[10:52:32.075] |  :  Packages: [2] ‘base’, ‘future’
[10:52:32.076] |  Search for packages associated with the globals ... DONE
[10:52:32.076] |  Packages after dropping 'base': [1] ‘future’
[10:52:32.076] |  Packages after dropping non-attached packages: [1] ‘future’
[10:52:32.076] |  globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[10:52:32.076] |  packages: [1] ‘future’
[10:52:32.076] getGlobalsAndPackages() ... done
 4[10:52:32.077] getGlobalsAndPackages() ...
[10:52:32.077] |  Searching for globals ...
[10:52:32.081] |  :  globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[10:52:32.081] |  Searching for globals ... DONE
[10:52:32.082] |  Resolving globals: FALSE
[10:52:32.082] |  Search for packages associated with the globals ...
[10:52:32.082] |  :  Packages associated with globals: [2] ‘base’, ‘future’
[10:52:32.082] |  :  Packages: [2] ‘base’, ‘future’
[10:52:32.083] |  Search for packages associated with the globals ... DONE
[10:52:32.083] |  Packages after dropping 'base': [1] ‘future’
[10:52:32.083] |  Packages after dropping non-attached packages: [1] ‘future’
[10:52:32.083] |  globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[10:52:32.083] |  packages: [1] ‘future’
[10:52:32.083] getGlobalsAndPackages() ... done

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[10:52:32.095] resolved() for ‘Future’ ...
[10:52:32.095] |  state: ‘created’
[10:52:32.095] |  run: TRUE
[10:52:32.095] |  run() ...
[10:52:32.095] |  :  run() for Future (‘Future’) ...
[10:52:32.095] |  :  .  state: ‘created’
[10:52:32.095] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:32.096] |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:32.096] |  :  .  Using MultisessionFutureBackend ...
[10:52:32.096] |  :  .  |  Launching futures ...
[10:52:32.096] |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:52:32.096] |  :  .  |  :  .  Workers: [n=2]
[10:52:32.097] |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:52:32.099] |  :  .  |  :  .  FutureRegistry: ‘workers-074195bc642d71daf77f7c7a4b6e56f2’
[10:52:32.099] |  :  .  |  :  .  requestWorker() ...
[10:52:32.099] |  :  .  |  :  .  |  requestNode() ...
[10:52:32.099] |  :  .  |  :  .  |  :  Number of workers: 2
[10:52:32.099] |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:52:32.099] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'list', earlySignal = 0) ...
[10:52:32.099] |  :  .  |  :  .  |  :  .  |  Created empty registry ‘workers-074195bc642d71daf77f7c7a4b6e56f2’
[10:52:32.099] |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:52:32.100] |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:52:32.100] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'list', earlySignal = 0) ... done
[10:52:32.100] |  :  .  |  :  .  |  :  .  Total time: 0
[10:52:32.100] |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:52:32.100] |  :  .  |  :  .  |  :  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'list', earlySignal = 0) ...
[10:52:32.100] |  :  .  |  :  .  |  :  .  Listing all futures
[10:52:32.100] |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:52:32.100] |  :  .  |  :  .  |  :  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'list', earlySignal = 0) ... done
[10:52:32.101] |  :  .  |  :  .  |  :  Index of first available worker: 1
[10:52:32.101] |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:52:32.161] |  :  .  |  :  .  |  :  .  Worker is functional
[10:52:32.162] |  :  .  |  :  .  |  :  requestNode() ... done
[10:52:32.162] |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:32.162] |  :  .  |  :  .  |  requestWorker() ... done
[10:52:32.162] |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:52:32.163] |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:52:32.163] |  :  .  |  :  .  |  launchFuture() ...
[10:52:32.163] |  :  .  |  :  .  |  :  cluster node index: 1
[10:52:32.163] |  :  .  |  :  .  |  :  getFutureData() ...
[10:52:32.163] |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:52:32.164] |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 1): ‘future’
[10:52:32.164] |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:52:32.164] |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:52:32.164] |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:52:32.164] |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:52:32.164] |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:32.164] |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:52:32.164] |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:32.165] |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:52:32.165] |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:52:32.165] |  :  .  |  :  .  |  :  getFutureData() ... done
[10:52:32.166] |  :  .  |  :  .  |  :  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'add', earlySignal = 0) ...
[10:52:32.166] |  :  .  |  :  .  |  :  .  Appended future to position #1
[10:52:32.166] |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:52:32.166] |  :  .  |  :  .  |  :  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'add', earlySignal = 0) ... done
[10:52:32.166] |  :  .  |  :  .  |  launchFuture() ... done
[10:52:32.166] |  :  .  |  :  .  |  MultisessionFuture started
[10:52:32.166] |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:52:32.167] |  :  .  |  :  Launching futures ... done
[10:52:32.167] |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:32.167] |  :  .  |  Using MultisessionFutureBackend ... done
[10:52:32.167] |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:52:32.167] |  :  run() ... done
[10:52:32.167] |  :  resolved() ...
[10:52:32.168] |  :  .  isFutureResolved() ...
[10:52:32.168] |  :  .  |  assertValidConnection() ...
[10:52:32.168] |  :  .  |  :  cluster node index: 1
[10:52:32.169] |  :  .  |  assertValidConnection() ... done
[10:52:32.179] |  :  .  isFutureResolved() ... done
[10:52:32.179] |  :  .  resolved: FALSE
[10:52:32.179] |  :  resolved() ... done
[10:52:32.180] |  resolved() for ‘MultisessionFuture’ ... done
[10:52:32.180] |  resolved() for ‘Future’ ...
[10:52:32.180] |  :  state: ‘created’
[10:52:32.180] |  :  run: TRUE
[10:52:32.180] |  :  run() ...
[10:52:32.180] |  :  .  run() for Future (‘Future’) ...
[10:52:32.180] |  :  .  |  state: ‘created’
[10:52:32.181] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:32.181] |  :  .  |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:32.181] |  :  .  |  Using MultisessionFutureBackend ...
[10:52:32.181] |  :  .  |  :  Launching futures ...
[10:52:32.181] |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ...
[10:52:32.181] |  :  .  |  :  .  |  Workers: [n=2]
[10:52:32.181] |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:52:32.183] |  :  .  |  :  .  |  FutureRegistry: ‘workers-074195bc642d71daf77f7c7a4b6e56f2’
[10:52:32.183] |  :  .  |  :  .  |  requestWorker() ...
[10:52:32.184] |  :  .  |  :  .  |  :  requestNode() ...
[10:52:32.184] |  :  .  |  :  .  |  :  .  Number of workers: 2
[10:52:32.184] |  :  .  |  :  .  |  :  .  Polling for a free worker ...
[10:52:32.184] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'list', earlySignal = 0) ...
[10:52:32.184] |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:52:32.184] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:52:32.184] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'list', earlySignal = 0) ... done
[10:52:32.185] |  :  .  |  :  .  |  :  .  |  Total time: 0
[10:52:32.185] |  :  .  |  :  .  |  :  .  Polling for a free worker ... done
[10:52:32.185] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'list', earlySignal = 0) ...
[10:52:32.185] |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:52:32.185] |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:52:32.185] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'list', earlySignal = 0) ... done
[10:52:32.185] |  :  .  |  :  .  |  :  .  Index of first available worker: 2
[10:52:32.185] |  :  .  |  :  .  |  :  .  Validate that the worker is functional ...
[10:52:32.269] |  :  .  |  :  .  |  :  .  |  Worker is functional
[10:52:32.269] |  :  .  |  :  .  |  :  .  requestNode() ... done
[10:52:32.269] |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:52:32.269] |  :  .  |  :  .  |  :  requestWorker() ... done
[10:52:32.269] |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ...
[10:52:32.270] |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:52:32.270] |  :  .  |  :  .  |  :  launchFuture() ...
[10:52:32.270] |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:52:32.270] |  :  .  |  :  .  |  :  .  getFutureData() ...
[10:52:32.270] |  :  .  |  :  .  |  :  .  |  getFutureCore() ...
[10:52:32.270] |  :  .  |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 1): ‘future’
[10:52:32.271] |  :  .  |  :  .  |  :  .  |  getFutureCore() ... done
[10:52:32.271] |  :  .  |  :  .  |  :  .  |  getFutureCapture() ...
[10:52:32.271] |  :  .  |  :  .  |  :  .  |  getFutureCapture() ... done
[10:52:32.271] |  :  .  |  :  .  |  :  .  |  getFutureContext() ...
[10:52:32.271] |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:32.271] |  :  .  |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:52:32.271] |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:32.271] |  :  .  |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:52:32.271] |  :  .  |  :  .  |  :  .  |  getFutureContext() ... done
[10:52:32.272] |  :  .  |  :  .  |  :  .  getFutureData() ... done
[10:52:32.272] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'add', earlySignal = 0) ...
[10:52:32.272] |  :  .  |  :  .  |  :  .  |  Appended future to position #2
[10:52:32.272] |  :  .  |  :  .  |  :  .  |  Number of registered futures: 2
[10:52:32.273] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'add', earlySignal = 0) ... done
[10:52:32.273] |  :  .  |  :  .  |  :  launchFuture() ... done
[10:52:32.273] |  :  .  |  :  .  |  :  MultisessionFuture started
[10:52:32.273] |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:52:32.273] |  :  .  |  :  .  Launching futures ... done
[10:52:32.273] |  :  .  |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:32.273] |  :  .  |  :  Using MultisessionFutureBackend ... done
[10:52:32.273] |  :  .  |  run() for Future (‘MultisessionFuture’) ... done
[10:52:32.273] |  :  .  run() ... done
[10:52:32.273] |  :  .  resolved() ...
[10:52:32.274] |  :  .  |  isFutureResolved() ...
[10:52:32.274] |  :  .  |  :  assertValidConnection() ...
[10:52:32.274] |  :  .  |  :  .  cluster node index: 2
[10:52:32.274] |  :  .  |  :  assertValidConnection() ... done
[10:52:32.285] |  :  .  |  isFutureResolved() ... done
[10:52:32.285] |  :  .  |  resolved: FALSE
[10:52:32.285] |  :  .  resolved() ... done
[10:52:32.285] |  :  resolved() for ‘MultisessionFuture’ ... done
[10:52:32.285] |  :  resolved() for ‘Future’ ...
[10:52:32.285] |  :  .  state: ‘created’
[10:52:32.285] |  :  .  run: TRUE
[10:52:32.285] |  :  .  run() ...
[10:52:32.286] |  :  .  |  run() for Future (‘Future’) ...
[10:52:32.286] |  :  .  |  :  state: ‘created’
[10:52:32.286] |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:32.286] |  :  .  |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:32.286] |  :  .  |  :  Using MultisessionFutureBackend ...
[10:52:32.286] |  :  .  |  :  .  Launching futures ...
[10:52:32.286] |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:52:32.286] |  :  .  |  :  .  |  :  Workers: [n=2]
[10:52:32.286] |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:52:32.288] |  :  .  |  :  .  |  :  FutureRegistry: ‘workers-074195bc642d71daf77f7c7a4b6e56f2’
[10:52:32.288] |  :  .  |  :  .  |  :  requestWorker() ...
[10:52:32.288] |  :  .  |  :  .  |  :  .  requestNode() ...
[10:52:32.288] |  :  .  |  :  .  |  :  .  |  Number of workers: 2
[10:52:32.288] |  :  .  |  :  .  |  :  .  |  Polling for a free worker ...
[10:52:32.289] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'list', earlySignal = 0) ...
[10:52:32.289] |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:52:32.289] |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 2
[10:52:32.289] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'list', earlySignal = 0) ... done
[10:52:32.289] |  :  .  |  :  .  |  :  .  |  :  Poll #1 (0): usedNodes() = 2, workers = 2
[10:52:32.299] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'collect-first', earlySignal = 1) ...
[10:52:32.299] |  :  .  |  :  .  |  :  .  |  :  .  collectValues('workers-074195bc642d71daf77f7c7a4b6e56f2', firstOnly = TRUE) ...
[10:52:32.300] |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:52:32.300] |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:52:32.300] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:52:32.300] |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:52:32.301] |  :  .  |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:52:32.301] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:52:32.301] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  [1] TRUE
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  received data:
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  List of 5
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ type   : chr "VALUE"
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ value  :List of 13
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ value            : 'Mandelbrot' int [1:25, 1:25] 1 1 1 1 1 1 1 1 1 1 ...
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "params")=List of 3
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ Z      : cplx [1:25, 1:25] -2.25-1.5i -2.25-1.44i -2.25-1.38i ...
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "region")=List of 2
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..$ xrange: num [1:2] -2.25 -0.781
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..$ yrange: num [1:2] -1.5 -0.0306
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "tile")= int [1:2] 1 1
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ maxIter: int 200
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ tau    : num 2
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ stdout           : chr ""
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ conditions       :List of 2
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ :List of 2
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ condition:List of 2
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ message: chr "Calculating tile #1 of 4 ..."
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ call   : language message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "srcref")= 'srcref' int [1:8] 69 5 69 79 5 79 69 69
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x559713935270> 
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ signaled : int 0
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ :List of 2
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ condition:List of 2
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ message: chr " done\n"
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..$ call   : language message(" done")
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. ..- attr(*, "srcref")= 'srcref' int [1:8] 75 5 75 20 5 20 75 75
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x559713935270> 
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ signaled : int 0
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ added   : NULL
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ removed : NULL
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ replaced: NULL
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:52:32"
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:52:32"
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ session_uuid     : chr "b1f1f7d18cec5c723332a3b7ba817ce2"
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ pid   : int 68407
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:52:32"
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ r_info           :List of 4
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ success: logi TRUE
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.064 0.004 0.068 0 0
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:52:32.302] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ tag    : NULL
[10:52:32.326] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Received FutureResult
[10:52:32.326] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'remove', earlySignal = 0) ...
[10:52:32.326] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Removed future from position #1
[10:52:32.326] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:52:32.326] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'remove', earlySignal = 0) ... done
[10:52:32.326] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Erased future from future backend
[10:52:32.326] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:32.327] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:32.327] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:32.327] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditions() ...
[10:52:32.327] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  include = ‘immediateCondition’
[10:52:32.327] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  exclude = 
[10:52:32.327] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  resignal = FALSE
[10:52:32.327] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of conditions: 2
[10:52:32.327] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditions() ... done
[10:52:32.327] |  :  .  |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:52:32.327] |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:52:32.328] |  :  .  |  :  .  |  :  .  |  :  .  |  Future at position #1 is resolved ...
[10:52:32.328] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:52:32.328] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:52:32.328] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:52:32.328] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:52:32.328] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:52:32.328] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:52:32.328] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditions() ...
[10:52:32.328] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  include = ‘immediateCondition’
[10:52:32.328] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  exclude = 
[10:52:32.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal = FALSE
[10:52:32.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of conditions: 2
[10:52:32.329] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditions() ... done
[10:52:32.329] |  :  .  |  :  .  |  :  .  |  :  .  |  Future at position #1 is resolved ... done
[10:52:32.329] |  :  .  |  :  .  |  :  .  |  :  .  collectValues('workers-074195bc642d71daf77f7c7a4b6e56f2', firstOnly = TRUE) ... done
[10:52:32.329] |  :  .  |  :  .  |  :  .  |  :  .  Early signaling of 2 future candidates ...
[10:52:32.329] |  :  .  |  :  .  |  :  .  |  :  .  Number of futures with early signaling requested: 0
[10:52:32.329] |  :  .  |  :  .  |  :  .  |  :  .  Early signaling of 2 future candidates ... done
[10:52:32.329] |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 2
[10:52:32.329] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'collect-first', earlySignal = 1) ... done
[10:52:32.330] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'list', earlySignal = 0) ...
[10:52:32.330] |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:52:32.330] |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:52:32.330] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'list', earlySignal = 0) ... done
[10:52:32.330] |  :  .  |  :  .  |  :  .  |  :  Total time: 0.0409641265869141
[10:52:32.330] |  :  .  |  :  .  |  :  .  |  Polling for a free worker ... done
[10:52:32.330] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'list', earlySignal = 0) ...
[10:52:32.330] |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:52:32.330] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:52:32.330] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'list', earlySignal = 0) ... done
[10:52:32.331] |  :  .  |  :  .  |  :  .  |  Index of first available worker: 1
[10:52:32.331] |  :  .  |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:52:32.371] |  :  .  |  :  .  |  :  .  |  :  Worker is functional
[10:52:32.371] |  :  .  |  :  .  |  :  .  |  requestNode() ... done
[10:52:32.371] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:32.371] |  :  .  |  :  .  |  :  .  requestWorker() ... done
[10:52:32.371] |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:52:32.372] |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:52:32.372] |  :  .  |  :  .  |  :  .  launchFuture() ...
[10:52:32.372] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:52:32.372] |  :  .  |  :  .  |  :  .  |  getFutureData() ...
[10:52:32.372] |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ...
[10:52:32.372] |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘future’
[10:52:32.373] |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:52:32.373] |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:52:32.373] |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:52:32.373] |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ...
[10:52:32.373] |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:32.373] |  :  .  |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:32.373] |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:32.373] |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:32.373] |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:52:32.374] |  :  .  |  :  .  |  :  .  |  getFutureData() ... done
[10:52:32.374] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'add', earlySignal = 0) ...
[10:52:32.374] |  :  .  |  :  .  |  :  .  |  :  Appended future to position #2
[10:52:32.374] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 2
[10:52:32.374] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'add', earlySignal = 0) ... done
[10:52:32.374] |  :  .  |  :  .  |  :  .  launchFuture() ... done
[10:52:32.375] |  :  .  |  :  .  |  :  .  MultisessionFuture started
[10:52:32.375] |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:52:32.375] |  :  .  |  :  .  |  Launching futures ... done
[10:52:32.375] |  :  .  |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:32.375] |  :  .  |  :  .  Using MultisessionFutureBackend ... done
[10:52:32.375] |  :  .  |  :  run() for Future (‘MultisessionFuture’) ... done
[10:52:32.375] |  :  .  |  run() ... done
[10:52:32.375] |  :  .  |  resolved() ...
[10:52:32.375] |  :  .  |  :  isFutureResolved() ...
[10:52:32.376] |  :  .  |  :  .  assertValidConnection() ...
[10:52:32.376] |  :  .  |  :  .  |  cluster node index: 1
[10:52:32.376] |  :  .  |  :  .  assertValidConnection() ... done
[10:52:32.387] |  :  .  |  :  isFutureResolved() ... done
[10:52:32.387] |  :  .  |  :  resolved: FALSE
[10:52:32.387] |  :  .  |  resolved() ... done
[10:52:32.387] |  :  .  resolved() for ‘MultisessionFuture’ ... done
[10:52:32.387] |  :  .  resolved() for ‘Future’ ...
[10:52:32.387] |  :  .  |  state: ‘created’
[10:52:32.387] |  :  .  |  run: TRUE
[10:52:32.387] |  :  .  |  run() ...
[10:52:32.387] |  :  .  |  :  run() for Future (‘Future’) ...
[10:52:32.388] |  :  .  |  :  .  state: ‘created’
[10:52:32.388] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:32.388] |  :  .  |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:32.388] |  :  .  |  :  .  Using MultisessionFutureBackend ...
[10:52:32.388] |  :  .  |  :  .  |  Launching futures ...
[10:52:32.388] |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:52:32.388] |  :  .  |  :  .  |  :  .  Workers: [n=2]
[10:52:32.388] |  :  .  |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:52:32.390] |  :  .  |  :  .  |  :  .  FutureRegistry: ‘workers-074195bc642d71daf77f7c7a4b6e56f2’
[10:52:32.390] |  :  .  |  :  .  |  :  .  requestWorker() ...
[10:52:32.390] |  :  .  |  :  .  |  :  .  |  requestNode() ...
[10:52:32.390] |  :  .  |  :  .  |  :  .  |  :  Number of workers: 2
[10:52:32.390] |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:52:32.391] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'list', earlySignal = 0) ...
[10:52:32.391] |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:52:32.391] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 2
[10:52:32.391] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'list', earlySignal = 0) ... done
[10:52:32.391] |  :  .  |  :  .  |  :  .  |  :  .  Poll #1 (0): usedNodes() = 2, workers = 2
[10:52:32.401] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'collect-first', earlySignal = 1) ...
[10:52:32.401] |  :  .  |  :  .  |  :  .  |  :  .  |  collectValues('workers-074195bc642d71daf77f7c7a4b6e56f2', firstOnly = TRUE) ...
[10:52:32.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:52:32.402] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:52:32.402] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:52:32.402] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:52:32.402] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  [1] TRUE
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  received data:
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  List of 5
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ value  :List of 13
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ value            : 'Mandelbrot' int [1:25, 1:25] 1 1 1 1 2 2 2 2 2 3 ...
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "params")=List of 3
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ Z      : cplx [1:25, 1:25] -0.719-1.5i -0.719-1.44i -0.719-1.38i ...
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "region")=List of 2
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..$ xrange: num [1:2] -0.719 0.75
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..$ yrange: num [1:2] -1.5 -0.0306
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "tile")= int [1:2] 1 2
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ maxIter: int 200
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ tau    : num 2
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ stdout           : chr ""
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ conditions       :List of 2
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ :List of 2
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ condition:List of 2
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ message: chr "Calculating tile #2 of 4 ..."
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ call   : language message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "srcref")= 'srcref' int [1:8] 69 5 69 79 5 79 69 69
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x5597155178e0> 
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ signaled : int 0
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ :List of 2
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ condition:List of 2
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ message: chr " done\n"
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..$ call   : language message(" done")
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. .. ..- attr(*, "srcref")= 'srcref' int [1:8] 75 5 75 20 5 20 75 75
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. .. .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x5597155178e0> 
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ signaled : int 0
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ rng              : logi FALSE
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:52:32"
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:52:32"
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ session_uuid     : chr "c656c13138c34eff2f46db48509a5e7a"
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ pid   : int 68406
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:52:32"
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ success: logi TRUE
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.058 0.004 0.062 0 0
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:52:32.403] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ tag    : NULL
[10:52:32.421] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Received FutureResult
[10:52:32.421] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'remove', earlySignal = 0) ...
[10:52:32.421] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Removed future from position #1
[10:52:32.422] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:52:32.422] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'remove', earlySignal = 0) ... done
[10:52:32.422] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Erased future from future backend
[10:52:32.422] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:52:32.422] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:52:32.422] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:52:32.422] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditions() ...
[10:52:32.422] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  include = ‘immediateCondition’
[10:52:32.422] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  exclude = 
[10:52:32.422] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resignal = FALSE
[10:52:32.422] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of conditions: 2
[10:52:32.423] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditions() ... done
[10:52:32.423] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:52:32.423] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:52:32.423] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Future at position #1 is resolved ...
[10:52:32.423] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:32.423] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:32.423] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:32.423] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:32.423] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:32.424] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:32.424] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditions() ...
[10:52:32.424] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  include = ‘immediateCondition’
[10:52:32.424] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  exclude = 
[10:52:32.424] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  resignal = FALSE
[10:52:32.424] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of conditions: 2
[10:52:32.424] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditions() ... done
[10:52:32.424] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Future at position #1 is resolved ... done
[10:52:32.424] |  :  .  |  :  .  |  :  .  |  :  .  |  collectValues('workers-074195bc642d71daf77f7c7a4b6e56f2', firstOnly = TRUE) ... done
[10:52:32.424] |  :  .  |  :  .  |  :  .  |  :  .  |  Early signaling of 2 future candidates ...
[10:52:32.424] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of futures with early signaling requested: 0
[10:52:32.425] |  :  .  |  :  .  |  :  .  |  :  .  |  Early signaling of 2 future candidates ... done
[10:52:32.425] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 2
[10:52:32.425] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'collect-first', earlySignal = 1) ... done
[10:52:32.425] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'list', earlySignal = 0) ...
[10:52:32.425] |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:52:32.425] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:52:32.425] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'list', earlySignal = 0) ... done
[10:52:32.425] |  :  .  |  :  .  |  :  .  |  :  .  Total time: 0.0342819690704346
[10:52:32.425] |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:52:32.425] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'list', earlySignal = 0) ...
[10:52:32.426] |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:52:32.426] |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:52:32.426] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'list', earlySignal = 0) ... done
[10:52:32.426] |  :  .  |  :  .  |  :  .  |  :  Index of first available worker: 2
[10:52:32.426] |  :  .  |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:52:32.467] |  :  .  |  :  .  |  :  .  |  :  .  Worker is functional
[10:52:32.467] |  :  .  |  :  .  |  :  .  |  :  requestNode() ... done
[10:52:32.467] |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:52:32.467] |  :  .  |  :  .  |  :  .  |  requestWorker() ... done
[10:52:32.468] |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:52:32.468] |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:52:32.468] |  :  .  |  :  .  |  :  .  |  launchFuture() ...
[10:52:32.468] |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:52:32.468] |  :  .  |  :  .  |  :  .  |  :  getFutureData() ...
[10:52:32.468] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:52:32.468] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 1): ‘future’
[10:52:32.469] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:52:32.469] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:52:32.469] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:52:32.469] |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:52:32.469] |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:32.469] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:52:32.469] |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:32.469] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:52:32.469] |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:52:32.470] |  :  .  |  :  .  |  :  .  |  :  getFutureData() ... done
[10:52:32.470] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'add', earlySignal = 0) ...
[10:52:32.470] |  :  .  |  :  .  |  :  .  |  :  .  Appended future to position #2
[10:52:32.470] |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 2
[10:52:32.470] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'add', earlySignal = 0) ... done
[10:52:32.470] |  :  .  |  :  .  |  :  .  |  launchFuture() ... done
[10:52:32.470] |  :  .  |  :  .  |  :  .  |  MultisessionFuture started
[10:52:32.470] |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:52:32.471] |  :  .  |  :  .  |  :  Launching futures ... done
[10:52:32.471] |  :  .  |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:32.471] |  :  .  |  :  .  |  Using MultisessionFutureBackend ... done
[10:52:32.471] |  :  .  |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:52:32.471] |  :  .  |  :  run() ... done
[10:52:32.471] |  :  .  |  :  resolved() ...
[10:52:32.471] |  :  .  |  :  .  isFutureResolved() ...
[10:52:32.471] |  :  .  |  :  .  |  assertValidConnection() ...
[10:52:32.472] |  :  .  |  :  .  |  :  cluster node index: 2
[10:52:32.472] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:52:32.482] |  :  .  |  :  .  isFutureResolved() ... done
[10:52:32.482] |  :  .  |  :  .  resolved: FALSE
[10:52:32.482] |  :  .  |  :  resolved() ... done
[10:52:32.483] |  :  .  |  resolved() for ‘MultisessionFuture’ ... done
Plotting tile #1 of 4 ...
[10:52:32.483] |  :  .  |  result() for ClusterFuture ...
[10:52:32.483] |  :  .  |  :  result already collected: FutureResult
[10:52:32.483] |  :  .  |  result() for ClusterFuture ... done
[10:52:32.483] |  :  .  |  result() for ClusterFuture ...
[10:52:32.483] |  :  .  |  :  result already collected: FutureResult
[10:52:32.483] |  :  .  |  result() for ClusterFuture ... done
[10:52:32.483] |  :  .  |  signalConditions() ...
[10:52:32.484] |  :  .  |  :  include = ‘immediateCondition’
[10:52:32.484] |  :  .  |  :  exclude = 
[10:52:32.484] |  :  .  |  :  resignal = FALSE
[10:52:32.484] |  :  .  |  :  Number of conditions: 2
[10:52:32.484] |  :  .  |  signalConditions() ... done
[10:52:32.484] |  :  .  |  Future state: ‘finished’
[10:52:32.484] |  :  .  |  result() for ClusterFuture ...
[10:52:32.484] |  :  .  |  :  result already collected: FutureResult
[10:52:32.484] |  :  .  |  result() for ClusterFuture ... done
[10:52:32.484] |  :  .  |  signalConditions() ...
[10:52:32.484] |  :  .  |  :  include = ‘condition’
[10:52:32.485] |  :  .  |  :  exclude = ‘immediateCondition’
[10:52:32.485] |  :  .  |  :  resignal = TRUE
[10:52:32.485] |  :  .  |  :  Number of conditions: 2
[10:52:32.485] |  :  .  |  :  Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[10:52:32.485] |  :  .  |  :  Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[10:52:32.485] |  :  .  |  signalConditions() ... done
Plotting tile #2 of 4 ...
[10:52:32.486] |  :  .  |  result() for ClusterFuture ...
[10:52:32.486] |  :  .  |  :  result already collected: FutureResult
[10:52:32.486] |  :  .  |  result() for ClusterFuture ... done
[10:52:32.486] |  :  .  |  result() for ClusterFuture ...
[10:52:32.486] |  :  .  |  :  result already collected: FutureResult
[10:52:32.486] |  :  .  |  result() for ClusterFuture ... done
[10:52:32.486] |  :  .  |  signalConditions() ...
[10:52:32.486] |  :  .  |  :  include = ‘immediateCondition’
[10:52:32.487] |  :  .  |  :  exclude = 
[10:52:32.487] |  :  .  |  :  resignal = FALSE
[10:52:32.487] |  :  .  |  :  Number of conditions: 2
[10:52:32.487] |  :  .  |  signalConditions() ... done
[10:52:32.487] |  :  .  |  Future state: ‘finished’
[10:52:32.487] |  :  .  |  result() for ClusterFuture ...
[10:52:32.487] |  :  .  |  :  result already collected: FutureResult
[10:52:32.487] |  :  .  |  result() for ClusterFuture ... done
[10:52:32.487] |  :  .  |  signalConditions() ...
[10:52:32.487] |  :  .  |  :  include = ‘condition’
[10:52:32.487] |  :  .  |  :  exclude = ‘immediateCondition’
[10:52:32.488] |  :  .  |  :  resignal = TRUE
[10:52:32.488] |  :  .  |  :  Number of conditions: 2
[10:52:32.488] |  :  .  |  :  Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[10:52:32.488] |  :  .  |  :  Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[10:52:32.488] |  :  .  |  signalConditions() ... done
[10:52:32.489] |  :  .  |  isFutureResolved() ...
[10:52:32.489] |  :  .  |  :  assertValidConnection() ...
[10:52:32.489] |  :  .  |  :  .  cluster node index: 1
[10:52:32.489] |  :  .  |  :  assertValidConnection() ... done
[10:52:32.489] |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:52:32.490] |  :  .  |  :  .  cluster node index: 1
[10:52:32.490] |  :  .  |  :  .  [1] TRUE
[10:52:32.490] |  :  .  |  :  .  received data:
[10:52:32.490] |  :  .  |  :  .  List of 5
[10:52:32.490] |  :  .  |  :  .   $ type   : chr "VALUE"
[10:52:32.490] |  :  .  |  :  .   $ value  :List of 13
[10:52:32.490] |  :  .  |  :  .    ..$ value            : 'Mandelbrot' int [1:25, 1:25] 1 1 1 1 1 1 1 1 1 1 ...
[10:52:32.490] |  :  .  |  :  .    .. ..- attr(*, "params")=List of 3
[10:52:32.490] |  :  .  |  :  .    .. .. ..$ Z      : cplx [1:25, 1:25] -2.25+0.0306i -2.25+0.0918i -2.25+0.1531i ...
[10:52:32.490] |  :  .  |  :  .    .. .. .. ..- attr(*, "region")=List of 2
[10:52:32.490] |  :  .  |  :  .    .. .. .. .. ..$ xrange: num [1:2] -2.25 -0.781
[10:52:32.490] |  :  .  |  :  .    .. .. .. .. ..$ yrange: num [1:2] 0.0306 1.5
[10:52:32.490] |  :  .  |  :  .    .. .. .. ..- attr(*, "tile")= int [1:2] 2 1
[10:52:32.490] |  :  .  |  :  .    .. .. ..$ maxIter: int 200
[10:52:32.490] |  :  .  |  :  .    .. .. ..$ tau    : num 2
[10:52:32.490] |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:52:32.490] |  :  .  |  :  .    ..$ stdout           : chr ""
[10:52:32.490] |  :  .  |  :  .    ..$ conditions       :List of 2
[10:52:32.490] |  :  .  |  :  .    .. ..$ :List of 2
[10:52:32.490] |  :  .  |  :  .    .. .. ..$ condition:List of 2
[10:52:32.490] |  :  .  |  :  .    .. .. .. ..$ message: chr "Calculating tile #3 of 4 ..."
[10:52:32.490] |  :  .  |  :  .    .. .. .. ..$ call   : language message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
[10:52:32.490] |  :  .  |  :  .    .. .. .. .. ..- attr(*, "srcref")= 'srcref' int [1:8] 69 5 69 79 5 79 69 69
[10:52:32.490] |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x5597131f1948> 
[10:52:32.490] |  :  .  |  :  .    .. .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
[10:52:32.490] |  :  .  |  :  .    .. .. ..$ signaled : int 0
[10:52:32.490] |  :  .  |  :  .    .. ..$ :List of 2
[10:52:32.490] |  :  .  |  :  .    .. .. ..$ condition:List of 2
[10:52:32.490] |  :  .  |  :  .    .. .. .. ..$ message: chr " done\n"
[10:52:32.490] |  :  .  |  :  .    .. .. .. ..$ call   : language message(" done")
[10:52:32.490] |  :  .  |  :  .    .. .. .. .. ..- attr(*, "srcref")= 'srcref' int [1:8] 75 5 75 20 5 20 75 75
[10:52:32.490] |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x5597131f1948> 
[10:52:32.490] |  :  .  |  :  .    .. .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
[10:52:32.490] |  :  .  |  :  .    .. .. ..$ signaled : int 0
[10:52:32.490] |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:52:32.490] |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:52:32.490] |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:52:32.490] |  :  .  |  :  .    .. ..$ added   : NULL
[10:52:32.490] |  :  .  |  :  .    .. ..$ removed : NULL
[10:52:32.490] |  :  .  |  :  .    .. ..$ replaced: NULL
[10:52:32.490] |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:52:32.490] |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:52:32"
[10:52:32.490] |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:52:32"
[10:52:32.490] |  :  .  |  :  .    ..$ session_uuid     : chr "b1f1f7d18cec5c723332a3b7ba817ce2"
[10:52:32.490] |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:52:32.490] |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:52:32.490] |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:52:32.490] |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:52:32.490] |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:52:32.490] |  :  .  |  :  .    .. .. ..$ pid   : int 68407
[10:52:32.490] |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:52:32"
[10:52:32.490] |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:52:32.490] |  :  .  |  :  .    ..$ r_info           :List of 4
[10:52:32.490] |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:52:32.490] |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:52:32.490] |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:52:32.490] |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:52:32.490] |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:52:32.490] |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:52:32.490] |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:52:32.490] |  :  .  |  :  .   $ success: logi TRUE
[10:52:32.490] |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[10:52:32.490] |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:52:32.490] |  :  .  |  :  .   $ tag    : NULL
[10:52:32.508] |  :  .  |  :  .  Received FutureResult
[10:52:32.508] |  :  .  |  :  .  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'remove', earlySignal = 0) ...
[10:52:32.508] |  :  .  |  :  .  |  Removed future from position #1
[10:52:32.508] |  :  .  |  :  .  |  Number of registered futures: 1
[10:52:32.508] |  :  .  |  :  .  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'remove', earlySignal = 0) ... done
[10:52:32.508] |  :  .  |  :  .  Erased future from future backend
[10:52:32.508] |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:32.508] |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:32.508] |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:32.509] |  :  .  |  :  .  signalConditions() ...
[10:52:32.509] |  :  .  |  :  .  |  include = ‘immediateCondition’
[10:52:32.509] |  :  .  |  :  .  |  exclude = 
[10:52:32.509] |  :  .  |  :  .  |  resignal = FALSE
[10:52:32.509] |  :  .  |  :  .  |  Number of conditions: 2
[10:52:32.509] |  :  .  |  :  .  signalConditions() ... done
[10:52:32.509] |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:52:32.509] |  :  .  |  isFutureResolved() ... done
Plotting tile #3 of 4 ...
[10:52:32.509] |  :  .  |  result() for ClusterFuture ...
[10:52:32.509] |  :  .  |  :  result already collected: FutureResult
[10:52:32.510] |  :  .  |  result() for ClusterFuture ... done
[10:52:32.510] |  :  .  |  result() for ClusterFuture ...
[10:52:32.510] |  :  .  |  :  result already collected: FutureResult
[10:52:32.510] |  :  .  |  result() for ClusterFuture ... done
[10:52:32.510] |  :  .  |  signalConditions() ...
[10:52:32.510] |  :  .  |  :  include = ‘immediateCondition’
[10:52:32.510] |  :  .  |  :  exclude = 
[10:52:32.510] |  :  .  |  :  resignal = FALSE
[10:52:32.510] |  :  .  |  :  Number of conditions: 2
[10:52:32.510] |  :  .  |  signalConditions() ... done
[10:52:32.510] |  :  .  |  Future state: ‘finished’
[10:52:32.511] |  :  .  |  result() for ClusterFuture ...
[10:52:32.511] |  :  .  |  :  result already collected: FutureResult
[10:52:32.511] |  :  .  |  result() for ClusterFuture ... done
[10:52:32.511] |  :  .  |  signalConditions() ...
[10:52:32.511] |  :  .  |  :  include = ‘condition’
[10:52:32.511] |  :  .  |  :  exclude = ‘immediateCondition’
[10:52:32.511] |  :  .  |  :  resignal = TRUE
[10:52:32.511] |  :  .  |  :  Number of conditions: 2
[10:52:32.511] |  :  .  |  :  Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[10:52:32.511] |  :  .  |  :  Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[10:52:32.512] |  :  .  |  signalConditions() ... done
[10:52:32.512] |  :  .  |  isFutureResolved() ...
[10:52:32.512] |  :  .  |  :  assertValidConnection() ...
[10:52:32.513] |  :  .  |  :  .  cluster node index: 2
[10:52:32.513] |  :  .  |  :  assertValidConnection() ... done
[10:52:32.515] |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:52:32.516] |  :  .  |  :  .  cluster node index: 2
[10:52:32.516] |  :  .  |  :  .  [1] TRUE
[10:52:32.516] |  :  .  |  :  .  received data:
[10:52:32.516] |  :  .  |  :  .  List of 5
[10:52:32.516] |  :  .  |  :  .   $ type   : chr "VALUE"
[10:52:32.516] |  :  .  |  :  .   $ value  :List of 13
[10:52:32.516] |  :  .  |  :  .    ..$ value            : 'Mandelbrot' int [1:25, 1:25] 200 200 200 109 195 15 9 8 5 5 ...
[10:52:32.516] |  :  .  |  :  .    .. ..- attr(*, "params")=List of 3
[10:52:32.516] |  :  .  |  :  .    .. .. ..$ Z      : cplx [1:25, 1:25] -0.719+0.0306i -0.719+0.0918i -0.719+0.1531i ...
[10:52:32.516] |  :  .  |  :  .    .. .. .. ..- attr(*, "region")=List of 2
[10:52:32.516] |  :  .  |  :  .    .. .. .. .. ..$ xrange: num [1:2] -0.719 0.75
[10:52:32.516] |  :  .  |  :  .    .. .. .. .. ..$ yrange: num [1:2] 0.0306 1.5
[10:52:32.516] |  :  .  |  :  .    .. .. .. ..- attr(*, "tile")= int [1:2] 2 2
[10:52:32.516] |  :  .  |  :  .    .. .. ..$ maxIter: int 200
[10:52:32.516] |  :  .  |  :  .    .. .. ..$ tau    : num 2
[10:52:32.516] |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:52:32.516] |  :  .  |  :  .    ..$ stdout           : chr ""
[10:52:32.516] |  :  .  |  :  .    ..$ conditions       :List of 2
[10:52:32.516] |  :  .  |  :  .    .. ..$ :List of 2
[10:52:32.516] |  :  .  |  :  .    .. .. ..$ condition:List of 2
[10:52:32.516] |  :  .  |  :  .    .. .. .. ..$ message: chr "Calculating tile #4 of 4 ..."
[10:52:32.516] |  :  .  |  :  .    .. .. .. ..$ call   : language message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
[10:52:32.516] |  :  .  |  :  .    .. .. .. .. ..- attr(*, "srcref")= 'srcref' int [1:8] 69 5 69 79 5 79 69 69
[10:52:32.516] |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x559715088180> 
[10:52:32.516] |  :  .  |  :  .    .. .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
[10:52:32.516] |  :  .  |  :  .    .. .. ..$ signaled : int 0
[10:52:32.516] |  :  .  |  :  .    .. ..$ :List of 2
[10:52:32.516] |  :  .  |  :  .    .. .. ..$ condition:List of 2
[10:52:32.516] |  :  .  |  :  .    .. .. .. ..$ message: chr " done\n"
[10:52:32.516] |  :  .  |  :  .    .. .. .. ..$ call   : language message(" done")
[10:52:32.516] |  :  .  |  :  .    .. .. .. .. ..- attr(*, "srcref")= 'srcref' int [1:8] 75 5 75 20 5 20 75 75
[10:52:32.516] |  :  .  |  :  .    .. .. .. .. .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x559715088180> 
[10:52:32.516] |  :  .  |  :  .    .. .. .. ..- attr(*, "class")= chr [1:3] "simpleMessage" "message" "condition"
[10:52:32.516] |  :  .  |  :  .    .. .. ..$ signaled : int 0
[10:52:32.516] |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:52:32.516] |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:52:32.516] |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:52:32.516] |  :  .  |  :  .    .. ..$ added   : NULL
[10:52:32.516] |  :  .  |  :  .    .. ..$ removed : NULL
[10:52:32.516] |  :  .  |  :  .    .. ..$ replaced: NULL
[10:52:32.516] |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:52:32.516] |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:52:32"
[10:52:32.516] |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:52:32"
[10:52:32.516] |  :  .  |  :  .    ..$ session_uuid     : chr "c656c13138c34eff2f46db48509a5e7a"
[10:52:32.516] |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:52:32.516] |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:52:32.516] |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:52:32.516] |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:52:32.516] |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:52:32.516] |  :  .  |  :  .    .. .. ..$ pid   : int 68406
[10:52:32.516] |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:52:32"
[10:52:32.516] |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:52:32.516] |  :  .  |  :  .    ..$ r_info           :List of 4
[10:52:32.516] |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:52:32.516] |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:52:32.516] |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:52:32.516] |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:52:32.516] |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:52:32.516] |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:52:32.516] |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:52:32.516] |  :  .  |  :  .   $ success: logi TRUE
[10:52:32.516] |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.004 0.001 0.004 0 0
[10:52:32.516] |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:52:32.516] |  :  .  |  :  .   $ tag    : NULL
[10:52:32.534] |  :  .  |  :  .  Received FutureResult
[10:52:32.534] |  :  .  |  :  .  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'remove', earlySignal = 0) ...
[10:52:32.534] |  :  .  |  :  .  |  Removed future from position #1
[10:52:32.534] |  :  .  |  :  .  |  Number of registered futures: 0
[10:52:32.534] |  :  .  |  :  .  FutureRegistry('workers-074195bc642d71daf77f7c7a4b6e56f2', action = 'remove', earlySignal = 0) ... done
[10:52:32.534] |  :  .  |  :  .  Erased future from future backend
[10:52:32.534] |  :  .  |  :  .  result() for ClusterFuture ...
[10:52:32.534] |  :  .  |  :  .  |  result already collected: FutureResult
[10:52:32.534] |  :  .  |  :  .  result() for ClusterFuture ... done
[10:52:32.535] |  :  .  |  :  .  signalConditions() ...
[10:52:32.535] |  :  .  |  :  .  |  include = ‘immediateCondition’
[10:52:32.535] |  :  .  |  :  .  |  exclude = 
[10:52:32.535] |  :  .  |  :  .  |  resignal = FALSE
[10:52:32.535] |  :  .  |  :  .  |  Number of conditions: 2
[10:52:32.535] |  :  .  |  :  .  signalConditions() ... done
[10:52:32.535] |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:52:32.535] |  :  .  |  isFutureResolved() ... done
Plotting tile #4 of 4 ...
[10:52:32.535] |  :  .  |  result() for ClusterFuture ...
[10:52:32.536] |  :  .  |  :  result already collected: FutureResult
[10:52:32.536] |  :  .  |  result() for ClusterFuture ... done
[10:52:32.536] |  :  .  |  result() for ClusterFuture ...
[10:52:32.536] |  :  .  |  :  result already collected: FutureResult
[10:52:32.536] |  :  .  |  result() for ClusterFuture ... done
[10:52:32.536] |  :  .  |  signalConditions() ...
[10:52:32.536] |  :  .  |  :  include = ‘immediateCondition’
[10:52:32.536] |  :  .  |  :  exclude = 
[10:52:32.536] |  :  .  |  :  resignal = FALSE
[10:52:32.536] |  :  .  |  :  Number of conditions: 2
[10:52:32.536] |  :  .  |  signalConditions() ... done
[10:52:32.537] |  :  .  |  Future state: ‘finished’
[10:52:32.537] |  :  .  |  result() for ClusterFuture ...
[10:52:32.537] |  :  .  |  :  result already collected: FutureResult
[10:52:32.537] |  :  .  |  result() for ClusterFuture ... done
[10:52:32.537] |  :  .  |  signalConditions() ...
[10:52:32.537] |  :  .  |  :  include = ‘condition’
[10:52:32.537] |  :  .  |  :  exclude = ‘immediateCondition’
[10:52:32.537] |  :  .  |  :  resignal = TRUE
[10:52:32.537] |  :  .  |  :  Number of conditions: 2
[10:52:32.537] |  :  .  |  :  Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[10:52:32.537] |  :  .  |  :  Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[10:52:32.538] |  :  .  |  signalConditions() ... done

> close.screen()
 [1]  1  2  3  4  5  6  7  8  9 10 11 12

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('multisession') ... DONE
Testing with 2 cores ... DONE

> message("*** Mandelbrot demo of the 'future' package ... DONE")
*** Mandelbrot demo of the 'future' package ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.9s, sys.self=0.07s, elapsed=2s, user.child=0.5s, sys.child=0.4s
Test ‘demo-mandelbrot’ ... success
> 
