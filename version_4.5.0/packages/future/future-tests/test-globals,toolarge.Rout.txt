
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script incl/testme/test-globals,toolarge.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("globals,toolarge")
Test ‘globals,toolarge’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-globals,toolarge.R’

> library(future)
[10:53:27.862] Option 'future.startup.script': TRUE
[10:53:27.862] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[10:53:27.862] Future startup scripts found: <none>

> message("*** Globals - too large ...")
*** Globals - too large ...

> a <- integer(length = 1000)

> ooptsT <- options(future.globals.maxSize = object.size(a) - 
+     100)

> limit <- getOption("future.globals.maxSize")

> cat(sprintf("Max total size of globals: %g bytes\n", 
+     limit))
Max total size of globals: 3948 bytes

> plan(multisession, workers = 2)
[10:53:27.863] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:27.864] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:53:27.865] |  :  all.equal() for FutureStrategyList ...
[10:53:27.865] |  :  .  New stack:
[10:53:27.865] |  :  .  List of 1
[10:53:27.865] |  :  .   $ :function (..., workers = 2L, envir = parent.frame())  
[10:53:27.865] |  :  .    ..- attr(*, "class")= chr [1:6] "tweaked" "multisession" "cluster" "multiprocess" ...
[10:53:27.865] |  :  .    ..- attr(*, "init")= logi TRUE
[10:53:27.865] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:53:27.865] |  :  .    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:53:27.865] |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:53:27.865] |  :  .    ..- attr(*, "untweakable")= chr "persistent"
[10:53:27.865] |  :  .    ..- attr(*, "tweaks")=List of 1
[10:53:27.865] |  :  .    .. ..$ workers: int 2
[10:53:27.865] |  :  .    ..- attr(*, "call")= language plan(multisession, workers = 2L)
[10:53:27.865] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:27.870] |  :  .  Old stack:
[10:53:27.870] |  :  .  List of 1
[10:53:27.870] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:27.870] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:27.870] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:27.870] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:27.870] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:27.870] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:53:27.870] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:27.872] |  :  .  Not identical
[10:53:27.872] |  :  .  all.equal() for future ...
[10:53:27.872] |  :  .  |  List of 2
[10:53:27.872] |  :  .  |   $ target :function (..., workers = 2L, envir = parent.frame())  
[10:53:27.872] |  :  .  |    ..- attr(*, "class")= chr [1:6] "tweaked" "multisession" "cluster" "multiprocess" ...
[10:53:27.872] |  :  .  |    ..- attr(*, "init")= logi TRUE
[10:53:27.872] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:53:27.872] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:53:27.872] |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:53:27.872] |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:53:27.872] |  :  .  |    ..- attr(*, "tweaks")=List of 1
[10:53:27.872] |  :  .  |    .. ..$ workers: int 2
[10:53:27.872] |  :  .  |    ..- attr(*, "call")= language plan(multisession, workers = 2L)
[10:53:27.872] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:27.872] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:27.872] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:27.872] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:27.872] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:27.872] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:53:27.879] |  :  .  |  Formals differ
[10:53:27.879] |  :  .  all.equal() for future ... done
[10:53:27.879] |  :  .  Future strategies differ at level 1
[10:53:27.879] |  :  all.equal() for FutureStrategyList ... done
[10:53:27.879] |  :  plan(): Setting new future strategy stack:
[10:53:27.879] |  :  List of future strategies:
[10:53:27.879] |  :  1. multisession:
[10:53:27.879] |  :     - args: function (..., workers = 2L, envir = parent.frame())
[10:53:27.879] |  :     - tweaked: TRUE
[10:53:27.879] |  :     - call: plan(multisession, workers = 2L)
[10:53:27.880] |  :  List of 1
[10:53:27.880] |  :   $ :function (..., workers = 2L, envir = parent.frame())  
[10:53:27.880] |  :    ..- attr(*, "class")= chr [1:6] "tweaked" "multisession" "cluster" "multiprocess" ...
[10:53:27.880] |  :    ..- attr(*, "init")= logi TRUE
[10:53:27.880] |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:53:27.880] |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:53:27.880] |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:53:27.880] |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:53:27.880] |  :    ..- attr(*, "tweaks")=List of 1
[10:53:27.880] |  :    .. ..$ workers: int 2
[10:53:27.880] |  :    ..- attr(*, "call")= language plan(multisession, workers = 2L)
[10:53:27.880] |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:27.883] |  :  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:53:27.883] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:27.883] |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:27.883] |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:27.884] |  :  .  Legacy shutdown of cluster workers ...
[10:53:27.884] |  :  .  |  Stopping existing cluster ...
[10:53:27.884] |  :  .  |  :  No pre-existing cluster. Skipping
[10:53:27.884] |  :  .  |  Stopping existing cluster ... done
[10:53:27.884] |  :  .  Legacy shutdown of cluster workers ... done
[10:53:27.884] |  :  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:53:27.884] |  :  plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:53:27.884] |  :  .  function (..., workers = 2L, envir = parent.frame())  
[10:53:27.884] |  :  .   - attr(*, "class")= chr [1:6] "tweaked" "multisession" "cluster" "multiprocess" ...
[10:53:27.884] |  :  .   - attr(*, "init")= logi TRUE
[10:53:27.884] |  :  .   - attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:53:27.884] |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:53:27.884] |  :  .   - attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:53:27.884] |  :  .   - attr(*, "untweakable")= chr "persistent"
[10:53:27.884] |  :  .   - attr(*, "tweaks")=List of 1
[10:53:27.884] |  :  .    ..$ workers: int 2
[10:53:27.884] |  :  .   - attr(*, "call")= language plan(multisession, workers = 2L)
[10:53:27.887] |  :  .  init: TRUE
[10:53:27.887] |  :  .  makeFutureBackend(<tweaked>) ...
[10:53:27.887] |  :  .  |  Backend function: <‘NULL’>
[10:53:27.888] |  :  .  |  ClusterFutureBackend(..., persistent = FALSE, gc = TRUE, earlySignal = TRUE) ...
[10:53:27.888] |  :  .  |  :  workers: 2
[10:53:27.888] |  :  .  |  :  getCluster() ...
[10:53:27.888] |  :  .  |  :  getCluster() ... done
[10:53:27.888] |  :  .  |  :  Stopping existing cluster ...
[10:53:27.888] |  :  .  |  :  .  No pre-existing cluster. Skipping
[10:53:27.888] |  :  .  |  :  Stopping existing cluster ... done
[10:53:27.888] |  :  .  |  :  Starting new cluster ...
[10:53:27.888] |  :  .  |  :  .  makeCluster(workers, ...) ...
[10:53:27.889] |  :  .  |  :  .  |  Arguments:
[10:53:27.889] |  :  .  |  :  .  |  List of 1
[10:53:27.889] |  :  .  |  :  .  |   $ : int 2
[10:53:28.358] |  :  .  |  :  .  |  Generated cluster UUID
[10:53:28.358] |  :  .  |  :  .  |  Cluster UUID: ‘00d8a1d4457827890418832c9114ece0’
[10:53:28.359] |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:53:28.361] |  :  .  |  :  .  makeCluster(workers, ...) ... done
[10:53:28.361] |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:53:28.363] |  :  .  |  :  Starting new cluster ... done
[10:53:28.363] |  :  .  |  :  Number of workers: 2
[10:53:28.363] |  :  .  |  :  Workers UUID: ‘00d8a1d4457827890418832c9114ece0’
[10:53:28.363] |  :  .  |  ClusterFutureBackend(..., persistent = FALSE, gc = TRUE, earlySignal = TRUE) ... done
[10:53:28.363] |  :  .  |  Backend: <‘MultisessionFutureBackend’, ‘ClusterFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:53:28.363] |  :  .  makeFutureBackend(<tweaked>) ... done
[10:53:28.364] |  :  plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[10:53:28.364] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:28.364] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:53:28.364] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:28.364] |  :  plan(): nbrOfWorkers() = 2
[10:53:28.364] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:53:28.364] plan(<tweaked>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done

> print(plan("backend"))
[10:53:28.365] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:28.365] plan(<tweaked>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:28.365] FutureRegistry('workers-00d8a1d4457827890418832c9114ece0', action = 'list', earlySignal = 0) ...
[10:53:28.365] |  Created empty registry ‘workers-00d8a1d4457827890418832c9114ece0’
[10:53:28.365] |  Listing all futures
[10:53:28.366] |  Number of registered futures: 0
[10:53:28.366] FutureRegistry('workers-00d8a1d4457827890418832c9114ece0', action = 'list', earlySignal = 0) ... done
MultisessionFutureBackend:
Inherits: ClusterFutureBackend, MultiprocessFutureBackend, FutureBackend
Number of workers: 2
Number of free workers: 2
Available cores: 2
Automatic garbage collection: FALSE
Early signaling: TRUE
Interrupts are enabled: TRUE
Maximum total size of globals: 3.86 KiB
Maximum total size of value: 3.86 KiB
Argument ‘persistent’: FALSE
Argument ‘wait.timeout’: 86400
Argument ‘wait.interval’: 0.01
Argument ‘wait.alpha’: 1.01
Argument ‘hooks’: FALSE
Number of active futures: 0
Number of futures since start: 0
Workers of type RichSOCKcluster:
- Summary: Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
- [ OK ] Node 1/2: valid connection, alive [RichSOCKnode of a socket cluster on local host 'localhost' with pid 71545 (R version 4.5.0 (2025-04-11), x86_64-pc-linux-gnu) using socket connection #4 ('<-localhost:11251')]
- [ OK ] Node 2/2: valid connection, alive [RichSOCKnode of a socket cluster on local host 'localhost' with pid 71546 (R version 4.5.0 (2025-04-11), x86_64-pc-linux-gnu) using socket connection #5 ('<-localhost:11251')]

> exprs <- list(A = substitute({
+     a
+ }, env = list()), B = substitute({
+     a * b
+ }, env = list()), C = substitute({
+     a * b * c
+ }, en .... [TRUNCATED] 

> a <- integer(length = 1000)

> b <- integer(length = 900)

> c <- integer(length = 800)

> d <- integer(length = 700)

> e <- integer(length = 1)

> for (name in names(exprs)) {
+     message(sprintf("Expression %s:", name))
+     expr <- exprs[[name]]
+     print(expr)
+     res <- tryCatch({
+  .... [TRUNCATED] 
Expression A:
{
    a
}
[10:53:28.379] getGlobalsAndPackages() ...
[10:53:28.379] |  Searching for globals ...
[10:53:28.385] |  :  globals found: [2] ‘{’, ‘a’
[10:53:28.385] |  Searching for globals ... DONE
[10:53:28.385] |  Resolving globals: FALSE
[10:53:28.385] |  Search for packages associated with the globals ...
[10:53:28.386] |  :  Packages associated with globals: [1] ‘base’
[10:53:28.386] |  :  Packages: [1] ‘base’
[10:53:28.386] |  Search for packages associated with the globals ... DONE
[10:53:28.387] |  Packages after dropping 'base': [0] 
[10:53:28.387] |  globals: [1] ‘a’
[10:53:28.387] |  packages: [0] 
[10:53:28.387] getGlobalsAndPackages() ... done
[10:53:28.388] run() for Future (‘Future’) ...
[10:53:28.388] |  state: ‘created’
[10:53:28.388] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:28.388] |  plan(<tweaked>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:28.388] |  Using MultisessionFutureBackend ...
[10:53:28.390] |  run() for Future (‘Future’) ... done
<FutureError: Will not launch future due to the size of the globals 3.94 KiB exceeds 3.86 KiB. The total size of the 1 globals exported for future expression (‘{; a; }’) is 3.94 KiB. This exceeds the maximum allowed size 3.86 KiB per by R option "future.globals.maxSize". This limit is set to protect against transfering too large objects to parallel workers by mistake, which may not be intended and could be costly. See help("future.globals.maxSize", package = "future") for further explainations and how to adjust or remove this threshold There is one global: ‘a’ (3.94 KiB of class ‘numeric’)>


Future UUID: dbd8128574097f76e998b4b4134e8f4d-1


DEBUG: BEGIN TROUBLESHOOTING HELP
Future involved:
Future:
Label: NULL
Expression:
{
    a
}
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Globals: 1 objects totaling 3.94 KiB (integer ‘a’ of 3.94 KiB)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: dbd8128574097f76e998b4b4134e8f4d
Class: ‘Future’, ‘environment’

DEBUG: END TROUBLESHOOTING HELP
Expression B:
{
    a * b
}
[10:53:28.391] |  getGlobalsAndPackages() ...
[10:53:28.391] |  :  Searching for globals ...
[10:53:28.392] |  :  .  globals found: [4] ‘{’, ‘*’, ‘a’, ‘b’
[10:53:28.393] |  :  Searching for globals ... DONE
[10:53:28.393] |  :  Resolving globals: FALSE
[10:53:28.393] |  :  Search for packages associated with the globals ...
[10:53:28.393] |  :  .  Packages associated with globals: [1] ‘base’
[10:53:28.393] |  :  .  Packages: [1] ‘base’
[10:53:28.394] |  :  Search for packages associated with the globals ... DONE
[10:53:28.394] |  :  Packages after dropping 'base': [0] 
[10:53:28.394] |  :  globals: [2] ‘a’, ‘b’
[10:53:28.394] |  :  packages: [0] 
[10:53:28.394] |  getGlobalsAndPackages() ... done
[10:53:28.394] |  run() for Future (‘Future’) ...
[10:53:28.394] |  :  state: ‘created’
[10:53:28.395] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:28.395] |  :  plan(<tweaked>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:28.395] |  :  Using MultisessionFutureBackend ...
[10:53:28.395] |  :  run() for Future (‘Future’) ... done
<FutureError: Will not launch future due to the size of the globals 7.48 KiB exceeds 3.86 KiB. The total size of the 2 globals exported for future expression (‘{; a * b; }’) is 7.48 KiB. This exceeds the maximum allowed size 3.86 KiB per by R option "future.globals.maxSize". This limit is set to protect against transfering too large objects to parallel workers by mistake, which may not be intended and could be costly. See help("future.globals.maxSize", package = "future") for further explainations and how to adjust or remove this threshold There are two globals: ‘a’ (3.94 KiB of class ‘numeric’) and ‘b’ (3.55 KiB of class ‘numeric’)>


Future UUID: dbd8128574097f76e998b4b4134e8f4d-2


DEBUG: BEGIN TROUBLESHOOTING HELP
Future involved:
Future:
Label: NULL
Expression:
{
    a * b
}
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Globals: 2 objects totaling 7.48 KiB (integer ‘a’ of 3.94 KiB, integer ‘b’ of 3.55 KiB)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: dbd8128574097f76e998b4b4134e8f4d
Class: ‘Future’, ‘environment’

DEBUG: END TROUBLESHOOTING HELP
Expression C:
{
    a * b * c
}
[10:53:28.396] |  :  getGlobalsAndPackages() ...
[10:53:28.396] |  :  .  Searching for globals ...
[10:53:28.398] |  :  .  |  globals found: [5] ‘{’, ‘*’, ‘a’, ‘b’, ‘c’
[10:53:28.398] |  :  .  Searching for globals ... DONE
[10:53:28.398] |  :  .  Resolving globals: FALSE
[10:53:28.398] |  :  .  Search for packages associated with the globals ...
[10:53:28.399] |  :  .  |  Packages associated with globals: [1] ‘base’
[10:53:28.399] |  :  .  |  Packages: [1] ‘base’
[10:53:28.399] |  :  .  Search for packages associated with the globals ... DONE
[10:53:28.399] |  :  .  Packages after dropping 'base': [0] 
[10:53:28.399] |  :  .  globals: [3] ‘a’, ‘b’, ‘c’
[10:53:28.399] |  :  .  packages: [0] 
[10:53:28.400] |  :  getGlobalsAndPackages() ... done
[10:53:28.400] |  :  run() for Future (‘Future’) ...
[10:53:28.400] |  :  .  state: ‘created’
[10:53:28.400] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:28.400] |  :  .  plan(<tweaked>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:28.400] |  :  .  Using MultisessionFutureBackend ...
[10:53:28.401] |  :  .  run() for Future (‘Future’) ... done
<FutureError: Will not launch future due to the size of the globals 10.64 KiB exceeds 3.86 KiB. The total size of the 3 globals exported for future expression (‘{; a * b * c; }’) is 10.64 KiB. This exceeds the maximum allowed size 3.86 KiB per by R option "future.globals.maxSize". This limit is set to protect against transfering too large objects to parallel workers by mistake, which may not be intended and could be costly. See help("future.globals.maxSize", package = "future") for further explainations and how to adjust or remove this threshold There are three globals: ‘a’ (3.94 KiB of class ‘numeric’), ‘b’ (3.55 KiB of class ‘numeric’) and ‘c’ (3.16 KiB of class ‘numeric’)>


Future UUID: dbd8128574097f76e998b4b4134e8f4d-3


DEBUG: BEGIN TROUBLESHOOTING HELP
Future involved:
Future:
Label: NULL
Expression:
{
    a * b * c
}
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Globals: 3 objects totaling 10.64 KiB (integer ‘a’ of 3.94 KiB, integer ‘b’ of 3.55 KiB, integer ‘c’ of 3.16 KiB)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: dbd8128574097f76e998b4b4134e8f4d
Class: ‘Future’, ‘environment’

DEBUG: END TROUBLESHOOTING HELP
Expression D:
{
    a * b * c * d
}
[10:53:28.402] |  :  .  getGlobalsAndPackages() ...
[10:53:28.402] |  :  .  |  Searching for globals ...
[10:53:28.404] |  :  .  |  :  globals found: [6] ‘{’, ‘*’, ‘a’, ‘b’, ‘c’, ‘d’
[10:53:28.404] |  :  .  |  Searching for globals ... DONE
[10:53:28.404] |  :  .  |  Resolving globals: FALSE
[10:53:28.404] |  :  .  |  Search for packages associated with the globals ...
[10:53:28.404] |  :  .  |  :  Packages associated with globals: [1] ‘base’
[10:53:28.405] |  :  .  |  :  Packages: [1] ‘base’
[10:53:28.405] |  :  .  |  Search for packages associated with the globals ... DONE
[10:53:28.405] |  :  .  |  Packages after dropping 'base': [0] 
[10:53:28.405] |  :  .  |  globals: [4] ‘a’, ‘b’, ‘c’, ‘d’
[10:53:28.405] |  :  .  |  packages: [0] 
[10:53:28.405] |  :  .  getGlobalsAndPackages() ... done
[10:53:28.406] |  :  .  run() for Future (‘Future’) ...
[10:53:28.406] |  :  .  |  state: ‘created’
[10:53:28.406] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:28.406] |  :  .  |  plan(<tweaked>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:28.406] |  :  .  |  Using MultisessionFutureBackend ...
[10:53:28.407] |  :  .  |  run() for Future (‘Future’) ... done
<FutureError: Will not launch future due to the size of the globals 13.40 KiB exceeds 3.86 KiB. The total size of the 4 globals exported for future expression (‘{; a * b * c * d; }’) is 13.40 KiB. This exceeds the maximum allowed size 3.86 KiB per by R option "future.globals.maxSize". This limit is set to protect against transfering too large objects to parallel workers by mistake, which may not be intended and could be costly. See help("future.globals.maxSize", package = "future") for further explainations and how to adjust or remove this threshold The three largest globals are ‘a’ (3.94 KiB of class ‘numeric’), ‘b’ (3.55 KiB of class ‘numeric’) and ‘c’ (3.16 KiB of class ‘numeric’)>


Future UUID: dbd8128574097f76e998b4b4134e8f4d-4


DEBUG: BEGIN TROUBLESHOOTING HELP
Future involved:
Future:
Label: NULL
Expression:
{
    a * b * c * d
}
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Globals: 4 objects totaling 13.40 KiB (integer ‘a’ of 3.94 KiB, integer ‘b’ of 3.55 KiB, integer ‘c’ of 3.16 KiB, integer ‘d’ of 2.76 KiB)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: dbd8128574097f76e998b4b4134e8f4d
Class: ‘Future’, ‘environment’

DEBUG: END TROUBLESHOOTING HELP
Expression E:
{
    a * b * c * d * e
}
[10:53:28.408] |  :  .  |  getGlobalsAndPackages() ...
[10:53:28.408] |  :  .  |  :  Searching for globals ...
[10:53:28.410] |  :  .  |  :  .  globals found: [7] ‘{’, ‘*’, ‘a’, ‘b’, ‘c’, ‘d’, ‘e’
[10:53:28.410] |  :  .  |  :  Searching for globals ... DONE
[10:53:28.410] |  :  .  |  :  Resolving globals: FALSE
[10:53:28.410] |  :  .  |  :  Search for packages associated with the globals ...
[10:53:28.410] |  :  .  |  :  .  Packages associated with globals: [1] ‘base’
[10:53:28.411] |  :  .  |  :  .  Packages: [1] ‘base’
[10:53:28.411] |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:53:28.411] |  :  .  |  :  Packages after dropping 'base': [0] 
[10:53:28.411] |  :  .  |  :  globals: [5] ‘a’, ‘b’, ‘c’, ‘d’, ‘e’
[10:53:28.411] |  :  .  |  :  packages: [0] 
[10:53:28.411] |  :  .  |  getGlobalsAndPackages() ... done
[10:53:28.412] |  :  .  |  run() for Future (‘Future’) ...
[10:53:28.412] |  :  .  |  :  state: ‘created’
[10:53:28.412] |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:28.412] |  :  .  |  :  plan(<tweaked>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:28.412] |  :  .  |  :  Using MultisessionFutureBackend ...
[10:53:28.413] |  :  .  |  :  run() for Future (‘Future’) ... done
<FutureError: Will not launch future due to the size of the globals 13.44 KiB exceeds 3.86 KiB. The total size of the 5 globals exported for future expression (‘{; a * b * c * d * e; }’) is 13.44 KiB. This exceeds the maximum allowed size 3.86 KiB per by R option "future.globals.maxSize". This limit is set to protect against transfering too large objects to parallel workers by mistake, which may not be intended and could be costly. See help("future.globals.maxSize", package = "future") for further explainations and how to adjust or remove this threshold The three largest globals are ‘a’ (3.94 KiB of class ‘numeric’), ‘b’ (3.55 KiB of class ‘numeric’) and ‘c’ (3.16 KiB of class ‘numeric’)>


Future UUID: dbd8128574097f76e998b4b4134e8f4d-5


DEBUG: BEGIN TROUBLESHOOTING HELP
Future involved:
Future:
Label: NULL
Expression:
{
    a * b * c * d * e
}
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Globals: 5 objects totaling 13.44 KiB (integer ‘a’ of 3.94 KiB, integer ‘b’ of 3.55 KiB, integer ‘c’ of 3.16 KiB, integer ‘d’ of 2.76 KiB, integer ‘e’ of 35 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: dbd8128574097f76e998b4b4134e8f4d
Class: ‘Future’, ‘environment’

DEBUG: END TROUBLESHOOTING HELP

> message("*** Globals - too large ... DONE")
*** Globals - too large ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.2s, sys.self=0.01s, elapsed=0.6s, user.child=0.2s, sys.child=0.3s
Test ‘globals,toolarge’ ... success
> 
