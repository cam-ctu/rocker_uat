
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script incl/testme/test-futureAssign_OP_with_listenv.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("futureAssign_OP_with_listenv")
Test ‘futureAssign_OP_with_listenv’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-futureAssign_OP_with_listenv.R’

> library(future)
[10:52:42.114] Option 'future.startup.script': TRUE
[10:52:42.114] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[10:52:42.114] Future startup scripts found: <none>

> library(listenv)

> message("*** %<-% to listenv ...")
*** %<-% to listenv ...

> z <- listenv()

> stopifnot(length(names(z)) == 0)

> message("*** %<-% to listenv: Assign by index")
*** %<-% to listenv: Assign by index

> z[[1]] %<-% {
+     2
+ } %lazy% TRUE
[10:52:42.120] getGlobalsAndPackages() ...
[10:52:42.120] |  Searching for globals ...
[10:52:42.126] |  :  globals found: [1] ‘{’
[10:52:42.126] |  Searching for globals ... DONE
[10:52:42.127] |  Resolving globals: FALSE
[10:52:42.127] |  Search for packages associated with the globals ...
[10:52:42.127] |  :  Packages associated with globals: [1] ‘base’
[10:52:42.127] |  :  Packages: [1] ‘base’
[10:52:42.127] |  Search for packages associated with the globals ... DONE
[10:52:42.127] |  Packages after dropping 'base': [0] 
[10:52:42.128] |  globals: [0] 
[10:52:42.128] |  packages: [0] 
[10:52:42.128] getGlobalsAndPackages() ... done

> stopifnot(length(z) == 1)

> stopifnot(length(names(z)) == 0)

> z[[1]] %<-% {
+     2
+ } %lazy% TRUE
[10:52:42.130] getGlobalsAndPackages() ...
[10:52:42.131] |  Searching for globals ...
[10:52:42.131] |  :  globals found: [1] ‘{’
[10:52:42.131] |  Searching for globals ... DONE
[10:52:42.131] |  Resolving globals: FALSE
[10:52:42.132] |  Search for packages associated with the globals ...
[10:52:42.132] |  :  Packages associated with globals: [1] ‘base’
[10:52:42.132] |  :  Packages: [1] ‘base’
[10:52:42.132] |  Search for packages associated with the globals ... DONE
[10:52:42.132] |  Packages after dropping 'base': [0] 
[10:52:42.132] |  globals: [0] 
[10:52:42.132] |  packages: [0] 
[10:52:42.132] getGlobalsAndPackages() ... done

> stopifnot(length(z) == 1)

> stopifnot(length(names(z)) == 0)

> z[[4]] %<-% {
+     "async!"
+ } %lazy% TRUE
[10:52:42.133] getGlobalsAndPackages() ...
[10:52:42.133] |  Searching for globals ...
[10:52:42.134] |  :  globals found: [1] ‘{’
[10:52:42.134] |  Searching for globals ... DONE
[10:52:42.134] |  Resolving globals: FALSE
[10:52:42.134] |  Search for packages associated with the globals ...
[10:52:42.134] |  :  Packages associated with globals: [1] ‘base’
[10:52:42.134] |  :  Packages: [1] ‘base’
[10:52:42.135] |  Search for packages associated with the globals ... DONE
[10:52:42.135] |  Packages after dropping 'base': [0] 
[10:52:42.135] |  globals: [0] 
[10:52:42.135] |  packages: [0] 
[10:52:42.135] getGlobalsAndPackages() ... done

> stopifnot(length(z) == 4)

> stopifnot(length(names(z)) == 0)

> message("*** %<-% to listenv: Update names")
*** %<-% to listenv: Update names

> names(z) <- c("A", "B", "C", "D")

> stopifnot(identical(names(z), c("A", "B", "C", "D")))

> message("*** %<-% to listenv: Assign by name (existing)")
*** %<-% to listenv: Assign by name (existing)

> z$B %<-% {
+     TRUE
+ } %lazy% TRUE
[10:52:42.136] getGlobalsAndPackages() ...
[10:52:42.136] |  Searching for globals ...
[10:52:42.137] |  :  globals found: [1] ‘{’
[10:52:42.137] |  Searching for globals ... DONE
[10:52:42.137] |  Resolving globals: FALSE
[10:52:42.137] |  Search for packages associated with the globals ...
[10:52:42.137] |  :  Packages associated with globals: [1] ‘base’
[10:52:42.137] |  :  Packages: [1] ‘base’
[10:52:42.137] |  Search for packages associated with the globals ... DONE
[10:52:42.138] |  Packages after dropping 'base': [0] 
[10:52:42.138] |  globals: [0] 
[10:52:42.138] |  packages: [0] 
[10:52:42.138] getGlobalsAndPackages() ... done

> stopifnot(length(z) == 4)

> stopifnot(identical(names(z), c("A", "B", "C", "D")))

> y <- as.list(z)
[10:52:42.139] run() for Future (‘Future’) ...
[10:52:42.139] |  state: ‘created’
[10:52:42.139] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:42.139] |  :  makeFutureBackend(<sequential>) ...
[10:52:42.139] |  :  .  Backend function: <‘NULL’>
[10:52:42.140] |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:42.140] |  :  makeFutureBackend(<sequential>) ... done
[10:52:42.140] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:42.140] |  Using SequentialFutureBackend ...
[10:52:42.140] |  :  Launching futures ...
[10:52:42.140] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:42.140] |  :  .  |  getFutureData() ...
[10:52:42.141] |  :  .  |  :  getFutureCore() ...
[10:52:42.141] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:42.141] |  :  .  |  :  getFutureCore() ... done
[10:52:42.141] |  :  .  |  :  getFutureCapture() ...
[10:52:42.141] |  :  .  |  :  getFutureCapture() ... done
[10:52:42.141] |  :  .  |  :  getFutureContext() ...
[10:52:42.141] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:42.141] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:42.142] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:42.142] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:42.142] |  :  .  |  :  getFutureContext() ... done
[10:52:42.142] |  :  .  |  getFutureData() ... done
[10:52:42.143] |  :  .  |  attachPackages() ...
[10:52:42.143] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:42.143] |  :  .  |  attachPackages() ... DONE
[10:52:42.143] |  :  .  |  attachPackages() ...
[10:52:42.143] |  :  .  |  :  packages: [n=0] 
[10:52:42.144] |  :  .  |  attachPackages() ... DONE
[10:52:42.144] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:42.144] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:42.144] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:42.145] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:42.145] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:42.145] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:42.145] |  :  .  |  :  .  |  New stack:
[10:52:42.145] |  :  .  |  :  .  |  List of 1
[10:52:42.145] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.145] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.145] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.145] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.145] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.145] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:42.145] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.149] |  :  .  |  :  .  |  Old stack:
[10:52:42.149] |  :  .  |  :  .  |  List of 1
[10:52:42.149] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.149] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.149] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.149] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.149] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.149] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:42.149] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.149] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.149] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.149] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.152] |  :  .  |  :  .  |  Not identical
[10:52:42.152] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:42.153] |  :  .  |  :  .  |  :  List of 2
[10:52:42.153] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.153] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.153] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.153] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.153] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.153] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:42.153] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.153] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.153] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.153] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.153] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.153] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:42.153] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.153] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.153] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.159] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:42.159] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:42.159] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:42.159] |  :  .  |  :  .  List of future strategies:
[10:52:42.159] |  :  .  |  :  .  1. sequential:
[10:52:42.159] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:42.159] |  :  .  |  :  .     - tweaked: FALSE
[10:52:42.159] |  :  .  |  :  .     - call: plan(sequential)
[10:52:42.160] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:42.160] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:42.162] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:42.162] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:42.162] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:42.162] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:42.162] |  :  .  |  :  .  |  :  New stack:
[10:52:42.162] |  :  .  |  :  .  |  :  List of 1
[10:52:42.162] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.162] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.162] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.162] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.162] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.162] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:42.162] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.162] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.162] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.162] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.165] |  :  .  |  :  .  |  :  Old stack:
[10:52:42.165] |  :  .  |  :  .  |  :  List of 1
[10:52:42.165] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.165] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.165] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.165] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.165] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.165] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:42.165] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.165] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.165] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.165] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.168] |  :  .  |  :  .  |  :  Identical
[10:52:42.168] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:42.169] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:42.169] |  :  .  |  :  .  |  List of future strategies:
[10:52:42.169] |  :  .  |  :  .  |  1. sequential:
[10:52:42.169] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:42.169] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:42.169] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:42.169] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:42.169] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:42.169] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:42.169] |  :  .  |  SequentialFuture started (and completed)
[10:52:42.170] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:42.170] |  :  Launching futures ... done
[10:52:42.170] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:42.170] |  Using SequentialFutureBackend ... done
[10:52:42.170] run() for Future (‘SequentialFuture’) ... done
[10:52:42.171] run() for Future (‘Future’) ...
[10:52:42.171] |  state: ‘created’
[10:52:42.171] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:42.171] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:42.171] |  Using SequentialFutureBackend ...
[10:52:42.171] |  :  Launching futures ...
[10:52:42.171] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:42.171] |  :  .  |  getFutureData() ...
[10:52:42.171] |  :  .  |  :  getFutureCore() ...
[10:52:42.171] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:42.172] |  :  .  |  :  getFutureCore() ... done
[10:52:42.172] |  :  .  |  :  getFutureCapture() ...
[10:52:42.172] |  :  .  |  :  getFutureCapture() ... done
[10:52:42.172] |  :  .  |  :  getFutureContext() ...
[10:52:42.172] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:42.172] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:42.172] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:42.172] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:42.172] |  :  .  |  :  getFutureContext() ... done
[10:52:42.172] |  :  .  |  getFutureData() ... done
[10:52:42.173] |  :  .  |  attachPackages() ...
[10:52:42.173] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:42.173] |  :  .  |  attachPackages() ... DONE
[10:52:42.173] |  :  .  |  attachPackages() ...
[10:52:42.173] |  :  .  |  :  packages: [n=0] 
[10:52:42.173] |  :  .  |  attachPackages() ... DONE
[10:52:42.173] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:42.173] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:42.174] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:42.174] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:42.174] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:42.174] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:42.174] |  :  .  |  :  .  |  New stack:
[10:52:42.174] |  :  .  |  :  .  |  List of 1
[10:52:42.174] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.174] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.174] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.174] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.174] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.174] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:42.174] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.176] |  :  .  |  :  .  |  Old stack:
[10:52:42.177] |  :  .  |  :  .  |  List of 1
[10:52:42.177] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.177] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.177] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.177] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.177] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.177] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:42.177] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.177] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.177] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.177] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.179] |  :  .  |  :  .  |  Not identical
[10:52:42.180] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:42.180] |  :  .  |  :  .  |  :  List of 2
[10:52:42.180] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.180] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.180] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.180] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.180] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.180] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:42.180] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.180] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.180] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.180] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.180] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.180] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:42.180] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.180] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.180] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.185] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:42.185] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:42.185] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:42.185] |  :  .  |  :  .  List of future strategies:
[10:52:42.185] |  :  .  |  :  .  1. sequential:
[10:52:42.185] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:42.185] |  :  .  |  :  .     - tweaked: FALSE
[10:52:42.185] |  :  .  |  :  .     - call: plan(sequential)
[10:52:42.186] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:42.186] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:42.187] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:42.187] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:42.188] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:42.188] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:42.188] |  :  .  |  :  .  |  :  New stack:
[10:52:42.188] |  :  .  |  :  .  |  :  List of 1
[10:52:42.188] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.188] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.188] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.188] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.188] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.188] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:42.188] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.188] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.188] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.188] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.191] |  :  .  |  :  .  |  :  Old stack:
[10:52:42.191] |  :  .  |  :  .  |  :  List of 1
[10:52:42.191] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.191] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.191] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.191] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.191] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.191] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:42.191] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.191] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.191] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.191] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.194] |  :  .  |  :  .  |  :  Identical
[10:52:42.194] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:42.194] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:42.194] |  :  .  |  :  .  |  List of future strategies:
[10:52:42.194] |  :  .  |  :  .  |  1. sequential:
[10:52:42.194] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:42.194] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:42.194] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:42.194] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:42.194] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:42.194] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:42.195] |  :  .  |  SequentialFuture started (and completed)
[10:52:42.195] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:42.195] |  :  Launching futures ... done
[10:52:42.195] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:42.195] |  Using SequentialFutureBackend ... done
[10:52:42.195] run() for Future (‘SequentialFuture’) ... done

> str(y)
List of 4
 $ A: num 2
 $ B: NULL
 $ C: NULL
 $ D: chr "async!"

> stopifnot(length(y) == 4)

> stopifnot(identical(names(y), c("A", "B", "C", "D")))

> message("*** %<-% to listenv: Asserting no name clashes among futures")
*** %<-% to listenv: Asserting no name clashes among futures

> u <- listenv()

> u$a %<-% {
+     1
+ } %lazy% TRUE
[10:52:42.197] getGlobalsAndPackages() ...
[10:52:42.197] |  Searching for globals ...
[10:52:42.198] |  :  globals found: [1] ‘{’
[10:52:42.198] |  Searching for globals ... DONE
[10:52:42.198] |  Resolving globals: FALSE
[10:52:42.198] |  Search for packages associated with the globals ...
[10:52:42.198] |  :  Packages associated with globals: [1] ‘base’
[10:52:42.199] |  :  Packages: [1] ‘base’
[10:52:42.199] |  Search for packages associated with the globals ... DONE
[10:52:42.199] |  Packages after dropping 'base': [0] 
[10:52:42.199] |  globals: [0] 
[10:52:42.199] |  packages: [0] 
[10:52:42.199] getGlobalsAndPackages() ... done

> stopifnot(identical(names(u), "a"))

> fu <- futureOf(u$a)

> v <- listenv()

> v$a %<-% {
+     2
+ } %lazy% TRUE
[10:52:42.200] getGlobalsAndPackages() ...
[10:52:42.200] |  Searching for globals ...
[10:52:42.201] |  :  globals found: [1] ‘{’
[10:52:42.201] |  Searching for globals ... DONE
[10:52:42.201] |  Resolving globals: FALSE
[10:52:42.201] |  Search for packages associated with the globals ...
[10:52:42.202] |  :  Packages associated with globals: [1] ‘base’
[10:52:42.202] |  :  Packages: [1] ‘base’
[10:52:42.202] |  Search for packages associated with the globals ... DONE
[10:52:42.202] |  Packages after dropping 'base': [0] 
[10:52:42.202] |  globals: [0] 
[10:52:42.203] |  packages: [0] 
[10:52:42.203] getGlobalsAndPackages() ... done

> stopifnot(identical(names(v), "a"))

> fv <- futureOf(v$a)

> stopifnot(!identical(fu, fv))

> fu <- futureOf(u$a)

> stopifnot(!identical(fu, fv))

> stopifnot(identical(u$a, 1))
[10:52:42.204] run() for Future (‘Future’) ...
[10:52:42.204] |  state: ‘created’
[10:52:42.204] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:42.204] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:42.204] |  Using SequentialFutureBackend ...
[10:52:42.204] |  :  Launching futures ...
[10:52:42.204] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:42.204] |  :  .  |  getFutureData() ...
[10:52:42.204] |  :  .  |  :  getFutureCore() ...
[10:52:42.205] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:42.205] |  :  .  |  :  getFutureCore() ... done
[10:52:42.205] |  :  .  |  :  getFutureCapture() ...
[10:52:42.205] |  :  .  |  :  getFutureCapture() ... done
[10:52:42.205] |  :  .  |  :  getFutureContext() ...
[10:52:42.205] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:42.205] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:42.205] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:42.205] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:42.205] |  :  .  |  :  getFutureContext() ... done
[10:52:42.205] |  :  .  |  getFutureData() ... done
[10:52:42.206] |  :  .  |  attachPackages() ...
[10:52:42.206] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:42.206] |  :  .  |  attachPackages() ... DONE
[10:52:42.206] |  :  .  |  attachPackages() ...
[10:52:42.206] |  :  .  |  :  packages: [n=0] 
[10:52:42.206] |  :  .  |  attachPackages() ... DONE
[10:52:42.206] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:42.207] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:42.207] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:42.207] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:42.207] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:42.207] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:42.207] |  :  .  |  :  .  |  New stack:
[10:52:42.207] |  :  .  |  :  .  |  List of 1
[10:52:42.207] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.207] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.207] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.207] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.207] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.207] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:42.207] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.209] |  :  .  |  :  .  |  Old stack:
[10:52:42.210] |  :  .  |  :  .  |  List of 1
[10:52:42.210] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.210] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.210] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.210] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.210] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.210] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:42.210] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.210] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.210] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.210] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.212] |  :  .  |  :  .  |  Not identical
[10:52:42.212] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:42.212] |  :  .  |  :  .  |  :  List of 2
[10:52:42.212] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.212] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.212] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.212] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.212] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.212] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:42.212] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.212] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.212] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.212] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.212] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.212] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:42.212] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.212] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.212] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.217] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:42.217] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:42.217] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:42.217] |  :  .  |  :  .  List of future strategies:
[10:52:42.217] |  :  .  |  :  .  1. sequential:
[10:52:42.217] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:42.217] |  :  .  |  :  .     - tweaked: FALSE
[10:52:42.217] |  :  .  |  :  .     - call: plan(sequential)
[10:52:42.217] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:42.218] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:42.219] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:42.219] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:42.219] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:42.219] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:42.219] |  :  .  |  :  .  |  :  New stack:
[10:52:42.219] |  :  .  |  :  .  |  :  List of 1
[10:52:42.219] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.219] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.219] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.219] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.219] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.219] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:42.219] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.219] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.219] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.219] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.223] |  :  .  |  :  .  |  :  Old stack:
[10:52:42.223] |  :  .  |  :  .  |  :  List of 1
[10:52:42.223] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.223] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.223] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.223] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.223] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.223] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:42.223] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.223] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.223] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.223] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.226] |  :  .  |  :  .  |  :  Identical
[10:52:42.226] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:42.226] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:42.226] |  :  .  |  :  .  |  List of future strategies:
[10:52:42.226] |  :  .  |  :  .  |  1. sequential:
[10:52:42.226] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:42.226] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:42.226] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:42.227] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:42.227] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:42.227] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:42.227] |  :  .  |  SequentialFuture started (and completed)
[10:52:42.227] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:42.227] |  :  Launching futures ... done
[10:52:42.227] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:42.227] |  Using SequentialFutureBackend ... done
[10:52:42.227] run() for Future (‘SequentialFuture’) ... done

> stopifnot(identical(v$a, 2))
[10:52:42.228] run() for Future (‘Future’) ...
[10:52:42.228] |  state: ‘created’
[10:52:42.228] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:42.228] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:42.228] |  Using SequentialFutureBackend ...
[10:52:42.228] |  :  Launching futures ...
[10:52:42.228] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:42.228] |  :  .  |  getFutureData() ...
[10:52:42.229] |  :  .  |  :  getFutureCore() ...
[10:52:42.229] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:42.229] |  :  .  |  :  getFutureCore() ... done
[10:52:42.229] |  :  .  |  :  getFutureCapture() ...
[10:52:42.229] |  :  .  |  :  getFutureCapture() ... done
[10:52:42.229] |  :  .  |  :  getFutureContext() ...
[10:52:42.229] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:42.229] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:42.229] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:42.229] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:42.229] |  :  .  |  :  getFutureContext() ... done
[10:52:42.230] |  :  .  |  getFutureData() ... done
[10:52:42.230] |  :  .  |  attachPackages() ...
[10:52:42.230] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:42.230] |  :  .  |  attachPackages() ... DONE
[10:52:42.230] |  :  .  |  attachPackages() ...
[10:52:42.230] |  :  .  |  :  packages: [n=0] 
[10:52:42.230] |  :  .  |  attachPackages() ... DONE
[10:52:42.231] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:42.231] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:42.231] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:42.231] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:42.231] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:42.231] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:42.231] |  :  .  |  :  .  |  New stack:
[10:52:42.231] |  :  .  |  :  .  |  List of 1
[10:52:42.231] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.231] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.231] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.231] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.231] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.231] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:42.231] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.234] |  :  .  |  :  .  |  Old stack:
[10:52:42.234] |  :  .  |  :  .  |  List of 1
[10:52:42.234] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.234] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.234] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.234] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.234] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.234] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:42.234] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.234] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.234] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.234] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.236] |  :  .  |  :  .  |  Not identical
[10:52:42.236] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:42.237] |  :  .  |  :  .  |  :  List of 2
[10:52:42.237] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.237] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.237] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.237] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.237] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.237] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:42.237] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.237] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.237] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.237] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.237] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.237] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:42.237] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.237] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.237] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.241] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:42.241] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:42.241] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:42.241] |  :  .  |  :  .  List of future strategies:
[10:52:42.241] |  :  .  |  :  .  1. sequential:
[10:52:42.241] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:42.241] |  :  .  |  :  .     - tweaked: FALSE
[10:52:42.241] |  :  .  |  :  .     - call: plan(sequential)
[10:52:42.242] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:42.242] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:42.244] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:42.244] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:42.244] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:42.244] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:42.244] |  :  .  |  :  .  |  :  New stack:
[10:52:42.244] |  :  .  |  :  .  |  :  List of 1
[10:52:42.244] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.244] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.244] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.244] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.244] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.244] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:42.244] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.244] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.244] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.244] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.247] |  :  .  |  :  .  |  :  Old stack:
[10:52:42.247] |  :  .  |  :  .  |  :  List of 1
[10:52:42.247] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.247] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.247] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.247] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.247] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.247] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:42.247] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.247] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.247] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.247] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.250] |  :  .  |  :  .  |  :  Identical
[10:52:42.250] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:42.250] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:42.250] |  :  .  |  :  .  |  List of future strategies:
[10:52:42.250] |  :  .  |  :  .  |  1. sequential:
[10:52:42.250] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:42.250] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:42.250] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:42.251] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:42.251] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:42.251] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:42.251] |  :  .  |  SequentialFuture started (and completed)
[10:52:42.251] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:42.251] |  :  Launching futures ... done
[10:52:42.251] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:42.252] |  Using SequentialFutureBackend ... done
[10:52:42.252] run() for Future (‘SequentialFuture’) ... done

> message("*** %<-% to listenv: multiple dimensions ...")
*** %<-% to listenv: multiple dimensions ...

> x0 <- list()

> length(x0) <- 6

> dim(x0) <- c(3, 2)

> x <- listenv()

> length(x) <- 6

> dim(x) <- c(3, 2)

> for (cc in 1:ncol(x)) {
+     for (rr in 1:nrow(x)) {
+         x0[[rr, cc]] <- sprintf("(%s, %s)", rr, cc)
+         x[[rr, cc]] %<-% sprintf("(%s, ..." ... [TRUNCATED] 
[10:52:42.257] getGlobalsAndPackages() ...
[10:52:42.257] |  Searching for globals ...
[10:52:42.258] |  :  globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[10:52:42.258] |  Searching for globals ... DONE
[10:52:42.258] |  Resolving globals: FALSE
[10:52:42.258] |  Search for packages associated with the globals ...
[10:52:42.258] |  :  Packages associated with globals: [1] ‘base’
[10:52:42.259] |  :  Packages: [1] ‘base’
[10:52:42.259] |  Search for packages associated with the globals ... DONE
[10:52:42.259] |  Packages after dropping 'base': [0] 
[10:52:42.259] |  globals: [2] ‘rr’, ‘cc’
[10:52:42.259] |  packages: [0] 
[10:52:42.259] getGlobalsAndPackages() ... done
[10:52:42.260] getGlobalsAndPackages() ...
[10:52:42.260] |  Searching for globals ...
[10:52:42.260] |  :  globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[10:52:42.260] |  Searching for globals ... DONE
[10:52:42.261] |  Resolving globals: FALSE
[10:52:42.261] |  Search for packages associated with the globals ...
[10:52:42.261] |  :  Packages associated with globals: [1] ‘base’
[10:52:42.261] |  :  Packages: [1] ‘base’
[10:52:42.262] |  Search for packages associated with the globals ... DONE
[10:52:42.262] |  Packages after dropping 'base': [0] 
[10:52:42.262] |  globals: [2] ‘rr’, ‘cc’
[10:52:42.262] |  packages: [0] 
[10:52:42.262] getGlobalsAndPackages() ... done
[10:52:42.263] getGlobalsAndPackages() ...
[10:52:42.263] |  Searching for globals ...
[10:52:42.264] |  :  globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[10:52:42.264] |  Searching for globals ... DONE
[10:52:42.264] |  Resolving globals: FALSE
[10:52:42.264] |  Search for packages associated with the globals ...
[10:52:42.264] |  :  Packages associated with globals: [1] ‘base’
[10:52:42.264] |  :  Packages: [1] ‘base’
[10:52:42.264] |  Search for packages associated with the globals ... DONE
[10:52:42.264] |  Packages after dropping 'base': [0] 
[10:52:42.265] |  globals: [2] ‘rr’, ‘cc’
[10:52:42.265] |  packages: [0] 
[10:52:42.265] getGlobalsAndPackages() ... done
[10:52:42.265] getGlobalsAndPackages() ...
[10:52:42.265] |  Searching for globals ...
[10:52:42.266] |  :  globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[10:52:42.266] |  Searching for globals ... DONE
[10:52:42.266] |  Resolving globals: FALSE
[10:52:42.266] |  Search for packages associated with the globals ...
[10:52:42.266] |  :  Packages associated with globals: [1] ‘base’
[10:52:42.267] |  :  Packages: [1] ‘base’
[10:52:42.267] |  Search for packages associated with the globals ... DONE
[10:52:42.267] |  Packages after dropping 'base': [0] 
[10:52:42.267] |  globals: [2] ‘rr’, ‘cc’
[10:52:42.267] |  packages: [0] 
[10:52:42.267] getGlobalsAndPackages() ... done
[10:52:42.268] getGlobalsAndPackages() ...
[10:52:42.268] |  Searching for globals ...
[10:52:42.268] |  :  globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[10:52:42.268] |  Searching for globals ... DONE
[10:52:42.268] |  Resolving globals: FALSE
[10:52:42.269] |  Search for packages associated with the globals ...
[10:52:42.269] |  :  Packages associated with globals: [1] ‘base’
[10:52:42.269] |  :  Packages: [1] ‘base’
[10:52:42.269] |  Search for packages associated with the globals ... DONE
[10:52:42.269] |  Packages after dropping 'base': [0] 
[10:52:42.269] |  globals: [2] ‘rr’, ‘cc’
[10:52:42.269] |  packages: [0] 
[10:52:42.269] getGlobalsAndPackages() ... done
[10:52:42.270] getGlobalsAndPackages() ...
[10:52:42.270] |  Searching for globals ...
[10:52:42.271] |  :  globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[10:52:42.271] |  Searching for globals ... DONE
[10:52:42.271] |  Resolving globals: FALSE
[10:52:42.271] |  Search for packages associated with the globals ...
[10:52:42.271] |  :  Packages associated with globals: [1] ‘base’
[10:52:42.271] |  :  Packages: [1] ‘base’
[10:52:42.271] |  Search for packages associated with the globals ... DONE
[10:52:42.272] |  Packages after dropping 'base': [0] 
[10:52:42.272] |  globals: [2] ‘rr’, ‘cc’
[10:52:42.272] |  packages: [0] 
[10:52:42.272] getGlobalsAndPackages() ... done

> y <- as.list(x)
[10:52:42.272] run() for Future (‘Future’) ...
[10:52:42.272] |  state: ‘created’
[10:52:42.272] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:42.272] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:42.273] |  Using SequentialFutureBackend ...
[10:52:42.273] |  :  Launching futures ...
[10:52:42.273] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:42.273] |  :  .  |  getFutureData() ...
[10:52:42.273] |  :  .  |  :  getFutureCore() ...
[10:52:42.273] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:42.273] |  :  .  |  :  getFutureCore() ... done
[10:52:42.273] |  :  .  |  :  getFutureCapture() ...
[10:52:42.273] |  :  .  |  :  getFutureCapture() ... done
[10:52:42.273] |  :  .  |  :  getFutureContext() ...
[10:52:42.273] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:42.274] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:42.274] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:42.274] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:42.274] |  :  .  |  :  getFutureContext() ... done
[10:52:42.274] |  :  .  |  getFutureData() ... done
[10:52:42.274] |  :  .  |  attachPackages() ...
[10:52:42.274] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:42.274] |  :  .  |  attachPackages() ... DONE
[10:52:42.274] |  :  .  |  attachPackages() ...
[10:52:42.274] |  :  .  |  :  packages: [n=0] 
[10:52:42.275] |  :  .  |  attachPackages() ... DONE
[10:52:42.275] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:42.275] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:42.275] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:42.275] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:42.276] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:42.276] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:42.276] |  :  .  |  :  .  |  New stack:
[10:52:42.276] |  :  .  |  :  .  |  List of 1
[10:52:42.276] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.276] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.276] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.276] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.276] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.276] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:42.276] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.278] |  :  .  |  :  .  |  Old stack:
[10:52:42.278] |  :  .  |  :  .  |  List of 1
[10:52:42.278] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.278] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.278] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.278] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.278] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.278] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:42.278] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.278] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.278] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.278] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.281] |  :  .  |  :  .  |  Not identical
[10:52:42.281] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:42.281] |  :  .  |  :  .  |  :  List of 2
[10:52:42.281] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.281] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.281] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.281] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.281] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.281] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:42.281] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.281] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.281] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.281] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.281] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.281] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:42.281] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.281] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.281] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.286] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:42.286] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:42.286] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:42.286] |  :  .  |  :  .  List of future strategies:
[10:52:42.286] |  :  .  |  :  .  1. sequential:
[10:52:42.286] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:42.286] |  :  .  |  :  .     - tweaked: FALSE
[10:52:42.286] |  :  .  |  :  .     - call: plan(sequential)
[10:52:42.287] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:42.287] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:42.287] |  :  .  |  assign_globals() ...
[10:52:42.287] |  :  .  |  List of 2
[10:52:42.287] |  :  .  |   $ rr: int 1
[10:52:42.287] |  :  .  |   $ cc: int 1
[10:52:42.287] |  :  .  |   - attr(*, "where")=List of 2
[10:52:42.287] |  :  .  |    ..$ rr:<environment: R_EmptyEnv> 
[10:52:42.287] |  :  .  |    ..$ cc:<environment: R_EmptyEnv> 
[10:52:42.287] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:42.287] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:52:42.287] |  :  .  |   - attr(*, "total_size")= num NA
[10:52:42.287] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:52:42.290] |  :  .  |  - copied ‘rr’ to environment
[10:52:42.290] |  :  .  |  - copied ‘cc’ to environment
[10:52:42.290] |  :  .  |  assign_globals() ... done
[10:52:42.292] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:42.292] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:42.292] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:42.292] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:42.292] |  :  .  |  :  .  |  :  New stack:
[10:52:42.292] |  :  .  |  :  .  |  :  List of 1
[10:52:42.292] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.292] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.292] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.292] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.292] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.292] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:42.292] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.292] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.292] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.292] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.295] |  :  .  |  :  .  |  :  Old stack:
[10:52:42.295] |  :  .  |  :  .  |  :  List of 1
[10:52:42.295] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.295] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.295] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.295] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.295] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.295] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:42.295] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.295] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.295] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.295] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.298] |  :  .  |  :  .  |  :  Identical
[10:52:42.298] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:42.298] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:42.298] |  :  .  |  :  .  |  List of future strategies:
[10:52:42.298] |  :  .  |  :  .  |  1. sequential:
[10:52:42.298] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:42.298] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:42.298] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:42.299] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:42.299] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:42.299] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:42.299] |  :  .  |  SequentialFuture started (and completed)
[10:52:42.299] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:42.299] |  :  Launching futures ... done
[10:52:42.299] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:42.299] |  Using SequentialFutureBackend ... done
[10:52:42.300] run() for Future (‘SequentialFuture’) ... done
[10:52:42.300] run() for Future (‘Future’) ...
[10:52:42.300] |  state: ‘created’
[10:52:42.300] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:42.300] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:42.300] |  Using SequentialFutureBackend ...
[10:52:42.300] |  :  Launching futures ...
[10:52:42.300] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:42.300] |  :  .  |  getFutureData() ...
[10:52:42.301] |  :  .  |  :  getFutureCore() ...
[10:52:42.301] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:42.301] |  :  .  |  :  getFutureCore() ... done
[10:52:42.302] |  :  .  |  :  getFutureCapture() ...
[10:52:42.302] |  :  .  |  :  getFutureCapture() ... done
[10:52:42.302] |  :  .  |  :  getFutureContext() ...
[10:52:42.302] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:42.302] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:42.302] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:42.302] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:42.302] |  :  .  |  :  getFutureContext() ... done
[10:52:42.302] |  :  .  |  getFutureData() ... done
[10:52:42.303] |  :  .  |  attachPackages() ...
[10:52:42.303] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:42.303] |  :  .  |  attachPackages() ... DONE
[10:52:42.303] |  :  .  |  attachPackages() ...
[10:52:42.303] |  :  .  |  :  packages: [n=0] 
[10:52:42.303] |  :  .  |  attachPackages() ... DONE
[10:52:42.303] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:42.304] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:42.304] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:42.304] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:42.304] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:42.304] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:42.304] |  :  .  |  :  .  |  New stack:
[10:52:42.304] |  :  .  |  :  .  |  List of 1
[10:52:42.304] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.304] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.304] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.304] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.304] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.304] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:42.304] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.306] |  :  .  |  :  .  |  Old stack:
[10:52:42.307] |  :  .  |  :  .  |  List of 1
[10:52:42.307] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.307] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.307] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.307] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.307] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.307] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:42.307] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.307] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.307] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.307] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.309] |  :  .  |  :  .  |  Not identical
[10:52:42.309] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:42.310] |  :  .  |  :  .  |  :  List of 2
[10:52:42.310] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.310] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.310] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.310] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.310] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.310] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:42.310] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.310] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.310] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.310] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.310] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.310] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:42.310] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.310] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.310] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.314] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:42.314] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:42.314] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:42.314] |  :  .  |  :  .  List of future strategies:
[10:52:42.314] |  :  .  |  :  .  1. sequential:
[10:52:42.314] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:42.314] |  :  .  |  :  .     - tweaked: FALSE
[10:52:42.314] |  :  .  |  :  .     - call: plan(sequential)
[10:52:42.315] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:42.315] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:42.315] |  :  .  |  assign_globals() ...
[10:52:42.315] |  :  .  |  List of 2
[10:52:42.315] |  :  .  |   $ rr: int 2
[10:52:42.315] |  :  .  |   $ cc: int 1
[10:52:42.315] |  :  .  |   - attr(*, "where")=List of 2
[10:52:42.315] |  :  .  |    ..$ rr:<environment: R_EmptyEnv> 
[10:52:42.315] |  :  .  |    ..$ cc:<environment: R_EmptyEnv> 
[10:52:42.315] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:42.315] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:52:42.315] |  :  .  |   - attr(*, "total_size")= num NA
[10:52:42.315] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:52:42.318] |  :  .  |  - copied ‘rr’ to environment
[10:52:42.318] |  :  .  |  - copied ‘cc’ to environment
[10:52:42.318] |  :  .  |  assign_globals() ... done
[10:52:42.319] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:42.319] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:42.320] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:42.320] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:42.320] |  :  .  |  :  .  |  :  New stack:
[10:52:42.320] |  :  .  |  :  .  |  :  List of 1
[10:52:42.320] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.320] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.320] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.320] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.320] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.320] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:42.320] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.320] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.320] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.320] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.324] |  :  .  |  :  .  |  :  Old stack:
[10:52:42.324] |  :  .  |  :  .  |  :  List of 1
[10:52:42.324] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.324] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.324] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.324] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.324] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.324] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:42.324] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.324] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.324] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.324] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.326] |  :  .  |  :  .  |  :  Identical
[10:52:42.326] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:42.327] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:42.327] |  :  .  |  :  .  |  List of future strategies:
[10:52:42.327] |  :  .  |  :  .  |  1. sequential:
[10:52:42.327] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:42.327] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:42.327] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:42.327] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:42.327] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:42.327] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:42.327] |  :  .  |  SequentialFuture started (and completed)
[10:52:42.328] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:42.328] |  :  Launching futures ... done
[10:52:42.328] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:42.328] |  Using SequentialFutureBackend ... done
[10:52:42.328] run() for Future (‘SequentialFuture’) ... done
[10:52:42.328] run() for Future (‘Future’) ...
[10:52:42.328] |  state: ‘created’
[10:52:42.328] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:42.328] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:42.329] |  Using SequentialFutureBackend ...
[10:52:42.329] |  :  Launching futures ...
[10:52:42.329] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:42.329] |  :  .  |  getFutureData() ...
[10:52:42.329] |  :  .  |  :  getFutureCore() ...
[10:52:42.329] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:42.329] |  :  .  |  :  getFutureCore() ... done
[10:52:42.329] |  :  .  |  :  getFutureCapture() ...
[10:52:42.329] |  :  .  |  :  getFutureCapture() ... done
[10:52:42.329] |  :  .  |  :  getFutureContext() ...
[10:52:42.329] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:42.330] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:42.330] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:42.330] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:42.330] |  :  .  |  :  getFutureContext() ... done
[10:52:42.330] |  :  .  |  getFutureData() ... done
[10:52:42.330] |  :  .  |  attachPackages() ...
[10:52:42.330] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:42.330] |  :  .  |  attachPackages() ... DONE
[10:52:42.330] |  :  .  |  attachPackages() ...
[10:52:42.331] |  :  .  |  :  packages: [n=0] 
[10:52:42.331] |  :  .  |  attachPackages() ... DONE
[10:52:42.331] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:42.331] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:42.331] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:42.331] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:42.332] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:42.332] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:42.332] |  :  .  |  :  .  |  New stack:
[10:52:42.332] |  :  .  |  :  .  |  List of 1
[10:52:42.332] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.332] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.332] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.332] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.332] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.332] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:42.332] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.334] |  :  .  |  :  .  |  Old stack:
[10:52:42.334] |  :  .  |  :  .  |  List of 1
[10:52:42.334] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.334] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.334] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.334] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.334] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.334] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:42.334] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.334] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.334] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.334] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.337] |  :  .  |  :  .  |  Not identical
[10:52:42.337] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:42.337] |  :  .  |  :  .  |  :  List of 2
[10:52:42.337] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.337] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.337] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.337] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.337] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.337] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:42.337] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.337] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.337] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.337] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.337] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.337] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:42.337] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.337] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.337] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.342] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:42.342] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:42.342] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:42.342] |  :  .  |  :  .  List of future strategies:
[10:52:42.342] |  :  .  |  :  .  1. sequential:
[10:52:42.342] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:42.342] |  :  .  |  :  .     - tweaked: FALSE
[10:52:42.342] |  :  .  |  :  .     - call: plan(sequential)
[10:52:42.343] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:42.343] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:42.343] |  :  .  |  assign_globals() ...
[10:52:42.343] |  :  .  |  List of 2
[10:52:42.343] |  :  .  |   $ rr: int 3
[10:52:42.343] |  :  .  |   $ cc: int 1
[10:52:42.343] |  :  .  |   - attr(*, "where")=List of 2
[10:52:42.343] |  :  .  |    ..$ rr:<environment: R_EmptyEnv> 
[10:52:42.343] |  :  .  |    ..$ cc:<environment: R_EmptyEnv> 
[10:52:42.343] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:42.343] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:52:42.343] |  :  .  |   - attr(*, "total_size")= num NA
[10:52:42.343] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:52:42.346] |  :  .  |  - copied ‘rr’ to environment
[10:52:42.346] |  :  .  |  - copied ‘cc’ to environment
[10:52:42.346] |  :  .  |  assign_globals() ... done
[10:52:42.348] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:42.348] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:42.348] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:42.348] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:42.348] |  :  .  |  :  .  |  :  New stack:
[10:52:42.348] |  :  .  |  :  .  |  :  List of 1
[10:52:42.348] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.348] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.348] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.348] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.348] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.348] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:42.348] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.348] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.348] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.348] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.351] |  :  .  |  :  .  |  :  Old stack:
[10:52:42.351] |  :  .  |  :  .  |  :  List of 1
[10:52:42.351] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.351] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.351] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.351] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.351] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.351] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:42.351] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.351] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.351] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.351] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.354] |  :  .  |  :  .  |  :  Identical
[10:52:42.354] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:42.354] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:42.354] |  :  .  |  :  .  |  List of future strategies:
[10:52:42.354] |  :  .  |  :  .  |  1. sequential:
[10:52:42.354] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:42.354] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:42.354] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:42.354] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:42.354] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:42.355] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:42.355] |  :  .  |  SequentialFuture started (and completed)
[10:52:42.355] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:42.355] |  :  Launching futures ... done
[10:52:42.355] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:42.355] |  Using SequentialFutureBackend ... done
[10:52:42.355] run() for Future (‘SequentialFuture’) ... done
[10:52:42.356] run() for Future (‘Future’) ...
[10:52:42.356] |  state: ‘created’
[10:52:42.356] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:42.356] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:42.356] |  Using SequentialFutureBackend ...
[10:52:42.356] |  :  Launching futures ...
[10:52:42.356] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:42.356] |  :  .  |  getFutureData() ...
[10:52:42.356] |  :  .  |  :  getFutureCore() ...
[10:52:42.356] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:42.357] |  :  .  |  :  getFutureCore() ... done
[10:52:42.357] |  :  .  |  :  getFutureCapture() ...
[10:52:42.357] |  :  .  |  :  getFutureCapture() ... done
[10:52:42.357] |  :  .  |  :  getFutureContext() ...
[10:52:42.357] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:42.357] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:42.357] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:42.357] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:42.357] |  :  .  |  :  getFutureContext() ... done
[10:52:42.357] |  :  .  |  getFutureData() ... done
[10:52:42.358] |  :  .  |  attachPackages() ...
[10:52:42.358] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:42.358] |  :  .  |  attachPackages() ... DONE
[10:52:42.358] |  :  .  |  attachPackages() ...
[10:52:42.358] |  :  .  |  :  packages: [n=0] 
[10:52:42.358] |  :  .  |  attachPackages() ... DONE
[10:52:42.358] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:42.358] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:42.359] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:42.359] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:42.360] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:42.360] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:42.360] |  :  .  |  :  .  |  New stack:
[10:52:42.360] |  :  .  |  :  .  |  List of 1
[10:52:42.360] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.360] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.360] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.360] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.360] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.360] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:42.360] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.363] |  :  .  |  :  .  |  Old stack:
[10:52:42.363] |  :  .  |  :  .  |  List of 1
[10:52:42.363] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.363] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.363] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.363] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.363] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.363] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:42.363] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.363] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.363] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.363] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.366] |  :  .  |  :  .  |  Not identical
[10:52:42.366] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:42.366] |  :  .  |  :  .  |  :  List of 2
[10:52:42.366] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.366] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.366] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.366] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.366] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.366] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:42.366] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.366] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.366] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.366] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.366] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.366] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:42.366] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.366] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.366] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.370] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:42.370] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:42.370] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:42.370] |  :  .  |  :  .  List of future strategies:
[10:52:42.370] |  :  .  |  :  .  1. sequential:
[10:52:42.370] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:42.370] |  :  .  |  :  .     - tweaked: FALSE
[10:52:42.370] |  :  .  |  :  .     - call: plan(sequential)
[10:52:42.371] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:42.371] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:42.371] |  :  .  |  assign_globals() ...
[10:52:42.371] |  :  .  |  List of 2
[10:52:42.371] |  :  .  |   $ rr: int 1
[10:52:42.371] |  :  .  |   $ cc: int 2
[10:52:42.371] |  :  .  |   - attr(*, "where")=List of 2
[10:52:42.371] |  :  .  |    ..$ rr:<environment: R_EmptyEnv> 
[10:52:42.371] |  :  .  |    ..$ cc:<environment: R_EmptyEnv> 
[10:52:42.371] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:42.371] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:52:42.371] |  :  .  |   - attr(*, "total_size")= num NA
[10:52:42.371] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:52:42.374] |  :  .  |  - copied ‘rr’ to environment
[10:52:42.374] |  :  .  |  - copied ‘cc’ to environment
[10:52:42.374] |  :  .  |  assign_globals() ... done
[10:52:42.376] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:42.376] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:42.376] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:42.376] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:42.376] |  :  .  |  :  .  |  :  New stack:
[10:52:42.376] |  :  .  |  :  .  |  :  List of 1
[10:52:42.376] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.376] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.376] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.376] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.376] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.376] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:42.376] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.376] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.376] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.376] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.380] |  :  .  |  :  .  |  :  Old stack:
[10:52:42.380] |  :  .  |  :  .  |  :  List of 1
[10:52:42.380] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.380] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.380] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.380] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.380] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.380] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:42.380] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.380] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.380] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.380] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.383] |  :  .  |  :  .  |  :  Identical
[10:52:42.383] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:42.383] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:42.383] |  :  .  |  :  .  |  List of future strategies:
[10:52:42.383] |  :  .  |  :  .  |  1. sequential:
[10:52:42.383] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:42.383] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:42.383] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:42.384] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:42.384] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:42.384] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:42.384] |  :  .  |  SequentialFuture started (and completed)
[10:52:42.384] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:42.385] |  :  Launching futures ... done
[10:52:42.385] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:42.385] |  Using SequentialFutureBackend ... done
[10:52:42.385] run() for Future (‘SequentialFuture’) ... done
[10:52:42.385] run() for Future (‘Future’) ...
[10:52:42.385] |  state: ‘created’
[10:52:42.385] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:42.385] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:42.385] |  Using SequentialFutureBackend ...
[10:52:42.386] |  :  Launching futures ...
[10:52:42.386] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:42.386] |  :  .  |  getFutureData() ...
[10:52:42.386] |  :  .  |  :  getFutureCore() ...
[10:52:42.386] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:42.386] |  :  .  |  :  getFutureCore() ... done
[10:52:42.386] |  :  .  |  :  getFutureCapture() ...
[10:52:42.386] |  :  .  |  :  getFutureCapture() ... done
[10:52:42.386] |  :  .  |  :  getFutureContext() ...
[10:52:42.386] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:42.387] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:42.387] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:42.387] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:42.387] |  :  .  |  :  getFutureContext() ... done
[10:52:42.387] |  :  .  |  getFutureData() ... done
[10:52:42.387] |  :  .  |  attachPackages() ...
[10:52:42.387] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:42.387] |  :  .  |  attachPackages() ... DONE
[10:52:42.387] |  :  .  |  attachPackages() ...
[10:52:42.388] |  :  .  |  :  packages: [n=0] 
[10:52:42.388] |  :  .  |  attachPackages() ... DONE
[10:52:42.388] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:42.388] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:42.388] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:42.388] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:42.389] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:42.389] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:42.389] |  :  .  |  :  .  |  New stack:
[10:52:42.389] |  :  .  |  :  .  |  List of 1
[10:52:42.389] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.389] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.389] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.389] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.389] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.389] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:42.389] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.391] |  :  .  |  :  .  |  Old stack:
[10:52:42.391] |  :  .  |  :  .  |  List of 1
[10:52:42.391] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.391] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.391] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.391] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.391] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.391] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:42.391] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.391] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.391] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.391] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.394] |  :  .  |  :  .  |  Not identical
[10:52:42.394] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:42.394] |  :  .  |  :  .  |  :  List of 2
[10:52:42.394] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.394] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.394] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.394] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.394] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.394] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:42.394] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.394] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.394] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.394] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.394] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.394] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:42.394] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.394] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.394] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.400] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:42.400] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:42.400] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:42.400] |  :  .  |  :  .  List of future strategies:
[10:52:42.400] |  :  .  |  :  .  1. sequential:
[10:52:42.400] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:42.400] |  :  .  |  :  .     - tweaked: FALSE
[10:52:42.400] |  :  .  |  :  .     - call: plan(sequential)
[10:52:42.401] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:42.401] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:42.401] |  :  .  |  assign_globals() ...
[10:52:42.401] |  :  .  |  List of 2
[10:52:42.401] |  :  .  |   $ rr: int 2
[10:52:42.401] |  :  .  |   $ cc: int 2
[10:52:42.401] |  :  .  |   - attr(*, "where")=List of 2
[10:52:42.401] |  :  .  |    ..$ rr:<environment: R_EmptyEnv> 
[10:52:42.401] |  :  .  |    ..$ cc:<environment: R_EmptyEnv> 
[10:52:42.401] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:42.401] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:52:42.401] |  :  .  |   - attr(*, "total_size")= num NA
[10:52:42.401] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:52:42.404] |  :  .  |  - copied ‘rr’ to environment
[10:52:42.404] |  :  .  |  - copied ‘cc’ to environment
[10:52:42.404] |  :  .  |  assign_globals() ... done
[10:52:42.405] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:42.406] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:42.406] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:42.406] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:42.406] |  :  .  |  :  .  |  :  New stack:
[10:52:42.406] |  :  .  |  :  .  |  :  List of 1
[10:52:42.406] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.406] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.406] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.406] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.406] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.406] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:42.406] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.406] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.406] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.406] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.409] |  :  .  |  :  .  |  :  Old stack:
[10:52:42.409] |  :  .  |  :  .  |  :  List of 1
[10:52:42.409] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.409] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.409] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.409] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.409] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.409] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:42.409] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.409] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.409] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.409] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.412] |  :  .  |  :  .  |  :  Identical
[10:52:42.412] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:42.412] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:42.412] |  :  .  |  :  .  |  List of future strategies:
[10:52:42.412] |  :  .  |  :  .  |  1. sequential:
[10:52:42.412] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:42.412] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:42.412] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:42.412] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:42.413] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:42.413] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:42.413] |  :  .  |  SequentialFuture started (and completed)
[10:52:42.413] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:42.413] |  :  Launching futures ... done
[10:52:42.413] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:42.413] |  Using SequentialFutureBackend ... done
[10:52:42.413] run() for Future (‘SequentialFuture’) ... done
[10:52:42.414] run() for Future (‘Future’) ...
[10:52:42.414] |  state: ‘created’
[10:52:42.414] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:42.414] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:42.414] |  Using SequentialFutureBackend ...
[10:52:42.414] |  :  Launching futures ...
[10:52:42.414] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:42.414] |  :  .  |  getFutureData() ...
[10:52:42.414] |  :  .  |  :  getFutureCore() ...
[10:52:42.414] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:42.415] |  :  .  |  :  getFutureCore() ... done
[10:52:42.415] |  :  .  |  :  getFutureCapture() ...
[10:52:42.415] |  :  .  |  :  getFutureCapture() ... done
[10:52:42.415] |  :  .  |  :  getFutureContext() ...
[10:52:42.415] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:42.415] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:42.415] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:42.415] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:42.415] |  :  .  |  :  getFutureContext() ... done
[10:52:42.415] |  :  .  |  getFutureData() ... done
[10:52:42.416] |  :  .  |  attachPackages() ...
[10:52:42.416] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:42.416] |  :  .  |  attachPackages() ... DONE
[10:52:42.416] |  :  .  |  attachPackages() ...
[10:52:42.416] |  :  .  |  :  packages: [n=0] 
[10:52:42.416] |  :  .  |  attachPackages() ... DONE
[10:52:42.416] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:42.417] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:42.417] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:42.417] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:42.417] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:42.417] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:42.417] |  :  .  |  :  .  |  New stack:
[10:52:42.417] |  :  .  |  :  .  |  List of 1
[10:52:42.417] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.417] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.417] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.417] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.417] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.417] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:42.417] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.420] |  :  .  |  :  .  |  Old stack:
[10:52:42.420] |  :  .  |  :  .  |  List of 1
[10:52:42.420] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.420] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.420] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.420] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.420] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.420] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:42.420] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.420] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.420] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.420] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.423] |  :  .  |  :  .  |  Not identical
[10:52:42.423] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:42.423] |  :  .  |  :  .  |  :  List of 2
[10:52:42.423] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.423] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.423] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.423] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.423] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.423] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:42.423] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.423] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.423] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.423] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.423] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.423] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:42.423] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.423] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.423] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.428] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:42.428] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:42.428] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:42.428] |  :  .  |  :  .  List of future strategies:
[10:52:42.428] |  :  .  |  :  .  1. sequential:
[10:52:42.428] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:42.428] |  :  .  |  :  .     - tweaked: FALSE
[10:52:42.428] |  :  .  |  :  .     - call: plan(sequential)
[10:52:42.428] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:42.429] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:42.429] |  :  .  |  assign_globals() ...
[10:52:42.429] |  :  .  |  List of 2
[10:52:42.429] |  :  .  |   $ rr: int 3
[10:52:42.429] |  :  .  |   $ cc: int 2
[10:52:42.429] |  :  .  |   - attr(*, "where")=List of 2
[10:52:42.429] |  :  .  |    ..$ rr:<environment: R_EmptyEnv> 
[10:52:42.429] |  :  .  |    ..$ cc:<environment: R_EmptyEnv> 
[10:52:42.429] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:52:42.429] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:52:42.429] |  :  .  |   - attr(*, "total_size")= num NA
[10:52:42.429] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:52:42.432] |  :  .  |  - copied ‘rr’ to environment
[10:52:42.432] |  :  .  |  - copied ‘cc’ to environment
[10:52:42.432] |  :  .  |  assign_globals() ... done
[10:52:42.433] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:42.434] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:42.434] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:42.434] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:42.434] |  :  .  |  :  .  |  :  New stack:
[10:52:42.434] |  :  .  |  :  .  |  :  List of 1
[10:52:42.434] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.434] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.434] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.434] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.434] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.434] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:42.434] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.434] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.434] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.434] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.438] |  :  .  |  :  .  |  :  Old stack:
[10:52:42.438] |  :  .  |  :  .  |  :  List of 1
[10:52:42.438] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:42.438] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:42.438] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.438] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.438] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.438] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:42.438] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55ed8c2c06c8> 
[10:52:42.438] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:42.438] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:42.438] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:42.440] |  :  .  |  :  .  |  :  Identical
[10:52:42.441] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:42.441] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:42.441] |  :  .  |  :  .  |  List of future strategies:
[10:52:42.441] |  :  .  |  :  .  |  1. sequential:
[10:52:42.441] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:42.441] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:42.441] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:42.441] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:42.441] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:42.441] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:42.441] |  :  .  |  SequentialFuture started (and completed)
[10:52:42.442] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:42.442] |  :  Launching futures ... done
[10:52:42.442] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:42.442] |  Using SequentialFutureBackend ... done
[10:52:42.442] run() for Future (‘SequentialFuture’) ... done

> dim(y) <- dim(x)

> stopifnot(identical(y, x0))

> message("*** %<-% to listenv: multiple dimensions ... DONE")
*** %<-% to listenv: multiple dimensions ... DONE

> message("*** %<-% to listenv ... DONE")
*** %<-% to listenv ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.4s, sys.self=0.01s, elapsed=0.4s, user.child=0.002s, sys.child=0.004s
Test ‘futureAssign_OP_with_listenv’ ... success
> 
