
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-futureAssign_OP_with_listenv.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("futureAssign_OP_with_listenv")
Test ‘futureAssign_OP_with_listenv’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-futureAssign_OP_with_listenv.R’

> library(future)
[08:08:05.155] Option 'future.startup.script': TRUE
[08:08:05.156] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:08:05.156] Future startup scripts found: <none>

> library(listenv)

> message("*** %<-% to listenv ...")
*** %<-% to listenv ...

> z <- listenv()

> stopifnot(length(names(z)) == 0)

> message("*** %<-% to listenv: Assign by index")
*** %<-% to listenv: Assign by index

> z[[1]] %<-% {
+     2
+ } %lazy% TRUE
[08:08:05.160] future(..., label = NULL) ...
[08:08:05.160] | lazy: TRUE
[08:08:05.160] | stdout: TRUE
[08:08:05.161] | conditions: [n=1] ‘condition’
[08:08:05.161] | gc: FALSE
[08:08:05.161] | earlySignal: FALSE
[08:08:05.161] | getGlobalsAndPackages() ...
[08:08:05.162] | : Searching for globals ...
[08:08:05.172] | : . globals found: [1] ‘{’
[08:08:05.173] | : Searching for globals ... done
[08:08:05.173] | : Resolving globals: FALSE
[08:08:05.173] | : Search for packages associated with the globals ...
[08:08:05.173] | : . Packages associated with globals: [1] ‘base’
[08:08:05.173] | : . Packages: [1] ‘base’
[08:08:05.174] | : Search for packages associated with the globals ... done
[08:08:05.174] | : Packages after dropping 'base': [0] 
[08:08:05.174] | : globals: [0] 
[08:08:05.174] | : packages: [0] 
[08:08:05.174] | getGlobalsAndPackages() ... done
[08:08:05.174] future(..., label = NULL) ... done

> stopifnot(length(z) == 1)

> stopifnot(length(names(z)) == 0)

> z[[1]] %<-% {
+     2
+ } %lazy% TRUE
[08:08:05.175] future(..., label = NULL) ...
[08:08:05.175] | lazy: TRUE
[08:08:05.175] | stdout: TRUE
[08:08:05.175] | conditions: [n=1] ‘condition’
[08:08:05.175] | gc: FALSE
[08:08:05.176] | earlySignal: FALSE
[08:08:05.176] | getGlobalsAndPackages() ...
[08:08:05.176] | : Searching for globals ...
[08:08:05.179] | : . globals found: [1] ‘{’
[08:08:05.179] | : Searching for globals ... done
[08:08:05.179] | : Resolving globals: FALSE
[08:08:05.179] | : Search for packages associated with the globals ...
[08:08:05.179] | : . Packages associated with globals: [1] ‘base’
[08:08:05.179] | : . Packages: [1] ‘base’
[08:08:05.180] | : Search for packages associated with the globals ... done
[08:08:05.180] | : Packages after dropping 'base': [0] 
[08:08:05.180] | : globals: [0] 
[08:08:05.180] | : packages: [0] 
[08:08:05.180] | getGlobalsAndPackages() ... done
[08:08:05.180] future(..., label = NULL) ... done

> stopifnot(length(z) == 1)

> stopifnot(length(names(z)) == 0)

> z[[4]] %<-% {
+     "async!"
+ } %lazy% TRUE
[08:08:05.181] future(..., label = NULL) ...
[08:08:05.181] | lazy: TRUE
[08:08:05.181] | stdout: TRUE
[08:08:05.181] | conditions: [n=1] ‘condition’
[08:08:05.181] | gc: FALSE
[08:08:05.181] | earlySignal: FALSE
[08:08:05.182] | getGlobalsAndPackages() ...
[08:08:05.182] | : Searching for globals ...
[08:08:05.184] | : . globals found: [1] ‘{’
[08:08:05.185] | : Searching for globals ... done
[08:08:05.185] | : Resolving globals: FALSE
[08:08:05.185] | : Search for packages associated with the globals ...
[08:08:05.185] | : . Packages associated with globals: [1] ‘base’
[08:08:05.185] | : . Packages: [1] ‘base’
[08:08:05.185] | : Search for packages associated with the globals ... done
[08:08:05.185] | : Packages after dropping 'base': [0] 
[08:08:05.186] | : globals: [0] 
[08:08:05.186] | : packages: [0] 
[08:08:05.186] | getGlobalsAndPackages() ... done
[08:08:05.186] future(..., label = NULL) ... done

> stopifnot(length(z) == 4)

> stopifnot(length(names(z)) == 0)

> message("*** %<-% to listenv: Update names")
*** %<-% to listenv: Update names

> names(z) <- c("A", "B", "C", "D")

> stopifnot(identical(names(z), c("A", "B", "C", "D")))

> message("*** %<-% to listenv: Assign by name (existing)")
*** %<-% to listenv: Assign by name (existing)

> z$B %<-% {
+     TRUE
+ } %lazy% TRUE
[08:08:05.187] future(..., label = NULL) ...
[08:08:05.187] | lazy: TRUE
[08:08:05.187] | stdout: TRUE
[08:08:05.187] | conditions: [n=1] ‘condition’
[08:08:05.187] | gc: FALSE
[08:08:05.188] | earlySignal: FALSE
[08:08:05.188] | getGlobalsAndPackages() ...
[08:08:05.188] | : Searching for globals ...
[08:08:05.191] | : . globals found: [1] ‘{’
[08:08:05.191] | : Searching for globals ... done
[08:08:05.191] | : Resolving globals: FALSE
[08:08:05.191] | : Search for packages associated with the globals ...
[08:08:05.191] | : . Packages associated with globals: [1] ‘base’
[08:08:05.191] | : . Packages: [1] ‘base’
[08:08:05.191] | : Search for packages associated with the globals ... done
[08:08:05.192] | : Packages after dropping 'base': [0] 
[08:08:05.192] | : globals: [0] 
[08:08:05.192] | : packages: [0] 
[08:08:05.192] | getGlobalsAndPackages() ... done
[08:08:05.192] future(..., label = NULL) ... done

> stopifnot(length(z) == 4)

> stopifnot(identical(names(z), c("A", "B", "C", "D")))

> y <- as.list(z)
[08:08:05.193] value() for Future (<unnamed-2>) ...
[08:08:05.193] | run() for ‘Future’ (<unnamed-2>) ...
[08:08:05.193] | : state: ‘created’
[08:08:05.193] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.194] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:05.194] | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.194] | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.194] | : . '  - attr(*, "init")= logi TRUE
[08:08:05.194] | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.194] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.194] | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.194] | : . '  - attr(*, "call")= language plan(sequential)
[08:08:05.200] | : . ' init: TRUE
[08:08:05.200] | : . ' makeFutureBackend(<sequential>) ...
[08:08:05.200] | : . ' , Backend function: <‘NULL’>
[08:08:05.200] | : . ' , Evaluator tweak arguments: [n=0]
[08:08:05.200] | : . ' ,  list()
[08:08:05.200] | : . ' , Evaluator formal arguments: [n=2]
[08:08:05.200] | : . ' ,  list()
[08:08:05.201] | : . ' , Backend factory arguments: [n=2]
[08:08:05.201] | : . ' , Dotted pair list of 2
[08:08:05.201] | : . ' ,  $ gc         : logi FALSE
[08:08:05.201] | : . ' ,  $ earlySignal: logi FALSE
[08:08:05.202] | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:05.202] | : . ' makeFutureBackend(<sequential>) ... done
[08:08:05.202] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:05.202] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.202] | : Using SequentialFutureBackend ...
[08:08:05.202] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:05.203] | : . Launching futures ...
[08:08:05.203] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:05.203] | : . ' , getFutureData() ...
[08:08:05.203] | : . ' , ; getFutureCore() ...
[08:08:05.203] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:05.203] | : . ' , ; getFutureCore() ... done
[08:08:05.204] | : . ' , ; getFutureCapture() ...
[08:08:05.204] | : . ' , ; getFutureCapture() ... done
[08:08:05.204] | : . ' , ; getFutureContext() ...
[08:08:05.204] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.204] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:05.204] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.204] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:05.204] | : . ' , ; getFutureContext() ... done
[08:08:05.205] | : . ' , getFutureData() ... done
[08:08:05.207] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.207] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:05.207] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.208] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.208] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:05.208] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:05.208] | : . ' , ; ` | New stack:
[08:08:05.208] | : . ' , ; ` | List of 1
[08:08:05.208] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.208] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.208] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:05.208] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.208] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.208] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.208] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.208] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.211] | : . ' , ; ` | Old stack:
[08:08:05.211] | : . ' , ; ` | List of 1
[08:08:05.211] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.211] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.211] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:05.211] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.211] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.211] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.211] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:05.211] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.211] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.211] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.211] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.214] | : . ' , ; ` | Not identical
[08:08:05.214] | : . ' , ; ` | all.equal() for future ...
[08:08:05.214] | : . ' , ; ` | : List of 2
[08:08:05.214] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.214] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.214] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:05.214] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.214] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.214] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.214] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.214] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.214] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.214] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.214] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.214] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.214] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.214] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:05.214] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.214] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.214] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.219] | : . ' , ; ` | all.equal() for future ... done
[08:08:05.219] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:05.219] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:05.219] | : . ' , ; ` List of future strategies:
[08:08:05.219] | : . ' , ; ` 1. sequential:
[08:08:05.219] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:05.219] | : . ' , ; `    - tweaked: FALSE
[08:08:05.219] | : . ' , ; `    - call: plan(sequential)
[08:08:05.221] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:05.222] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.224] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.224] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.224] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:05.224] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:05.224] | : . ' , ; ` | : New stack:
[08:08:05.224] | : . ' , ; ` | : List of 1
[08:08:05.224] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.224] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.224] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.224] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.224] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.224] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.224] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:05.224] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.224] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.224] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.224] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.228] | : . ' , ; ` | : Old stack:
[08:08:05.228] | : . ' , ; ` | : List of 1
[08:08:05.228] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.228] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.228] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.228] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.228] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.228] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.228] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:05.228] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.228] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.228] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.228] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.231] | : . ' , ; ` | : Identical
[08:08:05.231] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:05.231] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:05.231] | : . ' , ; ` | List of future strategies:
[08:08:05.231] | : . ' , ; ` | 1. sequential:
[08:08:05.231] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:05.231] | : . ' , ; ` |    - tweaked: FALSE
[08:08:05.231] | : . ' , ; ` |    - call: plan(sequential)
[08:08:05.231] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:05.232] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.232] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.235] | : . ' , SequentialFuture started (and completed)
[08:08:05.235] | : . ' , signalConditions() ...
[08:08:05.235] | : . ' , ; include = ‘immediateCondition’
[08:08:05.235] | : . ' , ; exclude = 
[08:08:05.235] | : . ' , ; resignal = FALSE
[08:08:05.235] | : . ' , ; Number of conditions: 6
[08:08:05.236] | : . ' , ;  int 6
[08:08:05.236] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.236] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.236] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.236] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.236] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.237] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.237] | : . ' , signalConditions() ... done
[08:08:05.237] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:05.237] | : . Launching futures ... done
[08:08:05.237] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:05.237] | : Using SequentialFutureBackend ... done
[08:08:05.237] | run() for ‘Future’ (<unnamed-2>) ... done
[08:08:05.237] | signalConditions() ...
[08:08:05.237] | : include = ‘immediateCondition’
[08:08:05.238] | : exclude = 
[08:08:05.238] | : resignal = FALSE
[08:08:05.238] | : Number of conditions: 6
[08:08:05.238] | :  int 6
[08:08:05.238] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.238] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.238] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.239] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.239] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.239] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.239] | signalConditions() ... done
[08:08:05.239] | relay stdout ...
[08:08:05.239] | relay stdout ... done
[08:08:05.239] | check for misuse ...
[08:08:05.239] | check for misuse ... done
[08:08:05.239] | relay conditions ...
[08:08:05.239] | : Future state: ‘finished’
[08:08:05.240] | : signalConditions() ...
[08:08:05.240] | : . include = ‘condition’
[08:08:05.240] | : . exclude = ‘immediateCondition’
[08:08:05.240] | : . resignal = TRUE
[08:08:05.240] | : . Number of conditions: 6
[08:08:05.240] | : .  int 6
[08:08:05.240] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.241] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.206] | : . ' , attachPackages() ...
[08:08:05.241] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.241] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.206] | : . ' , ; packages: [n=1] ‘future’
[08:08:05.241] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.241] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.206] | : . ' , attachPackages() ... done
[08:08:05.241] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.241] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.206] | : . ' , attachPackages() ...
[08:08:05.241] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.241] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.207] | : . ' , ; packages: [n=0] 
[08:08:05.242] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.242] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.207] | : . ' , attachPackages() ... done
[08:08:05.243] | : signalConditions() ... done
[08:08:05.243] | relay conditions ... done
[08:08:05.243] value() for Future (<unnamed-2>) ... done
[08:08:05.243] value() for Future (<unnamed-3>) ...
[08:08:05.243] | run() for ‘Future’ (<unnamed-3>) ...
[08:08:05.243] | : state: ‘created’
[08:08:05.243] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.244] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.244] | : Using SequentialFutureBackend ...
[08:08:05.244] | : . Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:08:05.244] | : . Launching futures ...
[08:08:05.244] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:05.244] | : . ' , getFutureData() ...
[08:08:05.244] | : . ' , ; getFutureCore() ...
[08:08:05.244] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:05.244] | : . ' , ; getFutureCore() ... done
[08:08:05.244] | : . ' , ; getFutureCapture() ...
[08:08:05.245] | : . ' , ; getFutureCapture() ... done
[08:08:05.245] | : . ' , ; getFutureContext() ...
[08:08:05.245] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.245] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:05.245] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.245] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:05.245] | : . ' , ; getFutureContext() ... done
[08:08:05.245] | : . ' , getFutureData() ... done
[08:08:05.247] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.247] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:05.247] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.247] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.247] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:05.247] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:05.247] | : . ' , ; ` | New stack:
[08:08:05.247] | : . ' , ; ` | List of 1
[08:08:05.247] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.247] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.247] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:05.247] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.247] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.247] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.247] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.247] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.250] | : . ' , ; ` | Old stack:
[08:08:05.250] | : . ' , ; ` | List of 1
[08:08:05.250] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.250] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.250] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:05.250] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.250] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.250] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.250] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:05.250] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.250] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.250] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.250] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.253] | : . ' , ; ` | Not identical
[08:08:05.253] | : . ' , ; ` | all.equal() for future ...
[08:08:05.253] | : . ' , ; ` | : List of 2
[08:08:05.253] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.253] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.253] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:05.253] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.253] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.253] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.253] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.253] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.253] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.253] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.253] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.253] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.253] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.253] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:05.253] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.253] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.253] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.258] | : . ' , ; ` | all.equal() for future ... done
[08:08:05.258] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:05.258] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:05.258] | : . ' , ; ` List of future strategies:
[08:08:05.258] | : . ' , ; ` 1. sequential:
[08:08:05.258] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:05.258] | : . ' , ; `    - tweaked: FALSE
[08:08:05.258] | : . ' , ; `    - call: plan(sequential)
[08:08:05.259] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:05.259] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.260] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.260] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.261] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:05.261] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:05.261] | : . ' , ; ` | : New stack:
[08:08:05.261] | : . ' , ; ` | : List of 1
[08:08:05.261] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.261] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.261] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.261] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.261] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.261] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.261] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:05.261] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.261] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.261] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.261] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.265] | : . ' , ; ` | : Old stack:
[08:08:05.265] | : . ' , ; ` | : List of 1
[08:08:05.265] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.265] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.265] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.265] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.265] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.265] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.265] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:05.265] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.265] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.265] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.265] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.268] | : . ' , ; ` | : Identical
[08:08:05.268] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:05.268] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:05.268] | : . ' , ; ` | List of future strategies:
[08:08:05.268] | : . ' , ; ` | 1. sequential:
[08:08:05.268] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:05.268] | : . ' , ; ` |    - tweaked: FALSE
[08:08:05.268] | : . ' , ; ` |    - call: plan(sequential)
[08:08:05.269] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:05.269] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.269] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.269] | : . ' , SequentialFuture started (and completed)
[08:08:05.269] | : . ' , signalConditions() ...
[08:08:05.269] | : . ' , ; include = ‘immediateCondition’
[08:08:05.269] | : . ' , ; exclude = 
[08:08:05.269] | : . ' , ; resignal = FALSE
[08:08:05.270] | : . ' , ; Number of conditions: 6
[08:08:05.270] | : . ' , ;  int 6
[08:08:05.270] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.270] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.270] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.270] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.270] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.270] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.271] | : . ' , signalConditions() ... done
[08:08:05.271] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:05.271] | : . Launching futures ... done
[08:08:05.271] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:05.271] | : Using SequentialFutureBackend ... done
[08:08:05.271] | run() for ‘Future’ (<unnamed-3>) ... done
[08:08:05.271] | signalConditions() ...
[08:08:05.271] | : include = ‘immediateCondition’
[08:08:05.271] | : exclude = 
[08:08:05.271] | : resignal = FALSE
[08:08:05.272] | : Number of conditions: 6
[08:08:05.272] | :  int 6
[08:08:05.272] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.272] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.272] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.272] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.272] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.273] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.273] | signalConditions() ... done
[08:08:05.273] | relay stdout ...
[08:08:05.273] | relay stdout ... done
[08:08:05.273] | check for misuse ...
[08:08:05.273] | check for misuse ... done
[08:08:05.273] | relay conditions ...
[08:08:05.273] | : Future state: ‘finished’
[08:08:05.273] | : signalConditions() ...
[08:08:05.273] | : . include = ‘condition’
[08:08:05.274] | : . exclude = ‘immediateCondition’
[08:08:05.274] | : . resignal = TRUE
[08:08:05.274] | : . Number of conditions: 6
[08:08:05.274] | : .  int 6
[08:08:05.274] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.274] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.246] | : . ' , attachPackages() ...
[08:08:05.274] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.275] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.246] | : . ' , ; packages: [n=1] ‘future’
[08:08:05.275] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.275] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.246] | : . ' , attachPackages() ... done
[08:08:05.275] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.275] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.246] | : . ' , attachPackages() ...
[08:08:05.275] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.275] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.246] | : . ' , ; packages: [n=0] 
[08:08:05.275] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.275] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.246] | : . ' , attachPackages() ... done
[08:08:05.276] | : signalConditions() ... done
[08:08:05.276] | relay conditions ... done
[08:08:05.276] value() for Future (<unnamed-3>) ... done

> str(y)
List of 4
 $ A: num 2
 $ B: NULL
 $ C: NULL
 $ D: chr "async!"

> stopifnot(length(y) == 4)

> stopifnot(identical(names(y), c("A", "B", "C", "D")))

> message("*** %<-% to listenv: Asserting no name clashes among futures")
*** %<-% to listenv: Asserting no name clashes among futures

> u <- listenv()

> u$a %<-% {
+     1
+ } %lazy% TRUE
[08:08:05.278] future(..., label = NULL) ...
[08:08:05.278] | lazy: TRUE
[08:08:05.278] | stdout: TRUE
[08:08:05.278] | conditions: [n=1] ‘condition’
[08:08:05.278] | gc: FALSE
[08:08:05.278] | earlySignal: FALSE
[08:08:05.278] | getGlobalsAndPackages() ...
[08:08:05.278] | : Searching for globals ...
[08:08:05.282] | : . globals found: [1] ‘{’
[08:08:05.282] | : Searching for globals ... done
[08:08:05.282] | : Resolving globals: FALSE
[08:08:05.282] | : Search for packages associated with the globals ...
[08:08:05.282] | : . Packages associated with globals: [1] ‘base’
[08:08:05.282] | : . Packages: [1] ‘base’
[08:08:05.283] | : Search for packages associated with the globals ... done
[08:08:05.283] | : Packages after dropping 'base': [0] 
[08:08:05.283] | : globals: [0] 
[08:08:05.283] | : packages: [0] 
[08:08:05.283] | getGlobalsAndPackages() ... done
[08:08:05.283] future(..., label = NULL) ... done

> stopifnot(identical(names(u), "a"))

> fu <- futureOf(u$a)

> v <- listenv()

> v$a %<-% {
+     2
+ } %lazy% TRUE
[08:08:05.284] future(..., label = NULL) ...
[08:08:05.284] | lazy: TRUE
[08:08:05.284] | stdout: TRUE
[08:08:05.284] | conditions: [n=1] ‘condition’
[08:08:05.284] | gc: FALSE
[08:08:05.285] | earlySignal: FALSE
[08:08:05.285] | getGlobalsAndPackages() ...
[08:08:05.285] | : Searching for globals ...
[08:08:05.287] | : . globals found: [1] ‘{’
[08:08:05.287] | : Searching for globals ... done
[08:08:05.288] | : Resolving globals: FALSE
[08:08:05.288] | : Search for packages associated with the globals ...
[08:08:05.288] | : . Packages associated with globals: [1] ‘base’
[08:08:05.288] | : . Packages: [1] ‘base’
[08:08:05.288] | : Search for packages associated with the globals ... done
[08:08:05.288] | : Packages after dropping 'base': [0] 
[08:08:05.288] | : globals: [0] 
[08:08:05.288] | : packages: [0] 
[08:08:05.289] | getGlobalsAndPackages() ... done
[08:08:05.289] future(..., label = NULL) ... done

> stopifnot(identical(names(v), "a"))

> fv <- futureOf(v$a)

> stopifnot(!identical(fu, fv))

> fu <- futureOf(u$a)

> stopifnot(!identical(fu, fv))

> stopifnot(identical(u$a, 1))
[08:08:05.290] value() for Future (<unnamed-5>) ...
[08:08:05.290] | run() for ‘Future’ (<unnamed-5>) ...
[08:08:05.290] | : state: ‘created’
[08:08:05.290] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.290] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.290] | : Using SequentialFutureBackend ...
[08:08:05.290] | : . Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:08:05.290] | : . Launching futures ...
[08:08:05.290] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:05.291] | : . ' , getFutureData() ...
[08:08:05.291] | : . ' , ; getFutureCore() ...
[08:08:05.291] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:05.291] | : . ' , ; getFutureCore() ... done
[08:08:05.291] | : . ' , ; getFutureCapture() ...
[08:08:05.291] | : . ' , ; getFutureCapture() ... done
[08:08:05.291] | : . ' , ; getFutureContext() ...
[08:08:05.291] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.291] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:05.291] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.292] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:05.292] | : . ' , ; getFutureContext() ... done
[08:08:05.292] | : . ' , getFutureData() ... done
[08:08:05.293] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.293] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:05.293] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.293] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.294] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:05.294] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:05.294] | : . ' , ; ` | New stack:
[08:08:05.294] | : . ' , ; ` | List of 1
[08:08:05.294] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.294] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.294] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:05.294] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.294] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.294] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.294] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.294] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.296] | : . ' , ; ` | Old stack:
[08:08:05.296] | : . ' , ; ` | List of 1
[08:08:05.296] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.296] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.296] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:05.296] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.296] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.296] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.296] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:05.296] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.296] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.296] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.296] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.300] | : . ' , ; ` | Not identical
[08:08:05.300] | : . ' , ; ` | all.equal() for future ...
[08:08:05.300] | : . ' , ; ` | : List of 2
[08:08:05.300] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.300] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.300] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:05.300] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.300] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.300] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.300] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.300] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.300] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.300] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.300] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.300] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.300] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.300] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:05.300] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.300] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.300] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.305] | : . ' , ; ` | all.equal() for future ... done
[08:08:05.305] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:05.306] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:05.306] | : . ' , ; ` List of future strategies:
[08:08:05.306] | : . ' , ; ` 1. sequential:
[08:08:05.306] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:05.306] | : . ' , ; `    - tweaked: FALSE
[08:08:05.306] | : . ' , ; `    - call: plan(sequential)
[08:08:05.306] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:05.306] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.307] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.308] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.308] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:05.308] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:05.308] | : . ' , ; ` | : New stack:
[08:08:05.308] | : . ' , ; ` | : List of 1
[08:08:05.308] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.308] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.308] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.308] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.308] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.308] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.308] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:05.308] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.308] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.308] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.308] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.311] | : . ' , ; ` | : Old stack:
[08:08:05.311] | : . ' , ; ` | : List of 1
[08:08:05.311] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.311] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.311] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.311] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.311] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.311] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.311] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:05.311] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.311] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.311] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.311] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.314] | : . ' , ; ` | : Identical
[08:08:05.314] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:05.314] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:05.315] | : . ' , ; ` | List of future strategies:
[08:08:05.315] | : . ' , ; ` | 1. sequential:
[08:08:05.315] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:05.315] | : . ' , ; ` |    - tweaked: FALSE
[08:08:05.315] | : . ' , ; ` |    - call: plan(sequential)
[08:08:05.315] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:05.315] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.315] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.315] | : . ' , SequentialFuture started (and completed)
[08:08:05.316] | : . ' , signalConditions() ...
[08:08:05.316] | : . ' , ; include = ‘immediateCondition’
[08:08:05.316] | : . ' , ; exclude = 
[08:08:05.316] | : . ' , ; resignal = FALSE
[08:08:05.316] | : . ' , ; Number of conditions: 6
[08:08:05.316] | : . ' , ;  int 6
[08:08:05.316] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.316] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.317] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.317] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.317] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.317] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.317] | : . ' , signalConditions() ... done
[08:08:05.317] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:05.317] | : . Launching futures ... done
[08:08:05.317] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:05.317] | : Using SequentialFutureBackend ... done
[08:08:05.318] | run() for ‘Future’ (<unnamed-5>) ... done
[08:08:05.318] | signalConditions() ...
[08:08:05.318] | : include = ‘immediateCondition’
[08:08:05.319] | : exclude = 
[08:08:05.319] | : resignal = FALSE
[08:08:05.319] | : Number of conditions: 6
[08:08:05.319] | :  int 6
[08:08:05.319] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.319] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.319] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.320] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.320] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.320] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.320] | signalConditions() ... done
[08:08:05.320] | relay stdout ...
[08:08:05.320] | relay stdout ... done
[08:08:05.320] | check for misuse ...
[08:08:05.320] | check for misuse ... done
[08:08:05.320] | relay conditions ...
[08:08:05.320] | : Future state: ‘finished’
[08:08:05.321] | : signalConditions() ...
[08:08:05.321] | : . include = ‘condition’
[08:08:05.321] | : . exclude = ‘immediateCondition’
[08:08:05.321] | : . resignal = TRUE
[08:08:05.321] | : . Number of conditions: 6
[08:08:05.321] | : .  int 6
[08:08:05.321] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.321] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.292] | : . ' , attachPackages() ...
[08:08:05.322] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.322] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.292] | : . ' , ; packages: [n=1] ‘future’
[08:08:05.322] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.322] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.292] | : . ' , attachPackages() ... done
[08:08:05.322] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.322] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.292] | : . ' , attachPackages() ...
[08:08:05.322] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.322] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.293] | : . ' , ; packages: [n=0] 
[08:08:05.322] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.323] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.293] | : . ' , attachPackages() ... done
[08:08:05.323] | : signalConditions() ... done
[08:08:05.323] | relay conditions ... done
[08:08:05.323] value() for Future (<unnamed-5>) ... done

> stopifnot(identical(v$a, 2))
[08:08:05.323] value() for Future (<unnamed-6>) ...
[08:08:05.323] | run() for ‘Future’ (<unnamed-6>) ...
[08:08:05.323] | : state: ‘created’
[08:08:05.323] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.324] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.324] | : Using SequentialFutureBackend ...
[08:08:05.324] | : . Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:08:05.324] | : . Launching futures ...
[08:08:05.324] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:05.324] | : . ' , getFutureData() ...
[08:08:05.324] | : . ' , ; getFutureCore() ...
[08:08:05.324] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:05.324] | : . ' , ; getFutureCore() ... done
[08:08:05.324] | : . ' , ; getFutureCapture() ...
[08:08:05.325] | : . ' , ; getFutureCapture() ... done
[08:08:05.325] | : . ' , ; getFutureContext() ...
[08:08:05.325] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.325] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:05.325] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.325] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:05.325] | : . ' , ; getFutureContext() ... done
[08:08:05.325] | : . ' , getFutureData() ... done
[08:08:05.326] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.327] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:05.327] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.327] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.327] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:05.327] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:05.327] | : . ' , ; ` | New stack:
[08:08:05.327] | : . ' , ; ` | List of 1
[08:08:05.327] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.327] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.327] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:05.327] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.327] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.327] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.327] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.327] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.330] | : . ' , ; ` | Old stack:
[08:08:05.330] | : . ' , ; ` | List of 1
[08:08:05.330] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.330] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.330] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:05.330] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.330] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.330] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.330] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:05.330] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.330] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.330] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.330] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.333] | : . ' , ; ` | Not identical
[08:08:05.333] | : . ' , ; ` | all.equal() for future ...
[08:08:05.333] | : . ' , ; ` | : List of 2
[08:08:05.333] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.333] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.333] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:05.333] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.333] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.333] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.333] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.333] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.333] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.333] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.333] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.333] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.333] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.333] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:05.333] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.333] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.333] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.339] | : . ' , ; ` | all.equal() for future ... done
[08:08:05.339] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:05.339] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:05.339] | : . ' , ; ` List of future strategies:
[08:08:05.339] | : . ' , ; ` 1. sequential:
[08:08:05.339] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:05.339] | : . ' , ; `    - tweaked: FALSE
[08:08:05.339] | : . ' , ; `    - call: plan(sequential)
[08:08:05.339] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:05.340] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.341] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.341] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.341] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:05.341] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:05.341] | : . ' , ; ` | : New stack:
[08:08:05.341] | : . ' , ; ` | : List of 1
[08:08:05.341] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.341] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.341] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.341] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.341] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.341] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.341] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:05.341] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.341] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.341] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.341] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.344] | : . ' , ; ` | : Old stack:
[08:08:05.345] | : . ' , ; ` | : List of 1
[08:08:05.345] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.345] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.345] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.345] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.345] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.345] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.345] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:05.345] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.345] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.345] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.345] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.348] | : . ' , ; ` | : Identical
[08:08:05.348] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:05.348] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:05.348] | : . ' , ; ` | List of future strategies:
[08:08:05.348] | : . ' , ; ` | 1. sequential:
[08:08:05.348] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:05.348] | : . ' , ; ` |    - tweaked: FALSE
[08:08:05.348] | : . ' , ; ` |    - call: plan(sequential)
[08:08:05.348] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:05.348] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.348] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.349] | : . ' , SequentialFuture started (and completed)
[08:08:05.349] | : . ' , signalConditions() ...
[08:08:05.349] | : . ' , ; include = ‘immediateCondition’
[08:08:05.349] | : . ' , ; exclude = 
[08:08:05.349] | : . ' , ; resignal = FALSE
[08:08:05.349] | : . ' , ; Number of conditions: 6
[08:08:05.349] | : . ' , ;  int 6
[08:08:05.350] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.350] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.350] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.350] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.350] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.350] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.350] | : . ' , signalConditions() ... done
[08:08:05.350] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:05.351] | : . Launching futures ... done
[08:08:05.351] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:05.351] | : Using SequentialFutureBackend ... done
[08:08:05.351] | run() for ‘Future’ (<unnamed-6>) ... done
[08:08:05.351] | signalConditions() ...
[08:08:05.351] | : include = ‘immediateCondition’
[08:08:05.351] | : exclude = 
[08:08:05.351] | : resignal = FALSE
[08:08:05.351] | : Number of conditions: 6
[08:08:05.351] | :  int 6
[08:08:05.352] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.352] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.352] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.352] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.352] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.352] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.352] | signalConditions() ... done
[08:08:05.353] | relay stdout ...
[08:08:05.353] | relay stdout ... done
[08:08:05.353] | check for misuse ...
[08:08:05.353] | check for misuse ... done
[08:08:05.353] | relay conditions ...
[08:08:05.353] | : Future state: ‘finished’
[08:08:05.353] | : signalConditions() ...
[08:08:05.353] | : . include = ‘condition’
[08:08:05.353] | : . exclude = ‘immediateCondition’
[08:08:05.353] | : . resignal = TRUE
[08:08:05.354] | : . Number of conditions: 6
[08:08:05.354] | : .  int 6
[08:08:05.354] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.354] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.325] | : . ' , attachPackages() ...
[08:08:05.354] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.354] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.326] | : . ' , ; packages: [n=1] ‘future’
[08:08:05.355] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.355] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.326] | : . ' , attachPackages() ... done
[08:08:05.355] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.355] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.326] | : . ' , attachPackages() ...
[08:08:05.356] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.356] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.326] | : . ' , ; packages: [n=0] 
[08:08:05.356] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.356] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.326] | : . ' , attachPackages() ... done
[08:08:05.356] | : signalConditions() ... done
[08:08:05.356] | relay conditions ... done
[08:08:05.356] value() for Future (<unnamed-6>) ... done

> message("*** %<-% to listenv: multiple dimensions ...")
*** %<-% to listenv: multiple dimensions ...

> x0 <- list()

> length(x0) <- 6

> dim(x0) <- c(3, 2)

> x <- listenv()

> length(x) <- 6

> dim(x) <- c(3, 2)

> for (cc in 1:ncol(x)) {
+     for (rr in 1:nrow(x)) {
+         x0[[rr, cc]] <- sprintf("(%s, %s)", rr, cc)
+         x[[rr, cc]] %<-% sprintf("(%s, ..." ... [TRUNCATED] 
[08:08:05.362] future(..., label = NULL) ...
[08:08:05.362] | lazy: TRUE
[08:08:05.362] | stdout: TRUE
[08:08:05.362] | conditions: [n=1] ‘condition’
[08:08:05.362] | gc: FALSE
[08:08:05.362] | earlySignal: FALSE
[08:08:05.363] | getGlobalsAndPackages() ...
[08:08:05.363] | : Searching for globals ...
[08:08:05.367] | : . globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[08:08:05.367] | : Searching for globals ... done
[08:08:05.367] | : Resolving globals: FALSE
[08:08:05.367] | : Search for packages associated with the globals ...
[08:08:05.367] | : . Packages associated with globals: [1] ‘base’
[08:08:05.367] | : . Packages: [1] ‘base’
[08:08:05.368] | : Search for packages associated with the globals ... done
[08:08:05.368] | : Packages after dropping 'base': [0] 
[08:08:05.368] | : globals: [2] ‘rr’, ‘cc’
[08:08:05.368] | : packages: [0] 
[08:08:05.368] | getGlobalsAndPackages() ... done
[08:08:05.368] future(..., label = NULL) ... done
[08:08:05.369] future(..., label = NULL) ...
[08:08:05.369] | lazy: TRUE
[08:08:05.369] | stdout: TRUE
[08:08:05.369] | conditions: [n=1] ‘condition’
[08:08:05.369] | gc: FALSE
[08:08:05.369] | earlySignal: FALSE
[08:08:05.369] | getGlobalsAndPackages() ...
[08:08:05.369] | : Searching for globals ...
[08:08:05.374] | : . globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[08:08:05.374] | : Searching for globals ... done
[08:08:05.374] | : Resolving globals: FALSE
[08:08:05.374] | : Search for packages associated with the globals ...
[08:08:05.374] | : . Packages associated with globals: [1] ‘base’
[08:08:05.375] | : . Packages: [1] ‘base’
[08:08:05.375] | : Search for packages associated with the globals ... done
[08:08:05.375] | : Packages after dropping 'base': [0] 
[08:08:05.375] | : globals: [2] ‘rr’, ‘cc’
[08:08:05.375] | : packages: [0] 
[08:08:05.375] | getGlobalsAndPackages() ... done
[08:08:05.375] future(..., label = NULL) ... done
[08:08:05.376] future(..., label = NULL) ...
[08:08:05.376] | lazy: TRUE
[08:08:05.376] | stdout: TRUE
[08:08:05.376] | conditions: [n=1] ‘condition’
[08:08:05.376] | gc: FALSE
[08:08:05.376] | earlySignal: FALSE
[08:08:05.376] | getGlobalsAndPackages() ...
[08:08:05.376] | : Searching for globals ...
[08:08:05.380] | : . globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[08:08:05.381] | : Searching for globals ... done
[08:08:05.381] | : Resolving globals: FALSE
[08:08:05.381] | : Search for packages associated with the globals ...
[08:08:05.381] | : . Packages associated with globals: [1] ‘base’
[08:08:05.381] | : . Packages: [1] ‘base’
[08:08:05.381] | : Search for packages associated with the globals ... done
[08:08:05.381] | : Packages after dropping 'base': [0] 
[08:08:05.381] | : globals: [2] ‘rr’, ‘cc’
[08:08:05.382] | : packages: [0] 
[08:08:05.382] | getGlobalsAndPackages() ... done
[08:08:05.382] future(..., label = NULL) ... done
[08:08:05.382] future(..., label = NULL) ...
[08:08:05.382] | lazy: TRUE
[08:08:05.382] | stdout: TRUE
[08:08:05.383] | conditions: [n=1] ‘condition’
[08:08:05.383] | gc: FALSE
[08:08:05.383] | earlySignal: FALSE
[08:08:05.383] | getGlobalsAndPackages() ...
[08:08:05.383] | : Searching for globals ...
[08:08:05.387] | : . globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[08:08:05.387] | : Searching for globals ... done
[08:08:05.387] | : Resolving globals: FALSE
[08:08:05.387] | : Search for packages associated with the globals ...
[08:08:05.387] | : . Packages associated with globals: [1] ‘base’
[08:08:05.388] | : . Packages: [1] ‘base’
[08:08:05.388] | : Search for packages associated with the globals ... done
[08:08:05.388] | : Packages after dropping 'base': [0] 
[08:08:05.388] | : globals: [2] ‘rr’, ‘cc’
[08:08:05.388] | : packages: [0] 
[08:08:05.388] | getGlobalsAndPackages() ... done
[08:08:05.388] future(..., label = NULL) ... done
[08:08:05.389] future(..., label = NULL) ...
[08:08:05.389] | lazy: TRUE
[08:08:05.390] | stdout: TRUE
[08:08:05.390] | conditions: [n=1] ‘condition’
[08:08:05.390] | gc: FALSE
[08:08:05.390] | earlySignal: FALSE
[08:08:05.390] | getGlobalsAndPackages() ...
[08:08:05.390] | : Searching for globals ...
[08:08:05.394] | : . globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[08:08:05.394] | : Searching for globals ... done
[08:08:05.394] | : Resolving globals: FALSE
[08:08:05.394] | : Search for packages associated with the globals ...
[08:08:05.394] | : . Packages associated with globals: [1] ‘base’
[08:08:05.395] | : . Packages: [1] ‘base’
[08:08:05.395] | : Search for packages associated with the globals ... done
[08:08:05.395] | : Packages after dropping 'base': [0] 
[08:08:05.395] | : globals: [2] ‘rr’, ‘cc’
[08:08:05.395] | : packages: [0] 
[08:08:05.395] | getGlobalsAndPackages() ... done
[08:08:05.395] future(..., label = NULL) ... done
[08:08:05.396] future(..., label = NULL) ...
[08:08:05.396] | lazy: TRUE
[08:08:05.396] | stdout: TRUE
[08:08:05.396] | conditions: [n=1] ‘condition’
[08:08:05.396] | gc: FALSE
[08:08:05.396] | earlySignal: FALSE
[08:08:05.396] | getGlobalsAndPackages() ...
[08:08:05.396] | : Searching for globals ...
[08:08:05.400] | : . globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[08:08:05.400] | : Searching for globals ... done
[08:08:05.401] | : Resolving globals: FALSE
[08:08:05.401] | : Search for packages associated with the globals ...
[08:08:05.401] | : . Packages associated with globals: [1] ‘base’
[08:08:05.401] | : . Packages: [1] ‘base’
[08:08:05.401] | : Search for packages associated with the globals ... done
[08:08:05.401] | : Packages after dropping 'base': [0] 
[08:08:05.401] | : globals: [2] ‘rr’, ‘cc’
[08:08:05.402] | : packages: [0] 
[08:08:05.402] | getGlobalsAndPackages() ... done
[08:08:05.402] future(..., label = NULL) ... done

> y <- as.list(x)
[08:08:05.402] value() for Future (<unnamed-7>) ...
[08:08:05.402] | run() for ‘Future’ (<unnamed-7>) ...
[08:08:05.402] | : state: ‘created’
[08:08:05.402] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.402] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.403] | : Using SequentialFutureBackend ...
[08:08:05.403] | : . Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:08:05.403] | : . Launching futures ...
[08:08:05.403] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:05.403] | : . ' , getFutureData() ...
[08:08:05.403] | : . ' , ; getFutureCore() ...
[08:08:05.403] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:05.403] | : . ' , ; getFutureCore() ... done
[08:08:05.403] | : . ' , ; getFutureCapture() ...
[08:08:05.403] | : . ' , ; getFutureCapture() ... done
[08:08:05.404] | : . ' , ; getFutureContext() ...
[08:08:05.404] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.404] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:05.404] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.404] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:05.404] | : . ' , ; getFutureContext() ... done
[08:08:05.404] | : . ' , getFutureData() ... done
[08:08:05.406] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.406] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:05.406] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.407] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.407] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:05.407] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:05.407] | : . ' , ; ` | New stack:
[08:08:05.407] | : . ' , ; ` | List of 1
[08:08:05.407] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.407] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.407] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:05.407] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.407] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.407] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.407] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.407] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.409] | : . ' , ; ` | Old stack:
[08:08:05.410] | : . ' , ; ` | List of 1
[08:08:05.410] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.410] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.410] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:05.410] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.410] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.410] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.410] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:05.410] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.410] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.410] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.410] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.413] | : . ' , ; ` | Not identical
[08:08:05.413] | : . ' , ; ` | all.equal() for future ...
[08:08:05.413] | : . ' , ; ` | : List of 2
[08:08:05.413] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.413] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.413] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:05.413] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.413] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.413] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.413] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.413] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.413] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.413] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.413] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.413] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.413] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.413] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:05.413] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.413] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.413] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.418] | : . ' , ; ` | all.equal() for future ... done
[08:08:05.418] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:05.418] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:05.418] | : . ' , ; ` List of future strategies:
[08:08:05.418] | : . ' , ; ` 1. sequential:
[08:08:05.418] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:05.418] | : . ' , ; `    - tweaked: FALSE
[08:08:05.418] | : . ' , ; `    - call: plan(sequential)
[08:08:05.418] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:05.419] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.419] | : . ' , assign_globals() ...
[08:08:05.419] | : . ' , List of 2
[08:08:05.419] | : . ' ,  $ rr: int 1
[08:08:05.419] | : . ' ,  $ cc: int 1
[08:08:05.419] | : . ' ,  - attr(*, "where")=List of 2
[08:08:05.419] | : . ' ,   ..$ rr:<environment: R_GlobalEnv> 
[08:08:05.419] | : . ' ,   ..$ cc:<environment: R_GlobalEnv> 
[08:08:05.419] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:05.419] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:08:05.419] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:05.419] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:05.422] | : . ' , - copied ‘rr’ to environment
[08:08:05.422] | : . ' , - copied ‘cc’ to environment
[08:08:05.422] | : . ' , assign_globals() ... done
[08:08:05.424] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.425] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.425] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:05.425] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:05.425] | : . ' , ; ` | : New stack:
[08:08:05.425] | : . ' , ; ` | : List of 1
[08:08:05.425] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.425] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.425] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.425] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.425] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.425] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.425] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:05.425] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.425] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.425] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.425] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.428] | : . ' , ; ` | : Old stack:
[08:08:05.428] | : . ' , ; ` | : List of 1
[08:08:05.428] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.428] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.428] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.428] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.428] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.428] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.428] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:05.428] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.428] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.428] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.428] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.431] | : . ' , ; ` | : Identical
[08:08:05.431] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:05.432] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:05.432] | : . ' , ; ` | List of future strategies:
[08:08:05.432] | : . ' , ; ` | 1. sequential:
[08:08:05.432] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:05.432] | : . ' , ; ` |    - tweaked: FALSE
[08:08:05.432] | : . ' , ; ` |    - call: plan(sequential)
[08:08:05.432] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:05.432] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.432] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.433] | : . ' , SequentialFuture started (and completed)
[08:08:05.433] | : . ' , signalConditions() ...
[08:08:05.433] | : . ' , ; include = ‘immediateCondition’
[08:08:05.433] | : . ' , ; exclude = 
[08:08:05.433] | : . ' , ; resignal = FALSE
[08:08:05.433] | : . ' , ; Number of conditions: 6
[08:08:05.433] | : . ' , ;  int 6
[08:08:05.434] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.434] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.434] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.434] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.434] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.434] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.435] | : . ' , signalConditions() ... done
[08:08:05.435] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:05.435] | : . Launching futures ... done
[08:08:05.435] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:05.435] | : Using SequentialFutureBackend ... done
[08:08:05.435] | run() for ‘Future’ (<unnamed-7>) ... done
[08:08:05.435] | signalConditions() ...
[08:08:05.435] | : include = ‘immediateCondition’
[08:08:05.435] | : exclude = 
[08:08:05.435] | : resignal = FALSE
[08:08:05.436] | : Number of conditions: 6
[08:08:05.436] | :  int 6
[08:08:05.436] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.436] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.436] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.436] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.436] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.437] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.437] | signalConditions() ... done
[08:08:05.437] | relay stdout ...
[08:08:05.437] | relay stdout ... done
[08:08:05.437] | check for misuse ...
[08:08:05.437] | check for misuse ... done
[08:08:05.437] | relay conditions ...
[08:08:05.437] | : Future state: ‘finished’
[08:08:05.437] | : signalConditions() ...
[08:08:05.437] | : . include = ‘condition’
[08:08:05.438] | : . exclude = ‘immediateCondition’
[08:08:05.438] | : . resignal = TRUE
[08:08:05.438] | : . Number of conditions: 6
[08:08:05.438] | : .  int 6
[08:08:05.438] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.438] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.404] | : . ' , attachPackages() ...
[08:08:05.438] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.439] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.405] | : . ' , ; packages: [n=1] ‘future’
[08:08:05.439] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.439] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.405] | : . ' , attachPackages() ... done
[08:08:05.439] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.439] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.405] | : . ' , attachPackages() ...
[08:08:05.439] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.439] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.405] | : . ' , ; packages: [n=0] 
[08:08:05.439] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.439] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.405] | : . ' , attachPackages() ... done
[08:08:05.440] | : signalConditions() ... done
[08:08:05.440] | relay conditions ... done
[08:08:05.440] value() for Future (<unnamed-7>) ... done
[08:08:05.440] value() for Future (<unnamed-8>) ...
[08:08:05.440] | run() for ‘Future’ (<unnamed-8>) ...
[08:08:05.440] | : state: ‘created’
[08:08:05.440] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.440] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.440] | : Using SequentialFutureBackend ...
[08:08:05.441] | : . Number of futures since start: 5 (5 created, 5 launched, 5 finished)
[08:08:05.441] | : . Launching futures ...
[08:08:05.441] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:05.441] | : . ' , getFutureData() ...
[08:08:05.441] | : . ' , ; getFutureCore() ...
[08:08:05.441] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:05.441] | : . ' , ; getFutureCore() ... done
[08:08:05.441] | : . ' , ; getFutureCapture() ...
[08:08:05.441] | : . ' , ; getFutureCapture() ... done
[08:08:05.441] | : . ' , ; getFutureContext() ...
[08:08:05.442] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.442] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:05.442] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.442] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:05.443] | : . ' , ; getFutureContext() ... done
[08:08:05.443] | : . ' , getFutureData() ... done
[08:08:05.444] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.444] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:05.445] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.445] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.445] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:05.445] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:05.445] | : . ' , ; ` | New stack:
[08:08:05.445] | : . ' , ; ` | List of 1
[08:08:05.445] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.445] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.445] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:05.445] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.445] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.445] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.445] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.445] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.448] | : . ' , ; ` | Old stack:
[08:08:05.448] | : . ' , ; ` | List of 1
[08:08:05.448] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.448] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.448] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:05.448] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.448] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.448] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.448] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:05.448] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.448] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.448] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.448] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.451] | : . ' , ; ` | Not identical
[08:08:05.451] | : . ' , ; ` | all.equal() for future ...
[08:08:05.451] | : . ' , ; ` | : List of 2
[08:08:05.451] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.451] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.451] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:05.451] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.451] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.451] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.451] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.451] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.451] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.451] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.451] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.451] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.451] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.451] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:05.451] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.451] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.451] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.456] | : . ' , ; ` | all.equal() for future ... done
[08:08:05.456] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:05.456] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:05.456] | : . ' , ; ` List of future strategies:
[08:08:05.456] | : . ' , ; ` 1. sequential:
[08:08:05.456] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:05.456] | : . ' , ; `    - tweaked: FALSE
[08:08:05.456] | : . ' , ; `    - call: plan(sequential)
[08:08:05.457] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:05.457] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.457] | : . ' , assign_globals() ...
[08:08:05.457] | : . ' , List of 2
[08:08:05.457] | : . ' ,  $ rr: int 2
[08:08:05.457] | : . ' ,  $ cc: int 1
[08:08:05.457] | : . ' ,  - attr(*, "where")=List of 2
[08:08:05.457] | : . ' ,   ..$ rr:<environment: R_GlobalEnv> 
[08:08:05.457] | : . ' ,   ..$ cc:<environment: R_GlobalEnv> 
[08:08:05.457] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:05.457] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:08:05.457] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:05.457] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:05.460] | : . ' , - copied ‘rr’ to environment
[08:08:05.461] | : . ' , - copied ‘cc’ to environment
[08:08:05.461] | : . ' , assign_globals() ... done
[08:08:05.462] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.463] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.463] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:05.463] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:05.463] | : . ' , ; ` | : New stack:
[08:08:05.463] | : . ' , ; ` | : List of 1
[08:08:05.463] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.463] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.463] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.463] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.463] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.463] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.463] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:05.463] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.463] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.463] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.463] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.466] | : . ' , ; ` | : Old stack:
[08:08:05.466] | : . ' , ; ` | : List of 1
[08:08:05.466] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.466] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.466] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.466] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.466] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.466] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.466] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:05.466] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.466] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.466] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.466] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.469] | : . ' , ; ` | : Identical
[08:08:05.469] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:05.469] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:05.469] | : . ' , ; ` | List of future strategies:
[08:08:05.469] | : . ' , ; ` | 1. sequential:
[08:08:05.469] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:05.469] | : . ' , ; ` |    - tweaked: FALSE
[08:08:05.469] | : . ' , ; ` |    - call: plan(sequential)
[08:08:05.470] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:05.470] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.470] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.470] | : . ' , SequentialFuture started (and completed)
[08:08:05.470] | : . ' , signalConditions() ...
[08:08:05.471] | : . ' , ; include = ‘immediateCondition’
[08:08:05.471] | : . ' , ; exclude = 
[08:08:05.471] | : . ' , ; resignal = FALSE
[08:08:05.471] | : . ' , ; Number of conditions: 6
[08:08:05.471] | : . ' , ;  int 6
[08:08:05.471] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.471] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.472] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.472] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.472] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.472] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.472] | : . ' , signalConditions() ... done
[08:08:05.472] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:05.472] | : . Launching futures ... done
[08:08:05.472] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:05.472] | : Using SequentialFutureBackend ... done
[08:08:05.472] | run() for ‘Future’ (<unnamed-8>) ... done
[08:08:05.473] | signalConditions() ...
[08:08:05.473] | : include = ‘immediateCondition’
[08:08:05.473] | : exclude = 
[08:08:05.473] | : resignal = FALSE
[08:08:05.473] | : Number of conditions: 6
[08:08:05.473] | :  int 6
[08:08:05.473] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.473] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.474] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.474] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.474] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.474] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.474] | signalConditions() ... done
[08:08:05.474] | relay stdout ...
[08:08:05.474] | relay stdout ... done
[08:08:05.474] | check for misuse ...
[08:08:05.474] | check for misuse ... done
[08:08:05.474] | relay conditions ...
[08:08:05.475] | : Future state: ‘finished’
[08:08:05.475] | : signalConditions() ...
[08:08:05.475] | : . include = ‘condition’
[08:08:05.475] | : . exclude = ‘immediateCondition’
[08:08:05.475] | : . resignal = TRUE
[08:08:05.475] | : . Number of conditions: 6
[08:08:05.475] | : .  int 6
[08:08:05.476] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.476] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.443] | : . ' , attachPackages() ...
[08:08:05.476] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.476] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.443] | : . ' , ; packages: [n=1] ‘future’
[08:08:05.476] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.476] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.444] | : . ' , attachPackages() ... done
[08:08:05.476] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.476] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.444] | : . ' , attachPackages() ...
[08:08:05.476] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.477] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.444] | : . ' , ; packages: [n=0] 
[08:08:05.477] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.477] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.444] | : . ' , attachPackages() ... done
[08:08:05.477] | : signalConditions() ... done
[08:08:05.477] | relay conditions ... done
[08:08:05.477] value() for Future (<unnamed-8>) ... done
[08:08:05.477] value() for Future (<unnamed-9>) ...
[08:08:05.477] | run() for ‘Future’ (<unnamed-9>) ...
[08:08:05.477] | : state: ‘created’
[08:08:05.478] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.478] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.478] | : Using SequentialFutureBackend ...
[08:08:05.478] | : . Number of futures since start: 6 (6 created, 6 launched, 6 finished)
[08:08:05.478] | : . Launching futures ...
[08:08:05.479] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:05.479] | : . ' , getFutureData() ...
[08:08:05.479] | : . ' , ; getFutureCore() ...
[08:08:05.479] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:05.479] | : . ' , ; getFutureCore() ... done
[08:08:05.479] | : . ' , ; getFutureCapture() ...
[08:08:05.479] | : . ' , ; getFutureCapture() ... done
[08:08:05.480] | : . ' , ; getFutureContext() ...
[08:08:05.480] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.480] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:05.480] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.480] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:05.480] | : . ' , ; getFutureContext() ... done
[08:08:05.480] | : . ' , getFutureData() ... done
[08:08:05.481] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.481] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:05.482] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.482] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.482] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:05.482] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:05.482] | : . ' , ; ` | New stack:
[08:08:05.482] | : . ' , ; ` | List of 1
[08:08:05.482] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.482] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.482] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:05.482] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.482] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.482] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.482] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.482] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.485] | : . ' , ; ` | Old stack:
[08:08:05.485] | : . ' , ; ` | List of 1
[08:08:05.485] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.485] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.485] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:05.485] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.485] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.485] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.485] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:05.485] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.485] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.485] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.485] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.488] | : . ' , ; ` | Not identical
[08:08:05.488] | : . ' , ; ` | all.equal() for future ...
[08:08:05.488] | : . ' , ; ` | : List of 2
[08:08:05.488] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.488] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.488] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:05.488] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.488] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.488] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.488] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.488] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.488] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.488] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.488] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.488] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.488] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.488] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:05.488] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.488] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.488] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.493] | : . ' , ; ` | all.equal() for future ... done
[08:08:05.493] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:05.493] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:05.493] | : . ' , ; ` List of future strategies:
[08:08:05.493] | : . ' , ; ` 1. sequential:
[08:08:05.493] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:05.493] | : . ' , ; `    - tweaked: FALSE
[08:08:05.493] | : . ' , ; `    - call: plan(sequential)
[08:08:05.493] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:05.494] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.494] | : . ' , assign_globals() ...
[08:08:05.494] | : . ' , List of 2
[08:08:05.494] | : . ' ,  $ rr: int 3
[08:08:05.494] | : . ' ,  $ cc: int 1
[08:08:05.494] | : . ' ,  - attr(*, "where")=List of 2
[08:08:05.494] | : . ' ,   ..$ rr:<environment: R_GlobalEnv> 
[08:08:05.494] | : . ' ,   ..$ cc:<environment: R_GlobalEnv> 
[08:08:05.494] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:05.494] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:08:05.494] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:05.494] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:05.497] | : . ' , - copied ‘rr’ to environment
[08:08:05.498] | : . ' , - copied ‘cc’ to environment
[08:08:05.498] | : . ' , assign_globals() ... done
[08:08:05.499] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.499] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.499] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:05.499] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:05.500] | : . ' , ; ` | : New stack:
[08:08:05.500] | : . ' , ; ` | : List of 1
[08:08:05.500] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.500] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.500] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.500] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.500] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.500] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.500] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:05.500] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.500] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.500] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.500] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.503] | : . ' , ; ` | : Old stack:
[08:08:05.503] | : . ' , ; ` | : List of 1
[08:08:05.503] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.503] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.503] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.503] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.503] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.503] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.503] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:05.503] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.503] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.503] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.503] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.506] | : . ' , ; ` | : Identical
[08:08:05.506] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:05.506] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:05.506] | : . ' , ; ` | List of future strategies:
[08:08:05.506] | : . ' , ; ` | 1. sequential:
[08:08:05.506] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:05.506] | : . ' , ; ` |    - tweaked: FALSE
[08:08:05.506] | : . ' , ; ` |    - call: plan(sequential)
[08:08:05.507] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:05.507] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.507] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.507] | : . ' , SequentialFuture started (and completed)
[08:08:05.507] | : . ' , signalConditions() ...
[08:08:05.507] | : . ' , ; include = ‘immediateCondition’
[08:08:05.507] | : . ' , ; exclude = 
[08:08:05.507] | : . ' , ; resignal = FALSE
[08:08:05.508] | : . ' , ; Number of conditions: 6
[08:08:05.508] | : . ' , ;  int 6
[08:08:05.508] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.508] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.508] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.508] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.508] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.509] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.509] | : . ' , signalConditions() ... done
[08:08:05.509] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:05.509] | : . Launching futures ... done
[08:08:05.509] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:05.509] | : Using SequentialFutureBackend ... done
[08:08:05.509] | run() for ‘Future’ (<unnamed-9>) ... done
[08:08:05.509] | signalConditions() ...
[08:08:05.509] | : include = ‘immediateCondition’
[08:08:05.509] | : exclude = 
[08:08:05.510] | : resignal = FALSE
[08:08:05.510] | : Number of conditions: 6
[08:08:05.510] | :  int 6
[08:08:05.510] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.510] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.510] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.510] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.511] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.511] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.511] | signalConditions() ... done
[08:08:05.511] | relay stdout ...
[08:08:05.511] | relay stdout ... done
[08:08:05.511] | check for misuse ...
[08:08:05.511] | check for misuse ... done
[08:08:05.511] | relay conditions ...
[08:08:05.511] | : Future state: ‘finished’
[08:08:05.511] | : signalConditions() ...
[08:08:05.512] | : . include = ‘condition’
[08:08:05.512] | : . exclude = ‘immediateCondition’
[08:08:05.512] | : . resignal = TRUE
[08:08:05.512] | : . Number of conditions: 6
[08:08:05.512] | : .  int 6
[08:08:05.512] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.512] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.480] | : . ' , attachPackages() ...
[08:08:05.512] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.513] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.480] | : . ' , ; packages: [n=1] ‘future’
[08:08:05.513] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.513] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.481] | : . ' , attachPackages() ... done
[08:08:05.513] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.538] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.481] | : . ' , attachPackages() ...
[08:08:05.538] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.538] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.481] | : . ' , ; packages: [n=0] 
[08:08:05.539] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.539] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.481] | : . ' , attachPackages() ... done
[08:08:05.539] | : signalConditions() ... done
[08:08:05.539] | relay conditions ... done
[08:08:05.539] value() for Future (<unnamed-9>) ... done
[08:08:05.539] value() for Future (<unnamed-10>) ...
[08:08:05.539] | run() for ‘Future’ (<unnamed-10>) ...
[08:08:05.539] | : state: ‘created’
[08:08:05.540] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.540] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.540] | : Using SequentialFutureBackend ...
[08:08:05.540] | : . Number of futures since start: 7 (7 created, 7 launched, 7 finished)
[08:08:05.540] | : . Launching futures ...
[08:08:05.540] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:05.540] | : . ' , getFutureData() ...
[08:08:05.540] | : . ' , ; getFutureCore() ...
[08:08:05.541] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:05.541] | : . ' , ; getFutureCore() ... done
[08:08:05.541] | : . ' , ; getFutureCapture() ...
[08:08:05.541] | : . ' , ; getFutureCapture() ... done
[08:08:05.541] | : . ' , ; getFutureContext() ...
[08:08:05.541] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.541] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:05.541] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.541] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:05.542] | : . ' , ; getFutureContext() ... done
[08:08:05.542] | : . ' , getFutureData() ... done
[08:08:05.543] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.543] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:05.543] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.543] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.544] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:05.544] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:05.544] | : . ' , ; ` | New stack:
[08:08:05.544] | : . ' , ; ` | List of 1
[08:08:05.544] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.544] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.544] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:05.544] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.544] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.544] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.544] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.544] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.547] | : . ' , ; ` | Old stack:
[08:08:05.547] | : . ' , ; ` | List of 1
[08:08:05.547] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.547] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.547] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:05.547] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.547] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.547] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.547] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:05.547] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.547] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.547] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.547] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.550] | : . ' , ; ` | Not identical
[08:08:05.550] | : . ' , ; ` | all.equal() for future ...
[08:08:05.550] | : . ' , ; ` | : List of 2
[08:08:05.550] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.550] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.550] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:05.550] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.550] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.550] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.550] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.550] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.550] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.550] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.550] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.550] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.550] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.550] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:05.550] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.550] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.550] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.555] | : . ' , ; ` | all.equal() for future ... done
[08:08:05.555] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:05.556] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:05.556] | : . ' , ; ` List of future strategies:
[08:08:05.556] | : . ' , ; ` 1. sequential:
[08:08:05.556] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:05.556] | : . ' , ; `    - tweaked: FALSE
[08:08:05.556] | : . ' , ; `    - call: plan(sequential)
[08:08:05.556] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:05.556] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.556] | : . ' , assign_globals() ...
[08:08:05.557] | : . ' , List of 2
[08:08:05.557] | : . ' ,  $ rr: int 1
[08:08:05.557] | : . ' ,  $ cc: int 2
[08:08:05.557] | : . ' ,  - attr(*, "where")=List of 2
[08:08:05.557] | : . ' ,   ..$ rr:<environment: R_GlobalEnv> 
[08:08:05.557] | : . ' ,   ..$ cc:<environment: R_GlobalEnv> 
[08:08:05.557] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:05.557] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:08:05.557] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:05.557] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:05.561] | : . ' , - copied ‘rr’ to environment
[08:08:05.561] | : . ' , - copied ‘cc’ to environment
[08:08:05.561] | : . ' , assign_globals() ... done
[08:08:05.562] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.562] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.563] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:05.563] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:05.563] | : . ' , ; ` | : New stack:
[08:08:05.563] | : . ' , ; ` | : List of 1
[08:08:05.563] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.563] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.563] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.563] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.563] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.563] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.563] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:05.563] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.563] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.563] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.563] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.566] | : . ' , ; ` | : Old stack:
[08:08:05.566] | : . ' , ; ` | : List of 1
[08:08:05.566] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.566] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.566] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.566] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.566] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.566] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.566] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:05.566] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.566] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.566] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.566] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.569] | : . ' , ; ` | : Identical
[08:08:05.569] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:05.570] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:05.570] | : . ' , ; ` | List of future strategies:
[08:08:05.570] | : . ' , ; ` | 1. sequential:
[08:08:05.570] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:05.570] | : . ' , ; ` |    - tweaked: FALSE
[08:08:05.570] | : . ' , ; ` |    - call: plan(sequential)
[08:08:05.570] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:05.570] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.570] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.571] | : . ' , SequentialFuture started (and completed)
[08:08:05.571] | : . ' , signalConditions() ...
[08:08:05.571] | : . ' , ; include = ‘immediateCondition’
[08:08:05.571] | : . ' , ; exclude = 
[08:08:05.571] | : . ' , ; resignal = FALSE
[08:08:05.571] | : . ' , ; Number of conditions: 6
[08:08:05.571] | : . ' , ;  int 6
[08:08:05.572] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.572] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.572] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.572] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.572] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.572] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.572] | : . ' , signalConditions() ... done
[08:08:05.572] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:05.573] | : . Launching futures ... done
[08:08:05.573] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:05.573] | : Using SequentialFutureBackend ... done
[08:08:05.573] | run() for ‘Future’ (<unnamed-10>) ... done
[08:08:05.573] | signalConditions() ...
[08:08:05.573] | : include = ‘immediateCondition’
[08:08:05.573] | : exclude = 
[08:08:05.573] | : resignal = FALSE
[08:08:05.573] | : Number of conditions: 6
[08:08:05.573] | :  int 6
[08:08:05.574] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.574] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.574] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.574] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.574] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.574] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.575] | signalConditions() ... done
[08:08:05.575] | relay stdout ...
[08:08:05.575] | relay stdout ... done
[08:08:05.575] | check for misuse ...
[08:08:05.575] | check for misuse ... done
[08:08:05.575] | relay conditions ...
[08:08:05.575] | : Future state: ‘finished’
[08:08:05.575] | : signalConditions() ...
[08:08:05.575] | : . include = ‘condition’
[08:08:05.575] | : . exclude = ‘immediateCondition’
[08:08:05.576] | : . resignal = TRUE
[08:08:05.576] | : . Number of conditions: 6
[08:08:05.576] | : .  int 6
[08:08:05.576] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.576] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.542] | : . ' , attachPackages() ...
[08:08:05.576] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.577] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.542] | : . ' , ; packages: [n=1] ‘future’
[08:08:05.577] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.577] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.542] | : . ' , attachPackages() ... done
[08:08:05.577] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.577] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.542] | : . ' , attachPackages() ...
[08:08:05.577] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.577] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.543] | : . ' , ; packages: [n=0] 
[08:08:05.577] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.577] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.543] | : . ' , attachPackages() ... done
[08:08:05.578] | : signalConditions() ... done
[08:08:05.578] | relay conditions ... done
[08:08:05.578] value() for Future (<unnamed-10>) ... done
[08:08:05.578] value() for Future (<unnamed-11>) ...
[08:08:05.578] | run() for ‘Future’ (<unnamed-11>) ...
[08:08:05.578] | : state: ‘created’
[08:08:05.578] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.578] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.578] | : Using SequentialFutureBackend ...
[08:08:05.579] | : . Number of futures since start: 8 (8 created, 8 launched, 8 finished)
[08:08:05.579] | : . Launching futures ...
[08:08:05.579] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:05.579] | : . ' , getFutureData() ...
[08:08:05.579] | : . ' , ; getFutureCore() ...
[08:08:05.579] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:05.579] | : . ' , ; getFutureCore() ... done
[08:08:05.579] | : . ' , ; getFutureCapture() ...
[08:08:05.579] | : . ' , ; getFutureCapture() ... done
[08:08:05.581] | : . ' , ; getFutureContext() ...
[08:08:05.581] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.581] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:05.581] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.581] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:05.581] | : . ' , ; getFutureContext() ... done
[08:08:05.581] | : . ' , getFutureData() ... done
[08:08:05.583] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.583] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:05.583] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.583] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.583] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:05.583] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:05.584] | : . ' , ; ` | New stack:
[08:08:05.584] | : . ' , ; ` | List of 1
[08:08:05.584] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.584] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.584] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:05.584] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.584] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.584] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.584] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.584] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.586] | : . ' , ; ` | Old stack:
[08:08:05.586] | : . ' , ; ` | List of 1
[08:08:05.586] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.586] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.586] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:05.586] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.586] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.586] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.586] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:05.586] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.586] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.586] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.586] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.589] | : . ' , ; ` | Not identical
[08:08:05.590] | : . ' , ; ` | all.equal() for future ...
[08:08:05.590] | : . ' , ; ` | : List of 2
[08:08:05.590] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.590] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.590] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:05.590] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.590] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.590] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.590] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.590] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.590] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.590] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.590] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.590] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.590] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.590] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:05.590] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.590] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.590] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.595] | : . ' , ; ` | all.equal() for future ... done
[08:08:05.595] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:05.595] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:05.595] | : . ' , ; ` List of future strategies:
[08:08:05.595] | : . ' , ; ` 1. sequential:
[08:08:05.595] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:05.595] | : . ' , ; `    - tweaked: FALSE
[08:08:05.595] | : . ' , ; `    - call: plan(sequential)
[08:08:05.596] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:05.596] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.596] | : . ' , assign_globals() ...
[08:08:05.596] | : . ' , List of 2
[08:08:05.596] | : . ' ,  $ rr: int 2
[08:08:05.596] | : . ' ,  $ cc: int 2
[08:08:05.596] | : . ' ,  - attr(*, "where")=List of 2
[08:08:05.596] | : . ' ,   ..$ rr:<environment: R_GlobalEnv> 
[08:08:05.596] | : . ' ,   ..$ cc:<environment: R_GlobalEnv> 
[08:08:05.596] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:05.596] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:08:05.596] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:05.596] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:05.599] | : . ' , - copied ‘rr’ to environment
[08:08:05.599] | : . ' , - copied ‘cc’ to environment
[08:08:05.599] | : . ' , assign_globals() ... done
[08:08:05.602] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.602] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.602] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:05.602] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:05.602] | : . ' , ; ` | : New stack:
[08:08:05.602] | : . ' , ; ` | : List of 1
[08:08:05.602] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.602] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.602] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.602] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.602] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.602] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.602] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:05.602] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.602] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.602] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.602] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.606] | : . ' , ; ` | : Old stack:
[08:08:05.606] | : . ' , ; ` | : List of 1
[08:08:05.606] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.606] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.606] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.606] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.606] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.606] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.606] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:05.606] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.606] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.606] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.606] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.609] | : . ' , ; ` | : Identical
[08:08:05.609] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:05.609] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:05.609] | : . ' , ; ` | List of future strategies:
[08:08:05.609] | : . ' , ; ` | 1. sequential:
[08:08:05.609] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:05.609] | : . ' , ; ` |    - tweaked: FALSE
[08:08:05.609] | : . ' , ; ` |    - call: plan(sequential)
[08:08:05.609] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:05.610] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.610] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.610] | : . ' , SequentialFuture started (and completed)
[08:08:05.610] | : . ' , signalConditions() ...
[08:08:05.610] | : . ' , ; include = ‘immediateCondition’
[08:08:05.610] | : . ' , ; exclude = 
[08:08:05.610] | : . ' , ; resignal = FALSE
[08:08:05.610] | : . ' , ; Number of conditions: 6
[08:08:05.611] | : . ' , ;  int 6
[08:08:05.611] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.611] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.611] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.611] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.611] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.612] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.612] | : . ' , signalConditions() ... done
[08:08:05.612] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:05.612] | : . Launching futures ... done
[08:08:05.612] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:05.612] | : Using SequentialFutureBackend ... done
[08:08:05.612] | run() for ‘Future’ (<unnamed-11>) ... done
[08:08:05.612] | signalConditions() ...
[08:08:05.612] | : include = ‘immediateCondition’
[08:08:05.612] | : exclude = 
[08:08:05.613] | : resignal = FALSE
[08:08:05.613] | : Number of conditions: 6
[08:08:05.613] | :  int 6
[08:08:05.613] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.613] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.613] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.613] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.614] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.614] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.614] | signalConditions() ... done
[08:08:05.614] | relay stdout ...
[08:08:05.614] | relay stdout ... done
[08:08:05.614] | check for misuse ...
[08:08:05.614] | check for misuse ... done
[08:08:05.614] | relay conditions ...
[08:08:05.614] | : Future state: ‘finished’
[08:08:05.615] | : signalConditions() ...
[08:08:05.615] | : . include = ‘condition’
[08:08:05.615] | : . exclude = ‘immediateCondition’
[08:08:05.615] | : . resignal = TRUE
[08:08:05.615] | : . Number of conditions: 6
[08:08:05.615] | : .  int 6
[08:08:05.615] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.615] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.582] | : . ' , attachPackages() ...
[08:08:05.616] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.616] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.582] | : . ' , ; packages: [n=1] ‘future’
[08:08:05.616] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.616] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.582] | : . ' , attachPackages() ... done
[08:08:05.616] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.616] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.582] | : . ' , attachPackages() ...
[08:08:05.616] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.616] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.582] | : . ' , ; packages: [n=0] 
[08:08:05.617] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.617] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.582] | : . ' , attachPackages() ... done
[08:08:05.617] | : signalConditions() ... done
[08:08:05.617] | relay conditions ... done
[08:08:05.617] value() for Future (<unnamed-11>) ... done
[08:08:05.617] value() for Future (<unnamed-12>) ...
[08:08:05.617] | run() for ‘Future’ (<unnamed-12>) ...
[08:08:05.617] | : state: ‘created’
[08:08:05.617] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.618] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.618] | : Using SequentialFutureBackend ...
[08:08:05.618] | : . Number of futures since start: 9 (9 created, 9 launched, 9 finished)
[08:08:05.618] | : . Launching futures ...
[08:08:05.618] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:05.618] | : . ' , getFutureData() ...
[08:08:05.618] | : . ' , ; getFutureCore() ...
[08:08:05.618] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:05.618] | : . ' , ; getFutureCore() ... done
[08:08:05.619] | : . ' , ; getFutureCapture() ...
[08:08:05.619] | : . ' , ; getFutureCapture() ... done
[08:08:05.619] | : . ' , ; getFutureContext() ...
[08:08:05.619] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.619] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:05.619] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.619] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:05.619] | : . ' , ; getFutureContext() ... done
[08:08:05.619] | : . ' , getFutureData() ... done
[08:08:05.621] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:05.621] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:05.621] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:05.622] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.622] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:05.622] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:05.623] | : . ' , ; ` | New stack:
[08:08:05.623] | : . ' , ; ` | List of 1
[08:08:05.623] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.623] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.623] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:05.623] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.623] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.623] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.623] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.623] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.625] | : . ' , ; ` | Old stack:
[08:08:05.625] | : . ' , ; ` | List of 1
[08:08:05.625] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.625] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.625] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:05.625] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.625] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.625] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.625] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:05.625] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.625] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.625] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.625] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.628] | : . ' , ; ` | Not identical
[08:08:05.629] | : . ' , ; ` | all.equal() for future ...
[08:08:05.629] | : . ' , ; ` | : List of 2
[08:08:05.629] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.629] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.629] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:05.629] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.629] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.629] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.629] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:05.629] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.629] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.629] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.629] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.629] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.629] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.629] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:05.629] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.629] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.629] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.634] | : . ' , ; ` | all.equal() for future ... done
[08:08:05.634] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:05.634] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:05.634] | : . ' , ; ` List of future strategies:
[08:08:05.634] | : . ' , ; ` 1. sequential:
[08:08:05.634] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:05.634] | : . ' , ; `    - tweaked: FALSE
[08:08:05.634] | : . ' , ; `    - call: plan(sequential)
[08:08:05.634] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:05.634] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.635] | : . ' , assign_globals() ...
[08:08:05.635] | : . ' , List of 2
[08:08:05.635] | : . ' ,  $ rr: int 3
[08:08:05.635] | : . ' ,  $ cc: int 2
[08:08:05.635] | : . ' ,  - attr(*, "where")=List of 2
[08:08:05.635] | : . ' ,   ..$ rr:<environment: R_GlobalEnv> 
[08:08:05.635] | : . ' ,   ..$ cc:<environment: R_GlobalEnv> 
[08:08:05.635] | : . ' ,  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:08:05.635] | : . ' ,  - attr(*, "resolved")= logi FALSE
[08:08:05.635] | : . ' ,  - attr(*, "total_size")= num NA
[08:08:05.635] | : . ' ,  - attr(*, "already-done")= logi TRUE
[08:08:05.638] | : . ' , - copied ‘rr’ to environment
[08:08:05.638] | : . ' , - copied ‘cc’ to environment
[08:08:05.638] | : . ' , assign_globals() ... done
[08:08:05.639] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.640] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:05.640] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:05.640] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:05.640] | : . ' , ; ` | : New stack:
[08:08:05.640] | : . ' , ; ` | : List of 1
[08:08:05.640] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.640] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.640] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.640] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.640] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.640] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.640] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:05.640] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.640] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.640] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.640] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.644] | : . ' , ; ` | : Old stack:
[08:08:05.644] | : . ' , ; ` | : List of 1
[08:08:05.644] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:05.644] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:05.644] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:05.644] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.644] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.644] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.644] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:05.644] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563e9956b308> 
[08:08:05.644] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:05.644] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:05.644] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:05.647] | : . ' , ; ` | : Identical
[08:08:05.647] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:05.647] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:05.647] | : . ' , ; ` | List of future strategies:
[08:08:05.647] | : . ' , ; ` | 1. sequential:
[08:08:05.647] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:05.647] | : . ' , ; ` |    - tweaked: FALSE
[08:08:05.647] | : . ' , ; ` |    - call: plan(sequential)
[08:08:05.648] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:05.648] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.648] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:05.648] | : . ' , SequentialFuture started (and completed)
[08:08:05.648] | : . ' , signalConditions() ...
[08:08:05.649] | : . ' , ; include = ‘immediateCondition’
[08:08:05.649] | : . ' , ; exclude = 
[08:08:05.649] | : . ' , ; resignal = FALSE
[08:08:05.649] | : . ' , ; Number of conditions: 6
[08:08:05.649] | : . ' , ;  int 6
[08:08:05.649] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.649] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.649] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.650] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.650] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.650] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.650] | : . ' , signalConditions() ... done
[08:08:05.650] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:05.650] | : . Launching futures ... done
[08:08:05.650] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:05.650] | : Using SequentialFutureBackend ... done
[08:08:05.650] | run() for ‘Future’ (<unnamed-12>) ... done
[08:08:05.651] | signalConditions() ...
[08:08:05.651] | : include = ‘immediateCondition’
[08:08:05.651] | : exclude = 
[08:08:05.651] | : resignal = FALSE
[08:08:05.651] | : Number of conditions: 6
[08:08:05.651] | :  int 6
[08:08:05.651] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.651] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.652] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.652] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.652] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.652] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.652] | signalConditions() ... done
[08:08:05.652] | relay stdout ...
[08:08:05.652] | relay stdout ... done
[08:08:05.652] | check for misuse ...
[08:08:05.652] | check for misuse ... done
[08:08:05.652] | relay conditions ...
[08:08:05.653] | : Future state: ‘finished’
[08:08:05.653] | : signalConditions() ...
[08:08:05.653] | : . include = ‘condition’
[08:08:05.653] | : . exclude = ‘immediateCondition’
[08:08:05.653] | : . resignal = TRUE
[08:08:05.653] | : . Number of conditions: 6
[08:08:05.653] | : .  int 6
[08:08:05.653] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.654] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.620] | : . ' , attachPackages() ...
[08:08:05.654] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.654] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.620] | : . ' , ; packages: [n=1] ‘future’
[08:08:05.654] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.654] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.620] | : . ' , attachPackages() ... done
[08:08:05.654] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.654] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.620] | : . ' , attachPackages() ...
[08:08:05.654] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.655] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.620] | : . ' , ; packages: [n=0] 
[08:08:05.655] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:05.655] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:05.620] | : . ' , attachPackages() ... done
[08:08:05.655] | : signalConditions() ... done
[08:08:05.655] | relay conditions ... done
[08:08:05.655] value() for Future (<unnamed-12>) ... done

> dim(y) <- dim(x)

> stopifnot(identical(y, x0))

> message("*** %<-% to listenv: multiple dimensions ... DONE")
*** %<-% to listenv: multiple dimensions ... DONE

> message("*** %<-% to listenv ... DONE")
*** %<-% to listenv ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.6s, sys.self=0.006s, elapsed=0.6s, user.child=0.001s, sys.child=0.005s
Test ‘futureAssign_OP_with_listenv’ ... success
> 
