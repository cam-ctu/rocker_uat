
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script incl/testme/test-futureAssign_OP_with_environment.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("futureAssign_OP_with_environment")
Test ‘futureAssign_OP_with_environment’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-futureAssign_OP_with_environment.R’

> library(future)
[10:52:41.695] Option 'future.startup.script': TRUE
[10:52:41.696] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[10:52:41.696] Future startup scripts found: <none>

> message("*** %<-% to environment ...")
*** %<-% to environment ...

> z <- new.env()

> stopifnot(length(names(z)) == 0)

> message("*** %<-% to environment: Assign by index (not allowed)")
*** %<-% to environment: Assign by index (not allowed)

> res <- try(z[[1]] %<-% {
+     2
+ } %lazy% TRUE, silent = TRUE)

> stopifnot(inherits(res, "try-error"))

> message("*** %<-% to environment: Assign by name (new)")
*** %<-% to environment: Assign by name (new)

> z$B %<-% {
+     TRUE
+ } %lazy% TRUE
[10:52:41.699] getGlobalsAndPackages() ...
[10:52:41.699] |  Searching for globals ...
[10:52:41.705] |  :  globals found: [1] ‘{’
[10:52:41.706] |  Searching for globals ... DONE
[10:52:41.706] |  Resolving globals: FALSE
[10:52:41.706] |  Search for packages associated with the globals ...
[10:52:41.706] |  :  Packages associated with globals: [1] ‘base’
[10:52:41.706] |  :  Packages: [1] ‘base’
[10:52:41.707] |  Search for packages associated with the globals ... DONE
[10:52:41.707] |  Packages after dropping 'base': [0] 
[10:52:41.707] |  globals: [0] 
[10:52:41.707] |  packages: [0] 
[10:52:41.707] getGlobalsAndPackages() ... done

> stopifnot(length(z) == 2)

> stopifnot("B" %in% ls(z))

> y <- as.list(z)
[10:52:41.708] run() for Future (‘Future’) ...
[10:52:41.708] |  state: ‘created’
[10:52:41.710] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:41.710] |  :  makeFutureBackend(<sequential>) ...
[10:52:41.710] |  :  .  Backend function: <‘NULL’>
[10:52:41.711] |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:41.711] |  :  makeFutureBackend(<sequential>) ... done
[10:52:41.711] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:41.711] |  Using SequentialFutureBackend ...
[10:52:41.711] |  :  Launching futures ...
[10:52:41.712] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:41.712] |  :  .  |  getFutureData() ...
[10:52:41.712] |  :  .  |  :  getFutureCore() ...
[10:52:41.712] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:41.712] |  :  .  |  :  getFutureCore() ... done
[10:52:41.712] |  :  .  |  :  getFutureCapture() ...
[10:52:41.712] |  :  .  |  :  getFutureCapture() ... done
[10:52:41.712] |  :  .  |  :  getFutureContext() ...
[10:52:41.713] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:41.713] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:41.713] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:41.713] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:41.713] |  :  .  |  :  getFutureContext() ... done
[10:52:41.713] |  :  .  |  getFutureData() ... done
[10:52:41.714] |  :  .  |  attachPackages() ...
[10:52:41.714] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:41.715] |  :  .  |  attachPackages() ... DONE
[10:52:41.715] |  :  .  |  attachPackages() ...
[10:52:41.715] |  :  .  |  :  packages: [n=0] 
[10:52:41.715] |  :  .  |  attachPackages() ... DONE
[10:52:41.715] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:41.715] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:41.715] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:41.716] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:41.716] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:41.716] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:41.716] |  :  .  |  :  .  |  New stack:
[10:52:41.716] |  :  .  |  :  .  |  List of 1
[10:52:41.716] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.716] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.716] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.716] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.716] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.716] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:41.716] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.720] |  :  .  |  :  .  |  Old stack:
[10:52:41.720] |  :  .  |  :  .  |  List of 1
[10:52:41.720] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.720] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.720] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.720] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.720] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.720] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:41.720] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55b2e4ea02e8> 
[10:52:41.720] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.720] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.720] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.724] |  :  .  |  :  .  |  Not identical
[10:52:41.724] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:41.724] |  :  .  |  :  .  |  :  List of 2
[10:52:41.724] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.724] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.724] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.724] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.724] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.724] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:41.724] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.724] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.724] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.724] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.724] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.724] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:41.724] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55b2e4ea02e8> 
[10:52:41.724] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.724] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.728] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:41.728] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:41.729] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:41.729] |  :  .  |  :  .  List of future strategies:
[10:52:41.729] |  :  .  |  :  .  1. sequential:
[10:52:41.729] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:41.729] |  :  .  |  :  .     - tweaked: FALSE
[10:52:41.729] |  :  .  |  :  .     - call: plan(sequential)
[10:52:41.729] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:41.729] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:41.732] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:41.732] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:41.732] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:41.732] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:41.732] |  :  .  |  :  .  |  :  New stack:
[10:52:41.732] |  :  .  |  :  .  |  :  List of 1
[10:52:41.732] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.732] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.732] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.732] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.732] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.732] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:41.732] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55b2e4ea02e8> 
[10:52:41.732] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.732] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.732] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.735] |  :  .  |  :  .  |  :  Old stack:
[10:52:41.735] |  :  .  |  :  .  |  :  List of 1
[10:52:41.735] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.735] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.735] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.735] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.735] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.735] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:41.735] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55b2e4ea02e8> 
[10:52:41.735] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.735] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.735] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.739] |  :  .  |  :  .  |  :  Identical
[10:52:41.739] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:41.739] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:41.740] |  :  .  |  :  .  |  List of future strategies:
[10:52:41.740] |  :  .  |  :  .  |  1. sequential:
[10:52:41.740] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:41.740] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:41.740] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:41.740] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:41.740] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:41.740] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:41.740] |  :  .  |  SequentialFuture started (and completed)
[10:52:41.741] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:41.741] |  :  Launching futures ... done
[10:52:41.741] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:41.741] |  Using SequentialFutureBackend ... done
[10:52:41.741] run() for Future (‘SequentialFuture’) ... done

> str(y)
List of 1
 $ B: logi TRUE

> stopifnot(length(y) == 1)

> stopifnot(identical(names(y), "B"))

> message("*** %<-% to environment: Potential task name clashes")
*** %<-% to environment: Potential task name clashes

> u <- new.env()

> u$a %<-% {
+     1
+ } %lazy% TRUE
[10:52:41.743] getGlobalsAndPackages() ...
[10:52:41.743] |  Searching for globals ...
[10:52:41.743] |  :  globals found: [1] ‘{’
[10:52:41.743] |  Searching for globals ... DONE
[10:52:41.744] |  Resolving globals: FALSE
[10:52:41.744] |  Search for packages associated with the globals ...
[10:52:41.744] |  :  Packages associated with globals: [1] ‘base’
[10:52:41.744] |  :  Packages: [1] ‘base’
[10:52:41.744] |  Search for packages associated with the globals ... DONE
[10:52:41.744] |  Packages after dropping 'base': [0] 
[10:52:41.744] |  globals: [0] 
[10:52:41.744] |  packages: [0] 
[10:52:41.744] getGlobalsAndPackages() ... done

> stopifnot(length(u) == 2)

> stopifnot("a" %in% names(u))

> fu <- futureOf(u$a)

> v <- new.env()

> v$a %<-% {
+     2
+ } %lazy% TRUE
[10:52:41.745] getGlobalsAndPackages() ...
[10:52:41.746] |  Searching for globals ...
[10:52:41.746] |  :  globals found: [1] ‘{’
[10:52:41.746] |  Searching for globals ... DONE
[10:52:41.746] |  Resolving globals: FALSE
[10:52:41.746] |  Search for packages associated with the globals ...
[10:52:41.747] |  :  Packages associated with globals: [1] ‘base’
[10:52:41.747] |  :  Packages: [1] ‘base’
[10:52:41.747] |  Search for packages associated with the globals ... DONE
[10:52:41.747] |  Packages after dropping 'base': [0] 
[10:52:41.747] |  globals: [0] 
[10:52:41.747] |  packages: [0] 
[10:52:41.747] getGlobalsAndPackages() ... done

> stopifnot(length(v) == 2)

> stopifnot("a" %in% names(v))

> fv <- futureOf(v$a)

> stopifnot(!identical(fu, fv))

> fu <- futureOf(u$a)

> stopifnot(!identical(fu, fv))

> stopifnot(identical(u$a, 1))
[10:52:41.748] run() for Future (‘Future’) ...
[10:52:41.748] |  state: ‘created’
[10:52:41.748] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:41.748] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:41.749] |  Using SequentialFutureBackend ...
[10:52:41.749] |  :  Launching futures ...
[10:52:41.749] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:41.749] |  :  .  |  getFutureData() ...
[10:52:41.749] |  :  .  |  :  getFutureCore() ...
[10:52:41.749] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:41.749] |  :  .  |  :  getFutureCore() ... done
[10:52:41.749] |  :  .  |  :  getFutureCapture() ...
[10:52:41.749] |  :  .  |  :  getFutureCapture() ... done
[10:52:41.749] |  :  .  |  :  getFutureContext() ...
[10:52:41.750] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:41.750] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:41.750] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:41.750] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:41.750] |  :  .  |  :  getFutureContext() ... done
[10:52:41.750] |  :  .  |  getFutureData() ... done
[10:52:41.750] |  :  .  |  attachPackages() ...
[10:52:41.750] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:41.750] |  :  .  |  attachPackages() ... DONE
[10:52:41.750] |  :  .  |  attachPackages() ...
[10:52:41.751] |  :  .  |  :  packages: [n=0] 
[10:52:41.751] |  :  .  |  attachPackages() ... DONE
[10:52:41.751] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:41.751] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:41.751] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:41.751] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:41.752] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:41.752] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:41.752] |  :  .  |  :  .  |  New stack:
[10:52:41.752] |  :  .  |  :  .  |  List of 1
[10:52:41.752] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.752] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.752] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.752] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.752] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.752] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:41.752] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.754] |  :  .  |  :  .  |  Old stack:
[10:52:41.754] |  :  .  |  :  .  |  List of 1
[10:52:41.754] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.754] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.754] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.754] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.754] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.754] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:41.754] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55b2e4ea02e8> 
[10:52:41.754] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.754] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.754] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.757] |  :  .  |  :  .  |  Not identical
[10:52:41.757] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:41.757] |  :  .  |  :  .  |  :  List of 2
[10:52:41.757] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.757] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.757] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.757] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.757] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.757] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:41.757] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.757] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.757] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.757] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.757] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.757] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:41.757] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55b2e4ea02e8> 
[10:52:41.757] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.757] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.762] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:41.762] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:41.763] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:41.763] |  :  .  |  :  .  List of future strategies:
[10:52:41.763] |  :  .  |  :  .  1. sequential:
[10:52:41.763] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:41.763] |  :  .  |  :  .     - tweaked: FALSE
[10:52:41.763] |  :  .  |  :  .     - call: plan(sequential)
[10:52:41.763] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:41.763] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:41.764] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:41.765] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:41.765] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:41.765] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:41.765] |  :  .  |  :  .  |  :  New stack:
[10:52:41.765] |  :  .  |  :  .  |  :  List of 1
[10:52:41.765] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.765] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.765] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.765] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.765] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.765] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:41.765] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55b2e4ea02e8> 
[10:52:41.765] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.765] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.765] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.768] |  :  .  |  :  .  |  :  Old stack:
[10:52:41.768] |  :  .  |  :  .  |  :  List of 1
[10:52:41.768] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.768] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.768] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.768] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.768] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.768] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:41.768] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55b2e4ea02e8> 
[10:52:41.768] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.768] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.768] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.771] |  :  .  |  :  .  |  :  Identical
[10:52:41.771] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:41.771] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:41.771] |  :  .  |  :  .  |  List of future strategies:
[10:52:41.771] |  :  .  |  :  .  |  1. sequential:
[10:52:41.771] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:41.771] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:41.771] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:41.771] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:41.772] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:41.772] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:41.772] |  :  .  |  SequentialFuture started (and completed)
[10:52:41.772] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:41.772] |  :  Launching futures ... done
[10:52:41.772] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:41.772] |  Using SequentialFutureBackend ... done
[10:52:41.772] run() for Future (‘SequentialFuture’) ... done

> stopifnot(identical(v$a, 2))
[10:52:41.773] run() for Future (‘Future’) ...
[10:52:41.773] |  state: ‘created’
[10:52:41.773] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:41.773] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:41.773] |  Using SequentialFutureBackend ...
[10:52:41.773] |  :  Launching futures ...
[10:52:41.773] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:41.773] |  :  .  |  getFutureData() ...
[10:52:41.774] |  :  .  |  :  getFutureCore() ...
[10:52:41.774] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:41.774] |  :  .  |  :  getFutureCore() ... done
[10:52:41.774] |  :  .  |  :  getFutureCapture() ...
[10:52:41.774] |  :  .  |  :  getFutureCapture() ... done
[10:52:41.774] |  :  .  |  :  getFutureContext() ...
[10:52:41.774] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:41.774] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:41.774] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:41.774] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:41.775] |  :  .  |  :  getFutureContext() ... done
[10:52:41.775] |  :  .  |  getFutureData() ... done
[10:52:41.775] |  :  .  |  attachPackages() ...
[10:52:41.775] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:41.775] |  :  .  |  attachPackages() ... DONE
[10:52:41.775] |  :  .  |  attachPackages() ...
[10:52:41.775] |  :  .  |  :  packages: [n=0] 
[10:52:41.775] |  :  .  |  attachPackages() ... DONE
[10:52:41.776] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:41.776] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:41.776] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:41.776] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:41.776] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:41.776] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:41.777] |  :  .  |  :  .  |  New stack:
[10:52:41.777] |  :  .  |  :  .  |  List of 1
[10:52:41.777] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.777] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.777] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.777] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.777] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.777] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:41.777] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.779] |  :  .  |  :  .  |  Old stack:
[10:52:41.779] |  :  .  |  :  .  |  List of 1
[10:52:41.779] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.779] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.779] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.779] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.779] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.779] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:41.779] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55b2e4ea02e8> 
[10:52:41.779] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.779] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.779] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.783] |  :  .  |  :  .  |  Not identical
[10:52:41.783] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:41.784] |  :  .  |  :  .  |  :  List of 2
[10:52:41.784] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.784] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.784] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.784] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.784] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.784] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:41.784] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.784] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.784] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.784] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.784] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.784] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:41.784] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55b2e4ea02e8> 
[10:52:41.784] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.784] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.788] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:41.788] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:41.788] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:41.788] |  :  .  |  :  .  List of future strategies:
[10:52:41.788] |  :  .  |  :  .  1. sequential:
[10:52:41.788] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:41.788] |  :  .  |  :  .     - tweaked: FALSE
[10:52:41.788] |  :  .  |  :  .     - call: plan(sequential)
[10:52:41.789] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:41.789] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:41.790] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:41.791] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:41.791] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:41.791] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:41.791] |  :  .  |  :  .  |  :  New stack:
[10:52:41.791] |  :  .  |  :  .  |  :  List of 1
[10:52:41.791] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.791] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.791] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.791] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.791] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.791] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:41.791] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55b2e4ea02e8> 
[10:52:41.791] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.791] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.791] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.794] |  :  .  |  :  .  |  :  Old stack:
[10:52:41.794] |  :  .  |  :  .  |  :  List of 1
[10:52:41.794] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:41.794] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:41.794] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.794] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.794] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.794] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:41.794] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55b2e4ea02e8> 
[10:52:41.794] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:41.794] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:41.794] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:41.797] |  :  .  |  :  .  |  :  Identical
[10:52:41.797] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:41.797] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:41.797] |  :  .  |  :  .  |  List of future strategies:
[10:52:41.797] |  :  .  |  :  .  |  1. sequential:
[10:52:41.797] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:41.797] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:41.797] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:41.797] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:41.798] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:41.798] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:41.798] |  :  .  |  SequentialFuture started (and completed)
[10:52:41.798] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:41.798] |  :  Launching futures ... done
[10:52:41.798] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:41.798] |  Using SequentialFutureBackend ... done
[10:52:41.798] run() for Future (‘SequentialFuture’) ... done

> message("*** %<-% to environment ... DONE")
*** %<-% to environment ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.2s, sys.self=0.003s, elapsed=0.2s, user.child=0.002s, sys.child=0.003s
Test ‘futureAssign_OP_with_environment’ ... success
> 
