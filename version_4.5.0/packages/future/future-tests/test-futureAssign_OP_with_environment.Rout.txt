
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-futureAssign_OP_with_environment.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("futureAssign_OP_with_environment")
Test ‘futureAssign_OP_with_environment’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-futureAssign_OP_with_environment.R’

> library(future)
[08:08:04.703] Option 'future.startup.script': TRUE
[08:08:04.703] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:08:04.703] Future startup scripts found: <none>

> message("*** %<-% to environment ...")
*** %<-% to environment ...

> z <- new.env()

> stopifnot(length(names(z)) == 0)

> message("*** %<-% to environment: Assign by index (not allowed)")
*** %<-% to environment: Assign by index (not allowed)

> res <- try(z[[1]] %<-% {
+     2
+ } %lazy% TRUE, silent = TRUE)

> stopifnot(inherits(res, "try-error"))

> message("*** %<-% to environment: Assign by name (new)")
*** %<-% to environment: Assign by name (new)

> z$B %<-% {
+     TRUE
+ } %lazy% TRUE
[08:08:04.706] future(..., label = NULL) ...
[08:08:04.706] | lazy: TRUE
[08:08:04.707] | stdout: TRUE
[08:08:04.707] | conditions: [n=1] ‘condition’
[08:08:04.707] | gc: FALSE
[08:08:04.707] | earlySignal: FALSE
[08:08:04.707] | getGlobalsAndPackages() ...
[08:08:04.708] | : Searching for globals ...
[08:08:04.718] | : . globals found: [1] ‘{’
[08:08:04.718] | : Searching for globals ... done
[08:08:04.719] | : Resolving globals: FALSE
[08:08:04.719] | : Search for packages associated with the globals ...
[08:08:04.719] | : . Packages associated with globals: [1] ‘base’
[08:08:04.719] | : . Packages: [1] ‘base’
[08:08:04.719] | : Search for packages associated with the globals ... done
[08:08:04.719] | : Packages after dropping 'base': [0] 
[08:08:04.720] | : globals: [0] 
[08:08:04.720] | : packages: [0] 
[08:08:04.720] | getGlobalsAndPackages() ... done
[08:08:04.720] future(..., label = NULL) ... done

> stopifnot(length(z) == 2)

> stopifnot("B" %in% ls(z))

> y <- as.list(z)
[08:08:04.721] value() for Future (<unnamed-1>) ...
[08:08:04.721] | run() for ‘Future’ (<unnamed-1>) ...
[08:08:04.721] | : state: ‘created’
[08:08:04.722] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.722] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:04.722] | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.722] | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.722] | : . '  - attr(*, "init")= logi TRUE
[08:08:04.722] | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.722] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.722] | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.722] | : . '  - attr(*, "call")= language plan(sequential)
[08:08:04.726] | : . ' init: TRUE
[08:08:04.726] | : . ' makeFutureBackend(<sequential>) ...
[08:08:04.726] | : . ' , Backend function: <‘NULL’>
[08:08:04.726] | : . ' , Evaluator tweak arguments: [n=0]
[08:08:04.726] | : . ' ,  list()
[08:08:04.726] | : . ' , Evaluator formal arguments: [n=2]
[08:08:04.727] | : . ' ,  list()
[08:08:04.727] | : . ' , Backend factory arguments: [n=2]
[08:08:04.727] | : . ' , Dotted pair list of 2
[08:08:04.727] | : . ' ,  $ gc         : logi FALSE
[08:08:04.727] | : . ' ,  $ earlySignal: logi FALSE
[08:08:04.728] | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:04.728] | : . ' makeFutureBackend(<sequential>) ... done
[08:08:04.728] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:04.728] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.729] | : Using SequentialFutureBackend ...
[08:08:04.729] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:04.729] | : . Launching futures ...
[08:08:04.729] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:04.729] | : . ' , getFutureData() ...
[08:08:04.729] | : . ' , ; getFutureCore() ...
[08:08:04.729] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:04.730] | : . ' , ; getFutureCore() ... done
[08:08:04.730] | : . ' , ; getFutureCapture() ...
[08:08:04.730] | : . ' , ; getFutureCapture() ... done
[08:08:04.730] | : . ' , ; getFutureContext() ...
[08:08:04.730] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.730] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:04.730] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.730] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:04.731] | : . ' , ; getFutureContext() ... done
[08:08:04.731] | : . ' , getFutureData() ... done
[08:08:04.733] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.733] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:04.733] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.734] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.734] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.734] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:04.734] | : . ' , ; ` | New stack:
[08:08:04.734] | : . ' , ; ` | List of 1
[08:08:04.734] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.734] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.734] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:04.734] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.734] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.734] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.734] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.734] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.737] | : . ' , ; ` | Old stack:
[08:08:04.737] | : . ' , ; ` | List of 1
[08:08:04.737] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.737] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.737] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:04.737] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.737] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.737] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.737] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:04.737] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5590c50d6d08> 
[08:08:04.737] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.737] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.737] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.740] | : . ' , ; ` | Not identical
[08:08:04.740] | : . ' , ; ` | all.equal() for future ...
[08:08:04.740] | : . ' , ; ` | : List of 2
[08:08:04.740] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.740] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.740] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:04.740] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.740] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.740] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.740] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.740] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.740] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.740] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.740] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.740] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.740] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.740] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:04.740] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5590c50d6d08> 
[08:08:04.740] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.740] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.747] | : . ' , ; ` | all.equal() for future ... done
[08:08:04.747] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:04.747] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:04.747] | : . ' , ; ` List of future strategies:
[08:08:04.747] | : . ' , ; ` 1. sequential:
[08:08:04.747] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:04.747] | : . ' , ; `    - tweaked: FALSE
[08:08:04.747] | : . ' , ; `    - call: plan(sequential)
[08:08:04.748] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.748] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.750] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.750] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.750] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.750] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:04.750] | : . ' , ; ` | : New stack:
[08:08:04.750] | : . ' , ; ` | : List of 1
[08:08:04.750] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.750] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.750] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.750] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.750] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.750] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.750] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:04.750] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5590c50d6d08> 
[08:08:04.750] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.750] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.750] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.753] | : . ' , ; ` | : Old stack:
[08:08:04.754] | : . ' , ; ` | : List of 1
[08:08:04.754] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.754] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.754] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.754] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.754] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.754] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.754] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:04.754] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5590c50d6d08> 
[08:08:04.754] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.754] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.754] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.757] | : . ' , ; ` | : Identical
[08:08:04.757] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:04.757] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:04.757] | : . ' , ; ` | List of future strategies:
[08:08:04.757] | : . ' , ; ` | 1. sequential:
[08:08:04.757] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:04.757] | : . ' , ; ` |    - tweaked: FALSE
[08:08:04.757] | : . ' , ; ` |    - call: plan(sequential)
[08:08:04.757] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.757] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.758] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.760] | : . ' , SequentialFuture started (and completed)
[08:08:04.761] | : . ' , signalConditions() ...
[08:08:04.761] | : . ' , ; include = ‘immediateCondition’
[08:08:04.761] | : . ' , ; exclude = 
[08:08:04.761] | : . ' , ; resignal = FALSE
[08:08:04.761] | : . ' , ; Number of conditions: 6
[08:08:04.761] | : . ' , ;  int 6
[08:08:04.762] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.762] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.762] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.762] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.762] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.762] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.762] | : . ' , signalConditions() ... done
[08:08:04.763] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:04.763] | : . Launching futures ... done
[08:08:04.763] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:04.763] | : Using SequentialFutureBackend ... done
[08:08:04.763] | run() for ‘Future’ (<unnamed-1>) ... done
[08:08:04.763] | signalConditions() ...
[08:08:04.763] | : include = ‘immediateCondition’
[08:08:04.763] | : exclude = 
[08:08:04.763] | : resignal = FALSE
[08:08:04.764] | : Number of conditions: 6
[08:08:04.764] | :  int 6
[08:08:04.765] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.765] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.765] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.765] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.765] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.765] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.766] | signalConditions() ... done
[08:08:04.766] | relay stdout ...
[08:08:04.766] | relay stdout ... done
[08:08:04.766] | check for misuse ...
[08:08:04.766] | check for misuse ... done
[08:08:04.766] | relay conditions ...
[08:08:04.766] | : Future state: ‘finished’
[08:08:04.766] | : signalConditions() ...
[08:08:04.766] | : . include = ‘condition’
[08:08:04.766] | : . exclude = ‘immediateCondition’
[08:08:04.767] | : . resignal = TRUE
[08:08:04.767] | : . Number of conditions: 6
[08:08:04.767] | : .  int 6
[08:08:04.767] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.767] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.732] | : . ' , attachPackages() ...
[08:08:04.767] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.767] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.732] | : . ' , ; packages: [n=1] ‘future’
[08:08:04.768] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.768] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.732] | : . ' , attachPackages() ... done
[08:08:04.768] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.768] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.733] | : . ' , attachPackages() ...
[08:08:04.768] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.768] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.733] | : . ' , ; packages: [n=0] 
[08:08:04.768] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.768] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.733] | : . ' , attachPackages() ... done
[08:08:04.769] | : signalConditions() ... done
[08:08:04.769] | relay conditions ... done
[08:08:04.769] value() for Future (<unnamed-1>) ... done

> str(y)
List of 1
 $ B: logi TRUE

> stopifnot(length(y) == 1)

> stopifnot(identical(names(y), "B"))

> message("*** %<-% to environment: Potential task name clashes")
*** %<-% to environment: Potential task name clashes

> u <- new.env()

> u$a %<-% {
+     1
+ } %lazy% TRUE
[08:08:04.770] future(..., label = NULL) ...
[08:08:04.770] | lazy: TRUE
[08:08:04.770] | stdout: TRUE
[08:08:04.770] | conditions: [n=1] ‘condition’
[08:08:04.770] | gc: FALSE
[08:08:04.770] | earlySignal: FALSE
[08:08:04.770] | getGlobalsAndPackages() ...
[08:08:04.771] | : Searching for globals ...
[08:08:04.773] | : . globals found: [1] ‘{’
[08:08:04.773] | : Searching for globals ... done
[08:08:04.773] | : Resolving globals: FALSE
[08:08:04.774] | : Search for packages associated with the globals ...
[08:08:04.774] | : . Packages associated with globals: [1] ‘base’
[08:08:04.774] | : . Packages: [1] ‘base’
[08:08:04.774] | : Search for packages associated with the globals ... done
[08:08:04.774] | : Packages after dropping 'base': [0] 
[08:08:04.774] | : globals: [0] 
[08:08:04.774] | : packages: [0] 
[08:08:04.774] | getGlobalsAndPackages() ... done
[08:08:04.775] future(..., label = NULL) ... done

> stopifnot(length(u) == 2)

> stopifnot("a" %in% names(u))

> fu <- futureOf(u$a)

> v <- new.env()

> v$a %<-% {
+     2
+ } %lazy% TRUE
[08:08:04.775] future(..., label = NULL) ...
[08:08:04.776] | lazy: TRUE
[08:08:04.776] | stdout: TRUE
[08:08:04.776] | conditions: [n=1] ‘condition’
[08:08:04.776] | gc: FALSE
[08:08:04.776] | earlySignal: FALSE
[08:08:04.776] | getGlobalsAndPackages() ...
[08:08:04.776] | : Searching for globals ...
[08:08:04.779] | : . globals found: [1] ‘{’
[08:08:04.779] | : Searching for globals ... done
[08:08:04.779] | : Resolving globals: FALSE
[08:08:04.779] | : Search for packages associated with the globals ...
[08:08:04.779] | : . Packages associated with globals: [1] ‘base’
[08:08:04.779] | : . Packages: [1] ‘base’
[08:08:04.779] | : Search for packages associated with the globals ... done
[08:08:04.780] | : Packages after dropping 'base': [0] 
[08:08:04.780] | : globals: [0] 
[08:08:04.780] | : packages: [0] 
[08:08:04.780] | getGlobalsAndPackages() ... done
[08:08:04.780] future(..., label = NULL) ... done

> stopifnot(length(v) == 2)

> stopifnot("a" %in% names(v))

> fv <- futureOf(v$a)

> stopifnot(!identical(fu, fv))

> fu <- futureOf(u$a)

> stopifnot(!identical(fu, fv))

> stopifnot(identical(u$a, 1))
[08:08:04.781] value() for Future (<unnamed-2>) ...
[08:08:04.781] | run() for ‘Future’ (<unnamed-2>) ...
[08:08:04.781] | : state: ‘created’
[08:08:04.781] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.781] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.781] | : Using SequentialFutureBackend ...
[08:08:04.782] | : . Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:08:04.782] | : . Launching futures ...
[08:08:04.782] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:04.782] | : . ' , getFutureData() ...
[08:08:04.782] | : . ' , ; getFutureCore() ...
[08:08:04.782] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:04.782] | : . ' , ; getFutureCore() ... done
[08:08:04.782] | : . ' , ; getFutureCapture() ...
[08:08:04.782] | : . ' , ; getFutureCapture() ... done
[08:08:04.783] | : . ' , ; getFutureContext() ...
[08:08:04.783] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.783] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:04.783] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.783] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:04.783] | : . ' , ; getFutureContext() ... done
[08:08:04.783] | : . ' , getFutureData() ... done
[08:08:04.785] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.785] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:04.785] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.786] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.786] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.786] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:04.786] | : . ' , ; ` | New stack:
[08:08:04.786] | : . ' , ; ` | List of 1
[08:08:04.786] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.786] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.786] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:04.786] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.786] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.786] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.786] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.786] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.788] | : . ' , ; ` | Old stack:
[08:08:04.789] | : . ' , ; ` | List of 1
[08:08:04.789] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.789] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.789] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:04.789] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.789] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.789] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.789] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:04.789] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5590c50d6d08> 
[08:08:04.789] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.789] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.789] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.792] | : . ' , ; ` | Not identical
[08:08:04.792] | : . ' , ; ` | all.equal() for future ...
[08:08:04.792] | : . ' , ; ` | : List of 2
[08:08:04.792] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.792] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.792] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:04.792] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.792] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.792] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.792] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.792] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.792] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.792] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.792] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.792] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.792] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.792] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:04.792] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5590c50d6d08> 
[08:08:04.792] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.792] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.797] | : . ' , ; ` | all.equal() for future ... done
[08:08:04.797] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:04.797] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:04.797] | : . ' , ; ` List of future strategies:
[08:08:04.797] | : . ' , ; ` 1. sequential:
[08:08:04.797] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:04.797] | : . ' , ; `    - tweaked: FALSE
[08:08:04.797] | : . ' , ; `    - call: plan(sequential)
[08:08:04.797] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.798] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.799] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.799] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.799] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.799] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:04.799] | : . ' , ; ` | : New stack:
[08:08:04.799] | : . ' , ; ` | : List of 1
[08:08:04.799] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.799] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.799] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.799] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.799] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.799] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.799] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:04.799] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5590c50d6d08> 
[08:08:04.799] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.799] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.799] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.803] | : . ' , ; ` | : Old stack:
[08:08:04.803] | : . ' , ; ` | : List of 1
[08:08:04.803] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.803] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.803] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.803] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.803] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.803] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.803] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:04.803] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5590c50d6d08> 
[08:08:04.803] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.803] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.803] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.807] | : . ' , ; ` | : Identical
[08:08:04.807] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:04.807] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:04.807] | : . ' , ; ` | List of future strategies:
[08:08:04.807] | : . ' , ; ` | 1. sequential:
[08:08:04.807] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:04.807] | : . ' , ; ` |    - tweaked: FALSE
[08:08:04.807] | : . ' , ; ` |    - call: plan(sequential)
[08:08:04.807] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.807] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.807] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.808] | : . ' , SequentialFuture started (and completed)
[08:08:04.808] | : . ' , signalConditions() ...
[08:08:04.808] | : . ' , ; include = ‘immediateCondition’
[08:08:04.808] | : . ' , ; exclude = 
[08:08:04.808] | : . ' , ; resignal = FALSE
[08:08:04.808] | : . ' , ; Number of conditions: 6
[08:08:04.808] | : . ' , ;  int 6
[08:08:04.809] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.809] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.809] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.809] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.809] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.809] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.809] | : . ' , signalConditions() ... done
[08:08:04.809] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:04.809] | : . Launching futures ... done
[08:08:04.810] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:04.810] | : Using SequentialFutureBackend ... done
[08:08:04.810] | run() for ‘Future’ (<unnamed-2>) ... done
[08:08:04.810] | signalConditions() ...
[08:08:04.810] | : include = ‘immediateCondition’
[08:08:04.810] | : exclude = 
[08:08:04.810] | : resignal = FALSE
[08:08:04.810] | : Number of conditions: 6
[08:08:04.810] | :  int 6
[08:08:04.811] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.811] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.811] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.811] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.811] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.811] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.811] | signalConditions() ... done
[08:08:04.811] | relay stdout ...
[08:08:04.812] | relay stdout ... done
[08:08:04.812] | check for misuse ...
[08:08:04.812] | check for misuse ... done
[08:08:04.812] | relay conditions ...
[08:08:04.812] | : Future state: ‘finished’
[08:08:04.812] | : signalConditions() ...
[08:08:04.812] | : . include = ‘condition’
[08:08:04.812] | : . exclude = ‘immediateCondition’
[08:08:04.812] | : . resignal = TRUE
[08:08:04.812] | : . Number of conditions: 6
[08:08:04.812] | : .  int 6
[08:08:04.813] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.813] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.784] | : . ' , attachPackages() ...
[08:08:04.813] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.813] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.784] | : . ' , ; packages: [n=1] ‘future’
[08:08:04.813] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.813] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.784] | : . ' , attachPackages() ... done
[08:08:04.814] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.814] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.785] | : . ' , attachPackages() ...
[08:08:04.814] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.814] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.785] | : . ' , ; packages: [n=0] 
[08:08:04.814] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.814] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.785] | : . ' , attachPackages() ... done
[08:08:04.814] | : signalConditions() ... done
[08:08:04.814] | relay conditions ... done
[08:08:04.814] value() for Future (<unnamed-2>) ... done

> stopifnot(identical(v$a, 2))
[08:08:04.815] value() for Future (<unnamed-3>) ...
[08:08:04.815] | run() for ‘Future’ (<unnamed-3>) ...
[08:08:04.815] | : state: ‘created’
[08:08:04.815] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.815] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.815] | : Using SequentialFutureBackend ...
[08:08:04.815] | : . Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:08:04.815] | : . Launching futures ...
[08:08:04.815] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:04.816] | : . ' , getFutureData() ...
[08:08:04.816] | : . ' , ; getFutureCore() ...
[08:08:04.816] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:04.816] | : . ' , ; getFutureCore() ... done
[08:08:04.816] | : . ' , ; getFutureCapture() ...
[08:08:04.816] | : . ' , ; getFutureCapture() ... done
[08:08:04.816] | : . ' , ; getFutureContext() ...
[08:08:04.816] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.816] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:04.817] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.817] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:04.817] | : . ' , ; getFutureContext() ... done
[08:08:04.817] | : . ' , getFutureData() ... done
[08:08:04.818] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:04.818] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:04.818] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:04.818] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.819] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.819] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:04.819] | : . ' , ; ` | New stack:
[08:08:04.819] | : . ' , ; ` | List of 1
[08:08:04.819] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.819] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.819] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:04.819] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.819] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.819] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.819] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.819] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.821] | : . ' , ; ` | Old stack:
[08:08:04.821] | : . ' , ; ` | List of 1
[08:08:04.821] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.821] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.821] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:04.821] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.821] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.821] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.821] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:04.821] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5590c50d6d08> 
[08:08:04.821] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.821] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.821] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.825] | : . ' , ; ` | Not identical
[08:08:04.825] | : . ' , ; ` | all.equal() for future ...
[08:08:04.826] | : . ' , ; ` | : List of 2
[08:08:04.826] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.826] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.826] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:04.826] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.826] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.826] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.826] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:04.826] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.826] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.826] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.826] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.826] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.826] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.826] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:04.826] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5590c50d6d08> 
[08:08:04.826] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.826] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.830] | : . ' , ; ` | all.equal() for future ... done
[08:08:04.830] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:04.831] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:04.831] | : . ' , ; ` List of future strategies:
[08:08:04.831] | : . ' , ; ` 1. sequential:
[08:08:04.831] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:04.831] | : . ' , ; `    - tweaked: FALSE
[08:08:04.831] | : . ' , ; `    - call: plan(sequential)
[08:08:04.831] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.831] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.833] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.833] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:04.833] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:04.833] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:04.833] | : . ' , ; ` | : New stack:
[08:08:04.833] | : . ' , ; ` | : List of 1
[08:08:04.833] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.833] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.833] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.833] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.833] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.833] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.833] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:04.833] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5590c50d6d08> 
[08:08:04.833] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.833] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.833] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.836] | : . ' , ; ` | : Old stack:
[08:08:04.836] | : . ' , ; ` | : List of 1
[08:08:04.836] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:04.836] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:04.836] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:04.836] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.836] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.836] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.836] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:04.836] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x5590c50d6d08> 
[08:08:04.836] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:04.836] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:04.836] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:04.839] | : . ' , ; ` | : Identical
[08:08:04.839] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:04.839] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:04.840] | : . ' , ; ` | List of future strategies:
[08:08:04.840] | : . ' , ; ` | 1. sequential:
[08:08:04.840] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:04.840] | : . ' , ; ` |    - tweaked: FALSE
[08:08:04.840] | : . ' , ; ` |    - call: plan(sequential)
[08:08:04.840] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:04.840] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.840] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:04.840] | : . ' , SequentialFuture started (and completed)
[08:08:04.841] | : . ' , signalConditions() ...
[08:08:04.841] | : . ' , ; include = ‘immediateCondition’
[08:08:04.842] | : . ' , ; exclude = 
[08:08:04.842] | : . ' , ; resignal = FALSE
[08:08:04.842] | : . ' , ; Number of conditions: 6
[08:08:04.842] | : . ' , ;  int 6
[08:08:04.842] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.842] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.842] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.843] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.843] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.843] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.843] | : . ' , signalConditions() ... done
[08:08:04.843] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:04.843] | : . Launching futures ... done
[08:08:04.843] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:04.843] | : Using SequentialFutureBackend ... done
[08:08:04.843] | run() for ‘Future’ (<unnamed-3>) ... done
[08:08:04.843] | signalConditions() ...
[08:08:04.844] | : include = ‘immediateCondition’
[08:08:04.844] | : exclude = 
[08:08:04.844] | : resignal = FALSE
[08:08:04.844] | : Number of conditions: 6
[08:08:04.844] | :  int 6
[08:08:04.844] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.844] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.844] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.845] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.845] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.845] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.845] | signalConditions() ... done
[08:08:04.845] | relay stdout ...
[08:08:04.845] | relay stdout ... done
[08:08:04.845] | check for misuse ...
[08:08:04.845] | check for misuse ... done
[08:08:04.845] | relay conditions ...
[08:08:04.845] | : Future state: ‘finished’
[08:08:04.846] | : signalConditions() ...
[08:08:04.846] | : . include = ‘condition’
[08:08:04.846] | : . exclude = ‘immediateCondition’
[08:08:04.846] | : . resignal = TRUE
[08:08:04.846] | : . Number of conditions: 6
[08:08:04.846] | : .  int 6
[08:08:04.846] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.846] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.817] | : . ' , attachPackages() ...
[08:08:04.847] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.847] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.817] | : . ' , ; packages: [n=1] ‘future’
[08:08:04.847] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.847] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.817] | : . ' , attachPackages() ... done
[08:08:04.847] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.847] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.817] | : . ' , attachPackages() ...
[08:08:04.847] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.847] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.818] | : . ' , ; packages: [n=0] 
[08:08:04.848] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:04.848] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:04.818] | : . ' , attachPackages() ... done
[08:08:04.848] | : signalConditions() ... done
[08:08:04.848] | relay conditions ... done
[08:08:04.848] value() for Future (<unnamed-3>) ... done

> message("*** %<-% to environment ... DONE")
*** %<-% to environment ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.2s, sys.self=0.008s, elapsed=0.2s, user.child=0.002s, sys.child=0.003s
Test ‘futureAssign_OP_with_environment’ ... success
> 
