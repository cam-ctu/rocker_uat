
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script incl/testme/test-FutureRegistry.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("FutureRegistry")
Test ‘FutureRegistry’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-FutureRegistry.R’

> library(future)
[10:52:54.667] Option 'future.startup.script': TRUE
[10:52:54.667] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[10:52:54.667] Future startup scripts found: <none>

> message("*** FutureRegistry() ...")
*** FutureRegistry() ...

> for (where in c("multicore-dummy-uuid", "rscript")) {
+     message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+     futures <- FutureR .... [TRUNCATED] 
*** FutureRegistry('multicore-dummy-uuid', 'list') ...
list()
*** FutureRegistry('multicore-dummy-uuid', 'add') ...
[10:52:54.691] getGlobalsAndPackages() ...
[10:52:54.691] |  Searching for globals ...
[10:52:54.697] |  :  globals found: [1] ‘{’
[10:52:54.697] |  Searching for globals ... DONE
[10:52:54.697] |  Resolving globals: FALSE
[10:52:54.697] |  Search for packages associated with the globals ...
[10:52:54.698] |  :  Packages associated with globals: [1] ‘base’
[10:52:54.698] |  :  Packages: [1] ‘base’
[10:52:54.698] |  Search for packages associated with the globals ... DONE
[10:52:54.698] |  Packages after dropping 'base': [0] 
[10:52:54.698] |  globals: [0] 
[10:52:54.698] |  packages: [0] 
[10:52:54.698] getGlobalsAndPackages() ... done
[10:52:54.699] run() for Future (‘Future’) ...
[10:52:54.699] |  state: ‘created’
[10:52:54.699] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:54.700] |  :  makeFutureBackend(<sequential>) ...
[10:52:54.700] |  :  .  Backend function: <‘NULL’>
[10:52:54.700] |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:54.700] |  :  makeFutureBackend(<sequential>) ... done
[10:52:54.700] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:54.700] |  Using SequentialFutureBackend ...
[10:52:54.700] |  :  Launching futures ...
[10:52:54.701] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:54.701] |  :  .  |  getFutureData() ...
[10:52:54.701] |  :  .  |  :  getFutureCore() ...
[10:52:54.701] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:54.701] |  :  .  |  :  getFutureCore() ... done
[10:52:54.701] |  :  .  |  :  getFutureCapture() ...
[10:52:54.701] |  :  .  |  :  getFutureCapture() ... done
[10:52:54.701] |  :  .  |  :  getFutureContext() ...
[10:52:54.702] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:54.702] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:54.702] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:54.702] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:54.702] |  :  .  |  :  getFutureContext() ... done
[10:52:54.702] |  :  .  |  getFutureData() ... done
[10:52:54.705] |  :  .  |  attachPackages() ...
[10:52:54.705] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:54.705] |  :  .  |  attachPackages() ... DONE
[10:52:54.705] |  :  .  |  attachPackages() ...
[10:52:54.705] |  :  .  |  :  packages: [n=0] 
[10:52:54.705] |  :  .  |  attachPackages() ... DONE
[10:52:54.706] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:54.706] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:54.706] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:54.706] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:54.707] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:54.707] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:54.707] |  :  .  |  :  .  |  New stack:
[10:52:54.707] |  :  .  |  :  .  |  List of 1
[10:52:54.707] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.707] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.707] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.707] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.707] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.707] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:54.707] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:54.710] |  :  .  |  :  .  |  Old stack:
[10:52:54.710] |  :  .  |  :  .  |  List of 1
[10:52:54.710] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.710] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.710] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.710] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.710] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.710] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:54.710] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f96a2cbe60> 
[10:52:54.710] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.710] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.710] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:54.714] |  :  .  |  :  .  |  Not identical
[10:52:54.714] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:54.714] |  :  .  |  :  .  |  :  List of 2
[10:52:54.714] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.714] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.714] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.714] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.714] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.714] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:54.714] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.714] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.714] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.714] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.714] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.714] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:54.714] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f96a2cbe60> 
[10:52:54.714] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.714] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.718] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:54.719] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:54.719] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:54.719] |  :  .  |  :  .  List of future strategies:
[10:52:54.719] |  :  .  |  :  .  1. sequential:
[10:52:54.719] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:54.719] |  :  .  |  :  .     - tweaked: FALSE
[10:52:54.719] |  :  .  |  :  .     - call: plan(sequential)
[10:52:54.719] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:54.719] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:54.721] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:54.722] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:54.722] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:54.722] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:54.722] |  :  .  |  :  .  |  :  New stack:
[10:52:54.722] |  :  .  |  :  .  |  :  List of 1
[10:52:54.722] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.722] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.722] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.722] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.722] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.722] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:54.722] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f96a2cbe60> 
[10:52:54.722] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.722] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.722] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:54.725] |  :  .  |  :  .  |  :  Old stack:
[10:52:54.725] |  :  .  |  :  .  |  :  List of 1
[10:52:54.725] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.725] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.725] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.725] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.725] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.725] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:54.725] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f96a2cbe60> 
[10:52:54.725] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.725] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.725] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:54.728] |  :  .  |  :  .  |  :  Identical
[10:52:54.728] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:54.728] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:54.728] |  :  .  |  :  .  |  List of future strategies:
[10:52:54.728] |  :  .  |  :  .  |  1. sequential:
[10:52:54.728] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:54.728] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:54.728] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:54.728] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:54.729] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:54.730] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:54.730] |  :  .  |  SequentialFuture started (and completed)
[10:52:54.730] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:54.731] |  :  Launching futures ... done
[10:52:54.731] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:54.731] |  Using SequentialFutureBackend ... done
[10:52:54.731] run() for Future (‘SequentialFuture’) ... done
SequentialFuture:
Label: NULL
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 0bafcfa179940935acec8f99ff56a3e1
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
*** FutureRegistry('multicore-dummy-uuid', 'list') ...
[[1]]
SequentialFuture:
Label: NULL
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 0bafcfa179940935acec8f99ff56a3e1
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’

*** FutureRegistry('multicore-dummy-uuid', 'remove') ...
*** FutureRegistry('multicore-dummy-uuid', 'list') ...
list()
*** FutureRegistry('multicore-dummy-uuid', 'add') ...
[10:52:54.735] getGlobalsAndPackages() ...
[10:52:54.735] |  Searching for globals ...
[10:52:54.735] |  :  globals found: [1] ‘{’
[10:52:54.736] |  Searching for globals ... DONE
[10:52:54.736] |  Resolving globals: FALSE
[10:52:54.736] |  Search for packages associated with the globals ...
[10:52:54.736] |  :  Packages associated with globals: [1] ‘base’
[10:52:54.736] |  :  Packages: [1] ‘base’
[10:52:54.736] |  Search for packages associated with the globals ... DONE
[10:52:54.736] |  Packages after dropping 'base': [0] 
[10:52:54.736] |  globals: [0] 
[10:52:54.736] |  packages: [0] 
[10:52:54.737] getGlobalsAndPackages() ... done
[10:52:54.737] run() for Future (‘Future’) ...
[10:52:54.737] |  state: ‘created’
[10:52:54.737] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:54.737] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:54.737] |  Using SequentialFutureBackend ...
[10:52:54.737] |  :  Launching futures ...
[10:52:54.737] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:54.737] |  :  .  |  getFutureData() ...
[10:52:54.738] |  :  .  |  :  getFutureCore() ...
[10:52:54.738] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:54.738] |  :  .  |  :  getFutureCore() ... done
[10:52:54.738] |  :  .  |  :  getFutureCapture() ...
[10:52:54.738] |  :  .  |  :  getFutureCapture() ... done
[10:52:54.738] |  :  .  |  :  getFutureContext() ...
[10:52:54.738] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:54.738] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:54.738] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:54.738] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:54.739] |  :  .  |  :  getFutureContext() ... done
[10:52:54.739] |  :  .  |  getFutureData() ... done
[10:52:54.739] |  :  .  |  attachPackages() ...
[10:52:54.739] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:54.739] |  :  .  |  attachPackages() ... DONE
[10:52:54.739] |  :  .  |  attachPackages() ...
[10:52:54.739] |  :  .  |  :  packages: [n=0] 
[10:52:54.739] |  :  .  |  attachPackages() ... DONE
[10:52:54.740] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:54.740] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:54.740] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:54.740] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:54.740] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:54.740] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:54.740] |  :  .  |  :  .  |  New stack:
[10:52:54.740] |  :  .  |  :  .  |  List of 1
[10:52:54.740] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.740] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.740] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.740] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.740] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.740] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:54.740] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:54.743] |  :  .  |  :  .  |  Old stack:
[10:52:54.743] |  :  .  |  :  .  |  List of 1
[10:52:54.743] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.743] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.743] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.743] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.743] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.743] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:54.743] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f96a2cbe60> 
[10:52:54.743] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.743] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.743] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:54.745] |  :  .  |  :  .  |  Not identical
[10:52:54.745] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:54.746] |  :  .  |  :  .  |  :  List of 2
[10:52:54.746] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.746] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.746] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.746] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.746] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.746] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:54.746] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.746] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.746] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.746] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.746] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.746] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:54.746] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f96a2cbe60> 
[10:52:54.746] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.746] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.750] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:54.750] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:54.750] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:54.750] |  :  .  |  :  .  List of future strategies:
[10:52:54.750] |  :  .  |  :  .  1. sequential:
[10:52:54.750] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:54.750] |  :  .  |  :  .     - tweaked: FALSE
[10:52:54.750] |  :  .  |  :  .     - call: plan(sequential)
[10:52:54.751] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:54.751] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:54.753] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:54.753] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:54.753] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:54.753] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:54.754] |  :  .  |  :  .  |  :  New stack:
[10:52:54.754] |  :  .  |  :  .  |  :  List of 1
[10:52:54.754] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.754] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.754] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.754] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.754] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.754] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:54.754] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f96a2cbe60> 
[10:52:54.754] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.754] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.754] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:54.756] |  :  .  |  :  .  |  :  Old stack:
[10:52:54.757] |  :  .  |  :  .  |  :  List of 1
[10:52:54.757] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.757] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.757] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.757] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.757] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.757] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:54.757] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f96a2cbe60> 
[10:52:54.757] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.757] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.757] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:54.759] |  :  .  |  :  .  |  :  Identical
[10:52:54.759] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:54.759] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:54.759] |  :  .  |  :  .  |  List of future strategies:
[10:52:54.759] |  :  .  |  :  .  |  1. sequential:
[10:52:54.759] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:54.759] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:54.759] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:54.760] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:54.760] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:54.760] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:54.760] |  :  .  |  SequentialFuture started (and completed)
[10:52:54.760] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:54.760] |  :  Launching futures ... done
[10:52:54.761] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:54.761] |  Using SequentialFutureBackend ... done
[10:52:54.761] run() for Future (‘SequentialFuture’) ... done
SequentialFuture:
Label: NULL
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 0bafcfa179940935acec8f99ff56a3e1
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
*** FutureRegistry('multicore-dummy-uuid', 'list') ...
[[1]]
SequentialFuture:
Label: NULL
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 0bafcfa179940935acec8f99ff56a3e1
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’

*** FutureRegistry('multicore-dummy-uuid', 'collect-first') ...
[10:52:54.762] resolved() for ‘SequentialFuture’ ...
[10:52:54.762] |  state: ‘finished’
[10:52:54.762] |  run: FALSE
[10:52:54.762] |  result: ‘FutureResult’
[10:52:54.762] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('multicore-dummy-uuid', 'add') ...
[10:52:54.763] getGlobalsAndPackages() ...
[10:52:54.763] |  Searching for globals ...
[10:52:54.763] |  :  globals found: [1] ‘{’
[10:52:54.763] |  Searching for globals ... DONE
[10:52:54.764] |  Resolving globals: FALSE
[10:52:54.764] |  Search for packages associated with the globals ...
[10:52:54.764] |  :  Packages associated with globals: [1] ‘base’
[10:52:54.764] |  :  Packages: [1] ‘base’
[10:52:54.764] |  Search for packages associated with the globals ... DONE
[10:52:54.764] |  Packages after dropping 'base': [0] 
[10:52:54.764] |  globals: [0] 
[10:52:54.764] |  packages: [0] 
[10:52:54.764] getGlobalsAndPackages() ... done
[10:52:54.765] run() for Future (‘Future’) ...
[10:52:54.765] |  state: ‘created’
[10:52:54.765] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:54.765] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:54.765] |  Using SequentialFutureBackend ...
[10:52:54.765] |  :  Launching futures ...
[10:52:54.765] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:54.765] |  :  .  |  getFutureData() ...
[10:52:54.765] |  :  .  |  :  getFutureCore() ...
[10:52:54.766] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:54.766] |  :  .  |  :  getFutureCore() ... done
[10:52:54.766] |  :  .  |  :  getFutureCapture() ...
[10:52:54.766] |  :  .  |  :  getFutureCapture() ... done
[10:52:54.766] |  :  .  |  :  getFutureContext() ...
[10:52:54.766] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:54.766] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:54.766] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:54.766] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:54.766] |  :  .  |  :  getFutureContext() ... done
[10:52:54.766] |  :  .  |  getFutureData() ... done
[10:52:54.767] |  :  .  |  attachPackages() ...
[10:52:54.767] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:54.767] |  :  .  |  attachPackages() ... DONE
[10:52:54.767] |  :  .  |  attachPackages() ...
[10:52:54.767] |  :  .  |  :  packages: [n=0] 
[10:52:54.767] |  :  .  |  attachPackages() ... DONE
[10:52:54.767] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:54.768] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:54.768] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:54.768] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:54.768] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:54.768] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:54.768] |  :  .  |  :  .  |  New stack:
[10:52:54.768] |  :  .  |  :  .  |  List of 1
[10:52:54.768] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.768] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.768] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.768] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.768] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.768] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:54.768] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:54.770] |  :  .  |  :  .  |  Old stack:
[10:52:54.771] |  :  .  |  :  .  |  List of 1
[10:52:54.771] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.771] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.771] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.771] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.771] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.771] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:54.771] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f96a2cbe60> 
[10:52:54.771] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.771] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.771] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:54.774] |  :  .  |  :  .  |  Not identical
[10:52:54.774] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:54.775] |  :  .  |  :  .  |  :  List of 2
[10:52:54.775] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.775] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.775] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.775] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.775] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.775] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:54.775] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.775] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.775] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.775] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.775] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.775] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:54.775] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f96a2cbe60> 
[10:52:54.775] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.775] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.779] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:54.779] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:54.779] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:54.779] |  :  .  |  :  .  List of future strategies:
[10:52:54.779] |  :  .  |  :  .  1. sequential:
[10:52:54.779] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:54.779] |  :  .  |  :  .     - tweaked: FALSE
[10:52:54.779] |  :  .  |  :  .     - call: plan(sequential)
[10:52:54.780] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:54.780] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:54.781] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:54.781] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:54.781] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:54.782] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:54.782] |  :  .  |  :  .  |  :  New stack:
[10:52:54.782] |  :  .  |  :  .  |  :  List of 1
[10:52:54.782] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.782] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.782] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.782] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.782] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.782] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:54.782] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f96a2cbe60> 
[10:52:54.782] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.782] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.782] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:54.785] |  :  .  |  :  .  |  :  Old stack:
[10:52:54.785] |  :  .  |  :  .  |  :  List of 1
[10:52:54.785] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.785] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.785] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.785] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.785] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.785] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:54.785] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f96a2cbe60> 
[10:52:54.785] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.785] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.785] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:54.787] |  :  .  |  :  .  |  :  Identical
[10:52:54.788] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:54.788] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:54.788] |  :  .  |  :  .  |  List of future strategies:
[10:52:54.788] |  :  .  |  :  .  |  1. sequential:
[10:52:54.788] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:54.788] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:54.788] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:54.788] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:54.788] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:54.788] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:54.789] |  :  .  |  SequentialFuture started (and completed)
[10:52:54.789] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:54.789] |  :  Launching futures ... done
[10:52:54.789] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:54.789] |  Using SequentialFutureBackend ... done
[10:52:54.789] run() for Future (‘SequentialFuture’) ... done
SequentialFuture:
Label: NULL
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 0bafcfa179940935acec8f99ff56a3e1
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
*** FutureRegistry('multicore-dummy-uuid', 'reset') ...
*** FutureRegistry('multicore-dummy-uuid', 'list') ...
list()
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[10:52:54.790] getGlobalsAndPackages() ...
[10:52:54.790] |  Searching for globals ...
[10:52:54.790] |  :  globals found: [1] ‘{’
[10:52:54.791] |  Searching for globals ... DONE
[10:52:54.791] |  Resolving globals: FALSE
[10:52:54.791] |  Search for packages associated with the globals ...
[10:52:54.791] |  :  Packages associated with globals: [1] ‘base’
[10:52:54.791] |  :  Packages: [1] ‘base’
[10:52:54.791] |  Search for packages associated with the globals ... DONE
[10:52:54.791] |  Packages after dropping 'base': [0] 
[10:52:54.791] |  globals: [0] 
[10:52:54.792] |  packages: [0] 
[10:52:54.792] getGlobalsAndPackages() ... done
[10:52:54.792] run() for Future (‘Future’) ...
[10:52:54.792] |  state: ‘created’
[10:52:54.792] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:54.792] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:54.792] |  Using SequentialFutureBackend ...
[10:52:54.792] |  :  Launching futures ...
[10:52:54.792] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:54.793] |  :  .  |  getFutureData() ...
[10:52:54.793] |  :  .  |  :  getFutureCore() ...
[10:52:54.793] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:54.793] |  :  .  |  :  getFutureCore() ... done
[10:52:54.793] |  :  .  |  :  getFutureCapture() ...
[10:52:54.793] |  :  .  |  :  getFutureCapture() ... done
[10:52:54.793] |  :  .  |  :  getFutureContext() ...
[10:52:54.793] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:54.793] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:54.793] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:54.794] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:54.794] |  :  .  |  :  getFutureContext() ... done
[10:52:54.794] |  :  .  |  getFutureData() ... done
[10:52:54.794] |  :  .  |  attachPackages() ...
[10:52:54.795] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:54.795] |  :  .  |  attachPackages() ... DONE
[10:52:54.795] |  :  .  |  attachPackages() ...
[10:52:54.795] |  :  .  |  :  packages: [n=0] 
[10:52:54.795] |  :  .  |  attachPackages() ... DONE
[10:52:54.796] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:54.796] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:54.796] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:54.796] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:54.796] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:54.796] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:54.797] |  :  .  |  :  .  |  New stack:
[10:52:54.797] |  :  .  |  :  .  |  List of 1
[10:52:54.797] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.797] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.797] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.797] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.797] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.797] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:54.797] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:54.799] |  :  .  |  :  .  |  Old stack:
[10:52:54.799] |  :  .  |  :  .  |  List of 1
[10:52:54.799] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.799] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.799] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.799] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.799] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.799] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:54.799] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f96a2cbe60> 
[10:52:54.799] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.799] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.799] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:54.802] |  :  .  |  :  .  |  Not identical
[10:52:54.802] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:54.802] |  :  .  |  :  .  |  :  List of 2
[10:52:54.802] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.802] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.802] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.802] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.802] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.802] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:54.802] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.802] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.802] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.802] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.802] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.802] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:54.802] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f96a2cbe60> 
[10:52:54.802] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.802] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.806] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:54.806] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:54.806] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:54.806] |  :  .  |  :  .  List of future strategies:
[10:52:54.806] |  :  .  |  :  .  1. sequential:
[10:52:54.806] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:54.806] |  :  .  |  :  .     - tweaked: FALSE
[10:52:54.806] |  :  .  |  :  .     - call: plan(sequential)
[10:52:54.807] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:54.807] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:54.808] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:54.808] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:54.809] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:54.809] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:54.809] |  :  .  |  :  .  |  :  New stack:
[10:52:54.809] |  :  .  |  :  .  |  :  List of 1
[10:52:54.809] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.809] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.809] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.809] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.809] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.809] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:54.809] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f96a2cbe60> 
[10:52:54.809] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.809] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.809] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:54.812] |  :  .  |  :  .  |  :  Old stack:
[10:52:54.812] |  :  .  |  :  .  |  :  List of 1
[10:52:54.812] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.812] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.812] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.812] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.812] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.812] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:54.812] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f96a2cbe60> 
[10:52:54.812] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.812] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.812] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:54.815] |  :  .  |  :  .  |  :  Identical
[10:52:54.815] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:54.816] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:54.816] |  :  .  |  :  .  |  List of future strategies:
[10:52:54.816] |  :  .  |  :  .  |  1. sequential:
[10:52:54.816] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:54.816] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:54.816] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:54.816] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:54.816] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:54.816] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:54.816] |  :  .  |  SequentialFuture started (and completed)
[10:52:54.817] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:54.817] |  :  Launching futures ... done
[10:52:54.817] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:54.817] |  Using SequentialFutureBackend ... done
[10:52:54.817] run() for Future (‘SequentialFuture’) ... done
SequentialFuture:
Label: NULL
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 0bafcfa179940935acec8f99ff56a3e1
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: NULL
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 0bafcfa179940935acec8f99ff56a3e1
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’

*** FutureRegistry('rscript', 'remove') ...
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[10:52:54.818] getGlobalsAndPackages() ...
[10:52:54.818] |  Searching for globals ...
[10:52:54.819] |  :  globals found: [1] ‘{’
[10:52:54.819] |  Searching for globals ... DONE
[10:52:54.819] |  Resolving globals: FALSE
[10:52:54.819] |  Search for packages associated with the globals ...
[10:52:54.819] |  :  Packages associated with globals: [1] ‘base’
[10:52:54.819] |  :  Packages: [1] ‘base’
[10:52:54.819] |  Search for packages associated with the globals ... DONE
[10:52:54.820] |  Packages after dropping 'base': [0] 
[10:52:54.820] |  globals: [0] 
[10:52:54.820] |  packages: [0] 
[10:52:54.820] getGlobalsAndPackages() ... done
[10:52:54.820] run() for Future (‘Future’) ...
[10:52:54.820] |  state: ‘created’
[10:52:54.820] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:54.820] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:54.820] |  Using SequentialFutureBackend ...
[10:52:54.820] |  :  Launching futures ...
[10:52:54.821] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:54.821] |  :  .  |  getFutureData() ...
[10:52:54.821] |  :  .  |  :  getFutureCore() ...
[10:52:54.821] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:54.821] |  :  .  |  :  getFutureCore() ... done
[10:52:54.821] |  :  .  |  :  getFutureCapture() ...
[10:52:54.821] |  :  .  |  :  getFutureCapture() ... done
[10:52:54.821] |  :  .  |  :  getFutureContext() ...
[10:52:54.821] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:54.821] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:54.821] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:54.822] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:54.822] |  :  .  |  :  getFutureContext() ... done
[10:52:54.822] |  :  .  |  getFutureData() ... done
[10:52:54.822] |  :  .  |  attachPackages() ...
[10:52:54.822] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:54.822] |  :  .  |  attachPackages() ... DONE
[10:52:54.822] |  :  .  |  attachPackages() ...
[10:52:54.822] |  :  .  |  :  packages: [n=0] 
[10:52:54.822] |  :  .  |  attachPackages() ... DONE
[10:52:54.823] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:54.823] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:54.823] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:54.823] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:54.823] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:54.823] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:54.824] |  :  .  |  :  .  |  New stack:
[10:52:54.824] |  :  .  |  :  .  |  List of 1
[10:52:54.824] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.824] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.824] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.824] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.824] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.824] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:54.824] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:54.826] |  :  .  |  :  .  |  Old stack:
[10:52:54.826] |  :  .  |  :  .  |  List of 1
[10:52:54.826] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.826] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.826] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.826] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.826] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.826] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:54.826] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f96a2cbe60> 
[10:52:54.826] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.826] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.826] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:54.829] |  :  .  |  :  .  |  Not identical
[10:52:54.829] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:54.829] |  :  .  |  :  .  |  :  List of 2
[10:52:54.829] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.829] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.829] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.829] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.829] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.829] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:54.829] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.829] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.829] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.829] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.829] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.829] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:54.829] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f96a2cbe60> 
[10:52:54.829] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.829] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.833] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:54.833] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:54.833] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:54.833] |  :  .  |  :  .  List of future strategies:
[10:52:54.833] |  :  .  |  :  .  1. sequential:
[10:52:54.833] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:54.833] |  :  .  |  :  .     - tweaked: FALSE
[10:52:54.833] |  :  .  |  :  .     - call: plan(sequential)
[10:52:54.834] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:54.834] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:54.836] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:54.836] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:54.836] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:54.837] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:54.837] |  :  .  |  :  .  |  :  New stack:
[10:52:54.837] |  :  .  |  :  .  |  :  List of 1
[10:52:54.837] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.837] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.837] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.837] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.837] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.837] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:54.837] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f96a2cbe60> 
[10:52:54.837] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.837] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.837] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:54.840] |  :  .  |  :  .  |  :  Old stack:
[10:52:54.840] |  :  .  |  :  .  |  :  List of 1
[10:52:54.840] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.840] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.840] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.840] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.840] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.840] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:54.840] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f96a2cbe60> 
[10:52:54.840] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.840] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.840] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:54.842] |  :  .  |  :  .  |  :  Identical
[10:52:54.843] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:54.843] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:54.843] |  :  .  |  :  .  |  List of future strategies:
[10:52:54.843] |  :  .  |  :  .  |  1. sequential:
[10:52:54.843] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:54.843] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:54.843] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:54.843] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:54.843] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:54.843] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:54.843] |  :  .  |  SequentialFuture started (and completed)
[10:52:54.844] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:54.844] |  :  Launching futures ... done
[10:52:54.844] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:54.844] |  Using SequentialFutureBackend ... done
[10:52:54.844] run() for Future (‘SequentialFuture’) ... done
SequentialFuture:
Label: NULL
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 0bafcfa179940935acec8f99ff56a3e1
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: NULL
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 0bafcfa179940935acec8f99ff56a3e1
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’

*** FutureRegistry('rscript', 'collect-first') ...
[10:52:54.862] resolved() for ‘SequentialFuture’ ...
[10:52:54.862] |  state: ‘finished’
[10:52:54.862] |  run: FALSE
[10:52:54.862] |  result: ‘FutureResult’
[10:52:54.863] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('rscript', 'add') ...
[10:52:54.863] getGlobalsAndPackages() ...
[10:52:54.863] |  Searching for globals ...
[10:52:54.864] |  :  globals found: [1] ‘{’
[10:52:54.864] |  Searching for globals ... DONE
[10:52:54.864] |  Resolving globals: FALSE
[10:52:54.864] |  Search for packages associated with the globals ...
[10:52:54.864] |  :  Packages associated with globals: [1] ‘base’
[10:52:54.864] |  :  Packages: [1] ‘base’
[10:52:54.864] |  Search for packages associated with the globals ... DONE
[10:52:54.864] |  Packages after dropping 'base': [0] 
[10:52:54.864] |  globals: [0] 
[10:52:54.865] |  packages: [0] 
[10:52:54.865] getGlobalsAndPackages() ... done
[10:52:54.865] run() for Future (‘Future’) ...
[10:52:54.865] |  state: ‘created’
[10:52:54.865] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:54.865] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:54.865] |  Using SequentialFutureBackend ...
[10:52:54.865] |  :  Launching futures ...
[10:52:54.865] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:54.866] |  :  .  |  getFutureData() ...
[10:52:54.866] |  :  .  |  :  getFutureCore() ...
[10:52:54.866] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:54.866] |  :  .  |  :  getFutureCore() ... done
[10:52:54.866] |  :  .  |  :  getFutureCapture() ...
[10:52:54.866] |  :  .  |  :  getFutureCapture() ... done
[10:52:54.866] |  :  .  |  :  getFutureContext() ...
[10:52:54.866] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:54.866] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:54.866] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:54.866] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:54.867] |  :  .  |  :  getFutureContext() ... done
[10:52:54.867] |  :  .  |  getFutureData() ... done
[10:52:54.867] |  :  .  |  attachPackages() ...
[10:52:54.867] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:54.867] |  :  .  |  attachPackages() ... DONE
[10:52:54.867] |  :  .  |  attachPackages() ...
[10:52:54.867] |  :  .  |  :  packages: [n=0] 
[10:52:54.867] |  :  .  |  attachPackages() ... DONE
[10:52:54.868] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:54.868] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:54.868] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:54.868] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:54.868] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:54.868] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:54.868] |  :  .  |  :  .  |  New stack:
[10:52:54.869] |  :  .  |  :  .  |  List of 1
[10:52:54.869] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.869] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.869] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.869] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.869] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.869] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:54.869] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:54.871] |  :  .  |  :  .  |  Old stack:
[10:52:54.871] |  :  .  |  :  .  |  List of 1
[10:52:54.871] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.871] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.871] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.871] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.871] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.871] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:54.871] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f96a2cbe60> 
[10:52:54.871] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.871] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.871] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:54.874] |  :  .  |  :  .  |  Not identical
[10:52:54.874] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:54.874] |  :  .  |  :  .  |  :  List of 2
[10:52:54.874] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.874] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.874] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.874] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.874] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.874] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:54.874] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.874] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.874] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.874] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.874] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.874] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:54.874] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f96a2cbe60> 
[10:52:54.874] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.874] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.879] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:54.879] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:54.879] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:54.879] |  :  .  |  :  .  List of future strategies:
[10:52:54.879] |  :  .  |  :  .  1. sequential:
[10:52:54.879] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:54.879] |  :  .  |  :  .     - tweaked: FALSE
[10:52:54.879] |  :  .  |  :  .     - call: plan(sequential)
[10:52:54.880] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:54.880] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:54.881] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:54.881] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:54.881] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:54.881] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:54.882] |  :  .  |  :  .  |  :  New stack:
[10:52:54.882] |  :  .  |  :  .  |  :  List of 1
[10:52:54.882] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.882] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.882] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.882] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.882] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.882] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:54.882] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f96a2cbe60> 
[10:52:54.882] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.882] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.882] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:54.884] |  :  .  |  :  .  |  :  Old stack:
[10:52:54.885] |  :  .  |  :  .  |  :  List of 1
[10:52:54.885] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.885] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.885] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.885] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.885] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.885] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:54.885] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f96a2cbe60> 
[10:52:54.885] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.885] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.885] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:54.887] |  :  .  |  :  .  |  :  Identical
[10:52:54.887] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:54.887] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:54.888] |  :  .  |  :  .  |  List of future strategies:
[10:52:54.888] |  :  .  |  :  .  |  1. sequential:
[10:52:54.888] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:54.888] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:54.888] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:54.888] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:54.888] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:54.888] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:54.888] |  :  .  |  SequentialFuture started (and completed)
[10:52:54.888] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:54.889] |  :  Launching futures ... done
[10:52:54.889] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:54.889] |  Using SequentialFutureBackend ... done
[10:52:54.889] run() for Future (‘SequentialFuture’) ... done
SequentialFuture:
Label: NULL
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 0bafcfa179940935acec8f99ff56a3e1
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
*** FutureRegistry('rscript', 'reset') ...
*** FutureRegistry('rscript', 'list') ...
list()

> message("*** FutureRegistry() - exceptions ...")
*** FutureRegistry() - exceptions ...

> futures <- FutureRegistry(where = "test", action = "list")

> stopifnot(length(futures) == 0)

> f <- future(1)
[10:52:54.890] getGlobalsAndPackages() ...
[10:52:54.890] |  Searching for globals ...
[10:52:54.890] |  :  globals found: [0] 
[10:52:54.890] |  Searching for globals ... DONE
[10:52:54.890] |  globals: [0] <none>
[10:52:54.890] |  packages: [0] <none>
[10:52:54.891] getGlobalsAndPackages() ... done
[10:52:54.891] run() for Future (‘Future’) ...
[10:52:54.891] |  state: ‘created’
[10:52:54.891] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:54.891] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:54.891] |  Using SequentialFutureBackend ...
[10:52:54.891] |  :  Launching futures ...
[10:52:54.891] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:54.891] |  :  .  |  getFutureData() ...
[10:52:54.892] |  :  .  |  :  getFutureCore() ...
[10:52:54.892] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:54.892] |  :  .  |  :  getFutureCore() ... done
[10:52:54.892] |  :  .  |  :  getFutureCapture() ...
[10:52:54.892] |  :  .  |  :  getFutureCapture() ... done
[10:52:54.892] |  :  .  |  :  getFutureContext() ...
[10:52:54.892] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:54.892] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:54.892] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:54.892] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:54.892] |  :  .  |  :  getFutureContext() ... done
[10:52:54.893] |  :  .  |  getFutureData() ... done
[10:52:54.893] |  :  .  |  attachPackages() ...
[10:52:54.893] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:54.893] |  :  .  |  attachPackages() ... DONE
[10:52:54.893] |  :  .  |  attachPackages() ...
[10:52:54.893] |  :  .  |  :  packages: [n=0] 
[10:52:54.893] |  :  .  |  attachPackages() ... DONE
[10:52:54.894] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:54.894] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:54.894] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:54.894] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:54.894] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:54.895] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:54.895] |  :  .  |  :  .  |  New stack:
[10:52:54.896] |  :  .  |  :  .  |  List of 1
[10:52:54.896] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.896] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.896] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.896] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.896] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.896] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:54.896] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:54.898] |  :  .  |  :  .  |  Old stack:
[10:52:54.898] |  :  .  |  :  .  |  List of 1
[10:52:54.898] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.898] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.898] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.898] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.898] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.898] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:54.898] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f96a2cbe60> 
[10:52:54.898] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.898] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.898] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:54.901] |  :  .  |  :  .  |  Not identical
[10:52:54.901] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:54.901] |  :  .  |  :  .  |  :  List of 2
[10:52:54.901] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.901] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.901] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.901] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.901] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.901] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:54.901] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.901] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.901] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.901] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.901] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.901] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:54.901] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f96a2cbe60> 
[10:52:54.901] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.901] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.905] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:54.905] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:54.905] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:54.905] |  :  .  |  :  .  List of future strategies:
[10:52:54.905] |  :  .  |  :  .  1. sequential:
[10:52:54.905] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:54.905] |  :  .  |  :  .     - tweaked: FALSE
[10:52:54.905] |  :  .  |  :  .     - call: plan(sequential)
[10:52:54.906] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:54.906] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:54.907] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:54.908] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:54.908] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:54.908] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:54.908] |  :  .  |  :  .  |  :  New stack:
[10:52:54.908] |  :  .  |  :  .  |  :  List of 1
[10:52:54.908] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.908] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.908] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.908] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.908] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.908] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:54.908] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f96a2cbe60> 
[10:52:54.908] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.908] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.908] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:54.911] |  :  .  |  :  .  |  :  Old stack:
[10:52:54.911] |  :  .  |  :  .  |  :  List of 1
[10:52:54.911] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:54.911] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:54.911] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.911] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.911] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.911] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:54.911] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55f96a2cbe60> 
[10:52:54.911] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:54.911] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:54.911] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:54.914] |  :  .  |  :  .  |  :  Identical
[10:52:54.914] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:54.914] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:54.914] |  :  .  |  :  .  |  List of future strategies:
[10:52:54.914] |  :  .  |  :  .  |  1. sequential:
[10:52:54.914] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:54.914] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:54.914] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:54.915] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:54.915] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:54.916] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:54.916] |  :  .  |  SequentialFuture started (and completed)
[10:52:54.916] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:54.916] |  :  Launching futures ... done
[10:52:54.916] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:54.916] |  Using SequentialFutureBackend ... done
[10:52:54.916] run() for Future (‘SequentialFuture’) ... done

> FutureRegistry(where = "test", action = "add", future = f)
[[1]]
SequentialFuture:
Label: NULL
Expression:
[1] 1
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 0bafcfa179940935acec8f99ff56a3e1
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’


> futures <- FutureRegistry(where = "test", action = "list")

> stopifnot(length(futures) == 1)

> res <- tryCatch(FutureRegistry(where = "test", action = "add", 
+     future = f), error = identity)

> stopifnot(inherits(res, "error"))

> futures <- FutureRegistry(where = "test", action = "list")

> stopifnot(length(futures) == 1)

> FutureRegistry(where = "test", action = "remove", 
+     future = f)
list()

> futures <- FutureRegistry(where = "test", action = "list")

> stopifnot(length(futures) == 0)

> res <- tryCatch(FutureRegistry(where = "test", action = "remove", 
+     future = f), error = identity)

> stopifnot(inherits(res, "error"))

> futures <- FutureRegistry(where = "test", action = "list")

> stopifnot(length(futures) == 0)

> FutureRegistry(where = "test", action = "reset")
list()

> futures <- FutureRegistry(where = "test", action = "list")

> stopifnot(length(futures) == 0)

> res <- tryCatch(FutureRegistry(where = "test", action = "<unknown>"), 
+     error = identity)

> stopifnot(inherits(res, "error"))

> message("*** FutureRegistry() - exceptions ... DONE")
*** FutureRegistry() - exceptions ... DONE

> message("*** FutureRegistry() ... DONE")
*** FutureRegistry() ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.3s, sys.self=0.01s, elapsed=0.3s, user.child=0.003s, sys.child=0.004s
Test ‘FutureRegistry’ ... success
> 
