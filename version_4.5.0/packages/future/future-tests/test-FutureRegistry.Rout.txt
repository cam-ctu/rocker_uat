
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-FutureRegistry.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("FutureRegistry")
Test ‘FutureRegistry’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-FutureRegistry.R’

> library(future)
[08:08:19.984] Option 'future.startup.script': TRUE
[08:08:19.985] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:08:19.985] Future startup scripts found: <none>

> message("*** FutureRegistry() ...")
*** FutureRegistry() ...

> for (where in c("multicore-dummy-uuid", "rscript")) {
+     message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+     futures <- FutureR .... [TRUNCATED] 
*** FutureRegistry('multicore-dummy-uuid', 'list') ...
list()
*** FutureRegistry('multicore-dummy-uuid', 'add') ...
[08:08:20.008] future(..., label = NULL) ...
[08:08:20.008] | lazy: FALSE
[08:08:20.008] | stdout: TRUE
[08:08:20.008] | conditions: [n=1] ‘condition’
[08:08:20.008] | gc: FALSE
[08:08:20.008] | earlySignal: FALSE
[08:08:20.009] | getGlobalsAndPackages() ...
[08:08:20.009] | : Searching for globals ...
[08:08:20.020] | : . globals found: [1] ‘{’
[08:08:20.020] | : Searching for globals ... done
[08:08:20.020] | : Resolving globals: FALSE
[08:08:20.020] | : Search for packages associated with the globals ...
[08:08:20.020] | : . Packages associated with globals: [1] ‘base’
[08:08:20.021] | : . Packages: [1] ‘base’
[08:08:20.021] | : Search for packages associated with the globals ... done
[08:08:20.021] | : Packages after dropping 'base': [0] 
[08:08:20.021] | : globals: [0] 
[08:08:20.021] | : packages: [0] 
[08:08:20.021] | getGlobalsAndPackages() ... done
[08:08:20.022] | run() for ‘Future’ (<unnamed-1>) ...
[08:08:20.022] | : state: ‘created’
[08:08:20.022] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.022] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:20.022] | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.022] | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.022] | : . '  - attr(*, "init")= logi TRUE
[08:08:20.022] | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.022] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.022] | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.022] | : . '  - attr(*, "call")= language plan(sequential)
[08:08:20.026] | : . ' init: TRUE
[08:08:20.026] | : . ' makeFutureBackend(<sequential>) ...
[08:08:20.027] | : . ' , Backend function: <‘NULL’>
[08:08:20.027] | : . ' , Evaluator tweak arguments: [n=0]
[08:08:20.027] | : . ' ,  list()
[08:08:20.027] | : . ' , Evaluator formal arguments: [n=2]
[08:08:20.027] | : . ' ,  list()
[08:08:20.027] | : . ' , Backend factory arguments: [n=2]
[08:08:20.028] | : . ' , Dotted pair list of 2
[08:08:20.028] | : . ' ,  $ gc         : logi FALSE
[08:08:20.028] | : . ' ,  $ earlySignal: logi FALSE
[08:08:20.029] | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:20.029] | : . ' makeFutureBackend(<sequential>) ... done
[08:08:20.029] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:20.029] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.029] | : Using SequentialFutureBackend ...
[08:08:20.029] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:20.029] | : . Launching futures ...
[08:08:20.030] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:20.030] | : . ' , getFutureData() ...
[08:08:20.030] | : . ' , ; getFutureCore() ...
[08:08:20.030] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:20.030] | : . ' , ; getFutureCore() ... done
[08:08:20.030] | : . ' , ; getFutureCapture() ...
[08:08:20.030] | : . ' , ; getFutureCapture() ... done
[08:08:20.031] | : . ' , ; getFutureContext() ...
[08:08:20.031] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.031] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:20.031] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.031] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:20.031] | : . ' , ; getFutureContext() ... done
[08:08:20.031] | : . ' , getFutureData() ... done
[08:08:20.034] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.034] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:20.034] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.034] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.035] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:20.035] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:20.035] | : . ' , ; ` | New stack:
[08:08:20.035] | : . ' , ; ` | List of 1
[08:08:20.035] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.035] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.035] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:20.035] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.035] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.035] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.035] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:20.035] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.037] | : . ' , ; ` | Old stack:
[08:08:20.038] | : . ' , ; ` | List of 1
[08:08:20.038] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.038] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.038] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:20.038] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.038] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.038] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.038] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:20.038] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55677ace9e88> 
[08:08:20.038] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.038] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.038] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.041] | : . ' , ; ` | Not identical
[08:08:20.041] | : . ' , ; ` | all.equal() for future ...
[08:08:20.041] | : . ' , ; ` | : List of 2
[08:08:20.041] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.041] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.041] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:20.041] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.041] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.041] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.041] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:20.041] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.041] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.041] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.041] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.041] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.041] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.041] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.041] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55677ace9e88> 
[08:08:20.041] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.041] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.048] | : . ' , ; ` | all.equal() for future ... done
[08:08:20.048] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:20.048] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:20.048] | : . ' , ; ` List of future strategies:
[08:08:20.048] | : . ' , ; ` 1. sequential:
[08:08:20.048] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:20.048] | : . ' , ; `    - tweaked: FALSE
[08:08:20.048] | : . ' , ; `    - call: plan(sequential)
[08:08:20.048] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:20.049] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.051] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.051] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.051] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:20.051] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:20.051] | : . ' , ; ` | : New stack:
[08:08:20.051] | : . ' , ; ` | : List of 1
[08:08:20.051] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.051] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.051] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.051] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.051] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.051] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.051] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.051] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55677ace9e88> 
[08:08:20.051] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.051] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.051] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.054] | : . ' , ; ` | : Old stack:
[08:08:20.055] | : . ' , ; ` | : List of 1
[08:08:20.055] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.055] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.055] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.055] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.055] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.055] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.055] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.055] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55677ace9e88> 
[08:08:20.055] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.055] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.055] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.058] | : . ' , ; ` | : Identical
[08:08:20.058] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:20.058] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:20.058] | : . ' , ; ` | List of future strategies:
[08:08:20.058] | : . ' , ; ` | 1. sequential:
[08:08:20.058] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:20.058] | : . ' , ; ` |    - tweaked: FALSE
[08:08:20.058] | : . ' , ; ` |    - call: plan(sequential)
[08:08:20.058] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:20.058] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.058] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.061] | : . ' , SequentialFuture started (and completed)
[08:08:20.062] | : . ' , signalConditions() ...
[08:08:20.062] | : . ' , ; include = ‘immediateCondition’
[08:08:20.062] | : . ' , ; exclude = 
[08:08:20.062] | : . ' , ; resignal = FALSE
[08:08:20.062] | : . ' , ; Number of conditions: 6
[08:08:20.062] | : . ' , ;  int 6
[08:08:20.063] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.063] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.063] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.063] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.063] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.063] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.063] | : . ' , signalConditions() ... done
[08:08:20.063] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:20.064] | : . Launching futures ... done
[08:08:20.064] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:20.064] | : Using SequentialFutureBackend ... done
[08:08:20.064] | run() for ‘Future’ (<unnamed-1>) ... done
[08:08:20.064] future(..., label = NULL) ... done
SequentialFuture:
Label: <unnamed-1>
Expression:
{
    1
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: d1634be05cbcd0b72b3e04fef6c10214-1
Owner process: d1634be05cbcd0b72b3e04fef6c10214
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
Value: 39 bytes of class ‘numeric’
Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
Duration: 0.01793361 secs (started 2025-06-17 08:08:20.03298)
Worker process: d1634be05cbcd0b72b3e04fef6c10214
*** FutureRegistry('multicore-dummy-uuid', 'list') ...
[[1]]
SequentialFuture:
Label: <unnamed-1>
Expression:
{
    1
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: d1634be05cbcd0b72b3e04fef6c10214-1
Owner process: d1634be05cbcd0b72b3e04fef6c10214
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
Value: 39 bytes of class ‘numeric’
Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
Duration: 0.01793361 secs (started 2025-06-17 08:08:20.03298)
Worker process: d1634be05cbcd0b72b3e04fef6c10214

*** FutureRegistry('multicore-dummy-uuid', 'remove') ...
*** FutureRegistry('multicore-dummy-uuid', 'list') ...
list()
*** FutureRegistry('multicore-dummy-uuid', 'add') ...
[08:08:20.066] future(..., label = NULL) ...
[08:08:20.066] | lazy: FALSE
[08:08:20.066] | stdout: TRUE
[08:08:20.066] | conditions: [n=1] ‘condition’
[08:08:20.067] | gc: FALSE
[08:08:20.067] | earlySignal: FALSE
[08:08:20.067] | getGlobalsAndPackages() ...
[08:08:20.067] | : Searching for globals ...
[08:08:20.071] | : . globals found: [1] ‘{’
[08:08:20.071] | : Searching for globals ... done
[08:08:20.071] | : Resolving globals: FALSE
[08:08:20.071] | : Search for packages associated with the globals ...
[08:08:20.071] | : . Packages associated with globals: [1] ‘base’
[08:08:20.071] | : . Packages: [1] ‘base’
[08:08:20.072] | : Search for packages associated with the globals ... done
[08:08:20.072] | : Packages after dropping 'base': [0] 
[08:08:20.072] | : globals: [0] 
[08:08:20.072] | : packages: [0] 
[08:08:20.072] | getGlobalsAndPackages() ... done
[08:08:20.072] | run() for ‘Future’ (<unnamed-2>) ...
[08:08:20.072] | : state: ‘created’
[08:08:20.072] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.072] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.073] | : Using SequentialFutureBackend ...
[08:08:20.073] | : . Number of futures since start: 1 (1 created, 2 launched, 2 finished)
[08:08:20.073] | : . Launching futures ...
[08:08:20.073] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:20.073] | : . ' , getFutureData() ...
[08:08:20.073] | : . ' , ; getFutureCore() ...
[08:08:20.073] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:20.073] | : . ' , ; getFutureCore() ... done
[08:08:20.073] | : . ' , ; getFutureCapture() ...
[08:08:20.074] | : . ' , ; getFutureCapture() ... done
[08:08:20.074] | : . ' , ; getFutureContext() ...
[08:08:20.074] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.074] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:20.074] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.074] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:20.074] | : . ' , ; getFutureContext() ... done
[08:08:20.074] | : . ' , getFutureData() ... done
[08:08:20.075] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.076] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:20.076] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.076] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.076] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:20.076] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:20.076] | : . ' , ; ` | New stack:
[08:08:20.076] | : . ' , ; ` | List of 1
[08:08:20.076] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.076] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.076] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:20.076] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.076] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.076] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.076] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:20.076] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.079] | : . ' , ; ` | Old stack:
[08:08:20.079] | : . ' , ; ` | List of 1
[08:08:20.079] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.079] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.079] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:20.079] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.079] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.079] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.079] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:20.079] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55677ace9e88> 
[08:08:20.079] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.079] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.079] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.082] | : . ' , ; ` | Not identical
[08:08:20.082] | : . ' , ; ` | all.equal() for future ...
[08:08:20.082] | : . ' , ; ` | : List of 2
[08:08:20.082] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.082] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.082] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:20.082] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.082] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.082] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.082] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:20.082] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.082] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.082] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.082] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.082] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.082] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.082] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.082] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55677ace9e88> 
[08:08:20.082] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.082] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.087] | : . ' , ; ` | all.equal() for future ... done
[08:08:20.087] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:20.087] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:20.087] | : . ' , ; ` List of future strategies:
[08:08:20.087] | : . ' , ; ` 1. sequential:
[08:08:20.087] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:20.087] | : . ' , ; `    - tweaked: FALSE
[08:08:20.087] | : . ' , ; `    - call: plan(sequential)
[08:08:20.089] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:20.089] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.090] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.090] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.090] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:20.090] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:20.091] | : . ' , ; ` | : New stack:
[08:08:20.091] | : . ' , ; ` | : List of 1
[08:08:20.091] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.091] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.091] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.091] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.091] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.091] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.091] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.091] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55677ace9e88> 
[08:08:20.091] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.091] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.091] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.094] | : . ' , ; ` | : Old stack:
[08:08:20.094] | : . ' , ; ` | : List of 1
[08:08:20.094] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.094] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.094] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.094] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.094] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.094] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.094] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.094] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55677ace9e88> 
[08:08:20.094] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.094] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.094] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.097] | : . ' , ; ` | : Identical
[08:08:20.097] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:20.097] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:20.097] | : . ' , ; ` | List of future strategies:
[08:08:20.097] | : . ' , ; ` | 1. sequential:
[08:08:20.097] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:20.097] | : . ' , ; ` |    - tweaked: FALSE
[08:08:20.097] | : . ' , ; ` |    - call: plan(sequential)
[08:08:20.097] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:20.098] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.098] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.098] | : . ' , SequentialFuture started (and completed)
[08:08:20.098] | : . ' , signalConditions() ...
[08:08:20.098] | : . ' , ; include = ‘immediateCondition’
[08:08:20.098] | : . ' , ; exclude = 
[08:08:20.098] | : . ' , ; resignal = FALSE
[08:08:20.098] | : . ' , ; Number of conditions: 6
[08:08:20.099] | : . ' , ;  int 6
[08:08:20.099] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.099] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.099] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.099] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.099] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.099] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.100] | : . ' , signalConditions() ... done
[08:08:20.100] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:20.100] | : . Launching futures ... done
[08:08:20.100] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:20.100] | : Using SequentialFutureBackend ... done
[08:08:20.100] | run() for ‘Future’ (<unnamed-2>) ... done
[08:08:20.100] future(..., label = NULL) ... done
SequentialFuture:
Label: <unnamed-2>
Expression:
{
    2
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: d1634be05cbcd0b72b3e04fef6c10214-2
Owner process: d1634be05cbcd0b72b3e04fef6c10214
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
Value: 39 bytes of class ‘numeric’
Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
Duration: 0.01534867 secs (started 2025-06-17 08:08:20.074919)
Worker process: d1634be05cbcd0b72b3e04fef6c10214
*** FutureRegistry('multicore-dummy-uuid', 'list') ...
[[1]]
SequentialFuture:
Label: <unnamed-2>
Expression:
{
    2
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: d1634be05cbcd0b72b3e04fef6c10214-2
Owner process: d1634be05cbcd0b72b3e04fef6c10214
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
Value: 39 bytes of class ‘numeric’
Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
Duration: 0.01534867 secs (started 2025-06-17 08:08:20.074919)
Worker process: d1634be05cbcd0b72b3e04fef6c10214

*** FutureRegistry('multicore-dummy-uuid', 'collect-first') ...
[08:08:20.101] resolved() for SequentialFuture (<unnamed-2>) ...
[08:08:20.102] | state: ‘finished’
[08:08:20.102] | run: FALSE
[08:08:20.102] | result: ‘FutureResult’
[08:08:20.102] resolved() for SequentialFuture (<unnamed-2>) ... done
[08:08:20.102] value() for SequentialFuture (<unnamed-2>) ...
[08:08:20.102] | signalConditions() ...
[08:08:20.103] | : include = ‘immediateCondition’
[08:08:20.103] | : exclude = 
[08:08:20.103] | : resignal = FALSE
[08:08:20.103] | : Number of conditions: 6
[08:08:20.103] | :  int 6
[08:08:20.103] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.103] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.104] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.104] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.104] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.104] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.104] | signalConditions() ... done
[08:08:20.104] | check for misuse ...
[08:08:20.104] | check for misuse ... done
[08:08:20.104] value() for SequentialFuture (<unnamed-2>) ... done
list()
*** FutureRegistry('multicore-dummy-uuid', 'add') ...
[08:08:20.105] future(..., label = NULL) ...
[08:08:20.105] | lazy: FALSE
[08:08:20.105] | stdout: TRUE
[08:08:20.105] | conditions: [n=1] ‘condition’
[08:08:20.105] | gc: FALSE
[08:08:20.105] | earlySignal: FALSE
[08:08:20.105] | getGlobalsAndPackages() ...
[08:08:20.105] | : Searching for globals ...
[08:08:20.109] | : . globals found: [1] ‘{’
[08:08:20.109] | : Searching for globals ... done
[08:08:20.109] | : Resolving globals: FALSE
[08:08:20.109] | : Search for packages associated with the globals ...
[08:08:20.109] | : . Packages associated with globals: [1] ‘base’
[08:08:20.109] | : . Packages: [1] ‘base’
[08:08:20.109] | : Search for packages associated with the globals ... done
[08:08:20.110] | : Packages after dropping 'base': [0] 
[08:08:20.110] | : globals: [0] 
[08:08:20.110] | : packages: [0] 
[08:08:20.110] | getGlobalsAndPackages() ... done
[08:08:20.110] | run() for ‘Future’ (<unnamed-3>) ...
[08:08:20.110] | : state: ‘created’
[08:08:20.110] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.110] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.111] | : Using SequentialFutureBackend ...
[08:08:20.111] | : . Number of futures since start: 2 (2 created, 4 launched, 4 finished)
[08:08:20.111] | : . Launching futures ...
[08:08:20.111] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:20.111] | : . ' , getFutureData() ...
[08:08:20.111] | : . ' , ; getFutureCore() ...
[08:08:20.111] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:20.111] | : . ' , ; getFutureCore() ... done
[08:08:20.111] | : . ' , ; getFutureCapture() ...
[08:08:20.111] | : . ' , ; getFutureCapture() ... done
[08:08:20.112] | : . ' , ; getFutureContext() ...
[08:08:20.112] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.112] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:20.112] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.112] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:20.112] | : . ' , ; getFutureContext() ... done
[08:08:20.112] | : . ' , getFutureData() ... done
[08:08:20.113] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.113] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:20.114] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.114] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.114] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:20.114] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:20.114] | : . ' , ; ` | New stack:
[08:08:20.114] | : . ' , ; ` | List of 1
[08:08:20.114] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.114] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.114] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:20.114] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.114] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.114] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.114] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:20.114] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.117] | : . ' , ; ` | Old stack:
[08:08:20.117] | : . ' , ; ` | List of 1
[08:08:20.117] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.117] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.117] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:20.117] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.117] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.117] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.117] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:20.117] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55677ace9e88> 
[08:08:20.117] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.117] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.117] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.120] | : . ' , ; ` | Not identical
[08:08:20.120] | : . ' , ; ` | all.equal() for future ...
[08:08:20.120] | : . ' , ; ` | : List of 2
[08:08:20.120] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.120] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.120] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:20.120] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.120] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.120] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.120] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:20.120] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.120] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.120] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.120] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.120] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.120] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.120] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.120] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55677ace9e88> 
[08:08:20.120] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.120] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.125] | : . ' , ; ` | all.equal() for future ... done
[08:08:20.125] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:20.125] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:20.125] | : . ' , ; ` List of future strategies:
[08:08:20.125] | : . ' , ; ` 1. sequential:
[08:08:20.125] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:20.125] | : . ' , ; `    - tweaked: FALSE
[08:08:20.125] | : . ' , ; `    - call: plan(sequential)
[08:08:20.125] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:20.126] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.128] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.128] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.128] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:20.128] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:20.128] | : . ' , ; ` | : New stack:
[08:08:20.128] | : . ' , ; ` | : List of 1
[08:08:20.128] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.128] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.128] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.128] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.128] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.128] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.128] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.128] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55677ace9e88> 
[08:08:20.128] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.128] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.128] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.131] | : . ' , ; ` | : Old stack:
[08:08:20.131] | : . ' , ; ` | : List of 1
[08:08:20.131] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.131] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.131] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.131] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.131] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.131] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.131] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.131] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55677ace9e88> 
[08:08:20.131] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.131] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.131] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.134] | : . ' , ; ` | : Identical
[08:08:20.134] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:20.135] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:20.135] | : . ' , ; ` | List of future strategies:
[08:08:20.135] | : . ' , ; ` | 1. sequential:
[08:08:20.135] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:20.135] | : . ' , ; ` |    - tweaked: FALSE
[08:08:20.135] | : . ' , ; ` |    - call: plan(sequential)
[08:08:20.135] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:20.135] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.135] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.135] | : . ' , SequentialFuture started (and completed)
[08:08:20.136] | : . ' , signalConditions() ...
[08:08:20.136] | : . ' , ; include = ‘immediateCondition’
[08:08:20.136] | : . ' , ; exclude = 
[08:08:20.136] | : . ' , ; resignal = FALSE
[08:08:20.136] | : . ' , ; Number of conditions: 6
[08:08:20.136] | : . ' , ;  int 6
[08:08:20.136] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.137] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.137] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.137] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.137] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.137] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.137] | : . ' , signalConditions() ... done
[08:08:20.137] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:20.137] | : . Launching futures ... done
[08:08:20.137] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:20.138] | : Using SequentialFutureBackend ... done
[08:08:20.138] | run() for ‘Future’ (<unnamed-3>) ... done
[08:08:20.138] future(..., label = NULL) ... done
SequentialFuture:
Label: <unnamed-3>
Expression:
{
    2
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: d1634be05cbcd0b72b3e04fef6c10214-3
Owner process: d1634be05cbcd0b72b3e04fef6c10214
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
Value: 39 bytes of class ‘numeric’
Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
Duration: 0.01509118 secs (started 2025-06-17 08:08:20.112795)
Worker process: d1634be05cbcd0b72b3e04fef6c10214
*** FutureRegistry('multicore-dummy-uuid', 'reset') ...
*** FutureRegistry('multicore-dummy-uuid', 'list') ...
list()
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[08:08:20.139] future(..., label = NULL) ...
[08:08:20.139] | lazy: FALSE
[08:08:20.139] | stdout: TRUE
[08:08:20.139] | conditions: [n=1] ‘condition’
[08:08:20.139] | gc: FALSE
[08:08:20.139] | earlySignal: FALSE
[08:08:20.139] | getGlobalsAndPackages() ...
[08:08:20.139] | : Searching for globals ...
[08:08:20.142] | : . globals found: [1] ‘{’
[08:08:20.142] | : Searching for globals ... done
[08:08:20.142] | : Resolving globals: FALSE
[08:08:20.142] | : Search for packages associated with the globals ...
[08:08:20.142] | : . Packages associated with globals: [1] ‘base’
[08:08:20.143] | : . Packages: [1] ‘base’
[08:08:20.143] | : Search for packages associated with the globals ... done
[08:08:20.143] | : Packages after dropping 'base': [0] 
[08:08:20.143] | : globals: [0] 
[08:08:20.143] | : packages: [0] 
[08:08:20.143] | getGlobalsAndPackages() ... done
[08:08:20.143] | run() for ‘Future’ (<unnamed-4>) ...
[08:08:20.143] | : state: ‘created’
[08:08:20.144] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.144] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.144] | : Using SequentialFutureBackend ...
[08:08:20.144] | : . Number of futures since start: 3 (3 created, 6 launched, 5 finished)
[08:08:20.144] | : . Launching futures ...
[08:08:20.144] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:20.144] | : . ' , getFutureData() ...
[08:08:20.144] | : . ' , ; getFutureCore() ...
[08:08:20.144] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:20.144] | : . ' , ; getFutureCore() ... done
[08:08:20.145] | : . ' , ; getFutureCapture() ...
[08:08:20.145] | : . ' , ; getFutureCapture() ... done
[08:08:20.145] | : . ' , ; getFutureContext() ...
[08:08:20.145] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.145] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:20.145] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.146] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:20.146] | : . ' , ; getFutureContext() ... done
[08:08:20.146] | : . ' , getFutureData() ... done
[08:08:20.147] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.148] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:20.148] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.148] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.148] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:20.148] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:20.148] | : . ' , ; ` | New stack:
[08:08:20.148] | : . ' , ; ` | List of 1
[08:08:20.148] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.148] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.148] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:20.148] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.148] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.148] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.148] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:20.148] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.151] | : . ' , ; ` | Old stack:
[08:08:20.151] | : . ' , ; ` | List of 1
[08:08:20.151] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.151] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.151] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:20.151] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.151] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.151] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.151] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:20.151] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55677ace9e88> 
[08:08:20.151] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.151] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.151] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.154] | : . ' , ; ` | Not identical
[08:08:20.154] | : . ' , ; ` | all.equal() for future ...
[08:08:20.154] | : . ' , ; ` | : List of 2
[08:08:20.154] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.154] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.154] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:20.154] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.154] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.154] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.154] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:20.154] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.154] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.154] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.154] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.154] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.154] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.154] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.154] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55677ace9e88> 
[08:08:20.154] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.154] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.159] | : . ' , ; ` | all.equal() for future ... done
[08:08:20.159] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:20.159] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:20.159] | : . ' , ; ` List of future strategies:
[08:08:20.159] | : . ' , ; ` 1. sequential:
[08:08:20.159] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:20.159] | : . ' , ; `    - tweaked: FALSE
[08:08:20.159] | : . ' , ; `    - call: plan(sequential)
[08:08:20.160] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:20.160] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.161] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.161] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.161] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:20.162] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:20.162] | : . ' , ; ` | : New stack:
[08:08:20.162] | : . ' , ; ` | : List of 1
[08:08:20.162] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.162] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.162] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.162] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.162] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.162] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.162] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.162] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55677ace9e88> 
[08:08:20.162] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.162] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.162] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.166] | : . ' , ; ` | : Old stack:
[08:08:20.166] | : . ' , ; ` | : List of 1
[08:08:20.166] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.166] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.166] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.166] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.166] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.166] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.166] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.166] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55677ace9e88> 
[08:08:20.166] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.166] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.166] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.169] | : . ' , ; ` | : Identical
[08:08:20.169] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:20.169] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:20.169] | : . ' , ; ` | List of future strategies:
[08:08:20.169] | : . ' , ; ` | 1. sequential:
[08:08:20.169] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:20.169] | : . ' , ; ` |    - tweaked: FALSE
[08:08:20.169] | : . ' , ; ` |    - call: plan(sequential)
[08:08:20.170] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:20.170] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.170] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.170] | : . ' , SequentialFuture started (and completed)
[08:08:20.170] | : . ' , signalConditions() ...
[08:08:20.170] | : . ' , ; include = ‘immediateCondition’
[08:08:20.170] | : . ' , ; exclude = 
[08:08:20.171] | : . ' , ; resignal = FALSE
[08:08:20.171] | : . ' , ; Number of conditions: 6
[08:08:20.171] | : . ' , ;  int 6
[08:08:20.171] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.171] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.171] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.171] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.172] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.172] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.172] | : . ' , signalConditions() ... done
[08:08:20.172] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:20.172] | : . Launching futures ... done
[08:08:20.172] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:20.172] | : Using SequentialFutureBackend ... done
[08:08:20.172] | run() for ‘Future’ (<unnamed-4>) ... done
[08:08:20.172] future(..., label = NULL) ... done
SequentialFuture:
Label: <unnamed-4>
Expression:
{
    1
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: d1634be05cbcd0b72b3e04fef6c10214-4
Owner process: d1634be05cbcd0b72b3e04fef6c10214
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
Value: 39 bytes of class ‘numeric’
Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
Duration: 0.0146091 secs (started 2025-06-17 08:08:20.146852)
Worker process: d1634be05cbcd0b72b3e04fef6c10214
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: <unnamed-4>
Expression:
{
    1
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: d1634be05cbcd0b72b3e04fef6c10214-4
Owner process: d1634be05cbcd0b72b3e04fef6c10214
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
Value: 39 bytes of class ‘numeric’
Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
Duration: 0.0146091 secs (started 2025-06-17 08:08:20.146852)
Worker process: d1634be05cbcd0b72b3e04fef6c10214

*** FutureRegistry('rscript', 'remove') ...
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[08:08:20.174] future(..., label = NULL) ...
[08:08:20.174] | lazy: FALSE
[08:08:20.174] | stdout: TRUE
[08:08:20.174] | conditions: [n=1] ‘condition’
[08:08:20.174] | gc: FALSE
[08:08:20.174] | earlySignal: FALSE
[08:08:20.174] | getGlobalsAndPackages() ...
[08:08:20.174] | : Searching for globals ...
[08:08:20.177] | : . globals found: [1] ‘{’
[08:08:20.177] | : Searching for globals ... done
[08:08:20.177] | : Resolving globals: FALSE
[08:08:20.177] | : Search for packages associated with the globals ...
[08:08:20.178] | : . Packages associated with globals: [1] ‘base’
[08:08:20.178] | : . Packages: [1] ‘base’
[08:08:20.178] | : Search for packages associated with the globals ... done
[08:08:20.178] | : Packages after dropping 'base': [0] 
[08:08:20.178] | : globals: [0] 
[08:08:20.178] | : packages: [0] 
[08:08:20.178] | getGlobalsAndPackages() ... done
[08:08:20.179] | run() for ‘Future’ (<unnamed-5>) ...
[08:08:20.179] | : state: ‘created’
[08:08:20.179] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.179] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.179] | : Using SequentialFutureBackend ...
[08:08:20.179] | : . Number of futures since start: 4 (4 created, 8 launched, 7 finished)
[08:08:20.179] | : . Launching futures ...
[08:08:20.179] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:20.179] | : . ' , getFutureData() ...
[08:08:20.180] | : . ' , ; getFutureCore() ...
[08:08:20.180] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:20.180] | : . ' , ; getFutureCore() ... done
[08:08:20.180] | : . ' , ; getFutureCapture() ...
[08:08:20.180] | : . ' , ; getFutureCapture() ... done
[08:08:20.180] | : . ' , ; getFutureContext() ...
[08:08:20.180] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.180] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:20.180] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.180] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:20.181] | : . ' , ; getFutureContext() ... done
[08:08:20.181] | : . ' , getFutureData() ... done
[08:08:20.182] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.182] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:20.182] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.182] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.182] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:20.183] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:20.183] | : . ' , ; ` | New stack:
[08:08:20.183] | : . ' , ; ` | List of 1
[08:08:20.183] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.183] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.183] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:20.183] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.183] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.183] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.183] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:20.183] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.186] | : . ' , ; ` | Old stack:
[08:08:20.186] | : . ' , ; ` | List of 1
[08:08:20.186] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.186] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.186] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:20.186] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.186] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.186] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.186] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:20.186] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55677ace9e88> 
[08:08:20.186] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.186] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.186] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.189] | : . ' , ; ` | Not identical
[08:08:20.189] | : . ' , ; ` | all.equal() for future ...
[08:08:20.189] | : . ' , ; ` | : List of 2
[08:08:20.189] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.189] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.189] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:20.189] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.189] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.189] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.189] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:20.189] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.189] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.189] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.189] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.189] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.189] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.189] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.189] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55677ace9e88> 
[08:08:20.189] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.189] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.194] | : . ' , ; ` | all.equal() for future ... done
[08:08:20.194] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:20.194] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:20.194] | : . ' , ; ` List of future strategies:
[08:08:20.194] | : . ' , ; ` 1. sequential:
[08:08:20.194] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:20.194] | : . ' , ; `    - tweaked: FALSE
[08:08:20.194] | : . ' , ; `    - call: plan(sequential)
[08:08:20.195] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:20.195] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.196] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.196] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.197] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:20.197] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:20.197] | : . ' , ; ` | : New stack:
[08:08:20.197] | : . ' , ; ` | : List of 1
[08:08:20.197] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.197] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.197] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.197] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.197] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.197] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.197] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.197] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55677ace9e88> 
[08:08:20.197] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.197] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.197] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.200] | : . ' , ; ` | : Old stack:
[08:08:20.200] | : . ' , ; ` | : List of 1
[08:08:20.200] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.200] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.200] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.200] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.200] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.200] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.200] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.200] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55677ace9e88> 
[08:08:20.200] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.200] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.200] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.204] | : . ' , ; ` | : Identical
[08:08:20.204] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:20.204] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:20.204] | : . ' , ; ` | List of future strategies:
[08:08:20.204] | : . ' , ; ` | 1. sequential:
[08:08:20.204] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:20.204] | : . ' , ; ` |    - tweaked: FALSE
[08:08:20.204] | : . ' , ; ` |    - call: plan(sequential)
[08:08:20.205] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:20.205] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.205] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.205] | : . ' , SequentialFuture started (and completed)
[08:08:20.205] | : . ' , signalConditions() ...
[08:08:20.205] | : . ' , ; include = ‘immediateCondition’
[08:08:20.205] | : . ' , ; exclude = 
[08:08:20.205] | : . ' , ; resignal = FALSE
[08:08:20.205] | : . ' , ; Number of conditions: 6
[08:08:20.206] | : . ' , ;  int 6
[08:08:20.206] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.206] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.206] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.206] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.206] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.206] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.207] | : . ' , signalConditions() ... done
[08:08:20.207] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:20.207] | : . Launching futures ... done
[08:08:20.207] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:20.207] | : Using SequentialFutureBackend ... done
[08:08:20.207] | run() for ‘Future’ (<unnamed-5>) ... done
[08:08:20.207] future(..., label = NULL) ... done
SequentialFuture:
Label: <unnamed-5>
Expression:
{
    2
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: d1634be05cbcd0b72b3e04fef6c10214-5
Owner process: d1634be05cbcd0b72b3e04fef6c10214
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
Value: 39 bytes of class ‘numeric’
Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
Duration: 0.01527929 secs (started 2025-06-17 08:08:20.181268)
Worker process: d1634be05cbcd0b72b3e04fef6c10214
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: <unnamed-5>
Expression:
{
    2
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: d1634be05cbcd0b72b3e04fef6c10214-5
Owner process: d1634be05cbcd0b72b3e04fef6c10214
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
Value: 39 bytes of class ‘numeric’
Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
Duration: 0.01527929 secs (started 2025-06-17 08:08:20.181268)
Worker process: d1634be05cbcd0b72b3e04fef6c10214

*** FutureRegistry('rscript', 'collect-first') ...
[08:08:20.233] resolved() for SequentialFuture (<unnamed-5>) ...
[08:08:20.233] | state: ‘finished’
[08:08:20.233] | run: FALSE
[08:08:20.233] | result: ‘FutureResult’
[08:08:20.233] resolved() for SequentialFuture (<unnamed-5>) ... done
[08:08:20.233] value() for SequentialFuture (<unnamed-5>) ...
[08:08:20.233] | signalConditions() ...
[08:08:20.233] | : include = ‘immediateCondition’
[08:08:20.233] | : exclude = 
[08:08:20.234] | : resignal = FALSE
[08:08:20.234] | : Number of conditions: 6
[08:08:20.234] | :  int 6
[08:08:20.234] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.234] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.234] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.234] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.235] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.235] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.236] | signalConditions() ... done
[08:08:20.236] | check for misuse ...
[08:08:20.236] | check for misuse ... done
[08:08:20.236] value() for SequentialFuture (<unnamed-5>) ... done
list()
*** FutureRegistry('rscript', 'add') ...
[08:08:20.236] future(..., label = NULL) ...
[08:08:20.236] | lazy: FALSE
[08:08:20.236] | stdout: TRUE
[08:08:20.236] | conditions: [n=1] ‘condition’
[08:08:20.237] | gc: FALSE
[08:08:20.237] | earlySignal: FALSE
[08:08:20.237] | getGlobalsAndPackages() ...
[08:08:20.237] | : Searching for globals ...
[08:08:20.240] | : . globals found: [1] ‘{’
[08:08:20.240] | : Searching for globals ... done
[08:08:20.240] | : Resolving globals: FALSE
[08:08:20.240] | : Search for packages associated with the globals ...
[08:08:20.240] | : . Packages associated with globals: [1] ‘base’
[08:08:20.240] | : . Packages: [1] ‘base’
[08:08:20.240] | : Search for packages associated with the globals ... done
[08:08:20.241] | : Packages after dropping 'base': [0] 
[08:08:20.241] | : globals: [0] 
[08:08:20.241] | : packages: [0] 
[08:08:20.241] | getGlobalsAndPackages() ... done
[08:08:20.241] | run() for ‘Future’ (<unnamed-6>) ...
[08:08:20.241] | : state: ‘created’
[08:08:20.241] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.241] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.241] | : Using SequentialFutureBackend ...
[08:08:20.242] | : . Number of futures since start: 5 (5 created, 10 launched, 9 finished)
[08:08:20.242] | : . Launching futures ...
[08:08:20.242] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:20.242] | : . ' , getFutureData() ...
[08:08:20.242] | : . ' , ; getFutureCore() ...
[08:08:20.242] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:20.242] | : . ' , ; getFutureCore() ... done
[08:08:20.242] | : . ' , ; getFutureCapture() ...
[08:08:20.242] | : . ' , ; getFutureCapture() ... done
[08:08:20.242] | : . ' , ; getFutureContext() ...
[08:08:20.243] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.243] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:20.243] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.243] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:20.243] | : . ' , ; getFutureContext() ... done
[08:08:20.243] | : . ' , getFutureData() ... done
[08:08:20.244] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.244] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:20.245] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.245] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.245] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:20.245] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:20.245] | : . ' , ; ` | New stack:
[08:08:20.245] | : . ' , ; ` | List of 1
[08:08:20.245] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.245] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.245] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:20.245] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.245] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.245] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.245] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:20.245] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.248] | : . ' , ; ` | Old stack:
[08:08:20.248] | : . ' , ; ` | List of 1
[08:08:20.248] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.248] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.248] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:20.248] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.248] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.248] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.248] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:20.248] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55677ace9e88> 
[08:08:20.248] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.248] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.248] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.251] | : . ' , ; ` | Not identical
[08:08:20.251] | : . ' , ; ` | all.equal() for future ...
[08:08:20.251] | : . ' , ; ` | : List of 2
[08:08:20.251] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.251] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.251] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:20.251] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.251] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.251] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.251] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:20.251] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.251] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.251] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.251] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.251] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.251] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.251] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.251] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55677ace9e88> 
[08:08:20.251] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.251] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.257] | : . ' , ; ` | all.equal() for future ... done
[08:08:20.257] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:20.257] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:20.257] | : . ' , ; ` List of future strategies:
[08:08:20.257] | : . ' , ; ` 1. sequential:
[08:08:20.257] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:20.257] | : . ' , ; `    - tweaked: FALSE
[08:08:20.257] | : . ' , ; `    - call: plan(sequential)
[08:08:20.257] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:20.257] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.259] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.259] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.259] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:20.259] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:20.259] | : . ' , ; ` | : New stack:
[08:08:20.259] | : . ' , ; ` | : List of 1
[08:08:20.259] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.259] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.259] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.259] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.259] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.259] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.259] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.259] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55677ace9e88> 
[08:08:20.259] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.259] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.259] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.263] | : . ' , ; ` | : Old stack:
[08:08:20.263] | : . ' , ; ` | : List of 1
[08:08:20.263] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.263] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.263] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.263] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.263] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.263] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.263] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.263] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55677ace9e88> 
[08:08:20.263] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.263] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.263] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.266] | : . ' , ; ` | : Identical
[08:08:20.266] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:20.266] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:20.266] | : . ' , ; ` | List of future strategies:
[08:08:20.266] | : . ' , ; ` | 1. sequential:
[08:08:20.266] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:20.266] | : . ' , ; ` |    - tweaked: FALSE
[08:08:20.266] | : . ' , ; ` |    - call: plan(sequential)
[08:08:20.266] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:20.266] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.267] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.267] | : . ' , SequentialFuture started (and completed)
[08:08:20.267] | : . ' , signalConditions() ...
[08:08:20.267] | : . ' , ; include = ‘immediateCondition’
[08:08:20.267] | : . ' , ; exclude = 
[08:08:20.267] | : . ' , ; resignal = FALSE
[08:08:20.267] | : . ' , ; Number of conditions: 6
[08:08:20.267] | : . ' , ;  int 6
[08:08:20.268] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.268] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.268] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.268] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.268] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.268] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.268] | : . ' , signalConditions() ... done
[08:08:20.268] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:20.269] | : . Launching futures ... done
[08:08:20.269] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:20.269] | : Using SequentialFutureBackend ... done
[08:08:20.269] | run() for ‘Future’ (<unnamed-6>) ... done
[08:08:20.269] future(..., label = NULL) ... done
SequentialFuture:
Label: <unnamed-6>
Expression:
{
    2
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: d1634be05cbcd0b72b3e04fef6c10214-6
Owner process: d1634be05cbcd0b72b3e04fef6c10214
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
Value: 39 bytes of class ‘numeric’
Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
Duration: 0.01539993 secs (started 2025-06-17 08:08:20.243732)
Worker process: d1634be05cbcd0b72b3e04fef6c10214
*** FutureRegistry('rscript', 'reset') ...
*** FutureRegistry('rscript', 'list') ...
list()

> message("*** FutureRegistry() - exceptions ...")
*** FutureRegistry() - exceptions ...

> futures <- FutureRegistry(where = "test", action = "list")

> stopifnot(length(futures) == 0)

> f <- future(1)
[08:08:20.270] future(..., label = NULL) ...
[08:08:20.270] | lazy: FALSE
[08:08:20.270] | stdout: TRUE
[08:08:20.270] | conditions: [n=1] ‘condition’
[08:08:20.270] | gc: FALSE
[08:08:20.271] | earlySignal: FALSE
[08:08:20.271] | getGlobalsAndPackages() ...
[08:08:20.271] | : Searching for globals ...
[08:08:20.273] | : . globals found: [0] 
[08:08:20.273] | : Searching for globals ... done
[08:08:20.273] | : globals: [0] <none>
[08:08:20.273] | : packages: [0] <none>
[08:08:20.273] | getGlobalsAndPackages() ... done
[08:08:20.274] | run() for ‘Future’ (<unnamed-7>) ...
[08:08:20.274] | : state: ‘created’
[08:08:20.274] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.274] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.274] | : Using SequentialFutureBackend ...
[08:08:20.274] | : . Number of futures since start: 6 (6 created, 12 launched, 10 finished)
[08:08:20.274] | : . Launching futures ...
[08:08:20.274] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:20.274] | : . ' , getFutureData() ...
[08:08:20.275] | : . ' , ; getFutureCore() ...
[08:08:20.275] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:20.275] | : . ' , ; getFutureCore() ... done
[08:08:20.275] | : . ' , ; getFutureCapture() ...
[08:08:20.275] | : . ' , ; getFutureCapture() ... done
[08:08:20.275] | : . ' , ; getFutureContext() ...
[08:08:20.275] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.275] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:20.275] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.276] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:20.276] | : . ' , ; getFutureContext() ... done
[08:08:20.276] | : . ' , getFutureData() ... done
[08:08:20.277] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:20.277] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:20.277] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:20.277] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.278] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:20.278] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:20.278] | : . ' , ; ` | New stack:
[08:08:20.278] | : . ' , ; ` | List of 1
[08:08:20.278] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.278] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.278] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:20.278] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.278] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.278] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.278] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:20.278] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.280] | : . ' , ; ` | Old stack:
[08:08:20.281] | : . ' , ; ` | List of 1
[08:08:20.281] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.281] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.281] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:20.281] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.281] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.281] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.281] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:20.281] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55677ace9e88> 
[08:08:20.281] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.281] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.281] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.284] | : . ' , ; ` | Not identical
[08:08:20.284] | : . ' , ; ` | all.equal() for future ...
[08:08:20.284] | : . ' , ; ` | : List of 2
[08:08:20.284] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.284] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.284] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:20.284] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.284] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.284] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.284] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:20.284] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.284] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.284] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.284] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.284] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.284] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.284] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.284] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55677ace9e88> 
[08:08:20.284] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.284] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.289] | : . ' , ; ` | all.equal() for future ... done
[08:08:20.289] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:20.289] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:20.289] | : . ' , ; ` List of future strategies:
[08:08:20.289] | : . ' , ; ` 1. sequential:
[08:08:20.289] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:20.289] | : . ' , ; `    - tweaked: FALSE
[08:08:20.289] | : . ' , ; `    - call: plan(sequential)
[08:08:20.290] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:20.290] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.292] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.292] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:20.293] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:20.293] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:20.293] | : . ' , ; ` | : New stack:
[08:08:20.293] | : . ' , ; ` | : List of 1
[08:08:20.293] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.293] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.293] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.293] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.293] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.293] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.293] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.293] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55677ace9e88> 
[08:08:20.293] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.293] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.293] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.296] | : . ' , ; ` | : Old stack:
[08:08:20.296] | : . ' , ; ` | : List of 1
[08:08:20.296] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:20.296] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:20.296] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:20.296] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.296] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.296] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.296] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:20.296] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55677ace9e88> 
[08:08:20.296] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:20.296] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:20.296] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:20.299] | : . ' , ; ` | : Identical
[08:08:20.299] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:20.299] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:20.299] | : . ' , ; ` | List of future strategies:
[08:08:20.299] | : . ' , ; ` | 1. sequential:
[08:08:20.299] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:20.299] | : . ' , ; ` |    - tweaked: FALSE
[08:08:20.299] | : . ' , ; ` |    - call: plan(sequential)
[08:08:20.300] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:20.300] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.300] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:20.300] | : . ' , SequentialFuture started (and completed)
[08:08:20.300] | : . ' , signalConditions() ...
[08:08:20.300] | : . ' , ; include = ‘immediateCondition’
[08:08:20.301] | : . ' , ; exclude = 
[08:08:20.301] | : . ' , ; resignal = FALSE
[08:08:20.301] | : . ' , ; Number of conditions: 6
[08:08:20.301] | : . ' , ;  int 6
[08:08:20.301] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.301] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.301] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.302] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.302] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.302] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:20.302] | : . ' , signalConditions() ... done
[08:08:20.302] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:20.302] | : . Launching futures ... done
[08:08:20.302] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:20.302] | : Using SequentialFutureBackend ... done
[08:08:20.302] | run() for ‘Future’ (<unnamed-7>) ... done
[08:08:20.303] future(..., label = NULL) ... done

> FutureRegistry(where = "test", action = "add", future = f)
[[1]]
SequentialFuture:
Label: <unnamed-7>
Expression:
[1] 1
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: d1634be05cbcd0b72b3e04fef6c10214-7
Owner process: d1634be05cbcd0b72b3e04fef6c10214
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
Value: 39 bytes of class ‘numeric’
Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
Duration: 0.01607347 secs (started 2025-06-17 08:08:20.27642)
Worker process: d1634be05cbcd0b72b3e04fef6c10214


> futures <- FutureRegistry(where = "test", action = "list")

> stopifnot(length(futures) == 1)

> res <- tryCatch(FutureRegistry(where = "test", action = "add", 
+     future = f), error = identity)

> stopifnot(inherits(res, "error"))

> futures <- FutureRegistry(where = "test", action = "list")

> stopifnot(length(futures) == 1)

> FutureRegistry(where = "test", action = "remove", 
+     future = f)
list()

> futures <- FutureRegistry(where = "test", action = "list")

> stopifnot(length(futures) == 0)

> res <- tryCatch(FutureRegistry(where = "test", action = "remove", 
+     future = f), error = identity)

> stopifnot(inherits(res, "error"))

> futures <- FutureRegistry(where = "test", action = "list")

> stopifnot(length(futures) == 0)

> FutureRegistry(where = "test", action = "reset")
list()

> futures <- FutureRegistry(where = "test", action = "list")

> stopifnot(length(futures) == 0)

> res <- tryCatch(FutureRegistry(where = "test", action = "<unknown>"), 
+     error = identity)

> stopifnot(inherits(res, "error"))

> message("*** FutureRegistry() - exceptions ... DONE")
*** FutureRegistry() - exceptions ... DONE

> message("*** FutureRegistry() ... DONE")
*** FutureRegistry() ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.4s, sys.self=0.01s, elapsed=0.4s, user.child=0.002s, sys.child=0.004s
Test ‘FutureRegistry’ ... success
> 
