
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script incl/testme/test-utils.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("utils")
Test ‘utils’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-utils.R’

> message("*** utils ...")
*** utils ...

> message("*** hpaste() ...")
*** hpaste() ...

> x <- 1:6

> y <- 10:1

> z <- LETTERS[x]

> printf("x = %s.\n", hpaste(x))
x = 1, 2, 3, 4, 5, 6.

> printf("x = %s.\n", hpaste(x, maxHead = 2))
x = 1, 2, ..., 6.

> printf("x = %s.\n", hpaste(x, maxHead = 3))
x = 1, 2, 3, ..., 6.

> printf("x = %s.\n", hpaste(x, maxHead = 4))
x = 1, 2, 3, 4, 5, 6.

> printf("x = %s.\n", hpaste(x, maxHead = 1, maxTail = 2))
x = 1, ..., 5, 6.

> printf("y = %s.\n", hpaste(y, maxHead = Inf))
y = 10, 9, 8, 7, 6, 5, 4, 3, 2, 1.

> printf("y = %s.\n", paste(y, collapse = ", "))
y = 10, 9, 8, 7, 6, 5, 4, 3, 2, 1.

> printf("x = %s.\n", hpaste(x, lastCollapse = " and "))
x = 1, 2, 3, 4, 5 and 6.

> stopifnot(all(hpaste(x, collapse = NULL) == x))

> stopifnot(identical(hpaste(character(0)), character(0)))

> message("*** hpaste() ... DONE")
*** hpaste() ... DONE

> message("*** asIEC() ...")
*** asIEC() ...

> for (size in c(0, 10^(0:20))) {
+     cat(sprintf("Size: %.f bytes = %s\n", size, asIEC(size)))
+ }
Size: 0 bytes = 0 bytes
Size: 1 bytes = 1 bytes
Size: 10 bytes = 10 bytes
Size: 100 bytes = 100 bytes
Size: 1000 bytes = 0.98 KiB
Size: 10000 bytes = 9.77 KiB
Size: 100000 bytes = 97.66 KiB
Size: 1000000 bytes = 976.56 KiB
Size: 10000000 bytes = 9.54 MiB
Size: 100000000 bytes = 95.37 MiB
Size: 1000000000 bytes = 953.67 MiB
Size: 10000000000 bytes = 9.31 GiB
Size: 100000000000 bytes = 93.13 GiB
Size: 1000000000000 bytes = 931.32 GiB
Size: 10000000000000 bytes = 9.09 TiB
Size: 100000000000000 bytes = 90.95 TiB
Size: 1000000000000000 bytes = 909.49 TiB
Size: 10000000000000000 bytes = 8.88 PiB
Size: 100000000000000000 bytes = 88.82 PiB
Size: 1000000000000000000 bytes = 888.18 PiB
Size: 10000000000000000000 bytes = 8.67 EiB
Size: 100000000000000000000 bytes = 86.74 EiB

> message("*** asIEC() ... DONE")
*** asIEC() ... DONE

> message("*** .length() ...")
*** .length() ...

> .length <- future:::.length

> objs <- list(a = 1:3, b = as.list(1:3), c = structure(as.list(1:3), 
+     class = c("foo", "list")), d = data.frame(a = 1:3), e = as.environment(li .... [TRUNCATED] 

> truth <- c(a = 3, b = 3, c = 3, d = 1, e = 1)

> if (requireNamespace("tools")) {
+     objs[["f"]] <- structure(list("foo", length = 5), class = "pdf_doc")
+     truth["f"] <- 2
+ }

> for (name in names(objs)) {
+     obj <- objs[[name]]
+     len <- length(obj)
+     .len <- .length(obj)
+     cat(sprintf("%s: length = %d, .lengt ..." ... [TRUNCATED] 
a: length = 3, .length = 3, expected = 3
b: length = 3, .length = 3, expected = 3
c: length = 3, .length = 3, expected = 3
d: length = 1, .length = 1, expected = 1
e: length = 1, .length = 1, expected = 1
f: length = 2, .length = 2, expected = 2

> message("*** .length() ... DONE")
*** .length() ... DONE

> message("*** mdebug() ...")
*** mdebug() ...

> mdebug("Hello #", 1)
[10:54:53.098] Hello #1

> mdebugf("Hello #%d", 1)
[10:54:53.101] Hello #1

> options(future.debug = TRUE)

> mdebug("Hello #", 2)
[10:54:53.101] Hello #2

> mdebugf("Hello #%d", 2)
[10:54:53.101] Hello #2

> options(future.debug = FALSE)

> mdebug("Hello #", 3)
NULL

> mdebugf("Hello #%d", 3)
NULL

> message("*** mdebug() ... DONE")
*** mdebug() ... DONE

> message("*** geval() et al. ...")
*** geval() et al. ...

> gls <- function(..., envir = .GlobalEnv) ls(..., envir = envir)

> message("- gls() ...")
- gls() ...

> genv <- new.env(parent = globalenv())

> vars <- gls(envir = genv)

> print(vars)
character(0)

> stopifnot(length(vars) == 0)

> message("- gassign() ...")
- gassign() ...

> gassign("a", 1, envir = genv)
[1] "future-grassign"

> vars <- gls(envir = genv)

> print(vars)
[1] "a"

> stopifnot(length(vars) == 1)

> message("- grmall() ...")
- grmall() ...

> grmall(envir = genv)
[1] "future-grmall"

> vars <- gls(envir = genv)

> print(vars)
character(0)

> stopifnot(length(vars) == 0)

> message("- geval() ...")
- geval() ...

> gassign("a", 1, envir = genv)
[1] "future-grassign"

> res <- geval(substitute(a), envir = genv)

> print(res)
[1] 1

> vars <- gls(envir = genv)

> print(vars)
[1] "a"

> stopifnot(length(vars) == 1)

> message("*** geval() et al. ... DONE")
*** geval() et al. ... DONE

> message("*** requirePackages() ...")
*** requirePackages() ...

> res <- requirePackages("future")
Loading required package: future

> res <- requirePackages(c("future", "listenv"))
Loading required package: listenv

> res <- try(requirePackages("<unknown package>"), silent = TRUE)
Loading required package: <unknown package>
Warning in library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,  :
  there is no package called ‘<unknown package>’

> stopifnot(inherits(res, "try-error"))

> message("*** requirePackages() ... DONE")
*** requirePackages() ... DONE

> message("*** importParallel() ...")
*** importParallel() ...

> mclapply <- importParallel("mclapply")

> stopifnot(identical(mclapply, parallel::mclapply))

> ns <- getNamespace("parallel")

> if (exists("sendCall", envir = ns, mode = "function")) {
+     sendCall <- importParallel("sendCall")
+     stopifnot(identical(sendCall, parallel:: .... [TRUNCATED] 

> res <- try(importParallel("<unknown function>"), silent = TRUE)

> stopifnot(inherits(res, "try-error"))

> message("*** importParallel() ... DONE")
*** importParallel() ... DONE

> message("*** utils ... DONE")
*** utils ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.3s, sys.self=0.08s, elapsed=0.4s, user.child=0.004s, sys.child=0.003s
Test ‘utils’ ... success
> 
