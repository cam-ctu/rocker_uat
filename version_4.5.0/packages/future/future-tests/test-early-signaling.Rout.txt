
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script incl/testme/test-early-signaling.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("early-signaling")
Test ‘early-signaling’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-early-signaling.R’

> library(future)
[10:52:35.326] Option 'future.startup.script': TRUE
[10:52:35.327] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[10:52:35.327] Future startup scripts found: <none>

> options(future.debug = FALSE)

> message("*** Early signaling of conditions ...")
*** Early signaling of conditions ...

> message("*** Early signaling of conditions with sequential futures ...")
*** Early signaling of conditions with sequential futures ...

> plan(sequential)

> f <- future({
+     stop("bang!")
+ })

> r <- resolved(f)

> stopifnot(r)

> v <- tryCatch(value(f), error = identity)

> stopifnot(inherits(v, "error"))

> message("- with lazy evaluation ...")
- with lazy evaluation ...

> f <- future({
+     stop("bang!")
+ }, lazy = TRUE)

> r <- resolved(f)

> v <- tryCatch(value(f), error = identity)

> stopifnot(inherits(v, "error"))

> plan(sequential, earlySignal = TRUE)

> f <- tryCatch(future({
+     stop("bang!")
+ }), error = identity)

> stopifnot(inherits(f, "error"))

> message("- with lazy evaluation ...")
- with lazy evaluation ...

> f <- future({
+     stop("bang!")
+ }, lazy = TRUE)

> r <- tryCatch(resolved(f), error = identity)

> stopifnot(inherits(r, "error"))

> v <- tryCatch(value(f), error = identity)

> stopifnot(inherits(v, "error"))

> f <- future({
+     warning("careful!")
+ }, lazy = TRUE)

> res <- tryCatch({
+     r <- resolved(f)
+ }, condition = function(w) w)

> str(res)
List of 2
 $ message: chr "careful!"
 $ call   : language eval(quote({     { ...
 - attr(*, "class")= chr [1:3] "simpleWarning" "warning" "condition"

> stopifnot(inherits(res, "warning"))

> f <- future({
+     message("hey!")
+ }, lazy = TRUE)

> res <- tryCatch({
+     r <- resolved(f)
+ }, condition = function(w) w)

> stopifnot(inherits(res, "message"))

> f <- future({
+     signalCondition(simpleCondition("hmm"))
+ }, lazy = TRUE)

> res <- tryCatch({
+     r <- resolved(f)
+ }, condition = function(w) w)

> stopifnot(inherits(res, "condition"))

> message("*** Early signaling of conditions with sequential futures ... DONE")
*** Early signaling of conditions with sequential futures ... DONE

> message("Number of available cores: ", availableCores())
Number of available cores: 2

> message("*** Early signaling of conditions with multisession futures ...")
*** Early signaling of conditions with multisession futures ...

> plan(multisession)

> f <- future({
+     stop("bang!")
+ })

> Sys.sleep(0.2)

> r <- resolved(f)

> stopifnot(r)

> v <- tryCatch(value(f), error = identity)

> stopifnot(inherits(v, "error"))

> if (availableCores() > 1) {
+     plan(multisession, earlySignal = TRUE)
+     f <- future({
+         stop("bang!")
+     })
+     Sys.sleep(0.2)
+ .... [TRUNCATED] 
MultisessionFuture:
Label: NULL
Expression:
{
    stop("bang!")
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 29498c544efb8445fa610a2054a12c4e
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’

> message("*** Early signaling of conditions with multisession futures ... DONE")
*** Early signaling of conditions with multisession futures ... DONE

> if (supportsMulticore()) {
+     message("*** Early signaling of conditions with multicore futures ...")
+     plan(multicore)
+     f <- future({
+ .... [TRUNCATED] 
*** Early signaling of conditions with multicore futures ...
MulticoreFuture:
Label: NULL
Expression:
{
    stop("bang!")
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 29498c544efb8445fa610a2054a12c4e
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
*** Early signaling of conditions with multicore futures ... DONE

> message("*** Early signaling of conditions ... DONE")
*** Early signaling of conditions ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.4s, sys.self=0.05s, elapsed=3s, user.child=0.2s, sys.child=0.4s
Test ‘early-signaling’ ... success
> 
