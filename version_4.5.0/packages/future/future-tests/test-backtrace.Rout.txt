
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script incl/testme/test-backtrace.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("backtrace")
Test ‘backtrace’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-backtrace.R’

> library(future)
[10:52:22.684] Option 'future.startup.script': TRUE
[10:52:22.684] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[10:52:22.684] Future startup scripts found: <none>

> message("*** backtrace( ) - explicit future ...")
*** backtrace( ) - explicit future ...

> f <- future({
+     42
+     stop("Woops")
+ })
[10:52:22.686] getGlobalsAndPackages() ...
[10:52:22.686] |  Searching for globals ...
[10:52:22.692] |  :  globals found: [2] ‘{’, ‘stop’
[10:52:22.692] |  Searching for globals ... DONE
[10:52:22.693] |  Resolving globals: FALSE
[10:52:22.693] |  Search for packages associated with the globals ...
[10:52:22.693] |  :  Packages associated with globals: [1] ‘base’
[10:52:22.693] |  :  Packages: [1] ‘base’
[10:52:22.693] |  Search for packages associated with the globals ... DONE
[10:52:22.694] |  Packages after dropping 'base': [0] 
[10:52:22.694] |  globals: [0] 
[10:52:22.694] |  packages: [0] 
[10:52:22.694] getGlobalsAndPackages() ... done
[10:52:22.694] run() for Future (‘Future’) ...
[10:52:22.695] |  state: ‘created’
[10:52:22.695] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:22.695] |  :  makeFutureBackend(<sequential>) ...
[10:52:22.695] |  :  .  Backend function: <‘NULL’>
[10:52:22.695] |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:22.695] |  :  makeFutureBackend(<sequential>) ... done
[10:52:22.695] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:22.696] |  Using SequentialFutureBackend ...
[10:52:22.696] |  :  Launching futures ...
[10:52:22.696] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:22.696] |  :  .  |  getFutureData() ...
[10:52:22.698] |  :  .  |  :  getFutureCore() ...
[10:52:22.698] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:22.698] |  :  .  |  :  getFutureCore() ... done
[10:52:22.698] |  :  .  |  :  getFutureCapture() ...
[10:52:22.698] |  :  .  |  :  getFutureCapture() ... done
[10:52:22.699] |  :  .  |  :  getFutureContext() ...
[10:52:22.699] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:22.699] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:22.699] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:22.699] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:22.699] |  :  .  |  :  getFutureContext() ... done
[10:52:22.699] |  :  .  |  getFutureData() ... done
[10:52:22.700] |  :  .  |  attachPackages() ...
[10:52:22.700] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:22.701] |  :  .  |  attachPackages() ... DONE
[10:52:22.701] |  :  .  |  attachPackages() ...
[10:52:22.701] |  :  .  |  :  packages: [n=0] 
[10:52:22.701] |  :  .  |  attachPackages() ... DONE
[10:52:22.701] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:22.701] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:22.702] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:22.702] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:22.702] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:22.702] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:22.702] |  :  .  |  :  .  |  New stack:
[10:52:22.702] |  :  .  |  :  .  |  List of 1
[10:52:22.702] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.702] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.702] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.702] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.702] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.702] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:22.702] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.706] |  :  .  |  :  .  |  Old stack:
[10:52:22.706] |  :  .  |  :  .  |  List of 1
[10:52:22.706] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.706] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.706] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.706] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.706] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.706] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:22.706] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.706] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.706] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.706] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.709] |  :  .  |  :  .  |  Not identical
[10:52:22.710] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:22.710] |  :  .  |  :  .  |  :  List of 2
[10:52:22.710] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.710] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.710] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.710] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.710] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.710] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:22.710] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.710] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.710] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.710] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.710] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.710] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:22.710] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.710] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.710] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.714] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:22.714] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:22.714] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:22.714] |  :  .  |  :  .  List of future strategies:
[10:52:22.714] |  :  .  |  :  .  1. sequential:
[10:52:22.714] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:22.714] |  :  .  |  :  .     - tweaked: FALSE
[10:52:22.714] |  :  .  |  :  .     - call: plan(sequential)
[10:52:22.715] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:22.715] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:22.718] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:22.718] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:22.718] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:22.718] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:22.718] |  :  .  |  :  .  |  :  New stack:
[10:52:22.718] |  :  .  |  :  .  |  :  List of 1
[10:52:22.718] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.718] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.718] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.718] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.718] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.718] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:22.718] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.718] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.718] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.718] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.721] |  :  .  |  :  .  |  :  Old stack:
[10:52:22.721] |  :  .  |  :  .  |  :  List of 1
[10:52:22.721] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.721] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.721] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.721] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.721] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.721] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:22.721] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.721] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.721] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.721] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.725] |  :  .  |  :  .  |  :  Identical
[10:52:22.725] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:22.726] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:22.726] |  :  .  |  :  .  |  List of future strategies:
[10:52:22.726] |  :  .  |  :  .  |  1. sequential:
[10:52:22.726] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:22.726] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:22.726] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:22.726] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:22.726] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:22.726] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:22.726] |  :  .  |  SequentialFuture started (and completed)
[10:52:22.727] |  :  .  |  signalConditions() ...
[10:52:22.727] |  :  .  |  :  include = ‘immediateCondition’
[10:52:22.727] |  :  .  |  :  exclude = 
[10:52:22.727] |  :  .  |  :  resignal = FALSE
[10:52:22.727] |  :  .  |  :  Number of conditions: 1
[10:52:22.727] |  :  .  |  signalConditions() ... done
[10:52:22.727] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:22.728] |  :  Launching futures ... done
[10:52:22.728] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:22.728] |  Using SequentialFutureBackend ... done
[10:52:22.728] run() for Future (‘SequentialFuture’) ... done

> v <- value(f, signal = FALSE)
[10:52:22.728] signalConditions() ...
[10:52:22.728] |  include = ‘immediateCondition’
[10:52:22.729] |  exclude = 
[10:52:22.729] |  resignal = FALSE
[10:52:22.729] |  Number of conditions: 1
[10:52:22.729] signalConditions() ... done

> print(v)
<simpleError in eval(quote({    {        42L        stop("Woops")    }}), new.env()): Woops>

> calls <- backtrace(f)
[10:52:22.730] resolved() for ‘SequentialFuture’ ...
[10:52:22.730] |  state: ‘finished’
[10:52:22.730] |  run: TRUE
[10:52:22.730] |  result: ‘FutureResult’
[10:52:22.730] resolved() for ‘SequentialFuture’ ... done

> print(calls)
[[1]]
future:::testme("backtrace")

[[2]]
source(file.path(path, "run.R"))

[[3]]
withVisible(eval(ei, envir))

[[4]]
eval(ei, envir)

[[5]]
eval(ei, envir)

[[6]]
source(testme[["script"]], echo = TRUE)

[[7]]
withVisible(eval(ei, envir))

[[8]]
eval(ei, envir)

[[9]]
eval(ei, envir)

[[10]]
future({
    42L
    stop("Woops")
})

[[11]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, onReference = onReference, ...)

[[12]]
eval(expr, envir = globalenv())

[[13]]
eval(expr, envir = globalenv())

[[14]]
local({
    {
        42L
        stop("Woops")
    }
})

[[15]]
eval.parent(substitute(eval(quote(expr), envir)))

[[16]]
eval(expr, p)

[[17]]
eval(expr, p)

[[18]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())

[[19]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())

[[20]]
stop("Woops")

[[21]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())


> message("*** backtrace( ) - explicit future ... DONE")
*** backtrace( ) - explicit future ... DONE

> message("*** backtrace( ) - implicit future ...")
*** backtrace( ) - implicit future ...

> v %<-% {
+     42
+     stop("Woops")
+ }
[10:52:22.731] getGlobalsAndPackages() ...
[10:52:22.731] |  Searching for globals ...
[10:52:22.732] |  :  globals found: [2] ‘{’, ‘stop’
[10:52:22.732] |  Searching for globals ... DONE
[10:52:22.733] |  Resolving globals: FALSE
[10:52:22.733] |  Search for packages associated with the globals ...
[10:52:22.733] |  :  Packages associated with globals: [1] ‘base’
[10:52:22.733] |  :  Packages: [1] ‘base’
[10:52:22.733] |  Search for packages associated with the globals ... DONE
[10:52:22.733] |  Packages after dropping 'base': [0] 
[10:52:22.733] |  globals: [0] 
[10:52:22.733] |  packages: [0] 
[10:52:22.734] getGlobalsAndPackages() ... done
[10:52:22.734] run() for Future (‘Future’) ...
[10:52:22.734] |  state: ‘created’
[10:52:22.734] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:22.734] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:22.734] |  Using SequentialFutureBackend ...
[10:52:22.734] |  :  Launching futures ...
[10:52:22.734] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:22.734] |  :  .  |  getFutureData() ...
[10:52:22.735] |  :  .  |  :  getFutureCore() ...
[10:52:22.735] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:22.735] |  :  .  |  :  getFutureCore() ... done
[10:52:22.735] |  :  .  |  :  getFutureCapture() ...
[10:52:22.735] |  :  .  |  :  getFutureCapture() ... done
[10:52:22.735] |  :  .  |  :  getFutureContext() ...
[10:52:22.735] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:22.735] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:22.735] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:22.735] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:22.735] |  :  .  |  :  getFutureContext() ... done
[10:52:22.736] |  :  .  |  getFutureData() ... done
[10:52:22.736] |  :  .  |  attachPackages() ...
[10:52:22.736] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:22.736] |  :  .  |  attachPackages() ... DONE
[10:52:22.736] |  :  .  |  attachPackages() ...
[10:52:22.736] |  :  .  |  :  packages: [n=0] 
[10:52:22.736] |  :  .  |  attachPackages() ... DONE
[10:52:22.736] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:22.737] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:22.737] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:22.737] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:22.737] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:22.737] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:22.737] |  :  .  |  :  .  |  New stack:
[10:52:22.737] |  :  .  |  :  .  |  List of 1
[10:52:22.737] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.737] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.737] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.737] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.737] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.737] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:22.737] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.739] |  :  .  |  :  .  |  Old stack:
[10:52:22.740] |  :  .  |  :  .  |  List of 1
[10:52:22.740] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.740] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.740] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.740] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.740] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.740] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:22.740] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.740] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.740] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.740] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.742] |  :  .  |  :  .  |  Not identical
[10:52:22.742] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:22.743] |  :  .  |  :  .  |  :  List of 2
[10:52:22.743] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.743] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.743] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.743] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.743] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.743] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:22.743] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.743] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.743] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.743] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.743] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.743] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:22.743] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.743] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.743] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.748] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:22.748] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:22.748] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:22.748] |  :  .  |  :  .  List of future strategies:
[10:52:22.748] |  :  .  |  :  .  1. sequential:
[10:52:22.748] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:22.748] |  :  .  |  :  .     - tweaked: FALSE
[10:52:22.748] |  :  .  |  :  .     - call: plan(sequential)
[10:52:22.749] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:22.749] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:22.750] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:22.750] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:22.750] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:22.751] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:22.751] |  :  .  |  :  .  |  :  New stack:
[10:52:22.751] |  :  .  |  :  .  |  :  List of 1
[10:52:22.751] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.751] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.751] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.751] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.751] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.751] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:22.751] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.751] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.751] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.751] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.754] |  :  .  |  :  .  |  :  Old stack:
[10:52:22.754] |  :  .  |  :  .  |  :  List of 1
[10:52:22.754] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.754] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.754] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.754] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.754] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.754] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:22.754] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.754] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.754] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.754] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.756] |  :  .  |  :  .  |  :  Identical
[10:52:22.757] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:22.757] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:22.757] |  :  .  |  :  .  |  List of future strategies:
[10:52:22.757] |  :  .  |  :  .  |  1. sequential:
[10:52:22.757] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:22.757] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:22.757] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:22.757] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:22.757] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:22.757] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:22.757] |  :  .  |  SequentialFuture started (and completed)
[10:52:22.758] |  :  .  |  signalConditions() ...
[10:52:22.758] |  :  .  |  :  include = ‘immediateCondition’
[10:52:22.758] |  :  .  |  :  exclude = 
[10:52:22.758] |  :  .  |  :  resignal = FALSE
[10:52:22.758] |  :  .  |  :  Number of conditions: 1
[10:52:22.758] |  :  .  |  signalConditions() ... done
[10:52:22.758] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:22.758] |  :  Launching futures ... done
[10:52:22.758] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:22.758] |  Using SequentialFutureBackend ... done
[10:52:22.758] run() for Future (‘SequentialFuture’) ... done

> calls <- backtrace(v)
[10:52:22.759] resolved() for ‘SequentialFuture’ ...
[10:52:22.759] |  state: ‘finished’
[10:52:22.759] |  run: TRUE
[10:52:22.759] |  result: ‘FutureResult’
[10:52:22.759] resolved() for ‘SequentialFuture’ ... done

> print(calls)
[[1]]
future:::testme("backtrace")

[[2]]
source(file.path(path, "run.R"))

[[3]]
withVisible(eval(ei, envir))

[[4]]
eval(ei, envir)

[[5]]
eval(ei, envir)

[[6]]
source(testme[["script"]], echo = TRUE)

[[7]]
withVisible(eval(ei, envir))

[[8]]
eval(ei, envir)

[[9]]
eval(ei, envir)

[[10]]
v %<-% {
    42L
    stop("Woops")
}

[[11]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[12]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[13]]
do.call(future::future, args = future.args, envir = envir)

[[14]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", label = NULL, gc = FALSE, earlySignal = FALSE, 
    ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    onReference <- getOption("future.globals.onReference")
    if (is.null(onReference)) 
        onReference <- "ignore"
    if (!is.null(globals)) {
        gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
            globals = globals, onReference = onReference, maxSize = +Inf)
        expr <- gp[["expr"]]
        globals <- gp[["globals"]]
        if (length(packages) > 0 || length(gp[["packages"]]) > 
            0) {
            packages <- c(gp[["packages"]], packages)
        }
        gp <- NULL
        attr(globals, "already-done") <- TRUE
    }
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, onReference = onReference, ...)
    future[[".defaultLocal"]] <- !is.element("local", names(list(...)))
    if (isTRUE(getOption("future.journal"))) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future[["lazy"]] <- FALSE
        stop_if_not(inherits(future, "Future"), !future[["lazy"]])
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[15]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, onReference = onReference, ...)

[[16]]
eval(expr, envir = globalenv())

[[17]]
eval(expr, envir = globalenv())

[[18]]
local({
    {
        42L
        stop("Woops")
    }
})

[[19]]
eval.parent(substitute(eval(quote(expr), envir)))

[[20]]
eval(expr, p)

[[21]]
eval(expr, p)

[[22]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())

[[23]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())

[[24]]
stop("Woops")

[[25]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())


> message("*** backtrace( ) - implicit future ... DONE")
*** backtrace( ) - implicit future ... DONE

> message("*** backtrace( ) - subsetting ...")
*** backtrace( ) - subsetting ...

> env <- new.env()

> env[["a"]] %<-% {
+     42
+     stop("Woops")
+ }
[10:52:22.760] getGlobalsAndPackages() ...
[10:52:22.760] |  Searching for globals ...
[10:52:22.761] |  :  globals found: [2] ‘{’, ‘stop’
[10:52:22.761] |  Searching for globals ... DONE
[10:52:22.762] |  Resolving globals: FALSE
[10:52:22.762] |  Search for packages associated with the globals ...
[10:52:22.762] |  :  Packages associated with globals: [1] ‘base’
[10:52:22.762] |  :  Packages: [1] ‘base’
[10:52:22.762] |  Search for packages associated with the globals ... DONE
[10:52:22.762] |  Packages after dropping 'base': [0] 
[10:52:22.762] |  globals: [0] 
[10:52:22.762] |  packages: [0] 
[10:52:22.763] getGlobalsAndPackages() ... done
[10:52:22.763] run() for Future (‘Future’) ...
[10:52:22.763] |  state: ‘created’
[10:52:22.763] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:22.763] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:22.763] |  Using SequentialFutureBackend ...
[10:52:22.763] |  :  Launching futures ...
[10:52:22.763] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:22.763] |  :  .  |  getFutureData() ...
[10:52:22.764] |  :  .  |  :  getFutureCore() ...
[10:52:22.764] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:22.764] |  :  .  |  :  getFutureCore() ... done
[10:52:22.764] |  :  .  |  :  getFutureCapture() ...
[10:52:22.764] |  :  .  |  :  getFutureCapture() ... done
[10:52:22.764] |  :  .  |  :  getFutureContext() ...
[10:52:22.764] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:22.764] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:22.764] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:22.764] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:22.764] |  :  .  |  :  getFutureContext() ... done
[10:52:22.765] |  :  .  |  getFutureData() ... done
[10:52:22.765] |  :  .  |  attachPackages() ...
[10:52:22.765] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:22.765] |  :  .  |  attachPackages() ... DONE
[10:52:22.765] |  :  .  |  attachPackages() ...
[10:52:22.765] |  :  .  |  :  packages: [n=0] 
[10:52:22.765] |  :  .  |  attachPackages() ... DONE
[10:52:22.766] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:22.766] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:22.766] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:22.766] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:22.766] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:22.766] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:22.766] |  :  .  |  :  .  |  New stack:
[10:52:22.766] |  :  .  |  :  .  |  List of 1
[10:52:22.766] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.766] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.766] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.766] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.766] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.766] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:22.766] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.769] |  :  .  |  :  .  |  Old stack:
[10:52:22.769] |  :  .  |  :  .  |  List of 1
[10:52:22.769] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.769] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.769] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.769] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.769] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.769] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:22.769] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.769] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.769] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.769] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.773] |  :  .  |  :  .  |  Not identical
[10:52:22.773] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:22.773] |  :  .  |  :  .  |  :  List of 2
[10:52:22.773] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.773] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.773] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.773] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.773] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.773] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:22.773] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.773] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.773] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.773] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.773] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.773] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:22.773] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.773] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.773] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.777] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:22.777] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:22.777] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:22.777] |  :  .  |  :  .  List of future strategies:
[10:52:22.777] |  :  .  |  :  .  1. sequential:
[10:52:22.777] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:22.777] |  :  .  |  :  .     - tweaked: FALSE
[10:52:22.777] |  :  .  |  :  .     - call: plan(sequential)
[10:52:22.778] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:22.778] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:22.780] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:22.780] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:22.780] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:22.780] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:22.780] |  :  .  |  :  .  |  :  New stack:
[10:52:22.780] |  :  .  |  :  .  |  :  List of 1
[10:52:22.780] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.780] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.780] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.780] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.780] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.780] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:22.780] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.780] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.780] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.780] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.783] |  :  .  |  :  .  |  :  Old stack:
[10:52:22.783] |  :  .  |  :  .  |  :  List of 1
[10:52:22.783] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.783] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.783] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.783] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.783] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.783] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:22.783] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.783] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.783] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.783] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.786] |  :  .  |  :  .  |  :  Identical
[10:52:22.786] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:22.786] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:22.786] |  :  .  |  :  .  |  List of future strategies:
[10:52:22.786] |  :  .  |  :  .  |  1. sequential:
[10:52:22.786] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:22.786] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:22.786] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:22.786] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:22.787] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:22.787] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:22.787] |  :  .  |  SequentialFuture started (and completed)
[10:52:22.787] |  :  .  |  signalConditions() ...
[10:52:22.787] |  :  .  |  :  include = ‘immediateCondition’
[10:52:22.787] |  :  .  |  :  exclude = 
[10:52:22.787] |  :  .  |  :  resignal = FALSE
[10:52:22.787] |  :  .  |  :  Number of conditions: 1
[10:52:22.787] |  :  .  |  signalConditions() ... done
[10:52:22.787] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:22.788] |  :  Launching futures ... done
[10:52:22.788] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:22.788] |  Using SequentialFutureBackend ... done
[10:52:22.788] run() for Future (‘SequentialFuture’) ... done

> env[["b"]] %<-% {
+     42
+     stop("Woops")
+ }
[10:52:22.788] getGlobalsAndPackages() ...
[10:52:22.788] |  Searching for globals ...
[10:52:22.789] |  :  globals found: [2] ‘{’, ‘stop’
[10:52:22.789] |  Searching for globals ... DONE
[10:52:22.789] |  Resolving globals: FALSE
[10:52:22.790] |  Search for packages associated with the globals ...
[10:52:22.791] |  :  Packages associated with globals: [1] ‘base’
[10:52:22.791] |  :  Packages: [1] ‘base’
[10:52:22.791] |  Search for packages associated with the globals ... DONE
[10:52:22.791] |  Packages after dropping 'base': [0] 
[10:52:22.791] |  globals: [0] 
[10:52:22.791] |  packages: [0] 
[10:52:22.791] getGlobalsAndPackages() ... done
[10:52:22.792] run() for Future (‘Future’) ...
[10:52:22.792] |  state: ‘created’
[10:52:22.792] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:22.792] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:22.792] |  Using SequentialFutureBackend ...
[10:52:22.792] |  :  Launching futures ...
[10:52:22.792] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:22.792] |  :  .  |  getFutureData() ...
[10:52:22.792] |  :  .  |  :  getFutureCore() ...
[10:52:22.792] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:22.793] |  :  .  |  :  getFutureCore() ... done
[10:52:22.793] |  :  .  |  :  getFutureCapture() ...
[10:52:22.793] |  :  .  |  :  getFutureCapture() ... done
[10:52:22.793] |  :  .  |  :  getFutureContext() ...
[10:52:22.793] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:22.793] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:22.793] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:22.793] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:22.793] |  :  .  |  :  getFutureContext() ... done
[10:52:22.793] |  :  .  |  getFutureData() ... done
[10:52:22.794] |  :  .  |  attachPackages() ...
[10:52:22.794] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:22.794] |  :  .  |  attachPackages() ... DONE
[10:52:22.794] |  :  .  |  attachPackages() ...
[10:52:22.794] |  :  .  |  :  packages: [n=0] 
[10:52:22.794] |  :  .  |  attachPackages() ... DONE
[10:52:22.794] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:22.794] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:22.795] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:22.795] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:22.795] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:22.795] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:22.795] |  :  .  |  :  .  |  New stack:
[10:52:22.795] |  :  .  |  :  .  |  List of 1
[10:52:22.795] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.795] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.795] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.795] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.795] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.795] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:22.795] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.797] |  :  .  |  :  .  |  Old stack:
[10:52:22.797] |  :  .  |  :  .  |  List of 1
[10:52:22.797] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.797] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.797] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.797] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.797] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.797] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:22.797] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.797] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.797] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.797] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.800] |  :  .  |  :  .  |  Not identical
[10:52:22.800] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:22.800] |  :  .  |  :  .  |  :  List of 2
[10:52:22.800] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.800] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.800] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.800] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.800] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.800] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:22.800] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.800] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.800] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.800] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.800] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.800] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:22.800] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.800] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.800] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.805] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:22.805] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:22.805] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:22.805] |  :  .  |  :  .  List of future strategies:
[10:52:22.805] |  :  .  |  :  .  1. sequential:
[10:52:22.805] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:22.805] |  :  .  |  :  .     - tweaked: FALSE
[10:52:22.805] |  :  .  |  :  .     - call: plan(sequential)
[10:52:22.805] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:22.805] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:22.807] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:22.807] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:22.807] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:22.807] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:22.807] |  :  .  |  :  .  |  :  New stack:
[10:52:22.807] |  :  .  |  :  .  |  :  List of 1
[10:52:22.807] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.807] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.807] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.807] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.807] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.807] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:22.807] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.807] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.807] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.807] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.811] |  :  .  |  :  .  |  :  Old stack:
[10:52:22.811] |  :  .  |  :  .  |  :  List of 1
[10:52:22.811] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.811] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.811] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.811] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.811] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.811] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:22.811] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.811] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.811] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.811] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.814] |  :  .  |  :  .  |  :  Identical
[10:52:22.814] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:22.814] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:22.814] |  :  .  |  :  .  |  List of future strategies:
[10:52:22.814] |  :  .  |  :  .  |  1. sequential:
[10:52:22.814] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:22.814] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:22.814] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:22.815] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:22.815] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:22.815] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:22.815] |  :  .  |  SequentialFuture started (and completed)
[10:52:22.815] |  :  .  |  signalConditions() ...
[10:52:22.815] |  :  .  |  :  include = ‘immediateCondition’
[10:52:22.815] |  :  .  |  :  exclude = 
[10:52:22.815] |  :  .  |  :  resignal = FALSE
[10:52:22.815] |  :  .  |  :  Number of conditions: 1
[10:52:22.816] |  :  .  |  signalConditions() ... done
[10:52:22.816] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:22.816] |  :  Launching futures ... done
[10:52:22.816] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:22.816] |  Using SequentialFutureBackend ... done
[10:52:22.816] run() for Future (‘SequentialFuture’) ... done

> calls <- backtrace(env[["b"]])
[10:52:22.816] resolved() for ‘SequentialFuture’ ...
[10:52:22.816] |  state: ‘finished’
[10:52:22.817] |  run: TRUE
[10:52:22.817] |  result: ‘FutureResult’
[10:52:22.817] resolved() for ‘SequentialFuture’ ... done

> print(calls)
[[1]]
future:::testme("backtrace")

[[2]]
source(file.path(path, "run.R"))

[[3]]
withVisible(eval(ei, envir))

[[4]]
eval(ei, envir)

[[5]]
eval(ei, envir)

[[6]]
source(testme[["script"]], echo = TRUE)

[[7]]
withVisible(eval(ei, envir))

[[8]]
eval(ei, envir)

[[9]]
eval(ei, envir)

[[10]]
env[["b"]] %<-% {
    42L
    stop("Woops")
}

[[11]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[12]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[13]]
do.call(future::future, args = future.args, envir = envir)

[[14]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", label = NULL, gc = FALSE, earlySignal = FALSE, 
    ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    onReference <- getOption("future.globals.onReference")
    if (is.null(onReference)) 
        onReference <- "ignore"
    if (!is.null(globals)) {
        gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
            globals = globals, onReference = onReference, maxSize = +Inf)
        expr <- gp[["expr"]]
        globals <- gp[["globals"]]
        if (length(packages) > 0 || length(gp[["packages"]]) > 
            0) {
            packages <- c(gp[["packages"]], packages)
        }
        gp <- NULL
        attr(globals, "already-done") <- TRUE
    }
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, onReference = onReference, ...)
    future[[".defaultLocal"]] <- !is.element("local", names(list(...)))
    if (isTRUE(getOption("future.journal"))) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future[["lazy"]] <- FALSE
        stop_if_not(inherits(future, "Future"), !future[["lazy"]])
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[15]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, onReference = onReference, ...)

[[16]]
eval(expr, envir = globalenv())

[[17]]
eval(expr, envir = globalenv())

[[18]]
local({
    {
        42L
        stop("Woops")
    }
})

[[19]]
eval.parent(substitute(eval(quote(expr), envir)))

[[20]]
eval(expr, p)

[[21]]
eval(expr, p)

[[22]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())

[[23]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())

[[24]]
stop("Woops")

[[25]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())


> stopifnot(is.list(calls))

> lenv <- listenv::listenv()

> lenv[[1]] %<-% {
+     42
+     stop("Woops")
+ }
[10:52:22.818] getGlobalsAndPackages() ...
[10:52:22.818] |  Searching for globals ...
[10:52:22.819] |  :  globals found: [2] ‘{’, ‘stop’
[10:52:22.819] |  Searching for globals ... DONE
[10:52:22.819] |  Resolving globals: FALSE
[10:52:22.819] |  Search for packages associated with the globals ...
[10:52:22.820] |  :  Packages associated with globals: [1] ‘base’
[10:52:22.820] |  :  Packages: [1] ‘base’
[10:52:22.820] |  Search for packages associated with the globals ... DONE
[10:52:22.820] |  Packages after dropping 'base': [0] 
[10:52:22.820] |  globals: [0] 
[10:52:22.820] |  packages: [0] 
[10:52:22.820] getGlobalsAndPackages() ... done
[10:52:22.820] run() for Future (‘Future’) ...
[10:52:22.821] |  state: ‘created’
[10:52:22.821] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:22.821] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:22.821] |  Using SequentialFutureBackend ...
[10:52:22.821] |  :  Launching futures ...
[10:52:22.821] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:22.821] |  :  .  |  getFutureData() ...
[10:52:22.821] |  :  .  |  :  getFutureCore() ...
[10:52:22.821] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:22.821] |  :  .  |  :  getFutureCore() ... done
[10:52:22.822] |  :  .  |  :  getFutureCapture() ...
[10:52:22.822] |  :  .  |  :  getFutureCapture() ... done
[10:52:22.822] |  :  .  |  :  getFutureContext() ...
[10:52:22.822] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:22.822] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:22.822] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:22.822] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:22.822] |  :  .  |  :  getFutureContext() ... done
[10:52:22.822] |  :  .  |  getFutureData() ... done
[10:52:22.822] |  :  .  |  attachPackages() ...
[10:52:22.823] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:22.823] |  :  .  |  attachPackages() ... DONE
[10:52:22.823] |  :  .  |  attachPackages() ...
[10:52:22.823] |  :  .  |  :  packages: [n=0] 
[10:52:22.823] |  :  .  |  attachPackages() ... DONE
[10:52:22.823] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:22.823] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:22.823] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:22.824] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:22.824] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:22.824] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:22.824] |  :  .  |  :  .  |  New stack:
[10:52:22.824] |  :  .  |  :  .  |  List of 1
[10:52:22.824] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.824] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.824] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.824] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.824] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.824] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:22.824] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.826] |  :  .  |  :  .  |  Old stack:
[10:52:22.826] |  :  .  |  :  .  |  List of 1
[10:52:22.826] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.826] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.826] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.826] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.826] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.826] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:22.826] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.826] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.826] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.826] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.829] |  :  .  |  :  .  |  Not identical
[10:52:22.829] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:22.829] |  :  .  |  :  .  |  :  List of 2
[10:52:22.829] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.829] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.829] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.829] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.829] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.829] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:22.829] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.829] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.829] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.829] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.829] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.829] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:22.829] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.829] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.829] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.834] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:22.834] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:22.835] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:22.835] |  :  .  |  :  .  List of future strategies:
[10:52:22.835] |  :  .  |  :  .  1. sequential:
[10:52:22.835] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:22.835] |  :  .  |  :  .     - tweaked: FALSE
[10:52:22.835] |  :  .  |  :  .     - call: plan(sequential)
[10:52:22.835] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:22.835] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:22.837] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:22.837] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:22.837] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:22.837] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:22.837] |  :  .  |  :  .  |  :  New stack:
[10:52:22.837] |  :  .  |  :  .  |  :  List of 1
[10:52:22.837] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.837] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.837] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.837] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.837] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.837] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:22.837] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.837] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.837] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.837] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.840] |  :  .  |  :  .  |  :  Old stack:
[10:52:22.840] |  :  .  |  :  .  |  :  List of 1
[10:52:22.840] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.840] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.840] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.840] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.840] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.840] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:22.840] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.840] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.840] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.840] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.843] |  :  .  |  :  .  |  :  Identical
[10:52:22.843] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:22.843] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:22.843] |  :  .  |  :  .  |  List of future strategies:
[10:52:22.843] |  :  .  |  :  .  |  1. sequential:
[10:52:22.843] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:22.843] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:22.843] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:22.843] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:22.844] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:22.844] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:22.844] |  :  .  |  SequentialFuture started (and completed)
[10:52:22.844] |  :  .  |  signalConditions() ...
[10:52:22.844] |  :  .  |  :  include = ‘immediateCondition’
[10:52:22.844] |  :  .  |  :  exclude = 
[10:52:22.844] |  :  .  |  :  resignal = FALSE
[10:52:22.844] |  :  .  |  :  Number of conditions: 1
[10:52:22.844] |  :  .  |  signalConditions() ... done
[10:52:22.844] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:22.845] |  :  Launching futures ... done
[10:52:22.845] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:22.845] |  Using SequentialFutureBackend ... done
[10:52:22.845] run() for Future (‘SequentialFuture’) ... done

> lenv[[2]] %<-% {
+     42
+     stop("Woops")
+ }
[10:52:22.845] getGlobalsAndPackages() ...
[10:52:22.845] |  Searching for globals ...
[10:52:22.846] |  :  globals found: [2] ‘{’, ‘stop’
[10:52:22.846] |  Searching for globals ... DONE
[10:52:22.846] |  Resolving globals: FALSE
[10:52:22.847] |  Search for packages associated with the globals ...
[10:52:22.847] |  :  Packages associated with globals: [1] ‘base’
[10:52:22.847] |  :  Packages: [1] ‘base’
[10:52:22.847] |  Search for packages associated with the globals ... DONE
[10:52:22.847] |  Packages after dropping 'base': [0] 
[10:52:22.847] |  globals: [0] 
[10:52:22.847] |  packages: [0] 
[10:52:22.847] getGlobalsAndPackages() ... done
[10:52:22.848] run() for Future (‘Future’) ...
[10:52:22.848] |  state: ‘created’
[10:52:22.848] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:22.848] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:22.848] |  Using SequentialFutureBackend ...
[10:52:22.848] |  :  Launching futures ...
[10:52:22.848] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:22.848] |  :  .  |  getFutureData() ...
[10:52:22.848] |  :  .  |  :  getFutureCore() ...
[10:52:22.848] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:22.848] |  :  .  |  :  getFutureCore() ... done
[10:52:22.849] |  :  .  |  :  getFutureCapture() ...
[10:52:22.849] |  :  .  |  :  getFutureCapture() ... done
[10:52:22.849] |  :  .  |  :  getFutureContext() ...
[10:52:22.849] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:22.849] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:22.849] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:22.849] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:22.849] |  :  .  |  :  getFutureContext() ... done
[10:52:22.849] |  :  .  |  getFutureData() ... done
[10:52:22.850] |  :  .  |  attachPackages() ...
[10:52:22.850] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:22.850] |  :  .  |  attachPackages() ... DONE
[10:52:22.850] |  :  .  |  attachPackages() ...
[10:52:22.850] |  :  .  |  :  packages: [n=0] 
[10:52:22.850] |  :  .  |  attachPackages() ... DONE
[10:52:22.850] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:22.850] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:22.851] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:22.851] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:22.851] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:22.851] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:22.852] |  :  .  |  :  .  |  New stack:
[10:52:22.852] |  :  .  |  :  .  |  List of 1
[10:52:22.852] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.852] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.852] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.852] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.852] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.852] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:22.852] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.854] |  :  .  |  :  .  |  Old stack:
[10:52:22.854] |  :  .  |  :  .  |  List of 1
[10:52:22.854] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.854] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.854] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.854] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.854] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.854] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:22.854] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.854] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.854] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.854] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.857] |  :  .  |  :  .  |  Not identical
[10:52:22.857] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:22.857] |  :  .  |  :  .  |  :  List of 2
[10:52:22.857] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.857] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.857] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.857] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.857] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.857] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:22.857] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.857] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.857] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.857] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.857] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.857] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:22.857] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.857] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.857] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.862] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:22.862] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:22.862] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:22.862] |  :  .  |  :  .  List of future strategies:
[10:52:22.862] |  :  .  |  :  .  1. sequential:
[10:52:22.862] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:22.862] |  :  .  |  :  .     - tweaked: FALSE
[10:52:22.862] |  :  .  |  :  .     - call: plan(sequential)
[10:52:22.862] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:22.862] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:22.864] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:22.864] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:22.864] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:22.864] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:22.864] |  :  .  |  :  .  |  :  New stack:
[10:52:22.864] |  :  .  |  :  .  |  :  List of 1
[10:52:22.864] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.864] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.864] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.864] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.864] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.864] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:22.864] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.864] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.864] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.864] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.867] |  :  .  |  :  .  |  :  Old stack:
[10:52:22.867] |  :  .  |  :  .  |  :  List of 1
[10:52:22.867] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.867] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.867] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.867] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.867] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.867] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:22.867] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.867] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.867] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.867] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.870] |  :  .  |  :  .  |  :  Identical
[10:52:22.870] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:22.870] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:22.870] |  :  .  |  :  .  |  List of future strategies:
[10:52:22.870] |  :  .  |  :  .  |  1. sequential:
[10:52:22.870] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:22.870] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:22.870] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:22.872] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:22.872] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:22.872] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:22.872] |  :  .  |  SequentialFuture started (and completed)
[10:52:22.872] |  :  .  |  signalConditions() ...
[10:52:22.872] |  :  .  |  :  include = ‘immediateCondition’
[10:52:22.872] |  :  .  |  :  exclude = 
[10:52:22.872] |  :  .  |  :  resignal = FALSE
[10:52:22.872] |  :  .  |  :  Number of conditions: 1
[10:52:22.872] |  :  .  |  signalConditions() ... done
[10:52:22.873] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:22.873] |  :  Launching futures ... done
[10:52:22.873] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:22.873] |  Using SequentialFutureBackend ... done
[10:52:22.873] run() for Future (‘SequentialFuture’) ... done

> calls <- backtrace(lenv[[2]])
[10:52:22.873] resolved() for ‘SequentialFuture’ ...
[10:52:22.873] |  state: ‘finished’
[10:52:22.873] |  run: TRUE
[10:52:22.874] |  result: ‘FutureResult’
[10:52:22.874] resolved() for ‘SequentialFuture’ ... done

> print(calls)
[[1]]
future:::testme("backtrace")

[[2]]
source(file.path(path, "run.R"))

[[3]]
withVisible(eval(ei, envir))

[[4]]
eval(ei, envir)

[[5]]
eval(ei, envir)

[[6]]
source(testme[["script"]], echo = TRUE)

[[7]]
withVisible(eval(ei, envir))

[[8]]
eval(ei, envir)

[[9]]
eval(ei, envir)

[[10]]
lenv[[2]] %<-% {
    42L
    stop("Woops")
}

[[11]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[12]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[13]]
do.call(future::future, args = future.args, envir = envir)

[[14]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", label = NULL, gc = FALSE, earlySignal = FALSE, 
    ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    onReference <- getOption("future.globals.onReference")
    if (is.null(onReference)) 
        onReference <- "ignore"
    if (!is.null(globals)) {
        gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
            globals = globals, onReference = onReference, maxSize = +Inf)
        expr <- gp[["expr"]]
        globals <- gp[["globals"]]
        if (length(packages) > 0 || length(gp[["packages"]]) > 
            0) {
            packages <- c(gp[["packages"]], packages)
        }
        gp <- NULL
        attr(globals, "already-done") <- TRUE
    }
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, onReference = onReference, ...)
    future[[".defaultLocal"]] <- !is.element("local", names(list(...)))
    if (isTRUE(getOption("future.journal"))) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future[["lazy"]] <- FALSE
        stop_if_not(inherits(future, "Future"), !future[["lazy"]])
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[15]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, onReference = onReference, ...)

[[16]]
eval(expr, envir = globalenv())

[[17]]
eval(expr, envir = globalenv())

[[18]]
local({
    {
        42L
        stop("Woops")
    }
})

[[19]]
eval.parent(substitute(eval(quote(expr), envir)))

[[20]]
eval(expr, p)

[[21]]
eval(expr, p)

[[22]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())

[[23]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())

[[24]]
stop("Woops")

[[25]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())


> stopifnot(is.list(calls))

> ll <- list()

> ll[[1]] <- future({
+     42
+     stop("Woops")
+ })
[10:52:22.874] getGlobalsAndPackages() ...
[10:52:22.875] |  Searching for globals ...
[10:52:22.875] |  :  globals found: [2] ‘{’, ‘stop’
[10:52:22.876] |  Searching for globals ... DONE
[10:52:22.876] |  Resolving globals: FALSE
[10:52:22.876] |  Search for packages associated with the globals ...
[10:52:22.876] |  :  Packages associated with globals: [1] ‘base’
[10:52:22.876] |  :  Packages: [1] ‘base’
[10:52:22.876] |  Search for packages associated with the globals ... DONE
[10:52:22.876] |  Packages after dropping 'base': [0] 
[10:52:22.876] |  globals: [0] 
[10:52:22.877] |  packages: [0] 
[10:52:22.877] getGlobalsAndPackages() ... done
[10:52:22.877] run() for Future (‘Future’) ...
[10:52:22.877] |  state: ‘created’
[10:52:22.877] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:22.877] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:22.877] |  Using SequentialFutureBackend ...
[10:52:22.877] |  :  Launching futures ...
[10:52:22.877] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:22.878] |  :  .  |  getFutureData() ...
[10:52:22.878] |  :  .  |  :  getFutureCore() ...
[10:52:22.878] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:22.878] |  :  .  |  :  getFutureCore() ... done
[10:52:22.878] |  :  .  |  :  getFutureCapture() ...
[10:52:22.878] |  :  .  |  :  getFutureCapture() ... done
[10:52:22.878] |  :  .  |  :  getFutureContext() ...
[10:52:22.878] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:22.878] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:22.878] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:22.878] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:22.879] |  :  .  |  :  getFutureContext() ... done
[10:52:22.879] |  :  .  |  getFutureData() ... done
[10:52:22.879] |  :  .  |  attachPackages() ...
[10:52:22.879] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:22.879] |  :  .  |  attachPackages() ... DONE
[10:52:22.879] |  :  .  |  attachPackages() ...
[10:52:22.879] |  :  .  |  :  packages: [n=0] 
[10:52:22.879] |  :  .  |  attachPackages() ... DONE
[10:52:22.880] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:22.880] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:22.880] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:22.880] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:22.880] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:22.880] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:22.880] |  :  .  |  :  .  |  New stack:
[10:52:22.881] |  :  .  |  :  .  |  List of 1
[10:52:22.881] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.881] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.881] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.881] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.881] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.881] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:22.881] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.883] |  :  .  |  :  .  |  Old stack:
[10:52:22.883] |  :  .  |  :  .  |  List of 1
[10:52:22.883] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.883] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.883] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.883] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.883] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.883] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:22.883] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.883] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.883] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.883] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.885] |  :  .  |  :  .  |  Not identical
[10:52:22.885] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:22.886] |  :  .  |  :  .  |  :  List of 2
[10:52:22.886] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.886] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.886] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.886] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.886] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.886] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:22.886] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.886] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.886] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.886] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.886] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.886] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:22.886] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.886] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.886] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.890] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:22.890] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:22.890] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:22.890] |  :  .  |  :  .  List of future strategies:
[10:52:22.890] |  :  .  |  :  .  1. sequential:
[10:52:22.890] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:22.890] |  :  .  |  :  .     - tweaked: FALSE
[10:52:22.890] |  :  .  |  :  .     - call: plan(sequential)
[10:52:22.891] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:22.891] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:22.893] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:22.893] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:22.893] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:22.893] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:22.893] |  :  .  |  :  .  |  :  New stack:
[10:52:22.894] |  :  .  |  :  .  |  :  List of 1
[10:52:22.894] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.894] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.894] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.894] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.894] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.894] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:22.894] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.894] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.894] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.894] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.896] |  :  .  |  :  .  |  :  Old stack:
[10:52:22.896] |  :  .  |  :  .  |  :  List of 1
[10:52:22.896] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.896] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.896] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.896] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.896] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.896] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:22.896] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.896] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.896] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.896] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.899] |  :  .  |  :  .  |  :  Identical
[10:52:22.899] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:22.899] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:22.899] |  :  .  |  :  .  |  List of future strategies:
[10:52:22.899] |  :  .  |  :  .  |  1. sequential:
[10:52:22.899] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:22.899] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:22.899] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:22.900] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:22.900] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:22.900] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:22.900] |  :  .  |  SequentialFuture started (and completed)
[10:52:22.900] |  :  .  |  signalConditions() ...
[10:52:22.900] |  :  .  |  :  include = ‘immediateCondition’
[10:52:22.901] |  :  .  |  :  exclude = 
[10:52:22.901] |  :  .  |  :  resignal = FALSE
[10:52:22.901] |  :  .  |  :  Number of conditions: 1
[10:52:22.901] |  :  .  |  signalConditions() ... done
[10:52:22.901] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:22.901] |  :  Launching futures ... done
[10:52:22.901] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:22.901] |  Using SequentialFutureBackend ... done
[10:52:22.901] run() for Future (‘SequentialFuture’) ... done

> ll[[2]] <- future({
+     42
+     stop("Woops")
+ })
[10:52:22.901] getGlobalsAndPackages() ...
[10:52:22.902] |  Searching for globals ...
[10:52:22.902] |  :  globals found: [2] ‘{’, ‘stop’
[10:52:22.903] |  Searching for globals ... DONE
[10:52:22.903] |  Resolving globals: FALSE
[10:52:22.903] |  Search for packages associated with the globals ...
[10:52:22.903] |  :  Packages associated with globals: [1] ‘base’
[10:52:22.903] |  :  Packages: [1] ‘base’
[10:52:22.903] |  Search for packages associated with the globals ... DONE
[10:52:22.903] |  Packages after dropping 'base': [0] 
[10:52:22.903] |  globals: [0] 
[10:52:22.903] |  packages: [0] 
[10:52:22.904] getGlobalsAndPackages() ... done
[10:52:22.904] run() for Future (‘Future’) ...
[10:52:22.904] |  state: ‘created’
[10:52:22.904] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:22.904] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:22.904] |  Using SequentialFutureBackend ...
[10:52:22.904] |  :  Launching futures ...
[10:52:22.904] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:22.904] |  :  .  |  getFutureData() ...
[10:52:22.905] |  :  .  |  :  getFutureCore() ...
[10:52:22.905] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:22.905] |  :  .  |  :  getFutureCore() ... done
[10:52:22.905] |  :  .  |  :  getFutureCapture() ...
[10:52:22.905] |  :  .  |  :  getFutureCapture() ... done
[10:52:22.905] |  :  .  |  :  getFutureContext() ...
[10:52:22.905] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:22.905] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:22.905] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:22.905] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:22.905] |  :  .  |  :  getFutureContext() ... done
[10:52:22.906] |  :  .  |  getFutureData() ... done
[10:52:22.906] |  :  .  |  attachPackages() ...
[10:52:22.906] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:22.906] |  :  .  |  attachPackages() ... DONE
[10:52:22.906] |  :  .  |  attachPackages() ...
[10:52:22.906] |  :  .  |  :  packages: [n=0] 
[10:52:22.906] |  :  .  |  attachPackages() ... DONE
[10:52:22.906] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:22.907] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:22.907] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:22.907] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:22.907] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:22.907] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:22.907] |  :  .  |  :  .  |  New stack:
[10:52:22.907] |  :  .  |  :  .  |  List of 1
[10:52:22.907] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.907] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.907] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.907] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.907] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.907] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:22.907] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.909] |  :  .  |  :  .  |  Old stack:
[10:52:22.910] |  :  .  |  :  .  |  List of 1
[10:52:22.910] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.910] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.910] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.910] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.910] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.910] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:22.910] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.910] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.910] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.910] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.913] |  :  .  |  :  .  |  Not identical
[10:52:22.913] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:22.913] |  :  .  |  :  .  |  :  List of 2
[10:52:22.913] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.913] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.913] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.913] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.913] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.913] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:22.913] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.913] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.913] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.913] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.913] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.913] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:22.913] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.913] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.913] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.918] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:22.918] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:22.918] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:22.918] |  :  .  |  :  .  List of future strategies:
[10:52:22.918] |  :  .  |  :  .  1. sequential:
[10:52:22.918] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:22.918] |  :  .  |  :  .     - tweaked: FALSE
[10:52:22.918] |  :  .  |  :  .     - call: plan(sequential)
[10:52:22.918] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:22.918] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:22.920] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:22.920] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:22.920] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:22.920] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:22.920] |  :  .  |  :  .  |  :  New stack:
[10:52:22.920] |  :  .  |  :  .  |  :  List of 1
[10:52:22.920] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.920] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.920] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.920] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.920] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.920] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:22.920] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.920] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.920] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.920] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.923] |  :  .  |  :  .  |  :  Old stack:
[10:52:22.923] |  :  .  |  :  .  |  :  List of 1
[10:52:22.923] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.923] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.923] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.923] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.923] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.923] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:22.923] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.923] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.923] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.923] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.926] |  :  .  |  :  .  |  :  Identical
[10:52:22.926] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:22.926] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:22.926] |  :  .  |  :  .  |  List of future strategies:
[10:52:22.926] |  :  .  |  :  .  |  1. sequential:
[10:52:22.926] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:22.926] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:22.926] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:22.927] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:22.927] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:22.927] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:22.927] |  :  .  |  SequentialFuture started (and completed)
[10:52:22.927] |  :  .  |  signalConditions() ...
[10:52:22.927] |  :  .  |  :  include = ‘immediateCondition’
[10:52:22.927] |  :  .  |  :  exclude = 
[10:52:22.927] |  :  .  |  :  resignal = FALSE
[10:52:22.927] |  :  .  |  :  Number of conditions: 1
[10:52:22.928] |  :  .  |  signalConditions() ... done
[10:52:22.928] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:22.928] |  :  Launching futures ... done
[10:52:22.928] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:22.928] |  Using SequentialFutureBackend ... done
[10:52:22.928] run() for Future (‘SequentialFuture’) ... done

> vs <- value(ll, signal = FALSE)
[10:52:22.929] value() on list ...
[10:52:22.929] |  recursive: 0
[10:52:22.929] |  length: 2
[10:52:22.929] |  
[10:52:22.929] |  Number of remaining objects: 2
[10:52:22.929] |  checking value #1 ...
[10:52:22.929] |  :  'obj' is SequentialFuture
[10:52:22.930] |  :  resolved() for ‘SequentialFuture’ ...
[10:52:22.930] |  :  .  state: ‘finished’
[10:52:22.930] |  :  .  run: TRUE
[10:52:22.930] |  :  .  result: ‘FutureResult’
[10:52:22.930] |  :  resolved() for ‘SequentialFuture’ ... done
[10:52:22.930] |  :  SequentialFuture #1
[10:52:22.930] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:52:22.931] |  :  .  nx: 2
[10:52:22.931] |  :  .  relay: TRUE
[10:52:22.931] |  :  .  stdout: TRUE
[10:52:22.931] |  :  .  signal: FALSE
[10:52:22.931] |  :  .  resignal: FALSE
[10:52:22.931] |  :  .  force: TRUE
[10:52:22.931] |  :  .  relayed: [n=2] FALSE, FALSE
[10:52:22.932] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:52:22.932] |  :  .  until=1
[10:52:22.932] |  :  .  relaying element #1
[10:52:22.932] |  :  .  signalConditions() ...
[10:52:22.932] |  :  .  |  include = ‘immediateCondition’
[10:52:22.932] |  :  .  |  exclude = 
[10:52:22.932] |  :  .  |  resignal = FALSE
[10:52:22.932] |  :  .  |  Number of conditions: 1
[10:52:22.932] |  :  .  signalConditions() ... done
[10:52:22.932] |  :  .  relayed: [n=2] TRUE, FALSE
[10:52:22.933] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:52:22.933] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:52:22.933] |  :  value(<SequentialFuture>, ...) ...
[10:52:22.933] |  :  .  signalConditions() ...
[10:52:22.933] |  :  .  |  include = ‘immediateCondition’
[10:52:22.933] |  :  .  |  exclude = 
[10:52:22.933] |  :  .  |  resignal = FALSE
[10:52:22.933] |  :  .  |  Number of conditions: 1
[10:52:22.933] |  :  .  signalConditions() ... done
[10:52:22.933] |  :  .  value: <simpleError>
[10:52:22.933] |  :  value(<SequentialFuture>, ...) ... done
[10:52:22.934] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:52:22.934] |  :  .  nx: 2
[10:52:22.934] |  :  .  relay: TRUE
[10:52:22.934] |  :  .  stdout: TRUE
[10:52:22.934] |  :  .  signal: FALSE
[10:52:22.934] |  :  .  resignal: FALSE
[10:52:22.934] |  :  .  force: TRUE
[10:52:22.934] |  :  .  relayed: [n=2] TRUE, FALSE
[10:52:22.934] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:52:22.934] |  :  .  until=2
[10:52:22.934] |  :  .  relaying element #2
[10:52:22.934] |  :  .  relayed: [n=2] TRUE, FALSE
[10:52:22.934] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:52:22.935] |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:52:22.935] |  :  length: 1 (resolved future 1)
[10:52:22.935] |  checking value #1 ... done
[10:52:22.935] |  checking value #2 ...
[10:52:22.935] |  :  'obj' is SequentialFuture
[10:52:22.935] |  :  resolved() for ‘SequentialFuture’ ...
[10:52:22.935] |  :  .  state: ‘finished’
[10:52:22.935] |  :  .  run: TRUE
[10:52:22.935] |  :  .  result: ‘FutureResult’
[10:52:22.936] |  :  resolved() for ‘SequentialFuture’ ... done
[10:52:22.936] |  :  SequentialFuture #2
[10:52:22.936] |  :  signalConditionsASAP(SequentialFuture, pos=2) ...
[10:52:22.936] |  :  .  nx: 2
[10:52:22.936] |  :  .  relay: TRUE
[10:52:22.936] |  :  .  stdout: TRUE
[10:52:22.936] |  :  .  signal: FALSE
[10:52:22.936] |  :  .  resignal: FALSE
[10:52:22.936] |  :  .  force: TRUE
[10:52:22.936] |  :  .  relayed: [n=2] TRUE, FALSE
[10:52:22.936] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:52:22.936] |  :  .  until=2
[10:52:22.937] |  :  .  relaying element #2
[10:52:22.937] |  :  .  signalConditions() ...
[10:52:22.937] |  :  .  |  include = ‘immediateCondition’
[10:52:22.937] |  :  .  |  exclude = 
[10:52:22.937] |  :  .  |  resignal = FALSE
[10:52:22.937] |  :  .  |  Number of conditions: 1
[10:52:22.937] |  :  .  signalConditions() ... done
[10:52:22.937] |  :  .  relayed: [n=2] TRUE, TRUE
[10:52:22.937] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:22.937] |  :  signalConditionsASAP(SequentialFuture, pos=2) ... done
[10:52:22.937] |  :  value(<SequentialFuture>, ...) ...
[10:52:22.938] |  :  .  signalConditions() ...
[10:52:22.938] |  :  .  |  include = ‘immediateCondition’
[10:52:22.938] |  :  .  |  exclude = 
[10:52:22.938] |  :  .  |  resignal = FALSE
[10:52:22.938] |  :  .  |  Number of conditions: 1
[10:52:22.938] |  :  .  signalConditions() ... done
[10:52:22.938] |  :  .  value: <simpleError>
[10:52:22.938] |  :  value(<SequentialFuture>, ...) ... done
[10:52:22.938] |  :  signalConditionsASAP(SequentialFuture, pos=2) ...
[10:52:22.938] |  :  .  nx: 2
[10:52:22.938] |  :  .  relay: TRUE
[10:52:22.938] |  :  .  stdout: TRUE
[10:52:22.939] |  :  .  signal: FALSE
[10:52:22.939] |  :  .  resignal: FALSE
[10:52:22.939] |  :  .  force: TRUE
[10:52:22.939] |  :  .  relayed: [n=2] TRUE, TRUE
[10:52:22.939] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:22.939] |  :  .  until=2
[10:52:22.939] |  :  .  relayed: [n=2] TRUE, TRUE
[10:52:22.939] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:22.939] |  :  signalConditionsASAP(SequentialFuture, pos=2) ... done
[10:52:22.939] |  :  length: 0 (resolved future 2)
[10:52:22.939] |  checking value #2 ... done
[10:52:22.940] |  Relaying remaining futures ...
[10:52:22.940] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:52:22.940] |  :  .  nx: 2
[10:52:22.940] |  :  .  relay: TRUE
[10:52:22.940] |  :  .  stdout: TRUE
[10:52:22.940] |  :  .  signal: FALSE
[10:52:22.940] |  :  .  resignal: FALSE
[10:52:22.940] |  :  .  force: TRUE
[10:52:22.940] |  :  .  relayed: [n=2] TRUE, TRUE
[10:52:22.940] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:52:22.940] |  :  .  relayed: [n=2] TRUE, TRUE
[10:52:22.940] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:52:22.941] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:52:22.941] |  Relaying remaining futures ... done
[10:52:22.941] value() on list ... done

> calls <- backtrace(ll[[2]])
[10:52:22.941] resolved() for ‘SequentialFuture’ ...
[10:52:22.941] |  state: ‘finished’
[10:52:22.941] |  run: TRUE
[10:52:22.941] |  result: ‘FutureResult’
[10:52:22.941] resolved() for ‘SequentialFuture’ ... done

> print(calls)
[[1]]
future:::testme("backtrace")

[[2]]
source(file.path(path, "run.R"))

[[3]]
withVisible(eval(ei, envir))

[[4]]
eval(ei, envir)

[[5]]
eval(ei, envir)

[[6]]
source(testme[["script"]], echo = TRUE)

[[7]]
withVisible(eval(ei, envir))

[[8]]
eval(ei, envir)

[[9]]
eval(ei, envir)

[[10]]
future({
    42L
    stop("Woops")
})

[[11]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, onReference = onReference, ...)

[[12]]
eval(expr, envir = globalenv())

[[13]]
eval(expr, envir = globalenv())

[[14]]
local({
    {
        42L
        stop("Woops")
    }
})

[[15]]
eval.parent(substitute(eval(quote(expr), envir)))

[[16]]
eval(expr, p)

[[17]]
eval(expr, p)

[[18]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())

[[19]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())

[[20]]
stop("Woops")

[[21]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())


> stopifnot(is.list(calls))

> message("*** backtrace( ) - subsetting ... DONE")
*** backtrace( ) - subsetting ... DONE

> message("*** backtrace( ) - exceptions ...")
*** backtrace( ) - exceptions ...

> message("- No condition ...")
- No condition ...

> f <- future(42)
[10:52:22.942] getGlobalsAndPackages() ...
[10:52:22.942] |  Searching for globals ...
[10:52:22.943] |  :  globals found: [0] 
[10:52:22.943] |  Searching for globals ... DONE
[10:52:22.943] |  globals: [0] <none>
[10:52:22.943] |  packages: [0] <none>
[10:52:22.943] getGlobalsAndPackages() ... done
[10:52:22.943] run() for Future (‘Future’) ...
[10:52:22.943] |  state: ‘created’
[10:52:22.943] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:22.944] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:22.944] |  Using SequentialFutureBackend ...
[10:52:22.944] |  :  Launching futures ...
[10:52:22.944] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:22.944] |  :  .  |  getFutureData() ...
[10:52:22.944] |  :  .  |  :  getFutureCore() ...
[10:52:22.944] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:22.944] |  :  .  |  :  getFutureCore() ... done
[10:52:22.944] |  :  .  |  :  getFutureCapture() ...
[10:52:22.944] |  :  .  |  :  getFutureCapture() ... done
[10:52:22.944] |  :  .  |  :  getFutureContext() ...
[10:52:22.945] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:22.945] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:22.945] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:22.945] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:22.945] |  :  .  |  :  getFutureContext() ... done
[10:52:22.945] |  :  .  |  getFutureData() ... done
[10:52:22.945] |  :  .  |  attachPackages() ...
[10:52:22.945] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:22.945] |  :  .  |  attachPackages() ... DONE
[10:52:22.946] |  :  .  |  attachPackages() ...
[10:52:22.946] |  :  .  |  :  packages: [n=0] 
[10:52:22.946] |  :  .  |  attachPackages() ... DONE
[10:52:22.946] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:22.946] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:22.946] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:22.946] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:22.947] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:22.947] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:22.947] |  :  .  |  :  .  |  New stack:
[10:52:22.947] |  :  .  |  :  .  |  List of 1
[10:52:22.947] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.947] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.947] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.947] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.947] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.947] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:22.947] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.949] |  :  .  |  :  .  |  Old stack:
[10:52:22.949] |  :  .  |  :  .  |  List of 1
[10:52:22.949] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.949] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.949] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.949] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.949] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.949] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:22.949] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.949] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.949] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.949] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.953] |  :  .  |  :  .  |  Not identical
[10:52:22.953] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:22.953] |  :  .  |  :  .  |  :  List of 2
[10:52:22.953] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.953] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.953] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.953] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.953] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.953] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:22.953] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.953] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.953] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.953] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.953] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.953] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:22.953] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.953] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.953] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.957] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:22.958] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:22.958] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:22.958] |  :  .  |  :  .  List of future strategies:
[10:52:22.958] |  :  .  |  :  .  1. sequential:
[10:52:22.958] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:22.958] |  :  .  |  :  .     - tweaked: FALSE
[10:52:22.958] |  :  .  |  :  .     - call: plan(sequential)
[10:52:22.958] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:22.958] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:22.960] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:22.960] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:22.960] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:22.960] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:22.960] |  :  .  |  :  .  |  :  New stack:
[10:52:22.960] |  :  .  |  :  .  |  :  List of 1
[10:52:22.960] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.960] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.960] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.960] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.960] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.960] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:22.960] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.960] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.960] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.960] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.963] |  :  .  |  :  .  |  :  Old stack:
[10:52:22.963] |  :  .  |  :  .  |  :  List of 1
[10:52:22.963] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.963] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.963] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.963] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.963] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.963] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:22.963] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.963] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.963] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.963] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.966] |  :  .  |  :  .  |  :  Identical
[10:52:22.966] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:22.966] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:22.966] |  :  .  |  :  .  |  List of future strategies:
[10:52:22.966] |  :  .  |  :  .  |  1. sequential:
[10:52:22.966] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:22.966] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:22.966] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:22.966] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:22.967] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:22.967] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:22.967] |  :  .  |  SequentialFuture started (and completed)
[10:52:22.967] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:22.967] |  :  Launching futures ... done
[10:52:22.967] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:22.967] |  Using SequentialFutureBackend ... done
[10:52:22.967] run() for Future (‘SequentialFuture’) ... done

> res <- tryCatch(backtrace(f), error = identity)
[10:52:22.968] resolved() for ‘SequentialFuture’ ...
[10:52:22.968] |  state: ‘finished’
[10:52:22.968] |  run: TRUE
[10:52:22.968] |  result: ‘FutureResult’
[10:52:22.968] resolved() for ‘SequentialFuture’ ... done

> print(res)
<simpleError: No error was caught for this future: ‘f’>

> stopifnot(inherits(res, "error"))

> message("- No call stack ...")
- No call stack ...

> f <- future({
+     42
+     stop("Woops")
+ })
[10:52:22.969] getGlobalsAndPackages() ...
[10:52:22.970] |  Searching for globals ...
[10:52:22.971] |  :  globals found: [2] ‘{’, ‘stop’
[10:52:22.971] |  Searching for globals ... DONE
[10:52:22.971] |  Resolving globals: FALSE
[10:52:22.971] |  Search for packages associated with the globals ...
[10:52:22.971] |  :  Packages associated with globals: [1] ‘base’
[10:52:22.971] |  :  Packages: [1] ‘base’
[10:52:22.971] |  Search for packages associated with the globals ... DONE
[10:52:22.971] |  Packages after dropping 'base': [0] 
[10:52:22.972] |  globals: [0] 
[10:52:22.972] |  packages: [0] 
[10:52:22.972] getGlobalsAndPackages() ... done
[10:52:22.972] run() for Future (‘Future’) ...
[10:52:22.972] |  state: ‘created’
[10:52:22.972] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:22.972] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:22.972] |  Using SequentialFutureBackend ...
[10:52:22.972] |  :  Launching futures ...
[10:52:22.973] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:52:22.973] |  :  .  |  getFutureData() ...
[10:52:22.973] |  :  .  |  :  getFutureCore() ...
[10:52:22.973] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:52:22.973] |  :  .  |  :  getFutureCore() ... done
[10:52:22.973] |  :  .  |  :  getFutureCapture() ...
[10:52:22.973] |  :  .  |  :  getFutureCapture() ... done
[10:52:22.973] |  :  .  |  :  getFutureContext() ...
[10:52:22.973] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:22.973] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:52:22.973] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:22.974] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:52:22.974] |  :  .  |  :  getFutureContext() ... done
[10:52:22.974] |  :  .  |  getFutureData() ... done
[10:52:22.974] |  :  .  |  attachPackages() ...
[10:52:22.974] |  :  .  |  :  packages: [n=1] ‘future’
[10:52:22.974] |  :  .  |  attachPackages() ... DONE
[10:52:22.974] |  :  .  |  attachPackages() ...
[10:52:22.974] |  :  .  |  :  packages: [n=0] 
[10:52:22.974] |  :  .  |  attachPackages() ... DONE
[10:52:22.975] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:22.975] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:22.975] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:22.975] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:22.975] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:22.975] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:52:22.976] |  :  .  |  :  .  |  New stack:
[10:52:22.976] |  :  .  |  :  .  |  List of 1
[10:52:22.976] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.976] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.976] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.976] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.976] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.976] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:22.976] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.978] |  :  .  |  :  .  |  Old stack:
[10:52:22.978] |  :  .  |  :  .  |  List of 1
[10:52:22.978] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.978] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.978] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.978] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.978] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.978] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:22.978] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.978] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.978] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.978] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.980] |  :  .  |  :  .  |  Not identical
[10:52:22.981] |  :  .  |  :  .  |  all.equal() for future ...
[10:52:22.981] |  :  .  |  :  .  |  :  List of 2
[10:52:22.981] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.981] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.981] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.981] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.981] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.981] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:52:22.981] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.981] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.981] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.981] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.981] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.981] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:22.981] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.981] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.981] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.985] |  :  .  |  :  .  |  all.equal() for future ... done
[10:52:22.985] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:52:22.985] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:22.985] |  :  .  |  :  .  List of future strategies:
[10:52:22.985] |  :  .  |  :  .  1. sequential:
[10:52:22.985] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:22.985] |  :  .  |  :  .     - tweaked: FALSE
[10:52:22.985] |  :  .  |  :  .     - call: plan(sequential)
[10:52:22.986] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:22.986] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:22.988] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:22.988] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:52:22.989] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:52:22.989] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:52:22.989] |  :  .  |  :  .  |  :  New stack:
[10:52:22.989] |  :  .  |  :  .  |  :  List of 1
[10:52:22.989] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.989] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.989] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.989] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.989] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.989] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:22.989] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.989] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.989] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.989] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.992] |  :  .  |  :  .  |  :  Old stack:
[10:52:22.992] |  :  .  |  :  .  |  :  List of 1
[10:52:22.992] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:22.992] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:22.992] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.992] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.992] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.992] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:52:22.992] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:22.992] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:22.992] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:22.992] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:22.994] |  :  .  |  :  .  |  :  Identical
[10:52:22.995] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:52:22.995] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:52:22.995] |  :  .  |  :  .  |  List of future strategies:
[10:52:22.995] |  :  .  |  :  .  |  1. sequential:
[10:52:22.995] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:52:22.995] |  :  .  |  :  .  |     - tweaked: FALSE
[10:52:22.995] |  :  .  |  :  .  |     - call: plan(sequential)
[10:52:22.995] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:52:22.995] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:22.995] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:52:22.995] |  :  .  |  SequentialFuture started (and completed)
[10:52:22.996] |  :  .  |  signalConditions() ...
[10:52:22.996] |  :  .  |  :  include = ‘immediateCondition’
[10:52:22.996] |  :  .  |  :  exclude = 
[10:52:22.996] |  :  .  |  :  resignal = FALSE
[10:52:22.996] |  :  .  |  :  Number of conditions: 1
[10:52:22.996] |  :  .  |  signalConditions() ... done
[10:52:22.996] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:52:22.996] |  :  Launching futures ... done
[10:52:22.996] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:52:22.996] |  Using SequentialFutureBackend ... done
[10:52:22.996] run() for Future (‘SequentialFuture’) ... done

> v <- value(f, signal = FALSE)
[10:52:22.997] signalConditions() ...
[10:52:22.997] |  include = ‘immediateCondition’
[10:52:22.997] |  exclude = 
[10:52:22.997] |  resignal = FALSE
[10:52:22.997] |  Number of conditions: 1
[10:52:22.997] signalConditions() ... done

> if (availableCores() >= 2) {
+     message("- Non-resolved future ...")
+     plan(multisession, workers = 2)
+     message("- plan set")
+     f <- .... [TRUNCATED] 
- Non-resolved future ...
[10:52:22.999] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:22.999] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:52:22.999] |  :  all.equal() for FutureStrategyList ...
[10:52:23.000] |  :  .  New stack:
[10:52:23.000] |  :  .  List of 1
[10:52:23.000] |  :  .   $ :function (..., workers = 2L, envir = parent.frame())  
[10:52:23.000] |  :  .    ..- attr(*, "class")= chr [1:6] "tweaked" "multisession" "cluster" "multiprocess" ...
[10:52:23.000] |  :  .    ..- attr(*, "init")= logi TRUE
[10:52:23.000] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:23.000] |  :  .    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:23.000] |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:23.000] |  :  .    ..- attr(*, "untweakable")= chr "persistent"
[10:52:23.000] |  :  .    ..- attr(*, "tweaks")=List of 1
[10:52:23.000] |  :  .    .. ..$ workers: int 2
[10:52:23.000] |  :  .    ..- attr(*, "call")= language plan(multisession, workers = 2L)
[10:52:23.000] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:23.003] |  :  .  Old stack:
[10:52:23.003] |  :  .  List of 1
[10:52:23.003] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:23.003] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:23.003] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:23.003] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:23.003] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:23.003] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:52:23.003] |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:23.003] |  :  .    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:23.003] |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:23.003] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:23.006] |  :  .  Not identical
[10:52:23.006] |  :  .  all.equal() for future ...
[10:52:23.006] |  :  .  |  List of 2
[10:52:23.006] |  :  .  |   $ target :function (..., workers = 2L, envir = parent.frame())  
[10:52:23.006] |  :  .  |    ..- attr(*, "class")= chr [1:6] "tweaked" "multisession" "cluster" "multiprocess" ...
[10:52:23.006] |  :  .  |    ..- attr(*, "init")= logi TRUE
[10:52:23.006] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:23.006] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:23.006] |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:23.006] |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:52:23.006] |  :  .  |    ..- attr(*, "tweaks")=List of 1
[10:52:23.006] |  :  .  |    .. ..$ workers: int 2
[10:52:23.006] |  :  .  |    ..- attr(*, "call")= language plan(multisession, workers = 2L)
[10:52:23.006] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:52:23.006] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:52:23.006] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:23.006] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:23.006] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:23.006] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:52:23.006] |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x56182478b3d0> 
[10:52:23.006] |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:52:23.006] |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:52:23.012] |  :  .  |  Formals differ
[10:52:23.013] |  :  .  all.equal() for future ... done
[10:52:23.013] |  :  .  Future strategies differ at level 1
[10:52:23.013] |  :  all.equal() for FutureStrategyList ... done
[10:52:23.013] |  :  plan(): Setting new future strategy stack:
[10:52:23.013] |  :  List of future strategies:
[10:52:23.013] |  :  1. multisession:
[10:52:23.013] |  :     - args: function (..., workers = 2L, envir = parent.frame())
[10:52:23.013] |  :     - tweaked: TRUE
[10:52:23.013] |  :     - call: plan(multisession, workers = 2L)
[10:52:23.013] |  :  List of 1
[10:52:23.013] |  :   $ :function (..., workers = 2L, envir = parent.frame())  
[10:52:23.013] |  :    ..- attr(*, "class")= chr [1:6] "tweaked" "multisession" "cluster" "multiprocess" ...
[10:52:23.013] |  :    ..- attr(*, "init")= logi TRUE
[10:52:23.013] |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:23.013] |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:23.013] |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:23.013] |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:52:23.013] |  :    ..- attr(*, "tweaks")=List of 1
[10:52:23.013] |  :    .. ..$ workers: int 2
[10:52:23.013] |  :    ..- attr(*, "call")= language plan(multisession, workers = 2L)
[10:52:23.013] |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:52:23.016] |  :  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:52:23.017] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:23.017] |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:52:23.017] |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:23.017] |  :  .  Legacy shutdown of cluster workers ...
[10:52:23.017] |  :  .  |  Stopping existing cluster ...
[10:52:23.017] |  :  .  |  :  No pre-existing cluster. Skipping
[10:52:23.017] |  :  .  |  Stopping existing cluster ... done
[10:52:23.017] |  :  .  Legacy shutdown of cluster workers ... done
[10:52:23.017] |  :  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:52:23.018] |  :  plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:52:23.018] |  :  .  function (..., workers = 2L, envir = parent.frame())  
[10:52:23.018] |  :  .   - attr(*, "class")= chr [1:6] "tweaked" "multisession" "cluster" "multiprocess" ...
[10:52:23.018] |  :  .   - attr(*, "init")= logi TRUE
[10:52:23.018] |  :  .   - attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:52:23.018] |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:23.018] |  :  .   - attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:52:23.018] |  :  .   - attr(*, "untweakable")= chr "persistent"
[10:52:23.018] |  :  .   - attr(*, "tweaks")=List of 1
[10:52:23.018] |  :  .    ..$ workers: int 2
[10:52:23.018] |  :  .   - attr(*, "call")= language plan(multisession, workers = 2L)
[10:52:23.020] |  :  .  init: TRUE
[10:52:23.020] |  :  .  makeFutureBackend(<tweaked>) ...
[10:52:23.020] |  :  .  |  Backend function: <‘NULL’>
[10:52:23.021] |  :  .  |  ClusterFutureBackend(..., persistent = FALSE, gc = TRUE, earlySignal = TRUE) ...
[10:52:23.021] |  :  .  |  :  workers: 2
[10:52:23.021] |  :  .  |  :  getCluster() ...
[10:52:23.021] |  :  .  |  :  getCluster() ... done
[10:52:23.021] |  :  .  |  :  Stopping existing cluster ...
[10:52:23.021] |  :  .  |  :  .  No pre-existing cluster. Skipping
[10:52:23.021] |  :  .  |  :  Stopping existing cluster ... done
[10:52:23.021] |  :  .  |  :  Starting new cluster ...
[10:52:23.021] |  :  .  |  :  .  makeCluster(workers, ...) ...
[10:52:23.022] |  :  .  |  :  .  |  Arguments:
[10:52:23.022] |  :  .  |  :  .  |  List of 1
[10:52:23.022] |  :  .  |  :  .  |   $ : int 2
[10:52:23.507] |  :  .  |  :  .  |  Generated cluster UUID
[10:52:23.508] |  :  .  |  :  .  |  Cluster UUID: ‘2401dd763ca114292d280205791482d7’
[10:52:23.508] |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:52:23.510] |  :  .  |  :  .  makeCluster(workers, ...) ... done
[10:52:23.510] |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:52:23.512] |  :  .  |  :  Starting new cluster ... done
[10:52:23.512] |  :  .  |  :  Number of workers: 2
[10:52:23.512] |  :  .  |  :  Workers UUID: ‘2401dd763ca114292d280205791482d7’
[10:52:23.512] |  :  .  |  ClusterFutureBackend(..., persistent = FALSE, gc = TRUE, earlySignal = TRUE) ... done
[10:52:23.512] |  :  .  |  Backend: <‘MultisessionFutureBackend’, ‘ClusterFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:52:23.512] |  :  .  makeFutureBackend(<tweaked>) ... done
[10:52:23.513] |  :  plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[10:52:23.513] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:23.513] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:52:23.513] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:23.513] |  :  plan(): nbrOfWorkers() = 2
[10:52:23.513] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:52:23.513] plan(<tweaked>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
- plan set
[10:52:23.514] getGlobalsAndPackages() ...
[10:52:23.514] |  Searching for globals ...
[10:52:23.515] |  :  globals found: [3] ‘{’, ‘Sys.sleep’, ‘stop’
[10:52:23.515] |  Searching for globals ... DONE
[10:52:23.515] |  Resolving globals: FALSE
[10:52:23.515] |  Search for packages associated with the globals ...
[10:52:23.515] |  :  Packages associated with globals: [1] ‘base’
[10:52:23.516] |  :  Packages: [1] ‘base’
[10:52:23.516] |  Search for packages associated with the globals ... DONE
[10:52:23.516] |  Packages after dropping 'base': [0] 
[10:52:23.516] |  globals: [0] 
[10:52:23.516] |  packages: [0] 
[10:52:23.516] getGlobalsAndPackages() ... done
[10:52:23.516] run() for Future (‘Future’) ...
[10:52:23.517] |  state: ‘created’
[10:52:23.517] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:23.517] |  plan(<tweaked>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:23.517] |  Using MultisessionFutureBackend ...
[10:52:23.517] |  :  Launching futures ...
[10:52:23.517] |  :  .  launchFuture() for ClusterFutureBackend ...
[10:52:23.517] |  :  .  |  Workers: [n=2]
[10:52:23.518] |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:52:23.519] |  :  .  |  FutureRegistry: ‘workers-2401dd763ca114292d280205791482d7’
[10:52:23.519] |  :  .  |  requestWorker() ...
[10:52:23.519] |  :  .  |  :  requestNode() ...
[10:52:23.519] |  :  .  |  :  .  Number of workers: 2
[10:52:23.519] |  :  .  |  :  .  Polling for a free worker ...
[10:52:23.519] |  :  .  |  :  .  |  FutureRegistry('workers-2401dd763ca114292d280205791482d7', action = 'list', earlySignal = 0) ...
[10:52:23.520] |  :  .  |  :  .  |  :  Created empty registry ‘workers-2401dd763ca114292d280205791482d7’
[10:52:23.520] |  :  .  |  :  .  |  :  Listing all futures
[10:52:23.520] |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:52:23.520] |  :  .  |  :  .  |  FutureRegistry('workers-2401dd763ca114292d280205791482d7', action = 'list', earlySignal = 0) ... done
[10:52:23.520] |  :  .  |  :  .  |  Total time: 0
[10:52:23.520] |  :  .  |  :  .  Polling for a free worker ... done
[10:52:23.520] |  :  .  |  :  .  FutureRegistry('workers-2401dd763ca114292d280205791482d7', action = 'list', earlySignal = 0) ...
[10:52:23.520] |  :  .  |  :  .  |  Listing all futures
[10:52:23.520] |  :  .  |  :  .  |  Number of registered futures: 0
[10:52:23.520] |  :  .  |  :  .  FutureRegistry('workers-2401dd763ca114292d280205791482d7', action = 'list', earlySignal = 0) ... done
[10:52:23.521] |  :  .  |  :  .  Index of first available worker: 1
[10:52:23.521] |  :  .  |  :  .  Validate that the worker is functional ...
[10:52:23.582] |  :  .  |  :  .  |  Worker is functional
[10:52:23.583] |  :  .  |  :  .  requestNode() ... done
[10:52:23.583] |  :  .  |  :  .  cluster node index: 1
[10:52:23.583] |  :  .  |  :  requestWorker() ... done
[10:52:23.583] |  :  .  |  :  eraseGlobalEnvironment() ...
[10:52:23.584] |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:52:23.584] |  :  .  |  :  launchFuture() ...
[10:52:23.584] |  :  .  |  :  .  cluster node index: 1
[10:52:23.584] |  :  .  |  :  .  getFutureData() ...
[10:52:23.584] |  :  .  |  :  .  |  getFutureCore() ...
[10:52:23.584] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 0): <none>
[10:52:23.584] |  :  .  |  :  .  |  getFutureCore() ... done
[10:52:23.584] |  :  .  |  :  .  |  getFutureCapture() ...
[10:52:23.584] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:52:23.584] |  :  .  |  :  .  |  getFutureContext() ...
[10:52:23.585] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:52:23.585] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:52:23.585] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:52:23.585] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:52:23.585] |  :  .  |  :  .  |  getFutureContext() ... done
[10:52:23.585] |  :  .  |  :  .  getFutureData() ... done
[10:52:23.586] |  :  .  |  :  .  FutureRegistry('workers-2401dd763ca114292d280205791482d7', action = 'add', earlySignal = 0) ...
[10:52:23.586] |  :  .  |  :  .  |  Appended future to position #1
[10:52:23.586] |  :  .  |  :  .  |  Number of registered futures: 1
[10:52:23.586] |  :  .  |  :  .  FutureRegistry('workers-2401dd763ca114292d280205791482d7', action = 'add', earlySignal = 0) ... done
[10:52:23.586] |  :  .  |  :  launchFuture() ... done
[10:52:23.586] |  :  .  |  :  MultisessionFuture started
[10:52:23.586] |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:52:23.586] |  :  .  Launching futures ... done
[10:52:23.586] |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:52:23.587] |  :  Using MultisessionFutureBackend ... done
[10:52:23.587] |  run() for Future (‘MultisessionFuture’) ... done
[10:52:23.587] |  isFutureResolved() ...
[10:52:23.588] |  :  assertValidConnection() ...
[10:52:23.588] |  :  .  cluster node index: 1
[10:52:23.588] |  :  assertValidConnection() ... done
[10:52:23.599] |  isFutureResolved() ... done
<simpleError: No error has been caught because the future is unresolved: ‘f’>
[10:52:23.599] |  isFutureResolved() ...
[10:52:23.600] |  :  assertValidConnection() ...
[10:52:23.600] |  :  .  cluster node index: 1
[10:52:23.600] |  :  assertValidConnection() ... done
[10:52:23.611] |  isFutureResolved() ... done
[10:52:23.621] |  isFutureResolved() ...
[10:52:23.621] |  :  assertValidConnection() ...
[10:52:23.621] |  :  .  cluster node index: 1
[10:52:23.622] |  :  assertValidConnection() ... done
[10:52:23.632] |  isFutureResolved() ... done
[10:52:23.642] |  isFutureResolved() ...
[10:52:23.643] |  :  assertValidConnection() ...
[10:52:23.643] |  :  .  cluster node index: 1
[10:52:23.643] |  :  assertValidConnection() ... done
[10:52:23.654] |  isFutureResolved() ... done
[10:52:23.664] |  isFutureResolved() ...
[10:52:23.664] |  :  assertValidConnection() ...
[10:52:23.665] |  :  .  cluster node index: 1
[10:52:23.665] |  :  assertValidConnection() ... done
[10:52:23.675] |  isFutureResolved() ... done
[10:52:23.685] |  isFutureResolved() ...
[10:52:23.686] |  :  assertValidConnection() ...
[10:52:23.686] |  :  .  cluster node index: 1
[10:52:23.686] |  :  assertValidConnection() ... done
[10:52:23.697] |  isFutureResolved() ... done
[10:52:23.707] |  isFutureResolved() ...
[10:52:23.707] |  :  assertValidConnection() ...
[10:52:23.707] |  :  .  cluster node index: 1
[10:52:23.708] |  :  assertValidConnection() ... done
[10:52:23.718] |  isFutureResolved() ... done
[10:52:23.728] |  isFutureResolved() ...
[10:52:23.729] |  :  assertValidConnection() ...
[10:52:23.729] |  :  .  cluster node index: 1
[10:52:23.729] |  :  assertValidConnection() ... done
[10:52:23.740] |  isFutureResolved() ... done
[10:52:23.750] |  isFutureResolved() ...
[10:52:23.750] |  :  assertValidConnection() ...
[10:52:23.750] |  :  .  cluster node index: 1
[10:52:23.751] |  :  assertValidConnection() ... done
[10:52:23.761] |  isFutureResolved() ... done
[10:52:23.771] |  isFutureResolved() ...
[10:52:23.772] |  :  assertValidConnection() ...
[10:52:23.772] |  :  .  cluster node index: 1
[10:52:23.772] |  :  assertValidConnection() ... done
[10:52:23.782] |  isFutureResolved() ... done
[10:52:23.793] |  isFutureResolved() ...
[10:52:23.793] |  :  assertValidConnection() ...
[10:52:23.793] |  :  .  cluster node index: 1
[10:52:23.794] |  :  assertValidConnection() ... done
[10:52:23.804] |  isFutureResolved() ... done
[10:52:23.814] |  isFutureResolved() ...
[10:52:23.814] |  :  assertValidConnection() ...
[10:52:23.815] |  :  .  cluster node index: 1
[10:52:23.815] |  :  assertValidConnection() ... done
[10:52:23.825] |  isFutureResolved() ... done
[10:52:23.836] |  isFutureResolved() ...
[10:52:23.836] |  :  assertValidConnection() ...
[10:52:23.836] |  :  .  cluster node index: 1
[10:52:23.837] |  :  assertValidConnection() ... done
[10:52:23.847] |  isFutureResolved() ... done
[10:52:23.857] |  isFutureResolved() ...
[10:52:23.857] |  :  assertValidConnection() ...
[10:52:23.858] |  :  .  cluster node index: 1
[10:52:23.858] |  :  assertValidConnection() ... done
[10:52:23.868] |  isFutureResolved() ... done
[10:52:23.878] |  isFutureResolved() ...
[10:52:23.879] |  :  assertValidConnection() ...
[10:52:23.879] |  :  .  cluster node index: 1
[10:52:23.879] |  :  assertValidConnection() ... done
[10:52:23.890] |  isFutureResolved() ... done
[10:52:23.900] |  isFutureResolved() ...
[10:52:23.900] |  :  assertValidConnection() ...
[10:52:23.900] |  :  .  cluster node index: 1
[10:52:23.901] |  :  assertValidConnection() ... done
[10:52:23.911] |  isFutureResolved() ... done
[10:52:23.921] |  isFutureResolved() ...
[10:52:23.922] |  :  assertValidConnection() ...
[10:52:23.922] |  :  .  cluster node index: 1
[10:52:23.922] |  :  assertValidConnection() ... done
[10:52:23.933] |  isFutureResolved() ... done
[10:52:23.943] |  isFutureResolved() ...
[10:52:23.943] |  :  assertValidConnection() ...
[10:52:23.943] |  :  .  cluster node index: 1
[10:52:23.944] |  :  assertValidConnection() ... done
[10:52:23.954] |  isFutureResolved() ... done
[10:52:23.964] |  isFutureResolved() ...
[10:52:23.965] |  :  assertValidConnection() ...
[10:52:23.965] |  :  .  cluster node index: 1
[10:52:23.965] |  :  assertValidConnection() ... done
[10:52:23.976] |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:52:23.976] |  :  .  cluster node index: 1
[10:52:23.977] |  :  .  [1] TRUE
[10:52:23.977] |  :  .  received data:
[10:52:23.977] |  :  .  List of 5
[10:52:23.977] |  :  .   $ type   : chr "VALUE"
[10:52:23.977] |  :  .   $ value  :List of 13
[10:52:23.977] |  :  .    ..$ value            : NULL
[10:52:23.977] |  :  .    ..$ visible          : logi TRUE
[10:52:23.977] |  :  .    ..$ stdout           : chr ""
[10:52:23.977] |  :  .    ..$ conditions       :List of 1
[10:52:23.977] |  :  .    .. ..$ :List of 5
[10:52:23.977] |  :  .    .. .. ..$ condition:List of 2
[10:52:23.977] |  :  .    .. .. .. ..$ message: chr "Woops"
[10:52:23.977] |  :  .    .. .. .. ..$ call   : language eval(quote({     { ...
[10:52:23.977] |  :  .    .. .. .. ..- attr(*, "class")= chr [1:3] "simpleError" "error" "condition"
[10:52:23.977] |  :  .    .. .. ..$ calls    :List of 10
[10:52:23.977] |  :  .    .. .. .. ..$ : language eval(expr, envir = globalenv())
[10:52:23.977] |  :  .    .. .. .. ..$ : language eval(expr, envir = globalenv())
[10:52:23.977] |  :  .    .. .. .. ..$ : language local({     { ...
[10:52:23.977] |  :  .    .. .. .. ..$ : language eval.parent(substitute(eval(quote(expr), envir)))
[10:52:23.977] |  :  .    .. .. .. ..$ : language eval(expr, p)
[10:52:23.977] |  :  .    .. .. .. ..$ : language eval(expr, p)
[10:52:23.977] |  :  .    .. .. .. ..$ : language eval(quote({     { ...
[10:52:23.977] |  :  .    .. .. .. ..$ : language eval(quote({     { ...
[10:52:23.977] |  :  .    .. .. .. ..$ : language stop("Woops")
[10:52:23.977] |  :  .    .. .. .. ..$ : language eval(quote({     { ...
[10:52:23.977] |  :  .    .. .. ..$ session  :List of 6
[10:52:23.977] |  :  .    .. .. .. ..$ r         :List of 14
[10:52:23.977] |  :  .    .. .. .. .. ..$ platform      : chr "x86_64-pc-linux-gnu"
[10:52:23.977] |  :  .    .. .. .. .. ..$ arch          : chr "x86_64"
[10:52:23.977] |  :  .    .. .. .. .. ..$ os            : chr "linux-gnu"
[10:52:23.977] |  :  .    .. .. .. .. ..$ system        : chr "x86_64, linux-gnu"
[10:52:23.977] |  :  .    .. .. .. .. ..$ status        : chr ""
[10:52:23.977] |  :  .    .. .. .. .. ..$ major         : chr "4"
[10:52:23.977] |  :  .    .. .. .. .. ..$ minor         : chr "5.0"
[10:52:23.977] |  :  .    .. .. .. .. ..$ year          : chr "2025"
[10:52:23.977] |  :  .    .. .. .. .. ..$ month         : chr "04"
[10:52:23.977] |  :  .    .. .. .. .. ..$ day           : chr "11"
[10:52:23.977] |  :  .    .. .. .. .. ..$ svn rev       : chr "88135"
[10:52:23.977] |  :  .    .. .. .. .. ..$ language      : chr "R"
[10:52:23.977] |  :  .    .. .. .. .. ..$ version.string: chr "R version 4.5.0 (2025-04-11)"
[10:52:23.977] |  :  .    .. .. .. .. ..$ nickname      : chr "How About a Twenty-Six"
[10:52:23.977] |  :  .    .. .. .. ..$ locale    : chr "LC_CTYPE=en_US.UTF-8;LC_NUMERIC=C;LC_TIME=en_US.UTF-8;LC_COLLATE=en_US.UTF-8;LC_MONETARY=en_US.UTF-8;LC_MESSAGE"| __truncated__
[10:52:23.977] |  :  .    .. .. .. ..$ rngkind   : chr [1:3] "Mersenne-Twister" "Inversion" "Rejection"
[10:52:23.977] |  :  .    .. .. .. ..$ namespaces: chr [1:16] "compiler" "parallelly" "graphics" "tools" ...
[10:52:23.977] |  :  .    .. .. .. ..$ search    : chr [1:10] ".GlobalEnv" "package:future" "package:stats" "package:graphics" ...
[10:52:23.977] |  :  .    .. .. .. ..$ system    : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:52:23.977] |  :  .    .. .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:52:23.977] |  :  .    .. .. ..$ timestamp: POSIXct[1:1], format: "2025-05-06 10:52:23"
[10:52:23.977] |  :  .    .. .. ..$ signaled : int 0
[10:52:23.977] |  :  .    ..$ rng              : logi FALSE
[10:52:23.977] |  :  .    ..$ misuseGlobalEnv  : NULL
[10:52:23.977] |  :  .    ..$ misuseConnections:List of 3
[10:52:23.977] |  :  .    .. ..$ added   : NULL
[10:52:23.977] |  :  .    .. ..$ removed : NULL
[10:52:23.977] |  :  .    .. ..$ replaced: NULL
[10:52:23.977] |  :  .    ..$ misuseDevices    : NULL
[10:52:23.977] |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:52:23"
[10:52:23.977] |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:52:23"
[10:52:23.977] |  :  .    ..$ session_uuid     : chr "c45c657ad9243cf8be2cfa0ce4350f23"
[10:52:23.977] |  :  .    .. ..- attr(*, "source")=List of 5
[10:52:23.977] |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:52:23.977] |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:52:23.977] |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:52:23.977] |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:52:23.977] |  :  .    .. .. ..$ pid   : int 67855
[10:52:23.977] |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:52:23"
[10:52:23.977] |  :  .    .. .. ..$ random: int 2147483647
[10:52:23.977] |  :  .    ..$ r_info           :List of 4
[10:52:23.977] |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:52:23.977] |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:52:23.977] |  :  .    .. ..$ os           : chr "unix"
[10:52:23.977] |  :  .    .. ..$ os_name      : chr "Linux"
[10:52:23.977] |  :  .    .. ..$ captures_utf8: logi TRUE
[10:52:23.977] |  :  .    ..$ version          : chr "1.8"
[10:52:23.977] |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:52:23.977] |  :  .   $ success: logi TRUE
[10:52:23.977] |  :  .   $ time   : 'proc_time' Named num [1:5] 0.045 0.004 0.349 0 0
[10:52:23.977] |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:52:23.977] |  :  .   $ tag    : NULL
[10:52:24.003] |  :  .  Received FutureResult
[10:52:24.003] |  :  .  FutureRegistry('workers-2401dd763ca114292d280205791482d7', action = 'remove', earlySignal = 0) ...
[10:52:24.007] |  :  .  |  Removed future from position #1
[10:52:24.007] |  :  .  |  Number of registered futures: 0
[10:52:24.007] |  :  .  FutureRegistry('workers-2401dd763ca114292d280205791482d7', action = 'remove', earlySignal = 0) ... done
[10:52:24.007] |  :  .  Erased future from future backend
[10:52:24.007] |  :  .  result() for ClusterFuture ...
[10:52:24.007] |  :  .  |  result already collected: FutureResult
[10:52:24.008] |  :  .  result() for ClusterFuture ... done
[10:52:24.008] |  :  .  signalConditions() ...
[10:52:24.008] |  :  .  |  include = ‘immediateCondition’
[10:52:24.008] |  :  .  |  exclude = 
[10:52:24.008] |  :  .  |  resignal = FALSE
[10:52:24.008] |  :  .  |  Number of conditions: 1
[10:52:24.008] |  :  .  signalConditions() ... done
[10:52:24.008] |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:52:24.009] |  isFutureResolved() ... done
[10:52:24.009] |  A MultisessionFuture was resolved (result was not collected)
MultisessionFuture:
Label: NULL
Expression:
{
    Sys.sleep(0.3)
    42L
    stop("Woops")
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 27 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: 2ac95c17a76af18e679027e9cea27a85
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’

> message("*** backtrace( ) - exceptions ... DONE")
*** backtrace( ) - exceptions ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.6s, sys.self=0.02s, elapsed=1s, user.child=0.2s, sys.child=0.3s
Test ‘backtrace’ ... success
> 
