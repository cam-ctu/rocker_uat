
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-backtrace.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("backtrace")
Test ‘backtrace’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-backtrace.R’

> library(future)
[08:07:41.002] Option 'future.startup.script': TRUE
[08:07:41.002] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:07:41.002] Future startup scripts found: <none>

> message("*** backtrace( ) - explicit future ...")
*** backtrace( ) - explicit future ...

> f <- future({
+     42
+     stop("Woops")
+ })
[08:07:41.003] future(..., label = NULL) ...
[08:07:41.003] | lazy: FALSE
[08:07:41.003] | stdout: TRUE
[08:07:41.004] | conditions: [n=1] ‘condition’
[08:07:41.004] | gc: FALSE
[08:07:41.004] | earlySignal: FALSE
[08:07:41.004] | getGlobalsAndPackages() ...
[08:07:41.005] | : Searching for globals ...
[08:07:41.018] | : . globals found: [2] ‘{’, ‘stop’
[08:07:41.019] | : Searching for globals ... done
[08:07:41.019] | : Resolving globals: FALSE
[08:07:41.019] | : Search for packages associated with the globals ...
[08:07:41.019] | : . Packages associated with globals: [1] ‘base’
[08:07:41.019] | : . Packages: [1] ‘base’
[08:07:41.020] | : Search for packages associated with the globals ... done
[08:07:41.020] | : Packages after dropping 'base': [0] 
[08:07:41.020] | : globals: [0] 
[08:07:41.020] | : packages: [0] 
[08:07:41.020] | getGlobalsAndPackages() ... done
[08:07:41.021] | run() for ‘Future’ (<unnamed-1>) ...
[08:07:41.021] | : state: ‘created’
[08:07:41.021] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.021] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:07:41.021] | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.021] | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.021] | : . '  - attr(*, "init")= logi TRUE
[08:07:41.021] | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.021] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.021] | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.021] | : . '  - attr(*, "call")= language plan(sequential)
[08:07:41.025] | : . ' init: TRUE
[08:07:41.025] | : . ' makeFutureBackend(<sequential>) ...
[08:07:41.025] | : . ' , Backend function: <‘NULL’>
[08:07:41.025] | : . ' , Evaluator tweak arguments: [n=0]
[08:07:41.026] | : . ' ,  list()
[08:07:41.026] | : . ' , Evaluator formal arguments: [n=2]
[08:07:41.026] | : . ' ,  list()
[08:07:41.026] | : . ' , Backend factory arguments: [n=2]
[08:07:41.026] | : . ' , Dotted pair list of 2
[08:07:41.026] | : . ' ,  $ gc         : logi FALSE
[08:07:41.026] | : . ' ,  $ earlySignal: logi FALSE
[08:07:41.027] | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:41.028] | : . ' makeFutureBackend(<sequential>) ... done
[08:07:41.028] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:07:41.028] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.028] | : Using SequentialFutureBackend ...
[08:07:41.028] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:07:41.028] | : . Launching futures ...
[08:07:41.028] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:41.029] | : . ' , getFutureData() ...
[08:07:41.029] | : . ' , ; getFutureCore() ...
[08:07:41.029] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:41.029] | : . ' , ; getFutureCore() ... done
[08:07:41.029] | : . ' , ; getFutureCapture() ...
[08:07:41.029] | : . ' , ; getFutureCapture() ... done
[08:07:41.029] | : . ' , ; getFutureContext() ...
[08:07:41.030] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.030] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:41.030] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.030] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:41.030] | : . ' , ; getFutureContext() ... done
[08:07:41.030] | : . ' , getFutureData() ... done
[08:07:41.033] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.033] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:41.033] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.033] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:41.033] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:41.034] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:41.034] | : . ' , ; ` | New stack:
[08:07:41.034] | : . ' , ; ` | List of 1
[08:07:41.034] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.034] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.034] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:41.034] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.034] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.034] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.034] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:41.034] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.036] | : . ' , ; ` | Old stack:
[08:07:41.036] | : . ' , ; ` | List of 1
[08:07:41.036] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.036] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.036] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:41.036] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.036] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.036] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.036] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:41.036] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.036] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.036] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.036] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.039] | : . ' , ; ` | Not identical
[08:07:41.040] | : . ' , ; ` | all.equal() for future ...
[08:07:41.040] | : . ' , ; ` | : List of 2
[08:07:41.040] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.040] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.040] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:41.040] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.040] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.040] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.040] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:41.040] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.040] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.040] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:41.040] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.040] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.040] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.040] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:41.040] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.040] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.040] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.047] | : . ' , ; ` | all.equal() for future ... done
[08:07:41.047] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:41.047] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:41.047] | : . ' , ; ` List of future strategies:
[08:07:41.047] | : . ' , ; ` 1. sequential:
[08:07:41.047] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:41.047] | : . ' , ; `    - tweaked: FALSE
[08:07:41.047] | : . ' , ; `    - call: plan(sequential)
[08:07:41.048] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:41.048] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:41.050] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:41.050] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:41.050] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:41.051] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:41.051] | : . ' , ; ` | : New stack:
[08:07:41.051] | : . ' , ; ` | : List of 1
[08:07:41.051] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.051] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.051] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:41.051] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.051] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.051] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.051] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:41.051] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.051] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.051] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.051] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.054] | : . ' , ; ` | : Old stack:
[08:07:41.054] | : . ' , ; ` | : List of 1
[08:07:41.054] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.054] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.054] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:41.054] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.054] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.054] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.054] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:41.054] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.054] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.054] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.054] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.057] | : . ' , ; ` | : Identical
[08:07:41.057] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:41.057] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:41.057] | : . ' , ; ` | List of future strategies:
[08:07:41.057] | : . ' , ; ` | 1. sequential:
[08:07:41.057] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:41.057] | : . ' , ; ` |    - tweaked: FALSE
[08:07:41.057] | : . ' , ; ` |    - call: plan(sequential)
[08:07:41.058] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:41.058] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:41.058] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:41.061] | : . ' , SequentialFuture started (and completed)
[08:07:41.061] | : . ' , signalConditions() ...
[08:07:41.061] | : . ' , ; include = ‘immediateCondition’
[08:07:41.061] | : . ' , ; exclude = 
[08:07:41.062] | : . ' , ; resignal = FALSE
[08:07:41.062] | : . ' , ; Number of conditions: 7
[08:07:41.062] | : . ' , ;  int 7
[08:07:41.062] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.062] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.062] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.062] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.063] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.063] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.063] | : . ' , ; Condition #7 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:41.063] | : . ' , signalConditions() ... done
[08:07:41.063] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:41.063] | : . Launching futures ... done
[08:07:41.063] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:41.063] | : Using SequentialFutureBackend ... done
[08:07:41.063] | run() for ‘Future’ (<unnamed-1>) ... done
[08:07:41.064] future(..., label = NULL) ... done

> v <- value(f, signal = FALSE)
[08:07:41.064] value() for SequentialFuture (<unnamed-1>) ...
[08:07:41.064] | signalConditions() ...
[08:07:41.065] | : include = ‘immediateCondition’
[08:07:41.065] | : exclude = 
[08:07:41.065] | : resignal = FALSE
[08:07:41.066] | : Number of conditions: 7
[08:07:41.066] | :  int 7
[08:07:41.066] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.066] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.066] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.066] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.066] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.067] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.067] | : Condition #7 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:41.067] | signalConditions() ... done
[08:07:41.067] | relay stdout ...
[08:07:41.067] | relay stdout ... done
[08:07:41.067] | check for misuse ...
[08:07:41.067] | check for misuse ... done
[08:07:41.067] value() for SequentialFuture (<unnamed-1>) ... done

> print(v)
<simpleError in eval(quote({    {        42L        stop("Woops")    }}), new.env()): Woops>

> calls <- backtrace(f)
[08:07:41.068] resolved() for SequentialFuture (<unnamed-1>) ...
[08:07:41.068] | state: ‘finished’
[08:07:41.069] | run: TRUE
[08:07:41.069] | result: ‘FutureResult’
[08:07:41.069] resolved() for SequentialFuture (<unnamed-1>) ... done

> print(calls)
[[1]]
future:::testme("backtrace")

[[2]]
source(file.path(path, "run.R"))

[[3]]
withVisible(eval(ei, envir))

[[4]]
eval(ei, envir)

[[5]]
eval(ei, envir)

[[6]]
source(testme[["script"]], echo = TRUE)

[[7]]
withVisible(eval(ei, envir))

[[8]]
eval(ei, envir)

[[9]]
eval(ei, envir)

[[10]]
future({
    42L
    stop("Woops")
})

[[11]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, onReference = onReference, ...)

[[12]]
eval(expr, envir = globalenv())

[[13]]
eval(expr, envir = globalenv())

[[14]]
local({
    {
        42L
        stop("Woops")
    }
})

[[15]]
eval.parent(substitute(eval(quote(expr), envir)))

[[16]]
eval(expr, p)

[[17]]
eval(expr, p)

[[18]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())

[[19]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())

[[20]]
stop("Woops")

[[21]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())


> message("*** backtrace( ) - explicit future ... DONE")
*** backtrace( ) - explicit future ... DONE

> message("*** backtrace( ) - implicit future ...")
*** backtrace( ) - implicit future ...

> v %<-% {
+     42
+     stop("Woops")
+ }
[08:07:41.070] future(..., label = NULL) ...
[08:07:41.070] | lazy: FALSE
[08:07:41.070] | stdout: TRUE
[08:07:41.070] | conditions: [n=1] ‘condition’
[08:07:41.070] | gc: FALSE
[08:07:41.070] | earlySignal: FALSE
[08:07:41.070] | getGlobalsAndPackages() ...
[08:07:41.070] | : Searching for globals ...
[08:07:41.075] | : . globals found: [2] ‘{’, ‘stop’
[08:07:41.075] | : Searching for globals ... done
[08:07:41.076] | : Resolving globals: FALSE
[08:07:41.076] | : Search for packages associated with the globals ...
[08:07:41.076] | : . Packages associated with globals: [1] ‘base’
[08:07:41.076] | : . Packages: [1] ‘base’
[08:07:41.076] | : Search for packages associated with the globals ... done
[08:07:41.076] | : Packages after dropping 'base': [0] 
[08:07:41.076] | : globals: [0] 
[08:07:41.076] | : packages: [0] 
[08:07:41.077] | getGlobalsAndPackages() ... done
[08:07:41.077] | run() for ‘Future’ (<unnamed-2>) ...
[08:07:41.077] | : state: ‘created’
[08:07:41.077] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.077] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.077] | : Using SequentialFutureBackend ...
[08:07:41.077] | : . Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:07:41.077] | : . Launching futures ...
[08:07:41.077] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:41.078] | : . ' , getFutureData() ...
[08:07:41.078] | : . ' , ; getFutureCore() ...
[08:07:41.078] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:41.078] | : . ' , ; getFutureCore() ... done
[08:07:41.078] | : . ' , ; getFutureCapture() ...
[08:07:41.078] | : . ' , ; getFutureCapture() ... done
[08:07:41.078] | : . ' , ; getFutureContext() ...
[08:07:41.078] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.078] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:41.078] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.079] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:41.079] | : . ' , ; getFutureContext() ... done
[08:07:41.079] | : . ' , getFutureData() ... done
[08:07:41.080] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.080] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:41.080] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.080] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:41.080] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:41.081] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:41.081] | : . ' , ; ` | New stack:
[08:07:41.081] | : . ' , ; ` | List of 1
[08:07:41.081] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.081] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.081] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:41.081] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.081] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.081] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.081] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:41.081] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.083] | : . ' , ; ` | Old stack:
[08:07:41.083] | : . ' , ; ` | List of 1
[08:07:41.083] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.083] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.083] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:41.083] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.083] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.083] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.083] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:41.083] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.083] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.083] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.083] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.087] | : . ' , ; ` | Not identical
[08:07:41.087] | : . ' , ; ` | all.equal() for future ...
[08:07:41.087] | : . ' , ; ` | : List of 2
[08:07:41.087] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.087] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.087] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:41.087] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.087] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.087] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.087] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:41.087] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.087] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.087] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:41.087] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.087] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.087] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.087] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:41.087] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.087] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.087] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.092] | : . ' , ; ` | all.equal() for future ... done
[08:07:41.092] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:41.092] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:41.092] | : . ' , ; ` List of future strategies:
[08:07:41.092] | : . ' , ; ` 1. sequential:
[08:07:41.092] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:41.092] | : . ' , ; `    - tweaked: FALSE
[08:07:41.092] | : . ' , ; `    - call: plan(sequential)
[08:07:41.093] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:41.093] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:41.095] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:41.095] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:41.095] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:41.095] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:41.095] | : . ' , ; ` | : New stack:
[08:07:41.095] | : . ' , ; ` | : List of 1
[08:07:41.095] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.095] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.095] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:41.095] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.095] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.095] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.095] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:41.095] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.095] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.095] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.095] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.098] | : . ' , ; ` | : Old stack:
[08:07:41.098] | : . ' , ; ` | : List of 1
[08:07:41.098] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.098] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.098] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:41.098] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.098] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.098] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.098] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:41.098] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.098] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.098] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.098] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.101] | : . ' , ; ` | : Identical
[08:07:41.101] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:41.101] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:41.101] | : . ' , ; ` | List of future strategies:
[08:07:41.101] | : . ' , ; ` | 1. sequential:
[08:07:41.101] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:41.101] | : . ' , ; ` |    - tweaked: FALSE
[08:07:41.101] | : . ' , ; ` |    - call: plan(sequential)
[08:07:41.102] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:41.102] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:41.102] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:41.102] | : . ' , SequentialFuture started (and completed)
[08:07:41.102] | : . ' , signalConditions() ...
[08:07:41.102] | : . ' , ; include = ‘immediateCondition’
[08:07:41.103] | : . ' , ; exclude = 
[08:07:41.103] | : . ' , ; resignal = FALSE
[08:07:41.103] | : . ' , ; Number of conditions: 7
[08:07:41.103] | : . ' , ;  int 7
[08:07:41.104] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.104] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.104] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.104] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.104] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.105] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.105] | : . ' , ; Condition #7 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:41.105] | : . ' , signalConditions() ... done
[08:07:41.105] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:41.105] | : . Launching futures ... done
[08:07:41.105] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:41.105] | : Using SequentialFutureBackend ... done
[08:07:41.105] | run() for ‘Future’ (<unnamed-2>) ... done
[08:07:41.105] future(..., label = NULL) ... done

> calls <- backtrace(v)
[08:07:41.106] resolved() for SequentialFuture (<unnamed-2>) ...
[08:07:41.106] | state: ‘finished’
[08:07:41.106] | run: TRUE
[08:07:41.106] | result: ‘FutureResult’
[08:07:41.106] resolved() for SequentialFuture (<unnamed-2>) ... done

> print(calls)
[[1]]
future:::testme("backtrace")

[[2]]
source(file.path(path, "run.R"))

[[3]]
withVisible(eval(ei, envir))

[[4]]
eval(ei, envir)

[[5]]
eval(ei, envir)

[[6]]
source(testme[["script"]], echo = TRUE)

[[7]]
withVisible(eval(ei, envir))

[[8]]
eval(ei, envir)

[[9]]
eval(ei, envir)

[[10]]
v %<-% {
    42L
    stop("Woops")
}

[[11]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[12]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[13]]
do.call(future::future, args = future.args, envir = envir)

[[14]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", label = NULL, gc = FALSE, earlySignal = FALSE, 
    ...) 
{
    debug <- isTRUE(getOption("future.debug"))
    if (debug) {
        mdebugf_push("future(..., label = %s) ...", sQuoteLabel(label))
        mdebugf("lazy: %s", lazy)
        mdebugf("stdout: %s", stdout)
        mdebugf("conditions: [n=%d] %s", length(conditions), 
            commaq(conditions))
        mdebugf("gc: %s", gc)
        mdebugf("earlySignal: %s", earlySignal)
        on.exit(mdebugf_pop())
    }
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    onReference <- getOption("future.globals.onReference")
    if (is.null(onReference)) 
        onReference <- "ignore"
    if (!is.null(globals)) {
        gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
            globals = globals, onReference = onReference, maxSize = +Inf)
        expr <- gp[["expr"]]
        globals <- gp[["globals"]]
        if (length(packages) > 0 || length(gp[["packages"]]) > 
            0) {
            packages <- c(gp[["packages"]], packages)
        }
        gp <- NULL
        attr(globals, "already-done") <- TRUE
    }
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, onReference = onReference, ...)
    future[[".defaultLocal"]] <- !is.element("local", names(list(...)))
    if (isTRUE(getOption("future.journal"))) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future[["lazy"]] <- FALSE
        stop_if_not(inherits(future, "Future"), !future[["lazy"]])
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[15]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, onReference = onReference, ...)

[[16]]
eval(expr, envir = globalenv())

[[17]]
eval(expr, envir = globalenv())

[[18]]
local({
    {
        42L
        stop("Woops")
    }
})

[[19]]
eval.parent(substitute(eval(quote(expr), envir)))

[[20]]
eval(expr, p)

[[21]]
eval(expr, p)

[[22]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())

[[23]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())

[[24]]
stop("Woops")

[[25]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())


> message("*** backtrace( ) - implicit future ... DONE")
*** backtrace( ) - implicit future ... DONE

> message("*** backtrace( ) - subsetting ...")
*** backtrace( ) - subsetting ...

> env <- new.env()

> env[["a"]] %<-% {
+     42
+     stop("Woops")
+ }
[08:07:41.107] future(..., label = NULL) ...
[08:07:41.107] | lazy: FALSE
[08:07:41.107] | stdout: TRUE
[08:07:41.107] | conditions: [n=1] ‘condition’
[08:07:41.108] | gc: FALSE
[08:07:41.108] | earlySignal: FALSE
[08:07:41.108] | getGlobalsAndPackages() ...
[08:07:41.108] | : Searching for globals ...
[08:07:41.113] | : . globals found: [2] ‘{’, ‘stop’
[08:07:41.113] | : Searching for globals ... done
[08:07:41.113] | : Resolving globals: FALSE
[08:07:41.113] | : Search for packages associated with the globals ...
[08:07:41.113] | : . Packages associated with globals: [1] ‘base’
[08:07:41.113] | : . Packages: [1] ‘base’
[08:07:41.114] | : Search for packages associated with the globals ... done
[08:07:41.114] | : Packages after dropping 'base': [0] 
[08:07:41.114] | : globals: [0] 
[08:07:41.114] | : packages: [0] 
[08:07:41.114] | getGlobalsAndPackages() ... done
[08:07:41.114] | run() for ‘Future’ (<unnamed-3>) ...
[08:07:41.114] | : state: ‘created’
[08:07:41.114] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.114] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.115] | : Using SequentialFutureBackend ...
[08:07:41.115] | : . Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:07:41.115] | : . Launching futures ...
[08:07:41.115] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:41.115] | : . ' , getFutureData() ...
[08:07:41.115] | : . ' , ; getFutureCore() ...
[08:07:41.115] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:41.115] | : . ' , ; getFutureCore() ... done
[08:07:41.115] | : . ' , ; getFutureCapture() ...
[08:07:41.115] | : . ' , ; getFutureCapture() ... done
[08:07:41.115] | : . ' , ; getFutureContext() ...
[08:07:41.116] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.116] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:41.116] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.116] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:41.116] | : . ' , ; getFutureContext() ... done
[08:07:41.116] | : . ' , getFutureData() ... done
[08:07:41.117] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.117] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:41.118] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.118] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:41.118] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:41.118] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:41.118] | : . ' , ; ` | New stack:
[08:07:41.118] | : . ' , ; ` | List of 1
[08:07:41.118] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.118] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.118] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:41.118] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.118] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.118] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.118] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:41.118] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.121] | : . ' , ; ` | Old stack:
[08:07:41.121] | : . ' , ; ` | List of 1
[08:07:41.121] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.121] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.121] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:41.121] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.121] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.121] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.121] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:41.121] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.121] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.121] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.121] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.124] | : . ' , ; ` | Not identical
[08:07:41.125] | : . ' , ; ` | all.equal() for future ...
[08:07:41.125] | : . ' , ; ` | : List of 2
[08:07:41.125] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.125] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.125] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:41.125] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.125] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.125] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.125] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:41.125] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.125] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.125] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:41.125] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.125] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.125] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.125] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:41.125] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.125] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.125] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.130] | : . ' , ; ` | all.equal() for future ... done
[08:07:41.130] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:41.130] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:41.130] | : . ' , ; ` List of future strategies:
[08:07:41.130] | : . ' , ; ` 1. sequential:
[08:07:41.130] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:41.130] | : . ' , ; `    - tweaked: FALSE
[08:07:41.130] | : . ' , ; `    - call: plan(sequential)
[08:07:41.130] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:41.130] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:41.132] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:41.132] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:41.132] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:41.132] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:41.132] | : . ' , ; ` | : New stack:
[08:07:41.133] | : . ' , ; ` | : List of 1
[08:07:41.133] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.133] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.133] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:41.133] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.133] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.133] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.133] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:41.133] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.133] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.133] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.133] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.136] | : . ' , ; ` | : Old stack:
[08:07:41.136] | : . ' , ; ` | : List of 1
[08:07:41.136] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.136] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.136] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:41.136] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.136] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.136] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.136] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:41.136] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.136] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.136] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.136] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.139] | : . ' , ; ` | : Identical
[08:07:41.139] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:41.139] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:41.139] | : . ' , ; ` | List of future strategies:
[08:07:41.139] | : . ' , ; ` | 1. sequential:
[08:07:41.139] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:41.139] | : . ' , ; ` |    - tweaked: FALSE
[08:07:41.139] | : . ' , ; ` |    - call: plan(sequential)
[08:07:41.139] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:41.139] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:41.140] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:41.140] | : . ' , SequentialFuture started (and completed)
[08:07:41.140] | : . ' , signalConditions() ...
[08:07:41.140] | : . ' , ; include = ‘immediateCondition’
[08:07:41.140] | : . ' , ; exclude = 
[08:07:41.140] | : . ' , ; resignal = FALSE
[08:07:41.140] | : . ' , ; Number of conditions: 7
[08:07:41.141] | : . ' , ;  int 7
[08:07:41.142] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.142] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.142] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.142] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.142] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.142] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.142] | : . ' , ; Condition #7 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:41.142] | : . ' , signalConditions() ... done
[08:07:41.142] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:41.143] | : . Launching futures ... done
[08:07:41.143] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:41.143] | : Using SequentialFutureBackend ... done
[08:07:41.143] | run() for ‘Future’ (<unnamed-3>) ... done
[08:07:41.143] future(..., label = NULL) ... done

> env[["b"]] %<-% {
+     42
+     stop("Woops")
+ }
[08:07:41.143] future(..., label = NULL) ...
[08:07:41.143] | lazy: FALSE
[08:07:41.144] | stdout: TRUE
[08:07:41.144] | conditions: [n=1] ‘condition’
[08:07:41.144] | gc: FALSE
[08:07:41.144] | earlySignal: FALSE
[08:07:41.144] | getGlobalsAndPackages() ...
[08:07:41.144] | : Searching for globals ...
[08:07:41.149] | : . globals found: [2] ‘{’, ‘stop’
[08:07:41.149] | : Searching for globals ... done
[08:07:41.149] | : Resolving globals: FALSE
[08:07:41.149] | : Search for packages associated with the globals ...
[08:07:41.149] | : . Packages associated with globals: [1] ‘base’
[08:07:41.150] | : . Packages: [1] ‘base’
[08:07:41.150] | : Search for packages associated with the globals ... done
[08:07:41.150] | : Packages after dropping 'base': [0] 
[08:07:41.150] | : globals: [0] 
[08:07:41.150] | : packages: [0] 
[08:07:41.150] | getGlobalsAndPackages() ... done
[08:07:41.150] | run() for ‘Future’ (<unnamed-4>) ...
[08:07:41.150] | : state: ‘created’
[08:07:41.151] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.151] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.151] | : Using SequentialFutureBackend ...
[08:07:41.151] | : . Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:07:41.151] | : . Launching futures ...
[08:07:41.151] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:41.151] | : . ' , getFutureData() ...
[08:07:41.151] | : . ' , ; getFutureCore() ...
[08:07:41.151] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:41.151] | : . ' , ; getFutureCore() ... done
[08:07:41.151] | : . ' , ; getFutureCapture() ...
[08:07:41.152] | : . ' , ; getFutureCapture() ... done
[08:07:41.152] | : . ' , ; getFutureContext() ...
[08:07:41.152] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.152] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:41.152] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.152] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:41.152] | : . ' , ; getFutureContext() ... done
[08:07:41.152] | : . ' , getFutureData() ... done
[08:07:41.153] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.154] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:41.154] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.154] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:41.154] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:41.154] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:41.154] | : . ' , ; ` | New stack:
[08:07:41.154] | : . ' , ; ` | List of 1
[08:07:41.154] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.154] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.154] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:41.154] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.154] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.154] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.154] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:41.154] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.157] | : . ' , ; ` | Old stack:
[08:07:41.157] | : . ' , ; ` | List of 1
[08:07:41.157] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.157] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.157] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:41.157] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.157] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.157] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.157] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:41.157] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.157] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.157] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.157] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.161] | : . ' , ; ` | Not identical
[08:07:41.161] | : . ' , ; ` | all.equal() for future ...
[08:07:41.161] | : . ' , ; ` | : List of 2
[08:07:41.161] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.161] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.161] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:41.161] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.161] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.161] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.161] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:41.161] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.161] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.161] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:41.161] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.161] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.161] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.161] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:41.161] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.161] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.161] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.166] | : . ' , ; ` | all.equal() for future ... done
[08:07:41.166] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:41.166] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:41.166] | : . ' , ; ` List of future strategies:
[08:07:41.166] | : . ' , ; ` 1. sequential:
[08:07:41.166] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:41.166] | : . ' , ; `    - tweaked: FALSE
[08:07:41.166] | : . ' , ; `    - call: plan(sequential)
[08:07:41.167] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:41.167] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:41.168] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:41.168] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:41.169] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:41.169] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:41.169] | : . ' , ; ` | : New stack:
[08:07:41.169] | : . ' , ; ` | : List of 1
[08:07:41.169] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.169] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.169] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:41.169] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.169] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.169] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.169] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:41.169] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.169] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.169] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.169] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.172] | : . ' , ; ` | : Old stack:
[08:07:41.172] | : . ' , ; ` | : List of 1
[08:07:41.172] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.172] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.172] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:41.172] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.172] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.172] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.172] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:41.172] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.172] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.172] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.172] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.175] | : . ' , ; ` | : Identical
[08:07:41.175] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:41.175] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:41.175] | : . ' , ; ` | List of future strategies:
[08:07:41.175] | : . ' , ; ` | 1. sequential:
[08:07:41.175] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:41.175] | : . ' , ; ` |    - tweaked: FALSE
[08:07:41.175] | : . ' , ; ` |    - call: plan(sequential)
[08:07:41.176] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:41.176] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:41.176] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:41.176] | : . ' , SequentialFuture started (and completed)
[08:07:41.176] | : . ' , signalConditions() ...
[08:07:41.176] | : . ' , ; include = ‘immediateCondition’
[08:07:41.176] | : . ' , ; exclude = 
[08:07:41.177] | : . ' , ; resignal = FALSE
[08:07:41.177] | : . ' , ; Number of conditions: 7
[08:07:41.177] | : . ' , ;  int 7
[08:07:41.178] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.178] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.178] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.178] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.178] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.178] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.179] | : . ' , ; Condition #7 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:41.179] | : . ' , signalConditions() ... done
[08:07:41.179] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:41.179] | : . Launching futures ... done
[08:07:41.179] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:41.179] | : Using SequentialFutureBackend ... done
[08:07:41.179] | run() for ‘Future’ (<unnamed-4>) ... done
[08:07:41.179] future(..., label = NULL) ... done

> calls <- backtrace(env[["b"]])
[08:07:41.180] resolved() for SequentialFuture (<unnamed-4>) ...
[08:07:41.180] | state: ‘finished’
[08:07:41.180] | run: TRUE
[08:07:41.180] | result: ‘FutureResult’
[08:07:41.180] resolved() for SequentialFuture (<unnamed-4>) ... done

> print(calls)
[[1]]
future:::testme("backtrace")

[[2]]
source(file.path(path, "run.R"))

[[3]]
withVisible(eval(ei, envir))

[[4]]
eval(ei, envir)

[[5]]
eval(ei, envir)

[[6]]
source(testme[["script"]], echo = TRUE)

[[7]]
withVisible(eval(ei, envir))

[[8]]
eval(ei, envir)

[[9]]
eval(ei, envir)

[[10]]
env[["b"]] %<-% {
    42L
    stop("Woops")
}

[[11]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[12]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[13]]
do.call(future::future, args = future.args, envir = envir)

[[14]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", label = NULL, gc = FALSE, earlySignal = FALSE, 
    ...) 
{
    debug <- isTRUE(getOption("future.debug"))
    if (debug) {
        mdebugf_push("future(..., label = %s) ...", sQuoteLabel(label))
        mdebugf("lazy: %s", lazy)
        mdebugf("stdout: %s", stdout)
        mdebugf("conditions: [n=%d] %s", length(conditions), 
            commaq(conditions))
        mdebugf("gc: %s", gc)
        mdebugf("earlySignal: %s", earlySignal)
        on.exit(mdebugf_pop())
    }
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    onReference <- getOption("future.globals.onReference")
    if (is.null(onReference)) 
        onReference <- "ignore"
    if (!is.null(globals)) {
        gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
            globals = globals, onReference = onReference, maxSize = +Inf)
        expr <- gp[["expr"]]
        globals <- gp[["globals"]]
        if (length(packages) > 0 || length(gp[["packages"]]) > 
            0) {
            packages <- c(gp[["packages"]], packages)
        }
        gp <- NULL
        attr(globals, "already-done") <- TRUE
    }
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, onReference = onReference, ...)
    future[[".defaultLocal"]] <- !is.element("local", names(list(...)))
    if (isTRUE(getOption("future.journal"))) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future[["lazy"]] <- FALSE
        stop_if_not(inherits(future, "Future"), !future[["lazy"]])
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[15]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, onReference = onReference, ...)

[[16]]
eval(expr, envir = globalenv())

[[17]]
eval(expr, envir = globalenv())

[[18]]
local({
    {
        42L
        stop("Woops")
    }
})

[[19]]
eval.parent(substitute(eval(quote(expr), envir)))

[[20]]
eval(expr, p)

[[21]]
eval(expr, p)

[[22]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())

[[23]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())

[[24]]
stop("Woops")

[[25]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())


> stopifnot(is.list(calls))

> lenv <- listenv::listenv()

> lenv[[1]] %<-% {
+     42
+     stop("Woops")
+ }
[08:07:41.181] future(..., label = NULL) ...
[08:07:41.181] | lazy: FALSE
[08:07:41.182] | stdout: TRUE
[08:07:41.182] | conditions: [n=1] ‘condition’
[08:07:41.182] | gc: FALSE
[08:07:41.182] | earlySignal: FALSE
[08:07:41.182] | getGlobalsAndPackages() ...
[08:07:41.182] | : Searching for globals ...
[08:07:41.187] | : . globals found: [2] ‘{’, ‘stop’
[08:07:41.187] | : Searching for globals ... done
[08:07:41.187] | : Resolving globals: FALSE
[08:07:41.187] | : Search for packages associated with the globals ...
[08:07:41.187] | : . Packages associated with globals: [1] ‘base’
[08:07:41.188] | : . Packages: [1] ‘base’
[08:07:41.188] | : Search for packages associated with the globals ... done
[08:07:41.188] | : Packages after dropping 'base': [0] 
[08:07:41.188] | : globals: [0] 
[08:07:41.188] | : packages: [0] 
[08:07:41.188] | getGlobalsAndPackages() ... done
[08:07:41.188] | run() for ‘Future’ (<unnamed-5>) ...
[08:07:41.188] | : state: ‘created’
[08:07:41.189] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.189] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.189] | : Using SequentialFutureBackend ...
[08:07:41.189] | : . Number of futures since start: 4 (4 created, 4 launched, 4 finished)
[08:07:41.189] | : . Launching futures ...
[08:07:41.189] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:41.189] | : . ' , getFutureData() ...
[08:07:41.189] | : . ' , ; getFutureCore() ...
[08:07:41.189] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:41.190] | : . ' , ; getFutureCore() ... done
[08:07:41.190] | : . ' , ; getFutureCapture() ...
[08:07:41.190] | : . ' , ; getFutureCapture() ... done
[08:07:41.190] | : . ' , ; getFutureContext() ...
[08:07:41.190] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.190] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:41.190] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.190] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:41.190] | : . ' , ; getFutureContext() ... done
[08:07:41.190] | : . ' , getFutureData() ... done
[08:07:41.192] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.192] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:41.192] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.192] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:41.192] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:41.192] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:41.192] | : . ' , ; ` | New stack:
[08:07:41.193] | : . ' , ; ` | List of 1
[08:07:41.193] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.193] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.193] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:41.193] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.193] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.193] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.193] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:41.193] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.195] | : . ' , ; ` | Old stack:
[08:07:41.195] | : . ' , ; ` | List of 1
[08:07:41.195] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.195] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.195] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:41.195] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.195] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.195] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.195] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:41.195] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.195] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.195] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.195] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.199] | : . ' , ; ` | Not identical
[08:07:41.199] | : . ' , ; ` | all.equal() for future ...
[08:07:41.199] | : . ' , ; ` | : List of 2
[08:07:41.199] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.199] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.199] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:41.199] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.199] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.199] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.199] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:41.199] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.199] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.199] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:41.199] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.199] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.199] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.199] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:41.199] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.199] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.199] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.204] | : . ' , ; ` | all.equal() for future ... done
[08:07:41.204] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:41.204] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:41.204] | : . ' , ; ` List of future strategies:
[08:07:41.204] | : . ' , ; ` 1. sequential:
[08:07:41.204] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:41.204] | : . ' , ; `    - tweaked: FALSE
[08:07:41.204] | : . ' , ; `    - call: plan(sequential)
[08:07:41.205] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:41.205] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:41.206] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:41.206] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:41.207] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:41.207] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:41.207] | : . ' , ; ` | : New stack:
[08:07:41.207] | : . ' , ; ` | : List of 1
[08:07:41.207] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.207] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.207] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:41.207] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.207] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.207] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.207] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:41.207] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.207] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.207] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.207] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.210] | : . ' , ; ` | : Old stack:
[08:07:41.210] | : . ' , ; ` | : List of 1
[08:07:41.210] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.210] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.210] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:41.210] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.210] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.210] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.210] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:41.210] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.210] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.210] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.210] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.213] | : . ' , ; ` | : Identical
[08:07:41.213] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:41.213] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:41.213] | : . ' , ; ` | List of future strategies:
[08:07:41.213] | : . ' , ; ` | 1. sequential:
[08:07:41.213] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:41.213] | : . ' , ; ` |    - tweaked: FALSE
[08:07:41.213] | : . ' , ; ` |    - call: plan(sequential)
[08:07:41.214] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:41.214] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:41.215] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:41.215] | : . ' , SequentialFuture started (and completed)
[08:07:41.215] | : . ' , signalConditions() ...
[08:07:41.215] | : . ' , ; include = ‘immediateCondition’
[08:07:41.215] | : . ' , ; exclude = 
[08:07:41.215] | : . ' , ; resignal = FALSE
[08:07:41.215] | : . ' , ; Number of conditions: 7
[08:07:41.215] | : . ' , ;  int 7
[08:07:41.216] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.216] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.216] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.216] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.216] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.216] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.216] | : . ' , ; Condition #7 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:41.217] | : . ' , signalConditions() ... done
[08:07:41.217] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:41.217] | : . Launching futures ... done
[08:07:41.217] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:41.217] | : Using SequentialFutureBackend ... done
[08:07:41.217] | run() for ‘Future’ (<unnamed-5>) ... done
[08:07:41.217] future(..., label = NULL) ... done

> lenv[[2]] %<-% {
+     42
+     stop("Woops")
+ }
[08:07:41.218] future(..., label = NULL) ...
[08:07:41.218] | lazy: FALSE
[08:07:41.218] | stdout: TRUE
[08:07:41.218] | conditions: [n=1] ‘condition’
[08:07:41.218] | gc: FALSE
[08:07:41.218] | earlySignal: FALSE
[08:07:41.218] | getGlobalsAndPackages() ...
[08:07:41.218] | : Searching for globals ...
[08:07:41.223] | : . globals found: [2] ‘{’, ‘stop’
[08:07:41.223] | : Searching for globals ... done
[08:07:41.223] | : Resolving globals: FALSE
[08:07:41.223] | : Search for packages associated with the globals ...
[08:07:41.224] | : . Packages associated with globals: [1] ‘base’
[08:07:41.224] | : . Packages: [1] ‘base’
[08:07:41.224] | : Search for packages associated with the globals ... done
[08:07:41.224] | : Packages after dropping 'base': [0] 
[08:07:41.224] | : globals: [0] 
[08:07:41.224] | : packages: [0] 
[08:07:41.224] | getGlobalsAndPackages() ... done
[08:07:41.225] | run() for ‘Future’ (<unnamed-6>) ...
[08:07:41.225] | : state: ‘created’
[08:07:41.225] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.225] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.225] | : Using SequentialFutureBackend ...
[08:07:41.225] | : . Number of futures since start: 5 (5 created, 5 launched, 5 finished)
[08:07:41.225] | : . Launching futures ...
[08:07:41.225] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:41.225] | : . ' , getFutureData() ...
[08:07:41.225] | : . ' , ; getFutureCore() ...
[08:07:41.226] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:41.226] | : . ' , ; getFutureCore() ... done
[08:07:41.226] | : . ' , ; getFutureCapture() ...
[08:07:41.226] | : . ' , ; getFutureCapture() ... done
[08:07:41.226] | : . ' , ; getFutureContext() ...
[08:07:41.226] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.226] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:41.226] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.226] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:41.226] | : . ' , ; getFutureContext() ... done
[08:07:41.227] | : . ' , getFutureData() ... done
[08:07:41.228] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.228] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:41.228] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.228] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:41.228] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:41.228] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:41.229] | : . ' , ; ` | New stack:
[08:07:41.229] | : . ' , ; ` | List of 1
[08:07:41.229] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.229] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.229] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:41.229] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.229] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.229] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.229] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:41.229] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.231] | : . ' , ; ` | Old stack:
[08:07:41.231] | : . ' , ; ` | List of 1
[08:07:41.231] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.231] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.231] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:41.231] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.231] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.231] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.231] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:41.231] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.231] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.231] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.231] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.235] | : . ' , ; ` | Not identical
[08:07:41.235] | : . ' , ; ` | all.equal() for future ...
[08:07:41.235] | : . ' , ; ` | : List of 2
[08:07:41.235] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.235] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.235] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:41.235] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.235] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.235] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.235] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:41.235] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.235] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.235] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:41.235] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.235] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.235] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.235] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:41.235] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.235] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.235] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.240] | : . ' , ; ` | all.equal() for future ... done
[08:07:41.240] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:41.240] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:41.240] | : . ' , ; ` List of future strategies:
[08:07:41.240] | : . ' , ; ` 1. sequential:
[08:07:41.240] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:41.240] | : . ' , ; `    - tweaked: FALSE
[08:07:41.240] | : . ' , ; `    - call: plan(sequential)
[08:07:41.241] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:41.241] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:41.243] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:41.243] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:41.243] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:41.243] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:41.243] | : . ' , ; ` | : New stack:
[08:07:41.243] | : . ' , ; ` | : List of 1
[08:07:41.243] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.243] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.243] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:41.243] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.243] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.243] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.243] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:41.243] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.243] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.243] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.243] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.246] | : . ' , ; ` | : Old stack:
[08:07:41.246] | : . ' , ; ` | : List of 1
[08:07:41.246] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.246] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.246] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:41.246] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.246] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.246] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.246] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:41.246] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.246] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.246] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.246] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.250] | : . ' , ; ` | : Identical
[08:07:41.250] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:41.250] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:41.250] | : . ' , ; ` | List of future strategies:
[08:07:41.250] | : . ' , ; ` | 1. sequential:
[08:07:41.250] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:41.250] | : . ' , ; ` |    - tweaked: FALSE
[08:07:41.250] | : . ' , ; ` |    - call: plan(sequential)
[08:07:41.251] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:41.251] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:41.251] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:41.251] | : . ' , SequentialFuture started (and completed)
[08:07:41.251] | : . ' , signalConditions() ...
[08:07:41.251] | : . ' , ; include = ‘immediateCondition’
[08:07:41.252] | : . ' , ; exclude = 
[08:07:41.252] | : . ' , ; resignal = FALSE
[08:07:41.252] | : . ' , ; Number of conditions: 7
[08:07:41.252] | : . ' , ;  int 7
[08:07:41.252] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.252] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.252] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.253] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.253] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.253] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.253] | : . ' , ; Condition #7 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:41.253] | : . ' , signalConditions() ... done
[08:07:41.253] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:41.253] | : . Launching futures ... done
[08:07:41.253] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:41.253] | : Using SequentialFutureBackend ... done
[08:07:41.253] | run() for ‘Future’ (<unnamed-6>) ... done
[08:07:41.254] future(..., label = NULL) ... done

> calls <- backtrace(lenv[[2]])
[08:07:41.254] resolved() for SequentialFuture (<unnamed-6>) ...
[08:07:41.254] | state: ‘finished’
[08:07:41.254] | run: TRUE
[08:07:41.254] | result: ‘FutureResult’
[08:07:41.254] resolved() for SequentialFuture (<unnamed-6>) ... done

> print(calls)
[[1]]
future:::testme("backtrace")

[[2]]
source(file.path(path, "run.R"))

[[3]]
withVisible(eval(ei, envir))

[[4]]
eval(ei, envir)

[[5]]
eval(ei, envir)

[[6]]
source(testme[["script"]], echo = TRUE)

[[7]]
withVisible(eval(ei, envir))

[[8]]
eval(ei, envir)

[[9]]
eval(ei, envir)

[[10]]
lenv[[2]] %<-% {
    42L
    stop("Woops")
}

[[11]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[12]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[13]]
do.call(future::future, args = future.args, envir = envir)

[[14]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", label = NULL, gc = FALSE, earlySignal = FALSE, 
    ...) 
{
    debug <- isTRUE(getOption("future.debug"))
    if (debug) {
        mdebugf_push("future(..., label = %s) ...", sQuoteLabel(label))
        mdebugf("lazy: %s", lazy)
        mdebugf("stdout: %s", stdout)
        mdebugf("conditions: [n=%d] %s", length(conditions), 
            commaq(conditions))
        mdebugf("gc: %s", gc)
        mdebugf("earlySignal: %s", earlySignal)
        on.exit(mdebugf_pop())
    }
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    onReference <- getOption("future.globals.onReference")
    if (is.null(onReference)) 
        onReference <- "ignore"
    if (!is.null(globals)) {
        gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
            globals = globals, onReference = onReference, maxSize = +Inf)
        expr <- gp[["expr"]]
        globals <- gp[["globals"]]
        if (length(packages) > 0 || length(gp[["packages"]]) > 
            0) {
            packages <- c(gp[["packages"]], packages)
        }
        gp <- NULL
        attr(globals, "already-done") <- TRUE
    }
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, onReference = onReference, ...)
    future[[".defaultLocal"]] <- !is.element("local", names(list(...)))
    if (isTRUE(getOption("future.journal"))) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future[["lazy"]] <- FALSE
        stop_if_not(inherits(future, "Future"), !future[["lazy"]])
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[15]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, onReference = onReference, ...)

[[16]]
eval(expr, envir = globalenv())

[[17]]
eval(expr, envir = globalenv())

[[18]]
local({
    {
        42L
        stop("Woops")
    }
})

[[19]]
eval.parent(substitute(eval(quote(expr), envir)))

[[20]]
eval(expr, p)

[[21]]
eval(expr, p)

[[22]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())

[[23]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())

[[24]]
stop("Woops")

[[25]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())


> stopifnot(is.list(calls))

> ll <- list()

> ll[[1]] <- future({
+     42
+     stop("Woops")
+ })
[08:07:41.255] future(..., label = NULL) ...
[08:07:41.255] | lazy: FALSE
[08:07:41.255] | stdout: TRUE
[08:07:41.255] | conditions: [n=1] ‘condition’
[08:07:41.255] | gc: FALSE
[08:07:41.256] | earlySignal: FALSE
[08:07:41.256] | getGlobalsAndPackages() ...
[08:07:41.256] | : Searching for globals ...
[08:07:41.261] | : . globals found: [2] ‘{’, ‘stop’
[08:07:41.261] | : Searching for globals ... done
[08:07:41.261] | : Resolving globals: FALSE
[08:07:41.261] | : Search for packages associated with the globals ...
[08:07:41.261] | : . Packages associated with globals: [1] ‘base’
[08:07:41.261] | : . Packages: [1] ‘base’
[08:07:41.261] | : Search for packages associated with the globals ... done
[08:07:41.262] | : Packages after dropping 'base': [0] 
[08:07:41.262] | : globals: [0] 
[08:07:41.262] | : packages: [0] 
[08:07:41.262] | getGlobalsAndPackages() ... done
[08:07:41.262] | run() for ‘Future’ (<unnamed-7>) ...
[08:07:41.262] | : state: ‘created’
[08:07:41.262] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.262] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.262] | : Using SequentialFutureBackend ...
[08:07:41.263] | : . Number of futures since start: 6 (6 created, 6 launched, 6 finished)
[08:07:41.263] | : . Launching futures ...
[08:07:41.263] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:41.263] | : . ' , getFutureData() ...
[08:07:41.263] | : . ' , ; getFutureCore() ...
[08:07:41.263] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:41.263] | : . ' , ; getFutureCore() ... done
[08:07:41.263] | : . ' , ; getFutureCapture() ...
[08:07:41.263] | : . ' , ; getFutureCapture() ... done
[08:07:41.263] | : . ' , ; getFutureContext() ...
[08:07:41.264] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.264] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:41.264] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.264] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:41.264] | : . ' , ; getFutureContext() ... done
[08:07:41.264] | : . ' , getFutureData() ... done
[08:07:41.265] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.265] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:41.265] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.266] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:41.266] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:41.266] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:41.266] | : . ' , ; ` | New stack:
[08:07:41.266] | : . ' , ; ` | List of 1
[08:07:41.266] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.266] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.266] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:41.266] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.266] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.266] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.266] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:41.266] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.269] | : . ' , ; ` | Old stack:
[08:07:41.269] | : . ' , ; ` | List of 1
[08:07:41.269] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.269] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.269] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:41.269] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.269] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.269] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.269] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:41.269] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.269] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.269] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.269] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.272] | : . ' , ; ` | Not identical
[08:07:41.273] | : . ' , ; ` | all.equal() for future ...
[08:07:41.273] | : . ' , ; ` | : List of 2
[08:07:41.273] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.273] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.273] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:41.273] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.273] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.273] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.273] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:41.273] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.273] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.273] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:41.273] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.273] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.273] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.273] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:41.273] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.273] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.273] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.277] | : . ' , ; ` | all.equal() for future ... done
[08:07:41.278] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:41.278] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:41.278] | : . ' , ; ` List of future strategies:
[08:07:41.278] | : . ' , ; ` 1. sequential:
[08:07:41.278] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:41.278] | : . ' , ; `    - tweaked: FALSE
[08:07:41.278] | : . ' , ; `    - call: plan(sequential)
[08:07:41.278] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:41.278] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:41.280] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:41.280] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:41.280] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:41.280] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:41.280] | : . ' , ; ` | : New stack:
[08:07:41.280] | : . ' , ; ` | : List of 1
[08:07:41.280] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.280] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.280] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:41.280] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.280] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.280] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.280] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:41.280] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.280] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.280] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.280] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.283] | : . ' , ; ` | : Old stack:
[08:07:41.284] | : . ' , ; ` | : List of 1
[08:07:41.284] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.284] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.284] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:41.284] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.284] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.284] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.284] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:41.284] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.284] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.284] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.284] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.287] | : . ' , ; ` | : Identical
[08:07:41.287] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:41.288] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:41.288] | : . ' , ; ` | List of future strategies:
[08:07:41.288] | : . ' , ; ` | 1. sequential:
[08:07:41.288] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:41.288] | : . ' , ; ` |    - tweaked: FALSE
[08:07:41.288] | : . ' , ; ` |    - call: plan(sequential)
[08:07:41.288] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:41.288] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:41.288] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:41.289] | : . ' , SequentialFuture started (and completed)
[08:07:41.289] | : . ' , signalConditions() ...
[08:07:41.289] | : . ' , ; include = ‘immediateCondition’
[08:07:41.289] | : . ' , ; exclude = 
[08:07:41.289] | : . ' , ; resignal = FALSE
[08:07:41.289] | : . ' , ; Number of conditions: 7
[08:07:41.289] | : . ' , ;  int 7
[08:07:41.290] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.290] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.290] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.290] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.290] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.290] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.290] | : . ' , ; Condition #7 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:41.290] | : . ' , signalConditions() ... done
[08:07:41.290] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:41.290] | : . Launching futures ... done
[08:07:41.291] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:41.291] | : Using SequentialFutureBackend ... done
[08:07:41.291] | run() for ‘Future’ (<unnamed-7>) ... done
[08:07:41.291] future(..., label = NULL) ... done

> ll[[2]] <- future({
+     42
+     stop("Woops")
+ })
[08:07:41.291] future(..., label = NULL) ...
[08:07:41.291] | lazy: FALSE
[08:07:41.291] | stdout: TRUE
[08:07:41.291] | conditions: [n=1] ‘condition’
[08:07:41.291] | gc: FALSE
[08:07:41.291] | earlySignal: FALSE
[08:07:41.292] | getGlobalsAndPackages() ...
[08:07:41.292] | : Searching for globals ...
[08:07:41.297] | : . globals found: [2] ‘{’, ‘stop’
[08:07:41.297] | : Searching for globals ... done
[08:07:41.297] | : Resolving globals: FALSE
[08:07:41.297] | : Search for packages associated with the globals ...
[08:07:41.297] | : . Packages associated with globals: [1] ‘base’
[08:07:41.297] | : . Packages: [1] ‘base’
[08:07:41.297] | : Search for packages associated with the globals ... done
[08:07:41.298] | : Packages after dropping 'base': [0] 
[08:07:41.298] | : globals: [0] 
[08:07:41.298] | : packages: [0] 
[08:07:41.298] | getGlobalsAndPackages() ... done
[08:07:41.298] | run() for ‘Future’ (<unnamed-8>) ...
[08:07:41.298] | : state: ‘created’
[08:07:41.298] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.298] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.298] | : Using SequentialFutureBackend ...
[08:07:41.299] | : . Number of futures since start: 7 (7 created, 7 launched, 7 finished)
[08:07:41.299] | : . Launching futures ...
[08:07:41.299] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:41.299] | : . ' , getFutureData() ...
[08:07:41.299] | : . ' , ; getFutureCore() ...
[08:07:41.299] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:41.299] | : . ' , ; getFutureCore() ... done
[08:07:41.299] | : . ' , ; getFutureCapture() ...
[08:07:41.299] | : . ' , ; getFutureCapture() ... done
[08:07:41.299] | : . ' , ; getFutureContext() ...
[08:07:41.300] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.300] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:41.300] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.300] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:41.300] | : . ' , ; getFutureContext() ... done
[08:07:41.300] | : . ' , getFutureData() ... done
[08:07:41.301] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.301] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:41.302] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.302] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:41.303] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:41.303] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:41.303] | : . ' , ; ` | New stack:
[08:07:41.303] | : . ' , ; ` | List of 1
[08:07:41.303] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.303] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.303] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:41.303] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.303] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.303] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.303] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:41.303] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.305] | : . ' , ; ` | Old stack:
[08:07:41.306] | : . ' , ; ` | List of 1
[08:07:41.306] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.306] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.306] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:41.306] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.306] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.306] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.306] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:41.306] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.306] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.306] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.306] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.308] | : . ' , ; ` | Not identical
[08:07:41.309] | : . ' , ; ` | all.equal() for future ...
[08:07:41.309] | : . ' , ; ` | : List of 2
[08:07:41.309] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.309] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.309] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:41.309] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.309] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.309] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.309] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:41.309] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.309] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.309] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:41.309] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.309] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.309] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.309] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:41.309] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.309] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.309] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.313] | : . ' , ; ` | all.equal() for future ... done
[08:07:41.314] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:41.314] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:41.314] | : . ' , ; ` List of future strategies:
[08:07:41.314] | : . ' , ; ` 1. sequential:
[08:07:41.314] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:41.314] | : . ' , ; `    - tweaked: FALSE
[08:07:41.314] | : . ' , ; `    - call: plan(sequential)
[08:07:41.314] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:41.314] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:41.316] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:41.316] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:41.316] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:41.316] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:41.316] | : . ' , ; ` | : New stack:
[08:07:41.316] | : . ' , ; ` | : List of 1
[08:07:41.316] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.316] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.316] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:41.316] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.316] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.316] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.316] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:41.316] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.316] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.316] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.316] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.320] | : . ' , ; ` | : Old stack:
[08:07:41.320] | : . ' , ; ` | : List of 1
[08:07:41.320] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.320] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.320] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:41.320] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.320] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.320] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.320] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:41.320] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.320] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.320] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.320] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.323] | : . ' , ; ` | : Identical
[08:07:41.323] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:41.324] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:41.324] | : . ' , ; ` | List of future strategies:
[08:07:41.324] | : . ' , ; ` | 1. sequential:
[08:07:41.324] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:41.324] | : . ' , ; ` |    - tweaked: FALSE
[08:07:41.324] | : . ' , ; ` |    - call: plan(sequential)
[08:07:41.324] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:41.324] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:41.324] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:41.324] | : . ' , SequentialFuture started (and completed)
[08:07:41.325] | : . ' , signalConditions() ...
[08:07:41.325] | : . ' , ; include = ‘immediateCondition’
[08:07:41.325] | : . ' , ; exclude = 
[08:07:41.325] | : . ' , ; resignal = FALSE
[08:07:41.325] | : . ' , ; Number of conditions: 7
[08:07:41.325] | : . ' , ;  int 7
[08:07:41.325] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.326] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.326] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.326] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.326] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.326] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.326] | : . ' , ; Condition #7 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:41.326] | : . ' , signalConditions() ... done
[08:07:41.326] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:41.326] | : . Launching futures ... done
[08:07:41.326] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:41.327] | : Using SequentialFutureBackend ... done
[08:07:41.327] | run() for ‘Future’ (<unnamed-8>) ... done
[08:07:41.327] future(..., label = NULL) ... done

> vs <- value(ll, signal = FALSE)
[08:07:41.327] value() for list ...
[08:07:41.327] | recursive: 0
[08:07:41.328] | reduce: FALSE
[08:07:41.328] | length: 2

[08:07:41.328] | Number of remaining objects: 2
[08:07:41.328] | checking value #1:
[08:07:41.328] | 'obj' is SequentialFuture
[08:07:41.328] | resolved() for SequentialFuture (<unnamed-7>) ...
[08:07:41.329] | : state: ‘finished’
[08:07:41.329] | : run: TRUE
[08:07:41.329] | : result: ‘FutureResult’
[08:07:41.329] | resolved() for SequentialFuture (<unnamed-7>) ... done
[08:07:41.329] | SequentialFuture #1
[08:07:41.329] | signalConditionsASAP(SequentialFuture, pos=1) ...
[08:07:41.329] | : nx: 2
[08:07:41.329] | : relay: TRUE
[08:07:41.329] | : stdout: TRUE
[08:07:41.329] | : signal: FALSE
[08:07:41.329] | : resignal: FALSE
[08:07:41.329] | : force: TRUE
[08:07:41.330] | : relayed: [n=2] FALSE, FALSE
[08:07:41.330] | : queued futures: [n=2] FALSE, FALSE
[08:07:41.330] | : until=1
[08:07:41.330] | : relaying element #1
[08:07:41.330] | : value() for SequentialFuture (<unnamed-7>) ...
[08:07:41.330] | : . signalConditions() ...
[08:07:41.330] | : . ' include = ‘immediateCondition’
[08:07:41.330] | : . ' exclude = 
[08:07:41.330] | : . ' resignal = FALSE
[08:07:41.330] | : . ' Number of conditions: 7
[08:07:41.331] | : . '  int 7
[08:07:41.331] | : . ' Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.331] | : . ' Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.331] | : . ' Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.331] | : . ' Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.331] | : . ' Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.331] | : . ' Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.332] | : . ' Condition #7 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:41.332] | : . signalConditions() ... done
[08:07:41.332] | : . relay stdout ...
[08:07:41.332] | : . relay stdout ... done
[08:07:41.332] | : . check for misuse ...
[08:07:41.332] | : . check for misuse ... done
[08:07:41.332] | : value() for SequentialFuture (<unnamed-7>) ... done
[08:07:41.332] | : relayed: [n=2] TRUE, FALSE
[08:07:41.332] | : queued futures: [n=2] TRUE, FALSE
[08:07:41.332] | signalConditionsASAP(SequentialFuture, pos=1) ... done
[08:07:41.333] | value(<SequentialFuture>, ...) ...
[08:07:41.333] | value(<SequentialFuture>, ...) ... done
[08:07:41.333] | value() for SequentialFuture (<unnamed-7>) ...
[08:07:41.333] | : signalConditions() ...
[08:07:41.333] | : . include = ‘immediateCondition’
[08:07:41.333] | : . exclude = 
[08:07:41.333] | : . resignal = FALSE
[08:07:41.333] | : . Number of conditions: 7
[08:07:41.333] | : .  int 7
[08:07:41.334] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.334] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.334] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.334] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.334] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.334] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.334] | : . Condition #7 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:41.334] | : signalConditions() ... done
[08:07:41.334] | : check for misuse ...
[08:07:41.335] | : check for misuse ... done
[08:07:41.335] | value() for SequentialFuture (<unnamed-7>) ... done
[08:07:41.335] | value: <simpleError>
[08:07:41.335] | signalConditionsASAP(SequentialFuture, pos=1) ...
[08:07:41.335] | : nx: 2
[08:07:41.335] | : relay: TRUE
[08:07:41.335] | : stdout: TRUE
[08:07:41.335] | : signal: FALSE
[08:07:41.335] | : resignal: FALSE
[08:07:41.335] | : force: TRUE
[08:07:41.335] | : relayed: [n=2] TRUE, FALSE
[08:07:41.335] | : queued futures: [n=2] TRUE, FALSE
[08:07:41.336] | : until=2
[08:07:41.336] | : relaying element #2
[08:07:41.336] | : relayed: [n=2] TRUE, FALSE
[08:07:41.336] | : queued futures: [n=2] TRUE, FALSE
[08:07:41.336] | signalConditionsASAP(SequentialFuture, pos=1) ... done
[08:07:41.336] | resolve() for SequentialFuture ...
[08:07:41.336] | resolve() for SequentialFuture ... done
[08:07:41.336] | length: 1 (resolved future 1)
[08:07:41.336] value() for list ... done
[08:07:41.337] checking value #2:
[08:07:41.337] 'obj' is SequentialFuture
[08:07:41.338] resolved() for SequentialFuture (<unnamed-8>) ...
[08:07:41.338] | state: ‘finished’
[08:07:41.338] | run: TRUE
[08:07:41.338] | result: ‘FutureResult’
[08:07:41.338] resolved() for SequentialFuture (<unnamed-8>) ... done
[08:07:41.338] SequentialFuture #2
[08:07:41.338] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:07:41.338] | nx: 2
[08:07:41.338] | relay: TRUE
[08:07:41.338] | stdout: TRUE
[08:07:41.338] | signal: FALSE
[08:07:41.339] | resignal: FALSE
[08:07:41.339] | force: TRUE
[08:07:41.339] | relayed: [n=2] TRUE, FALSE
[08:07:41.339] | queued futures: [n=2] TRUE, FALSE
[08:07:41.339] | until=2
[08:07:41.339] | relaying element #2
[08:07:41.339] | value() for SequentialFuture (<unnamed-8>) ...
[08:07:41.339] | : signalConditions() ...
[08:07:41.339] | : . include = ‘immediateCondition’
[08:07:41.339] | : . exclude = 
[08:07:41.339] | : . resignal = FALSE
[08:07:41.340] | : . Number of conditions: 7
[08:07:41.340] | : .  int 7
[08:07:41.340] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.340] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.340] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.340] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.340] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.341] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.341] | : . Condition #7 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:41.341] | : signalConditions() ... done
[08:07:41.341] | : relay stdout ...
[08:07:41.341] | : relay stdout ... done
[08:07:41.341] | : check for misuse ...
[08:07:41.341] | : check for misuse ... done
[08:07:41.341] | value() for SequentialFuture (<unnamed-8>) ... done
[08:07:41.341] | relayed: [n=2] TRUE, TRUE
[08:07:41.341] | queued futures: [n=2] TRUE, TRUE
[08:07:41.341] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:07:41.342] value(<SequentialFuture>, ...) ...
[08:07:41.342] value(<SequentialFuture>, ...) ... done
[08:07:41.342] value() for SequentialFuture (<unnamed-8>) ...
[08:07:41.342] | signalConditions() ...
[08:07:41.342] | : include = ‘immediateCondition’
[08:07:41.342] | : exclude = 
[08:07:41.342] | : resignal = FALSE
[08:07:41.342] | : Number of conditions: 7
[08:07:41.342] | :  int 7
[08:07:41.343] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.343] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.343] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.343] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.343] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.343] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.343] | : Condition #7 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:41.343] | signalConditions() ... done
[08:07:41.344] | check for misuse ...
[08:07:41.344] | check for misuse ... done
[08:07:41.344] value() for SequentialFuture (<unnamed-8>) ... done
[08:07:41.344] value: <simpleError>
[08:07:41.344] signalConditionsASAP(SequentialFuture, pos=2) ...
[08:07:41.344] | nx: 2
[08:07:41.344] | relay: TRUE
[08:07:41.344] | stdout: TRUE
[08:07:41.344] | signal: FALSE
[08:07:41.344] | resignal: FALSE
[08:07:41.344] | force: TRUE
[08:07:41.344] | relayed: [n=2] TRUE, TRUE
[08:07:41.345] | queued futures: [n=2] TRUE, TRUE
[08:07:41.345] | until=2
[08:07:41.345] | relayed: [n=2] TRUE, TRUE
[08:07:41.345] | queued futures: [n=2] TRUE, TRUE
[08:07:41.345] signalConditionsASAP(SequentialFuture, pos=2) ... done
[08:07:41.345] resolve() for SequentialFuture ...
[08:07:41.345] resolve() for SequentialFuture ... done
[08:07:41.345] length: 0 (resolved future 2)

[08:07:41.345] Relaying remaining futures ...
[08:07:41.345] | signalConditionsASAP(NULL, pos=0) ...
[08:07:41.346] | : nx: 2
[08:07:41.346] | : relay: TRUE
[08:07:41.346] | : stdout: TRUE
[08:07:41.346] | : signal: FALSE
[08:07:41.346] | : resignal: FALSE
[08:07:41.346] | : force: TRUE
[08:07:41.346] | : relayed: [n=2] TRUE, TRUE
[08:07:41.346] | : queued futures: [n=2] TRUE, TRUE
 - flush all
[08:07:41.346] | : relayed: [n=2] TRUE, TRUE
[08:07:41.346] | : queued futures: [n=2] TRUE, TRUE
[08:07:41.346] | signalConditionsASAP(NULL, pos=0) ... done
[08:07:41.347] Relaying remaining futures ... done


> calls <- backtrace(ll[[2]])
[08:07:41.347] resolved() for SequentialFuture (<unnamed-8>) ...
[08:07:41.347] | state: ‘finished’
[08:07:41.347] | run: TRUE
[08:07:41.347] | result: ‘FutureResult’
[08:07:41.347] resolved() for SequentialFuture (<unnamed-8>) ... done

> print(calls)
[[1]]
future:::testme("backtrace")

[[2]]
source(file.path(path, "run.R"))

[[3]]
withVisible(eval(ei, envir))

[[4]]
eval(ei, envir)

[[5]]
eval(ei, envir)

[[6]]
source(testme[["script"]], echo = TRUE)

[[7]]
withVisible(eval(ei, envir))

[[8]]
eval(ei, envir)

[[9]]
eval(ei, envir)

[[10]]
future({
    42L
    stop("Woops")
})

[[11]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, onReference = onReference, ...)

[[12]]
eval(expr, envir = globalenv())

[[13]]
eval(expr, envir = globalenv())

[[14]]
local({
    {
        42L
        stop("Woops")
    }
})

[[15]]
eval.parent(substitute(eval(quote(expr), envir)))

[[16]]
eval(expr, p)

[[17]]
eval(expr, p)

[[18]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())

[[19]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())

[[20]]
stop("Woops")

[[21]]
eval(quote({
    {
        42L
        stop("Woops")
    }
}), new.env())


> stopifnot(is.list(calls))

> message("*** backtrace( ) - subsetting ... DONE")
*** backtrace( ) - subsetting ... DONE

> message("*** backtrace( ) - exceptions ...")
*** backtrace( ) - exceptions ...

> message("- No condition ...")
- No condition ...

> f <- future(42)
[08:07:41.348] future(..., label = NULL) ...
[08:07:41.348] | lazy: FALSE
[08:07:41.348] | stdout: TRUE
[08:07:41.348] | conditions: [n=1] ‘condition’
[08:07:41.349] | gc: FALSE
[08:07:41.349] | earlySignal: FALSE
[08:07:41.349] | getGlobalsAndPackages() ...
[08:07:41.349] | : Searching for globals ...
[08:07:41.350] | : . globals found: [0] 
[08:07:41.350] | : Searching for globals ... done
[08:07:41.350] | : globals: [0] <none>
[08:07:41.350] | : packages: [0] <none>
[08:07:41.350] | getGlobalsAndPackages() ... done
[08:07:41.351] | run() for ‘Future’ (<unnamed-9>) ...
[08:07:41.351] | : state: ‘created’
[08:07:41.351] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.351] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.351] | : Using SequentialFutureBackend ...
[08:07:41.351] | : . Number of futures since start: 8 (8 created, 8 launched, 8 finished)
[08:07:41.351] | : . Launching futures ...
[08:07:41.351] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:41.351] | : . ' , getFutureData() ...
[08:07:41.352] | : . ' , ; getFutureCore() ...
[08:07:41.352] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:41.352] | : . ' , ; getFutureCore() ... done
[08:07:41.352] | : . ' , ; getFutureCapture() ...
[08:07:41.352] | : . ' , ; getFutureCapture() ... done
[08:07:41.352] | : . ' , ; getFutureContext() ...
[08:07:41.352] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.352] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:41.352] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.352] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:41.353] | : . ' , ; getFutureContext() ... done
[08:07:41.353] | : . ' , getFutureData() ... done
[08:07:41.354] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.354] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:41.354] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.381] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:41.381] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:41.382] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:41.382] | : . ' , ; ` | New stack:
[08:07:41.382] | : . ' , ; ` | List of 1
[08:07:41.382] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.382] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.382] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:41.382] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.382] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.382] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.382] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:41.382] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.385] | : . ' , ; ` | Old stack:
[08:07:41.385] | : . ' , ; ` | List of 1
[08:07:41.385] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.385] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.385] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:41.385] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.385] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.385] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.385] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:41.385] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.385] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.385] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.385] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.388] | : . ' , ; ` | Not identical
[08:07:41.388] | : . ' , ; ` | all.equal() for future ...
[08:07:41.388] | : . ' , ; ` | : List of 2
[08:07:41.388] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.388] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.388] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:41.388] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.388] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.388] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.388] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:41.388] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.388] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.388] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:41.388] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.388] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.388] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.388] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:41.388] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.388] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.388] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.393] | : . ' , ; ` | all.equal() for future ... done
[08:07:41.393] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:41.393] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:41.394] | : . ' , ; ` List of future strategies:
[08:07:41.394] | : . ' , ; ` 1. sequential:
[08:07:41.394] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:41.394] | : . ' , ; `    - tweaked: FALSE
[08:07:41.394] | : . ' , ; `    - call: plan(sequential)
[08:07:41.394] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:41.394] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:41.396] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:41.396] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:41.396] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:41.396] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:41.396] | : . ' , ; ` | : New stack:
[08:07:41.396] | : . ' , ; ` | : List of 1
[08:07:41.396] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.396] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.396] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:41.396] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.396] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.396] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.396] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:41.396] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.396] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.396] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.396] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.399] | : . ' , ; ` | : Old stack:
[08:07:41.399] | : . ' , ; ` | : List of 1
[08:07:41.399] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.399] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.399] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:41.399] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.399] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.399] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.399] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:41.399] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.399] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.399] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.399] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.403] | : . ' , ; ` | : Identical
[08:07:41.403] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:41.404] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:41.404] | : . ' , ; ` | List of future strategies:
[08:07:41.404] | : . ' , ; ` | 1. sequential:
[08:07:41.404] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:41.404] | : . ' , ; ` |    - tweaked: FALSE
[08:07:41.404] | : . ' , ; ` |    - call: plan(sequential)
[08:07:41.404] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:41.404] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:41.404] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:41.405] | : . ' , SequentialFuture started (and completed)
[08:07:41.405] | : . ' , signalConditions() ...
[08:07:41.405] | : . ' , ; include = ‘immediateCondition’
[08:07:41.405] | : . ' , ; exclude = 
[08:07:41.405] | : . ' , ; resignal = FALSE
[08:07:41.405] | : . ' , ; Number of conditions: 6
[08:07:41.405] | : . ' , ;  int 6
[08:07:41.406] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.406] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.406] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.406] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.406] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.406] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.406] | : . ' , signalConditions() ... done
[08:07:41.406] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:41.406] | : . Launching futures ... done
[08:07:41.407] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:41.407] | : Using SequentialFutureBackend ... done
[08:07:41.407] | run() for ‘Future’ (<unnamed-9>) ... done
[08:07:41.407] future(..., label = NULL) ... done

> res <- tryCatch(backtrace(f), error = identity)
[08:07:41.407] resolved() for SequentialFuture (<unnamed-9>) ...
[08:07:41.407] | state: ‘finished’
[08:07:41.407] | run: TRUE
[08:07:41.407] | result: ‘FutureResult’
[08:07:41.408] resolved() for SequentialFuture (<unnamed-9>) ... done

> print(res)
<simpleError: No error was caught for this future: ‘f’>

> stopifnot(inherits(res, "error"))

> message("- No call stack ...")
- No call stack ...

> f <- future({
+     42
+     stop("Woops")
+ })
[08:07:41.408] future(..., label = NULL) ...
[08:07:41.408] | lazy: FALSE
[08:07:41.408] | stdout: TRUE
[08:07:41.408] | conditions: [n=1] ‘condition’
[08:07:41.408] | gc: FALSE
[08:07:41.409] | earlySignal: FALSE
[08:07:41.409] | getGlobalsAndPackages() ...
[08:07:41.409] | : Searching for globals ...
[08:07:41.414] | : . globals found: [2] ‘{’, ‘stop’
[08:07:41.414] | : Searching for globals ... done
[08:07:41.414] | : Resolving globals: FALSE
[08:07:41.415] | : Search for packages associated with the globals ...
[08:07:41.415] | : . Packages associated with globals: [1] ‘base’
[08:07:41.415] | : . Packages: [1] ‘base’
[08:07:41.415] | : Search for packages associated with the globals ... done
[08:07:41.415] | : Packages after dropping 'base': [0] 
[08:07:41.415] | : globals: [0] 
[08:07:41.415] | : packages: [0] 
[08:07:41.415] | getGlobalsAndPackages() ... done
[08:07:41.416] | run() for ‘Future’ (<unnamed-10>) ...
[08:07:41.416] | : state: ‘created’
[08:07:41.416] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.416] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.416] | : Using SequentialFutureBackend ...
[08:07:41.416] | : . Number of futures since start: 9 (9 created, 9 launched, 9 finished)
[08:07:41.416] | : . Launching futures ...
[08:07:41.416] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:07:41.417] | : . ' , getFutureData() ...
[08:07:41.417] | : . ' , ; getFutureCore() ...
[08:07:41.417] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:07:41.417] | : . ' , ; getFutureCore() ... done
[08:07:41.417] | : . ' , ; getFutureCapture() ...
[08:07:41.417] | : . ' , ; getFutureCapture() ... done
[08:07:41.417] | : . ' , ; getFutureContext() ...
[08:07:41.417] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.417] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:07:41.417] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.418] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:07:41.418] | : . ' , ; getFutureContext() ... done
[08:07:41.418] | : . ' , getFutureData() ... done
[08:07:41.419] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.419] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:41.419] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.419] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:41.420] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:41.420] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:07:41.420] | : . ' , ; ` | New stack:
[08:07:41.421] | : . ' , ; ` | List of 1
[08:07:41.421] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.421] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.421] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:07:41.421] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.421] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.421] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.421] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:41.421] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.423] | : . ' , ; ` | Old stack:
[08:07:41.423] | : . ' , ; ` | List of 1
[08:07:41.423] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.423] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.423] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:07:41.423] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.423] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.423] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.423] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:07:41.423] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.423] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.423] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.423] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.426] | : . ' , ; ` | Not identical
[08:07:41.426] | : . ' , ; ` | all.equal() for future ...
[08:07:41.426] | : . ' , ; ` | : List of 2
[08:07:41.426] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.426] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.426] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:07:41.426] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.426] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.426] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.426] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:07:41.426] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.426] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.426] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:41.426] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.426] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.426] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.426] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:41.426] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.426] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.426] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.431] | : . ' , ; ` | all.equal() for future ... done
[08:07:41.431] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:07:41.432] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:41.432] | : . ' , ; ` List of future strategies:
[08:07:41.432] | : . ' , ; ` 1. sequential:
[08:07:41.432] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:41.432] | : . ' , ; `    - tweaked: FALSE
[08:07:41.432] | : . ' , ; `    - call: plan(sequential)
[08:07:41.432] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:41.432] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:41.434] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:41.434] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:07:41.434] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:07:41.434] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:07:41.434] | : . ' , ; ` | : New stack:
[08:07:41.434] | : . ' , ; ` | : List of 1
[08:07:41.434] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.434] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.434] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:41.434] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.434] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.434] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.434] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:41.434] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.434] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.434] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.434] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.437] | : . ' , ; ` | : Old stack:
[08:07:41.438] | : . ' , ; ` | : List of 1
[08:07:41.438] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.438] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.438] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:07:41.438] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.438] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.438] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.438] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:07:41.438] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.438] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.438] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.438] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.441] | : . ' , ; ` | : Identical
[08:07:41.441] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:07:41.442] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:07:41.442] | : . ' , ; ` | List of future strategies:
[08:07:41.442] | : . ' , ; ` | 1. sequential:
[08:07:41.442] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:07:41.442] | : . ' , ; ` |    - tweaked: FALSE
[08:07:41.442] | : . ' , ; ` |    - call: plan(sequential)
[08:07:41.442] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:07:41.442] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:41.442] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:07:41.442] | : . ' , SequentialFuture started (and completed)
[08:07:41.443] | : . ' , signalConditions() ...
[08:07:41.443] | : . ' , ; include = ‘immediateCondition’
[08:07:41.443] | : . ' , ; exclude = 
[08:07:41.443] | : . ' , ; resignal = FALSE
[08:07:41.443] | : . ' , ; Number of conditions: 7
[08:07:41.443] | : . ' , ;  int 7
[08:07:41.443] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.444] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.444] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.444] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.444] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.444] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.444] | : . ' , ; Condition #7 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:41.444] | : . ' , signalConditions() ... done
[08:07:41.444] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:07:41.444] | : . Launching futures ... done
[08:07:41.445] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:07:41.445] | : Using SequentialFutureBackend ... done
[08:07:41.445] | run() for ‘Future’ (<unnamed-10>) ... done
[08:07:41.445] future(..., label = NULL) ... done

> v <- value(f, signal = FALSE)
[08:07:41.445] value() for SequentialFuture (<unnamed-10>) ...
[08:07:41.445] | signalConditions() ...
[08:07:41.445] | : include = ‘immediateCondition’
[08:07:41.445] | : exclude = 
[08:07:41.445] | : resignal = FALSE
[08:07:41.445] | : Number of conditions: 7
[08:07:41.446] | :  int 7
[08:07:41.446] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.446] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.446] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.446] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.446] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.446] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:07:41.447] | : Condition #7 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:41.447] | signalConditions() ... done
[08:07:41.447] | relay stdout ...
[08:07:41.447] | relay stdout ... done
[08:07:41.447] | check for misuse ...
[08:07:41.447] | check for misuse ... done
[08:07:41.447] value() for SequentialFuture (<unnamed-10>) ... done

> if (availableCores() >= 2) {
+     message("- Non-resolved future ...")
+     plan(multisession, workers = 2)
+     message("- plan set")
+     f <- .... [TRUNCATED] 
- Non-resolved future ...
[08:07:41.449] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.450] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:07:41.450] | : all.equal() for FutureStrategyList ...
[08:07:41.450] | : . New stack:
[08:07:41.450] | : . List of 1
[08:07:41.450] | : .  $ :function (..., workers = 2L, envir = parent.frame())  
[08:07:41.450] | : .   ..- attr(*, "class")= chr [1:6] "tweaked" "multisession" "cluster" "multiprocess" ...
[08:07:41.450] | : .   ..- attr(*, "init")= logi TRUE
[08:07:41.450] | : .   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:07:41.450] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:07:41.450] | : .   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:41.450] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:41.450] | : .   ..- attr(*, "untweakable")= chr "persistent"
[08:07:41.450] | : .   ..- attr(*, "tweaks")=List of 1
[08:07:41.450] | : .   .. ..$ workers: int 2
[08:07:41.450] | : .   ..- attr(*, "call")= language plan(multisession, workers = 2L)
[08:07:41.450] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.453] | : . Old stack:
[08:07:41.453] | : . List of 1
[08:07:41.453] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.453] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.453] | : .   ..- attr(*, "init")= chr "done"
[08:07:41.453] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.453] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.453] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.453] | : .   ..- attr(*, "call")= language plan(sequential)
[08:07:41.453] | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.453] | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.453] | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.453] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.456] | : . Not identical
[08:07:41.456] | : . all.equal() for future ...
[08:07:41.456] | : . ' List of 2
[08:07:41.456] | : . '  $ target :function (..., workers = 2L, envir = parent.frame())  
[08:07:41.456] | : . '   ..- attr(*, "class")= chr [1:6] "tweaked" "multisession" "cluster" "multiprocess" ...
[08:07:41.456] | : . '   ..- attr(*, "init")= logi TRUE
[08:07:41.456] | : . '   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:07:41.456] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:07:41.456] | : . '   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:41.456] | : . '   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:41.456] | : . '   ..- attr(*, "untweakable")= chr "persistent"
[08:07:41.456] | : . '   ..- attr(*, "tweaks")=List of 1
[08:07:41.456] | : . '   .. ..$ workers: int 2
[08:07:41.456] | : . '   ..- attr(*, "call")= language plan(multisession, workers = 2L)
[08:07:41.456] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:07:41.456] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:07:41.456] | : . '   ..- attr(*, "init")= chr "done"
[08:07:41.456] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.456] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.456] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.456] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:07:41.456] | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x563b54587898> 
[08:07:41.456] | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:07:41.456] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:07:41.463] | : . ' Formals differ
[08:07:41.463] | : . all.equal() for future ... done
[08:07:41.463] | : . Future strategies differ at level 1
[08:07:41.463] | : all.equal() for FutureStrategyList ... done
[08:07:41.463] | : plan(): Setting new future backend stack:
[08:07:41.463] | : List of future strategies:
[08:07:41.463] | : 1. multisession:
[08:07:41.463] | :    - args: function (..., workers = 2L, envir = parent.frame())
[08:07:41.463] | :    - tweaked: TRUE
[08:07:41.463] | :    - call: plan(multisession, workers = 2L)
[08:07:41.464] | : List of 1
[08:07:41.464] | :  $ :function (..., workers = 2L, envir = parent.frame())  
[08:07:41.464] | :   ..- attr(*, "class")= chr [1:6] "tweaked" "multisession" "cluster" "multiprocess" ...
[08:07:41.464] | :   ..- attr(*, "init")= logi TRUE
[08:07:41.464] | :   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:07:41.464] | :     gc = FALSE, earlySignal = FALSE, ...)  
[08:07:41.464] | :   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:41.464] | :   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:41.464] | :   ..- attr(*, "untweakable")= chr "persistent"
[08:07:41.464] | :   ..- attr(*, "tweaks")=List of 1
[08:07:41.464] | :   .. ..$ workers: int 2
[08:07:41.464] | :   ..- attr(*, "call")= language plan(multisession, workers = 2L)
[08:07:41.464] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:07:41.467] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:07:41.467] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.467] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:07:41.467] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.467] | : . Legacy shutdown of cluster workers ...
[08:07:41.468] | : . ' Stopping existing cluster ...
[08:07:41.468] | : . ' , No pre-existing cluster. Skipping
[08:07:41.468] | : . ' Stopping existing cluster ... done
[08:07:41.468] | : . Legacy shutdown of cluster workers ... done
[08:07:41.468] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:07:41.468] | : plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:07:41.468] | : . function (..., workers = 2L, envir = parent.frame())  
[08:07:41.468] | : .  - attr(*, "class")= chr [1:6] "tweaked" "multisession" "cluster" "multiprocess" ...
[08:07:41.468] | : .  - attr(*, "init")= logi TRUE
[08:07:41.468] | : .  - attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:07:41.468] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:07:41.468] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:41.468] | : .  - attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:07:41.468] | : .  - attr(*, "untweakable")= chr "persistent"
[08:07:41.468] | : .  - attr(*, "tweaks")=List of 1
[08:07:41.468] | : .   ..$ workers: int 2
[08:07:41.468] | : .  - attr(*, "call")= language plan(multisession, workers = 2L)
[08:07:41.471] | : . init: TRUE
[08:07:41.471] | : . makeFutureBackend(<tweaked>) ...
[08:07:41.471] | : . ' Backend function: <‘NULL’>
[08:07:41.471] | : . ' Evaluator tweak arguments: [n=1]
[08:07:41.471] | : . ' List of 1
[08:07:41.471] | : . '  $ workers: int 2
[08:07:41.472] | : . ' Evaluator formal arguments: [n=1]
[08:07:41.472] | : . ' List of 1
[08:07:41.472] | : . '  $ workers: int 2
[08:07:41.473] | : . ' Backend factory arguments: [n=1]
[08:07:41.473] | : . ' Dotted pair list of 1
[08:07:41.473] | : . '  $ workers: int 2
[08:07:41.473] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ...
[08:07:41.473] | : . ' , Arguments:
[08:07:41.473] | : . ' , List of 5
[08:07:41.473] | : . ' ,  $ workers     : int 2
[08:07:41.473] | : . ' ,  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:07:41.473] | : . ' ,  $ interrupts  : logi TRUE
[08:07:41.473] | : . ' ,  $ gc          : logi FALSE
[08:07:41.473] | : . ' ,  $ earlySignal : logi FALSE
[08:07:41.475] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ...
[08:07:41.475] | : . ' , ; workers: 2
[08:07:41.476] | : . ' , ; getCluster() ...
[08:07:41.476] | : . ' , ; getCluster() ... done
[08:07:41.476] | : . ' , ; Stopping existing cluster ...
[08:07:41.476] | : . ' , ; ` No pre-existing cluster. Skipping
[08:07:41.476] | : . ' , ; Stopping existing cluster ... done
[08:07:41.476] | : . ' , ; Starting new cluster ...
[08:07:41.476] | : . ' , ; ` makeCluster(workers, ...) ...
[08:07:41.476] | : . ' , ; ` | Arguments:
[08:07:41.476] | : . ' , ; ` | List of 2
[08:07:41.476] | : . ' , ; ` |  $             : int 2
[08:07:41.476] | : . ' , ; ` |  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:07:41.478] | : . ' , ; ` | .makeCluster() ...
[08:07:41.478] | : . ' , ; ` | : workers: ‘2’
[08:07:41.478] | : . ' , ; ` | : R_FUTURE_PLAN: NA
[08:07:41.478] | : . ' , ; ` | : parallelly::makeClusterPSOCK() arguments:
[08:07:41.479] | : . ' , ; ` | : List of 2
[08:07:41.479] | : . ' , ; ` | :  $             : int 2
[08:07:41.479] | : . ' , ; ` | :  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:07:41.973] | : . ' , ; ` | : Generated cluster UUID
[08:07:41.974] | : . ' , ; ` | : Cluster UUID: ‘d9a0ae7b24f10c5de0afa6d28a66c732’
[08:07:41.974] | : . ' , ; ` | : Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:07:41.976] | : . ' , ; ` | .makeCluster() ... done
[08:07:41.976] | : . ' , ; ` | Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:07:41.978] | : . ' , ; ` makeCluster(workers, ...) ... done
[08:07:41.978] | : . ' , ; ` Number of workers: 2
[08:07:41.978] | : . ' , ; ` Workers UUID: ‘d9a0ae7b24f10c5de0afa6d28a66c732’
[08:07:41.978] | : . ' , ; Starting new cluster ... done
[08:07:41.978] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ... done
[08:07:41.979] | : . ' , Backend: <‘MultisessionFutureBackend’, ‘ClusterFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:07:41.979] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ... done
[08:07:41.979] | : . makeFutureBackend(<tweaked>) ... done
[08:07:41.979] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.979] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.979] | : . plan(): nbrOfWorkers() = 2
[08:07:41.979] | : plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:07:41.979] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
- plan set
[08:07:41.980] | future(..., label = NULL) ...
[08:07:41.980] | : lazy: FALSE
[08:07:41.980] | : stdout: TRUE
[08:07:41.980] | : conditions: [n=1] ‘condition’
[08:07:41.980] | : gc: FALSE
[08:07:41.980] | : earlySignal: FALSE
[08:07:41.980] | : getGlobalsAndPackages() ...
[08:07:41.980] | : . Searching for globals ...
[08:07:41.988] | : . ' globals found: [3] ‘{’, ‘Sys.sleep’, ‘stop’
[08:07:41.988] | : . Searching for globals ... done
[08:07:41.988] | : . Resolving globals: FALSE
[08:07:41.988] | : . Search for packages associated with the globals ...
[08:07:41.988] | : . ' Packages associated with globals: [1] ‘base’
[08:07:41.989] | : . ' Packages: [1] ‘base’
[08:07:41.989] | : . Search for packages associated with the globals ... done
[08:07:41.989] | : . Packages after dropping 'base': [0] 
[08:07:41.989] | : . globals: [0] 
[08:07:41.989] | : . packages: [0] 
[08:07:41.989] | : getGlobalsAndPackages() ... done
[08:07:41.989] | : run() for ‘Future’ (<unnamed-11>) ...
[08:07:41.990] | : . state: ‘created’
[08:07:41.990] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:41.990] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:41.990] | : . Using MultisessionFutureBackend ...
[08:07:41.990] | : . ' Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:07:41.990] | : . ' Launching futures ...
[08:07:41.991] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:07:41.991] | : . ' , ; Workers: [n=2]
[08:07:41.991] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:07:41.993] | : . ' , ; FutureRegistry: ‘workers-d9a0ae7b24f10c5de0afa6d28a66c732’
[08:07:41.993] | : . ' , ; requestWorker() ...
[08:07:41.993] | : . ' , ; ` requestNode() ...
[08:07:41.993] | : . ' , ; ` | Number of workers: 2
[08:07:41.993] | : . ' , ; ` | Polling for a free worker ...
[08:07:41.993] | : . ' , ; ` | : FutureRegistry('workers-d9a0ae7b24f10c5de0afa6d28a66c732', action = 'list', earlySignal = 0) ...
[08:07:41.993] | : . ' , ; ` | : . Created empty registry ‘workers-d9a0ae7b24f10c5de0afa6d28a66c732’
[08:07:41.994] | : . ' , ; ` | : . Listing all futures
[08:07:41.994] | : . ' , ; ` | : . Number of registered futures: 0
[08:07:41.994] | : . ' , ; ` | : FutureRegistry('workers-d9a0ae7b24f10c5de0afa6d28a66c732', action = 'list', earlySignal = 0) ... done
[08:07:41.994] | : . ' , ; ` | : Total time: 0
[08:07:41.994] | : . ' , ; ` | Polling for a free worker ... done
[08:07:41.994] | : . ' , ; ` | FutureRegistry('workers-d9a0ae7b24f10c5de0afa6d28a66c732', action = 'list', earlySignal = 0) ...
[08:07:41.994] | : . ' , ; ` | : Listing all futures
[08:07:41.994] | : . ' , ; ` | : Number of registered futures: 0
[08:07:41.995] | : . ' , ; ` | FutureRegistry('workers-d9a0ae7b24f10c5de0afa6d28a66c732', action = 'list', earlySignal = 0) ... done
[08:07:41.995] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:07:41.995] | : . ' , ; ` | Index of first available worker: 1
[08:07:41.995] | : . ' , ; ` | Validate that the worker is functional ...
[08:07:42.058] | : . ' , ; ` | : Worker is functional
[08:07:42.058] | : . ' , ; ` | : FutureRegistry('workers-d9a0ae7b24f10c5de0afa6d28a66c732', action = 'list', earlySignal = 0) ...
[08:07:42.058] | : . ' , ; ` | : . Listing all futures
[08:07:42.058] | : . ' , ; ` | : . Number of registered futures: 0
[08:07:42.059] | : . ' , ; ` | : FutureRegistry('workers-d9a0ae7b24f10c5de0afa6d28a66c732', action = 'list', earlySignal = 0) ... done
[08:07:42.059] | : . ' , ; ` | Validate that the worker is functional ... done
[08:07:42.059] | : . ' , ; ` requestNode() ... done
[08:07:42.059] | : . ' , ; ` cluster node index: 1
[08:07:42.059] | : . ' , ; requestWorker() ... done
[08:07:42.059] | : . ' , ; eraseGlobalEnvironment() ...
[08:07:42.060] | : . ' , ; eraseGlobalEnvironment() ... done
[08:07:42.060] | : . ' , ; launchFuture() ...
[08:07:42.060] | : . ' , ; ` cluster node index: 1
[08:07:42.061] | : . ' , ; ` getFutureData() ...
[08:07:42.061] | : . ' , ; ` | getFutureCore() ...
[08:07:42.061] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:07:42.061] | : . ' , ; ` | getFutureCore() ... done
[08:07:42.061] | : . ' , ; ` | getFutureCapture() ...
[08:07:42.061] | : . ' , ; ` | getFutureCapture() ... done
[08:07:42.061] | : . ' , ; ` | getFutureContext() ...
[08:07:42.061] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:07:42.062] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:07:42.062] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:07:42.062] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:07:42.062] | : . ' , ; ` | getFutureContext() ... done
[08:07:42.062] | : . ' , ; ` getFutureData() ... done
[08:07:42.063] | : . ' , ; ` FutureRegistry('workers-d9a0ae7b24f10c5de0afa6d28a66c732', action = 'add', earlySignal = 0) ...
[08:07:42.063] | : . ' , ; ` | Appended future to position #1
[08:07:42.063] | : . ' , ; ` | Number of registered futures: 1
[08:07:42.063] | : . ' , ; ` FutureRegistry('workers-d9a0ae7b24f10c5de0afa6d28a66c732', action = 'add', earlySignal = 0) ... done
[08:07:42.063] | : . ' , ; launchFuture() ... done
[08:07:42.063] | : . ' , ; MultisessionFuture started
[08:07:42.064] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:07:42.064] | : . ' Launching futures ... done
[08:07:42.064] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:07:42.064] | : . Using MultisessionFutureBackend ... done
[08:07:42.064] | : run() for ‘Future’ (<unnamed-11>) ... done
[08:07:42.064] | future(..., label = NULL) ... done
[08:07:42.065] | resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:42.065] | : Cluster node socket connection: index=4, id=402
[08:07:42.066] | : assertValidConnection() ...
[08:07:42.066] | : . cluster node index: 1
[08:07:42.066] | : assertValidConnection() ... done
[08:07:42.077] | : socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:42.077] | resolved() for MultisessionFuture (<unnamed-11>) ... done
<simpleError: No error has been caught because the future is unresolved: ‘f’>
[08:07:42.077] | resolve() for MultisessionFuture ...
[08:07:42.077] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:42.078] | : . Cluster node socket connection: index=4, id=402
[08:07:42.078] | : . assertValidConnection() ...
[08:07:42.078] | : . ' cluster node index: 1
[08:07:42.078] | : . assertValidConnection() ... done
[08:07:42.089] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:42.089] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:42.099] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:42.100] | : . Cluster node socket connection: index=4, id=402
[08:07:42.100] | : . assertValidConnection() ...
[08:07:42.100] | : . ' cluster node index: 1
[08:07:42.100] | : . assertValidConnection() ... done
[08:07:42.111] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:42.111] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:42.121] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:42.121] | : . Cluster node socket connection: index=4, id=402
[08:07:42.122] | : . assertValidConnection() ...
[08:07:42.122] | : . ' cluster node index: 1
[08:07:42.122] | : . assertValidConnection() ... done
[08:07:42.132] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:42.133] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:42.143] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:42.143] | : . Cluster node socket connection: index=4, id=402
[08:07:42.144] | : . assertValidConnection() ...
[08:07:42.144] | : . ' cluster node index: 1
[08:07:42.144] | : . assertValidConnection() ... done
[08:07:42.154] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:42.155] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:42.165] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:42.165] | : . Cluster node socket connection: index=4, id=402
[08:07:42.166] | : . assertValidConnection() ...
[08:07:42.166] | : . ' cluster node index: 1
[08:07:42.166] | : . assertValidConnection() ... done
[08:07:42.176] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:42.176] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:42.187] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:42.187] | : . Cluster node socket connection: index=4, id=402
[08:07:42.187] | : . assertValidConnection() ...
[08:07:42.188] | : . ' cluster node index: 1
[08:07:42.188] | : . assertValidConnection() ... done
[08:07:42.198] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:42.198] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:42.209] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:42.209] | : . Cluster node socket connection: index=4, id=402
[08:07:42.209] | : . assertValidConnection() ...
[08:07:42.209] | : . ' cluster node index: 1
[08:07:42.210] | : . assertValidConnection() ... done
[08:07:42.220] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:42.220] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:42.230] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:42.231] | : . Cluster node socket connection: index=4, id=402
[08:07:42.231] | : . assertValidConnection() ...
[08:07:42.231] | : . ' cluster node index: 1
[08:07:42.232] | : . assertValidConnection() ... done
[08:07:42.242] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:42.242] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:42.252] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:42.253] | : . Cluster node socket connection: index=4, id=402
[08:07:42.253] | : . assertValidConnection() ...
[08:07:42.253] | : . ' cluster node index: 1
[08:07:42.254] | : . assertValidConnection() ... done
[08:07:42.264] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:42.264] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:42.274] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:42.275] | : . Cluster node socket connection: index=4, id=402
[08:07:42.275] | : . assertValidConnection() ...
[08:07:42.275] | : . ' cluster node index: 1
[08:07:42.276] | : . assertValidConnection() ... done
[08:07:42.286] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:42.286] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:42.296] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:42.297] | : . Cluster node socket connection: index=4, id=402
[08:07:42.297] | : . assertValidConnection() ...
[08:07:42.297] | : . ' cluster node index: 1
[08:07:42.297] | : . assertValidConnection() ... done
[08:07:42.308] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:42.308] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:42.318] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:42.319] | : . Cluster node socket connection: index=4, id=402
[08:07:42.319] | : . assertValidConnection() ...
[08:07:42.319] | : . ' cluster node index: 1
[08:07:42.319] | : . assertValidConnection() ... done
[08:07:42.329] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:42.330] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:42.340] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:42.340] | : . Cluster node socket connection: index=4, id=402
[08:07:42.340] | : . assertValidConnection() ...
[08:07:42.341] | : . ' cluster node index: 1
[08:07:42.341] | : . assertValidConnection() ... done
[08:07:42.351] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:42.351] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:42.362] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:42.362] | : . Cluster node socket connection: index=4, id=402
[08:07:42.362] | : . assertValidConnection() ...
[08:07:42.363] | : . ' cluster node index: 1
[08:07:42.363] | : . assertValidConnection() ... done
[08:07:42.373] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:42.373] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:42.384] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:42.384] | : . Cluster node socket connection: index=4, id=402
[08:07:42.384] | : . assertValidConnection() ...
[08:07:42.385] | : . ' cluster node index: 1
[08:07:42.385] | : . assertValidConnection() ... done
[08:07:42.395] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:42.395] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:42.406] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:42.406] | : . Cluster node socket connection: index=4, id=402
[08:07:42.406] | : . assertValidConnection() ...
[08:07:42.406] | : . ' cluster node index: 1
[08:07:42.407] | : . assertValidConnection() ... done
[08:07:42.417] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:42.417] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:42.428] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:42.428] | : . Cluster node socket connection: index=4, id=402
[08:07:42.428] | : . assertValidConnection() ...
[08:07:42.428] | : . ' cluster node index: 1
[08:07:42.429] | : . assertValidConnection() ... done
[08:07:42.439] | : . socketSelect(list(<connection #4 (id=402)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:07:42.439] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:42.450] | : resolved() for MultisessionFuture (<unnamed-11>) ...
[08:07:42.450] | : . Cluster node socket connection: index=4, id=402
[08:07:42.450] | : . assertValidConnection() ...
[08:07:42.450] | : . ' cluster node index: 1
[08:07:42.451] | : . assertValidConnection() ... done
[08:07:42.454] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:07:42.454] | : . ' cluster node index: 1
[08:07:42.454] | : . ' [1] TRUE
[08:07:42.454] | : . ' received data:
[08:07:42.455] | : . ' List of 5
[08:07:42.455] | : . '  $ type   : chr "VALUE"
[08:07:42.455] | : . '  $ value  :List of 16
[08:07:42.455] | : . '   ..$ value              : NULL
[08:07:42.455] | : . '   ..$ visible            : logi TRUE
[08:07:42.455] | : . '   ..$ stdout             : chr ""
[08:07:42.455] | : . '   ..$ conditions         :List of 1
[08:07:42.455] | : . '   .. ..$ :List of 5
[08:07:42.455] | : . '   .. .. ..$ condition:List of 2
[08:07:42.455] | : . '   .. .. .. ..$ message: chr "Woops"
[08:07:42.455] | : . '   .. .. .. ..$ call   : language eval(quote({     { ...
[08:07:42.455] | : . '   .. .. .. ..- attr(*, "class")= chr [1:3] "simpleError" "error" "condition"
[08:07:42.455] | : . '   .. .. ..$ calls    :List of 10
[08:07:42.455] | : . '   .. .. .. ..$ : language eval(expr, envir = globalenv())
[08:07:42.455] | : . '   .. .. .. ..$ : language eval(expr, envir = globalenv())
[08:07:42.455] | : . '   .. .. .. ..$ : language local({     { ...
[08:07:42.455] | : . '   .. .. .. ..$ : language eval.parent(substitute(eval(quote(expr), envir)))
[08:07:42.455] | : . '   .. .. .. ..$ : language eval(expr, p)
[08:07:42.455] | : . '   .. .. .. ..$ : language eval(expr, p)
[08:07:42.455] | : . '   .. .. .. ..$ : language eval(quote({     { ...
[08:07:42.455] | : . '   .. .. .. ..$ : language eval(quote({     { ...
[08:07:42.455] | : . '   .. .. .. ..$ : language stop("Woops")
[08:07:42.455] | : . '   .. .. .. ..$ : language eval(quote({     { ...
[08:07:42.455] | : . '   .. .. ..$ session  :List of 6
[08:07:42.455] | : . '   .. .. .. ..$ r         :List of 14
[08:07:42.455] | : . '   .. .. .. .. ..$ platform      : chr "x86_64-pc-linux-gnu"
[08:07:42.455] | : . '   .. .. .. .. ..$ arch          : chr "x86_64"
[08:07:42.455] | : . '   .. .. .. .. ..$ os            : chr "linux-gnu"
[08:07:42.455] | : . '   .. .. .. .. ..$ system        : chr "x86_64, linux-gnu"
[08:07:42.455] | : . '   .. .. .. .. ..$ status        : chr ""
[08:07:42.455] | : . '   .. .. .. .. ..$ major         : chr "4"
[08:07:42.455] | : . '   .. .. .. .. ..$ minor         : chr "5.0"
[08:07:42.455] | : . '   .. .. .. .. ..$ year          : chr "2025"
[08:07:42.455] | : . '   .. .. .. .. ..$ month         : chr "04"
[08:07:42.455] | : . '   .. .. .. .. ..$ day           : chr "11"
[08:07:42.455] | : . '   .. .. .. .. ..$ svn rev       : chr "88135"
[08:07:42.455] | : . '   .. .. .. .. ..$ language      : chr "R"
[08:07:42.455] | : . '   .. .. .. .. ..$ version.string: chr "R version 4.5.0 (2025-04-11)"
[08:07:42.455] | : . '   .. .. .. .. ..$ nickname      : chr "How About a Twenty-Six"
[08:07:42.455] | : . '   .. .. .. ..$ locale    : chr "LC_CTYPE=en_US.UTF-8;LC_NUMERIC=C;LC_TIME=en_US.UTF-8;LC_COLLATE=en_US.UTF-8;LC_MONETARY=en_US.UTF-8;LC_MESSAGE"| __truncated__
[08:07:42.455] | : . '   .. .. .. ..$ rngkind   : chr [1:3] "Mersenne-Twister" "Inversion" "Rejection"
[08:07:42.455] | : . '   .. .. .. ..$ namespaces: chr [1:16] "compiler" "parallelly" "graphics" "tools" ...
[08:07:42.455] | : . '   .. .. .. ..$ search    : chr [1:10] ".GlobalEnv" "package:future" "package:stats" "package:graphics" ...
[08:07:42.455] | : . '   .. .. .. ..$ system    : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:07:42.455] | : . '   .. .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:07:42.455] | : . '   .. .. ..$ timestamp: POSIXct[1:1], format: "2025-06-17 08:07:42"
[08:07:42.455] | : . '   .. .. ..$ signaled : int 0
[08:07:42.455] | : . '   ..$ rng                : logi FALSE
[08:07:42.455] | : . '   ..$ seed               : NULL
[08:07:42.455] | : . '   ..$ misuseGlobalEnv    : NULL
[08:07:42.455] | : . '   ..$ misuseConnections  :List of 3
[08:07:42.455] | : . '   .. ..$ added   : NULL
[08:07:42.455] | : . '   .. ..$ removed : NULL
[08:07:42.455] | : . '   .. ..$ replaced: NULL
[08:07:42.455] | : . '   ..$ misuseDevices      : NULL
[08:07:42.455] | : . '   ..$ misuseDefaultDevice: list()
[08:07:42.455] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:07:42"
[08:07:42.455] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:07:42"
[08:07:42.455] | : . '   ..$ uuid               : chr [1:2] "2fc0a4c2ce6b6f2c4228ebb2629c32f0" "11"
[08:07:42.455] | : . '   ..$ session_uuid       : chr "2e84779ffc7c320d4644704216981e03"
[08:07:42.455] | : . '   .. ..- attr(*, "source")=List of 5
[08:07:42.455] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:07:42.455] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:07:42.455] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:07:42.455] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:07:42.455] | : . '   .. .. ..$ pid   : int 66688
[08:07:42.455] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:07:42"
[08:07:42.455] | : . '   .. .. ..$ random: int 2147483647
[08:07:42.455] | : . '   ..$ r_info             :List of 4
[08:07:42.455] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:07:42.455] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:07:42.455] | : . '   .. ..$ os           : chr "unix"
[08:07:42.455] | : . '   .. ..$ os_name      : chr "Linux"
[08:07:42.455] | : . '   .. ..$ captures_utf8: logi TRUE
[08:07:42.455] | : . '   ..$ version            : chr "1.8"
[08:07:42.455] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:07:42.455] | : . '  $ success: logi TRUE
[08:07:42.455] | : . '  $ time   : 'proc_time' Named num [1:5] 0.048 0.001 0.35 0 0
[08:07:42.455] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:07:42.455] | : . '  $ tag    : NULL
[08:07:42.482] | : . ' Received FutureResult
[08:07:42.482] | : . ' FutureResult:
[08:07:42.482] | : . ' value: ‘NULL’
[08:07:42.482] | : . ' visible: TRUE
[08:07:42.482] | : . ' stdout: character
[08:07:42.482] | : . ' conditions: [n = 1] simpleError
[08:07:42.482] | : . ' RNG used: FALSE
[08:07:42.482] | : . ' duration: 0.3478415 secs (started 2025-06-17 08:07:42.105263)
[08:07:42.482] | : . ' version: 1.8
[08:07:42.482] | : . ' FutureRegistry('workers-d9a0ae7b24f10c5de0afa6d28a66c732', action = 'remove', earlySignal = 0) ...
[08:07:42.483] | : . ' , Removed future from position #1
[08:07:42.483] | : . ' , Number of registered futures: 0
[08:07:42.483] | : . ' FutureRegistry('workers-d9a0ae7b24f10c5de0afa6d28a66c732', action = 'remove', earlySignal = 0) ... done
[08:07:42.483] | : . ' Erased future from future backend
[08:07:42.483] | : . ' result() for ClusterFuture ...
[08:07:42.483] | : . ' , result already collected: FutureResult
[08:07:42.483] | : . ' result() for ClusterFuture ... done
[08:07:42.483] | : . ' signalConditions() ...
[08:07:42.484] | : . ' , include = ‘immediateCondition’
[08:07:42.484] | : . ' , exclude = 
[08:07:42.484] | : . ' , resignal = FALSE
[08:07:42.484] | : . ' , Number of conditions: 1
[08:07:42.484] | : . ' ,  int 1
[08:07:42.484] | : . ' , Condition #1 (class: ‘simpleError’, ‘error’, ‘condition’):
[08:07:42.484] | : . ' signalConditions() ... done
[08:07:42.485] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:07:42.485] | : . receiveMessageFromWorker() returned object of class FutureResult; resolved
[08:07:42.485] | : resolved() for MultisessionFuture (<unnamed-11>) ... done
[08:07:42.485] | : assertFutureResult() ...
[08:07:42.485] | : . Future uuid: 2fc0a4c2ce6b6f2c4228ebb2629c32f0[08:07:42.485] | : . Future uuid: 11
[08:07:42.485] | : . identical; success
[08:07:42.485] | : assertFutureResult() ... done
[08:07:42.485] | : A MultisessionFuture was resolved (result was not collected)
[08:07:42.485] | resolve() for MultisessionFuture ... done
MultisessionFuture:
Label: <unnamed-11>
Expression:
{
    Sys.sleep(0.3)
    42L
    stop("Woops")
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: 2fc0a4c2ce6b6f2c4228ebb2629c32f0-11
Owner process: 2fc0a4c2ce6b6f2c4228ebb2629c32f0
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
Value: 27 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Duration: 0.3478415 secs (started 2025-06-17 08:07:42.105263)
Worker process: 2e84779ffc7c320d4644704216981e03

> message("*** backtrace( ) - exceptions ... DONE")
*** backtrace( ) - exceptions ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.8s, sys.self=0.02s, elapsed=2s, user.child=0.2s, sys.child=0.3s
Test ‘backtrace’ ... success
> 
