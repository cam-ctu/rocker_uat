
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-relaying.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("relaying")
Test ‘relaying’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-relaying.R’

> library(future)
[08:09:44.822] Option 'future.startup.script': TRUE
[08:09:44.823] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:09:44.823] Future startup scripts found: <none>

> options(future.debug = FALSE)

> message("*** Relaying of standard output and conditions ...")
*** Relaying of standard output and conditions ...

> strategies <- supportedStrategies()

> for (ss in seq_along(strategies)) {
+     strategy <- strategies[[ss]]
+     message(sprintf("Relaying w/ %s ...", names(strategies)[ss]))
+     pla .... [TRUNCATED] 

* A single future ...
- creating future
  class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
- checking if resolved
  result: TRUE
- resolve w/ collecting results
- resolve w/out collecting results
- getting value
O
M
Warning in eval(quote({ : W
  value: 1
- getting value again
O
M
Warning in eval(quote({ : W
  value: 1
- creating future
  class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
- checking if resolved
  result: TRUE
- resolve w/ collecting results
- resolve w/out collecting results
- getting value
O
Warning in eval(quote({ : W
  value: 1
- getting value again
O
Warning in eval(quote({ : W
  value: 1
- creating future
  class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
- checking if resolved
  result: TRUE
- resolve w/ collecting results
- resolve w/out collecting results
- getting value
O
M
  value: 1
- getting value again
O
M
  value: 1
* A single future ... DONE
* Two futures ... 
- list of two futures
  class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
- check if resolved
  result: TRUE, TRUE
- resolve w/ collecting results
List of 2
 $ stdout: chr(0) 
 $ msgs  : list()
- resolve w/out collecting results
List of 2
 $ stdout: chr(0) 
 $ msgs  : list()
- getting value
O1
M1
O2
M2
  values: 1, 2
List of 2
 $ stdout: chr [1:2] "O1\n" "O2\n"
 $ msgs  : chr [1:2] "M1\n" "M2\n"
- getting value again
O1
M1
O2
M2
  values: 1, 2
List of 2
 $ stdout: chr [1:2] "O1\n" "O2\n"
 $ msgs  : chr [1:2] "M1\n" "M2\n"
* Two futures ... DONE
* Two futures - out of order  ... 
- list of two futures
  class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
- getting value
O1
M1
O2
M2
  values: 1, 2
List of 2
 $ stdout: chr [1:2] "O1\n" "O2\n"
 $ msgs  : chr [1:2] "M1\n" "M2\n"
- getting value again
O1
M1
O2
M2
  values: 1, 2
List of 2
 $ stdout: chr [1:2] "O1\n" "O2\n"
 $ msgs  : chr [1:2] "M1\n" "M2\n"
* Two futures - out of order ... DONE
- conditions = structure("condition", drop = TRUE)
42


* A single future ...
- creating future
  class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
- checking if resolved
  result: TRUE
- resolve w/ collecting results
- resolve w/out collecting results
- getting value
O
M
Warning in eval(quote({ : W
  value: 1
- getting value again
O
M
Warning in eval(quote({ : W
  value: 1
- creating future
  class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
- checking if resolved
  result: TRUE
- resolve w/ collecting results
- resolve w/out collecting results
- getting value
O
Warning in eval(quote({ : W
  value: 1
- getting value again
O
Warning in eval(quote({ : W
  value: 1
- creating future
  class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
- checking if resolved
  result: TRUE
- resolve w/ collecting results
- resolve w/out collecting results
- getting value
O
M
  value: 1
- getting value again
O
M
  value: 1
* A single future ... DONE
* Two futures ... 
- list of two futures
  class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
- check if resolved
  result: TRUE, TRUE
- resolve w/ collecting results
List of 2
 $ stdout: chr(0) 
 $ msgs  : list()
- resolve w/out collecting results
List of 2
 $ stdout: chr(0) 
 $ msgs  : list()
- getting value
O1
M1
O2
M2
  values: 1, 2
List of 2
 $ stdout: chr [1:2] "O1\n" "O2\n"
 $ msgs  : chr [1:2] "M1\n" "M2\n"
- getting value again
O1
M1
O2
M2
  values: 1, 2
List of 2
 $ stdout: chr [1:2] "O1\n" "O2\n"
 $ msgs  : chr [1:2] "M1\n" "M2\n"
* Two futures ... DONE
* Two futures - out of order  ... 
- list of two futures
  class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
- getting value
O1
M1
O2
M2
  values: 1, 2
List of 2
 $ stdout: chr [1:2] "O1\n" "O2\n"
 $ msgs  : chr [1:2] "M1\n" "M2\n"
- getting value again
O1
M1
O2
M2
  values: 1, 2
List of 2
 $ stdout: chr [1:2] "O1\n" "O2\n"
 $ msgs  : chr [1:2] "M1\n" "M2\n"
* Two futures - out of order ... DONE
- conditions = structure("condition", drop = TRUE)
42


* A single future ...
- creating future
  class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
- checking if resolved
  result: FALSE
- resolve w/ collecting results
- resolve w/out collecting results
- getting value
O
M
Warning in eval(quote({ : W
  value: 1
- getting value again
O
M
Warning in eval(quote({ : W
  value: 1
- creating future
  class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
- checking if resolved
  result: FALSE
- resolve w/ collecting results
- resolve w/out collecting results
- getting value
O
Warning in eval(quote({ : W
  value: 1
- getting value again
O
Warning in eval(quote({ : W
  value: 1
- creating future
  class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
- checking if resolved
  result: FALSE
- resolve w/ collecting results
- resolve w/out collecting results
- getting value
O
M
  value: 1
- getting value again
O
M
  value: 1
* A single future ... DONE
* Two futures ... 
- list of two futures
  class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
- check if resolved
  result: TRUE, FALSE
- resolve w/ collecting results
List of 2
 $ stdout: chr(0) 
 $ msgs  : list()
- resolve w/out collecting results
List of 2
 $ stdout: chr(0) 
 $ msgs  : list()
- getting value
O1
M1
O2
M2
  values: 1, 2
List of 2
 $ stdout: chr [1:2] "O1\n" "O2\n"
 $ msgs  : chr [1:2] "M1\n" "M2\n"
- getting value again
O1
M1
O2
M2
  values: 1, 2
List of 2
 $ stdout: chr [1:2] "O1\n" "O2\n"
 $ msgs  : chr [1:2] "M1\n" "M2\n"
* Two futures ... DONE
* Two futures - out of order  ... 
- list of two futures
  class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
- getting value
O1
M1
O2
M2
  values: 1, 2
List of 2
 $ stdout: chr [1:2] "O1\n" "O2\n"
 $ msgs  : chr [1:2] "M1\n" "M2\n"
- getting value again
O1
M1
O2
M2
  values: 1, 2
List of 2
 $ stdout: chr [1:2] "O1\n" "O2\n"
 $ msgs  : chr [1:2] "M1\n" "M2\n"
* Two futures - out of order ... DONE
- conditions = structure("condition", drop = TRUE)
42


> message("*** Relaying of standard output and conditions ... DONE")
*** Relaying of standard output and conditions ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=1s, sys.self=0.1s, elapsed=2s, user.child=0.2s, sys.child=0.4s
Test ‘relaying’ ... success
> 
