
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-globals,tricky2.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("globals,tricky2")
Test ‘globals,tricky2’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-globals,tricky2.R’

> library(future)
[08:09:09.131] Option 'future.startup.script': TRUE
[08:09:09.131] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:09:09.131] Future startup scripts found: <none>

> not_cran <- isTRUE(as.logical(Sys.getenv("NOT_CRAN", 
+     "FALSE")))

> options(future.debug = FALSE)

> message("*** Tricky use cases #2 related to globals ...")
*** Tricky use cases #2 related to globals ...

> if (isTRUE(getOption("future.globals.keepWhere", TRUE))) {
+     for (cores in 1:availCores) {
+         message(sprintf("Testing with %d cores ..." .... [TRUNCATED] 
Testing with 1 cores ...
availableCores(): 1
- Local variables with the same name as globals ...
- plan('sequential') ...
Case A
Globals: ‘{’, ‘<-’
Case B
findGlobals(..., dotdotdot = 'warning', method = 'ordered', unlist = TRUE) ...
   call_find_globals_with_dotdotdot(dotdotdot = ‘warning’) ...
      find_globals_ordered() ...
         type = {
         length(expr) = 3
         find_globals_ordered() ...
            type = call
            Convert to an anonymous function:
            function () 
            g <- function() {
                h <- function(a) a
                h(a)
            }
            enter_global(type=‘function’, v=‘<-’) ...
               before:
               [1] name  class
               <0 rows> (or 0-length row.names)
               hardcoded locals: [n=0] 
               Add ‘global’ variable ‘<-’
               LHS <- RHS:
               after:
                 name  class
               1   <- global
            enter_global(type=‘function’, v=‘<-’) ... done
            enter_local(type=‘<-’, v=‘g’) ...
               before:
                 name  class
               1   <- global
               hardcoded locals: [n=0] 
               LHS <- RHS:
               call_find_globals_with_dotdotdot(dotdotdot = ‘ignore’) ...
                  find_globals_ordered() ...
                     type = call
                     Convert to an anonymous function:
                     function () 
                     function() {
                         h <- function(a) a
                         h(a)
                     }
                     <environment: 0x56436513ab48>
                     enter_global(type=‘function’, v=‘{’) ...
                        before:
                        [1] name  class
                        <0 rows> (or 0-length row.names)
                        hardcoded locals: [n=1] ‘h’
                        Add ‘global’ variable ‘{’
                        => A function, but not of interest
                        after:
                          name  class
                        1    { global
                     enter_global(type=‘function’, v=‘{’) ... done
                     enter_global(type=‘function’, v=‘<-’) ...
                        before:
                          name  class
                        1    { global
                        hardcoded locals: [n=1] ‘h’
                        Add ‘global’ variable ‘<-’
                        LHS <- RHS:
                        after:
                          name  class
                        1    { global
                        2   <- global
                     enter_global(type=‘function’, v=‘<-’) ... done
                     enter_local(type=‘<-’, v=‘h’) ...
                        before:
                          name  class
                        1    { global
                        2   <- global
                        hardcoded locals: [n=1] ‘h’
                        variable is a hardcoded local: ‘h’
                        LHS <- RHS:
                        call_find_globals_with_dotdotdot(dotdotdot = ‘ignore’) ...
                           find_globals_ordered() ...
                              type = call
                              Convert to an anonymous function:
                              function () 
                              function(a) a
                              <environment: 0x5643668a7180>
                              enter_local(type=‘variable’, v=‘a’) ...
                                 before:
                                 [1] name  class
                                 <0 rows> (or 0-length row.names)
                                 hardcoded locals: [n=1] ‘a’
                                 variable is a hardcoded local: ‘a’
                                 Add ‘local’ variable ‘a’
                                 after:
                                   name class
                                 1    a local
                              enter_local(type=‘variable’, v=‘a’) ... done
                              variables (with duplicates):
                                name class
                              1    a local
                              variables (no duplicates):
                                name class
                              1    a local
                           find_globals_ordered() ... done
                           globals: [n=0] 
                        call_find_globals_with_dotdotdot(dotdotdot = ‘ignore’) ... done
                        RHS globals: [n=0] 
                        hardcoded locals: [n=1] ‘h’
                        Add ‘local’ variable ‘h’
                        after:
                          name  class
                        1    { global
                        2   <- global
                        3    h  local
                     enter_local(type=‘<-’, v=‘h’) ... done
                     enter_local(type=‘variable’, v=‘a’) ...
                        before:
                          name  class
                        1    { global
                        2   <- global
                        3    h  local
                        hardcoded locals: [n=1] ‘a’
                        variable is a hardcoded local: ‘a’
                        Add ‘local’ variable ‘a’
                        after:
                          name  class
                        1    { global
                        2   <- global
                        3    h  local
                        4    a  local
                     enter_local(type=‘variable’, v=‘a’) ... done
                     enter_local(type=‘function’, v=‘h’) ...
                        before:
                          name  class
                        1    { global
                        2   <- global
                        3    h  local
                        4    a  local
                        hardcoded locals: [n=1] ‘h’
                        variable is a hardcoded local: ‘h’
                        Add ‘local’ variable ‘h’
                        after:
                          name  class
                        1    { global
                        2   <- global
                        3    h  local
                        4    a  local
                        5    h  local
                     enter_local(type=‘function’, v=‘h’) ... done
                     enter_global(type=‘variable’, v=‘a’) ...
                        before:
                          name  class
                        1    { global
                        2   <- global
                        3    h  local
                        4    a  local
                        5    h  local
                        hardcoded locals: [n=1] ‘h’
                        Add ‘global’ variable ‘a’
                        => Nothing to else to explore
                        after:
                          name  class
                        1    { global
                        2   <- global
                        3    h  local
                        4    a  local
                        5    h  local
                        6    a global
                     enter_global(type=‘variable’, v=‘a’) ... done
                     variables (with duplicates):
                       name  class
                     1    { global
                     2   <- global
                     3    h  local
                     4    a  local
                     5    h  local
                     6    a global
                     variables (no duplicates):
                       name  class
                     1    { global
                     2   <- global
                     3    h  local
                     4    a  local
                  find_globals_ordered() ... done
                  globals: [n=2] ‘{’, ‘<-’
               call_find_globals_with_dotdotdot(dotdotdot = ‘ignore’) ... done
               RHS globals: [n=2] ‘{’, ‘<-’
               hardcoded locals: [n=0] 
               Add ‘local’ variable ‘g’
               after:
                 name  class
               1   <- global
               2    g  local
            enter_local(type=‘<-’, v=‘g’) ... done
            enter_global(type=‘function’, v=‘{’) ...
               before:
                 name  class
               1   <- global
               2    g  local
               hardcoded locals: [n=1] ‘h’
               Add ‘global’ variable ‘{’
               => A function, but not of interest
               after:
                 name  class
               1   <- global
               2    g  local
               3    { global
            enter_global(type=‘function’, v=‘{’) ... done
            enter_global(type=‘function’, v=‘<-’) ...
               before:
                 name  class
               1   <- global
               2    g  local
               3    { global
               hardcoded locals: [n=1] ‘h’
               Add ‘global’ variable ‘<-’
               LHS <- RHS:
               after:
                 name  class
               1   <- global
               2    g  local
               3    { global
               4   <- global
            enter_global(type=‘function’, v=‘<-’) ... done
            enter_local(type=‘<-’, v=‘h’) ...
               before:
                 name  class
               1   <- global
               2    g  local
               3    { global
               4   <- global
               hardcoded locals: [n=1] ‘h’
               variable is a hardcoded local: ‘h’
               LHS <- RHS:
               call_find_globals_with_dotdotdot(dotdotdot = ‘ignore’) ...
                  find_globals_ordered() ...
                     type = call
                     Convert to an anonymous function:
                     function () 
                     function(a) a
                     <environment: 0x5643666d0980>
                     enter_local(type=‘variable’, v=‘a’) ...
                        before:
                        [1] name  class
                        <0 rows> (or 0-length row.names)
                        hardcoded locals: [n=1] ‘a’
                        variable is a hardcoded local: ‘a’
                        Add ‘local’ variable ‘a’
                        after:
                          name class
                        1    a local
                     enter_local(type=‘variable’, v=‘a’) ... done
                     variables (with duplicates):
                       name class
                     1    a local
                     variables (no duplicates):
                       name class
                     1    a local
                  find_globals_ordered() ... done
                  globals: [n=0] 
               call_find_globals_with_dotdotdot(dotdotdot = ‘ignore’) ... done
               RHS globals: [n=0] 
               hardcoded locals: [n=1] ‘h’
               Add ‘local’ variable ‘h’
               after:
                 name  class
               1   <- global
               2    g  local
               3    { global
               4   <- global
               5    h  local
            enter_local(type=‘<-’, v=‘h’) ... done
            enter_local(type=‘variable’, v=‘a’) ...
               before:
                 name  class
               1   <- global
               2    g  local
               3    { global
               4   <- global
               5    h  local
               hardcoded locals: [n=1] ‘a’
               variable is a hardcoded local: ‘a’
               Add ‘local’ variable ‘a’
               after:
                 name  class
               1   <- global
               2    g  local
               3    { global
               4   <- global
               5    h  local
               6    a  local
            enter_local(type=‘variable’, v=‘a’) ... done
            enter_local(type=‘function’, v=‘h’) ...
               before:
                 name  class
               1   <- global
               2    g  local
               3    { global
               4   <- global
               5    h  local
               6    a  local
               hardcoded locals: [n=1] ‘h’
               variable is a hardcoded local: ‘h’
               Add ‘local’ variable ‘h’
               after:
                 name  class
               1   <- global
               2    g  local
               3    { global
               4   <- global
               5    h  local
               6    a  local
               7    h  local
            enter_local(type=‘function’, v=‘h’) ... done
            enter_global(type=‘variable’, v=‘a’) ...
               before:
                 name  class
               1   <- global
               2    g  local
               3    { global
               4   <- global
               5    h  local
               6    a  local
               7    h  local
               hardcoded locals: [n=1] ‘h’
               Add ‘global’ variable ‘a’
               => Nothing to else to explore
               after:
                 name  class
               1   <- global
               2    g  local
               3    { global
               4   <- global
               5    h  local
               6    a  local
               7    h  local
               8    a global
            enter_global(type=‘variable’, v=‘a’) ... done
            variables (with duplicates):
              name  class
            1   <- global
            2    g  local
            3    { global
            4   <- global
            5    h  local
            6    a  local
            7    h  local
            8    a global
            variables (no duplicates):
              name  class
            1   <- global
            2    g  local
            3    { global
            4    h  local
            5    a  local
         find_globals_ordered() ... done
         Add ‘global’ variable ‘<-’, ‘{’
         Add ‘local’ variable ‘g’
         find_globals_ordered() ...
            type = call
            Convert to an anonymous function:
            function () 
            g()
            enter_global(type=‘function’, v=‘g’) ...
               before:
               [1] name  class
               <0 rows> (or 0-length row.names)
               hardcoded locals: [n=0] 
               Add ‘global’ variable ‘g’
               => A function, but not of interest
               after:
                 name  class
               1    g global
            enter_global(type=‘function’, v=‘g’) ... done
            variables (with duplicates):
              name  class
            1    g global
            variables (no duplicates):
              name  class
            1    g global
         find_globals_ordered() ... done
         Add ‘global’ variable ‘g’
         variables (with duplicates):
           name  class
         1    { global
         2   <- global
         3    { global
         4    g locals
         5    g global
         variables (no duplicates):
           name  class
         1    { global
         2   <- global
         3    g locals
      find_globals_ordered() ... done
      globals: [n=2] ‘{’, ‘<-’
   call_find_globals_with_dotdotdot(dotdotdot = ‘warning’) ... done
findGlobals(..., dotdotdot = 'warning', method = 'ordered', unlist = TRUE) ... done
Globals: ‘{’, ‘<-’
Case C
Case D
<simpleError in fn(1): object 'y' not found>
Case D
[1] 1
[1] 1
Testing with 1 cores ... DONE
Testing with 2 cores ...
availableCores(): 2
- Local variables with the same name as globals ...
- plan('multicore') ...
Case A
Globals: ‘{’, ‘<-’
Case B
findGlobals(..., dotdotdot = 'warning', method = 'ordered', unlist = TRUE) ...
   call_find_globals_with_dotdotdot(dotdotdot = ‘warning’) ...
      find_globals_ordered() ...
         type = {
         length(expr) = 3
         find_globals_ordered() ...
            type = call
            Convert to an anonymous function:
            function () 
            g <- function() {
                h <- function(a) a
                h(a)
            }
            enter_global(type=‘function’, v=‘<-’) ...
               before:
               [1] name  class
               <0 rows> (or 0-length row.names)
               hardcoded locals: [n=0] 
               Add ‘global’ variable ‘<-’
               LHS <- RHS:
               after:
                 name  class
               1   <- global
            enter_global(type=‘function’, v=‘<-’) ... done
            enter_local(type=‘<-’, v=‘g’) ...
               before:
                 name  class
               1   <- global
               hardcoded locals: [n=0] 
               LHS <- RHS:
               call_find_globals_with_dotdotdot(dotdotdot = ‘ignore’) ...
                  find_globals_ordered() ...
                     type = call
                     Convert to an anonymous function:
                     function () 
                     function() {
                         h <- function(a) a
                         h(a)
                     }
                     <environment: 0x564364ae8b78>
                     enter_global(type=‘function’, v=‘{’) ...
                        before:
                        [1] name  class
                        <0 rows> (or 0-length row.names)
                        hardcoded locals: [n=1] ‘h’
                        Add ‘global’ variable ‘{’
                        => A function, but not of interest
                        after:
                          name  class
                        1    { global
                     enter_global(type=‘function’, v=‘{’) ... done
                     enter_global(type=‘function’, v=‘<-’) ...
                        before:
                          name  class
                        1    { global
                        hardcoded locals: [n=1] ‘h’
                        Add ‘global’ variable ‘<-’
                        LHS <- RHS:
                        after:
                          name  class
                        1    { global
                        2   <- global
                     enter_global(type=‘function’, v=‘<-’) ... done
                     enter_local(type=‘<-’, v=‘h’) ...
                        before:
                          name  class
                        1    { global
                        2   <- global
                        hardcoded locals: [n=1] ‘h’
                        variable is a hardcoded local: ‘h’
                        LHS <- RHS:
                        call_find_globals_with_dotdotdot(dotdotdot = ‘ignore’) ...
                           find_globals_ordered() ...
                              type = call
                              Convert to an anonymous function:
                              function () 
                              function(a) a
                              <environment: 0x564366723a08>
                              enter_local(type=‘variable’, v=‘a’) ...
                                 before:
                                 [1] name  class
                                 <0 rows> (or 0-length row.names)
                                 hardcoded locals: [n=1] ‘a’
                                 variable is a hardcoded local: ‘a’
                                 Add ‘local’ variable ‘a’
                                 after:
                                   name class
                                 1    a local
                              enter_local(type=‘variable’, v=‘a’) ... done
                              variables (with duplicates):
                                name class
                              1    a local
                              variables (no duplicates):
                                name class
                              1    a local
                           find_globals_ordered() ... done
                           globals: [n=0] 
                        call_find_globals_with_dotdotdot(dotdotdot = ‘ignore’) ... done
                        RHS globals: [n=0] 
                        hardcoded locals: [n=1] ‘h’
                        Add ‘local’ variable ‘h’
                        after:
                          name  class
                        1    { global
                        2   <- global
                        3    h  local
                     enter_local(type=‘<-’, v=‘h’) ... done
                     enter_local(type=‘variable’, v=‘a’) ...
                        before:
                          name  class
                        1    { global
                        2   <- global
                        3    h  local
                        hardcoded locals: [n=1] ‘a’
                        variable is a hardcoded local: ‘a’
                        Add ‘local’ variable ‘a’
                        after:
                          name  class
                        1    { global
                        2   <- global
                        3    h  local
                        4    a  local
                     enter_local(type=‘variable’, v=‘a’) ... done
                     enter_local(type=‘function’, v=‘h’) ...
                        before:
                          name  class
                        1    { global
                        2   <- global
                        3    h  local
                        4    a  local
                        hardcoded locals: [n=1] ‘h’
                        variable is a hardcoded local: ‘h’
                        Add ‘local’ variable ‘h’
                        after:
                          name  class
                        1    { global
                        2   <- global
                        3    h  local
                        4    a  local
                        5    h  local
                     enter_local(type=‘function’, v=‘h’) ... done
                     enter_global(type=‘variable’, v=‘a’) ...
                        before:
                          name  class
                        1    { global
                        2   <- global
                        3    h  local
                        4    a  local
                        5    h  local
                        hardcoded locals: [n=1] ‘h’
                        Add ‘global’ variable ‘a’
                        => Nothing to else to explore
                        after:
                          name  class
                        1    { global
                        2   <- global
                        3    h  local
                        4    a  local
                        5    h  local
                        6    a global
                     enter_global(type=‘variable’, v=‘a’) ... done
                     variables (with duplicates):
                       name  class
                     1    { global
                     2   <- global
                     3    h  local
                     4    a  local
                     5    h  local
                     6    a global
                     variables (no duplicates):
                       name  class
                     1    { global
                     2   <- global
                     3    h  local
                     4    a  local
                  find_globals_ordered() ... done
                  globals: [n=2] ‘{’, ‘<-’
               call_find_globals_with_dotdotdot(dotdotdot = ‘ignore’) ... done
               RHS globals: [n=2] ‘{’, ‘<-’
               hardcoded locals: [n=0] 
               Add ‘local’ variable ‘g’
               after:
                 name  class
               1   <- global
               2    g  local
            enter_local(type=‘<-’, v=‘g’) ... done
            enter_global(type=‘function’, v=‘{’) ...
               before:
                 name  class
               1   <- global
               2    g  local
               hardcoded locals: [n=1] ‘h’
               Add ‘global’ variable ‘{’
               => A function, but not of interest
               after:
                 name  class
               1   <- global
               2    g  local
               3    { global
            enter_global(type=‘function’, v=‘{’) ... done
            enter_global(type=‘function’, v=‘<-’) ...
               before:
                 name  class
               1   <- global
               2    g  local
               3    { global
               hardcoded locals: [n=1] ‘h’
               Add ‘global’ variable ‘<-’
               LHS <- RHS:
               after:
                 name  class
               1   <- global
               2    g  local
               3    { global
               4   <- global
            enter_global(type=‘function’, v=‘<-’) ... done
            enter_local(type=‘<-’, v=‘h’) ...
               before:
                 name  class
               1   <- global
               2    g  local
               3    { global
               4   <- global
               hardcoded locals: [n=1] ‘h’
               variable is a hardcoded local: ‘h’
               LHS <- RHS:
               call_find_globals_with_dotdotdot(dotdotdot = ‘ignore’) ...
                  find_globals_ordered() ...
                     type = call
                     Convert to an anonymous function:
                     function () 
                     function(a) a
                     <environment: 0x5643666fa948>
                     enter_local(type=‘variable’, v=‘a’) ...
                        before:
                        [1] name  class
                        <0 rows> (or 0-length row.names)
                        hardcoded locals: [n=1] ‘a’
                        variable is a hardcoded local: ‘a’
                        Add ‘local’ variable ‘a’
                        after:
                          name class
                        1    a local
                     enter_local(type=‘variable’, v=‘a’) ... done
                     variables (with duplicates):
                       name class
                     1    a local
                     variables (no duplicates):
                       name class
                     1    a local
                  find_globals_ordered() ... done
                  globals: [n=0] 
               call_find_globals_with_dotdotdot(dotdotdot = ‘ignore’) ... done
               RHS globals: [n=0] 
               hardcoded locals: [n=1] ‘h’
               Add ‘local’ variable ‘h’
               after:
                 name  class
               1   <- global
               2    g  local
               3    { global
               4   <- global
               5    h  local
            enter_local(type=‘<-’, v=‘h’) ... done
            enter_local(type=‘variable’, v=‘a’) ...
               before:
                 name  class
               1   <- global
               2    g  local
               3    { global
               4   <- global
               5    h  local
               hardcoded locals: [n=1] ‘a’
               variable is a hardcoded local: ‘a’
               Add ‘local’ variable ‘a’
               after:
                 name  class
               1   <- global
               2    g  local
               3    { global
               4   <- global
               5    h  local
               6    a  local
            enter_local(type=‘variable’, v=‘a’) ... done
            enter_local(type=‘function’, v=‘h’) ...
               before:
                 name  class
               1   <- global
               2    g  local
               3    { global
               4   <- global
               5    h  local
               6    a  local
               hardcoded locals: [n=1] ‘h’
               variable is a hardcoded local: ‘h’
               Add ‘local’ variable ‘h’
               after:
                 name  class
               1   <- global
               2    g  local
               3    { global
               4   <- global
               5    h  local
               6    a  local
               7    h  local
            enter_local(type=‘function’, v=‘h’) ... done
            enter_global(type=‘variable’, v=‘a’) ...
               before:
                 name  class
               1   <- global
               2    g  local
               3    { global
               4   <- global
               5    h  local
               6    a  local
               7    h  local
               hardcoded locals: [n=1] ‘h’
               Add ‘global’ variable ‘a’
               => Nothing to else to explore
               after:
                 name  class
               1   <- global
               2    g  local
               3    { global
               4   <- global
               5    h  local
               6    a  local
               7    h  local
               8    a global
            enter_global(type=‘variable’, v=‘a’) ... done
            variables (with duplicates):
              name  class
            1   <- global
            2    g  local
            3    { global
            4   <- global
            5    h  local
            6    a  local
            7    h  local
            8    a global
            variables (no duplicates):
              name  class
            1   <- global
            2    g  local
            3    { global
            4    h  local
            5    a  local
         find_globals_ordered() ... done
         Add ‘global’ variable ‘<-’, ‘{’
         Add ‘local’ variable ‘g’
         find_globals_ordered() ...
            type = call
            Convert to an anonymous function:
            function () 
            g()
            enter_global(type=‘function’, v=‘g’) ...
               before:
               [1] name  class
               <0 rows> (or 0-length row.names)
               hardcoded locals: [n=0] 
               Add ‘global’ variable ‘g’
               => A function, but not of interest
               after:
                 name  class
               1    g global
            enter_global(type=‘function’, v=‘g’) ... done
            variables (with duplicates):
              name  class
            1    g global
            variables (no duplicates):
              name  class
            1    g global
         find_globals_ordered() ... done
         Add ‘global’ variable ‘g’
         variables (with duplicates):
           name  class
         1    { global
         2   <- global
         3    { global
         4    g locals
         5    g global
         variables (no duplicates):
           name  class
         1    { global
         2   <- global
         3    g locals
      find_globals_ordered() ... done
      globals: [n=2] ‘{’, ‘<-’
   call_find_globals_with_dotdotdot(dotdotdot = ‘warning’) ... done
findGlobals(..., dotdotdot = 'warning', method = 'ordered', unlist = TRUE) ... done
Globals: ‘{’, ‘<-’
Case C
Case D
<simpleError in fn(1): object 'y' not found>
Case D
[1] 1
[1] 1
- plan('multisession') ...
Case A
Globals: ‘{’, ‘<-’
Case B
findGlobals(..., dotdotdot = 'warning', method = 'ordered', unlist = TRUE) ...
   call_find_globals_with_dotdotdot(dotdotdot = ‘warning’) ...
      find_globals_ordered() ...
         type = {
         length(expr) = 3
         find_globals_ordered() ...
            type = call
            Convert to an anonymous function:
            function () 
            g <- function() {
                h <- function(a) a
                h(a)
            }
            enter_global(type=‘function’, v=‘<-’) ...
               before:
               [1] name  class
               <0 rows> (or 0-length row.names)
               hardcoded locals: [n=0] 
               Add ‘global’ variable ‘<-’
               LHS <- RHS:
               after:
                 name  class
               1   <- global
            enter_global(type=‘function’, v=‘<-’) ... done
            enter_local(type=‘<-’, v=‘g’) ...
               before:
                 name  class
               1   <- global
               hardcoded locals: [n=0] 
               LHS <- RHS:
               call_find_globals_with_dotdotdot(dotdotdot = ‘ignore’) ...
                  find_globals_ordered() ...
                     type = call
                     Convert to an anonymous function:
                     function () 
                     function() {
                         h <- function(a) a
                         h(a)
                     }
                     <environment: 0x564368d8b478>
                     enter_global(type=‘function’, v=‘{’) ...
                        before:
                        [1] name  class
                        <0 rows> (or 0-length row.names)
                        hardcoded locals: [n=1] ‘h’
                        Add ‘global’ variable ‘{’
                        => A function, but not of interest
                        after:
                          name  class
                        1    { global
                     enter_global(type=‘function’, v=‘{’) ... done
                     enter_global(type=‘function’, v=‘<-’) ...
                        before:
                          name  class
                        1    { global
                        hardcoded locals: [n=1] ‘h’
                        Add ‘global’ variable ‘<-’
                        LHS <- RHS:
                        after:
                          name  class
                        1    { global
                        2   <- global
                     enter_global(type=‘function’, v=‘<-’) ... done
                     enter_local(type=‘<-’, v=‘h’) ...
                        before:
                          name  class
                        1    { global
                        2   <- global
                        hardcoded locals: [n=1] ‘h’
                        variable is a hardcoded local: ‘h’
                        LHS <- RHS:
                        call_find_globals_with_dotdotdot(dotdotdot = ‘ignore’) ...
                           find_globals_ordered() ...
                              type = call
                              Convert to an anonymous function:
                              function () 
                              function(a) a
                              <environment: 0x564368f52208>
                              enter_local(type=‘variable’, v=‘a’) ...
                                 before:
                                 [1] name  class
                                 <0 rows> (or 0-length row.names)
                                 hardcoded locals: [n=1] ‘a’
                                 variable is a hardcoded local: ‘a’
                                 Add ‘local’ variable ‘a’
                                 after:
                                   name class
                                 1    a local
                              enter_local(type=‘variable’, v=‘a’) ... done
                              variables (with duplicates):
                                name class
                              1    a local
                              variables (no duplicates):
                                name class
                              1    a local
                           find_globals_ordered() ... done
                           globals: [n=0] 
                        call_find_globals_with_dotdotdot(dotdotdot = ‘ignore’) ... done
                        RHS globals: [n=0] 
                        hardcoded locals: [n=1] ‘h’
                        Add ‘local’ variable ‘h’
                        after:
                          name  class
                        1    { global
                        2   <- global
                        3    h  local
                     enter_local(type=‘<-’, v=‘h’) ... done
                     enter_local(type=‘variable’, v=‘a’) ...
                        before:
                          name  class
                        1    { global
                        2   <- global
                        3    h  local
                        hardcoded locals: [n=1] ‘a’
                        variable is a hardcoded local: ‘a’
                        Add ‘local’ variable ‘a’
                        after:
                          name  class
                        1    { global
                        2   <- global
                        3    h  local
                        4    a  local
                     enter_local(type=‘variable’, v=‘a’) ... done
                     enter_local(type=‘function’, v=‘h’) ...
                        before:
                          name  class
                        1    { global
                        2   <- global
                        3    h  local
                        4    a  local
                        hardcoded locals: [n=1] ‘h’
                        variable is a hardcoded local: ‘h’
                        Add ‘local’ variable ‘h’
                        after:
                          name  class
                        1    { global
                        2   <- global
                        3    h  local
                        4    a  local
                        5    h  local
                     enter_local(type=‘function’, v=‘h’) ... done
                     enter_global(type=‘variable’, v=‘a’) ...
                        before:
                          name  class
                        1    { global
                        2   <- global
                        3    h  local
                        4    a  local
                        5    h  local
                        hardcoded locals: [n=1] ‘h’
                        Add ‘global’ variable ‘a’
                        => Nothing to else to explore
                        after:
                          name  class
                        1    { global
                        2   <- global
                        3    h  local
                        4    a  local
                        5    h  local
                        6    a global
                     enter_global(type=‘variable’, v=‘a’) ... done
                     variables (with duplicates):
                       name  class
                     1    { global
                     2   <- global
                     3    h  local
                     4    a  local
                     5    h  local
                     6    a global
                     variables (no duplicates):
                       name  class
                     1    { global
                     2   <- global
                     3    h  local
                     4    a  local
                  find_globals_ordered() ... done
                  globals: [n=2] ‘{’, ‘<-’
               call_find_globals_with_dotdotdot(dotdotdot = ‘ignore’) ... done
               RHS globals: [n=2] ‘{’, ‘<-’
               hardcoded locals: [n=0] 
               Add ‘local’ variable ‘g’
               after:
                 name  class
               1   <- global
               2    g  local
            enter_local(type=‘<-’, v=‘g’) ... done
            enter_global(type=‘function’, v=‘{’) ...
               before:
                 name  class
               1   <- global
               2    g  local
               hardcoded locals: [n=1] ‘h’
               Add ‘global’ variable ‘{’
               => A function, but not of interest
               after:
                 name  class
               1   <- global
               2    g  local
               3    { global
            enter_global(type=‘function’, v=‘{’) ... done
            enter_global(type=‘function’, v=‘<-’) ...
               before:
                 name  class
               1   <- global
               2    g  local
               3    { global
               hardcoded locals: [n=1] ‘h’
               Add ‘global’ variable ‘<-’
               LHS <- RHS:
               after:
                 name  class
               1   <- global
               2    g  local
               3    { global
               4   <- global
            enter_global(type=‘function’, v=‘<-’) ... done
            enter_local(type=‘<-’, v=‘h’) ...
               before:
                 name  class
               1   <- global
               2    g  local
               3    { global
               4   <- global
               hardcoded locals: [n=1] ‘h’
               variable is a hardcoded local: ‘h’
               LHS <- RHS:
               call_find_globals_with_dotdotdot(dotdotdot = ‘ignore’) ...
                  find_globals_ordered() ...
                     type = call
                     Convert to an anonymous function:
                     function () 
                     function(a) a
                     <environment: 0x564367a2f250>
                     enter_local(type=‘variable’, v=‘a’) ...
                        before:
                        [1] name  class
                        <0 rows> (or 0-length row.names)
                        hardcoded locals: [n=1] ‘a’
                        variable is a hardcoded local: ‘a’
                        Add ‘local’ variable ‘a’
                        after:
                          name class
                        1    a local
                     enter_local(type=‘variable’, v=‘a’) ... done
                     variables (with duplicates):
                       name class
                     1    a local
                     variables (no duplicates):
                       name class
                     1    a local
                  find_globals_ordered() ... done
                  globals: [n=0] 
               call_find_globals_with_dotdotdot(dotdotdot = ‘ignore’) ... done
               RHS globals: [n=0] 
               hardcoded locals: [n=1] ‘h’
               Add ‘local’ variable ‘h’
               after:
                 name  class
               1   <- global
               2    g  local
               3    { global
               4   <- global
               5    h  local
            enter_local(type=‘<-’, v=‘h’) ... done
            enter_local(type=‘variable’, v=‘a’) ...
               before:
                 name  class
               1   <- global
               2    g  local
               3    { global
               4   <- global
               5    h  local
               hardcoded locals: [n=1] ‘a’
               variable is a hardcoded local: ‘a’
               Add ‘local’ variable ‘a’
               after:
                 name  class
               1   <- global
               2    g  local
               3    { global
               4   <- global
               5    h  local
               6    a  local
            enter_local(type=‘variable’, v=‘a’) ... done
            enter_local(type=‘function’, v=‘h’) ...
               before:
                 name  class
               1   <- global
               2    g  local
               3    { global
               4   <- global
               5    h  local
               6    a  local
               hardcoded locals: [n=1] ‘h’
               variable is a hardcoded local: ‘h’
               Add ‘local’ variable ‘h’
               after:
                 name  class
               1   <- global
               2    g  local
               3    { global
               4   <- global
               5    h  local
               6    a  local
               7    h  local
            enter_local(type=‘function’, v=‘h’) ... done
            enter_global(type=‘variable’, v=‘a’) ...
               before:
                 name  class
               1   <- global
               2    g  local
               3    { global
               4   <- global
               5    h  local
               6    a  local
               7    h  local
               hardcoded locals: [n=1] ‘h’
               Add ‘global’ variable ‘a’
               => Nothing to else to explore
               after:
                 name  class
               1   <- global
               2    g  local
               3    { global
               4   <- global
               5    h  local
               6    a  local
               7    h  local
               8    a global
            enter_global(type=‘variable’, v=‘a’) ... done
            variables (with duplicates):
              name  class
            1   <- global
            2    g  local
            3    { global
            4   <- global
            5    h  local
            6    a  local
            7    h  local
            8    a global
            variables (no duplicates):
              name  class
            1   <- global
            2    g  local
            3    { global
            4    h  local
            5    a  local
         find_globals_ordered() ... done
         Add ‘global’ variable ‘<-’, ‘{’
         Add ‘local’ variable ‘g’
         find_globals_ordered() ...
            type = call
            Convert to an anonymous function:
            function () 
            g()
            enter_global(type=‘function’, v=‘g’) ...
               before:
               [1] name  class
               <0 rows> (or 0-length row.names)
               hardcoded locals: [n=0] 
               Add ‘global’ variable ‘g’
               => A function, but not of interest
               after:
                 name  class
               1    g global
            enter_global(type=‘function’, v=‘g’) ... done
            variables (with duplicates):
              name  class
            1    g global
            variables (no duplicates):
              name  class
            1    g global
         find_globals_ordered() ... done
         Add ‘global’ variable ‘g’
         variables (with duplicates):
           name  class
         1    { global
         2   <- global
         3    { global
         4    g locals
         5    g global
         variables (no duplicates):
           name  class
         1    { global
         2   <- global
         3    g locals
      find_globals_ordered() ... done
      globals: [n=2] ‘{’, ‘<-’
   call_find_globals_with_dotdotdot(dotdotdot = ‘warning’) ... done
findGlobals(..., dotdotdot = 'warning', method = 'ordered', unlist = TRUE) ... done
Globals: ‘{’, ‘<-’
Case C
Case D
<simpleError in fn(1): object 'y' not found>
Case D
[1] 1
[1] 1
Testing with 2 cores ... DONE

> message("*** Tricky use cases #2 related to globals ... DONE")
*** Tricky use cases #2 related to globals ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.7s, sys.self=0.04s, elapsed=1s, user.child=0.2s, sys.child=0.4s
Test ‘globals,tricky2’ ... success
> 
