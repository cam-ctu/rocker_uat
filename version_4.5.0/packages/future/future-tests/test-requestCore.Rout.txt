
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-requestCore.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("requestCore")
Test ‘requestCore’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-requestCore.R’

> library(future)
[08:09:47.435] Option 'future.startup.script': TRUE
[08:09:47.435] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:09:47.435] Future startup scripts found: <none>

> message("*** requestCore() ...")
*** requestCore() ...

> message("*** requestCore() - exceptions ...")
*** requestCore() - exceptions ...

> res <- try(requestCore(function() {
+ }, workers = 0), silent = TRUE)

> stopifnot(inherits(res, "try-error"))

> res <- try(requestCore(function() {
+ }, timeout = -1), silent = TRUE)

> stopifnot(inherits(res, "try-error"))

> res <- try(requestCore(function() {
+ }, alpha = 0), silent = TRUE)

> stopifnot(inherits(res, "try-error"))

> message("*** requestCore() - exceptions ... DONE")
*** requestCore() - exceptions ... DONE

> if (supportsMulticore()) {
+     message("*** requestCore() - timeout ...")
+     plan(multicore, workers = 2)
+     a %<-% {
+         Sys.sleep(0. .... [TRUNCATED] 
*** requestCore() - timeout ...
[08:09:47.441] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:47.441] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:09:47.442] | : all.equal() for FutureStrategyList ...
[08:09:47.442] | : . New stack:
[08:09:47.442] | : . List of 1
[08:09:47.442] | : .  $ :function (..., workers = 2L, envir = parent.frame())  
[08:09:47.442] | : .   ..- attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
[08:09:47.442] | : .   ..- attr(*, "init")= logi TRUE
[08:09:47.442] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:47.442] | : .     ...)  
[08:09:47.442] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:47.442] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:47.442] | : .   ..- attr(*, "tweaks")=List of 1
[08:09:47.442] | : .   .. ..$ workers: int 2
[08:09:47.442] | : .   ..- attr(*, "call")= language plan(multicore, workers = 2L)
[08:09:47.442] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:47.449] | : . Old stack:
[08:09:47.449] | : . List of 1
[08:09:47.449] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:47.449] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:47.449] | : .   ..- attr(*, "init")= logi TRUE
[08:09:47.449] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:47.449] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:47.449] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:47.449] | : .   ..- attr(*, "call")= language plan(sequential)
[08:09:47.449] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:47.451] | : . Not identical
[08:09:47.452] | : . all.equal() for future ...
[08:09:47.452] | : . ' List of 2
[08:09:47.452] | : . '  $ target :function (..., workers = 2L, envir = parent.frame())  
[08:09:47.452] | : . '   ..- attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
[08:09:47.452] | : . '   ..- attr(*, "init")= logi TRUE
[08:09:47.452] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:47.452] | : . '     ...)  
[08:09:47.452] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:47.452] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:47.452] | : . '   ..- attr(*, "tweaks")=List of 1
[08:09:47.452] | : . '   .. ..$ workers: int 2
[08:09:47.452] | : . '   ..- attr(*, "call")= language plan(multicore, workers = 2L)
[08:09:47.452] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:47.452] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:47.452] | : . '   ..- attr(*, "init")= logi TRUE
[08:09:47.452] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:47.452] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:47.452] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:47.452] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:09:47.457] | : . ' Formals differ
[08:09:47.457] | : . all.equal() for future ... done
[08:09:47.457] | : . Future strategies differ at level 1
[08:09:47.457] | : all.equal() for FutureStrategyList ... done
[08:09:47.457] | : plan(): Setting new future backend stack:
[08:09:47.457] | : List of future strategies:
[08:09:47.457] | : 1. multicore:
[08:09:47.457] | :    - args: function (..., workers = 2L, envir = parent.frame())
[08:09:47.457] | :    - tweaked: TRUE
[08:09:47.457] | :    - call: plan(multicore, workers = 2L)
[08:09:47.458] | : List of 1
[08:09:47.458] | :  $ :function (..., workers = 2L, envir = parent.frame())  
[08:09:47.458] | :   ..- attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
[08:09:47.458] | :   ..- attr(*, "init")= logi TRUE
[08:09:47.458] | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:47.458] | :     ...)  
[08:09:47.458] | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:47.458] | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:47.458] | :   ..- attr(*, "tweaks")=List of 1
[08:09:47.458] | :   .. ..$ workers: int 2
[08:09:47.458] | :   ..- attr(*, "call")= language plan(multicore, workers = 2L)
[08:09:47.458] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:47.461] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:09:47.461] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:47.461] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:09:47.461] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:09:47.461] | : . Legacy shutdown of cluster workers ...
[08:09:47.462] | : . ' Stopping existing cluster ...
[08:09:47.462] | : . ' , No pre-existing cluster. Skipping
[08:09:47.462] | : . ' Stopping existing cluster ... done
[08:09:47.462] | : . Legacy shutdown of cluster workers ... done
[08:09:47.462] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:09:47.462] | : plan(): plan_init() of ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:09:47.462] | : . function (..., workers = 2L, envir = parent.frame())  
[08:09:47.462] | : .  - attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
[08:09:47.462] | : .  - attr(*, "init")= logi TRUE
[08:09:47.462] | : .  - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:47.462] | : .     ...)  
[08:09:47.462] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:47.462] | : .  - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:47.462] | : .  - attr(*, "tweaks")=List of 1
[08:09:47.462] | : .   ..$ workers: int 2
[08:09:47.462] | : .  - attr(*, "call")= language plan(multicore, workers = 2L)
[08:09:47.465] | : . init: TRUE
[08:09:47.465] | : . makeFutureBackend(<tweaked>) ...
[08:09:47.465] | : . ' Backend function: <‘NULL’>
[08:09:47.465] | : . ' Evaluator tweak arguments: [n=1]
[08:09:47.465] | : . ' List of 1
[08:09:47.465] | : . '  $ workers: int 2
[08:09:47.466] | : . ' Evaluator formal arguments: [n=1]
[08:09:47.466] | : . ' List of 1
[08:09:47.466] | : . '  $ workers: int 2
[08:09:47.467] | : . ' Backend factory arguments: [n=1]
[08:09:47.467] | : . ' Dotted pair list of 1
[08:09:47.467] | : . '  $ workers: int 2
[08:09:47.468] | : . ' Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:09:47.468] | : . makeFutureBackend(<tweaked>) ... done
[08:09:47.468] | : plan(): plan_init() of ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:09:47.468] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:47.468] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:09:47.469] | : plan(): nbrOfWorkers() = 2
[08:09:47.469] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:09:47.469] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:09:47.470] future(..., label = NULL) ...
[08:09:47.470] | lazy: FALSE
[08:09:47.470] | stdout: TRUE
[08:09:47.470] | conditions: [n=1] ‘condition’
[08:09:47.470] | gc: FALSE
[08:09:47.470] | earlySignal: FALSE
[08:09:47.471] | getGlobalsAndPackages() ...
[08:09:47.471] | : Searching for globals ...
[08:09:47.484] | : . globals found: [2] ‘{’, ‘Sys.sleep’
[08:09:47.485] | : Searching for globals ... done
[08:09:47.485] | : Resolving globals: FALSE
[08:09:47.485] | : Search for packages associated with the globals ...
[08:09:47.485] | : . Packages associated with globals: [1] ‘base’
[08:09:47.485] | : . Packages: [1] ‘base’
[08:09:47.485] | : Search for packages associated with the globals ... done
[08:09:47.486] | : Packages after dropping 'base': [0] 
[08:09:47.486] | : globals: [0] 
[08:09:47.486] | : packages: [0] 
[08:09:47.486] | getGlobalsAndPackages() ... done
[08:09:47.487] | run() for ‘Future’ (<unnamed-1>) ...
[08:09:47.487] | : state: ‘created’
[08:09:47.487] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:47.487] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:09:47.487] | : Using MulticoreFutureBackend ...
[08:09:47.487] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:09:47.487] | : . Launching futures ...
[08:09:47.488] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:09:47.488] | : . ' , getFutureData() ...
[08:09:47.488] | : . ' , ; getFutureCore() ...
[08:09:47.488] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:09:47.488] | : . ' , ; getFutureCore() ... done
[08:09:47.488] | : . ' , ; getFutureCapture() ...
[08:09:47.489] | : . ' , ; getFutureCapture() ... done
[08:09:47.489] | : . ' , ; getFutureContext() ...
[08:09:47.489] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:47.489] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:09:47.489] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:09:47.489] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:09:47.489] | : . ' , ; getFutureContext() ... done
[08:09:47.490] | : . ' , getFutureData() ... done
[08:09:47.490] | : . ' , requestCore(..., workers = 2) ...
[08:09:47.490] | : . ' , requestCore(..., workers = 2) ... done
[08:09:47.493] | : . ' , MulticoreFuture started
[08:09:47.494] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:09:47.494] | : . Launching futures ... done
[08:09:47.494] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:09:47.495] | : Using MulticoreFutureBackend ... done
[08:09:47.495] | run() for ‘Future’ (<unnamed-1>) ... done
[08:09:47.495] future(..., label = NULL) ... done
Error in requestCore(function() { : 
  argument "alpha" is missing, with no default
[08:09:47.497] value() for MulticoreFuture (<unnamed-1>) ...
[08:09:47.499] | result() for MulticoreFuture ...
[08:09:47.499] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:47.499] | : . ' , ; Getting full stack: [n=1] ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:09:47.500] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:09:47.500] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:09:47.500] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:09:47.501] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:09:47.501] | : . ' , ; ` | New stack:
[08:09:47.501] | : . ' , ; ` | List of 1
[08:09:47.501] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:47.501] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:47.501] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:09:47.501] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:47.501] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:47.501] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:47.501] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:47.501] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:47.506] | : . ' , ; ` | Old stack:
[08:09:47.506] | : . ' , ; ` | List of 1
[08:09:47.506] | : . ' , ; ` |  $ :function (..., workers = 2L, envir = parent.frame())  
[08:09:47.506] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
[08:09:47.506] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:09:47.506] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:47.506] | : . ' , ; ` |     ...)  
[08:09:47.506] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:47.506] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:47.506] | : . ' , ; ` |   ..- attr(*, "tweaks")=List of 1
[08:09:47.506] | : . ' , ; ` |   .. ..$ workers: int 2
[08:09:47.506] | : . ' , ; ` |   ..- attr(*, "call")= language plan(multicore, workers = 2L)
[08:09:47.506] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55bd2ad9ddb0> 
[08:09:47.506] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:47.506] | : . ' , ; ` |     ...)  
[08:09:47.506] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:47.506] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:47.513] | : . ' , ; ` | Not identical
[08:09:47.513] | : . ' , ; ` | all.equal() for future ...
[08:09:47.514] | : . ' , ; ` | : List of 2
[08:09:47.514] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:47.514] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:47.514] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:09:47.514] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:47.514] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:47.514] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:47.514] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:47.514] | : . ' , ; ` | :  $ current:function (..., workers = 2L, envir = parent.frame())  
[08:09:47.514] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
[08:09:47.514] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:09:47.514] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:47.514] | : . ' , ; ` | :     ...)  
[08:09:47.514] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:47.514] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:47.514] | : . ' , ; ` | :   ..- attr(*, "tweaks")=List of 1
[08:09:47.514] | : . ' , ; ` | :   .. ..$ workers: int 2
[08:09:47.514] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(multicore, workers = 2L)
[08:09:47.514] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55bd2ad9ddb0> 
[08:09:47.514] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:47.514] | : . ' , ; ` | :     ...)  
[08:09:47.514] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:47.529] | : . ' , ; ` | : Formals differ
[08:09:47.529] | : . ' , ; ` | all.equal() for future ... done
[08:09:47.529] | : . ' , ; ` | Future strategies differ at level 1
[08:09:47.530] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:09:47.530] | : . ' , ; ` plan(): Setting new future backend stack:
[08:09:47.530] | : . ' , ; ` List of future strategies:
[08:09:47.530] | : . ' , ; ` 1. sequential:
[08:09:47.530] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:09:47.530] | : . ' , ; `    - tweaked: FALSE
[08:09:47.530] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:47.531] | : . ' , ; ` List of 1
[08:09:47.531] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:47.531] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:47.531] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:09:47.531] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:47.531] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:47.531] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:47.531] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:47.531] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:47.534] | : . ' , ; ` plan(): plan_cleanup(‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:09:47.535] | : . ' , ; ` plan(): plan_cleanup(‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:09:47.535] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:47.535] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:09:47.535] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:47.535] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:47.535] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:09:47.535] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:47.535] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:47.535] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:47.535] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:47.538] | : . ' , ; ` | : init: TRUE
[08:09:47.538] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:09:47.538] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:09:47.538] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:09:47.538] | : . ' , ; ` | : .  list()
[08:09:47.538] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:09:47.539] | : . ' , ; ` | : .  list()
[08:09:47.539] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:09:47.539] | : . ' , ; ` | : . Dotted pair list of 2
[08:09:47.539] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:09:47.539] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:09:47.540] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:09:47.540] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:09:47.540] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:09:47.540] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:09:47.541] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:09:47.541] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:09:47.541] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:09:47.745] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:09:47.745] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:09:47.745] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:09:47.745] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:09:47.745] | : . ' , ; ` | : New stack:
[08:09:47.745] | : . ' , ; ` | : List of 1
[08:09:47.745] | : . ' , ; ` | :  $ :function (..., workers = 2L, envir = parent.frame())  
[08:09:47.745] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
[08:09:47.745] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:09:47.745] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:47.745] | : . ' , ; ` | :     ...)  
[08:09:47.745] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:47.745] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:47.745] | : . ' , ; ` | :   ..- attr(*, "tweaks")=List of 1
[08:09:47.745] | : . ' , ; ` | :   .. ..$ workers: int 2
[08:09:47.745] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(multicore, workers = 2L)
[08:09:47.745] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55bd2ad9ddb0> 
[08:09:47.745] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:47.745] | : . ' , ; ` | :     ...)  
[08:09:47.745] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:47.745] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:47.749] | : . ' , ; ` | : Old stack:
[08:09:47.750] | : . ' , ; ` | : List of 1
[08:09:47.750] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:47.750] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:47.750] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:09:47.750] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:47.750] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:47.750] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:47.750] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:47.750] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55bd2a721348> 
[08:09:47.750] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:47.750] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:47.750] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:47.755] | : . ' , ; ` | : Not identical
[08:09:47.755] | : . ' , ; ` | : all.equal() for future ...
[08:09:47.755] | : . ' , ; ` | : . List of 2
[08:09:47.755] | : . ' , ; ` | : .  $ target :function (..., workers = 2L, envir = parent.frame())  
[08:09:47.755] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
[08:09:47.755] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:09:47.755] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:47.755] | : . ' , ; ` | : .     ...)  
[08:09:47.755] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:47.755] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:47.755] | : . ' , ; ` | : .   ..- attr(*, "tweaks")=List of 1
[08:09:47.755] | : . ' , ; ` | : .   .. ..$ workers: int 2
[08:09:47.755] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(multicore, workers = 2L)
[08:09:47.755] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55bd2ad9ddb0> 
[08:09:47.755] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:47.755] | : . ' , ; ` | : .     ...)  
[08:09:47.755] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:47.755] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:09:47.755] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:09:47.755] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:09:47.755] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:47.755] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:47.755] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:47.755] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:09:47.755] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x55bd2a721348> 
[08:09:47.755] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:09:47.755] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:09:47.761] | : . ' , ; ` | : . Formals differ
[08:09:47.761] | : . ' , ; ` | : all.equal() for future ... done
[08:09:47.761] | : . ' , ; ` | : Future strategies differ at level 1
[08:09:47.762] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:09:47.762] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:09:47.762] | : . ' , ; ` | List of future strategies:
[08:09:47.762] | : . ' , ; ` | 1. multicore:
[08:09:47.762] | : . ' , ; ` |    - args: function (..., workers = 2L, envir = parent.frame())
[08:09:47.762] | : . ' , ; ` |    - tweaked: TRUE
[08:09:47.762] | : . ' , ; ` |    - call: plan(multicore, workers = 2L)
[08:09:47.762] | : . ' , ; ` | List of 1
[08:09:47.762] | : . ' , ; ` |  $ :function (..., workers = 2L, envir = parent.frame())  
[08:09:47.762] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
[08:09:47.762] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:09:47.762] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:47.762] | : . ' , ; ` |     ...)  
[08:09:47.762] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:47.762] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:47.762] | : . ' , ; ` |   ..- attr(*, "tweaks")=List of 1
[08:09:47.762] | : . ' , ; ` |   .. ..$ workers: int 2
[08:09:47.762] | : . ' , ; ` |   ..- attr(*, "call")= language plan(multicore, workers = 2L)
[08:09:47.762] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x55bd2ad9ddb0> 
[08:09:47.762] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:09:47.762] | : . ' , ; ` |     ...)  
[08:09:47.762] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:09:47.762] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:09:47.766] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:09:47.766] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:09:47.766] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:09:47.766] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:09:47.767] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:09:47.767] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:09:47.767] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:09:47.767] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:09:47.768] | : readImmediateCondition() ...
[08:09:47.768] | : . Path: ‘/tmp/RtmpxVwR85/.future/immediateConditions’
[08:09:47.768] | : . Number of RDS files: 0
[08:09:47.769] | : . Returned conditions set:
[08:09:47.769] | : .  list()
[08:09:47.769] | : readImmediateCondition() ... done
[08:09:47.774] | : result() for MulticoreFuture ...
[08:09:47.774] | : result() for MulticoreFuture ... done
[08:09:47.774] | : signalConditions() ...
[08:09:47.774] | : . include = ‘immediateCondition’
[08:09:47.774] | : . exclude = 
[08:09:47.775] | : . resignal = FALSE
[08:09:47.775] | : . Number of conditions: 6
[08:09:47.775] | : .  int 6
[08:09:47.775] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:47.776] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:47.776] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:47.776] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:47.776] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:47.776] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:47.776] | : signalConditions() ... done
[08:09:47.776] | result() for MulticoreFuture ... done
[08:09:47.776] | result() for MulticoreFuture ...
[08:09:47.777] | result() for MulticoreFuture ... done
[08:09:47.777] | signalConditions() ...
[08:09:47.777] | : include = ‘immediateCondition’
[08:09:47.777] | : exclude = 
[08:09:47.777] | : resignal = FALSE
[08:09:47.777] | : Number of conditions: 6
[08:09:47.777] | :  int 6
[08:09:47.778] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:47.778] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:47.778] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:47.778] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:47.778] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:47.778] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:47.779] | signalConditions() ... done
[08:09:47.779] | relay stdout ...
[08:09:47.779] | relay stdout ... done
[08:09:47.779] | check for misuse ...
[08:09:47.779] | check for misuse ... done
[08:09:47.779] | relay conditions ...
[08:09:47.779] | : Future state: ‘finished’
[08:09:47.779] | : result() for MulticoreFuture ...
[08:09:47.780] | : result() for MulticoreFuture ... done
[08:09:47.780] | : signalConditions() ...
[08:09:47.780] | : . include = ‘condition’
[08:09:47.780] | : . exclude = ‘immediateCondition’
[08:09:47.780] | : . resignal = TRUE
[08:09:47.780] | : . Number of conditions: 6
[08:09:47.780] | : .  int 6
[08:09:47.784] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:47.784] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:09:47.497] | : . ' , attachPackages() ...
[08:09:47.785] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:47.785] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:09:47.497] | : . ' , ; packages: [n=1] ‘future’
[08:09:47.785] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:47.785] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:09:47.498] | : . ' , attachPackages() ... done
[08:09:47.785] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:47.786] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:09:47.498] | : . ' , attachPackages() ...
[08:09:47.786] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:47.786] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:09:47.498] | : . ' , ; packages: [n=0] 
[08:09:47.786] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:09:47.786] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:09:47.498] | : . ' , attachPackages() ... done
[08:09:47.786] | : signalConditions() ... done
[08:09:47.787] | relay conditions ... done
[08:09:47.787] value() for MulticoreFuture (<unnamed-1>) ... done
*** requestCore() - timeout ... DONE

> message("*** requestCore() ... DONE")
*** requestCore() ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.1s, sys.self=0.01s, elapsed=0.4s, user.child=0.05s, sys.child=0.03s
Test ‘requestCore’ ... success
> 
