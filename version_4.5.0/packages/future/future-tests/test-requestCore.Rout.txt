
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script incl/testme/test-requestCore.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("requestCore")
Test ‘requestCore’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-requestCore.R’

> library(future)
[10:54:12.174] Option 'future.startup.script': TRUE
[10:54:12.175] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[10:54:12.175] Future startup scripts found: <none>

> message("*** requestCore() ...")
*** requestCore() ...

> message("*** requestCore() - exceptions ...")
*** requestCore() - exceptions ...

> res <- try(requestCore(function() {
+ }, workers = 0), silent = TRUE)

> stopifnot(inherits(res, "try-error"))

> res <- try(requestCore(function() {
+ }, timeout = -1), silent = TRUE)

> stopifnot(inherits(res, "try-error"))

> res <- try(requestCore(function() {
+ }, alpha = 0), silent = TRUE)

> stopifnot(inherits(res, "try-error"))

> message("*** requestCore() - exceptions ... DONE")
*** requestCore() - exceptions ... DONE

> if (supportsMulticore()) {
+     message("*** requestCore() - timeout ...")
+     plan(multicore, workers = 2)
+     a %<-% {
+         Sys.sleep(0. .... [TRUNCATED] 
*** requestCore() - timeout ...
[10:54:12.180] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:54:12.180] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:54:12.181] |  :  all.equal() for FutureStrategyList ...
[10:54:12.181] |  :  .  New stack:
[10:54:12.181] |  :  .  List of 1
[10:54:12.181] |  :  .   $ :function (..., workers = 2L, envir = parent.frame())  
[10:54:12.181] |  :  .    ..- attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
[10:54:12.181] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:54:12.181] |  :  .      ...)  
[10:54:12.181] |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:54:12.181] |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:54:12.181] |  :  .    ..- attr(*, "tweaks")=List of 1
[10:54:12.181] |  :  .    .. ..$ workers: int 2
[10:54:12.181] |  :  .    ..- attr(*, "call")= language plan(multicore, workers = 2L)
[10:54:12.181] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:54:12.186] |  :  .  Old stack:
[10:54:12.186] |  :  .  List of 1
[10:54:12.186] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:54:12.186] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:54:12.186] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:54:12.186] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:54:12.186] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:54:12.186] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:54:12.186] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:54:12.190] |  :  .  Not identical
[10:54:12.190] |  :  .  all.equal() for future ...
[10:54:12.190] |  :  .  |  List of 2
[10:54:12.190] |  :  .  |   $ target :function (..., workers = 2L, envir = parent.frame())  
[10:54:12.190] |  :  .  |    ..- attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
[10:54:12.190] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:54:12.190] |  :  .  |      ...)  
[10:54:12.190] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:54:12.190] |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:54:12.190] |  :  .  |    ..- attr(*, "tweaks")=List of 1
[10:54:12.190] |  :  .  |    .. ..$ workers: int 2
[10:54:12.190] |  :  .  |    ..- attr(*, "call")= language plan(multicore, workers = 2L)
[10:54:12.190] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:54:12.190] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:54:12.190] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:54:12.190] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:54:12.190] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:54:12.190] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:54:12.194] |  :  .  |  Formals differ
[10:54:12.194] |  :  .  all.equal() for future ... done
[10:54:12.195] |  :  .  Future strategies differ at level 1
[10:54:12.195] |  :  all.equal() for FutureStrategyList ... done
[10:54:12.195] |  :  plan(): Setting new future strategy stack:
[10:54:12.195] |  :  List of future strategies:
[10:54:12.195] |  :  1. multicore:
[10:54:12.195] |  :     - args: function (..., workers = 2L, envir = parent.frame())
[10:54:12.195] |  :     - tweaked: TRUE
[10:54:12.195] |  :     - call: plan(multicore, workers = 2L)
[10:54:12.195] |  :  List of 1
[10:54:12.195] |  :   $ :function (..., workers = 2L, envir = parent.frame())  
[10:54:12.195] |  :    ..- attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
[10:54:12.195] |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:54:12.195] |  :      ...)  
[10:54:12.195] |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:54:12.195] |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:54:12.195] |  :    ..- attr(*, "tweaks")=List of 1
[10:54:12.195] |  :    .. ..$ workers: int 2
[10:54:12.195] |  :    ..- attr(*, "call")= language plan(multicore, workers = 2L)
[10:54:12.195] |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:54:12.198] |  :  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:54:12.198] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:54:12.198] |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:54:12.199] |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:54:12.199] |  :  .  Legacy shutdown of cluster workers ...
[10:54:12.199] |  :  .  |  Stopping existing cluster ...
[10:54:12.199] |  :  .  |  :  No pre-existing cluster. Skipping
[10:54:12.199] |  :  .  |  Stopping existing cluster ... done
[10:54:12.199] |  :  .  Legacy shutdown of cluster workers ... done
[10:54:12.199] |  :  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:54:12.199] |  :  plan(): plan_init() of ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:54:12.199] |  :  .  function (..., workers = 2L, envir = parent.frame())  
[10:54:12.199] |  :  .   - attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
[10:54:12.199] |  :  .   - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:54:12.199] |  :  .      ...)  
[10:54:12.199] |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:54:12.199] |  :  .   - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:54:12.199] |  :  .   - attr(*, "tweaks")=List of 1
[10:54:12.199] |  :  .    ..$ workers: int 2
[10:54:12.199] |  :  .   - attr(*, "call")= language plan(multicore, workers = 2L)
[10:54:12.202] |  :  .  init: NULL
[10:54:12.202] |  :  plan(): plan_init() of ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[10:54:12.202] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:54:12.202] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:54:12.202] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:54:12.202] |  :  Backend function: <‘NULL’>
[10:54:12.203] |  :  Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:54:12.203] |  :  plan(): nbrOfWorkers() = 2
[10:54:12.203] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:54:12.203] plan(<tweaked>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:54:12.205] getGlobalsAndPackages() ...
[10:54:12.205] |  Searching for globals ...
[10:54:12.211] |  :  globals found: [2] ‘{’, ‘Sys.sleep’
[10:54:12.211] |  Searching for globals ... DONE
[10:54:12.211] |  Resolving globals: FALSE
[10:54:12.212] |  Search for packages associated with the globals ...
[10:54:12.212] |  :  Packages associated with globals: [1] ‘base’
[10:54:12.212] |  :  Packages: [1] ‘base’
[10:54:12.212] |  Search for packages associated with the globals ... DONE
[10:54:12.212] |  Packages after dropping 'base': [0] 
[10:54:12.212] |  globals: [0] 
[10:54:12.213] |  packages: [0] 
[10:54:12.213] getGlobalsAndPackages() ... done
[10:54:12.213] run() for Future (‘Future’) ...
[10:54:12.213] |  state: ‘created’
[10:54:12.213] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:54:12.214] |  :  makeFutureBackend(<tweaked>) ...
[10:54:12.214] |  :  .  Backend function: <‘NULL’>
[10:54:12.224] |  :  .  Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:54:12.224] |  :  makeFutureBackend(<tweaked>) ... done
[10:54:12.225] |  plan(<tweaked>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:54:12.225] |  Using MulticoreFutureBackend ...
[10:54:12.225] |  :  Launching futures ...
[10:54:12.225] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:54:12.225] |  :  .  |  getFutureData() ...
[10:54:12.226] |  :  .  |  :  getFutureCore() ...
[10:54:12.226] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:54:12.226] |  :  .  |  :  getFutureCore() ... done
[10:54:12.226] |  :  .  |  :  getFutureCapture() ...
[10:54:12.226] |  :  .  |  :  getFutureCapture() ... done
[10:54:12.226] |  :  .  |  :  getFutureContext() ...
[10:54:12.226] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:54:12.226] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:54:12.227] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:54:12.227] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:54:12.227] |  :  .  |  :  getFutureContext() ... done
[10:54:12.227] |  :  .  |  getFutureData() ... done
[10:54:12.227] |  :  .  |  requestCore(..., workers = 2) ...
[10:54:12.228] |  :  .  |  requestCore(..., workers = 2) ...
[10:54:12.231] |  :  .  |  MulticoreFuture started
[10:54:12.231] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:54:12.231] |  :  Launching futures ... done
[10:54:12.232] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:54:12.232] |  Using MulticoreFutureBackend ... done
[10:54:12.232] run() for Future (‘MulticoreFuture’) ... done
Error in requestCore(function() { : 
  argument "alpha" is missing, with no default
[10:54:12.233] |  :  .  |  attachPackages() ...
[10:54:12.234] |  :  .  |  :  packages: [n=1] ‘future’
[10:54:12.234] |  :  .  |  attachPackages() ... DONE
[10:54:12.234] |  :  .  |  attachPackages() ...
[10:54:12.234] |  :  .  |  :  packages: [n=0] 
[10:54:12.235] |  :  .  |  attachPackages() ... DONE
[10:54:12.235] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:54:12.235] result() for MulticoreFuture ...
[10:54:12.235] |  :  .  |  :  Getting full stack: [n=1] ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:54:12.236] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:54:12.237] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:54:12.237] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:54:12.237] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:54:12.237] |  :  .  |  :  .  |  New stack:
[10:54:12.237] |  :  .  |  :  .  |  List of 1
[10:54:12.237] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:54:12.237] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:54:12.237] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:54:12.237] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:54:12.237] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:54:12.237] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:54:12.237] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:54:12.242] |  :  .  |  :  .  |  Old stack:
[10:54:12.243] |  :  .  |  :  .  |  List of 1
[10:54:12.243] |  :  .  |  :  .  |   $ :function (..., workers = 2L, envir = parent.frame())  
[10:54:12.243] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
[10:54:12.243] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:54:12.243] |  :  .  |  :  .  |      ...)  
[10:54:12.243] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:54:12.243] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:54:12.243] |  :  .  |  :  .  |    ..- attr(*, "tweaks")=List of 1
[10:54:12.243] |  :  .  |  :  .  |    .. ..$ workers: int 2
[10:54:12.243] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(multicore, workers = 2L)
[10:54:12.243] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x561d6b0878f8> 
[10:54:12.243] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:54:12.243] |  :  .  |  :  .  |      ...)  
[10:54:12.243] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:54:12.243] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:54:12.250] |  :  .  |  :  .  |  Not identical
[10:54:12.250] |  :  .  |  :  .  |  all.equal() for future ...
[10:54:12.250] |  :  .  |  :  .  |  :  List of 2
[10:54:12.250] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:54:12.250] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:54:12.250] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:54:12.250] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:54:12.250] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:54:12.250] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:54:12.250] |  :  .  |  :  .  |  :   $ current:function (..., workers = 2L, envir = parent.frame())  
[10:54:12.250] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
[10:54:12.250] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:54:12.250] |  :  .  |  :  .  |  :      ...)  
[10:54:12.250] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:54:12.250] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:54:12.250] |  :  .  |  :  .  |  :    ..- attr(*, "tweaks")=List of 1
[10:54:12.250] |  :  .  |  :  .  |  :    .. ..$ workers: int 2
[10:54:12.250] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(multicore, workers = 2L)
[10:54:12.250] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x561d6b0878f8> 
[10:54:12.250] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:54:12.250] |  :  .  |  :  .  |  :      ...)  
[10:54:12.250] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:54:12.264] |  :  .  |  :  .  |  :  Formals differ
[10:54:12.264] |  :  .  |  :  .  |  all.equal() for future ... done
[10:54:12.264] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:54:12.264] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:54:12.265] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:54:12.265] |  :  .  |  :  .  List of future strategies:
[10:54:12.265] |  :  .  |  :  .  1. sequential:
[10:54:12.265] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:54:12.265] |  :  .  |  :  .     - tweaked: FALSE
[10:54:12.265] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:54:12.266] |  :  .  |  :  .  List of 1
[10:54:12.266] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:54:12.266] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:54:12.266] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:54:12.266] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:54:12.266] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:54:12.266] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:54:12.266] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:54:12.271] |  :  .  |  :  .  plan(): plan_cleanup(‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:54:12.271] |  :  .  |  :  .  plan(): plan_cleanup(‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:54:12.272] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:54:12.272] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:54:12.272] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:54:12.272] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:54:12.273] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:54:12.273] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:54:12.273] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:54:12.273] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:54:12.478] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:54:12.479] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:54:12.479] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:54:12.479] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:54:12.479] |  :  .  |  :  .  |  :  New stack:
[10:54:12.479] |  :  .  |  :  .  |  :  List of 1
[10:54:12.479] |  :  .  |  :  .  |  :   $ :function (..., workers = 2L, envir = parent.frame())  
[10:54:12.479] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
[10:54:12.479] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:54:12.479] |  :  .  |  :  .  |  :      ...)  
[10:54:12.479] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:54:12.479] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:54:12.479] |  :  .  |  :  .  |  :    ..- attr(*, "tweaks")=List of 1
[10:54:12.479] |  :  .  |  :  .  |  :    .. ..$ workers: int 2
[10:54:12.479] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(multicore, workers = 2L)
[10:54:12.479] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x561d6b0878f8> 
[10:54:12.479] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:54:12.479] |  :  .  |  :  .  |  :      ...)  
[10:54:12.479] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:54:12.479] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:54:12.484] |  :  .  |  :  .  |  :  Old stack:
[10:54:12.484] |  :  .  |  :  .  |  :  List of 1
[10:54:12.484] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:54:12.484] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:54:12.484] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:54:12.484] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:54:12.484] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:54:12.484] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:54:12.484] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:54:12.486] |  :  .  |  :  .  |  :  Not identical
[10:54:12.486] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:54:12.486] |  :  .  |  :  .  |  :  .  List of 2
[10:54:12.486] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = 2L, envir = parent.frame())  
[10:54:12.486] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
[10:54:12.486] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:54:12.486] |  :  .  |  :  .  |  :  .      ...)  
[10:54:12.486] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:54:12.486] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:54:12.486] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweaks")=List of 1
[10:54:12.486] |  :  .  |  :  .  |  :  .    .. ..$ workers: int 2
[10:54:12.486] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(multicore, workers = 2L)
[10:54:12.486] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x561d6b0878f8> 
[10:54:12.486] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:54:12.486] |  :  .  |  :  .  |  :  .      ...)  
[10:54:12.486] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:54:12.486] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:54:12.486] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:54:12.486] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:54:12.486] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:54:12.486] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:54:12.486] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:54:12.491] |  :  .  |  :  .  |  :  .  Formals differ
[10:54:12.492] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:54:12.492] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:54:12.492] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:54:12.492] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:54:12.492] |  :  .  |  :  .  |  List of future strategies:
[10:54:12.492] |  :  .  |  :  .  |  1. multicore:
[10:54:12.492] |  :  .  |  :  .  |     - args: function (..., workers = 2L, envir = parent.frame())
[10:54:12.492] |  :  .  |  :  .  |     - tweaked: TRUE
[10:54:12.492] |  :  .  |  :  .  |     - call: plan(multicore, workers = 2L)
[10:54:12.492] |  :  .  |  :  .  |  List of 1
[10:54:12.492] |  :  .  |  :  .  |   $ :function (..., workers = 2L, envir = parent.frame())  
[10:54:12.492] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
[10:54:12.492] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:54:12.492] |  :  .  |  :  .  |      ...)  
[10:54:12.492] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:54:12.492] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:54:12.492] |  :  .  |  :  .  |    ..- attr(*, "tweaks")=List of 1
[10:54:12.492] |  :  .  |  :  .  |    .. ..$ workers: int 2
[10:54:12.492] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(multicore, workers = 2L)
[10:54:12.492] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x561d6b0878f8> 
[10:54:12.492] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:54:12.492] |  :  .  |  :  .  |      ...)  
[10:54:12.492] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:54:12.492] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:54:12.498] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:54:12.498] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:54:12.498] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:54:12.498] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:54:12.498] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:54:12.498] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:54:12.498] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:54:12.499] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:54:12.499] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:54:12.500] |  readImmediateCondition() ...
[10:54:12.500] |    - path: ‘/tmp/RtmpNzNS7J/.future/immediateConditions’
[10:54:12.500] |   - Number of RDS files: 0
[10:54:12.500] |  readImmediateCondition() ... DONE
[10:54:12.504] |  result() for MulticoreFuture ...
[10:54:12.504] |  result() for MulticoreFuture ... done
[10:54:12.505] result() for MulticoreFuture ... done
[10:54:12.505] result() for MulticoreFuture ...
[10:54:12.505] result() for MulticoreFuture ... done
*** requestCore() - timeout ... DONE

> message("*** requestCore() ... DONE")
*** requestCore() ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.1s, sys.self=0.01s, elapsed=0.4s, user.child=0.05s, sys.child=0.03s
Test ‘requestCore’ ... success
> 
