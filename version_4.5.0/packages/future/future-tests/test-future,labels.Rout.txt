
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script inst/testme/test-future,labels.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("future,labels")
Test ‘future,labels’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-future,labels.R’

> library(future)
[08:08:00.861] Option 'future.startup.script': TRUE
[08:08:00.862] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:08:00.862] Future startup scripts found: <none>

> message("*** Futures - labels ...")
*** Futures - labels ...

> strategies <- supportedStrategies()

> for (strategy in strategies) {
+     message(sprintf("- plan('%s') ...", strategy))
+     plan(strategy)
+     for (label in list(NULL, sprintf("str ..." ... [TRUNCATED] 
- plan('sequential') ...
[08:08:00.876] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.876] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:00.876] | : all.equal() for FutureStrategyList ...
[08:08:00.876] | : . New stack:
[08:08:00.876] | : . List of 1
[08:08:00.876] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.876] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.876] | : .   ..- attr(*, "init")= logi TRUE
[08:08:00.876] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.876] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.876] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.876] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:00.876] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.881] | : . Old stack:
[08:08:00.881] | : . List of 1
[08:08:00.881] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.881] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.881] | : .   ..- attr(*, "init")= logi TRUE
[08:08:00.881] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.881] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.881] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.881] | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:00.881] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.883] | : . Not identical
[08:08:00.883] | : . all.equal() for future ...
[08:08:00.884] | : . ' List of 2
[08:08:00.884] | : . '  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.884] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.884] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:00.884] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.884] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.884] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.884] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:00.884] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.884] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.884] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:00.884] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.884] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.884] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.884] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:08:00.888] | : . all.equal() for future ... done
[08:08:00.888] | : all.equal() for FutureStrategyList ... done
[08:08:00.888] | : plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.888] | : List of future strategies:
[08:08:00.888] | : 1. sequential:
[08:08:00.888] | :    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.888] | :    - tweaked: FALSE
[08:08:00.888] | :    - call: plan(sequential)
[08:08:00.889] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:00.889] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.889] future(..., label = NULL) ...
[08:08:00.889] | lazy: FALSE
[08:08:00.889] | stdout: TRUE
[08:08:00.890] | conditions: [n=1] ‘condition’
[08:08:00.890] | gc: FALSE
[08:08:00.890] | earlySignal: FALSE
[08:08:00.890] | getGlobalsAndPackages() ...
[08:08:00.890] | : Searching for globals ...
[08:08:00.897] | : . globals found: [0] 
[08:08:00.897] | : Searching for globals ... done
[08:08:00.897] | : globals: [0] <none>
[08:08:00.898] | : packages: [0] <none>
[08:08:00.898] | getGlobalsAndPackages() ... done
[08:08:00.898] | run() for ‘Future’ (<unnamed-1>) ...
[08:08:00.898] | : state: ‘created’
[08:08:00.899] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.899] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:00.899] | : . ' function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.899] | : . '  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.899] | : . '  - attr(*, "init")= logi TRUE
[08:08:00.899] | : . '  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.899] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.899] | : . '  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.899] | : . '  - attr(*, "call")= language plan(sequential)
[08:08:00.902] | : . ' init: TRUE
[08:08:00.903] | : . ' makeFutureBackend(<sequential>) ...
[08:08:00.903] | : . ' , Backend function: <‘NULL’>
[08:08:00.903] | : . ' , Evaluator tweak arguments: [n=0]
[08:08:00.903] | : . ' ,  list()
[08:08:00.903] | : . ' , Evaluator formal arguments: [n=2]
[08:08:00.903] | : . ' ,  list()
[08:08:00.904] | : . ' , Backend factory arguments: [n=2]
[08:08:00.904] | : . ' , Dotted pair list of 2
[08:08:00.904] | : . ' ,  $ gc         : logi FALSE
[08:08:00.904] | : . ' ,  $ earlySignal: logi FALSE
[08:08:00.905] | : . ' , Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:00.905] | : . ' makeFutureBackend(<sequential>) ... done
[08:08:00.905] | : . plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:00.905] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.905] | : Using SequentialFutureBackend ...
[08:08:00.905] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:00.906] | : . Launching futures ...
[08:08:00.906] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:00.906] | : . ' , getFutureData() ...
[08:08:00.906] | : . ' , ; getFutureCore() ...
[08:08:00.906] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:00.906] | : . ' , ; getFutureCore() ... done
[08:08:00.907] | : . ' , ; getFutureCapture() ...
[08:08:00.907] | : . ' , ; getFutureCapture() ... done
[08:08:00.907] | : . ' , ; getFutureContext() ...
[08:08:00.907] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.907] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:00.907] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.907] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:00.907] | : . ' , ; getFutureContext() ... done
[08:08:00.908] | : . ' , getFutureData() ... done
[08:08:00.910] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.910] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:00.910] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.911] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.911] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.911] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:00.911] | : . ' , ; ` | New stack:
[08:08:00.911] | : . ' , ; ` | List of 1
[08:08:00.911] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.911] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.911] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:00.911] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.911] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.911] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.911] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.911] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.914] | : . ' , ; ` | Old stack:
[08:08:00.914] | : . ' , ; ` | List of 1
[08:08:00.914] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.914] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.914] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:00.914] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.914] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.914] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.914] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:00.914] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd76827c8> 
[08:08:00.914] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.914] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.914] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.917] | : . ' , ; ` | Not identical
[08:08:00.917] | : . ' , ; ` | all.equal() for future ...
[08:08:00.917] | : . ' , ; ` | : List of 2
[08:08:00.917] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.917] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.917] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:00.917] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.917] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.917] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.917] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.917] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.917] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.917] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.917] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.917] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.917] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.917] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.917] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd76827c8> 
[08:08:00.917] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.917] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.922] | : . ' , ; ` | all.equal() for future ... done
[08:08:00.922] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:00.922] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.922] | : . ' , ; ` List of future strategies:
[08:08:00.922] | : . ' , ; ` 1. sequential:
[08:08:00.922] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.922] | : . ' , ; `    - tweaked: FALSE
[08:08:00.922] | : . ' , ; `    - call: plan(sequential)
[08:08:00.923] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.923] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.926] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.926] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.926] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.926] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:00.927] | : . ' , ; ` | : New stack:
[08:08:00.927] | : . ' , ; ` | : List of 1
[08:08:00.927] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.927] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.927] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.927] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.927] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.927] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.927] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.927] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd76827c8> 
[08:08:00.927] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.927] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.927] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.930] | : . ' , ; ` | : Old stack:
[08:08:00.930] | : . ' , ; ` | : List of 1
[08:08:00.930] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.930] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.930] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.930] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.930] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.930] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.930] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.930] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd76827c8> 
[08:08:00.930] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.930] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.930] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.933] | : . ' , ; ` | : Identical
[08:08:00.933] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:00.933] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.933] | : . ' , ; ` | List of future strategies:
[08:08:00.933] | : . ' , ; ` | 1. sequential:
[08:08:00.933] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.933] | : . ' , ; ` |    - tweaked: FALSE
[08:08:00.933] | : . ' , ; ` |    - call: plan(sequential)
[08:08:00.934] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.934] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.934] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.937] | : . ' , SequentialFuture started (and completed)
[08:08:00.937] | : . ' , signalConditions() ...
[08:08:00.937] | : . ' , ; include = ‘immediateCondition’
[08:08:00.937] | : . ' , ; exclude = 
[08:08:00.937] | : . ' , ; resignal = FALSE
[08:08:00.937] | : . ' , ; Number of conditions: 6
[08:08:00.937] | : . ' , ;  int 6
[08:08:00.938] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.938] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.938] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.938] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.938] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.938] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.939] | : . ' , signalConditions() ... done
[08:08:00.939] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:00.939] | : . Launching futures ... done
[08:08:00.939] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:00.939] | : Using SequentialFutureBackend ... done
[08:08:00.939] | run() for ‘Future’ (<unnamed-1>) ... done
[08:08:00.939] future(..., label = NULL) ... done
SequentialFuture:
Label: <unnamed-1>
Expression:
[1] 42
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: 754d324b3d8990aec0ae0b0efb44e3b3-1
Owner process: 754d324b3d8990aec0ae0b0efb44e3b3
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
Value: 39 bytes of class ‘numeric’
Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
Duration: 0.01712012 secs (started 2025-06-17 08:08:00.909136)
Worker process: 754d324b3d8990aec0ae0b0efb44e3b3
[08:08:00.941] value() for SequentialFuture (<unnamed-1>) ...
[08:08:00.941] | signalConditions() ...
[08:08:00.941] | : include = ‘immediateCondition’
[08:08:00.941] | : exclude = 
[08:08:00.941] | : resignal = FALSE
[08:08:00.941] | : Number of conditions: 6
[08:08:00.941] | :  int 6
[08:08:00.942] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.942] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.942] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.942] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.942] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.942] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.943] | signalConditions() ... done
[08:08:00.943] | relay stdout ...
[08:08:00.943] | relay stdout ... done
[08:08:00.943] | check for misuse ...
[08:08:00.943] | check for misuse ... done
[08:08:00.943] | relay conditions ...
[08:08:00.943] | : Future state: ‘finished’
[08:08:00.943] | : signalConditions() ...
[08:08:00.943] | : . include = ‘condition’
[08:08:00.943] | : . exclude = ‘immediateCondition’
[08:08:00.944] | : . resignal = TRUE
[08:08:00.944] | : . Number of conditions: 6
[08:08:00.944] | : .  int 6
[08:08:00.944] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.944] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.909] | : . ' , attachPackages() ...
[08:08:00.944] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.945] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.909] | : . ' , ; packages: [n=1] ‘future’
[08:08:00.945] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.945] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.909] | : . ' , attachPackages() ... done
[08:08:00.945] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.945] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.909] | : . ' , attachPackages() ...
[08:08:00.945] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.945] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.909] | : . ' , ; packages: [n=0] 
[08:08:00.945] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.945] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.910] | : . ' , attachPackages() ... done
[08:08:00.946] | : signalConditions() ... done
[08:08:00.946] | relay conditions ... done
[08:08:00.946] value() for SequentialFuture (<unnamed-1>) ... done
[08:08:00.947] future(..., label = NULL) ...
[08:08:00.947] | lazy: FALSE
[08:08:00.947] | stdout: TRUE
[08:08:00.947] | conditions: [n=1] ‘condition’
[08:08:00.947] | gc: FALSE
[08:08:00.948] | earlySignal: FALSE
[08:08:00.948] | getGlobalsAndPackages() ...
[08:08:00.948] | : Searching for globals ...
[08:08:00.952] | : . globals found: [1] ‘{’
[08:08:00.952] | : Searching for globals ... done
[08:08:00.952] | : Resolving globals: FALSE
[08:08:00.952] | : Search for packages associated with the globals ...
[08:08:00.952] | : . Packages associated with globals: [1] ‘base’
[08:08:00.953] | : . Packages: [1] ‘base’
[08:08:00.953] | : Search for packages associated with the globals ... done
[08:08:00.953] | : Packages after dropping 'base': [0] 
[08:08:00.953] | : globals: [0] 
[08:08:00.953] | : packages: [0] 
[08:08:00.953] | getGlobalsAndPackages() ... done
[08:08:00.954] | run() for ‘Future’ (<unnamed-2>) ...
[08:08:00.954] | : state: ‘created’
[08:08:00.954] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.954] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.954] | : Using SequentialFutureBackend ...
[08:08:00.954] | : . Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:08:00.954] | : . Launching futures ...
[08:08:00.954] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:00.954] | : . ' , getFutureData() ...
[08:08:00.955] | : . ' , ; getFutureCore() ...
[08:08:00.955] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:00.955] | : . ' , ; getFutureCore() ... done
[08:08:00.955] | : . ' , ; getFutureCapture() ...
[08:08:00.955] | : . ' , ; getFutureCapture() ... done
[08:08:00.955] | : . ' , ; getFutureContext() ...
[08:08:00.955] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.955] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:00.955] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.955] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:00.956] | : . ' , ; getFutureContext() ... done
[08:08:00.956] | : . ' , getFutureData() ... done
[08:08:00.957] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.957] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:00.957] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.957] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.958] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.958] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:00.958] | : . ' , ; ` | New stack:
[08:08:00.958] | : . ' , ; ` | List of 1
[08:08:00.958] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.958] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.958] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:00.958] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.958] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.958] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.958] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.958] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.960] | : . ' , ; ` | Old stack:
[08:08:00.960] | : . ' , ; ` | List of 1
[08:08:00.960] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.960] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.960] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:00.960] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.960] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.960] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.960] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:00.960] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd76827c8> 
[08:08:00.960] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.960] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.960] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.963] | : . ' , ; ` | Not identical
[08:08:00.964] | : . ' , ; ` | all.equal() for future ...
[08:08:00.964] | : . ' , ; ` | : List of 2
[08:08:00.964] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.964] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.964] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:00.964] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.964] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.964] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.964] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.964] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.964] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.964] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.964] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.964] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.964] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.964] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.964] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd76827c8> 
[08:08:00.964] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.964] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.970] | : . ' , ; ` | all.equal() for future ... done
[08:08:00.970] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:00.970] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.970] | : . ' , ; ` List of future strategies:
[08:08:00.970] | : . ' , ; ` 1. sequential:
[08:08:00.970] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.970] | : . ' , ; `    - tweaked: FALSE
[08:08:00.970] | : . ' , ; `    - call: plan(sequential)
[08:08:00.970] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.971] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.972] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.972] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.972] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.972] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:00.972] | : . ' , ; ` | : New stack:
[08:08:00.973] | : . ' , ; ` | : List of 1
[08:08:00.973] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.973] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.973] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.973] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.973] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.973] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.973] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.973] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd76827c8> 
[08:08:00.973] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.973] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.973] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.976] | : . ' , ; ` | : Old stack:
[08:08:00.976] | : . ' , ; ` | : List of 1
[08:08:00.976] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.976] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.976] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:00.976] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.976] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.976] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.976] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:00.976] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd76827c8> 
[08:08:00.976] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.976] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.976] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.979] | : . ' , ; ` | : Identical
[08:08:00.979] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:00.979] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:00.979] | : . ' , ; ` | List of future strategies:
[08:08:00.979] | : . ' , ; ` | 1. sequential:
[08:08:00.979] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:00.979] | : . ' , ; ` |    - tweaked: FALSE
[08:08:00.979] | : . ' , ; ` |    - call: plan(sequential)
[08:08:00.979] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:00.980] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.980] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:00.980] | : . ' , SequentialFuture started (and completed)
[08:08:00.980] | : . ' , signalConditions() ...
[08:08:00.980] | : . ' , ; include = ‘immediateCondition’
[08:08:00.980] | : . ' , ; exclude = 
[08:08:00.980] | : . ' , ; resignal = FALSE
[08:08:00.980] | : . ' , ; Number of conditions: 6
[08:08:00.980] | : . ' , ;  int 6
[08:08:00.981] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.981] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.981] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.981] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.981] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.981] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.982] | : . ' , signalConditions() ... done
[08:08:00.982] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:00.982] | : . Launching futures ... done
[08:08:00.982] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:00.982] | : Using SequentialFutureBackend ... done
[08:08:00.982] | run() for ‘Future’ (<unnamed-2>) ... done
[08:08:00.982] future(..., label = NULL) ... done
SequentialFuture:
Label: <unnamed-2>
Expression:
{
    42
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: 754d324b3d8990aec0ae0b0efb44e3b3-2
Owner process: 754d324b3d8990aec0ae0b0efb44e3b3
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
Value: 39 bytes of class ‘numeric’
Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
Duration: 0.01583481 secs (started 2025-06-17 08:08:00.956355)
Worker process: 754d324b3d8990aec0ae0b0efb44e3b3
[08:08:00.983] value() for SequentialFuture (<unnamed-2>) ...
[08:08:00.983] | signalConditions() ...
[08:08:00.983] | : include = ‘immediateCondition’
[08:08:00.983] | : exclude = 
[08:08:00.983] | : resignal = FALSE
[08:08:00.983] | : Number of conditions: 6
[08:08:00.983] | :  int 6
[08:08:00.984] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.984] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.984] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.984] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.984] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.984] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.984] | signalConditions() ... done
[08:08:00.985] | relay stdout ...
[08:08:00.985] | relay stdout ... done
[08:08:00.985] | check for misuse ...
[08:08:00.985] | check for misuse ... done
[08:08:00.985] | relay conditions ...
[08:08:00.985] | : Future state: ‘finished’
[08:08:00.985] | : signalConditions() ...
[08:08:00.985] | : . include = ‘condition’
[08:08:00.985] | : . exclude = ‘immediateCondition’
[08:08:00.985] | : . resignal = TRUE
[08:08:00.986] | : . Number of conditions: 6
[08:08:00.986] | : .  int 6
[08:08:00.986] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.986] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.956] | : . ' , attachPackages() ...
[08:08:00.986] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.986] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.956] | : . ' , ; packages: [n=1] ‘future’
[08:08:00.986] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.987] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.956] | : . ' , attachPackages() ... done
[08:08:00.988] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.988] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.956] | : . ' , attachPackages() ...
[08:08:00.988] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.988] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.956] | : . ' , ; packages: [n=0] 
[08:08:00.988] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:00.988] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.957] | : . ' , attachPackages() ... done
[08:08:00.988] | : signalConditions() ... done
[08:08:00.988] | relay conditions ... done
[08:08:00.988] value() for SequentialFuture (<unnamed-2>) ... done
[08:08:00.989] future(..., label = ‘strategy = sequential’) ...
[08:08:00.989] | lazy: FALSE
[08:08:00.989] | stdout: TRUE
[08:08:00.989] | conditions: [n=1] ‘condition’
[08:08:00.989] | gc: FALSE
[08:08:00.989] | earlySignal: FALSE
[08:08:00.989] | getGlobalsAndPackages() ...
[08:08:00.989] | : Searching for globals ...
[08:08:00.990] | : . globals found: [0] 
[08:08:00.990] | : Searching for globals ... done
[08:08:00.991] | : globals: [0] <none>
[08:08:00.991] | : packages: [0] <none>
[08:08:00.991] | getGlobalsAndPackages() ... done
[08:08:00.991] | run() for ‘Future’ (‘strategy = sequential’) ...
[08:08:00.991] | : state: ‘created’
[08:08:00.991] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.991] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.991] | : Using SequentialFutureBackend ...
[08:08:00.992] | : . Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:08:00.992] | : . Launching futures ...
[08:08:00.992] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:00.992] | : . ' , getFutureData() ...
[08:08:00.992] | : . ' , ; getFutureCore() ...
[08:08:00.992] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:00.992] | : . ' , ; getFutureCore() ... done
[08:08:00.992] | : . ' , ; getFutureCapture() ...
[08:08:00.992] | : . ' , ; getFutureCapture() ... done
[08:08:00.993] | : . ' , ; getFutureContext() ...
[08:08:00.993] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.993] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:00.993] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.993] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:00.993] | : . ' , ; getFutureContext() ... done
[08:08:00.993] | : . ' , getFutureData() ... done
[08:08:00.994] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:00.995] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:00.995] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:00.995] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:00.995] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:00.995] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:00.995] | : . ' , ; ` | New stack:
[08:08:00.995] | : . ' , ; ` | List of 1
[08:08:00.995] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.995] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.995] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:00.995] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.995] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.995] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.995] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:00.995] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:00.998] | : . ' , ; ` | Old stack:
[08:08:00.998] | : . ' , ; ` | List of 1
[08:08:00.998] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:00.998] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:00.998] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:00.998] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.998] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.998] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.998] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:00.998] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd76827c8> 
[08:08:00.998] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:00.998] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:00.998] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.001] | : . ' , ; ` | Not identical
[08:08:01.001] | : . ' , ; ` | all.equal() for future ...
[08:08:01.001] | : . ' , ; ` | : List of 2
[08:08:01.001] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.001] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.001] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:01.001] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.001] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.001] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.001] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.001] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.001] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.001] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.001] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.001] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.001] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.001] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:01.001] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd76827c8> 
[08:08:01.001] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.001] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.008] | : . ' , ; ` | all.equal() for future ... done
[08:08:01.008] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:01.008] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:01.008] | : . ' , ; ` List of future strategies:
[08:08:01.008] | : . ' , ; ` 1. sequential:
[08:08:01.008] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:01.008] | : . ' , ; `    - tweaked: FALSE
[08:08:01.008] | : . ' , ; `    - call: plan(sequential)
[08:08:01.009] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.009] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.010] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.010] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.010] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.011] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:01.011] | : . ' , ; ` | : New stack:
[08:08:01.011] | : . ' , ; ` | : List of 1
[08:08:01.011] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.011] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.011] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.011] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.011] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.011] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.011] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:01.011] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd76827c8> 
[08:08:01.011] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.011] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.011] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.014] | : . ' , ; ` | : Old stack:
[08:08:01.014] | : . ' , ; ` | : List of 1
[08:08:01.014] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.014] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.014] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.014] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.014] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.014] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.014] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:01.014] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd76827c8> 
[08:08:01.014] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.014] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.014] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.017] | : . ' , ; ` | : Identical
[08:08:01.017] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:01.017] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:01.018] | : . ' , ; ` | List of future strategies:
[08:08:01.018] | : . ' , ; ` | 1. sequential:
[08:08:01.018] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:01.018] | : . ' , ; ` |    - tweaked: FALSE
[08:08:01.018] | : . ' , ; ` |    - call: plan(sequential)
[08:08:01.018] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.018] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.018] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.018] | : . ' , SequentialFuture started (and completed)
[08:08:01.019] | : . ' , signalConditions() ...
[08:08:01.019] | : . ' , ; include = ‘immediateCondition’
[08:08:01.019] | : . ' , ; exclude = 
[08:08:01.019] | : . ' , ; resignal = FALSE
[08:08:01.019] | : . ' , ; Number of conditions: 6
[08:08:01.019] | : . ' , ;  int 6
[08:08:01.020] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.020] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.020] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.020] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.020] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.020] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.020] | : . ' , signalConditions() ... done
[08:08:01.020] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:01.020] | : . Launching futures ... done
[08:08:01.020] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:01.021] | : Using SequentialFutureBackend ... done
[08:08:01.021] | run() for ‘Future’ (‘strategy = sequential’) ... done
[08:08:01.021] future(..., label = ‘strategy = sequential’) ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
[1] 42
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: 754d324b3d8990aec0ae0b0efb44e3b3-3
Owner process: 754d324b3d8990aec0ae0b0efb44e3b3
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
Value: 39 bytes of class ‘numeric’
Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
Duration: 0.01660991 secs (started 2025-06-17 08:08:00.993829)
Worker process: 754d324b3d8990aec0ae0b0efb44e3b3
[08:08:01.021] value() for SequentialFuture (‘strategy = sequential’) ...
[08:08:01.022] | signalConditions() ...
[08:08:01.022] | : include = ‘immediateCondition’
[08:08:01.022] | : exclude = 
[08:08:01.022] | : resignal = FALSE
[08:08:01.022] | : Number of conditions: 6
[08:08:01.022] | :  int 6
[08:08:01.022] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.023] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.023] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.023] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.023] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.023] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.023] | signalConditions() ... done
[08:08:01.023] | relay stdout ...
[08:08:01.023] | relay stdout ... done
[08:08:01.023] | check for misuse ...
[08:08:01.024] | check for misuse ... done
[08:08:01.024] | relay conditions ...
[08:08:01.024] | : Future state: ‘finished’
[08:08:01.024] | : signalConditions() ...
[08:08:01.024] | : . include = ‘condition’
[08:08:01.024] | : . exclude = ‘immediateCondition’
[08:08:01.024] | : . resignal = TRUE
[08:08:01.024] | : . Number of conditions: 6
[08:08:01.024] | : .  int 6
[08:08:01.025] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.025] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.993] | : . ' , attachPackages() ...
[08:08:01.025] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.025] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.994] | : . ' , ; packages: [n=1] ‘future’
[08:08:01.025] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.025] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.994] | : . ' , attachPackages() ... done
[08:08:01.025] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.026] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.994] | : . ' , attachPackages() ...
[08:08:01.026] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.026] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.994] | : . ' , ; packages: [n=0] 
[08:08:01.027] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.027] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:00.994] | : . ' , attachPackages() ... done
[08:08:01.027] | : signalConditions() ... done
[08:08:01.027] | relay conditions ... done
[08:08:01.028] value() for SequentialFuture (‘strategy = sequential’) ... done
[08:08:01.028] future(..., label = ‘strategy = sequential’) ...
[08:08:01.028] | lazy: FALSE
[08:08:01.028] | stdout: TRUE
[08:08:01.028] | conditions: [n=1] ‘condition’
[08:08:01.028] | gc: FALSE
[08:08:01.028] | earlySignal: FALSE
[08:08:01.028] | getGlobalsAndPackages() ...
[08:08:01.028] | : Searching for globals ...
[08:08:01.031] | : . globals found: [1] ‘{’
[08:08:01.031] | : Searching for globals ... done
[08:08:01.032] | : Resolving globals: FALSE
[08:08:01.032] | : Search for packages associated with the globals ...
[08:08:01.032] | : . Packages associated with globals: [1] ‘base’
[08:08:01.032] | : . Packages: [1] ‘base’
[08:08:01.032] | : Search for packages associated with the globals ... done
[08:08:01.032] | : Packages after dropping 'base': [0] 
[08:08:01.032] | : globals: [0] 
[08:08:01.032] | : packages: [0] 
[08:08:01.033] | getGlobalsAndPackages() ... done
[08:08:01.033] | run() for ‘Future’ (‘strategy = sequential’) ...
[08:08:01.033] | : state: ‘created’
[08:08:01.033] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.033] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.033] | : Using SequentialFutureBackend ...
[08:08:01.033] | : . Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:08:01.033] | : . Launching futures ...
[08:08:01.034] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[08:08:01.034] | : . ' , getFutureData() ...
[08:08:01.034] | : . ' , ; getFutureCore() ...
[08:08:01.034] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:01.034] | : . ' , ; getFutureCore() ... done
[08:08:01.034] | : . ' , ; getFutureCapture() ...
[08:08:01.034] | : . ' , ; getFutureCapture() ... done
[08:08:01.034] | : . ' , ; getFutureContext() ...
[08:08:01.034] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.035] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:01.035] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.035] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:01.035] | : . ' , ; getFutureContext() ... done
[08:08:01.035] | : . ' , getFutureData() ... done
[08:08:01.036] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.036] | : . ' , ; Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:01.036] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.037] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.037] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.037] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:01.037] | : . ' , ; ` | New stack:
[08:08:01.037] | : . ' , ; ` | List of 1
[08:08:01.037] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.037] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.037] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:01.037] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.037] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.037] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.037] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.037] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.040] | : . ' , ; ` | Old stack:
[08:08:01.040] | : . ' , ; ` | List of 1
[08:08:01.040] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.040] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.040] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.040] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.040] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.040] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.040] | : . ' , ; ` |   ..- attr(*, "call")= language plan(sequential)
[08:08:01.040] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd76827c8> 
[08:08:01.040] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.040] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.040] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.043] | : . ' , ; ` | Not identical
[08:08:01.043] | : . ' , ; ` | all.equal() for future ...
[08:08:01.043] | : . ' , ; ` | : List of 2
[08:08:01.043] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.043] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.043] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:01.043] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.043] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.043] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.043] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.043] | : . ' , ; ` | :  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.043] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.043] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.043] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.043] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.043] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.043] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:01.043] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd76827c8> 
[08:08:01.043] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.043] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.049] | : . ' , ; ` | all.equal() for future ... done
[08:08:01.049] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:01.049] | : . ' , ; ` plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:01.050] | : . ' , ; ` List of future strategies:
[08:08:01.050] | : . ' , ; ` 1. sequential:
[08:08:01.050] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:01.050] | : . ' , ; `    - tweaked: FALSE
[08:08:01.050] | : . ' , ; `    - call: plan(sequential)
[08:08:01.050] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.050] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.052] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.052] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.052] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.052] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:01.052] | : . ' , ; ` | : New stack:
[08:08:01.052] | : . ' , ; ` | : List of 1
[08:08:01.052] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.052] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.052] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.052] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.052] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.052] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.052] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:01.052] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd76827c8> 
[08:08:01.052] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.052] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.052] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.055] | : . ' , ; ` | : Old stack:
[08:08:01.055] | : . ' , ; ` | : List of 1
[08:08:01.055] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.055] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.055] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.055] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.055] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.055] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.055] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(sequential)
[08:08:01.055] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd76827c8> 
[08:08:01.055] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.055] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.055] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.058] | : . ' , ; ` | : Identical
[08:08:01.058] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:01.059] | : . ' , ; ` | plan(): Skip setting new future backend stack because it is the same as the current one:
[08:08:01.059] | : . ' , ; ` | List of future strategies:
[08:08:01.059] | : . ' , ; ` | 1. sequential:
[08:08:01.059] | : . ' , ; ` |    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:01.059] | : . ' , ; ` |    - tweaked: FALSE
[08:08:01.059] | : . ' , ; ` |    - call: plan(sequential)
[08:08:01.059] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.059] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.059] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.060] | : . ' , SequentialFuture started (and completed)
[08:08:01.060] | : . ' , signalConditions() ...
[08:08:01.060] | : . ' , ; include = ‘immediateCondition’
[08:08:01.060] | : . ' , ; exclude = 
[08:08:01.060] | : . ' , ; resignal = FALSE
[08:08:01.060] | : . ' , ; Number of conditions: 6
[08:08:01.060] | : . ' , ;  int 6
[08:08:01.061] | : . ' , ; Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.061] | : . ' , ; Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.061] | : . ' , ; Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.061] | : . ' , ; Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.061] | : . ' , ; Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.061] | : . ' , ; Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.061] | : . ' , signalConditions() ... done
[08:08:01.061] | : . ' launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... done
[08:08:01.061] | : . Launching futures ... done
[08:08:01.061] | : . Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[08:08:01.062] | : Using SequentialFutureBackend ... done
[08:08:01.062] | run() for ‘Future’ (‘strategy = sequential’) ... done
[08:08:01.062] future(..., label = ‘strategy = sequential’) ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
{
    42
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘finished’
Resolved: TRUE
Unique identifier: 754d324b3d8990aec0ae0b0efb44e3b3-4
Owner process: 754d324b3d8990aec0ae0b0efb44e3b3
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
Value: 39 bytes of class ‘numeric’
Conditions captured: [n=6] ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’, ‘simpleMessage’
Duration: 0.01622009 secs (started 2025-06-17 08:08:01.035573)
Worker process: 754d324b3d8990aec0ae0b0efb44e3b3
[08:08:01.063] value() for SequentialFuture (‘strategy = sequential’) ...
[08:08:01.063] | signalConditions() ...
[08:08:01.063] | : include = ‘immediateCondition’
[08:08:01.063] | : exclude = 
[08:08:01.063] | : resignal = FALSE
[08:08:01.063] | : Number of conditions: 6
[08:08:01.063] | :  int 6
[08:08:01.064] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.064] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.064] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.064] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.064] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.065] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.065] | signalConditions() ... done
[08:08:01.065] | relay stdout ...
[08:08:01.065] | relay stdout ... done
[08:08:01.066] | check for misuse ...
[08:08:01.066] | check for misuse ... done
[08:08:01.066] | relay conditions ...
[08:08:01.066] | : Future state: ‘finished’
[08:08:01.066] | : signalConditions() ...
[08:08:01.066] | : . include = ‘condition’
[08:08:01.066] | : . exclude = ‘immediateCondition’
[08:08:01.066] | : . resignal = TRUE
[08:08:01.066] | : . Number of conditions: 6
[08:08:01.066] | : .  int 6
[08:08:01.067] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.067] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.035] | : . ' , attachPackages() ...
[08:08:01.067] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.067] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.035] | : . ' , ; packages: [n=1] ‘future’
[08:08:01.067] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.067] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.035] | : . ' , attachPackages() ... done
[08:08:01.068] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.068] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.036] | : . ' , attachPackages() ...
[08:08:01.068] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.068] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.036] | : . ' , ; packages: [n=0] 
[08:08:01.068] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.068] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.036] | : . ' , attachPackages() ... done
[08:08:01.068] | : signalConditions() ... done
[08:08:01.068] | relay conditions ... done
[08:08:01.068] value() for SequentialFuture (‘strategy = sequential’) ... done
- plan('sequential') ... DONE
- plan('multicore') ...
[08:08:01.069] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.069] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:01.069] | : all.equal() for FutureStrategyList ...
[08:08:01.069] | : . New stack:
[08:08:01.069] | : . List of 1
[08:08:01.069] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.069] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.069] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.069] | : .   ..- attr(*, "init")= logi TRUE
[08:08:01.069] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.069] | : .     ...)  
[08:08:01.069] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.069] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.069] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:01.069] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.072] | : . Old stack:
[08:08:01.072] | : . List of 1
[08:08:01.072] | : .  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.072] | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.072] | : .   ..- attr(*, "init")= chr "done"
[08:08:01.072] | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.072] | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.072] | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.072] | : .   ..- attr(*, "call")= language plan(sequential)
[08:08:01.072] | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd76827c8> 
[08:08:01.072] | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.072] | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.072] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.075] | : . Not identical
[08:08:01.075] | : . all.equal() for future ...
[08:08:01.075] | : . ' List of 2
[08:08:01.075] | : . '  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.075] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.075] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.075] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:01.075] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.075] | : . '     ...)  
[08:08:01.075] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.075] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.075] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:01.075] | : . '  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.075] | : . '   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.075] | : . '   ..- attr(*, "init")= chr "done"
[08:08:01.075] | : . '   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.075] | : . '   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.075] | : . '   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.075] | : . '   ..- attr(*, "call")= language plan(sequential)
[08:08:01.075] | : . '   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd76827c8> 
[08:08:01.075] | : . '   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.075] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.080] | : . ' Formals differ
[08:08:01.080] | : . all.equal() for future ... done
[08:08:01.080] | : . Future strategies differ at level 1
[08:08:01.080] | : all.equal() for FutureStrategyList ... done
[08:08:01.080] | : plan(): Setting new future backend stack:
[08:08:01.080] | : List of future strategies:
[08:08:01.080] | : 1. multicore:
[08:08:01.080] | :    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:01.080] | :    - tweaked: FALSE
[08:08:01.080] | :    - call: plan(strategy)
[08:08:01.081] | : List of 1
[08:08:01.081] | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.081] | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.081] | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.081] | :   ..- attr(*, "init")= logi TRUE
[08:08:01.081] | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.081] | :     ...)  
[08:08:01.081] | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.081] | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.081] | :   ..- attr(*, "call")= language plan(strategy)
[08:08:01.081] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.084] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:08:01.084] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.084] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:08:01.085] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.085] | : . Legacy shutdown of cluster workers ...
[08:08:01.085] | : . ' Stopping existing cluster ...
[08:08:01.085] | : . ' , No pre-existing cluster. Skipping
[08:08:01.085] | : . ' Stopping existing cluster ... done
[08:08:01.085] | : . Legacy shutdown of cluster workers ... done
[08:08:01.085] | : plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:08:01.085] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:08:01.086] | : . function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.086] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.086] | : .  - attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.086] | : .  - attr(*, "init")= logi TRUE
[08:08:01.086] | : .  - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.086] | : .     ...)  
[08:08:01.086] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.086] | : .  - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.086] | : .  - attr(*, "call")= language plan(strategy)
[08:08:01.088] | : . init: TRUE
[08:08:01.088] | : . makeFutureBackend(<multicore>) ...
[08:08:01.088] | : . ' Backend function: <‘NULL’>
[08:08:01.088] | : . ' Evaluator tweak arguments: [n=0]
[08:08:01.088] | : . '  list()
[08:08:01.088] | : . ' Evaluator formal arguments: [n=3]
[08:08:01.088] | : . '  list()
[08:08:01.089] | : . ' Backend factory arguments: [n=3]
[08:08:01.089] | : . ' Dotted pair list of 3
[08:08:01.089] | : . '  $ workers    : language availableCores(constraints = "multicore")
[08:08:01.089] | : . '  $ gc         : logi FALSE
[08:08:01.089] | : . '  $ earlySignal: logi FALSE
[08:08:01.091] | : . ' Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:01.092] | : . makeFutureBackend(<multicore>) ... done
[08:08:01.092] | : plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:08:01.092] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.092] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.092] | : plan(): nbrOfWorkers() = 2
[08:08:01.092] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:01.092] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.092] future(..., label = NULL) ...
[08:08:01.093] | lazy: FALSE
[08:08:01.093] | stdout: TRUE
[08:08:01.093] | conditions: [n=1] ‘condition’
[08:08:01.093] | gc: FALSE
[08:08:01.093] | earlySignal: FALSE
[08:08:01.093] | getGlobalsAndPackages() ...
[08:08:01.093] | : Searching for globals ...
[08:08:01.094] | : . globals found: [0] 
[08:08:01.094] | : Searching for globals ... done
[08:08:01.094] | : globals: [0] <none>
[08:08:01.095] | : packages: [0] <none>
[08:08:01.095] | getGlobalsAndPackages() ... done
[08:08:01.095] | run() for ‘Future’ (<unnamed-5>) ...
[08:08:01.095] | : state: ‘created’
[08:08:01.095] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.095] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.095] | : Using MulticoreFutureBackend ...
[08:08:01.095] | : . Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:01.095] | : . Launching futures ...
[08:08:01.096] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:01.096] | : . ' , getFutureData() ...
[08:08:01.096] | : . ' , ; getFutureCore() ...
[08:08:01.096] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:01.096] | : . ' , ; getFutureCore() ... done
[08:08:01.096] | : . ' , ; getFutureCapture() ...
[08:08:01.096] | : . ' , ; getFutureCapture() ... done
[08:08:01.096] | : . ' , ; getFutureContext() ...
[08:08:01.097] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.097] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:01.097] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.097] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:01.097] | : . ' , ; getFutureContext() ... done
[08:08:01.098] | : . ' , getFutureData() ... done
[08:08:01.098] | : . ' , requestCore(..., workers = 2) ...
[08:08:01.098] | : . ' , requestCore(..., workers = 2) ... done
[08:08:01.101] | : . ' , MulticoreFuture started
[08:08:01.101] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:01.102] | : . Launching futures ... done
[08:08:01.102] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:01.102] | : Using MulticoreFutureBackend ... done
[08:08:01.102] | run() for ‘Future’ (<unnamed-5>) ... done
[08:08:01.103] future(..., label = NULL) ... done
MulticoreFuture:
Label: <unnamed-5>
Expression:
[1] 42
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘running’
[08:08:01.104] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.104] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:01.104] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.105] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.105] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.105] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:01.105] | : . ' , ; ` | New stack:
[08:08:01.105] | : . ' , ; ` | List of 1
[08:08:01.105] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.105] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.105] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:01.105] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.105] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.105] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.105] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.105] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.110] | : . ' , ; ` | Old stack:
[08:08:01.115] readImmediateCondition() ...
[08:08:01.115] | Path: ‘/tmp/RtmpdJDGAY/.future/immediateConditions’
[08:08:01.115] | Number of RDS files: 0
[08:08:01.116] | Returned conditions set:
[08:08:01.116] |  list()
[08:08:01.116] readImmediateCondition() ... done
Resolved: FALSE
Unique identifier: 754d324b3d8990aec0ae0b0efb44e3b3-5
Owner process: 754d324b3d8990aec0ae0b0efb44e3b3
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
Value: <not collected>
Conditions captured: <none>
[08:08:01.116] value() for MulticoreFuture (<unnamed-5>) ...
[08:08:01.118] | result() for MulticoreFuture ...
[08:08:01.113] | : . ' , ; ` | List of 1
[08:08:01.113] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.113] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.113] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.113] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.113] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.113] | : . ' , ; ` |     ...)  
[08:08:01.113] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.113] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.113] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:01.113] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd89708e0> 
[08:08:01.113] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.113] | : . ' , ; ` |     ...)  
[08:08:01.113] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.113] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.119] | : . ' , ; ` | Not identical
[08:08:01.119] | : . ' , ; ` | all.equal() for future ...
[08:08:01.119] | : . ' , ; ` | : List of 2
[08:08:01.119] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.119] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.119] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:01.119] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.119] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.119] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.119] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.119] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.119] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.119] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.119] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.119] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.119] | : . ' , ; ` | :     ...)  
[08:08:01.119] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.119] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.119] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:01.119] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd89708e0> 
[08:08:01.119] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.119] | : . ' , ; ` | :     ...)  
[08:08:01.119] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.127] | : . ' , ; ` | : Formals differ
[08:08:01.127] | : . ' , ; ` | all.equal() for future ... done
[08:08:01.127] | : . ' , ; ` | Future strategies differ at level 1
[08:08:01.127] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:01.128] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:01.128] | : . ' , ; ` List of future strategies:
[08:08:01.128] | : . ' , ; ` 1. sequential:
[08:08:01.128] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:01.128] | : . ' , ; `    - tweaked: FALSE
[08:08:01.128] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.128] | : . ' , ; ` List of 1
[08:08:01.128] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.128] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.128] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:01.128] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.128] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.128] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.128] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.128] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.132] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:01.132] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:01.132] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.132] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:01.133] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.133] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.133] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:01.133] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.133] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.133] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.133] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.135] | : . ' , ; ` | : init: TRUE
[08:08:01.135] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:01.135] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:01.135] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:01.135] | : . ' , ; ` | : .  list()
[08:08:01.136] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:01.136] | : . ' , ; ` | : .  list()
[08:08:01.136] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:01.136] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:01.136] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:01.136] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:01.137] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:01.137] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:01.137] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:01.138] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.138] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:01.138] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.138] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.142] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.142] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.142] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.142] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:01.142] | : . ' , ; ` | : New stack:
[08:08:01.142] | : . ' , ; ` | : List of 1
[08:08:01.142] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.142] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.142] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.142] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.142] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.142] | : . ' , ; ` | :     ...)  
[08:08:01.142] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.142] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.142] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:01.142] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd89708e0> 
[08:08:01.142] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.142] | : . ' , ; ` | :     ...)  
[08:08:01.142] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.142] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.146] | : . ' , ; ` | : Old stack:
[08:08:01.146] | : . ' , ; ` | : List of 1
[08:08:01.146] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.146] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.146] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.146] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.146] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.146] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.146] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.146] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd9934270> 
[08:08:01.146] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.146] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.146] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.149] | : . ' , ; ` | : Not identical
[08:08:01.149] | : . ' , ; ` | : all.equal() for future ...
[08:08:01.149] | : . ' , ; ` | : . List of 2
[08:08:01.149] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.149] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.149] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.149] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:01.149] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.149] | : . ' , ; ` | : .     ...)  
[08:08:01.149] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.149] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.149] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:01.149] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd89708e0> 
[08:08:01.149] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.149] | : . ' , ; ` | : .     ...)  
[08:08:01.149] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.149] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.149] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.149] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:01.149] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.149] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.149] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.149] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.149] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd9934270> 
[08:08:01.149] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.149] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.155] | : . ' , ; ` | : . Formals differ
[08:08:01.156] | : . ' , ; ` | : all.equal() for future ... done
[08:08:01.156] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:01.156] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:01.156] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:01.156] | : . ' , ; ` | List of future strategies:
[08:08:01.156] | : . ' , ; ` | 1. multicore:
[08:08:01.156] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:01.156] | : . ' , ; ` |    - tweaked: FALSE
[08:08:01.156] | : . ' , ; ` |    - call: plan(strategy)
[08:08:01.156] | : . ' , ; ` | List of 1
[08:08:01.156] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.156] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.156] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.156] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.156] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.156] | : . ' , ; ` |     ...)  
[08:08:01.156] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.156] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.156] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:01.156] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd89708e0> 
[08:08:01.156] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.156] | : . ' , ; ` |     ...)  
[08:08:01.156] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.156] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.162] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:01.162] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:01.162] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.162] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.162] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:01.163] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.163] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.163] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.164] | : readImmediateCondition() ...
[08:08:01.164] | : . Path: ‘/tmp/RtmpdJDGAY/.future/immediateConditions’
[08:08:01.164] | : . Number of RDS files: 0
[08:08:01.164] | : . Returned conditions set:
[08:08:01.164] | : .  list()
[08:08:01.165] | : readImmediateCondition() ... done
[08:08:01.165] | : result() for MulticoreFuture ...
[08:08:01.166] | : result() for MulticoreFuture ... done
[08:08:01.166] | : signalConditions() ...
[08:08:01.166] | : . include = ‘immediateCondition’
[08:08:01.166] | : . exclude = 
[08:08:01.166] | : . resignal = FALSE
[08:08:01.166] | : . Number of conditions: 6
[08:08:01.166] | : .  int 6
[08:08:01.170] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.170] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.170] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.170] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.170] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.171] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.171] | : signalConditions() ... done
[08:08:01.171] | result() for MulticoreFuture ... done
[08:08:01.171] | result() for MulticoreFuture ...
[08:08:01.171] | result() for MulticoreFuture ... done
[08:08:01.171] | signalConditions() ...
[08:08:01.171] | : include = ‘immediateCondition’
[08:08:01.172] | : exclude = 
[08:08:01.172] | : resignal = FALSE
[08:08:01.172] | : Number of conditions: 6
[08:08:01.172] | :  int 6
[08:08:01.173] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.173] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.173] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.173] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.173] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.173] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.173] | signalConditions() ... done
[08:08:01.174] | relay stdout ...
[08:08:01.174] | relay stdout ... done
[08:08:01.174] | check for misuse ...
[08:08:01.174] | check for misuse ... done
[08:08:01.174] | relay conditions ...
[08:08:01.174] | : Future state: ‘finished’
[08:08:01.175] | : result() for MulticoreFuture ...
[08:08:01.175] | : result() for MulticoreFuture ... done
[08:08:01.175] | : signalConditions() ...
[08:08:01.175] | : . include = ‘condition’
[08:08:01.175] | : . exclude = ‘immediateCondition’
[08:08:01.175] | : . resignal = TRUE
[08:08:01.175] | : . Number of conditions: 6
[08:08:01.175] | : .  int 6
[08:08:01.176] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.176] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.101] | : . ' , attachPackages() ...
[08:08:01.176] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.177] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.102] | : . ' , ; packages: [n=1] ‘future’
[08:08:01.177] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.177] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.102] | : . ' , attachPackages() ... done
[08:08:01.177] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.177] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.102] | : . ' , attachPackages() ...
[08:08:01.177] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.178] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.103] | : . ' , ; packages: [n=0] 
[08:08:01.178] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.178] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.103] | : . ' , attachPackages() ... done
[08:08:01.178] | : signalConditions() ... done
[08:08:01.178] | relay conditions ... done
[08:08:01.178] value() for MulticoreFuture (<unnamed-5>) ... done
[08:08:01.179] future(..., label = NULL) ...
[08:08:01.179] | lazy: FALSE
[08:08:01.179] | stdout: TRUE
[08:08:01.179] | conditions: [n=1] ‘condition’
[08:08:01.179] | gc: FALSE
[08:08:01.179] | earlySignal: FALSE
[08:08:01.179] | getGlobalsAndPackages() ...
[08:08:01.180] | : Searching for globals ...
[08:08:01.184] | : . globals found: [1] ‘{’
[08:08:01.184] | : Searching for globals ... done
[08:08:01.184] | : Resolving globals: FALSE
[08:08:01.184] | : Search for packages associated with the globals ...
[08:08:01.184] | : . Packages associated with globals: [1] ‘base’
[08:08:01.185] | : . Packages: [1] ‘base’
[08:08:01.185] | : Search for packages associated with the globals ... done
[08:08:01.185] | : Packages after dropping 'base': [0] 
[08:08:01.185] | : globals: [0] 
[08:08:01.185] | : packages: [0] 
[08:08:01.185] | getGlobalsAndPackages() ... done
[08:08:01.185] | run() for ‘Future’ (<unnamed-6>) ...
[08:08:01.186] | : state: ‘created’
[08:08:01.186] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.186] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.186] | : Using MulticoreFutureBackend ...
[08:08:01.186] | : . Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:08:01.186] | : . Launching futures ...
[08:08:01.187] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:01.187] | : . ' , getFutureData() ...
[08:08:01.187] | : . ' , ; getFutureCore() ...
[08:08:01.187] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:01.187] | : . ' , ; getFutureCore() ... done
[08:08:01.187] | : . ' , ; getFutureCapture() ...
[08:08:01.187] | : . ' , ; getFutureCapture() ... done
[08:08:01.187] | : . ' , ; getFutureContext() ...
[08:08:01.188] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.188] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:01.188] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.188] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:01.188] | : . ' , ; getFutureContext() ... done
[08:08:01.188] | : . ' , getFutureData() ... done
[08:08:01.188] | : . ' , requestCore(..., workers = 2) ...
[08:08:01.189] | : . ' , requestCore(..., workers = 2) ... done
[08:08:01.191] | : . ' , MulticoreFuture started
[08:08:01.191] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:01.192] | : . Launching futures ... done
[08:08:01.192] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:01.192] | : Using MulticoreFutureBackend ... done
[08:08:01.193] | run() for ‘Future’ (<unnamed-6>) ... done
[08:08:01.193] future(..., label = NULL) ... done
MulticoreFuture:
Label: <unnamed-6>
Expression:
{
    42
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘running’
[08:08:01.194] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.194] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:01.195] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.195] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.195] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.196] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:01.196] | : . ' , ; ` | New stack:
[08:08:01.196] | : . ' , ; ` | List of 1
[08:08:01.196] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.196] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.196] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:01.196] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.196] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.196] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.196] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.196] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.204] | : . ' , ; ` | Old stack:
[08:08:01.205] readImmediateCondition() ...
[08:08:01.205] | Path: ‘/tmp/RtmpdJDGAY/.future/immediateConditions’
[08:08:01.205] | Number of RDS files: 0
[08:08:01.205] | Returned conditions set:
[08:08:01.206] |  list()
[08:08:01.206] readImmediateCondition() ... done
Resolved: FALSE
Unique identifier: 754d324b3d8990aec0ae0b0efb44e3b3-6
Owner process: 754d324b3d8990aec0ae0b0efb44e3b3
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
Value: <not collected>
Conditions captured: <none>
[08:08:01.206] value() for MulticoreFuture (<unnamed-6>) ...
[08:08:01.207] | result() for MulticoreFuture ...
[08:08:01.204] | : . ' , ; ` | List of 1
[08:08:01.204] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.204] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.204] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.204] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.204] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.204] | : . ' , ; ` |     ...)  
[08:08:01.204] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.204] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.204] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:01.204] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd89708e0> 
[08:08:01.204] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.204] | : . ' , ; ` |     ...)  
[08:08:01.204] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.204] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.210] | : . ' , ; ` | Not identical
[08:08:01.210] | : . ' , ; ` | all.equal() for future ...
[08:08:01.210] | : . ' , ; ` | : List of 2
[08:08:01.210] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.210] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.210] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:01.210] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.210] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.210] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.210] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.210] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.210] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.210] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.210] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.210] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.210] | : . ' , ; ` | :     ...)  
[08:08:01.210] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.210] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.210] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:01.210] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd89708e0> 
[08:08:01.210] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.210] | : . ' , ; ` | :     ...)  
[08:08:01.210] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.218] | : . ' , ; ` | : Formals differ
[08:08:01.218] | : . ' , ; ` | all.equal() for future ... done
[08:08:01.219] | : . ' , ; ` | Future strategies differ at level 1
[08:08:01.219] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:01.219] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:01.219] | : . ' , ; ` List of future strategies:
[08:08:01.219] | : . ' , ; ` 1. sequential:
[08:08:01.219] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:01.219] | : . ' , ; `    - tweaked: FALSE
[08:08:01.219] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.220] | : . ' , ; ` List of 1
[08:08:01.220] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.220] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.220] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:01.220] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.220] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.220] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.220] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.220] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.223] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:01.224] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:01.224] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.224] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:01.224] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.224] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.224] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:01.224] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.224] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.224] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.224] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.226] | : . ' , ; ` | : init: TRUE
[08:08:01.227] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:01.229] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:01.229] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:01.229] | : . ' , ; ` | : .  list()
[08:08:01.229] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:01.229] | : . ' , ; ` | : .  list()
[08:08:01.230] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:01.230] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:01.230] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:01.230] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:01.231] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:01.231] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:01.231] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:01.231] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.231] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:01.231] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.232] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.234] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.234] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.234] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.234] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:01.234] | : . ' , ; ` | : New stack:
[08:08:01.235] | : . ' , ; ` | : List of 1
[08:08:01.235] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.235] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.235] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.235] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.235] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.235] | : . ' , ; ` | :     ...)  
[08:08:01.235] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.235] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.235] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:01.235] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd89708e0> 
[08:08:01.235] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.235] | : . ' , ; ` | :     ...)  
[08:08:01.235] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.235] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.238] | : . ' , ; ` | : Old stack:
[08:08:01.238] | : . ' , ; ` | : List of 1
[08:08:01.238] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.238] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.238] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.238] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.238] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.238] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.238] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.238] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd7875830> 
[08:08:01.238] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.238] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.238] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.241] | : . ' , ; ` | : Not identical
[08:08:01.242] | : . ' , ; ` | : all.equal() for future ...
[08:08:01.242] | : . ' , ; ` | : . List of 2
[08:08:01.242] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.242] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.242] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.242] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:01.242] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.242] | : . ' , ; ` | : .     ...)  
[08:08:01.242] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.242] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.242] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:01.242] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd89708e0> 
[08:08:01.242] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.242] | : . ' , ; ` | : .     ...)  
[08:08:01.242] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.242] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.242] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.242] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:01.242] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.242] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.242] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.242] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.242] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd7875830> 
[08:08:01.242] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.242] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.249] | : . ' , ; ` | : . Formals differ
[08:08:01.249] | : . ' , ; ` | : all.equal() for future ... done
[08:08:01.249] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:01.249] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:01.249] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:01.250] | : . ' , ; ` | List of future strategies:
[08:08:01.250] | : . ' , ; ` | 1. multicore:
[08:08:01.250] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:01.250] | : . ' , ; ` |    - tweaked: FALSE
[08:08:01.250] | : . ' , ; ` |    - call: plan(strategy)
[08:08:01.250] | : . ' , ; ` | List of 1
[08:08:01.250] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.250] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.250] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.250] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.250] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.250] | : . ' , ; ` |     ...)  
[08:08:01.250] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.250] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.250] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:01.250] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd89708e0> 
[08:08:01.250] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.250] | : . ' , ; ` |     ...)  
[08:08:01.250] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.250] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.253] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:01.253] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:01.253] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.254] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.254] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:01.254] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.254] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.254] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.255] | : readImmediateCondition() ...
[08:08:01.255] | : . Path: ‘/tmp/RtmpdJDGAY/.future/immediateConditions’
[08:08:01.255] | : . Number of RDS files: 0
[08:08:01.255] | : . Returned conditions set:
[08:08:01.256] | : .  list()
[08:08:01.258] | : readImmediateCondition() ... done
[08:08:01.258] | : result() for MulticoreFuture ...
[08:08:01.259] | : result() for MulticoreFuture ... done
[08:08:01.259] | : signalConditions() ...
[08:08:01.259] | : . include = ‘immediateCondition’
[08:08:01.259] | : . exclude = 
[08:08:01.259] | : . resignal = FALSE
[08:08:01.259] | : . Number of conditions: 6
[08:08:01.259] | : .  int 6
[08:08:01.260] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.260] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.260] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.261] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.261] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.261] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.261] | : signalConditions() ... done
[08:08:01.261] | result() for MulticoreFuture ... done
[08:08:01.261] | result() for MulticoreFuture ...
[08:08:01.262] | result() for MulticoreFuture ... done
[08:08:01.262] | signalConditions() ...
[08:08:01.262] | : include = ‘immediateCondition’
[08:08:01.262] | : exclude = 
[08:08:01.262] | : resignal = FALSE
[08:08:01.262] | : Number of conditions: 6
[08:08:01.262] | :  int 6
[08:08:01.263] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.263] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.263] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.264] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.264] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.264] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.264] | signalConditions() ... done
[08:08:01.264] | relay stdout ...
[08:08:01.264] | relay stdout ... done
[08:08:01.264] | check for misuse ...
[08:08:01.265] | check for misuse ... done
[08:08:01.265] | relay conditions ...
[08:08:01.265] | : Future state: ‘finished’
[08:08:01.265] | : result() for MulticoreFuture ...
[08:08:01.265] | : result() for MulticoreFuture ... done
[08:08:01.265] | : signalConditions() ...
[08:08:01.265] | : . include = ‘condition’
[08:08:01.266] | : . exclude = ‘immediateCondition’
[08:08:01.266] | : . resignal = TRUE
[08:08:01.266] | : . Number of conditions: 6
[08:08:01.266] | : .  int 6
[08:08:01.266] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.267] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.192] | : . ' , attachPackages() ...
[08:08:01.267] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.267] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.192] | : . ' , ; packages: [n=1] ‘future’
[08:08:01.267] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.267] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.193] | : . ' , attachPackages() ... done
[08:08:01.267] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.268] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.193] | : . ' , attachPackages() ...
[08:08:01.268] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.268] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.193] | : . ' , ; packages: [n=0] 
[08:08:01.268] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.268] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.193] | : . ' , attachPackages() ... done
[08:08:01.268] | : signalConditions() ... done
[08:08:01.268] | relay conditions ... done
[08:08:01.269] value() for MulticoreFuture (<unnamed-6>) ... done
[08:08:01.269] future(..., label = ‘strategy = multicore’) ...
[08:08:01.269] | lazy: FALSE
[08:08:01.269] | stdout: TRUE
[08:08:01.269] | conditions: [n=1] ‘condition’
[08:08:01.269] | gc: FALSE
[08:08:01.269] | earlySignal: FALSE
[08:08:01.270] | getGlobalsAndPackages() ...
[08:08:01.270] | : Searching for globals ...
[08:08:01.271] | : . globals found: [0] 
[08:08:01.272] | : Searching for globals ... done
[08:08:01.272] | : globals: [0] <none>
[08:08:01.272] | : packages: [0] <none>
[08:08:01.272] | getGlobalsAndPackages() ... done
[08:08:01.272] | run() for ‘Future’ (‘strategy = multicore’) ...
[08:08:01.272] | : state: ‘created’
[08:08:01.273] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.273] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.273] | : Using MulticoreFutureBackend ...
[08:08:01.273] | : . Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:08:01.273] | : . Launching futures ...
[08:08:01.273] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:01.273] | : . ' , getFutureData() ...
[08:08:01.274] | : . ' , ; getFutureCore() ...
[08:08:01.274] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:01.274] | : . ' , ; getFutureCore() ... done
[08:08:01.274] | : . ' , ; getFutureCapture() ...
[08:08:01.274] | : . ' , ; getFutureCapture() ... done
[08:08:01.274] | : . ' , ; getFutureContext() ...
[08:08:01.274] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.275] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:01.275] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.275] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:01.275] | : . ' , ; getFutureContext() ... done
[08:08:01.275] | : . ' , getFutureData() ... done
[08:08:01.275] | : . ' , requestCore(..., workers = 2) ...
[08:08:01.276] | : . ' , requestCore(..., workers = 2) ... done
[08:08:01.278] | : . ' , MulticoreFuture started
[08:08:01.278] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:01.278] | : . Launching futures ... done
[08:08:01.278] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:01.279] | : Using MulticoreFutureBackend ... done
[08:08:01.279] | run() for ‘Future’ (‘strategy = multicore’) ... done
[08:08:01.279] future(..., label = ‘strategy = multicore’) ... done
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[1] 42
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘running’
[08:08:01.281] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.281] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:01.282] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.282] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.282] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.283] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:01.283] | : . ' , ; ` | New stack:
[08:08:01.283] | : . ' , ; ` | List of 1
[08:08:01.283] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.283] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.283] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:01.283] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.283] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.283] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.283] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.283] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.290] readImmediateCondition() ...
[08:08:01.288] | : . ' , ; ` | Old stack:
[08:08:01.290] | Path: ‘/tmp/RtmpdJDGAY/.future/immediateConditions’
[08:08:01.291] | Number of RDS files: 0
[08:08:01.291] | Returned conditions set:
[08:08:01.291] |  list()
[08:08:01.291] readImmediateCondition() ... done
Resolved: FALSE
Unique identifier: 754d324b3d8990aec0ae0b0efb44e3b3-7
Owner process: 754d324b3d8990aec0ae0b0efb44e3b3
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
Value: <not collected>
Conditions captured: <none>
[08:08:01.292] value() for MulticoreFuture (‘strategy = multicore’) ...
[08:08:01.292] | result() for MulticoreFuture ...
[08:08:01.290] | : . ' , ; ` | List of 1
[08:08:01.290] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.290] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.290] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.290] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.290] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.290] | : . ' , ; ` |     ...)  
[08:08:01.290] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.290] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.290] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:01.290] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd89708e0> 
[08:08:01.290] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.290] | : . ' , ; ` |     ...)  
[08:08:01.290] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.290] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.297] | : . ' , ; ` | Not identical
[08:08:01.297] | : . ' , ; ` | all.equal() for future ...
[08:08:01.297] | : . ' , ; ` | : List of 2
[08:08:01.297] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.297] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.297] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:01.297] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.297] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.297] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.297] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.297] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.297] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.297] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.297] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.297] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.297] | : . ' , ; ` | :     ...)  
[08:08:01.297] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.297] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.297] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:01.297] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd89708e0> 
[08:08:01.297] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.297] | : . ' , ; ` | :     ...)  
[08:08:01.297] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.305] | : . ' , ; ` | : Formals differ
[08:08:01.306] | : . ' , ; ` | all.equal() for future ... done
[08:08:01.306] | : . ' , ; ` | Future strategies differ at level 1
[08:08:01.306] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:01.306] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:01.306] | : . ' , ; ` List of future strategies:
[08:08:01.306] | : . ' , ; ` 1. sequential:
[08:08:01.306] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:01.306] | : . ' , ; `    - tweaked: FALSE
[08:08:01.306] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.307] | : . ' , ; ` List of 1
[08:08:01.307] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.307] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.307] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:01.307] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.307] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.307] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.307] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.307] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.310] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:01.311] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:01.311] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.311] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:01.311] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.311] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.311] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:01.311] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.311] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.311] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.311] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.313] | : . ' , ; ` | : init: TRUE
[08:08:01.313] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:01.314] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:01.314] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:01.314] | : . ' , ; ` | : .  list()
[08:08:01.314] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:01.314] | : . ' , ; ` | : .  list()
[08:08:01.315] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:01.315] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:01.315] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:01.315] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:01.318] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:01.318] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:01.318] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:01.318] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.318] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:01.319] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.319] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.321] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.321] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.321] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.321] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:01.321] | : . ' , ; ` | : New stack:
[08:08:01.322] | : . ' , ; ` | : List of 1
[08:08:01.322] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.322] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.322] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.322] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.322] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.322] | : . ' , ; ` | :     ...)  
[08:08:01.322] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.322] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.322] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:01.322] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd89708e0> 
[08:08:01.322] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.322] | : . ' , ; ` | :     ...)  
[08:08:01.322] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.322] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.325] | : . ' , ; ` | : Old stack:
[08:08:01.325] | : . ' , ; ` | : List of 1
[08:08:01.325] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.325] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.325] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.325] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.325] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.325] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.325] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.325] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd860e3e8> 
[08:08:01.325] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.325] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.325] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.328] | : . ' , ; ` | : Not identical
[08:08:01.328] | : . ' , ; ` | : all.equal() for future ...
[08:08:01.329] | : . ' , ; ` | : . List of 2
[08:08:01.329] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.329] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.329] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.329] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:01.329] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.329] | : . ' , ; ` | : .     ...)  
[08:08:01.329] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.329] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.329] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:01.329] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd89708e0> 
[08:08:01.329] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.329] | : . ' , ; ` | : .     ...)  
[08:08:01.329] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.329] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.329] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.329] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:01.329] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.329] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.329] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.329] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.329] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd860e3e8> 
[08:08:01.329] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.329] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.335] | : . ' , ; ` | : . Formals differ
[08:08:01.335] | : . ' , ; ` | : all.equal() for future ... done
[08:08:01.335] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:01.335] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:01.335] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:01.335] | : . ' , ; ` | List of future strategies:
[08:08:01.335] | : . ' , ; ` | 1. multicore:
[08:08:01.335] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:01.335] | : . ' , ; ` |    - tweaked: FALSE
[08:08:01.335] | : . ' , ; ` |    - call: plan(strategy)
[08:08:01.337] | : . ' , ; ` | List of 1
[08:08:01.337] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.337] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.337] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.337] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.337] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.337] | : . ' , ; ` |     ...)  
[08:08:01.337] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.337] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.337] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:01.337] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd89708e0> 
[08:08:01.337] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.337] | : . ' , ; ` |     ...)  
[08:08:01.337] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.337] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.340] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:01.341] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:01.341] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.341] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.341] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:01.341] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.341] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.341] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.342] | : readImmediateCondition() ...
[08:08:01.342] | : . Path: ‘/tmp/RtmpdJDGAY/.future/immediateConditions’
[08:08:01.342] | : . Number of RDS files: 0
[08:08:01.343] | : . Returned conditions set:
[08:08:01.343] | : .  list()
[08:08:01.343] | : readImmediateCondition() ... done
[08:08:01.344] | : result() for MulticoreFuture ...
[08:08:01.344] | : result() for MulticoreFuture ... done
[08:08:01.344] | : signalConditions() ...
[08:08:01.344] | : . include = ‘immediateCondition’
[08:08:01.344] | : . exclude = 
[08:08:01.344] | : . resignal = FALSE
[08:08:01.344] | : . Number of conditions: 6
[08:08:01.345] | : .  int 6
[08:08:01.345] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.345] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.346] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.346] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.346] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.346] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.348] | : signalConditions() ... done
[08:08:01.348] | result() for MulticoreFuture ... done
[08:08:01.348] | result() for MulticoreFuture ...
[08:08:01.349] | result() for MulticoreFuture ... done
[08:08:01.349] | signalConditions() ...
[08:08:01.349] | : include = ‘immediateCondition’
[08:08:01.349] | : exclude = 
[08:08:01.349] | : resignal = FALSE
[08:08:01.349] | : Number of conditions: 6
[08:08:01.349] | :  int 6
[08:08:01.350] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.350] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.350] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.350] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.351] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.351] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.351] | signalConditions() ... done
[08:08:01.351] | relay stdout ...
[08:08:01.351] | relay stdout ... done
[08:08:01.351] | check for misuse ...
[08:08:01.352] | check for misuse ... done
[08:08:01.352] | relay conditions ...
[08:08:01.352] | : Future state: ‘finished’
[08:08:01.352] | : result() for MulticoreFuture ...
[08:08:01.352] | : result() for MulticoreFuture ... done
[08:08:01.352] | : signalConditions() ...
[08:08:01.353] | : . include = ‘condition’
[08:08:01.353] | : . exclude = ‘immediateCondition’
[08:08:01.353] | : . resignal = TRUE
[08:08:01.353] | : . Number of conditions: 6
[08:08:01.353] | : .  int 6
[08:08:01.354] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.354] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.279] | : . ' , attachPackages() ...
[08:08:01.354] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.354] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.279] | : . ' , ; packages: [n=1] ‘future’
[08:08:01.354] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.354] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.280] | : . ' , attachPackages() ... done
[08:08:01.355] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.355] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.280] | : . ' , attachPackages() ...
[08:08:01.355] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.355] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.280] | : . ' , ; packages: [n=0] 
[08:08:01.355] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.355] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.280] | : . ' , attachPackages() ... done
[08:08:01.356] | : signalConditions() ... done
[08:08:01.356] | relay conditions ... done
[08:08:01.356] value() for MulticoreFuture (‘strategy = multicore’) ... done
[08:08:01.356] future(..., label = ‘strategy = multicore’) ...
[08:08:01.357] | lazy: FALSE
[08:08:01.357] | stdout: TRUE
[08:08:01.357] | conditions: [n=1] ‘condition’
[08:08:01.357] | gc: FALSE
[08:08:01.357] | earlySignal: FALSE
[08:08:01.357] | getGlobalsAndPackages() ...
[08:08:01.357] | : Searching for globals ...
[08:08:01.361] | : . globals found: [1] ‘{’
[08:08:01.362] | : Searching for globals ... done
[08:08:01.362] | : Resolving globals: FALSE
[08:08:01.362] | : Search for packages associated with the globals ...
[08:08:01.362] | : . Packages associated with globals: [1] ‘base’
[08:08:01.362] | : . Packages: [1] ‘base’
[08:08:01.363] | : Search for packages associated with the globals ... done
[08:08:01.363] | : Packages after dropping 'base': [0] 
[08:08:01.363] | : globals: [0] 
[08:08:01.363] | : packages: [0] 
[08:08:01.363] | getGlobalsAndPackages() ... done
[08:08:01.363] | run() for ‘Future’ (‘strategy = multicore’) ...
[08:08:01.364] | : state: ‘created’
[08:08:01.364] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.364] | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.364] | : Using MulticoreFutureBackend ...
[08:08:01.364] | : . Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:08:01.364] | : . Launching futures ...
[08:08:01.364] | : . ' launchFuture() for MulticoreFutureBackend ...
[08:08:01.365] | : . ' , getFutureData() ...
[08:08:01.365] | : . ' , ; getFutureCore() ...
[08:08:01.365] | : . ' , ; ` Packages needed by the future expression (n = 0): <none>
[08:08:01.365] | : . ' , ; getFutureCore() ... done
[08:08:01.365] | : . ' , ; getFutureCapture() ...
[08:08:01.365] | : . ' , ; getFutureCapture() ... done
[08:08:01.365] | : . ' , ; getFutureContext() ...
[08:08:01.365] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.366] | : . ' , ; ` | Getting stack without first backend: [n=0] 
[08:08:01.366] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.366] | : . ' , ; ` Packages needed by future backend (n = 0): <none>
[08:08:01.366] | : . ' , ; getFutureContext() ... done
[08:08:01.366] | : . ' , getFutureData() ... done
[08:08:01.366] | : . ' , requestCore(..., workers = 2) ...
[08:08:01.367] | : . ' , requestCore(..., workers = 2) ... done
[08:08:01.368] | : . ' , MulticoreFuture started
[08:08:01.369] | : . ' launchFuture() for MulticoreFutureBackend ... done
[08:08:01.369] | : . Launching futures ... done
[08:08:01.369] | : . Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:01.370] | : Using MulticoreFutureBackend ... done
[08:08:01.370] | run() for ‘Future’ (‘strategy = multicore’) ... done
[08:08:01.370] future(..., label = ‘strategy = multicore’) ... done
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
{
    42
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘running’
[08:08:01.372] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.372] | : . ' , ; Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:01.372] | : . ' , plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.373] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.373] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.373] | : . ' , ; ` all.equal() for FutureStrategyList ...
[08:08:01.373] | : . ' , ; ` | New stack:
[08:08:01.374] | : . ' , ; ` | List of 1
[08:08:01.374] | : . ' , ; ` |  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.374] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.374] | : . ' , ; ` |   ..- attr(*, "init")= logi TRUE
[08:08:01.374] | : . ' , ; ` |   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.374] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.374] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.374] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.374] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.381] | : . ' , ; ` | Old stack:
[08:08:01.381] readImmediateCondition() ...
[08:08:01.382] | Path: ‘/tmp/RtmpdJDGAY/.future/immediateConditions’
[08:08:01.382] | Number of RDS files: 0
[08:08:01.382] | Returned conditions set:
[08:08:01.382] |  list()
[08:08:01.383] readImmediateCondition() ... done
Resolved: FALSE
Unique identifier: 754d324b3d8990aec0ae0b0efb44e3b3-8
Owner process: 754d324b3d8990aec0ae0b0efb44e3b3
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
Value: <not collected>
Conditions captured: <none>
[08:08:01.383] value() for MulticoreFuture (‘strategy = multicore’) ...
[08:08:01.383] | result() for MulticoreFuture ...
[08:08:01.381] | : . ' , ; ` | List of 1
[08:08:01.381] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.381] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.381] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.381] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.381] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.381] | : . ' , ; ` |     ...)  
[08:08:01.381] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.381] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.381] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:01.381] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd89708e0> 
[08:08:01.381] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.381] | : . ' , ; ` |     ...)  
[08:08:01.381] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.381] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.387] | : . ' , ; ` | Not identical
[08:08:01.388] | : . ' , ; ` | all.equal() for future ...
[08:08:01.388] | : . ' , ; ` | : List of 2
[08:08:01.388] | : . ' , ; ` | :  $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.388] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.388] | : . ' , ; ` | :   ..- attr(*, "init")= logi TRUE
[08:08:01.388] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.388] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.388] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.388] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.388] | : . ' , ; ` | :  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.388] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.388] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.388] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.388] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.388] | : . ' , ; ` | :     ...)  
[08:08:01.388] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.388] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.388] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:01.388] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd89708e0> 
[08:08:01.388] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.388] | : . ' , ; ` | :     ...)  
[08:08:01.388] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.396] | : . ' , ; ` | : Formals differ
[08:08:01.396] | : . ' , ; ` | all.equal() for future ... done
[08:08:01.396] | : . ' , ; ` | Future strategies differ at level 1
[08:08:01.396] | : . ' , ; ` all.equal() for FutureStrategyList ... done
[08:08:01.397] | : . ' , ; ` plan(): Setting new future backend stack:
[08:08:01.397] | : . ' , ; ` List of future strategies:
[08:08:01.397] | : . ' , ; ` 1. sequential:
[08:08:01.397] | : . ' , ; `    - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[08:08:01.397] | : . ' , ; `    - tweaked: FALSE
[08:08:01.397] | : . ' , ; `    - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.397] | : . ' , ; ` List of 1
[08:08:01.397] | : . ' , ; `  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.397] | : . ' , ; `   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.397] | : . ' , ; `   ..- attr(*, "init")= logi TRUE
[08:08:01.397] | : . ' , ; `   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.397] | : . ' , ; `   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.397] | : . ' , ; `   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.397] | : . ' , ; `   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.397] | : . ' , ; `  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.401] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:01.401] | : . ' , ; ` plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:01.401] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.402] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[08:08:01.402] | : . ' , ; ` | : function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.402] | : . ' , ; ` | :  - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.402] | : . ' , ; ` | :  - attr(*, "init")= logi TRUE
[08:08:01.402] | : . ' , ; ` | :  - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.402] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.402] | : . ' , ; ` | :  - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.402] | : . ' , ; ` | :  - attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.404] | : . ' , ; ` | : init: TRUE
[08:08:01.404] | : . ' , ; ` | : makeFutureBackend(<sequential>) ...
[08:08:01.404] | : . ' , ; ` | : . Backend function: <‘NULL’>
[08:08:01.404] | : . ' , ; ` | : . Evaluator tweak arguments: [n=0]
[08:08:01.405] | : . ' , ; ` | : .  list()
[08:08:01.407] | : . ' , ; ` | : . Evaluator formal arguments: [n=2]
[08:08:01.407] | : . ' , ; ` | : .  list()
[08:08:01.407] | : . ' , ; ` | : . Backend factory arguments: [n=2]
[08:08:01.407] | : . ' , ; ` | : . Dotted pair list of 2
[08:08:01.407] | : . ' , ; ` | : .  $ gc         : logi FALSE
[08:08:01.407] | : . ' , ; ` | : .  $ earlySignal: logi FALSE
[08:08:01.408] | : . ' , ; ` | : . Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:01.408] | : . ' , ; ` | : makeFutureBackend(<sequential>) ... done
[08:08:01.409] | : . ' , ; ` | plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[08:08:01.409] | : . ' , ; ` plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.409] | : . ' , ; ` plan(): nbrOfWorkers() = 1
[08:08:01.409] | : . ' , ; plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.409] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.411] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.412] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[08:08:01.412] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[08:08:01.412] | : . ' , ; ` | all.equal() for FutureStrategyList ...
[08:08:01.412] | : . ' , ; ` | : New stack:
[08:08:01.412] | : . ' , ; ` | : List of 1
[08:08:01.412] | : . ' , ; ` | :  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.412] | : . ' , ; ` | :     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.412] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.412] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.412] | : . ' , ; ` | :   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.412] | : . ' , ; ` | :     ...)  
[08:08:01.412] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.412] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.412] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategy)
[08:08:01.412] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd89708e0> 
[08:08:01.412] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.412] | : . ' , ; ` | :     ...)  
[08:08:01.412] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.412] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.415] | : . ' , ; ` | : Old stack:
[08:08:01.416] | : . ' , ; ` | : List of 1
[08:08:01.416] | : . ' , ; ` | :  $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.416] | : . ' , ; ` | :   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.416] | : . ' , ; ` | :   ..- attr(*, "init")= chr "done"
[08:08:01.416] | : . ' , ; ` | :   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.416] | : . ' , ; ` | :   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.416] | : . ' , ; ` | :   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.416] | : . ' , ; ` | :   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.416] | : . ' , ; ` | :   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd7a1f610> 
[08:08:01.416] | : . ' , ; ` | :   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.416] | : . ' , ; ` | :   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.416] | : . ' , ; ` | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.419] | : . ' , ; ` | : Not identical
[08:08:01.419] | : . ' , ; ` | : all.equal() for future ...
[08:08:01.419] | : . ' , ; ` | : . List of 2
[08:08:01.419] | : . ' , ; ` | : .  $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.419] | : . ' , ; ` | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.419] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.419] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:01.419] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.419] | : . ' , ; ` | : .     ...)  
[08:08:01.419] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.419] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.419] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:01.419] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd89708e0> 
[08:08:01.419] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.419] | : . ' , ; ` | : .     ...)  
[08:08:01.419] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.419] | : . ' , ; ` | : .  $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.419] | : . ' , ; ` | : .   ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[08:08:01.419] | : . ' , ; ` | : .   ..- attr(*, "init")= chr "done"
[08:08:01.419] | : . ' , ; ` | : .   ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.419] | : . ' , ; ` | : .   .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.419] | : . ' , ; ` | : .   ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.419] | : . ' , ; ` | : .   ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[08:08:01.419] | : . ' , ; ` | : .   ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd7a1f610> 
[08:08:01.419] | : . ' , ; ` | : .   .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[08:08:01.419] | : . ' , ; ` | : .   .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[08:08:01.426] | : . ' , ; ` | : . Formals differ
[08:08:01.427] | : . ' , ; ` | : all.equal() for future ... done
[08:08:01.427] | : . ' , ; ` | : Future strategies differ at level 1
[08:08:01.427] | : . ' , ; ` | all.equal() for FutureStrategyList ... done
[08:08:01.427] | : . ' , ; ` | plan(): Setting new future backend stack:
[08:08:01.427] | : . ' , ; ` | List of future strategies:
[08:08:01.427] | : . ' , ; ` | 1. multicore:
[08:08:01.427] | : . ' , ; ` |    - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:01.427] | : . ' , ; ` |    - tweaked: FALSE
[08:08:01.427] | : . ' , ; ` |    - call: plan(strategy)
[08:08:01.427] | : . ' , ; ` | List of 1
[08:08:01.427] | : . ' , ; ` |  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.427] | : . ' , ; ` |     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.427] | : . ' , ; ` |   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.427] | : . ' , ; ` |   ..- attr(*, "init")= chr "done"
[08:08:01.427] | : . ' , ; ` |   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.427] | : . ' , ; ` |     ...)  
[08:08:01.427] | : . ' , ; ` |   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.427] | : . ' , ; ` |   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.427] | : . ' , ; ` |   ..- attr(*, "call")= language plan(strategy)
[08:08:01.427] | : . ' , ; ` |   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd89708e0> 
[08:08:01.427] | : . ' , ; ` |   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.427] | : . ' , ; ` |     ...)  
[08:08:01.427] | : . ' , ; ` |   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.427] | : . ' , ; ` |  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.431] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[08:08:01.431] | : . ' , ; ` | plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[08:08:01.431] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.431] | : . ' , ; ` | plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.431] | : . ' , ; ` | plan(): nbrOfWorkers() = 2
[08:08:01.431] | : . ' , ; ` plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[08:08:01.432] | : . ' , ; plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.432] | : . ' , plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[08:08:01.432] | : readImmediateCondition() ...
[08:08:01.432] | : . Path: ‘/tmp/RtmpdJDGAY/.future/immediateConditions’
[08:08:01.433] | : . Number of RDS files: 0
[08:08:01.433] | : . Returned conditions set:
[08:08:01.433] | : .  list()
[08:08:01.433] | : readImmediateCondition() ... done
[08:08:01.434] | : result() for MulticoreFuture ...
[08:08:01.434] | : result() for MulticoreFuture ... done
[08:08:01.434] | : signalConditions() ...
[08:08:01.436] | : . include = ‘immediateCondition’
[08:08:01.436] | : . exclude = 
[08:08:01.437] | : . resignal = FALSE
[08:08:01.437] | : . Number of conditions: 6
[08:08:01.437] | : .  int 6
[08:08:01.437] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.438] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.438] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.438] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.438] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.438] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.438] | : signalConditions() ... done
[08:08:01.439] | result() for MulticoreFuture ... done
[08:08:01.439] | result() for MulticoreFuture ...
[08:08:01.439] | result() for MulticoreFuture ... done
[08:08:01.439] | signalConditions() ...
[08:08:01.439] | : include = ‘immediateCondition’
[08:08:01.439] | : exclude = 
[08:08:01.439] | : resignal = FALSE
[08:08:01.440] | : Number of conditions: 6
[08:08:01.440] | :  int 6
[08:08:01.440] | : Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.440] | : Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.441] | : Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.441] | : Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.441] | : Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.441] | : Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.441] | signalConditions() ... done
[08:08:01.441] | relay stdout ...
[08:08:01.442] | relay stdout ... done
[08:08:01.442] | check for misuse ...
[08:08:01.442] | check for misuse ... done
[08:08:01.442] | relay conditions ...
[08:08:01.442] | : Future state: ‘finished’
[08:08:01.442] | : result() for MulticoreFuture ...
[08:08:01.442] | : result() for MulticoreFuture ... done
[08:08:01.443] | : signalConditions() ...
[08:08:01.443] | : . include = ‘condition’
[08:08:01.443] | : . exclude = ‘immediateCondition’
[08:08:01.443] | : . resignal = TRUE
[08:08:01.443] | : . Number of conditions: 6
[08:08:01.443] | : .  int 6
[08:08:01.444] | : . Condition #1 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.444] | : . Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.369] | : . ' , attachPackages() ...
[08:08:01.444] | : . Condition #2 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.444] | : . Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.370] | : . ' , ; packages: [n=1] ‘future’
[08:08:01.444] | : . Condition #3 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.445] | : . Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.370] | : . ' , attachPackages() ... done
[08:08:01.445] | : . Condition #4 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.445] | : . Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.371] | : . ' , attachPackages() ...
[08:08:01.445] | : . Condition #5 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.445] | : . Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.371] | : . ' , ; packages: [n=0] 
[08:08:01.445] | : . Condition #6 (class: ‘simpleMessage’, ‘message’, ‘condition’):
[08:08:01.446] | : . Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[08:08:01.371] | : . ' , attachPackages() ... done
[08:08:01.446] | : signalConditions() ... done
[08:08:01.446] | relay conditions ... done
[08:08:01.446] value() for MulticoreFuture (‘strategy = multicore’) ... done
- plan('multicore') ... DONE
- plan('multisession') ...
[08:08:01.446] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.447] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[08:08:01.447] | : all.equal() for FutureStrategyList ...
[08:08:01.447] | : . New stack:
[08:08:01.447] | : . List of 1
[08:08:01.447] | : .  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:01.447] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.447] | : .   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:01.447] | : .   ..- attr(*, "init")= logi TRUE
[08:08:01.447] | : .   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:01.447] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:01.447] | : .   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:01.447] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:01.447] | : .   ..- attr(*, "untweakable")= chr "persistent"
[08:08:01.447] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:01.447] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.451] | : . Old stack:
[08:08:01.451] | : . List of 1
[08:08:01.451] | : .  $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.451] | : .     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.451] | : .   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.451] | : .   ..- attr(*, "init")= chr "done"
[08:08:01.451] | : .   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.451] | : .     ...)  
[08:08:01.451] | : .   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.451] | : .   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.451] | : .   ..- attr(*, "call")= language plan(strategy)
[08:08:01.451] | : .   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd89708e0> 
[08:08:01.451] | : .   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.451] | : .     ...)  
[08:08:01.451] | : .   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.451] | : .  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.455] | : . Not identical
[08:08:01.455] | : . all.equal() for future ...
[08:08:01.455] | : . ' List of 2
[08:08:01.455] | : . '  $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:01.455] | : . '     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.455] | : . '   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:01.455] | : . '   ..- attr(*, "init")= logi TRUE
[08:08:01.455] | : . '   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:01.455] | : . '     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:01.455] | : . '   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:01.455] | : . '   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:01.455] | : . '   ..- attr(*, "untweakable")= chr "persistent"
[08:08:01.455] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:01.455] | : . '  $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[08:08:01.455] | : . '     earlySignal = FALSE, envir = parent.frame())  
[08:08:01.455] | : . '   ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[08:08:01.455] | : . '   ..- attr(*, "init")= chr "done"
[08:08:01.455] | : . '   ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.455] | : . '     ...)  
[08:08:01.455] | : . '   .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.455] | : . '   ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.455] | : . '   ..- attr(*, "call")= language plan(strategy)
[08:08:01.455] | : . '   ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564dd89708e0> 
[08:08:01.455] | : . '   .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[08:08:01.455] | : . '     ...)  
[08:08:01.455] | : . '   .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[08:08:01.463] | : . ' Formals differ
[08:08:01.463] | : . all.equal() for future ... done
[08:08:01.463] | : . Future strategies differ at level 1
[08:08:01.463] | : all.equal() for FutureStrategyList ... done
[08:08:01.463] | : plan(): Setting new future backend stack:
[08:08:01.463] | : List of future strategies:
[08:08:01.463] | : 1. multisession:
[08:08:01.463] | :    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[08:08:01.463] | :    - tweaked: FALSE
[08:08:01.463] | :    - call: plan(strategy)
[08:08:01.464] | : List of 1
[08:08:01.464] | :  $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:01.464] | :     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.464] | :   ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:01.464] | :   ..- attr(*, "init")= logi TRUE
[08:08:01.464] | :   ..- attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:01.464] | :     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:01.464] | :   .. ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:01.464] | :   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:01.464] | :   ..- attr(*, "untweakable")= chr "persistent"
[08:08:01.464] | :   ..- attr(*, "call")= language plan(strategy)
[08:08:01.464] | :  - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[08:08:01.467] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[08:08:01.467] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.467] | : . ' Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:08:01.467] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.468] | : . Legacy shutdown of cluster workers ...
[08:08:01.468] | : . ' Stopping existing cluster ...
[08:08:01.468] | : . ' , No pre-existing cluster. Skipping
[08:08:01.468] | : . ' Stopping existing cluster ... done
[08:08:01.468] | : . Legacy shutdown of cluster workers ... done
[08:08:01.468] | : plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[08:08:01.469] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:08:01.469] | : . function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[08:08:01.469] | : .     gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[08:08:01.469] | : .  - attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[08:08:01.469] | : .  - attr(*, "init")= logi TRUE
[08:08:01.469] | : .  - attr(*, "factory")=function (workers = availableCores(), rscript_libs = .libPaths(), interrupts = TRUE, 
[08:08:01.469] | : .     gc = FALSE, earlySignal = FALSE, ...)  
[08:08:01.469] | : .   ..- attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:01.469] | : .  - attr(*, "tweakable")= chr [1:11] "workers" "rscript_libs" "interrupts" "gc" ...
[08:08:01.469] | : .  - attr(*, "untweakable")= chr "persistent"
[08:08:01.469] | : .  - attr(*, "call")= language plan(strategy)
[08:08:01.471] | : . init: TRUE
[08:08:01.471] | : . makeFutureBackend(<multisession>) ...
[08:08:01.471] | : . ' Backend function: <‘NULL’>
[08:08:01.471] | : . ' Evaluator tweak arguments: [n=0]
[08:08:01.471] | : . '  list()
[08:08:01.472] | : . ' Evaluator formal arguments: [n=4]
[08:08:01.472] | : . '  list()
[08:08:01.472] | : . ' Backend factory arguments: [n=4]
[08:08:01.472] | : . ' Dotted pair list of 4
[08:08:01.472] | : . '  $ workers     : language availableCores()
[08:08:01.472] | : . '  $ rscript_libs: language .libPaths()
[08:08:01.472] | : . '  $ gc          : logi FALSE
[08:08:01.472] | : . '  $ earlySignal : logi FALSE
[08:08:01.474] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ...
[08:08:01.474] | : . ' , Arguments:
[08:08:01.474] | : . ' , List of 5
[08:08:01.474] | : . ' ,  $ workers     : Named int 2
[08:08:01.474] | : . ' ,   ..- attr(*, "names")= chr "mc.cores"
[08:08:01.474] | : . ' ,  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:01.474] | : . ' ,  $ interrupts  : logi TRUE
[08:08:01.474] | : . ' ,  $ gc          : logi FALSE
[08:08:01.474] | : . ' ,  $ earlySignal : logi FALSE
[08:08:01.479] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ...
[08:08:01.480] | : . ' , ; workers: 2
[08:08:01.480] | : . ' , ; getCluster() ...
[08:08:01.480] | : . ' , ; getCluster() ... done
[08:08:01.480] | : . ' , ; Stopping existing cluster ...
[08:08:01.480] | : . ' , ; ` No pre-existing cluster. Skipping
[08:08:01.480] | : . ' , ; Stopping existing cluster ... done
[08:08:01.480] | : . ' , ; Starting new cluster ...
[08:08:01.480] | : . ' , ; ` makeCluster(workers, ...) ...
[08:08:01.480] | : . ' , ; ` | Arguments:
[08:08:01.480] | : . ' , ; ` | List of 2
[08:08:01.480] | : . ' , ; ` |  $             : int 2
[08:08:01.480] | : . ' , ; ` |  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:01.482] | : . ' , ; ` | .makeCluster() ...
[08:08:01.482] | : . ' , ; ` | : workers: ‘2’
[08:08:01.482] | : . ' , ; ` | : R_FUTURE_PLAN: NA
[08:08:01.482] | : . ' , ; ` | : parallelly::makeClusterPSOCK() arguments:
[08:08:01.482] | : . ' , ; ` | : List of 2
[08:08:01.482] | : . ' , ; ` | :  $             : int 2
[08:08:01.482] | : . ' , ; ` | :  $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[08:08:01.989] | : . ' , ; ` | : Generated cluster UUID
[08:08:01.989] | : . ' , ; ` | : Cluster UUID: ‘66095110c2d4e833d261f907dfe3d20d’
[08:08:01.989] | : . ' , ; ` | : Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:01.991] | : . ' , ; ` | .makeCluster() ... done
[08:08:01.992] | : . ' , ; ` | Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:01.993] | : . ' , ; ` makeCluster(workers, ...) ... done
[08:08:01.993] | : . ' , ; ` Number of workers: 2
[08:08:01.993] | : . ' , ; ` Workers UUID: ‘66095110c2d4e833d261f907dfe3d20d’
[08:08:01.993] | : . ' , ; Starting new cluster ... done
[08:08:01.994] | : . ' , ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ... done
[08:08:01.994] | : . ' , Backend: <‘MultisessionFutureBackend’, ‘ClusterFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[08:08:01.994] | : . ' MultisessionFutureBackend(workers = <workers>, interrupts = TRUE, ...) ... done
[08:08:01.994] | : . makeFutureBackend(<multisession>) ... done
[08:08:01.994] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.994] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.994] | : . plan(): nbrOfWorkers() = 2
[08:08:01.994] | : plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[08:08:01.995] | plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[08:08:01.995] | future(..., label = NULL) ...
[08:08:01.995] | : lazy: FALSE
[08:08:01.995] | : stdout: TRUE
[08:08:01.995] | : conditions: [n=1] ‘condition’
[08:08:01.995] | : gc: FALSE
[08:08:01.995] | : earlySignal: FALSE
[08:08:01.995] | : getGlobalsAndPackages() ...
[08:08:01.995] | : . Searching for globals ...
[08:08:01.997] | : . ' globals found: [0] 
[08:08:01.997] | : . Searching for globals ... done
[08:08:01.997] | : . globals: [0] <none>
[08:08:01.997] | : . packages: [0] <none>
[08:08:01.997] | : getGlobalsAndPackages() ... done
[08:08:01.997] | : run() for ‘Future’ (<unnamed-9>) ...
[08:08:01.997] | : . state: ‘created’
[08:08:01.997] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:01.998] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:01.998] | : . Using MultisessionFutureBackend ...
[08:08:01.998] | : . ' Number of futures since start: 0 (0 created, 0 launched, 0 finished)
[08:08:01.998] | : . ' Launching futures ...
[08:08:01.998] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:01.998] | : . ' , ; Workers: [n=2]
[08:08:01.998] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:02.000] | : . ' , ; FutureRegistry: ‘workers-66095110c2d4e833d261f907dfe3d20d’
[08:08:02.000] | : . ' , ; requestWorker() ...
[08:08:02.000] | : . ' , ; ` requestNode() ...
[08:08:02.000] | : . ' , ; ` | Number of workers: 2
[08:08:02.000] | : . ' , ; ` | Polling for a free worker ...
[08:08:02.000] | : . ' , ; ` | : FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'list', earlySignal = 0) ...
[08:08:02.001] | : . ' , ; ` | : . Created empty registry ‘workers-66095110c2d4e833d261f907dfe3d20d’
[08:08:02.001] | : . ' , ; ` | : . Listing all futures
[08:08:02.001] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:02.001] | : . ' , ; ` | : FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'list', earlySignal = 0) ... done
[08:08:02.001] | : . ' , ; ` | : Total time: 0
[08:08:02.001] | : . ' , ; ` | Polling for a free worker ... done
[08:08:02.001] | : . ' , ; ` | FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'list', earlySignal = 0) ...
[08:08:02.001] | : . ' , ; ` | : Listing all futures
[08:08:02.001] | : . ' , ; ` | : Number of registered futures: 0
[08:08:02.001] | : . ' , ; ` | FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'list', earlySignal = 0) ... done
[08:08:02.002] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:02.002] | : . ' , ; ` | Index of first available worker: 1
[08:08:02.002] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:02.068] | : . ' , ; ` | : Worker is functional
[08:08:02.068] | : . ' , ; ` | : FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'list', earlySignal = 0) ...
[08:08:02.068] | : . ' , ; ` | : . Listing all futures
[08:08:02.069] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:02.069] | : . ' , ; ` | : FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'list', earlySignal = 0) ... done
[08:08:02.069] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:02.069] | : . ' , ; ` requestNode() ... done
[08:08:02.069] | : . ' , ; ` cluster node index: 1
[08:08:02.069] | : . ' , ; requestWorker() ... done
[08:08:02.069] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:02.070] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:02.070] | : . ' , ; launchFuture() ...
[08:08:02.070] | : . ' , ; ` cluster node index: 1
[08:08:02.071] | : . ' , ; ` getFutureData() ...
[08:08:02.071] | : . ' , ; ` | getFutureCore() ...
[08:08:02.071] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:02.071] | : . ' , ; ` | getFutureCore() ... done
[08:08:02.071] | : . ' , ; ` | getFutureCapture() ...
[08:08:02.071] | : . ' , ; ` | getFutureCapture() ... done
[08:08:02.071] | : . ' , ; ` | getFutureContext() ...
[08:08:02.071] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:02.072] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:02.072] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:02.072] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:02.072] | : . ' , ; ` | getFutureContext() ... done
[08:08:02.072] | : . ' , ; ` getFutureData() ... done
[08:08:02.073] | : . ' , ; ` FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'add', earlySignal = 0) ...
[08:08:02.073] | : . ' , ; ` | Appended future to position #1
[08:08:02.073] | : . ' , ; ` | Number of registered futures: 1
[08:08:02.073] | : . ' , ; ` FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'add', earlySignal = 0) ... done
[08:08:02.073] | : . ' , ; launchFuture() ... done
[08:08:02.073] | : . ' , ; MultisessionFuture started
[08:08:02.074] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:02.074] | : . ' Launching futures ... done
[08:08:02.074] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:02.074] | : . Using MultisessionFutureBackend ... done
[08:08:02.074] | : run() for ‘Future’ (<unnamed-9>) ... done
[08:08:02.074] | future(..., label = NULL) ... done
MultisessionFuture:
Label: <unnamed-9>
Expression:
[1] 42
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘running’
[08:08:02.075] | resolved() for MultisessionFuture (<unnamed-9>) ...
[08:08:02.075] | : Cluster node socket connection: index=4, id=373
[08:08:02.076] | : assertValidConnection() ...
[08:08:02.076] | : . cluster node index: 1
[08:08:02.076] | : assertValidConnection() ... done
[08:08:02.087] | : socketSelect(list(<connection #4 (id=373)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:02.087] | resolved() for MultisessionFuture (<unnamed-9>) ... done
Resolved: FALSE
Unique identifier: 754d324b3d8990aec0ae0b0efb44e3b3-9
Owner process: 754d324b3d8990aec0ae0b0efb44e3b3
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
Value: <not collected>
Conditions captured: <none>
[08:08:02.087] | value() for MultisessionFuture (<unnamed-9>) ...
[08:08:02.088] | : result() for ClusterFuture ...
[08:08:02.088] | : . assertValidConnection() ...
[08:08:02.088] | : . ' cluster node index: 1
[08:08:02.088] | : . assertValidConnection() ... done
[08:08:02.089] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:02.089] | : . ' cluster node index: 1
[08:08:02.162] | : . ' [1] TRUE
[08:08:02.163] | : . ' received data:
[08:08:02.163] | : . ' List of 5
[08:08:02.163] | : . '  $ type   : chr "VALUE"
[08:08:02.163] | : . '  $ value  :List of 16
[08:08:02.163] | : . '   ..$ value              : num 42
[08:08:02.163] | : . '   ..$ visible            : logi TRUE
[08:08:02.163] | : . '   ..$ stdout             : chr ""
[08:08:02.163] | : . '   ..$ conditions         : list()
[08:08:02.163] | : . '   ..$ rng                : logi FALSE
[08:08:02.163] | : . '   ..$ seed               : NULL
[08:08:02.163] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:02.163] | : . '   ..$ misuseConnections  :List of 3
[08:08:02.163] | : . '   .. ..$ added   : NULL
[08:08:02.163] | : . '   .. ..$ removed : NULL
[08:08:02.163] | : . '   .. ..$ replaced: NULL
[08:08:02.163] | : . '   ..$ misuseDevices      : NULL
[08:08:02.163] | : . '   ..$ misuseDefaultDevice: list()
[08:08:02.163] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:02"
[08:08:02.163] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:02"
[08:08:02.163] | : . '   ..$ uuid               : chr [1:2] "754d324b3d8990aec0ae0b0efb44e3b3" "9"
[08:08:02.163] | : . '   ..$ session_uuid       : chr "1a7e607d94d85f53d2500e5c699dfe5c"
[08:08:02.163] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:02.163] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:02.163] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:02.163] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:02.163] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:02.163] | : . '   .. .. ..$ pid   : int 67932
[08:08:02.163] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:02"
[08:08:02.163] | : . '   .. .. ..$ random: int 2147483647
[08:08:02.163] | : . '   ..$ r_info             :List of 4
[08:08:02.163] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:02.163] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:02.163] | : . '   .. ..$ os           : chr "unix"
[08:08:02.163] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:02.163] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:02.163] | : . '   ..$ version            : chr "1.8"
[08:08:02.163] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:02.163] | : . '  $ success: logi TRUE
[08:08:02.163] | : . '  $ time   : 'proc_time' Named num [1:5] 0.045 0.005 0.049 0 0
[08:08:02.163] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:02.163] | : . '  $ tag    : NULL
[08:08:02.177] | : . ' Received FutureResult
[08:08:02.177] | : . ' FutureResult:
[08:08:02.177] | : . ' value: ‘numeric’
[08:08:02.177] | : . ' visible: TRUE
[08:08:02.177] | : . ' stdout: character
[08:08:02.177] | : . ' conditions: [n = 0] 
[08:08:02.177] | : . ' RNG used: FALSE
[08:08:02.177] | : . ' duration: 0.04666853 secs (started 2025-06-17 08:08:02.115293)
[08:08:02.177] | : . ' version: 1.8
[08:08:02.178] | : . ' FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'remove', earlySignal = 0) ...
[08:08:02.178] | : . ' , Removed future from position #1
[08:08:02.178] | : . ' , Number of registered futures: 0
[08:08:02.178] | : . ' FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'remove', earlySignal = 0) ... done
[08:08:02.179] | : . ' Erased future from future backend
[08:08:02.179] | : . ' result() for ClusterFuture ...
[08:08:02.179] | : . ' , result already collected: FutureResult
[08:08:02.179] | : . ' result() for ClusterFuture ... done
[08:08:02.179] | : . ' signalConditions() ...
[08:08:02.179] | : . ' , include = ‘immediateCondition’
[08:08:02.179] | : . ' , exclude = 
[08:08:02.179] | : . ' , resignal = FALSE
[08:08:02.180] | : . ' , Number of conditions: 0
[08:08:02.180] | : . ' ,  int 0
[08:08:02.180] | : . ' signalConditions() ... done
[08:08:02.180] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:02.180] | : result() for ClusterFuture ... done
[08:08:02.181] | : result() for ClusterFuture ...
[08:08:02.181] | : . result already collected: FutureResult
[08:08:02.181] | : result() for ClusterFuture ... done
[08:08:02.181] | : signalConditions() ...
[08:08:02.181] | : . include = ‘immediateCondition’
[08:08:02.181] | : . exclude = 
[08:08:02.181] | : . resignal = FALSE
[08:08:02.182] | : . Number of conditions: 0
[08:08:02.182] | : .  int 0
[08:08:02.182] | : signalConditions() ... done
[08:08:02.182] | : relay stdout ...
[08:08:02.182] | : relay stdout ... done
[08:08:02.183] | : check for misuse ...
[08:08:02.183] | : check for misuse ... done
[08:08:02.183] | value() for MultisessionFuture (<unnamed-9>) ... done
[08:08:02.183] | future(..., label = NULL) ...
[08:08:02.183] | : lazy: FALSE
[08:08:02.183] | : stdout: TRUE
[08:08:02.184] | : conditions: [n=1] ‘condition’
[08:08:02.184] | : gc: FALSE
[08:08:02.184] | : earlySignal: FALSE
[08:08:02.184] | : getGlobalsAndPackages() ...
[08:08:02.184] | : . Searching for globals ...
[08:08:02.188] | : . ' globals found: [1] ‘{’
[08:08:02.188] | : . Searching for globals ... done
[08:08:02.188] | : . Resolving globals: FALSE
[08:08:02.188] | : . Search for packages associated with the globals ...
[08:08:02.189] | : . ' Packages associated with globals: [1] ‘base’
[08:08:02.189] | : . ' Packages: [1] ‘base’
[08:08:02.189] | : . Search for packages associated with the globals ... done
[08:08:02.189] | : . Packages after dropping 'base': [0] 
[08:08:02.189] | : . globals: [0] 
[08:08:02.189] | : . packages: [0] 
[08:08:02.190] | : getGlobalsAndPackages() ... done
[08:08:02.190] | : run() for ‘Future’ (<unnamed-10>) ...
[08:08:02.190] | : . state: ‘created’
[08:08:02.190] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:02.190] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:02.190] | : . Using MultisessionFutureBackend ...
[08:08:02.191] | : . ' Number of futures since start: 1 (1 created, 1 launched, 1 finished)
[08:08:02.191] | : . ' Launching futures ...
[08:08:02.191] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:02.191] | : . ' , ; Workers: [n=2]
[08:08:02.191] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:02.193] | : . ' , ; FutureRegistry: ‘workers-66095110c2d4e833d261f907dfe3d20d’
[08:08:02.193] | : . ' , ; requestWorker() ...
[08:08:02.193] | : . ' , ; ` requestNode() ...
[08:08:02.193] | : . ' , ; ` | Number of workers: 2
[08:08:02.194] | : . ' , ; ` | Polling for a free worker ...
[08:08:02.194] | : . ' , ; ` | : FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'list', earlySignal = 0) ...
[08:08:02.194] | : . ' , ; ` | : . Listing all futures
[08:08:02.194] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:02.194] | : . ' , ; ` | : FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'list', earlySignal = 0) ... done
[08:08:02.194] | : . ' , ; ` | : Total time: 0
[08:08:02.194] | : . ' , ; ` | Polling for a free worker ... done
[08:08:02.195] | : . ' , ; ` | FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'list', earlySignal = 0) ...
[08:08:02.195] | : . ' , ; ` | : Listing all futures
[08:08:02.195] | : . ' , ; ` | : Number of registered futures: 0
[08:08:02.195] | : . ' , ; ` | FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'list', earlySignal = 0) ... done
[08:08:02.195] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:02.195] | : . ' , ; ` | Index of first available worker: 1
[08:08:02.195] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:02.249] | : . ' , ; ` | : Worker is functional
[08:08:02.250] | : . ' , ; ` | : FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'list', earlySignal = 0) ...
[08:08:02.250] | : . ' , ; ` | : . Listing all futures
[08:08:02.250] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:02.250] | : . ' , ; ` | : FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'list', earlySignal = 0) ... done
[08:08:02.250] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:02.250] | : . ' , ; ` requestNode() ... done
[08:08:02.250] | : . ' , ; ` cluster node index: 1
[08:08:02.250] | : . ' , ; requestWorker() ... done
[08:08:02.251] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:02.251] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:02.251] | : . ' , ; launchFuture() ...
[08:08:02.251] | : . ' , ; ` cluster node index: 1
[08:08:02.251] | : . ' , ; ` getFutureData() ...
[08:08:02.252] | : . ' , ; ` | getFutureCore() ...
[08:08:02.252] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:02.252] | : . ' , ; ` | getFutureCore() ... done
[08:08:02.252] | : . ' , ; ` | getFutureCapture() ...
[08:08:02.252] | : . ' , ; ` | getFutureCapture() ... done
[08:08:02.252] | : . ' , ; ` | getFutureContext() ...
[08:08:02.252] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:02.253] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:02.253] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:02.253] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:02.253] | : . ' , ; ` | getFutureContext() ... done
[08:08:02.253] | : . ' , ; ` getFutureData() ... done
[08:08:02.253] | : . ' , ; ` FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'add', earlySignal = 0) ...
[08:08:02.254] | : . ' , ; ` | Appended future to position #1
[08:08:02.254] | : . ' , ; ` | Number of registered futures: 1
[08:08:02.254] | : . ' , ; ` FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'add', earlySignal = 0) ... done
[08:08:02.254] | : . ' , ; launchFuture() ... done
[08:08:02.254] | : . ' , ; MultisessionFuture started
[08:08:02.254] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:02.254] | : . ' Launching futures ... done
[08:08:02.255] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:02.255] | : . Using MultisessionFutureBackend ... done
[08:08:02.255] | : run() for ‘Future’ (<unnamed-10>) ... done
[08:08:02.255] | future(..., label = NULL) ... done
MultisessionFuture:
Label: <unnamed-10>
Expression:
{
    42
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘running’
[08:08:02.256] | resolved() for MultisessionFuture (<unnamed-10>) ...
[08:08:02.256] | : Cluster node socket connection: index=4, id=373
[08:08:02.256] | : assertValidConnection() ...
[08:08:02.256] | : . cluster node index: 1
[08:08:02.257] | : assertValidConnection() ... done
[08:08:02.267] | : socketSelect(list(<connection #4 (id=373)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:02.267] | resolved() for MultisessionFuture (<unnamed-10>) ... done
Resolved: FALSE
Unique identifier: 754d324b3d8990aec0ae0b0efb44e3b3-10
Owner process: 754d324b3d8990aec0ae0b0efb44e3b3
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
Value: <not collected>
Conditions captured: <none>
[08:08:02.268] | value() for MultisessionFuture (<unnamed-10>) ...
[08:08:02.268] | : result() for ClusterFuture ...
[08:08:02.268] | : . assertValidConnection() ...
[08:08:02.268] | : . ' cluster node index: 1
[08:08:02.269] | : . assertValidConnection() ... done
[08:08:02.269] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:02.269] | : . ' cluster node index: 1
[08:08:02.297] | : . ' [1] TRUE
[08:08:02.297] | : . ' received data:
[08:08:02.297] | : . ' List of 5
[08:08:02.297] | : . '  $ type   : chr "VALUE"
[08:08:02.297] | : . '  $ value  :List of 16
[08:08:02.297] | : . '   ..$ value              : num 42
[08:08:02.297] | : . '   ..$ visible            : logi TRUE
[08:08:02.297] | : . '   ..$ stdout             : chr ""
[08:08:02.297] | : . '   ..$ conditions         : list()
[08:08:02.297] | : . '   ..$ rng                : logi FALSE
[08:08:02.297] | : . '   ..$ seed               : NULL
[08:08:02.297] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:02.297] | : . '   ..$ misuseConnections  :List of 3
[08:08:02.297] | : . '   .. ..$ added   : NULL
[08:08:02.297] | : . '   .. ..$ removed : NULL
[08:08:02.297] | : . '   .. ..$ replaced: NULL
[08:08:02.297] | : . '   ..$ misuseDevices      : NULL
[08:08:02.297] | : . '   ..$ misuseDefaultDevice: list()
[08:08:02.297] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:02"
[08:08:02.297] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:02"
[08:08:02.297] | : . '   ..$ uuid               : chr [1:2] "754d324b3d8990aec0ae0b0efb44e3b3" "10"
[08:08:02.297] | : . '   ..$ session_uuid       : chr "1a7e607d94d85f53d2500e5c699dfe5c"
[08:08:02.297] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:02.297] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:02.297] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:02.297] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:02.297] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:02.297] | : . '   .. .. ..$ pid   : int 67932
[08:08:02.297] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:02"
[08:08:02.297] | : . '   .. .. ..$ random: int 2147483647
[08:08:02.297] | : . '   ..$ r_info             :List of 4
[08:08:02.297] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:02.297] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:02.297] | : . '   .. ..$ os           : chr "unix"
[08:08:02.297] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:02.297] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:02.297] | : . '   ..$ version            : chr "1.8"
[08:08:02.297] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:02.297] | : . '  $ success: logi TRUE
[08:08:02.297] | : . '  $ time   : 'proc_time' Named num [1:5] 0.002 0 0.003 0 0
[08:08:02.297] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:02.297] | : . '  $ tag    : NULL
[08:08:02.311] | : . ' Received FutureResult
[08:08:02.311] | : . ' FutureResult:
[08:08:02.311] | : . ' value: ‘numeric’
[08:08:02.311] | : . ' visible: TRUE
[08:08:02.311] | : . ' stdout: character
[08:08:02.311] | : . ' conditions: [n = 0] 
[08:08:02.311] | : . ' RNG used: FALSE
[08:08:02.311] | : . ' duration: 0.002487183 secs (started 2025-06-17 08:08:02.294178)
[08:08:02.311] | : . ' version: 1.8
[08:08:02.311] | : . ' FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'remove', earlySignal = 0) ...
[08:08:02.312] | : . ' , Removed future from position #1
[08:08:02.312] | : . ' , Number of registered futures: 0
[08:08:02.312] | : . ' FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'remove', earlySignal = 0) ... done
[08:08:02.312] | : . ' Erased future from future backend
[08:08:02.312] | : . ' result() for ClusterFuture ...
[08:08:02.312] | : . ' , result already collected: FutureResult
[08:08:02.312] | : . ' result() for ClusterFuture ... done
[08:08:02.312] | : . ' signalConditions() ...
[08:08:02.312] | : . ' , include = ‘immediateCondition’
[08:08:02.313] | : . ' , exclude = 
[08:08:02.313] | : . ' , resignal = FALSE
[08:08:02.313] | : . ' , Number of conditions: 0
[08:08:02.313] | : . ' ,  int 0
[08:08:02.313] | : . ' signalConditions() ... done
[08:08:02.313] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:02.313] | : result() for ClusterFuture ... done
[08:08:02.314] | : result() for ClusterFuture ...
[08:08:02.314] | : . result already collected: FutureResult
[08:08:02.314] | : result() for ClusterFuture ... done
[08:08:02.314] | : signalConditions() ...
[08:08:02.314] | : . include = ‘immediateCondition’
[08:08:02.314] | : . exclude = 
[08:08:02.314] | : . resignal = FALSE
[08:08:02.314] | : . Number of conditions: 0
[08:08:02.314] | : .  int 0
[08:08:02.315] | : signalConditions() ... done
[08:08:02.315] | : relay stdout ...
[08:08:02.315] | : relay stdout ... done
[08:08:02.315] | : check for misuse ...
[08:08:02.315] | : check for misuse ... done
[08:08:02.315] | value() for MultisessionFuture (<unnamed-10>) ... done
[08:08:02.315] | future(..., label = ‘strategy = multisession’) ...
[08:08:02.315] | : lazy: FALSE
[08:08:02.316] | : stdout: TRUE
[08:08:02.316] | : conditions: [n=1] ‘condition’
[08:08:02.316] | : gc: FALSE
[08:08:02.316] | : earlySignal: FALSE
[08:08:02.316] | : getGlobalsAndPackages() ...
[08:08:02.316] | : . Searching for globals ...
[08:08:02.317] | : . ' globals found: [0] 
[08:08:02.317] | : . Searching for globals ... done
[08:08:02.318] | : . globals: [0] <none>
[08:08:02.318] | : . packages: [0] <none>
[08:08:02.318] | : getGlobalsAndPackages() ... done
[08:08:02.318] | : run() for ‘Future’ (‘strategy = multisession’) ...
[08:08:02.318] | : . state: ‘created’
[08:08:02.318] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:02.318] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:02.318] | : . Using MultisessionFutureBackend ...
[08:08:02.319] | : . ' Number of futures since start: 2 (2 created, 2 launched, 2 finished)
[08:08:02.319] | : . ' Launching futures ...
[08:08:02.319] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:02.319] | : . ' , ; Workers: [n=2]
[08:08:02.319] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:02.320] | : . ' , ; FutureRegistry: ‘workers-66095110c2d4e833d261f907dfe3d20d’
[08:08:02.321] | : . ' , ; requestWorker() ...
[08:08:02.321] | : . ' , ; ` requestNode() ...
[08:08:02.321] | : . ' , ; ` | Number of workers: 2
[08:08:02.321] | : . ' , ; ` | Polling for a free worker ...
[08:08:02.321] | : . ' , ; ` | : FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'list', earlySignal = 0) ...
[08:08:02.321] | : . ' , ; ` | : . Listing all futures
[08:08:02.321] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:02.321] | : . ' , ; ` | : FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'list', earlySignal = 0) ... done
[08:08:02.321] | : . ' , ; ` | : Total time: 0
[08:08:02.322] | : . ' , ; ` | Polling for a free worker ... done
[08:08:02.322] | : . ' , ; ` | FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'list', earlySignal = 0) ...
[08:08:02.322] | : . ' , ; ` | : Listing all futures
[08:08:02.322] | : . ' , ; ` | : Number of registered futures: 0
[08:08:02.322] | : . ' , ; ` | FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'list', earlySignal = 0) ... done
[08:08:02.322] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:02.322] | : . ' , ; ` | Index of first available worker: 1
[08:08:02.322] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:02.415] | : . ' , ; ` | : Worker is functional
[08:08:02.415] | : . ' , ; ` | : FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'list', earlySignal = 0) ...
[08:08:02.415] | : . ' , ; ` | : . Listing all futures
[08:08:02.416] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:02.416] | : . ' , ; ` | : FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'list', earlySignal = 0) ... done
[08:08:02.416] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:02.416] | : . ' , ; ` requestNode() ... done
[08:08:02.416] | : . ' , ; ` cluster node index: 1
[08:08:02.416] | : . ' , ; requestWorker() ... done
[08:08:02.416] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:02.417] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:02.417] | : . ' , ; launchFuture() ...
[08:08:02.417] | : . ' , ; ` cluster node index: 1
[08:08:02.417] | : . ' , ; ` getFutureData() ...
[08:08:02.417] | : . ' , ; ` | getFutureCore() ...
[08:08:02.417] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:02.417] | : . ' , ; ` | getFutureCore() ... done
[08:08:02.417] | : . ' , ; ` | getFutureCapture() ...
[08:08:02.417] | : . ' , ; ` | getFutureCapture() ... done
[08:08:02.418] | : . ' , ; ` | getFutureContext() ...
[08:08:02.418] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:02.418] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:02.418] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:02.418] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:02.418] | : . ' , ; ` | getFutureContext() ... done
[08:08:02.418] | : . ' , ; ` getFutureData() ... done
[08:08:02.419] | : . ' , ; ` FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'add', earlySignal = 0) ...
[08:08:02.419] | : . ' , ; ` | Appended future to position #1
[08:08:02.419] | : . ' , ; ` | Number of registered futures: 1
[08:08:02.419] | : . ' , ; ` FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'add', earlySignal = 0) ... done
[08:08:02.419] | : . ' , ; launchFuture() ... done
[08:08:02.419] | : . ' , ; MultisessionFuture started
[08:08:02.419] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:02.419] | : . ' Launching futures ... done
[08:08:02.419] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:02.420] | : . Using MultisessionFutureBackend ... done
[08:08:02.420] | : run() for ‘Future’ (‘strategy = multisession’) ... done
[08:08:02.420] | future(..., label = ‘strategy = multisession’) ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
[1] 42
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘running’
[08:08:02.420] | resolved() for MultisessionFuture (‘strategy = multisession’) ...
[08:08:02.420] | : Cluster node socket connection: index=4, id=373
[08:08:02.421] | : assertValidConnection() ...
[08:08:02.421] | : . cluster node index: 1
[08:08:02.421] | : assertValidConnection() ... done
[08:08:02.431] | : socketSelect(list(<connection #4 (id=373)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:02.432] | resolved() for MultisessionFuture (‘strategy = multisession’) ... done
Resolved: FALSE
Unique identifier: 754d324b3d8990aec0ae0b0efb44e3b3-11
Owner process: 754d324b3d8990aec0ae0b0efb44e3b3
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
Value: <not collected>
Conditions captured: <none>
[08:08:02.432] | value() for MultisessionFuture (‘strategy = multisession’) ...
[08:08:02.432] | : result() for ClusterFuture ...
[08:08:02.432] | : . assertValidConnection() ...
[08:08:02.432] | : . ' cluster node index: 1
[08:08:02.432] | : . assertValidConnection() ... done
[08:08:02.433] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:02.433] | : . ' cluster node index: 1
[08:08:02.463] | : . ' [1] TRUE
[08:08:02.463] | : . ' received data:
[08:08:02.463] | : . ' List of 5
[08:08:02.463] | : . '  $ type   : chr "VALUE"
[08:08:02.463] | : . '  $ value  :List of 16
[08:08:02.463] | : . '   ..$ value              : num 42
[08:08:02.463] | : . '   ..$ visible            : logi TRUE
[08:08:02.463] | : . '   ..$ stdout             : chr ""
[08:08:02.463] | : . '   ..$ conditions         : list()
[08:08:02.463] | : . '   ..$ rng                : logi FALSE
[08:08:02.463] | : . '   ..$ seed               : NULL
[08:08:02.463] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:02.463] | : . '   ..$ misuseConnections  :List of 3
[08:08:02.463] | : . '   .. ..$ added   : NULL
[08:08:02.463] | : . '   .. ..$ removed : NULL
[08:08:02.463] | : . '   .. ..$ replaced: NULL
[08:08:02.463] | : . '   ..$ misuseDevices      : NULL
[08:08:02.463] | : . '   ..$ misuseDefaultDevice: list()
[08:08:02.463] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:02"
[08:08:02.463] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:02"
[08:08:02.463] | : . '   ..$ uuid               : chr [1:2] "754d324b3d8990aec0ae0b0efb44e3b3" "11"
[08:08:02.463] | : . '   ..$ session_uuid       : chr "1a7e607d94d85f53d2500e5c699dfe5c"
[08:08:02.463] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:02.463] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:02.463] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:02.463] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:02.463] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:02.463] | : . '   .. .. ..$ pid   : int 67932
[08:08:02.463] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:02"
[08:08:02.463] | : . '   .. .. ..$ random: int 2147483647
[08:08:02.463] | : . '   ..$ r_info             :List of 4
[08:08:02.463] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:02.463] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:02.463] | : . '   .. ..$ os           : chr "unix"
[08:08:02.463] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:02.463] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:02.463] | : . '   ..$ version            : chr "1.8"
[08:08:02.463] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:02.463] | : . '  $ success: logi TRUE
[08:08:02.463] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0.001 0.003 0 0
[08:08:02.463] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:02.463] | : . '  $ tag    : NULL
[08:08:02.474] | : . ' Received FutureResult
[08:08:02.474] | : . ' FutureResult:
[08:08:02.474] | : . ' value: ‘numeric’
[08:08:02.474] | : . ' visible: TRUE
[08:08:02.474] | : . ' stdout: character
[08:08:02.474] | : . ' conditions: [n = 0] 
[08:08:02.474] | : . ' RNG used: FALSE
[08:08:02.474] | : . ' duration: 0.002692223 secs (started 2025-06-17 08:08:02.460183)
[08:08:02.474] | : . ' version: 1.8
[08:08:02.475] | : . ' FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'remove', earlySignal = 0) ...
[08:08:02.475] | : . ' , Removed future from position #1
[08:08:02.475] | : . ' , Number of registered futures: 0
[08:08:02.475] | : . ' FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'remove', earlySignal = 0) ... done
[08:08:02.475] | : . ' Erased future from future backend
[08:08:02.476] | : . ' result() for ClusterFuture ...
[08:08:02.476] | : . ' , result already collected: FutureResult
[08:08:02.476] | : . ' result() for ClusterFuture ... done
[08:08:02.476] | : . ' signalConditions() ...
[08:08:02.476] | : . ' , include = ‘immediateCondition’
[08:08:02.476] | : . ' , exclude = 
[08:08:02.476] | : . ' , resignal = FALSE
[08:08:02.476] | : . ' , Number of conditions: 0
[08:08:02.476] | : . ' ,  int 0
[08:08:02.477] | : . ' signalConditions() ... done
[08:08:02.477] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:02.477] | : result() for ClusterFuture ... done
[08:08:02.477] | : result() for ClusterFuture ...
[08:08:02.477] | : . result already collected: FutureResult
[08:08:02.477] | : result() for ClusterFuture ... done
[08:08:02.477] | : signalConditions() ...
[08:08:02.477] | : . include = ‘immediateCondition’
[08:08:02.478] | : . exclude = 
[08:08:02.478] | : . resignal = FALSE
[08:08:02.478] | : . Number of conditions: 0
[08:08:02.478] | : .  int 0
[08:08:02.478] | : signalConditions() ... done
[08:08:02.478] | : relay stdout ...
[08:08:02.478] | : relay stdout ... done
[08:08:02.478] | : check for misuse ...
[08:08:02.479] | : check for misuse ... done
[08:08:02.479] | value() for MultisessionFuture (‘strategy = multisession’) ... done
[08:08:02.479] | future(..., label = ‘strategy = multisession’) ...
[08:08:02.479] | : lazy: FALSE
[08:08:02.479] | : stdout: TRUE
[08:08:02.479] | : conditions: [n=1] ‘condition’
[08:08:02.479] | : gc: FALSE
[08:08:02.480] | : earlySignal: FALSE
[08:08:02.480] | : getGlobalsAndPackages() ...
[08:08:02.480] | : . Searching for globals ...
[08:08:02.483] | : . ' globals found: [1] ‘{’
[08:08:02.483] | : . Searching for globals ... done
[08:08:02.483] | : . Resolving globals: FALSE
[08:08:02.483] | : . Search for packages associated with the globals ...
[08:08:02.483] | : . ' Packages associated with globals: [1] ‘base’
[08:08:02.483] | : . ' Packages: [1] ‘base’
[08:08:02.484] | : . Search for packages associated with the globals ... done
[08:08:02.484] | : . Packages after dropping 'base': [0] 
[08:08:02.484] | : . globals: [0] 
[08:08:02.484] | : . packages: [0] 
[08:08:02.484] | : getGlobalsAndPackages() ... done
[08:08:02.484] | : run() for ‘Future’ (‘strategy = multisession’) ...
[08:08:02.484] | : . state: ‘created’
[08:08:02.484] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:02.485] | : . plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:02.485] | : . Using MultisessionFutureBackend ...
[08:08:02.485] | : . ' Number of futures since start: 3 (3 created, 3 launched, 3 finished)
[08:08:02.485] | : . ' Launching futures ...
[08:08:02.485] | : . ' , launchFuture() for ClusterFutureBackend ...
[08:08:02.485] | : . ' , ; Workers: [n=2]
[08:08:02.485] | : . ' , ; Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[08:08:02.487] | : . ' , ; FutureRegistry: ‘workers-66095110c2d4e833d261f907dfe3d20d’
[08:08:02.487] | : . ' , ; requestWorker() ...
[08:08:02.487] | : . ' , ; ` requestNode() ...
[08:08:02.487] | : . ' , ; ` | Number of workers: 2
[08:08:02.487] | : . ' , ; ` | Polling for a free worker ...
[08:08:02.487] | : . ' , ; ` | : FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'list', earlySignal = 0) ...
[08:08:02.487] | : . ' , ; ` | : . Listing all futures
[08:08:02.488] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:02.488] | : . ' , ; ` | : FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'list', earlySignal = 0) ... done
[08:08:02.488] | : . ' , ; ` | : Total time: 0
[08:08:02.488] | : . ' , ; ` | Polling for a free worker ... done
[08:08:02.488] | : . ' , ; ` | FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'list', earlySignal = 0) ...
[08:08:02.488] | : . ' , ; ` | : Listing all futures
[08:08:02.488] | : . ' , ; ` | : Number of registered futures: 0
[08:08:02.488] | : . ' , ; ` | FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'list', earlySignal = 0) ... done
[08:08:02.488] | : . ' , ; ` | avail: [n=2] ‘1’, ‘2’
[08:08:02.489] | : . ' , ; ` | Index of first available worker: 1
[08:08:02.489] | : . ' , ; ` | Validate that the worker is functional ...
[08:08:02.581] | : . ' , ; ` | : Worker is functional
[08:08:02.581] | : . ' , ; ` | : FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'list', earlySignal = 0) ...
[08:08:02.581] | : . ' , ; ` | : . Listing all futures
[08:08:02.581] | : . ' , ; ` | : . Number of registered futures: 0
[08:08:02.582] | : . ' , ; ` | : FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'list', earlySignal = 0) ... done
[08:08:02.582] | : . ' , ; ` | Validate that the worker is functional ... done
[08:08:02.582] | : . ' , ; ` requestNode() ... done
[08:08:02.582] | : . ' , ; ` cluster node index: 1
[08:08:02.582] | : . ' , ; requestWorker() ... done
[08:08:02.582] | : . ' , ; eraseGlobalEnvironment() ...
[08:08:02.583] | : . ' , ; eraseGlobalEnvironment() ... done
[08:08:02.583] | : . ' , ; launchFuture() ...
[08:08:02.583] | : . ' , ; ` cluster node index: 1
[08:08:02.583] | : . ' , ; ` getFutureData() ...
[08:08:02.583] | : . ' , ; ` | getFutureCore() ...
[08:08:02.583] | : . ' , ; ` | : Packages needed by the future expression (n = 0): <none>
[08:08:02.583] | : . ' , ; ` | getFutureCore() ... done
[08:08:02.583] | : . ' , ; ` | getFutureCapture() ...
[08:08:02.583] | : . ' , ; ` | getFutureCapture() ... done
[08:08:02.584] | : . ' , ; ` | getFutureContext() ...
[08:08:02.584] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[08:08:02.584] | : . ' , ; ` | : . Getting stack without first backend: [n=0] 
[08:08:02.584] | : . ' , ; ` | : plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[08:08:02.584] | : . ' , ; ` | : Packages needed by future backend (n = 0): <none>
[08:08:02.584] | : . ' , ; ` | getFutureContext() ... done
[08:08:02.584] | : . ' , ; ` getFutureData() ... done
[08:08:02.585] | : . ' , ; ` FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'add', earlySignal = 0) ...
[08:08:02.585] | : . ' , ; ` | Appended future to position #1
[08:08:02.585] | : . ' , ; ` | Number of registered futures: 1
[08:08:02.585] | : . ' , ; ` FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'add', earlySignal = 0) ... done
[08:08:02.585] | : . ' , ; launchFuture() ... done
[08:08:02.585] | : . ' , ; MultisessionFuture started
[08:08:02.585] | : . ' , launchFuture() for ClusterFutureBackend ... done
[08:08:02.585] | : . ' Launching futures ... done
[08:08:02.585] | : . ' Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[08:08:02.586] | : . Using MultisessionFutureBackend ... done
[08:08:02.586] | : run() for ‘Future’ (‘strategy = multisession’) ... done
[08:08:02.586] | future(..., label = ‘strategy = multisession’) ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
{
    42
}
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Lazy evaluation: FALSE
Local evaluation: TRUE
Asynchronous evaluation: TRUE
Early signaling: FALSE
Environment: R_GlobalEnv
State: ‘running’
[08:08:02.586] | resolved() for MultisessionFuture (‘strategy = multisession’) ...
[08:08:02.587] | : Cluster node socket connection: index=4, id=373
[08:08:02.587] | : assertValidConnection() ...
[08:08:02.587] | : . cluster node index: 1
[08:08:02.587] | : assertValidConnection() ... done
[08:08:02.598] | : socketSelect(list(<connection #4 (id=373)>), timeout = 0.01, write = FALSE) returned FALSE; not resolved
[08:08:02.598] | resolved() for MultisessionFuture (‘strategy = multisession’) ... done
Resolved: FALSE
Unique identifier: 754d324b3d8990aec0ae0b0efb44e3b3-12
Owner process: 754d324b3d8990aec0ae0b0efb44e3b3
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
Value: <not collected>
Conditions captured: <none>
[08:08:02.603] | value() for MultisessionFuture (‘strategy = multisession’) ...
[08:08:02.603] | : result() for ClusterFuture ...
[08:08:02.603] | : . assertValidConnection() ...
[08:08:02.603] | : . ' cluster node index: 1
[08:08:02.603] | : . assertValidConnection() ... done
[08:08:02.603] | : . receiveMessageFromWorker() for ClusterFuture ...
[08:08:02.604] | : . ' cluster node index: 1
[08:08:02.629] | : . ' [1] TRUE
[08:08:02.629] | : . ' received data:
[08:08:02.629] | : . ' List of 5
[08:08:02.629] | : . '  $ type   : chr "VALUE"
[08:08:02.629] | : . '  $ value  :List of 16
[08:08:02.629] | : . '   ..$ value              : num 42
[08:08:02.629] | : . '   ..$ visible            : logi TRUE
[08:08:02.629] | : . '   ..$ stdout             : chr ""
[08:08:02.629] | : . '   ..$ conditions         : list()
[08:08:02.629] | : . '   ..$ rng                : logi FALSE
[08:08:02.629] | : . '   ..$ seed               : NULL
[08:08:02.629] | : . '   ..$ misuseGlobalEnv    : NULL
[08:08:02.629] | : . '   ..$ misuseConnections  :List of 3
[08:08:02.629] | : . '   .. ..$ added   : NULL
[08:08:02.629] | : . '   .. ..$ removed : NULL
[08:08:02.629] | : . '   .. ..$ replaced: NULL
[08:08:02.629] | : . '   ..$ misuseDevices      : NULL
[08:08:02.629] | : . '   ..$ misuseDefaultDevice: list()
[08:08:02.629] | : . '   ..$ started            : POSIXct[1:1], format: "2025-06-17 08:08:02"
[08:08:02.629] | : . '   ..$ finished           : POSIXct[1:1], format: "2025-06-17 08:08:02"
[08:08:02.629] | : . '   ..$ uuid               : chr [1:2] "754d324b3d8990aec0ae0b0efb44e3b3" "12"
[08:08:02.629] | : . '   ..$ session_uuid       : chr "1a7e607d94d85f53d2500e5c699dfe5c"
[08:08:02.629] | : . '   .. ..- attr(*, "source")=List of 5
[08:08:02.629] | : . '   .. .. ..$ host  : Named chr "285a5f234941"
[08:08:02.629] | : . '   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[08:08:02.629] | : . '   .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "285a5f234941" ...
[08:08:02.629] | : . '   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[08:08:02.629] | : . '   .. .. ..$ pid   : int 67932
[08:08:02.629] | : . '   .. .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:08:02"
[08:08:02.629] | : . '   .. .. ..$ random: int 2147483647
[08:08:02.629] | : . '   ..$ r_info             :List of 4
[08:08:02.629] | : . '   .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[08:08:02.629] | : . '   .. .. ..$ : int [1:3] 4 5 0
[08:08:02.629] | : . '   .. ..$ os           : chr "unix"
[08:08:02.629] | : . '   .. ..$ os_name      : chr "Linux"
[08:08:02.629] | : . '   .. ..$ captures_utf8: logi TRUE
[08:08:02.629] | : . '   ..$ version            : chr "1.8"
[08:08:02.629] | : . '   ..- attr(*, "class")= chr "FutureResult"
[08:08:02.629] | : . '  $ success: logi TRUE
[08:08:02.629] | : . '  $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[08:08:02.629] | : . '   ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[08:08:02.629] | : . '  $ tag    : NULL
[08:08:02.640] | : . ' Received FutureResult
[08:08:02.640] | : . ' FutureResult:
[08:08:02.640] | : . ' value: ‘numeric’
[08:08:02.640] | : . ' visible: TRUE
[08:08:02.640] | : . ' stdout: character
[08:08:02.640] | : . ' conditions: [n = 0] 
[08:08:02.640] | : . ' RNG used: FALSE
[08:08:02.640] | : . ' duration: 0.002660036 secs (started 2025-06-17 08:08:02.626303)
[08:08:02.640] | : . ' version: 1.8
[08:08:02.641] | : . ' FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'remove', earlySignal = 0) ...
[08:08:02.641] | : . ' , Removed future from position #1
[08:08:02.641] | : . ' , Number of registered futures: 0
[08:08:02.641] | : . ' FutureRegistry('workers-66095110c2d4e833d261f907dfe3d20d', action = 'remove', earlySignal = 0) ... done
[08:08:02.641] | : . ' Erased future from future backend
[08:08:02.642] | : . ' result() for ClusterFuture ...
[08:08:02.642] | : . ' , result already collected: FutureResult
[08:08:02.642] | : . ' result() for ClusterFuture ... done
[08:08:02.642] | : . ' signalConditions() ...
[08:08:02.642] | : . ' , include = ‘immediateCondition’
[08:08:02.642] | : . ' , exclude = 
[08:08:02.642] | : . ' , resignal = FALSE
[08:08:02.642] | : . ' , Number of conditions: 0
[08:08:02.642] | : . ' ,  int 0
[08:08:02.643] | : . ' signalConditions() ... done
[08:08:02.643] | : . receiveMessageFromWorker() for ClusterFuture ... done
[08:08:02.643] | : result() for ClusterFuture ... done
[08:08:02.643] | : result() for ClusterFuture ...
[08:08:02.643] | : . result already collected: FutureResult
[08:08:02.643] | : result() for ClusterFuture ... done
[08:08:02.643] | : signalConditions() ...
[08:08:02.643] | : . include = ‘immediateCondition’
[08:08:02.644] | : . exclude = 
[08:08:02.644] | : . resignal = FALSE
[08:08:02.644] | : . Number of conditions: 0
[08:08:02.644] | : .  int 0
[08:08:02.644] | : signalConditions() ... done
[08:08:02.644] | : relay stdout ...
[08:08:02.644] | : relay stdout ... done
[08:08:02.645] | : check for misuse ...
[08:08:02.645] | : check for misuse ... done
[08:08:02.645] | value() for MultisessionFuture (‘strategy = multisession’) ... done
- plan('multisession') ... DONE

> message("*** Futures - labels ... DONE")
*** Futures - labels ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.9s, sys.self=0.06s, elapsed=2s, user.child=0.4s, sys.child=0.4s
Test ‘future,labels’ ... success
> 
