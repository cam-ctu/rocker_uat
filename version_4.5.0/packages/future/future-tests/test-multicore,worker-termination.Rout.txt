
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script incl/testme/test-multicore,worker-termination.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("multicore,worker-termination")
Test ‘multicore,worker-termination’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-multicore,worker-termination.R’

> library(future)
[10:53:50.283] Option 'future.startup.script': TRUE
[10:53:50.284] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[10:53:50.284] Future startup scripts found: <none>

> message("*** multicore() - terminating workers ...")
*** multicore() - terminating workers ...

> if (supportsMulticore() && availableCores("multicore") >= 
+     2) {
+     plan(multicore, workers = 2)
+     all <- nbrOfWorkers()
+     free <- n .... [TRUNCATED] 
[10:53:50.286] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:50.287] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:53:50.287] |  :  all.equal() for FutureStrategyList ...
[10:53:50.288] |  :  .  New stack:
[10:53:50.288] |  :  .  List of 1
[10:53:50.288] |  :  .   $ :function (..., workers = 2L, envir = parent.frame())  
[10:53:50.288] |  :  .    ..- attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
[10:53:50.288] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:50.288] |  :  .      ...)  
[10:53:50.288] |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:50.288] |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:50.288] |  :  .    ..- attr(*, "tweaks")=List of 1
[10:53:50.288] |  :  .    .. ..$ workers: int 2
[10:53:50.288] |  :  .    ..- attr(*, "call")= language plan(multicore, workers = 2L)
[10:53:50.288] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:50.292] |  :  .  Old stack:
[10:53:50.292] |  :  .  List of 1
[10:53:50.292] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:50.292] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:50.292] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:50.292] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:50.292] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:50.292] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:53:50.292] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:50.295] |  :  .  Not identical
[10:53:50.295] |  :  .  all.equal() for future ...
[10:53:50.295] |  :  .  |  List of 2
[10:53:50.295] |  :  .  |   $ target :function (..., workers = 2L, envir = parent.frame())  
[10:53:50.295] |  :  .  |    ..- attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
[10:53:50.295] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:50.295] |  :  .  |      ...)  
[10:53:50.295] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:50.295] |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:50.295] |  :  .  |    ..- attr(*, "tweaks")=List of 1
[10:53:50.295] |  :  .  |    .. ..$ workers: int 2
[10:53:50.295] |  :  .  |    ..- attr(*, "call")= language plan(multicore, workers = 2L)
[10:53:50.295] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:50.295] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:50.295] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:50.295] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:50.295] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:50.295] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:53:50.301] |  :  .  |  Formals differ
[10:53:50.301] |  :  .  all.equal() for future ... done
[10:53:50.301] |  :  .  Future strategies differ at level 1
[10:53:50.301] |  :  all.equal() for FutureStrategyList ... done
[10:53:50.301] |  :  plan(): Setting new future strategy stack:
[10:53:50.301] |  :  List of future strategies:
[10:53:50.301] |  :  1. multicore:
[10:53:50.301] |  :     - args: function (..., workers = 2L, envir = parent.frame())
[10:53:50.301] |  :     - tweaked: TRUE
[10:53:50.301] |  :     - call: plan(multicore, workers = 2L)
[10:53:50.302] |  :  List of 1
[10:53:50.302] |  :   $ :function (..., workers = 2L, envir = parent.frame())  
[10:53:50.302] |  :    ..- attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
[10:53:50.302] |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:50.302] |  :      ...)  
[10:53:50.302] |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:50.302] |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:50.302] |  :    ..- attr(*, "tweaks")=List of 1
[10:53:50.302] |  :    .. ..$ workers: int 2
[10:53:50.302] |  :    ..- attr(*, "call")= language plan(multicore, workers = 2L)
[10:53:50.302] |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:50.305] |  :  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:53:50.305] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:50.305] |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:50.305] |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:50.305] |  :  .  Legacy shutdown of cluster workers ...
[10:53:50.305] |  :  .  |  Stopping existing cluster ...
[10:53:50.306] |  :  .  |  :  No pre-existing cluster. Skipping
[10:53:50.306] |  :  .  |  Stopping existing cluster ... done
[10:53:50.306] |  :  .  Legacy shutdown of cluster workers ... done
[10:53:50.306] |  :  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:53:50.306] |  :  plan(): plan_init() of ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:53:50.306] |  :  .  function (..., workers = 2L, envir = parent.frame())  
[10:53:50.306] |  :  .   - attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
[10:53:50.306] |  :  .   - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:50.306] |  :  .      ...)  
[10:53:50.306] |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:50.306] |  :  .   - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:50.306] |  :  .   - attr(*, "tweaks")=List of 1
[10:53:50.306] |  :  .    ..$ workers: int 2
[10:53:50.306] |  :  .   - attr(*, "call")= language plan(multicore, workers = 2L)
[10:53:50.308] |  :  .  init: NULL
[10:53:50.309] |  :  plan(): plan_init() of ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[10:53:50.309] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:50.309] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:50.309] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:50.309] |  :  Backend function: <‘NULL’>
[10:53:50.310] |  :  Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:53:50.310] |  :  plan(): nbrOfWorkers() = 2
[10:53:50.310] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:53:50.310] plan(<tweaked>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:50.310] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:50.310] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:50.310] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:50.310] Backend function: <‘NULL’>
[10:53:50.320] Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:53:50.320] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:50.320] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:50.320] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:50.320] Backend function: <‘NULL’>
[10:53:50.321] Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:53:50.321] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:50.321] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:50.321] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:50.321] Backend function: <‘NULL’>
[10:53:50.322] Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:53:50.322] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:50.322] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:50.322] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:50.322] Backend function: <‘NULL’>
[10:53:50.322] Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:53:50.323] getGlobalsAndPackages() ...
[10:53:50.324] |  Searching for globals ...
[10:53:50.331] |  :  globals found: [3] ‘{’, ‘::’, ‘Sys.getpid’
[10:53:50.331] |  Searching for globals ... DONE
[10:53:50.331] |  Resolving globals: FALSE
[10:53:50.331] |  Search for packages associated with the globals ...
[10:53:50.331] |  :  Packages associated with globals: [1] ‘base’
[10:53:50.332] |  :  Packages: [1] ‘base’
[10:53:50.332] |  Search for packages associated with the globals ... DONE
[10:53:50.332] |  Packages after dropping 'base': [0] 
[10:53:50.332] |  globals: [0] 
[10:53:50.332] |  packages: [0] 
[10:53:50.332] getGlobalsAndPackages() ... done
[10:53:50.333] run() for Future (‘Future’) ...
[10:53:50.333] |  state: ‘created’
[10:53:50.333] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:50.333] |  :  makeFutureBackend(<tweaked>) ...
[10:53:50.333] |  :  .  Backend function: <‘NULL’>
[10:53:50.334] |  :  .  Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:53:50.334] |  :  makeFutureBackend(<tweaked>) ... done
[10:53:50.334] |  plan(<tweaked>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:50.334] |  Using MulticoreFutureBackend ...
[10:53:50.334] |  :  Launching futures ...
[10:53:50.334] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:53:50.335] |  :  .  |  getFutureData() ...
[10:53:50.335] |  :  .  |  :  getFutureCore() ...
[10:53:50.335] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:53:50.335] |  :  .  |  :  getFutureCore() ... done
[10:53:50.335] |  :  .  |  :  getFutureCapture() ...
[10:53:50.335] |  :  .  |  :  getFutureCapture() ... done
[10:53:50.335] |  :  .  |  :  getFutureContext() ...
[10:53:50.335] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:50.336] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:53:50.336] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:50.336] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:53:50.336] |  :  .  |  :  getFutureContext() ... done
[10:53:50.336] |  :  .  |  getFutureData() ... done
[10:53:50.336] |  :  .  |  requestCore(..., workers = 2) ...
[10:53:50.337] |  :  .  |  requestCore(..., workers = 2) ...
[10:53:50.340] |  :  .  |  MulticoreFuture started
[10:53:50.340] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:53:50.340] |  :  Launching futures ... done
[10:53:50.340] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:53:50.341] |  Using MulticoreFutureBackend ... done
[10:53:50.341] run() for Future (‘MulticoreFuture’) ... done
[10:53:50.342] |  :  .  |  attachPackages() ...
[10:53:50.342] |  :  .  |  :  packages: [n=1] ‘future’
[10:53:50.343] |  :  .  |  attachPackages() ... DONE
[10:53:50.343] |  :  .  |  attachPackages() ...
[10:53:50.343] |  :  .  |  :  packages: [n=0] 
[10:53:50.343] |  :  .  |  attachPackages() ... DONE
[10:53:50.344] result() for MulticoreFuture ...
[10:53:50.344] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:50.344] |  :  .  |  :  Getting full stack: [n=1] ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:50.345] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:50.345] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:53:50.346] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:53:50.346] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:53:50.346] |  :  .  |  :  .  |  New stack:
[10:53:50.346] |  :  .  |  :  .  |  List of 1
[10:53:50.346] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:50.346] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:50.346] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:50.346] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:50.346] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:50.346] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:50.346] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:50.350] |  :  .  |  :  .  |  Old stack:
[10:53:50.350] |  :  .  |  :  .  |  List of 1
[10:53:50.350] |  :  .  |  :  .  |   $ :function (..., workers = 2L, envir = parent.frame())  
[10:53:50.350] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
[10:53:50.350] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:50.350] |  :  .  |  :  .  |      ...)  
[10:53:50.350] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:50.350] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:50.350] |  :  .  |  :  .  |    ..- attr(*, "tweaks")=List of 1
[10:53:50.350] |  :  .  |  :  .  |    .. ..$ workers: int 2
[10:53:50.350] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(multicore, workers = 2L)
[10:53:50.350] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x559f94d38258> 
[10:53:50.350] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:50.350] |  :  .  |  :  .  |      ...)  
[10:53:50.350] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:50.350] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:50.356] |  :  .  |  :  .  |  Not identical
[10:53:50.356] |  :  .  |  :  .  |  all.equal() for future ...
[10:53:50.356] |  :  .  |  :  .  |  :  List of 2
[10:53:50.356] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:50.356] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:50.356] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:50.356] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:50.356] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:50.356] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:50.356] |  :  .  |  :  .  |  :   $ current:function (..., workers = 2L, envir = parent.frame())  
[10:53:50.356] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "tweaked" "multicore" "multiprocess" "future" ...
[10:53:50.356] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:50.356] |  :  .  |  :  .  |  :      ...)  
[10:53:50.356] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:50.356] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:50.356] |  :  .  |  :  .  |  :    ..- attr(*, "tweaks")=List of 1
[10:53:50.356] |  :  .  |  :  .  |  :    .. ..$ workers: int 2
[10:53:50.356] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(multicore, workers = 2L)
[10:53:50.356] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x559f94d38258> 
[10:53:50.356] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:53:50.356] |  :  .  |  :  .  |  :      ...)  
[10:53:50.356] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:53:50.363] |  :  .  |  :  .  |  :  Formals differ
[10:53:50.363] |  :  .  |  :  .  |  all.equal() for future ... done
[10:53:50.369] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:53:50.370] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:53:50.370] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:53:50.370] |  :  .  |  :  .  List of future strategies:
[10:53:50.370] |  :  .  |  :  .  1. sequential:
[10:53:50.370] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:53:50.370] |  :  .  |  :  .     - tweaked: FALSE
[10:53:50.370] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:50.371] |  :  .  |  :  .  List of 1
[10:53:50.371] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:53:50.371] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:53:50.371] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:53:50.371] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:50.371] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:53:50.371] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:53:50.371] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:53:50.374] |  :  .  |  :  .  plan(): plan_cleanup(‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:53:50.375] |  :  .  |  :  .  plan(): plan_cleanup(‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:53:50.375] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:50.375] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:53:50.375] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:53:50.375] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:53:50.376] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:53:50.376] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:53:50.376] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:53:50.376] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
Warning in mccollect(jobs = jobs, wait = TRUE) :
  1 parallel job did not deliver a result
[10:53:50.381] |  Detected non-FutureResult result ...
[10:53:50.385] |  :  Removing MulticoreFuture from FutureRegistry (multicore-4aa348449e8abc614177a9145ff00527)
[10:53:50.385] |  Detected non-FutureResult result ... done
[10:53:50.386] result() for MulticoreFuture ... done
<FutureError: Failed to retrieve the result of MulticoreFuture (NULL) from the forked worker (on localhost; PID 72765). Post-mortem diagnostic: No process exists with this PID, i.e. the forked localhost worker is no longer alive>


Future UUID: 4aa348449e8abc614177a9145ff00527-1


DEBUG: BEGIN TROUBLESHOOTING HELP
Future involved:
MulticoreFuture:
Label: NULL
Expression:
{
    tools::pskill(pid = Sys.getpid())
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 4aa348449e8abc614177a9145ff00527
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’

DEBUG: END TROUBLESHOOTING HELP
[1] "Failed to retrieve the result of MulticoreFuture (NULL) from the forked worker (on localhost; PID 72765). Post-mortem diagnostic: No process exists with this PID, i.e. the forked localhost worker is no longer alive"
[10:53:50.387] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:50.387] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:50.387] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
List of 3
 $ pid  : int 72765
 $ fd   : int [1:2] 10 13
 $ alive: logi FALSE
 - attr(*, "class")= chr [1:3] "parallelJob" "childProcess" "process"
[10:53:50.390] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:50.390] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:50.390] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
nbrOfFreeWorkers(): 2
[10:53:50.390] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:53:50.391] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:53:50.391] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done

> message("*** multicore() - terminating workers ... DONE")
*** multicore() - terminating workers ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.1s, sys.self=0.02s, elapsed=0.2s, user.child=0.02s, sys.child=0.03s
Test ‘multicore,worker-termination’ ... success
> 
