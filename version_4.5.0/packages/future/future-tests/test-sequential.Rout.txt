
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This runs testme test script incl/testme/test-sequential.R
> ## Don't edit - it was autogenerated by inst/testme/deploy.R
> future:::testme("sequential")
Test ‘sequential’ ...
Sourcing 9 prologue scripts ...
01/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/001.load.R’
02/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/002.record-state.R’
03/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/030.imports.R’
04/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/050.utils.R’
05/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.context.R’
06/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/090.options.R’
07/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/091.envvars.R’
08/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/099.future-setup.R’
09/09 prologue script ‘/usr/local/lib/R/site-library/future/testme/_prologue/995.detrius-connections.R’
Sourcing 9 prologue scripts ... done
Running test script: ‘/usr/local/lib/R/site-library/future/testme/test-sequential.R’

> library(future)
[10:54:44.195] Option 'future.startup.script': TRUE
[10:54:44.196] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[10:54:44.196] Future startup scripts found: <none>

> message("*** sequential() ...")
*** sequential() ...

> message("- sequential() w/ required packages ...")
- sequential() w/ required packages ...

> f <- future(median(1:3), lazy = TRUE)
[10:54:44.198] getGlobalsAndPackages() ...
[10:54:44.198] |  Searching for globals ...
[10:54:44.204] |  :  globals found: [2] ‘median’, ‘:’
[10:54:44.204] |  Searching for globals ... DONE
[10:54:44.204] |  Resolving globals: FALSE
[10:54:44.204] |  Search for packages associated with the globals ...
[10:54:44.205] |  :  Packages associated with globals: [2] ‘stats’, ‘base’
[10:54:44.205] |  :  Packages: [2] ‘stats’, ‘base’
[10:54:44.205] |  Search for packages associated with the globals ... DONE
[10:54:44.205] |  Packages after dropping 'base': [1] ‘stats’
[10:54:44.206] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:54:44.206] |  globals: [0] 
[10:54:44.206] |  packages: [1] ‘stats’
[10:54:44.206] getGlobalsAndPackages() ... done

> print(f)
Future:
Label: NULL
Expression:
median(1:3)
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘<none>’)
Immediate condition classes: ‘immediateCondition’
Globals: <none>
Packages: 1 packages (‘stats’)
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: e2cd13137031ac64e212c02f231282a1
Class: ‘Future’, ‘environment’

> try(unloadNamespace("stats"))

> v <- value(f)
[10:54:44.209] run() for Future (‘Future’) ...
[10:54:44.209] |  state: ‘created’
[10:54:44.209] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:54:44.211] |  :  makeFutureBackend(<sequential>) ...
[10:54:44.211] |  :  .  Backend function: <‘NULL’>
[10:54:44.212] |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:54:44.212] |  :  makeFutureBackend(<sequential>) ... done
[10:54:44.212] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:54:44.212] |  Using SequentialFutureBackend ...
[10:54:44.212] |  :  Launching futures ...
[10:54:44.212] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:54:44.213] |  :  .  |  getFutureData() ...
[10:54:44.213] |  :  .  |  :  getFutureCore() ...
[10:54:44.213] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:54:44.213] |  :  .  |  :  getFutureCore() ... done
[10:54:44.213] |  :  .  |  :  getFutureCapture() ...
[10:54:44.213] |  :  .  |  :  getFutureCapture() ... done
[10:54:44.213] |  :  .  |  :  getFutureContext() ...
[10:54:44.214] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:54:44.214] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:54:44.214] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:54:44.214] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:54:44.214] |  :  .  |  :  getFutureContext() ... done
[10:54:44.214] |  :  .  |  getFutureData() ... done
[10:54:44.215] |  :  .  |  attachPackages() ...
[10:54:44.215] |  :  .  |  :  packages: [n=1] ‘future’
[10:54:44.215] |  :  .  |  attachPackages() ... DONE
[10:54:44.216] |  :  .  |  attachPackages() ...
[10:54:44.216] |  :  .  |  :  packages: [n=1] ‘stats’
[10:54:44.255] |  :  .  |  attachPackages() ... DONE
[10:54:44.255] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:54:44.255] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:54:44.255] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:54:44.256] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:54:44.256] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:54:44.256] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:54:44.256] |  :  .  |  :  .  |  New stack:
[10:54:44.256] |  :  .  |  :  .  |  List of 1
[10:54:44.256] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:54:44.256] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:54:44.256] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:54:44.256] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:54:44.256] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:54:44.256] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:54:44.256] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:54:44.287] |  :  .  |  :  .  |  Old stack:
[10:54:44.288] |  :  .  |  :  .  |  List of 1
[10:54:44.288] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:54:44.288] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:54:44.288] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:54:44.288] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:54:44.288] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:54:44.288] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:54:44.288] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x559dac94fa30> 
[10:54:44.288] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:54:44.288] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:54:44.288] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:54:44.291] |  :  .  |  :  .  |  Not identical
[10:54:44.291] |  :  .  |  :  .  |  all.equal() for future ...
[10:54:44.291] |  :  .  |  :  .  |  :  List of 2
[10:54:44.291] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:54:44.291] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:54:44.291] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:54:44.291] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:54:44.291] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:54:44.291] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:54:44.291] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:54:44.291] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:54:44.291] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:54:44.291] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:54:44.291] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:54:44.291] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:54:44.291] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x559dac94fa30> 
[10:54:44.291] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:54:44.291] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:54:44.296] |  :  .  |  :  .  |  all.equal() for future ... done
[10:54:44.296] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:54:44.296] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:54:44.296] |  :  .  |  :  .  List of future strategies:
[10:54:44.296] |  :  .  |  :  .  1. sequential:
[10:54:44.296] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:54:44.296] |  :  .  |  :  .     - tweaked: FALSE
[10:54:44.296] |  :  .  |  :  .     - call: plan(sequential)
[10:54:44.297] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:54:44.297] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:54:44.299] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:54:44.300] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:54:44.300] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:54:44.300] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:54:44.300] |  :  .  |  :  .  |  :  New stack:
[10:54:44.300] |  :  .  |  :  .  |  :  List of 1
[10:54:44.300] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:54:44.300] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:54:44.300] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:54:44.300] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:54:44.300] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:54:44.300] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:54:44.300] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x559dac94fa30> 
[10:54:44.300] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:54:44.300] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:54:44.300] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:54:44.303] |  :  .  |  :  .  |  :  Old stack:
[10:54:44.303] |  :  .  |  :  .  |  :  List of 1
[10:54:44.303] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:54:44.303] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:54:44.303] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:54:44.303] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:54:44.303] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:54:44.303] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:54:44.303] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x559dac94fa30> 
[10:54:44.303] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:54:44.303] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:54:44.303] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:54:44.307] |  :  .  |  :  .  |  :  Identical
[10:54:44.307] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:54:44.307] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:54:44.307] |  :  .  |  :  .  |  List of future strategies:
[10:54:44.307] |  :  .  |  :  .  |  1. sequential:
[10:54:44.307] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:54:44.307] |  :  .  |  :  .  |     - tweaked: FALSE
[10:54:44.307] |  :  .  |  :  .  |     - call: plan(sequential)
[10:54:44.308] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:54:44.308] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:54:44.308] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:54:44.308] |  :  .  |  SequentialFuture started (and completed)
[10:54:44.309] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:54:44.309] |  :  Launching futures ... done
[10:54:44.309] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:54:44.309] |  Using SequentialFutureBackend ... done
[10:54:44.309] run() for Future (‘SequentialFuture’) ... done

> print(v)
[1] 2

> stopifnot(identical(v, 2))

> stopifnot("stats" %in% loadedNamespaces())

> message("- SequentialFuture() - 'local = FALSE' is defunct ...")
- SequentialFuture() - 'local = FALSE' is defunct ...

> res <- tryCatch({
+     f <- SequentialFuture(42, local = FALSE)
+ }, error = identity)

> stopifnot(inherits(res, "error"))

> message("*** sequential() ... DONE")
*** sequential() ... DONE
Sourcing 6 epilogue scripts ...
01/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/001.undo-future.R’
02/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/002.undo-state.R’
03/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/090.gc.R’
04/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/099.session_info.R’
05/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/995.detritus-connections.R’
06/06 epilogue script ‘/usr/local/lib/R/site-library/future/testme/_epilogue/999.detritus-files.R’
Skipping, because path appears not to be an 'R CMD check' folder: ‘/tmp’
Sourcing 6 epilogue scripts ... done
Test time: user.self=0.2s, sys.self=0.003s, elapsed=0.2s, user.child=0s, sys.child=0.005s
Test ‘sequential’ ... success
> 
