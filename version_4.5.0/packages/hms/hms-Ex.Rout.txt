
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "hms"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('hms')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("hms")
> ### * hms
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hms
> ### Title: A simple class for storing time-of-day values
> ### Aliases: hms new_hms is_hms as_hms as.POSIXct.hms as.POSIXlt.hms
> ###   as.character.hms format.hms print.hms
> 
> ### ** Examples
> 
> hms(56, 34, 12)
12:34:56
> hms()
hms()
> 
> new_hms(as.numeric(1:3))
00:00:01
00:00:02
00:00:03
> # Supports numeric only!
> try(new_hms(1:3))
Error in new_hms(1:3) : `x` must be a vector with type <double>.
Instead, it has type <integer>.
> 
> as_hms(1)
00:00:01
> as_hms("12:34:56")
12:34:56
> as_hms(Sys.time())
10:35:37.127705
> as.POSIXct(hms(1))
[1] "1970-01-01 00:00:01 UTC"
> data.frame(a = hms(1))
         a
1 00:00:01
> d <- data.frame(hours = 1:3)
> d$hours <- hms(hours = d$hours)
> d
     hours
1 01:00:00
2 02:00:00
3 03:00:00
> 
> 
> 
> cleanEx()
> nameEx("parse_hms")
> ### * parse_hms
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: parse_hms
> ### Title: Parsing hms values
> ### Aliases: parse_hms parse_hm
> 
> ### ** Examples
> 
> parse_hms("12:34:56")
12:34:56
> parse_hms("12:34:56.789")
12:34:56.789
> parse_hm("12:34")
12:34:00
> 
> 
> 
> cleanEx()
> nameEx("round_hms")
> ### * round_hms
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: round_hms
> ### Title: Round or truncate to a multiple of seconds
> ### Aliases: round_hms trunc_hms
> 
> ### ** Examples
> 
> round_hms(as_hms("12:34:56"), 5)
12:34:55
> round_hms(as_hms("12:34:56"), 60)
12:35:00
> round_hms(as_hms("12:34:56.78"), 0.25)
12:34:56.75
> round_hms(as_hms("12:34:56.78"), digits = 1)
12:34:56.8
> round_hms(as_hms("12:34:56.78"), digits = -2)
12:35:00
> trunc_hms(as_hms("12:34:56"), 60)
12:34:00
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.19 0.012 0.203 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
