
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "later"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('later')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("later")
> ### * later
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: later
> ### Title: Executes a function later
> ### Aliases: later
> 
> ### ** Examples
> 
> # Example of formula style
> later(~cat("Hello from the past\n"), 3)
> 
> # Example of function style
> later(function() {
+   print(summary(cars))
+ }, 2)
> 
> 
> 
> 
> cleanEx()
> nameEx("later_fd")
> ### * later_fd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: later_fd
> ### Title: Executes a function when a file descriptor is ready
> ### Aliases: later_fd
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("nanonext", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # create nanonext sockets
+ s1 <- nanonext::socket(listen = "inproc://nano")
+ s2 <- nanonext::socket(dial = "inproc://nano")
+ fd1 <- nanonext::opt(s1, "recv-fd")
+ fd2 <- nanonext::opt(s2, "recv-fd")
+ 
+ # 1. timeout: prints FALSE, FALSE
+ later_fd(print, c(fd1, fd2), timeout = 0.1)
+ Sys.sleep(0.2)
+ run_now()
+ 
+ # 2. fd1 ready: prints TRUE, FALSE
+ later_fd(print, c(fd1, fd2), timeout = 1)
+ res <- nanonext::send(s2, "msg")
+ Sys.sleep(0.1)
+ run_now()
+ 
+ # 3. both ready: prints TRUE, TRUE
+ res <- nanonext::send(s1, "msg")
+ later_fd(print, c(fd1, fd2), timeout = 1)
+ Sys.sleep(0.1)
+ run_now()
+ 
+ # 4. fd2 ready: prints FALSE, TRUE
+ res <- nanonext::recv(s1)
+ later_fd(print, c(fd1, fd2), timeout = 1)
+ Sys.sleep(0.1)
+ run_now()
+ 
+ # 5. fds invalid: prints NA, NA
+ close(s2)
+ close(s1)
+ later_fd(print, c(fd1, fd2), timeout = 0)
+ Sys.sleep(0.1)
+ run_now()
+ ## Don't show: 
+ }) # examplesIf
> s1 <- nanonext::socket(listen = "inproc://nano")
> s2 <- nanonext::socket(dial = "inproc://nano")
> fd1 <- nanonext::opt(s1, "recv-fd")
> fd2 <- nanonext::opt(s2, "recv-fd")
> later_fd(print, c(fd1, fd2), timeout = 0.1)
> Sys.sleep(0.2)
> run_now()
[1] FALSE FALSE
> later_fd(print, c(fd1, fd2), timeout = 1)
> res <- nanonext::send(s2, "msg")
> Sys.sleep(0.1)
> run_now()
[1]  TRUE FALSE
> res <- nanonext::send(s1, "msg")
> later_fd(print, c(fd1, fd2), timeout = 1)
> Sys.sleep(0.1)
> run_now()
[1] TRUE TRUE
> res <- nanonext::recv(s1)
> later_fd(print, c(fd1, fd2), timeout = 1)
> Sys.sleep(0.1)
> run_now()
[1] FALSE  TRUE
> close(s2)
> close(s1)
> later_fd(print, c(fd1, fd2), timeout = 0)
> Sys.sleep(0.1)
> run_now()
[1] NA NA
> ## End(Don't show)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.214 0.016 0.828 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
