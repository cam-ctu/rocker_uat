
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("testthat")
> library("DBI")
> 
> test_check("duckdb")
Loading required package: duckdb
[ FAIL 25 | WARN 0 | SKIP 69 | PASS 686 ]

══ Skipped tests (69) ══════════════════════════════════════════════════════════
• empty test (1): 'test-factor.R:82:1'
• interactive() is not TRUE (2): 'test-connect.R:5:3', 'test-connect.R:15:3'
• On CRAN (31): 'test-array.R:191:3', 'test-array.R:207:3',
  'test-array.R:223:3', 'test-arrow_stream.R:1:1', 'test-arrow.R:18:1',
  'test-backend-dbplyr__duckdb_connection.R:402:3',
  'test-backend-dbplyr__duckdb_connection.R:434:3',
  'test-backend-dbplyr__duckdb_connection.R:477:3',
  'test-backend-dbplyr__duckdb_connection.R:502:3',
  'test-backend-dbplyr__duckdb_connection.R:548:3',
  'test-backend-dbplyr__duckdb_connection.R:578:3',
  'test-backend-dbplyr__duckdb_connection.R:603:3',
  'test-backend-dbplyr__duckdb_connection.R:619:3', 'test-DBItest.R:1:1',
  'test-explain.R:1:1', 'test-extension_path.R:1:1', 'test-fetch_arrow.R:1:1',
  'test-map.R:43:3', 'test-multi_statement.R:1:1', 'test-register_arrow.R:1:1',
  'test-relational.R:84:3', 'test-relational.R:109:3',
  'test-relational.R:189:3', 'test-relational.R:849:3',
  'test-relational.R:868:3', 'test-relational.R:981:3',
  'test-relational.R:1008:3', 'test-signal.R:43:3', 'test-struct.R:52:3',
  'test-tbl__duckdb_connection.R:1:1', 'test-types.R:11:3'
• TEST_RE2 is not TRUE (35): 'test-connect.R:59:3', 'test-connect.R:79:3',
  'test-connect.R:99:3', 'test-connect.R:119:3', 'test-connect.R:144:3',
  'test-connect.R:167:3', 'test-connect.R:188:3', 'test-dbwritetable.R:2:3',
  'test-factor.R:2:3', 'test-factor.R:25:3', 'test-factor.R:40:3',
  'test-factor.R:69:3', 'test-read.R:2:3', 'test-read.R:147:3',
  'test-readonly.R:2:3', 'test-register.R:41:3', 'test-rel_api.R:7572:3',
  'test-rel_api.R:7659:3', 'test-rel_api.R:7749:3', 'test-rel_api.R:7839:3',
  'test-rel_api.R:7929:3', 'test-rel_api.R:11050:3', 'test-rel_api.R:11142:3',
  'test-rel_api.R:11237:3', 'test-rel_api.R:11332:3', 'test-rel_api.R:11427:3',
  'test-shutdown.R:2:3', 'test-struct.R:113:3', 'test-struct.R:133:3',
  'test-timestamp.R:2:3', 'test-viewer.R:2:3', 'test-viewer.R:17:3',
  'test-viewer.R:38:3', 'test-viewer.R:60:3', 'test-viewer.R:80:3'

══ Failed tests ════════════════════════════════════════════════════════════════
── Error ('test-array.R:13:3'): arrays of INTEGER can be read ──────────────────
Error in `dbSendQuery(conn, statement, ...)`: rapi_prepare: Unknown column type for prepare: INTEGER[3]
Backtrace:
     ▆
  1. ├─DBI::dbGetQuery(con, "FROM tbl") at test-array.R:13:3
  2. ├─DBI::dbGetQuery(con, "FROM tbl")
  3. │ └─DBI (local) .local(conn, statement, ...)
  4. │   ├─DBI::dbSendQuery(conn, statement, ...)
  5. │   └─duckdb::dbSendQuery(conn, statement, ...)
  6. │     └─duckdb (local) .local(conn, statement, ...)
  7. │       └─duckdb:::rethrow_rapi_prepare(conn@conn_ref, statement, env)
  8. │         ├─rlang::try_fetch(...)
  9. │         │ ├─base::tryCatch(...)
 10. │         │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 11. │         │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 12. │         │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 13. │         │ └─base::withCallingHandlers(...)
 14. │         └─duckdb:::rapi_prepare(conn, query, env)
 15. └─base::.handleSimpleError(...)
 16.   └─rlang (local) h(simpleError(msg, call))
 17.     └─handlers[[1L]](cnd)
 18.       └─duckdb:::rethrow_error_from_rapi(e, call)
 19.         └─rlang::abort(msg, call = call)
── Error ('test-array.R:33:3'): arrays of INTEGER with NULL can be read ────────
Error in `dbSendQuery(conn, statement, ...)`: rapi_prepare: Unknown column type for prepare: INTEGER[3]
Backtrace:
     ▆
  1. ├─DBI::dbGetQuery(con, "FROM tbl") at test-array.R:33:3
  2. ├─DBI::dbGetQuery(con, "FROM tbl")
  3. │ └─DBI (local) .local(conn, statement, ...)
  4. │   ├─DBI::dbSendQuery(conn, statement, ...)
  5. │   └─duckdb::dbSendQuery(conn, statement, ...)
  6. │     └─duckdb (local) .local(conn, statement, ...)
  7. │       └─duckdb:::rethrow_rapi_prepare(conn@conn_ref, statement, env)
  8. │         ├─rlang::try_fetch(...)
  9. │         │ ├─base::tryCatch(...)
 10. │         │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 11. │         │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 12. │         │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 13. │         │ └─base::withCallingHandlers(...)
 14. │         └─duckdb:::rapi_prepare(conn, query, env)
 15. └─base::.handleSimpleError(...)
 16.   └─rlang (local) h(simpleError(msg, call))
 17.     └─handlers[[1L]](cnd)
 18.       └─duckdb:::rethrow_error_from_rapi(e, call)
 19.         └─rlang::abort(msg, call = call)
── Error ('test-array.R:53:3'): arrays of DOUBLE can be read ───────────────────
Error in `dbSendQuery(conn, statement, ...)`: rapi_prepare: Unknown column type for prepare: DOUBLE[3]
Backtrace:
     ▆
  1. ├─DBI::dbGetQuery(con, "FROM tbl") at test-array.R:53:3
  2. ├─DBI::dbGetQuery(con, "FROM tbl")
  3. │ └─DBI (local) .local(conn, statement, ...)
  4. │   ├─DBI::dbSendQuery(conn, statement, ...)
  5. │   └─duckdb::dbSendQuery(conn, statement, ...)
  6. │     └─duckdb (local) .local(conn, statement, ...)
  7. │       └─duckdb:::rethrow_rapi_prepare(conn@conn_ref, statement, env)
  8. │         ├─rlang::try_fetch(...)
  9. │         │ ├─base::tryCatch(...)
 10. │         │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 11. │         │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 12. │         │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 13. │         │ └─base::withCallingHandlers(...)
 14. │         └─duckdb:::rapi_prepare(conn, query, env)
 15. └─base::.handleSimpleError(...)
 16.   └─rlang (local) h(simpleError(msg, call))
 17.     └─handlers[[1L]](cnd)
 18.       └─duckdb:::rethrow_error_from_rapi(e, call)
 19.         └─rlang::abort(msg, call = call)
── Error ('test-array.R:73:3'): arrays of DOUBLE with NULL can be read ─────────
Error in `dbSendQuery(conn, statement, ...)`: rapi_prepare: Unknown column type for prepare: DOUBLE[3]
Backtrace:
     ▆
  1. ├─DBI::dbGetQuery(con, "FROM tbl") at test-array.R:73:3
  2. ├─DBI::dbGetQuery(con, "FROM tbl")
  3. │ └─DBI (local) .local(conn, statement, ...)
  4. │   ├─DBI::dbSendQuery(conn, statement, ...)
  5. │   └─duckdb::dbSendQuery(conn, statement, ...)
  6. │     └─duckdb (local) .local(conn, statement, ...)
  7. │       └─duckdb:::rethrow_rapi_prepare(conn@conn_ref, statement, env)
  8. │         ├─rlang::try_fetch(...)
  9. │         │ ├─base::tryCatch(...)
 10. │         │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 11. │         │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 12. │         │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 13. │         │ └─base::withCallingHandlers(...)
 14. │         └─duckdb:::rapi_prepare(conn, query, env)
 15. └─base::.handleSimpleError(...)
 16.   └─rlang (local) h(simpleError(msg, call))
 17.     └─handlers[[1L]](cnd)
 18.       └─duckdb:::rethrow_error_from_rapi(e, call)
 19.         └─rlang::abort(msg, call = call)
── Error ('test-array.R:93:3'): arrays of BOOELAN can be read ──────────────────
Error in `dbSendQuery(conn, statement, ...)`: rapi_prepare: Unknown column type for prepare: BOOLEAN[3]
Backtrace:
     ▆
  1. ├─DBI::dbGetQuery(con, "FROM tbl") at test-array.R:93:3
  2. ├─DBI::dbGetQuery(con, "FROM tbl")
  3. │ └─DBI (local) .local(conn, statement, ...)
  4. │   ├─DBI::dbSendQuery(conn, statement, ...)
  5. │   └─duckdb::dbSendQuery(conn, statement, ...)
  6. │     └─duckdb (local) .local(conn, statement, ...)
  7. │       └─duckdb:::rethrow_rapi_prepare(conn@conn_ref, statement, env)
  8. │         ├─rlang::try_fetch(...)
  9. │         │ ├─base::tryCatch(...)
 10. │         │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 11. │         │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 12. │         │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 13. │         │ └─base::withCallingHandlers(...)
 14. │         └─duckdb:::rapi_prepare(conn, query, env)
 15. └─base::.handleSimpleError(...)
 16.   └─rlang (local) h(simpleError(msg, call))
 17.     └─handlers[[1L]](cnd)
 18.       └─duckdb:::rethrow_error_from_rapi(e, call)
 19.         └─rlang::abort(msg, call = call)
── Error ('test-array.R:113:3'): arrays of BOOELAN with NULL can be read ───────
Error in `dbSendQuery(conn, statement, ...)`: rapi_prepare: Unknown column type for prepare: BOOLEAN[3]
Backtrace:
     ▆
  1. ├─DBI::dbGetQuery(con, "FROM tbl") at test-array.R:113:3
  2. ├─DBI::dbGetQuery(con, "FROM tbl")
  3. │ └─DBI (local) .local(conn, statement, ...)
  4. │   ├─DBI::dbSendQuery(conn, statement, ...)
  5. │   └─duckdb::dbSendQuery(conn, statement, ...)
  6. │     └─duckdb (local) .local(conn, statement, ...)
  7. │       └─duckdb:::rethrow_rapi_prepare(conn@conn_ref, statement, env)
  8. │         ├─rlang::try_fetch(...)
  9. │         │ ├─base::tryCatch(...)
 10. │         │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 11. │         │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 12. │         │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 13. │         │ └─base::withCallingHandlers(...)
 14. │         └─duckdb:::rapi_prepare(conn, query, env)
 15. └─base::.handleSimpleError(...)
 16.   └─rlang (local) h(simpleError(msg, call))
 17.     └─handlers[[1L]](cnd)
 18.       └─duckdb:::rethrow_error_from_rapi(e, call)
 19.         └─rlang::abort(msg, call = call)
── Error ('test-array.R:133:3'): arrays of INTEGER in struct column can be read ──
Error in `duckdb_result(connection = conn, stmt_lst = stmt_lst, arrow = arrow)`: rapi_execute: Unknown column type for execute: INTEGER[3]
Backtrace:
     ▆
  1. ├─DBI::dbGetQuery(con, "FROM tbl") at test-array.R:133:3
  2. ├─DBI::dbGetQuery(con, "FROM tbl")
  3. │ └─DBI (local) .local(conn, statement, ...)
  4. │   ├─DBI::dbSendQuery(conn, statement, ...)
  5. │   └─duckdb::dbSendQuery(conn, statement, ...)
  6. │     └─duckdb (local) .local(conn, statement, ...)
  7. │       └─duckdb:::duckdb_result(connection = conn, stmt_lst = stmt_lst, arrow = arrow)
  8. │         └─duckdb:::duckdb_execute(res)
  9. │           └─duckdb:::rethrow_rapi_execute(...)
 10. │             ├─rlang::try_fetch(...)
 11. │             │ ├─base::tryCatch(...)
 12. │             │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 13. │             │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 14. │             │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 15. │             │ └─base::withCallingHandlers(...)
 16. │             └─duckdb:::rapi_execute(stmt, arrow, integer64)
 17. └─base::.handleSimpleError(...)
 18.   └─rlang (local) h(simpleError(msg, call))
 19.     └─handlers[[1L]](cnd)
 20.       └─duckdb:::rethrow_error_from_rapi(e, call)
 21.         └─rlang::abort(msg, call = call)
── Error ('test-array.R:153:3'): arrays of DOUBLE in struct column can be read ──
Error in `duckdb_result(connection = conn, stmt_lst = stmt_lst, arrow = arrow)`: rapi_execute: Unknown column type for execute: DOUBLE[3]
Backtrace:
     ▆
  1. ├─DBI::dbGetQuery(con, "FROM tbl") at test-array.R:153:3
  2. ├─DBI::dbGetQuery(con, "FROM tbl")
  3. │ └─DBI (local) .local(conn, statement, ...)
  4. │   ├─DBI::dbSendQuery(conn, statement, ...)
  5. │   └─duckdb::dbSendQuery(conn, statement, ...)
  6. │     └─duckdb (local) .local(conn, statement, ...)
  7. │       └─duckdb:::duckdb_result(connection = conn, stmt_lst = stmt_lst, arrow = arrow)
  8. │         └─duckdb:::duckdb_execute(res)
  9. │           └─duckdb:::rethrow_rapi_execute(...)
 10. │             ├─rlang::try_fetch(...)
 11. │             │ ├─base::tryCatch(...)
 12. │             │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 13. │             │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 14. │             │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 15. │             │ └─base::withCallingHandlers(...)
 16. │             └─duckdb:::rapi_execute(stmt, arrow, integer64)
 17. └─base::.handleSimpleError(...)
 18.   └─rlang (local) h(simpleError(msg, call))
 19.     └─handlers[[1L]](cnd)
 20.       └─duckdb:::rethrow_error_from_rapi(e, call)
 21.         └─rlang::abort(msg, call = call)
── Error ('test-array.R:173:3'): arrays of BOOLEAN in struct column can be read ──
Error in `duckdb_result(connection = conn, stmt_lst = stmt_lst, arrow = arrow)`: rapi_execute: Unknown column type for execute: BOOLEAN[3]
Backtrace:
     ▆
  1. ├─DBI::dbGetQuery(con, "FROM tbl") at test-array.R:173:3
  2. ├─DBI::dbGetQuery(con, "FROM tbl")
  3. │ └─DBI (local) .local(conn, statement, ...)
  4. │   ├─DBI::dbSendQuery(conn, statement, ...)
  5. │   └─duckdb::dbSendQuery(conn, statement, ...)
  6. │     └─duckdb (local) .local(conn, statement, ...)
  7. │       └─duckdb:::duckdb_result(connection = conn, stmt_lst = stmt_lst, arrow = arrow)
  8. │         └─duckdb:::duckdb_execute(res)
  9. │           └─duckdb:::rethrow_rapi_execute(...)
 10. │             ├─rlang::try_fetch(...)
 11. │             │ ├─base::tryCatch(...)
 12. │             │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 13. │             │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 14. │             │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 15. │             │ └─base::withCallingHandlers(...)
 16. │             └─duckdb:::rapi_execute(stmt, arrow, integer64)
 17. └─base::.handleSimpleError(...)
 18.   └─rlang (local) h(simpleError(msg, call))
 19.     └─handlers[[1L]](cnd)
 20.       └─duckdb:::rethrow_error_from_rapi(e, call)
 21.         └─rlang::abort(msg, call = call)
── Error ('test-relational.R:203:3'): the altrep-conversion for relations work for weirdo types for strict = FALSE ──
Error in `rel_from_df(con, test_df, strict = FALSE)`: unused argument (strict = FALSE)
── Error ('test-relational.R:1064:3'): logical ─────────────────────────────────
Error in `rel_from_df(con, df2, strict = FALSE)`: unused argument (strict = FALSE)
── Error ('test-relational.R:1078:3'): integer ─────────────────────────────────
Error in `rel_from_df(con, df2, strict = FALSE)`: unused argument (strict = FALSE)
── Error ('test-relational.R:1092:3'): numeric ─────────────────────────────────
Error in `rel_from_df(con, df2, strict = FALSE)`: unused argument (strict = FALSE)
── Error ('test-relational.R:1107:3'): list ────────────────────────────────────
Error in `rel_from_df(con, df2, strict = FALSE)`: unused argument (strict = FALSE)
── Error ('test-relational.R:1121:3'): Date ────────────────────────────────────
Error in `rel_from_df(con, df2, strict = FALSE)`: unused argument (strict = FALSE)
── Error ('test-relational.R:1135:3'): difftime ────────────────────────────────
Error in `rel_from_df(con, df2, strict = FALSE)`: unused argument (strict = FALSE)
── Error ('test-relational.R:1147:3'): factor ──────────────────────────────────
Error in `rel_from_df(con, df2, strict = FALSE)`: unused argument (strict = FALSE)
── Error ('test-relational.R:1159:3'): data.frame ──────────────────────────────
Error in `eval(code, test_env)`: rel_to_altrep: Unknown column type for altrep: STRUCT(b INTEGER, c INTEGER)
Backtrace:
     ▆
  1. ├─testthat::expect_equal(rel_to_altrep(rel), df1) at test-relational.R:1159:3
  2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
  3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
  4. ├─duckdb:::rel_to_altrep(rel)
  5. │ └─duckdb:::rethrow_rapi_rel_to_altrep(rel, n_rows = n_rows, n_cells = n_cells)
  6. │   ├─rlang::try_fetch(...)
  7. │   │ ├─base::tryCatch(...)
  8. │   │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  9. │   │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 10. │   │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 11. │   │ └─base::withCallingHandlers(...)
 12. │   └─duckdb:::rapi_rel_to_altrep(rel, n_rows, n_cells)
 13. └─base::.handleSimpleError(...)
 14.   └─rlang (local) h(simpleError(msg, call))
 15.     └─handlers[[1L]](cnd)
 16.       └─duckdb:::rethrow_error_from_rapi(e, call)
 17.         └─rlang::abort(msg, call = call)
── Error ('test-relational.R:1174:3'): POSIXct ─────────────────────────────────
Error in `rel_from_df(con, df2, strict = FALSE)`: unused argument (strict = FALSE)
── Failure ('test-timestamp.R:22:3'): fractional seconds can be extracted from TIME columns ──
data$a not equal to structure(3723.45, class = "difftime", units = "secs").
Mean relative difference: 0.0001208703
── Failure ('test-timestamp.R:26:3'): fractional seconds can be extracted from TIME columns ──
data$b not equal to structure(3723.45, class = "difftime", units = "secs").
Mean relative difference: 0.0001208703
── Failure ('test-timezone.R:135:3'): POSIXct with local time zone ─────────────
rel_to_altrep(rel) not equal to `df1`.
Component “a”: 'tzone' attributes are inconsistent ('UTC' and '')
── Error ('test-timezone.R:139:3'): POSIXct with local time zone ───────────────
Error in `rel_from_df(con, df2, strict = FALSE)`: unused argument (strict = FALSE)
── Failure ('test-timezone.R:151:3'): POSIXct with local time zone and existing but empty attribute ──
rel_to_altrep(rel) not equal to `df1`.
Component “a”: 'tzone' attributes are inconsistent ('UTC' and '')
── Error ('test-timezone.R:155:3'): POSIXct with local time zone and existing but empty attribute ──
Error in `rel_from_df(con, df2, strict = FALSE)`: unused argument (strict = FALSE)

[ FAIL 25 | WARN 0 | SKIP 69 | PASS 686 ]
Error: Test failures
Execution halted
