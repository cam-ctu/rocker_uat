
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "R.oo"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('R.oo')
Loading required package: R.methodsS3
R.methodsS3 v1.8.2 (2022-06-13 22:00:14 UTC) successfully loaded. See ?R.methodsS3 for help.
R.oo v1.27.0 (2024-11-01 18:00:02 UTC) successfully loaded. See ?R.oo for help.

Attaching package: ‘R.oo’

The following object is masked from ‘package:R.methodsS3’:

    throw

The following objects are masked from ‘package:methods’:

    getClasses, getMethods

The following objects are masked from ‘package:base’:

    attach, detach, load, save

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("ASCII")
> ### * ASCII
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ASCII
> ### Title: 8-bit ASCII table
> ### Aliases: ASCII ASCII.BEL ASCII.BS ASCII.HT ASCII.LF ASCII.FF ASCII.CR
> ###   ASCII.SO ASCII.SI ASCII.DC1 ASCII.DC3 ASCII.ESC
> ### Keywords: character internal
> 
> ### ** Examples
> 
>   ch <- ASCII[65+1];  # ch == "A"
> 
> 
> 
> cleanEx()
> nameEx("DOLLAR.Class")
> ### * DOLLAR.Class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DOLLAR.Class
> ### Title: Makes the fields and methods of a Class accessible via the $ and
> ###   the [[ operator
> ### Aliases: $.Class Class.$ $,Class-method Class.[[ [[.Class
> ###   [[,Class-method
> ### Keywords: internal methods programming
> 
> ### ** Examples
> ## Not run: For a complete example see help(Class).
> 
> 
> cleanEx()
> nameEx("DOLLAR.Object")
> ### * DOLLAR.Object
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DOLLAR.Object
> ### Title: Makes the fields and methods of an Object accessible via the $
> ###   and the [[ operator
> ### Aliases: $.Object Object.$ $,Object-method Object.[[ [[.Object
> ###   [[,Object-method
> ### Keywords: programming methods internal methods
> 
> ### ** Examples
> ## Not run: For a complete example see help(Object).
> 
> 
> cleanEx()
> nameEx("DOLLARLT_-.Class")
> ### * DOLLARLT_-.Class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DOLLAR< -.Class
> ### Title: Makes the fields and methods of a Class assignable via the $<-
> ###   and the [[<- operator
> ### Aliases: $<-.Class Class.$<- $<-,Class-method Class.[[<- [[<-.Class
> ###   [[<-,Class-method
> ### Keywords: internal methods programming
> 
> ### ** Examples
> ## Not run: For a complete example see help(Class).
> 
> 
> cleanEx()
> nameEx("DOLLARLT_-.Object")
> ### * DOLLARLT_-.Object
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DOLLAR< -.Object
> ### Title: Makes the fields and methods of an Object assignable via the $<-
> ###   and the [[<- operator
> ### Aliases: $<-.Object Object.$<- $<-,Object-method Object.[[<-
> ###   [[<-.Object [[<-,Object-method
> ### Keywords: programming methods internal methods
> 
> ### ** Examples
> ## Not run: For a complete example see help(Object).
> 
> 
> cleanEx()
> nameEx("Exception")
> ### * Exception
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Exception
> ### Title: The Exception class to be thrown and caught
> ### Aliases: Exception
> ### Keywords: programming methods error classes
> 
> ### ** Examples
> 
> 
> ######################################################################
> # 1. To catch a regular "error" exception thrown by e.g. stop().
> ######################################################################
> x <- NA
> y <- NA
> tryCatch({
+   x <- log(123)
+   y <- log("a")
+ }, error = function(ex) {
+   print(ex)
+ })
<simpleError in log("a"): non-numeric argument to mathematical function>
> print(x)
[1] 4.812184
> print(y)
[1] NA
> 
> 
> 
> ######################################################################
> # 2. Always run a "final" expression regardless or error or not.
> ######################################################################
> filename <- tempfile("R.methodsS3.example")
> con <- file(filename)
> tryCatch({
+   open(con, "r")
+ }, error = function(ex) {
+   cat("Could not open ", filename, " for reading.\n", sep="")
+ }, finally = {
+   close(con)
+   cat("The id of the connection is ",
+        ifelse(is.null(con), "NULL", con), ".\n", sep="")
+ })
Warning in open.connection(con, "r") :
  cannot open file '/tmp/Rtmp7BWqgh/R.methodsS3.example61e8553cee64': No such file or directory
Could not open /tmp/Rtmp7BWqgh/R.methodsS3.example61e8553cee64 for reading.
The id of the connection is 3.
> 
> 
> ######################################################################
> # 3. Creating your own Exception class
> ######################################################################
> setConstructorS3("NegativeLogValueException", function(
+   msg="Trying to calculate the logarithm of a negative value", value=NULL) {
+   extend(Exception(msg=msg), "NegativeLogValueException",
+     .value = value
+   )
+ })
> 
> setMethodS3("as.character", "NegativeLogValueException", function(this, ...) {
+   paste(as.character.Exception(this), ": ", getValue(this), sep="")
+ })
NULL
> 
> setMethodS3("getValue", "NegativeLogValueException", function(this, ...) {
+   this$.value
+ })
> 
> 
> mylog <- function(x, base=exp(1)) {
+   if (x < 0)
+     throw(NegativeLogValueException(value=x))
+   else
+     log(x, base=base)
+ }
> 
> 
> # Note that the order of the catch list is important:
> l <- NA
> x <- 123
> tryCatch({
+   l <- mylog(x)
+ }, NegativeLogValueException = function(ex) {
+   cat(as.character(ex), "\n")
+ }, "try-error" = function(ex) {
+   cat("try-error: Could not calculate the logarithm of ", x, ".\n", sep="")
+ }, error = function(ex) {
+   cat("error: Could not calculate the logarithm of ", x, ".\n", sep="")
+ })
> cat("The logarithm of ", x, " is ", l, ".\n\n", sep="")
The logarithm of 123 is 4.812184.

> 
> 
> 
> 
> cleanEx()
> nameEx("Object")
> ### * Object
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Object
> ### Title: The root class that every class must inherit from
> ### Aliases: Object
> ### Keywords: programming methods classes
> 
> ### ** Examples
> 
>  
> #########################################################################
> # Defines the class Person with private fields .name and .age, and
> # with methods print(), getName(), setName(), getAge() and setAge().
> #########################################################################
> setConstructorS3("Person", function(name, age) {
+   if (missing(name)) name <- NA
+   if (missing(age))  age <- NA
+ 
+   extend(Object(), "Person",
+     .name=name,
+     .age=age
+   )
+ })
> 
> 
> setMethodS3("as.character", "Person", function(this, ...) {
+   paste(this$.name, "is", as.integer(this$.age), "years old.")
+ })
NULL
> 
> setMethodS3("equals", "Person", function(this, obj, ...) {
+   ( identical(data.class(this), data.class(obj)) &&
+     identical(this$getName(), obj$getName()) &&
+     identical(this$getAge() , obj$getAge() )    )
+ })
NULL
> 
> setMethodS3("hashCode", "Person", function(this, ...) {
+   # Get the hashCode() of the '.name' and the '.age' fields
+   # using hashCode.default().
+   hashCode(this$.name) * hashCode(this$.age)
+ })
NULL
> 
> setMethodS3("getName", "Person", function(this, ...) {
+   this$.name
+ })
NULL
> 
> setMethodS3("setName", "Person", function(this, newName, ...) {
+   throw("It is not possible to change the name of a Person.")
+ })
> 
> setMethodS3("getAge", "Person", function(this, ...) {
+   this$.age
+ })
> 
> setMethodS3("setAge", "Person", function(this, newAge, ...) {
+   if (!is.numeric(newAge))
+     throw("Age must be numeric: ", newAge)
+   if (newAge < 0)
+     throw("Trying to set a negative age: ", newAge)
+   this$.age <- newAge
+ })
> 
> 
> 
> 
> #########################################################################
> # Code demonstrating different properties of the Object class using
> # the example class Person.
> #########################################################################
> 
> # Create an object (instance of) the class Person.
> p1 <- Person("Dalai Lama", 67)
> 
> # 'p1' is an Object of class Person.
> print(data.class(p1))  # "Person"
[1] "Person"
> 
> # Prints information about the Person object.
> print(p1)            # "Dalai Lama is 67 years old."
[1] "Dalai Lama is 67 years old."
> 
> # or equivalent (except that no generic method has to exist):
> 
> p1$print()           # "Dalai Lama is 67 years old."
[1] "Dalai Lama is 67 years old."
> 
> # Shows that no generic method is required if the \$ operator is used:
> print(p1$getName())  # "Dalai Lama"
[1] "Dalai Lama"
> 
> # The following will call p1$getName() since there exists a get-()
> # method for the 'name' property.
> print(p1$name)       # "Dalai Lama"
[1] "Dalai Lama"
> 
> # and equivalent when using the [[ operator.
> print(p1[["name"]])  # "Dalai Lama"
[1] "Dalai Lama"
> 
> # The following shows that p1$setName(68) is called, simply because
> # there exists a set-() method for the 'name' property.
> p1$age <- 68         # Will call p1$setAge(68)
> 
> # Shows that the age of the Person has been updated:
> print(p1)            # "Dalai Lama is 68 years old."
[1] "Dalai Lama is 68 years old."
> 
> # If there would not exists such a set-() method or field a new
> # field would be created:
> p1$country <- "Tibet"
> 
> # Lists all (non-private) members of the Person object:
> print(ll(p1))
   member data.class dimension objectSize
1 country  character         1        112
> 
> # which gives
> #      member class      mode    typeof length  dim bytes
> #   1 country  NULL character character      1 NULL    44
> 
> # The following will call p1$setName("Lalai Dama") which will
> # throw an exception saying one can not change the name of
> # a Person.
> tryCatch(p1$name <- "Lalai Dama", error=print)
[2025-05-06 10:00:09.554773] Exception: It is not possible to change the name of a Person.

  at #07. method(ref, value)
          - method() is in environment 'R_GlobalEnv'

  at #06. `$<-.Object`(`*tmp*`, name, value = "Lalai Dama")
          - `$<-.Object`() is in environment 'R.oo'

  at #05. `$<-`(`*tmp*`, name, value = "Lalai Dama")
          - `$<-`() is local of the calling function

> 
> # The following will call p1$setAge(-4) which will throw an
> # exception saying that the age must be a non-negative number.
> tryCatch(p1$age <- -100, error=print)
[2025-05-06 10:00:09.563251] Exception: Trying to set a negative age: -100

  at #07. method(ref, value)
          - method() is in environment 'R_GlobalEnv'

  at #06. `$<-.Object`(`*tmp*`, age, value = -100)
          - `$<-.Object`() is in environment 'R.oo'

  at #05. `$<-`(`*tmp*`, age, value = -100)
          - `$<-`() is local of the calling function

> 
> # Attaches Object 'p1' to the search path.
> attach(p1)
> 
> # Accesses the newly created field 'country'.
> print(country)       # "Tibet"
[1] "Tibet"
> 
> # Detaches Object 'p1' from the search path. Note that all
> # modifications to 'country' are lost.
> country <- "Sweden"
> detach(p1)
> print(p1$country)    # "Tibet"
[1] "Tibet"
> 
> 
> # Saves the Person object to a tempory file.
> filename <- tempfile("R.methodsS3.example")
> save(p1, filename)
> 
> # Deletes the object
> rm(p1)
> 
> # Loads an Object (of "unknown" class) from file using the
> # static method load() of class Object.
> obj <- Object$load(filename)
> 
> # Prints information about the new Object.
> print(obj)
[1] "Dalai Lama is 68 years old."
> 
> # Lists all (non-private) members of the new Object.
> print(ll(obj))
   member data.class dimension objectSize
1 country  character         1        112
> 
> 
>  
> ######################################################################
> # Example illustrating how to "emulate" static fields using virtual
> # fields, i.e. get- and set-methods.  Here we use a private static
> # field '.count' of the static class instance 'MyClass', i.e.
> # MyClass$.count.  Then we define a virtual field 'count' via method
> # getCount() to access this static field.  This will make all queries
> # for 'count' of any object to use the static field instead.  In the
> # same way is assignment controlled via the setCount() method.  A
> # side effect of this way of coding is that all MyClass instances will
> # also have the private field '.count' (set to zero except for the
> # static field that is).
> ######################################################################
> setConstructorS3("MyClass", function(...) {
+   # Create an instance (the static class instance included)
+   this <- extend(Object(), "MyClass",
+     .count = 0
+   )
+ 
+   # In order for a static field to be updated in the
+   # constructor it has to be done after extend().
+   this$count <- this$count + 1
+ 
+   # Return the object
+   this
+ })
> 
> 
> setMethodS3("as.character", "MyClass", function(this, ...) {
+   paste(class(this)[1], ": Number of instances: ", this$count, sep="")
+ })
NULL
> 
> 
> # Get virtual field 'count', e.g. obj$count.
> setMethodS3("getCount", "MyClass", function(this, ...) {
+   MyClass$.count
+ })
> 
> 
> # Set virtual field 'count', e.g. obj$count <- value.
> setMethodS3("setCount", "MyClass", function(this, value, ...) {
+   MyClass$.count <- value
+ })
> 
> 
> # Create four instances of class 'MyClass'
> obj <- lapply(1:4, MyClass)
> print(obj)
[[1]]
[1] "MyClass: Number of instances: 4"

[[2]]
[1] "MyClass: Number of instances: 4"

[[3]]
[1] "MyClass: Number of instances: 4"

[[4]]
[1] "MyClass: Number of instances: 4"

> print(MyClass$count)
[1] 4
> print(obj[[1]]$count)
[1] 4
> 
> stopifnot(obj[[1]]$count == length(obj))
> stopifnot(MyClass$count == length(obj))
> 
> 
> 
> 
> cleanEx()
> nameEx("Package")
> ### * Package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Package
> ### Title: The Package class provides methods for accessing package
> ###   information
> ### Aliases: Package
> ### Keywords: programming methods classes
> 
> ### ** Examples
> ## Not run: 
> ##D # By defining .onAttach() as follows in zzz.R for a package, an
> ##D # instance of class Package with the same name as the package will
> ##D # be made available on the search path. More over, the code below
> ##D # will also inform the user that the package has been loaded:
> ##D #
> ##D #  > library(R.oo)
> ##D #  R.oo v0.52 (2003/04/13) was successfully loaded.
> ##D #
> ##D .onAttach <- function(libname, pkgname) {
> ##D   pkg <- Package(pkgname)
> ##D   assign(pkgname, pkg, pos=getPosition(pkg))
> ##D   cat(getName(pkg), " v", getVersion(pkg), " (", getDate(pkg), ")",
> ##D     " was successfully loaded.\n", sep="")
> ##D }
> ##D 
> ##D # The Package class works for any packages, loaded or not.
> ##D 
> ##D # Some information about the base package
> ##D pkg <- Package("base")
> ##D print(pkg)
> ##D # [1] "Package: base v3.6.2 is loaded (pos=14).  Title: The R Base Package.
> ##D # The official webpage is NA and the maintainer is R Core Team <R-core@
> ##D # r-project.org>.  The package is installed in /usr/lib/R/library/base/.
> ##D # License: Part of R 3.6.2.  Description: Base R functions.  Type
> ##D # showNews(base) for package history, and ?base for help."
> ##D print(list.files(Package("base")$dataPath))
> ##D 
> ##D # Some information about the R.oo package
> ##D print(R.oo::R.oo)
> ##D # [1] "Package: R.oo v1.23.0-9000 .  Title: R Object-Oriented Programming
> ##D # with or without References.  The official webpage is https://github.com/
> ##D # HenrikBengtsson/R.oo and the maintainer is Henrik Bengtsson.  The package
> ##D # is installed in /home/alice/R/x86_64-pc-linux-gnu-library/3.6/R.oo/.
> ##D # License: LGPL (>= 2.1).  Description: Methods and classes for object-
> ##D # oriented programming in R with or without references.  Large effort has
> ##D # been made on making definition of methods as simple as possible with a
> ##D # minimum of maintenance for package developers.  The package has been
> ##D # developed since 2001 and is now considered very stable.  This is a
> ##D # cross-platform package implemented in pure R that defines standard S3
> ##D # classes without any tricks.  Type showNews(R.oo) for package history,
> ##D # and ?R.oo for help."
> ## End(Not run)
> 
> 
> cleanEx()
> nameEx("RccViolationException")
> ### * RccViolationException
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: RccViolationException
> ### Title: An RccViolationException indicates a violation of the R Coding
> ###   Conventions (RCC)
> ### Aliases: RccViolationException
> ### Keywords: classes programming methods error internal
> 
> ### ** Examples
> 
>  ## Not run: 
> ##D   setConstructorS3("myClass", function() { extends(Object(), .value=0) })
> ##D   setMethodS3("MyMethod", "myClass", function(this) { "Hullo!" })
> ##D  
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("Rdoc")
> ### * Rdoc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Rdoc
> ### Title: Class for converting Rdoc comments to Rd files
> ### Aliases: Rdoc
> ### Keywords: classes documentation
> 
> ### ** Examples
> ## Not run: 
> ##D # Set default author
> ##D author <- "Henrik Bengtsson, \url{https://github.com/HenrikBengtsson/R.oo}"
> ##D 
> ##D # Show the file containing the Rdoc comments
> ##D rdocFile <- system.file("misc", "ASCII.R", package="R.oo")
> ##D file.show(rdocFile)
> ##D 
> ##D # Compile the Rdoc:s into Rd files (saved in the destPath directory)
> ##D destPath <- tempdir()
> ##D Rdoc$compile(rdocFile, destPath=destPath)
> ##D 
> ##D # List the generated Rd files
> ##D rdFiles <- list.files(destPath, full.names=TRUE)
> ##D print(rdFiles)
> ##D 
> ##D # Show one of the files
> ##D file.show(rdFiles[1])
> ##D 
> ##D # Clean up
> ##D file.remove(rdFiles)
> ## End(Not run)
> 
> 
> cleanEx()
> nameEx("abort")
> ### * abort
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: abort
> ### Title: Aborts the current expression call
> ### Aliases: abort.default abort abort.condition
> ### Keywords: error internal
> 
> ### ** Examples
> ## Not run: 
> ##D  foo <- function() {
> ##D   cat("foo()...\n")
> ##D   on.exit(cat("foo()...done\n"))
> ##D   tryCatch({
> ##D     stop("Woops!")
> ##D   }, error = function(ex) {
> ##D     cat("An error was caught: ", ex$message, "\n", sep="")
> ##D   })
> ##D   cat("Continuing...\n")
> ##D }
> ##D 
> ##D bar <- function() {
> ##D   cat("bar()...\n")
> ##D   on.exit(cat("bar()...done\n"))
> ##D   tryCatch({
> ##D     abort("Woops!")
> ##D   }, error = function(ex) {
> ##D     cat("An error was caught: ", ex$message, "\n", sep="")
> ##D   })
> ##D   cat("This message will never be displayed...\n")
> ##D }
> ##D 
> ##D # An error generated by stop() can be caught
> ##D foo()
> ##D 
> ##D # ...which is not possible when using abort()
> ##D bar()
> ##D 
> ##D # This expression is never reached
> ##D cat("This line will never be outputted.\n")
> ##D 
> ## End(Not run)
> 
> 
> cleanEx()
> nameEx("argsToString.Class")
> ### * argsToString.Class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Class$argsToString
> ### Title: Gets the arguments of a function as a character string
> ### Aliases: Class$argsToString argsToString.Class Class.argsToString
> ###   argsToString,Class-method
> ### Keywords: internal methods programming
> 
> ### ** Examples
> 
>   Class$argsToString(plot)
[[1]]
[1] "x"

[[2]]
[1] "y"

[[3]]
[1] "..."

> 
> 
> 
> cleanEx()
> nameEx("as.character.Class")
> ### * as.character.Class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.character.Class
> ### Title: Returns a short string describing the class
> ### Aliases: as.character.Class Class.as.character
> ###   as.character,Class-method
> ### Keywords: internal methods programming
> 
> ### ** Examples
> 
>   print(as.character(Object))
[1] "Class Object has 0 fields and 28 methods."
> 
>   # gives:  "Class Object: no fields, 8 methods (no inherited)"
> 
> 
> 
> cleanEx()
> nameEx("as.character.Exception")
> ### * as.character.Exception
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.character.Exception
> ### Title: Gets a character string representing of the Exception
> ### Aliases: as.character.Exception Exception.as.character
> ###   as.character,Exception-method
> ### Keywords: programming methods error internal methods
> 
> ### ** Examples
> ## Not run: For a complete example see help(Exception).
> 
> 
> cleanEx()
> nameEx("as.character.Object")
> ### * as.character.Object
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.character.Object
> ### Title: Gets a character string representing the object
> ### Aliases: as.character.Object Object.as.character
> ###   as.character,Object-method
> ### Keywords: programming methods internal methods
> 
> ### ** Examples
> 
>   obj <- Object()
>   as.character(obj)    # "Object: 0x000000000ab6a7a8"
[1] "Object: 0x56370559eb40"
> 
> 
> 
> cleanEx()
> nameEx("as.character.Package")
> ### * as.character.Package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.character.Package
> ### Title: Gets a string representation of this package
> ### Aliases: as.character.Package Package.as.character
> ###   as.character,Package-method
> ### Keywords: internal methods
> 
> ### ** Examples
> print(R.oo)
[1] "Package: R.oo v1.27.0 (2024-11-01 18:00:02 UTC) is loaded (pos=2).  Title: R Object-Oriented Programming with or without References.  The official webpage is https://github.com/HenrikBengtsson/R.oo and the maintainer is Henrik Bengtsson.  The package is installed in /usr/local/lib/R/site-library/R.oo/.  License: LGPL (>= 2.1).  Description: Methods and classes for object-oriented programming in R with or without references.  Large effort has been made on making definition of methods as simple as possible with a minimum of maintenance for package developers.  The package has been developed since 2001 and is now considered very stable.  This is a cross-platform package implemented in pure R that defines standard S3 classes without any tricks.  Type showNews(R.oo) for package history, and ?R.oo for help."
> 
> 
> cleanEx()
> nameEx("as.character.RccViolationException")
> ### * as.character.RccViolationException
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.character.RccViolationException
> ### Title: Gets a string representing of the RCC violation
> ### Aliases: as.character.RccViolationException
> ###   RccViolationException.as.character
> ###   as.character,RccViolationException-method
> ### Keywords: programming methods error internal methods
> 
> ### ** Examples
> ## Not run: For a complete example see help(Exception).
> 
> 
> cleanEx()
> nameEx("attach.Object")
> ### * attach.Object
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: attach.Object
> ### Title: Attaches an Object to the R search path
> ### Aliases: attach.Object Object.attach attach,Object-method
> ### Keywords: programming methods internal methods
> 
> ### ** Examples
> ## Not run: For a complete example see help(Object).
> 
> 
> cleanEx()
> nameEx("attachLocally.Object")
> ### * attachLocally.Object
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: attachLocally.Object
> ### Title: Attaches an Object locally to an environment
> ### Aliases: attachLocally.Object Object.attachLocally
> ###   attachLocally,Object-method
> ### Keywords: internal methods utilities programming
> 
> ### ** Examples
> 
> foo <- function(object, arg1="some value", ...) {
+   cat("Local objects in foo():\n")
+   print(ls())
+ 
+   attachLocally(object)
+ 
+   cat("\nLocal objects in foo():\n")
+   print(ls())
+ 
+   for (name in ls()) {
+     cat("\nObject '", name, "':\n", sep="")
+     print(get(name, inherits=FALSE))
+   }
+ }
> 
> a <- "A string"
> obj <- Object()
> obj$a <- "Another string"
> obj$b <- NA
> foo(obj)
Local objects in foo():
[1] "arg1"   "object"

Local objects in foo():
[1] "a"      "arg1"   "b"      "object"

Object 'a':
[1] "Another string"

Object 'arg1':
[1] "some value"

Object 'b':
[1] NA

Object 'object':
[1] "Object: 0x5637057994a0"
> print(a)
[1] "A string"
> 
> 
> 
> cleanEx()
> nameEx("charToInt")
> ### * charToInt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: charToInt
> ### Title: Converts a vector of ASCII characters into a vector of integers
> ### Aliases: charToInt.default charToInt
> ### Keywords: character internal
> 
> ### ** Examples
> 
>   i <- charToInt(unlist(strsplit("Hello world!", split=NULL)))
>   # Gives: 72 101 108 108 111  32 119 111 114 108 100  33
>   ch <- intToChar(c(72,101,108,108,111,32,119,111,114,108,100,33))
>   # Gives: "H" "e" "l" "l" "o" " " "w" "o" "r" "l" "d" "!"
> 
> 
> 
> cleanEx()
> nameEx("clearCache.Object")
> ### * clearCache.Object
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clearCache.Object
> ### Title: Clear fields that are defined to have cached values
> ### Aliases: clearCache.Object Object.clearCache clearCache,Object-method
> ### Keywords: internal methods programming
> 
> ### ** Examples
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Defining a class with a 'cached' fields
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> setConstructorS3("CachedObject", function(...) {
+   extend(Object(), "CachedObject",
+     ...
+   )
+ })
> 
> setMethodS3("as.character", "CachedObject", function(this, ...) {
+   s <- NextMethod("as.character", this, ...)
+   s <- sprintf("%s RAM: %.2fkb.", s, objectSize(this)/1024)
+   s
+ })
NULL
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Example of clearing a cache fields, reassigning it,
> # and then clearing it again
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> obj <- CachedObject(a=1, b=1:10^5, "cached:c"=1:10^6)
> print(obj)
[1] "CachedObject: 0x563706028508 RAM: 4297.46kb."
> print(ll(obj))
  member data.class dimension objectSize
1      a    numeric         1         56
2      b    numeric    100000     400048
3      c    numeric   1000000    4000048
> 
> clearCache(obj, gc=TRUE)
> print(obj)
[1] "CachedObject: 0x563706028508 RAM: 391.16kb."
> print(ll(obj))
  member data.class dimension objectSize
1      a    numeric         1         56
2      b    numeric    100000     400048
3      c       NULL         0          0
> 
> 
> obj$c <- 1:10^6
> print(obj)
[1] "CachedObject: 0x563706028508 RAM: 4297.46kb."
> print(ll(obj))
  member data.class dimension objectSize
1      a    numeric         1         56
2      b    numeric    100000     400048
3      c    numeric   1000000    4000048
> 
> clearCache(obj, gc=TRUE)
> print(obj)
[1] "CachedObject: 0x563706028508 RAM: 391.16kb."
> print(ll(obj))
  member data.class dimension objectSize
1      a    numeric         1         56
2      b    numeric    100000     400048
3      c       NULL         0          0
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Clearing cached fields recursively and make sure it
> # avoids race conditions due to circular dependences
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> objA <- CachedObject(a=2, "cached:c"=1:10^6, prev=NULL)
> print(ll(objA))
  member data.class dimension objectSize
1      a    numeric         1         56
2      c    numeric   1000000    4000048
3   prev       NULL         0          0
> 
> objB <- CachedObject(a=2, "cached:c"=1:10^6, prev=objA)
> print(ll(objB))
  member   data.class dimension objectSize
1      a      numeric         1         56
2      c      numeric   1000000    4000048
3   prev CachedObject         1    4000552
> 
> objC <- CachedObject(a=3, "cached:c"=1:10^6, prev=objB)
> print(ll(objC))
  member   data.class dimension objectSize
1      a      numeric         1         56
2      c      numeric   1000000    4000048
3   prev CachedObject         1    4001072
> 
> objA$prev <- objC
> 
> clearCache(objA, gc=TRUE)
> print(ll(objA))
  member   data.class dimension objectSize
1      a      numeric         1         56
2      c         NULL         0          0
3   prev CachedObject         1       1024
> print(ll(objB))
  member   data.class dimension objectSize
1      a      numeric         1         56
2      c         NULL         0          0
3   prev CachedObject         1       1024
> print(ll(objC))
  member   data.class dimension objectSize
1      a      numeric         1         56
2      c         NULL         0          0
3   prev CachedObject         1       1024
> 
> 
> 
> 
> cleanEx()
> nameEx("clone.Object")
> ### * clone.Object
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clone.Object
> ### Title: Clones an Object
> ### Aliases: clone.Object Object.clone clone,Object-method
> ### Keywords: programming methods internal methods
> 
> ### ** Examples
> 
>   o1 <- Object()
>   o2 <- clone(o1)
> 
>   print(equals(o1, o2))
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("detach.Object")
> ### * detach.Object
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: detach.Object
> ### Title: Detach an Object from the R search path
> ### Aliases: detach.Object Object.detach detach,Object-method
> ### Keywords: programming methods internal methods
> 
> ### ** Examples
> ## Not run: For a complete example see help(Object).
> 
> 
> cleanEx()
> nameEx("dimension")
> ### * dimension
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dimension
> ### Title: Gets the dimension of the object
> ### Aliases: dimension.default dimension
> ### Keywords: attribute utilities internal
> 
> ### ** Examples
> 
>   dimension(matrix(1:100, ncol=10))     # 10 10
[1] 10 10
>   dimension(1:14)                       # 14
[1] 14
>   dimension(data.frame(a=1:10, b=10:1)) # 10  2
[1] 10  2
>   dimension(print)                      # NULL
NULL
> 
> 
> 
> cleanEx()
> nameEx("equals.Object")
> ### * equals.Object
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: equals.Object
> ### Title: Compares an object with another
> ### Aliases: equals.Object Object.equals equals,Object-method
> ### Keywords: programming methods internal methods
> 
> ### ** Examples
> 
>   o1 <- Object()
>   o2 <- clone(o1)
>   equals(o1, o1)    # TRUE
[1] TRUE
>   equals(o1, o2)    # FALSE
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("extend.Object")
> ### * extend.Object
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extend.Object
> ### Title: Extends another class
> ### Aliases: extend.Object Object.extend extend,Object-method
> ### Keywords: programming methods internal methods
> 
> ### ** Examples
> ## Not run: For a complete example see help(Object).
> 
> 
> cleanEx()
> nameEx("extend")
> ### * extend
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extend
> ### Title: Extends a object
> ### Aliases: extend.default extend
> ### Keywords: programming methods
> 
> ### ** Examples
> 
> setConstructorS3("MyDouble", function(value=0, ...) {
+   extend(as.double(value), "MyDouble", ...)
+ })
> 
> setMethodS3("as.character", "MyDouble", function(object, ...) {
+   fmtstr <- attr(object, "fmtstr")
+   if (is.null(fmtstr))
+     fmtstr <- "%.6f"
+   sprintf(fmtstr, object)
+ })
NULL
> 
> setMethodS3("print", "MyDouble", function(object, ...) {
+   print(as.character(object), ...)
+ })
NULL
> 
> x <- MyDouble(3.1415926)
> print(x)
[1] "3.141593"
> 
> x <- MyDouble(3.1415926, fmtstr="%3.2f")
> print(x)
[1] "3.14"
> attr(x, "fmtstr") <- "%e"
> print(x)
[1] "3.141593e+00"
> 
> 
> 
> 
> 
> 
> setConstructorS3("MyList", function(value=0, ...) {
+   extend(list(value=value, ...), "MyList")
+ })
> 
> setMethodS3("as.character", "MyList", function(object, ...) {
+   fmtstr <- object$fmtstr
+   if (is.null(fmtstr))
+     fmtstr <- "%.6f"
+   sprintf(fmtstr, object$value)
+ })
NULL
> 
> setMethodS3("print", "MyList", function(object, ...) {
+   print(as.character(object), ...)
+ })
NULL
> 
> x <- MyList(3.1415926)
> print(x)
[1] "3.141593"
> x <- MyList(3.1415926, fmtstr="%3.2f")
> print(x)
[1] "3.14"
> x$fmtstr <- "%e"
> print(x)
[1] "3.141593e+00"
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("finalize.Object")
> ### * finalize.Object
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: finalize.Object
> ### Title: Finalizer methods called when object is clean out
> ### Aliases: finalize.Object Object.finalize finalize,Object-method
> ### Keywords: internal methods programming
> 
> ### ** Examples
> 
> setConstructorS3("MyClass", function() {
+   extend(Object(), "MyClass")
+ })
> 
> setMethodS3("finalize", "MyClass", function(this, ...) {
+   cat(as.character(this), "is about to be removed from the memory!\n")
+ })
NULL
> 
> o <- MyClass()
> o <- MyClass()
> o <- MyClass()
> o <- MyClass()
> gc()
MyClass: 0x56370397ac18 is about to be removed from the memory!
MyClass: 0x5637039910b8 is about to be removed from the memory!
MyClass: 0x56370518d148 is about to be removed from the memory!
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 463429 24.8     968152 51.8   707682 37.8
Vcells 870952  6.7    8388608 64.0  1973744 15.1
> 
> ## MyClass: 0x01BE602C is about to be removed from the memory!
> ## MyClass: 0x01BFF634 is about to be removed from the memory!
> ## MyClass: 0x01C13584 is about to be removed from the memory!
> ##          used (Mb) gc trigger (Mb)
> ## Ncells 229903  6.2     467875 12.5
> ## Vcells  53725  0.5     786432  6.0
> 
> rm(o)
> ## MyClass: 0x01C578B0 is about to be removed from the memory!
> ##          used (Mb) gc trigger (Mb)
> ## Ncells 229903  6.1     467875 12.3
> ## Vcells  53725  0.5     786432  6.0
> 
> 
> 
> cleanEx()
> nameEx("forName.Class")
> ### * forName.Class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Class$forName
> ### Title: Gets a Class object by a name of a class
> ### Aliases: Class$forName forName.Class Class.forName forName,Class-method
> ### Keywords: internal methods programming
> 
> ### ** Examples
> 
>   print(Class$forName("Exception"))
Exception extends simpleError, error, condition, try-error, Object {
  public as.character(...)
  public getCall(which=1, ...)
  public getCalls(...)
  public static getLastException(...)
  public getMessage(...)
  public getStackTrace(cleanup=getOption("R.oo::Exception/getStackTrace/args/cleanup", TRUE), ...)
  public getWhen(...)
  public printStackTrace(...)
  public throw(...)
  public abort(..., call.=TRUE, domain=NULL)
  public attach(private=FALSE, pos=2, ...)
  public attachLocally(private=FALSE, fields=NULL, excludeFields=NULL, overwrite=TRUE, envir=parent.frame(), ...)
  public clearCache(recursive=TRUE, gc=FALSE, ...)
  public detach(...)
  public equals(other, ...)
  public finalize(...)
  public getFields(private=FALSE, ...)
  public getInstantiationTime(...)
  public hasField(field, ...)
  public hashCode(...)
  public static load(file, path=NULL, ...)
  public save(file=NULL, path=NULL, compress=TRUE, ..., safe=TRUE)
}
> 
> 
> 
> cleanEx()
> nameEx("getAuthor.Package")
> ### * getAuthor.Package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getAuthor.Package
> ### Title: Gets the Author of this package
> ### Aliases: getAuthor.Package Package.getAuthor getAuthor,Package-method
> ### Keywords: internal methods
> 
> ### ** Examples
> 
>   pkg <- Package("R.oo")
>   print(getAuthor(pkg))
[1] "Henrik Bengtsson"
> 
> 
> 
> cleanEx()
> nameEx("getBundle.Package")
> ### * getBundle.Package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getBundle.Package
> ### Title: Gets the Bundle that this package might belong to
> ### Aliases: getBundle.Package Package.getBundle getBundle,Package-method
> ### Keywords: internal methods
> 
> ### ** Examples
> 
> 
> cleanEx()
> nameEx("getBundlePackages.Package")
> ### * getBundlePackages.Package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getBundlePackages.Package
> ### Title: Gets the names of the other packages that is in the same bundle
> ###   as this package
> ### Aliases: getBundlePackages.Package Package.getBundlePackages
> ###   getBundlePackages,Package-method
> ### Keywords: internal methods
> 
> ### ** Examples
> 
> 
> cleanEx()
> nameEx("getCalls.Exception")
> ### * getCalls.Exception
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getCalls.Exception
> ### Title: Gets the active calls saved when the exception was created
> ### Aliases: getCalls.Exception Exception.getCalls
> ###   getCalls,Exception-method Exception.getCall getCall.Exception
> ###   getCall,Exception-method
> ### Keywords: programming methods error internal methods
> 
> ### ** Examples
> ## Not run: For a complete example see help(Exception).
> 
> 
> cleanEx()
> nameEx("getClasses.Package")
> ### * getClasses.Package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getClasses.Package
> ### Title: Gets all classes of a package
> ### Aliases: getClasses.Package Package.getClasses
> ###   getClasses,Package-method
> ### Keywords: internal methods
> 
> ### ** Examples
> 
>   pkg <- Package("R.oo")
>   print(getClasses(pkg))
 [1] "BasicObject"            "Class"                  "Exception"             
 [4] "Interface"              "InternalErrorException" "Object"                
 [7] "Package"                "RccViolationException"  "Rdoc"                  
[10] "RdocException"         
> 
> 
> 
> cleanEx()
> nameEx("getContribUrl.Package")
> ### * getContribUrl.Package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getContribUrl.Package
> ### Title: Gets the URL(s) from where this package can be installed
> ### Aliases: getContribUrl.Package Package.getContribUrl
> ###   getContribUrl,Package-method
> ### Keywords: internal methods
> 
> ### ** Examples
> 
>   pkg <- Package("R.oo")
>   print(getContribUrl(pkg))
[1] "https://github.com/HenrikBengtsson/R.oo"
> 
> 
> 
> cleanEx()
> nameEx("getDate.Package")
> ### * getDate.Package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getDate.Package
> ### Title: Gets the date when package was build
> ### Aliases: getDate.Package Package.getDate getDate,Package-method
> ### Keywords: internal methods
> 
> ### ** Examples
> 
>   pkg <- Package("base")
>   print(isLoaded(pkg))       # TRUE
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("getDescription.Package")
> ### * getDescription.Package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getDescription.Package
> ### Title: Gets the description of the package
> ### Aliases: getDescription.Package Package.getDescription
> ###   getDescription,Package-method
> ### Keywords: internal methods
> 
> ### ** Examples
> 
>   pkg <- Package("base")
>   print(getDescription(pkg))
[1] "Base R functions."
> 
> 
> 
> cleanEx()
> nameEx("getDetails.Class")
> ### * getDetails.Class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getDetails.Class
> ### Title: Lists the fields and methods of a class
> ### Aliases: getDetails.Class Class.getDetails getDetails,Class-method
> ### Keywords: internal methods programming
> 
> ### ** Examples
> 
>   getDetails(Exception)
> 
> 
> 
> cleanEx()
> nameEx("getDevelUrl.Package")
> ### * getDevelUrl.Package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getDevelUrl.Package
> ### Title: Gets the URL(s) from where the developers version of this
> ###   package can be installed
> ### Aliases: getDevelUrl.Package Package.getDevelUrl
> ###   getDevelUrl,Package-method
> ### Keywords: internal methods
> 
> ### ** Examples
> 
>   pkg <- Package("R.oo")
>   print(getDevelUrl(pkg))
[1] NA
> 
> 
> 
> cleanEx()
> nameEx("getDocPath.Package")
> ### * getDocPath.Package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getDocPath.Package
> ### Title: Gets the path to the accompanying documentation (doc/) directory
> ###   of this package
> ### Aliases: getDocPath.Package Package.getDocPath
> ###   getDocPath,Package-method
> ### Keywords: internal methods
> 
> ### ** Examples
> 
>   print(list.files(getDocPath(R.oo)))   # explicit call, or
[1] "Bengtsson.pdf"
>   print(list.files(R.oo$docPath))       # as a virtual field
[1] "Bengtsson.pdf"
> 
> 
> 
> cleanEx()
> nameEx("getEnvironment.Object")
> ### * getEnvironment.Object
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getEnvironment.Object
> ### Title: Gets the environment of this object
> ### Aliases: getEnvironment.Object Object.getEnvironment
> ###   getEnvironment,Object-method
> ### Keywords: internal methods programming
> 
> ### ** Examples
> 
>   ll(R.oo)
                                    member data.class dimension objectSize
1                           [[.BasicObject   function      NULL       7064
2                                 [[.Class   function      NULL       7056
3                                [[.Object   function      NULL      10912
4                         [[<-.BasicObject   function      NULL       6616
5                               [[<-.Class   function      NULL       6368
6                              [[<-.Object   function      NULL      10488
7                            $.BasicObject   function      NULL     159200
8                                  $.Class   function      NULL       5624
9                                 $.Object   function      NULL       9528
10                         $<-.BasicObject   function      NULL     138472
11                               $<-.Class   function      NULL      82848
12                              $<-.Object   function      NULL     246344
13                                   abort   function      NULL       1240
14                         abort.condition   function      NULL      35664
15                           abort.default   function      NULL      68896
16                            argsToString   function      NULL       1248
17                      argsToString.Class   function      NULL      96576
18                       argsToString.Rdoc   function      NULL      77200
19                as.character.BasicObject   function      NULL       9392
20                      as.character.Class   function      NULL     105480
21                  as.character.Exception   function      NULL      12672
22                  as.character.Interface   function      NULL      19400
23                     as.character.Object   function      NULL      16504
24                    as.character.Package   function      NULL     113792
25      as.character.RccViolationException   function      NULL      15512
26              as.character.RdocException   function      NULL      15496
27                                   ASCII  character       256      16432
28                               ASCII.BEL  character         1        112
29                                ASCII.BS  character         1        112
30                                ASCII.CR  character         1        112
31                               ASCII.DC1  character         1        112
32                               ASCII.DC3  character         1        112
33                               ASCII.ESC  character         1        112
34                                ASCII.FF  character         1        112
35                                ASCII.HT  character         1        112
36                                ASCII.LF  character         1        112
37                                ASCII.SI  character         1        112
38                                ASCII.SO  character         1        112
39                                  attach   function      NULL       1072
40                      attach.BasicObject   function      NULL      42144
41                          attach.default   function      NULL       3392
42                           attach.Object   function      NULL      39896
43                           attachLocally   function      NULL       1248
44                    attachLocally.Object   function      NULL      34072
45                             BasicObject      Class      NULL        384
46                       callSuperMethodS3   function      NULL       1264
47               callSuperMethodS3.default   function      NULL      53568
48                               charToInt   function      NULL       1248
49                       charToInt.default   function      NULL       4440
50                                   check   function      NULL       1240
51                              check.Rdoc   function      NULL      76536
52                                   Class      Class      NULL       1064
53                              clearCache   function      NULL       1248
54                       clearCache.Object   function      NULL      57704
55                        clearLookupCache   function      NULL       1264
56                 clearLookupCache.Object   function      NULL      12360
57                                   clone   function      NULL       1240
58                            clone.Object   function      NULL      32056
59                                 compile   function      NULL       1240
60                            compile.Rdoc   function      NULL    6404784
61                             compileRdoc   function      NULL     103976
62                           createManPath   function      NULL       1248
63                      createManPath.Rdoc   function      NULL      25416
64                              createName   function      NULL       1248
65                         createName.Rdoc   function      NULL      36464
66                             declaration   function      NULL       1248
67                        declaration.Rdoc   function      NULL     108832
68                                  detach   function      NULL       1072
69                      detach.BasicObject   function      NULL      24680
70                          detach.default   function      NULL       3392
71                           detach.Object   function      NULL      24672
72                               dimension   function      NULL       1248
73                       dimension.default   function      NULL       9144
74                                  equals   function      NULL       1240
75                      equals.BasicObject   function      NULL      10608
76                          equals.default   function      NULL       7944
77                           equals.Object   function      NULL      10600
78                        escapeRdFilename   function      NULL       1264
79                   escapeRdFilename.Rdoc   function      NULL      38312
80                               Exception      Class      NULL       1352
81                                  extend   function      NULL       1240
82                      extend.BasicObject   function      NULL      83304
83                          extend.default   function      NULL      30672
84                        extend.Interface   function      NULL       9272
85                           extend.Object   function      NULL     285432
86                                finalize   function      NULL       1248
87                         finalize.Object   function      NULL       1704
88                                 forName   function      NULL       1240
89                           forName.Class   function      NULL       4400
90                               getAuthor   function      NULL       1248
91                       getAuthor.Package   function      NULL      45672
92                               getBundle   function      NULL       1248
93                       getBundle.Package   function      NULL      32944
94                       getBundlePackages   function      NULL       1264
95               getBundlePackages.Package   function      NULL      27088
96                       getCall.Exception   function      NULL      10032
97                                getCalls   function      NULL       1248
98                      getCalls.Exception   function      NULL      13528
99                            getChangeLog   function      NULL       1248
100                   getChangeLog.Package   function      NULL      36968
101                             getClasses   function      NULL       1248
102                     getClasses.default   function      NULL      40312
103                     getClasses.Package   function      NULL      32256
104                        getClassS4Usage   function      NULL       1248
105                   getClassS4Usage.Rdoc   function      NULL      48928
106                       getConstructorS3   function      NULL       1264
107               getConstructorS3.default   function      NULL      17856
108                            getContents   function      NULL       1248
109                    getContents.Package   function      NULL      21432
110                          getContribUrl   function      NULL       1248
111                  getContribUrl.Package   function      NULL      29960
112                            getDataPath   function      NULL       1248
113                    getDataPath.Package   function      NULL       7312
114                                getDate   function      NULL       1240
115                        getDate.Package   function      NULL      17832
116                         getDescription   function      NULL       1248
117                 getDescription.Package   function      NULL      12488
118                     getDescriptionFile   function      NULL       1264
119             getDescriptionFile.Package   function      NULL       7584
120                             getDetails   function      NULL       1248
121                       getDetails.Class   function      NULL     269072
122                            getDevelUrl   function      NULL       1248
123                    getDevelUrl.Package   function      NULL      22152
124                             getDocPath   function      NULL       1248
125                     getDocPath.Package   function      NULL       7312
126                         getEnvironment   function      NULL       1248
127                  getEnvironment.Object   function      NULL       3736
128                 getEnvironment.Package   function      NULL       3920
129                         getExamplePath   function      NULL       1248
130                 getExamplePath.Package   function      NULL       7312
131                       getFieldModifier   function      NULL       1264
132                getFieldModifier.Object   function      NULL       4768
133                      getFieldModifiers   function      NULL       1264
134               getFieldModifiers.Object   function      NULL      13552
135                              getFields   function      NULL       1248
136                  getFields.BasicObject   function      NULL      16432
137                        getFields.Class   function      NULL      17160
138                    getFields.Interface   function      NULL       1600
139                       getFields.Object   function      NULL       7568
140                             getHistory   function      NULL       1248
141                     getHistory.Package   function      NULL       3608
142                           getHowToCite   function      NULL       1248
143                   getHowToCite.Package   function      NULL      26856
144                   getInstantiationTime   function      NULL       1264
145       getInstantiationTime.BasicObject   function      NULL       9064
146            getInstantiationTime.Object   function      NULL       9056
147                     getInternalAddress   function      NULL       1264
148              getInternalAddress.Object   function      NULL      66720
149                            getKeywords   function      NULL       1248
150                       getKeywords.Rdoc   function      NULL     113200
151                     getKnownSubclasses   function      NULL       1264
152               getKnownSubclasses.Class   function      NULL     152528
153 getKnownSubclasses.classRepresentation   function      NULL       3472
154                       getLastException   function      NULL       1264
155             getLastException.Exception   function      NULL       2680
156                             getLicense   function      NULL       1248
157                     getLicense.Package   function      NULL       4128
158                          getMaintainer   function      NULL       1248
159                  getMaintainer.Package   function      NULL      64960
160                             getManPath   function      NULL       1248
161                        getManPath.Rdoc   function      NULL       2672
162                             getMessage   function      NULL       1248
163                   getMessage.Exception   function      NULL       2616
164      getMessage.InternalErrorException   function      NULL      54928
165                             getMethods   function      NULL       1248
166                       getMethods.Class   function      NULL     344480
167                                getName   function      NULL       1240
168                          getName.Class   function      NULL       5744
169                    getName.environment   function      NULL      23544
170                        getName.Package   function      NULL       2608
171                          getNameFormat   function      NULL       1248
172                     getNameFormat.Rdoc   function      NULL       2672
173                                getNews   function      NULL       1240
174                        getNews.Package   function      NULL       3608
175                              getObject   function      NULL       1248
176                         getObject.Rdoc   function      NULL      48352
177                             getPackage   function      NULL       1248
178                       getPackage.Class   function      NULL      70288
179      getPackage.InternalErrorException   function      NULL       2632
180                       getPackageNameOf   function      NULL       1264
181                  getPackageNameOf.Rdoc   function      NULL      69312
182                                getPath   function      NULL       1240
183                        getPath.Package   function      NULL       6848
184                            getPosition   function      NULL       1248
185                    getPosition.Package   function      NULL      27880
186                              getRccUrl   function      NULL       1248
187        getRccUrl.RccViolationException   function      NULL       2152
188                       getRdDeclaration   function      NULL       1264
189                 getRdDeclaration.Class   function      NULL      97144
190   getRdDeclaration.classRepresentation   function      NULL      92304
191                         getRdHierarchy   function      NULL       1248
192                   getRdHierarchy.Class   function      NULL     173728
193     getRdHierarchy.classRepresentation   function      NULL     122736
194                           getRdMethods   function      NULL       1248
195                     getRdMethods.Class   function      NULL     146104
196       getRdMethods.classRepresentation   function      NULL       7952
197                             getRdTitle   function      NULL       1248
198                        getRdTitle.Rdoc   function      NULL     393184
199                              getSource   function      NULL       1248
200                getSource.RdocException   function      NULL       2616
201                          getStackTrace   function      NULL       1248
202                getStackTrace.Exception   function      NULL      69712
203                    getStackTraceString   function      NULL       1264
204          getStackTraceString.Exception   function      NULL     181448
205                      getStaticInstance   function      NULL       1264
206                getStaticInstance.Class   function      NULL      57064
207               getStaticInstance.Object   function      NULL      91624
208                        getSuperclasses   function      NULL       1248
209                  getSuperclasses.Class   function      NULL       5648
210    getSuperclasses.classRepresentation   function      NULL      10608
211                               getTitle   function      NULL       1248
212                       getTitle.Package   function      NULL       4128
213                                 getUrl   function      NULL       1240
214                         getUrl.Package   function      NULL       4128
215                               getUsage   function      NULL       1248
216                          getUsage.Rdoc   function      NULL     572584
217                             getVersion   function      NULL       1248
218                     getVersion.Package   function      NULL       2608
219                                getWhen   function      NULL       1240
220                      getWhen.Exception   function      NULL       2616
221                               hasField   function      NULL       1248
222                   hasField.BasicObject   function      NULL       8472
223                        hasField.Object   function      NULL       8464
224                               hashCode   function      NULL       1248
225                   hashCode.BasicObject   function      NULL       3928
226                       hashCode.default   function      NULL      87408
227                        hashCode.Object   function      NULL       4128
228                              hierarchy   function      NULL       1248
229                         hierarchy.Rdoc   function      NULL     185376
230                              Interface      Class      NULL        384
231                 InternalErrorException      Class      NULL        384
232                              intToChar   function      NULL       1248
233                      intToChar.default   function      NULL       5136
234                             isAbstract   function      NULL       1248
235                       isAbstract.Class   function      NULL      25904
236                         isBeingCreated   function      NULL       1248
237                   isBeingCreated.Class   function      NULL      36008
238                           isDeprecated   function      NULL       1248
239                     isDeprecated.Class   function      NULL       4928
240                              isKeyword   function      NULL       1248
241                         isKeyword.Rdoc   function      NULL       6416
242                               isLoaded   function      NULL       1248
243                       isLoaded.Package   function      NULL       5776
244                            isOlderThan   function      NULL       1248
245                    isOlderThan.Package   function      NULL       8824
246                              isPrivate   function      NULL       1248
247                        isPrivate.Class   function      NULL       4904
248                            isProtected   function      NULL       1248
249                      isProtected.Class   function      NULL       4928
250                               isPublic   function      NULL       1248
251                         isPublic.Class   function      NULL       7208
252                            isReferable   function      NULL       1248
253                isReferable.BasicObject   function      NULL       1880
254                     isReferable.Object   function      NULL       1872
255                               isStatic   function      NULL       1248
256                         isStatic.Class   function      NULL      25864
257                              isVisible   function      NULL       1248
258                         isVisible.Rdoc   function      NULL      47736
259                                     ll   function      NULL       1240
260                             ll.default   function      NULL     305464
261                              ll.Object   function      NULL       8704
262                             ll.Package   function      NULL      13568
263                                   load   function      NULL       1072
264                           load.default   function      NULL       5464
265                            load.Object   function      NULL      69648
266                           load.Package   function      NULL       7520
267                   methodsInheritedFrom   function      NULL       1264
268              methodsInheritedFrom.Rdoc   function      NULL      83632
269                           names.Object   function      NULL       8832
270                            newInstance   function      NULL       1248
271                newInstance.BasicObject   function      NULL       9440
272                      newInstance.Class   function      NULL       2312
273                     newInstance.Object   function      NULL       9432
274                              novirtual   function      NULL       1248
275                       novirtual.Object   function      NULL       7920
276                                 Object      Class      NULL        672
277                             objectSize   function      NULL       1248
278                 objectSize.BasicObject   function      NULL       3200
279                     objectSize.default   function      NULL       8432
280                 objectSize.environment   function      NULL      58960
281                      objectSize.Object   function      NULL      25624
282                                Package      Class      NULL       1064
283                      print.BasicObject   function      NULL       3720
284                            print.Class   function      NULL       4968
285                        print.Exception   function      NULL       8920
286                        print.Interface   function      NULL       4896
287                           print.Object   function      NULL       9000
288                        printStackTrace   function      NULL       1248
289              printStackTrace.Exception   function      NULL       4976
290                                   R.oo    Package         1       1912
291                  RccViolationException      Class      NULL        384
292                                   Rdoc      Class      NULL        384
293                          RdocException      Class      NULL        384
294                                   save   function      NULL       1072
295                           save.default   function      NULL       5464
296                            save.Object   function      NULL     106864
297                       setConstructorS3   function      NULL       1264
298               setConstructorS3.default   function      NULL     112728
299                             setManPath   function      NULL       1248
300                        setManPath.Rdoc   function      NULL      25752
301                          setNameFormat   function      NULL       1248
302                     setNameFormat.Rdoc   function      NULL      15328
303                          showChangeLog   function      NULL       1248
304                  showChangeLog.Package   function      NULL      39256
305                           showContents   function      NULL       1248
306                   showContents.Package   function      NULL      25032
307                    showDescriptionFile   function      NULL       1264
308            showDescriptionFile.Package   function      NULL      25024
309                            showHistory   function      NULL       1248
310                    showHistory.Package   function      NULL       3608
311                          showHowToCite   function      NULL       1248
312                  showHowToCite.Package   function      NULL      24688
313                               showNews   function      NULL       1248
314                       showNews.Package   function      NULL       3608
315                         startupMessage   function      NULL       1248
316                 startupMessage.Package   function      NULL      25984
317                             staticCode   function      NULL       1248
318                      staticCode.Object   function      NULL       1704
319                                  throw   function      NULL       1240
320                          throw.default   function      NULL       3408
321                            throw.error   function      NULL       4704
322                        throw.Exception   function      NULL      19640
323                                   trim   function      NULL       1240
324                           trim.default   function      NULL      10096
325                            typeOfClass   function      NULL       1248
326                    typeOfClass.default   function      NULL      34960
327                                 unload   function      NULL       1240
328                         unload.Package   function      NULL      15512
329                                   uses   function      NULL       1240
330                         uses.character   function      NULL       9944
331                         uses.Interface   function      NULL      61696
>   ll(envir=getEnvironment(R.oo))
                                    member data.class dimension objectSize
1                           [[.BasicObject   function      NULL       7064
2                                 [[.Class   function      NULL       7056
3                                [[.Object   function      NULL      10912
4                         [[<-.BasicObject   function      NULL       6616
5                               [[<-.Class   function      NULL       6368
6                              [[<-.Object   function      NULL      10488
7                            $.BasicObject   function      NULL     159200
8                                  $.Class   function      NULL       5624
9                                 $.Object   function      NULL       9528
10                         $<-.BasicObject   function      NULL     138472
11                               $<-.Class   function      NULL      82848
12                              $<-.Object   function      NULL     246344
13                                   abort   function      NULL       1240
14                         abort.condition   function      NULL      35664
15                           abort.default   function      NULL      68896
16                            argsToString   function      NULL       1248
17                      argsToString.Class   function      NULL      96576
18                       argsToString.Rdoc   function      NULL      77200
19                as.character.BasicObject   function      NULL       9392
20                      as.character.Class   function      NULL     105480
21                  as.character.Exception   function      NULL      12672
22                  as.character.Interface   function      NULL      19400
23                     as.character.Object   function      NULL      16504
24                    as.character.Package   function      NULL     113792
25      as.character.RccViolationException   function      NULL      15512
26              as.character.RdocException   function      NULL      15496
27                                   ASCII  character       256      16432
28                               ASCII.BEL  character         1        112
29                                ASCII.BS  character         1        112
30                                ASCII.CR  character         1        112
31                               ASCII.DC1  character         1        112
32                               ASCII.DC3  character         1        112
33                               ASCII.ESC  character         1        112
34                                ASCII.FF  character         1        112
35                                ASCII.HT  character         1        112
36                                ASCII.LF  character         1        112
37                                ASCII.SI  character         1        112
38                                ASCII.SO  character         1        112
39                                  attach   function      NULL       1072
40                      attach.BasicObject   function      NULL      42144
41                          attach.default   function      NULL       3392
42                           attach.Object   function      NULL      39896
43                           attachLocally   function      NULL       1248
44                    attachLocally.Object   function      NULL      34072
45                             BasicObject      Class      NULL        384
46                       callSuperMethodS3   function      NULL       1264
47               callSuperMethodS3.default   function      NULL      53568
48                               charToInt   function      NULL       1248
49                       charToInt.default   function      NULL       4440
50                                   check   function      NULL       1240
51                              check.Rdoc   function      NULL      76536
52                                   Class      Class      NULL       1064
53                              clearCache   function      NULL       1248
54                       clearCache.Object   function      NULL      57704
55                        clearLookupCache   function      NULL       1264
56                 clearLookupCache.Object   function      NULL      12360
57                                   clone   function      NULL       1240
58                            clone.Object   function      NULL      32056
59                                 compile   function      NULL       1240
60                            compile.Rdoc   function      NULL    6404784
61                             compileRdoc   function      NULL     103976
62                           createManPath   function      NULL       1248
63                      createManPath.Rdoc   function      NULL      25416
64                              createName   function      NULL       1248
65                         createName.Rdoc   function      NULL      36464
66                             declaration   function      NULL       1248
67                        declaration.Rdoc   function      NULL     108832
68                                  detach   function      NULL       1072
69                      detach.BasicObject   function      NULL      24680
70                          detach.default   function      NULL       3392
71                           detach.Object   function      NULL      24672
72                               dimension   function      NULL       1248
73                       dimension.default   function      NULL       9144
74                                  equals   function      NULL       1240
75                      equals.BasicObject   function      NULL      10608
76                          equals.default   function      NULL       7944
77                           equals.Object   function      NULL      10600
78                        escapeRdFilename   function      NULL       1264
79                   escapeRdFilename.Rdoc   function      NULL      38312
80                               Exception      Class      NULL       1352
81                                  extend   function      NULL       1240
82                      extend.BasicObject   function      NULL      83304
83                          extend.default   function      NULL      30672
84                        extend.Interface   function      NULL       9272
85                           extend.Object   function      NULL     285432
86                                finalize   function      NULL       1248
87                         finalize.Object   function      NULL       1704
88                                 forName   function      NULL       1240
89                           forName.Class   function      NULL       4400
90                               getAuthor   function      NULL       1248
91                       getAuthor.Package   function      NULL      45672
92                               getBundle   function      NULL       1248
93                       getBundle.Package   function      NULL      32944
94                       getBundlePackages   function      NULL       1264
95               getBundlePackages.Package   function      NULL      27088
96                       getCall.Exception   function      NULL      10032
97                                getCalls   function      NULL       1248
98                      getCalls.Exception   function      NULL      13528
99                            getChangeLog   function      NULL       1248
100                   getChangeLog.Package   function      NULL      36968
101                             getClasses   function      NULL       1248
102                     getClasses.default   function      NULL      40312
103                     getClasses.Package   function      NULL      32256
104                        getClassS4Usage   function      NULL       1248
105                   getClassS4Usage.Rdoc   function      NULL      48928
106                       getConstructorS3   function      NULL       1264
107               getConstructorS3.default   function      NULL      17856
108                            getContents   function      NULL       1248
109                    getContents.Package   function      NULL      21432
110                          getContribUrl   function      NULL       1248
111                  getContribUrl.Package   function      NULL      29960
112                            getDataPath   function      NULL       1248
113                    getDataPath.Package   function      NULL       7312
114                                getDate   function      NULL       1240
115                        getDate.Package   function      NULL      17832
116                         getDescription   function      NULL       1248
117                 getDescription.Package   function      NULL      12488
118                     getDescriptionFile   function      NULL       1264
119             getDescriptionFile.Package   function      NULL       7584
120                             getDetails   function      NULL       1248
121                       getDetails.Class   function      NULL     269072
122                            getDevelUrl   function      NULL       1248
123                    getDevelUrl.Package   function      NULL      22152
124                             getDocPath   function      NULL       1248
125                     getDocPath.Package   function      NULL       7312
126                         getEnvironment   function      NULL       1248
127                  getEnvironment.Object   function      NULL       3736
128                 getEnvironment.Package   function      NULL       3920
129                         getExamplePath   function      NULL       1248
130                 getExamplePath.Package   function      NULL       7312
131                       getFieldModifier   function      NULL       1264
132                getFieldModifier.Object   function      NULL       4768
133                      getFieldModifiers   function      NULL       1264
134               getFieldModifiers.Object   function      NULL      13552
135                              getFields   function      NULL       1248
136                  getFields.BasicObject   function      NULL      16432
137                        getFields.Class   function      NULL      17160
138                    getFields.Interface   function      NULL       1600
139                       getFields.Object   function      NULL       7568
140                             getHistory   function      NULL       1248
141                     getHistory.Package   function      NULL       3608
142                           getHowToCite   function      NULL       1248
143                   getHowToCite.Package   function      NULL      26856
144                   getInstantiationTime   function      NULL       1264
145       getInstantiationTime.BasicObject   function      NULL       9064
146            getInstantiationTime.Object   function      NULL       9056
147                     getInternalAddress   function      NULL       1264
148              getInternalAddress.Object   function      NULL      66720
149                            getKeywords   function      NULL       1248
150                       getKeywords.Rdoc   function      NULL     113200
151                     getKnownSubclasses   function      NULL       1264
152               getKnownSubclasses.Class   function      NULL     152528
153 getKnownSubclasses.classRepresentation   function      NULL       3472
154                       getLastException   function      NULL       1264
155             getLastException.Exception   function      NULL       2680
156                             getLicense   function      NULL       1248
157                     getLicense.Package   function      NULL       4128
158                          getMaintainer   function      NULL       1248
159                  getMaintainer.Package   function      NULL      64960
160                             getManPath   function      NULL       1248
161                        getManPath.Rdoc   function      NULL       2672
162                             getMessage   function      NULL       1248
163                   getMessage.Exception   function      NULL       2616
164      getMessage.InternalErrorException   function      NULL      54928
165                             getMethods   function      NULL       1248
166                       getMethods.Class   function      NULL     344480
167                                getName   function      NULL       1240
168                          getName.Class   function      NULL       5744
169                    getName.environment   function      NULL      23544
170                        getName.Package   function      NULL       2608
171                          getNameFormat   function      NULL       1248
172                     getNameFormat.Rdoc   function      NULL       2672
173                                getNews   function      NULL       1240
174                        getNews.Package   function      NULL       3608
175                              getObject   function      NULL       1248
176                         getObject.Rdoc   function      NULL      48352
177                             getPackage   function      NULL       1248
178                       getPackage.Class   function      NULL      70288
179      getPackage.InternalErrorException   function      NULL       2632
180                       getPackageNameOf   function      NULL       1264
181                  getPackageNameOf.Rdoc   function      NULL      69312
182                                getPath   function      NULL       1240
183                        getPath.Package   function      NULL       6848
184                            getPosition   function      NULL       1248
185                    getPosition.Package   function      NULL      27880
186                              getRccUrl   function      NULL       1248
187        getRccUrl.RccViolationException   function      NULL       2152
188                       getRdDeclaration   function      NULL       1264
189                 getRdDeclaration.Class   function      NULL      97144
190   getRdDeclaration.classRepresentation   function      NULL      92304
191                         getRdHierarchy   function      NULL       1248
192                   getRdHierarchy.Class   function      NULL     173728
193     getRdHierarchy.classRepresentation   function      NULL     122736
194                           getRdMethods   function      NULL       1248
195                     getRdMethods.Class   function      NULL     146104
196       getRdMethods.classRepresentation   function      NULL       7952
197                             getRdTitle   function      NULL       1248
198                        getRdTitle.Rdoc   function      NULL     393184
199                              getSource   function      NULL       1248
200                getSource.RdocException   function      NULL       2616
201                          getStackTrace   function      NULL       1248
202                getStackTrace.Exception   function      NULL      69712
203                    getStackTraceString   function      NULL       1264
204          getStackTraceString.Exception   function      NULL     181448
205                      getStaticInstance   function      NULL       1264
206                getStaticInstance.Class   function      NULL      57064
207               getStaticInstance.Object   function      NULL      91624
208                        getSuperclasses   function      NULL       1248
209                  getSuperclasses.Class   function      NULL       5648
210    getSuperclasses.classRepresentation   function      NULL      10608
211                               getTitle   function      NULL       1248
212                       getTitle.Package   function      NULL       4128
213                                 getUrl   function      NULL       1240
214                         getUrl.Package   function      NULL       4128
215                               getUsage   function      NULL       1248
216                          getUsage.Rdoc   function      NULL     572584
217                             getVersion   function      NULL       1248
218                     getVersion.Package   function      NULL       2608
219                                getWhen   function      NULL       1240
220                      getWhen.Exception   function      NULL       2616
221                               hasField   function      NULL       1248
222                   hasField.BasicObject   function      NULL       8472
223                        hasField.Object   function      NULL       8464
224                               hashCode   function      NULL       1248
225                   hashCode.BasicObject   function      NULL       3928
226                       hashCode.default   function      NULL      87408
227                        hashCode.Object   function      NULL       4128
228                              hierarchy   function      NULL       1248
229                         hierarchy.Rdoc   function      NULL     185376
230                              Interface      Class      NULL        384
231                 InternalErrorException      Class      NULL        384
232                              intToChar   function      NULL       1248
233                      intToChar.default   function      NULL       5136
234                             isAbstract   function      NULL       1248
235                       isAbstract.Class   function      NULL      25904
236                         isBeingCreated   function      NULL       1248
237                   isBeingCreated.Class   function      NULL      36008
238                           isDeprecated   function      NULL       1248
239                     isDeprecated.Class   function      NULL       4928
240                              isKeyword   function      NULL       1248
241                         isKeyword.Rdoc   function      NULL       6416
242                               isLoaded   function      NULL       1248
243                       isLoaded.Package   function      NULL       5776
244                            isOlderThan   function      NULL       1248
245                    isOlderThan.Package   function      NULL       8824
246                              isPrivate   function      NULL       1248
247                        isPrivate.Class   function      NULL       4904
248                            isProtected   function      NULL       1248
249                      isProtected.Class   function      NULL       4928
250                               isPublic   function      NULL       1248
251                         isPublic.Class   function      NULL       7208
252                            isReferable   function      NULL       1248
253                isReferable.BasicObject   function      NULL       1880
254                     isReferable.Object   function      NULL       1872
255                               isStatic   function      NULL       1248
256                         isStatic.Class   function      NULL      25864
257                              isVisible   function      NULL       1248
258                         isVisible.Rdoc   function      NULL      47736
259                                     ll   function      NULL       1240
260                             ll.default   function      NULL     305464
261                              ll.Object   function      NULL       8704
262                             ll.Package   function      NULL      13568
263                                   load   function      NULL       1072
264                           load.default   function      NULL       5464
265                            load.Object   function      NULL      69648
266                           load.Package   function      NULL       7520
267                   methodsInheritedFrom   function      NULL       1264
268              methodsInheritedFrom.Rdoc   function      NULL      83632
269                           names.Object   function      NULL       8832
270                            newInstance   function      NULL       1248
271                newInstance.BasicObject   function      NULL       9440
272                      newInstance.Class   function      NULL       2312
273                     newInstance.Object   function      NULL       9432
274                              novirtual   function      NULL       1248
275                       novirtual.Object   function      NULL       7920
276                                 Object      Class      NULL        672
277                             objectSize   function      NULL       1248
278                 objectSize.BasicObject   function      NULL       3200
279                     objectSize.default   function      NULL       8432
280                 objectSize.environment   function      NULL      58960
281                      objectSize.Object   function      NULL      25624
282                                Package      Class      NULL       1064
283                      print.BasicObject   function      NULL       3720
284                            print.Class   function      NULL       4968
285                        print.Exception   function      NULL       8920
286                        print.Interface   function      NULL       4896
287                           print.Object   function      NULL       9000
288                        printStackTrace   function      NULL       1248
289              printStackTrace.Exception   function      NULL       4976
290                                   R.oo    Package         1       1912
291                  RccViolationException      Class      NULL        384
292                                   Rdoc      Class      NULL        384
293                          RdocException      Class      NULL        384
294                                   save   function      NULL       1072
295                           save.default   function      NULL       5464
296                            save.Object   function      NULL     106864
297                       setConstructorS3   function      NULL       1264
298               setConstructorS3.default   function      NULL     112728
299                             setManPath   function      NULL       1248
300                        setManPath.Rdoc   function      NULL      25752
301                          setNameFormat   function      NULL       1248
302                     setNameFormat.Rdoc   function      NULL      15328
303                          showChangeLog   function      NULL       1248
304                  showChangeLog.Package   function      NULL      39256
305                           showContents   function      NULL       1248
306                   showContents.Package   function      NULL      25032
307                    showDescriptionFile   function      NULL       1264
308            showDescriptionFile.Package   function      NULL      25024
309                            showHistory   function      NULL       1248
310                    showHistory.Package   function      NULL       3608
311                          showHowToCite   function      NULL       1248
312                  showHowToCite.Package   function      NULL      24688
313                               showNews   function      NULL       1248
314                       showNews.Package   function      NULL       3608
315                         startupMessage   function      NULL       1248
316                 startupMessage.Package   function      NULL      25984
317                             staticCode   function      NULL       1248
318                      staticCode.Object   function      NULL       1704
319                                  throw   function      NULL       1240
320                          throw.default   function      NULL       3408
321                            throw.error   function      NULL       4704
322                        throw.Exception   function      NULL      19640
323                                   trim   function      NULL       1240
324                           trim.default   function      NULL      10096
325                            typeOfClass   function      NULL       1248
326                    typeOfClass.default   function      NULL      34960
327                                 unload   function      NULL       1240
328                         unload.Package   function      NULL      15512
329                                   uses   function      NULL       1240
330                         uses.character   function      NULL       9944
331                         uses.Interface   function      NULL      61696
> 
> 
> 
> cleanEx()
> nameEx("getFields.Class")
> ### * getFields.Class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getFields.Class
> ### Title: Returns the field names of a class
> ### Aliases: getFields.Class Class.getFields getFields,Class-method
> ### Keywords: internal methods programming
> 
> ### ** Examples
> 
>   print(getFields(Exception))
character(0)
> 
> 
> 
> cleanEx()
> nameEx("getFields.Object")
> ### * getFields.Object
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getFields.Object
> ### Title: Returns the field names of an Object
> ### Aliases: getFields.Object Object.getFields getFields,Object-method
> ###   Object.names names.Object names,Object-method
> ### Keywords: programming methods internal methods
> 
> ### ** Examples
> 
>   obj <- Object()
>   obj$x <- 1:100
>   obj$y <- 100:1
>   getFields(obj)
[1] "x" "y"
> 
>   ## Not run: 
> ##D   gives:
> ##D 
> ##D   [1] "x" "y"
> ##D   
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getInstantiationTime.Object")
> ### * getInstantiationTime.Object
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getInstantiationTime.Object
> ### Title: Gets the time when the object was instantiated
> ### Aliases: getInstantiationTime.Object Object.getInstantiationTime
> ###   getInstantiationTime,Object-method
> ### Keywords: programming methods internal methods
> 
> ### ** Examples
> 
>   oopts <- options("R.oo::Object/instantiationTime"=TRUE)
>   obj <- Object()
>   print(getInstantiationTime(obj))
NULL
>   options(oopts)
> 
> 
> 
> cleanEx()
> nameEx("getInternalAddress.Object")
> ### * getInternalAddress.Object
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getInternalAddress.Object
> ### Title: Gets the memory location where the Object resides
> ### Aliases: getInternalAddress.Object Object.getInternalAddress
> ###   getInternalAddress,Object-method
> ### Keywords: programming methods internal methods
> 
> ### ** Examples
> 
>   obj <- Object()
>   getInternalAddress(obj, format="numeric")    # 179742632
[1] 9.479433e+13
>   getInternalAddress(obj, format="hexstring")  # "0x000000000ab6a7a8"
[1] "0x5637067a3cc8"
> 
> 
> 
> cleanEx()
> nameEx("getKnownSubclasses.Class")
> ### * getKnownSubclasses.Class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getKnownSubclasses.Class
> ### Title: Gets all subclasses that are currently loaded
> ### Aliases: getKnownSubclasses.Class Class.getKnownSubclasses
> ###   getKnownSubclasses,Class-method
> ### Keywords: internal methods programming
> 
> ### ** Examples
> 
>   ## Not run: 
> ##D   # Due to a bug in R CMD check (R v1.7.1) the MicroarrayData$read() call
> ##D   # below will call getKnownSubclasses(), which will generate
> ##D   #   "Error in exists(objectName, mode = "function") :
> ##D   #	   [2003-07-07 23:32:41] Exception: F used instead of FALSE"
> ##D   # Note that the example still work, just not in R CMD check
> ##D 
> ##D   print(getKnownSubclasses(Exception))
> ##D   
> ## End(Not run)
>   ## Not run: 
> ##D   returns
> ##D   [1] "Exception" "try-error" "Object"
> ##D   
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getLastException.Exception")
> ### * getLastException.Exception
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Exception$getLastException
> ### Title: Static method to get the last Exception thrown
> ### Aliases: Exception$getLastException getLastException.Exception
> ###   Exception.getLastException getLastException,Exception-method
> ### Keywords: programming methods error internal methods
> 
> ### ** Examples
> ## Not run: For a complete example see help(Exception).
> 
> 
> cleanEx()
> nameEx("getLicense.Package")
> ### * getLicense.Package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getLicense.Package
> ### Title: Gets the License of this package
> ### Aliases: getLicense.Package Package.getLicense
> ###   getLicense,Package-method
> ### Keywords: internal methods
> 
> ### ** Examples
> 
>   pkg <- Package("R.oo")
>   print(getLicense(pkg))
[1] "LGPL (>= 2.1)"
> 
> 
> 
> cleanEx()
> nameEx("getMaintainer.Package")
> ### * getMaintainer.Package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getMaintainer.Package
> ### Title: Gets the Maintainer of this package
> ### Aliases: getMaintainer.Package Package.getMaintainer
> ###   getMaintainer,Package-method
> ### Keywords: internal methods
> 
> ### ** Examples
> 
>   pkg <- Package("R.oo")
>   print(getMaintainer(pkg))
[1] "Henrik Bengtsson"
> 
> 
> 
> cleanEx()
> nameEx("getMessage.Exception")
> ### * getMessage.Exception
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getMessage.Exception
> ### Title: Gets the message of the Exception
> ### Aliases: getMessage.Exception Exception.getMessage
> ###   getMessage,Exception-method
> ### Keywords: programming methods error internal methods
> 
> ### ** Examples
> ## Not run: For a complete example see help(Exception).
> 
> 
> cleanEx()
> nameEx("getMethods.Class")
> ### * getMethods.Class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getMethods.Class
> ### Title: Returns the method names of class and its super classes
> ### Aliases: getMethods.Class Class.getMethods getMethods,Class-method
> ### Keywords: internal methods programming
> 
> ### ** Examples
> 
>   names <- getMethods(Exception)
>   print(names)
$Exception
                as.character                      getCall 
    "as.character.Exception"          "getCall.Exception" 
                    getCalls             getLastException 
        "getCalls.Exception" "getLastException.Exception" 
                  getMessage                getStackTrace 
      "getMessage.Exception"    "getStackTrace.Exception" 
                     getWhen                        print 
         "getWhen.Exception"            "print.Exception" 
             printStackTrace                        throw 
 "printStackTrace.Exception"            "throw.Exception" 

$condition
                       abort                conditionCall 
           "abort.condition"    "conditionCall.condition" 
            conditionMessage 
"conditionMessage.condition" 

$Object
                           [[                          [[<- 
                  "[[.Object"                 "[[<-.Object" 
                            $                           $<- 
                   "$.Object"                  "$<-.Object" 
                       attach                 attachLocally 
              "attach.Object"        "attachLocally.Object" 
                   clearCache              clearLookupCache 
          "clearCache.Object"     "clearLookupCache.Object" 
                        clone                        detach 
               "clone.Object"               "detach.Object" 
                       equals                        extend 
              "equals.Object"               "extend.Object" 
                     finalize                getEnvironment 
            "finalize.Object"       "getEnvironment.Object" 
             getFieldModifier             getFieldModifiers 
    "getFieldModifier.Object"    "getFieldModifiers.Object" 
                    getFields          getInstantiationTime 
           "getFields.Object" "getInstantiationTime.Object" 
            getStaticInstance                      hasField 
   "getStaticInstance.Object"             "hasField.Object" 
                     hashCode                            ll 
            "hashCode.Object"                   "ll.Object" 
                         load                         names 
                "load.Object"                "names.Object" 
                   objectSize                          save 
          "objectSize.Object"                 "save.Object" 

> 
> 
> 
> cleanEx()
> nameEx("getName.Class")
> ### * getName.Class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getName.Class
> ### Title: Gets the name of the class
> ### Aliases: getName.Class Class.getName getName,Class-method
> ### Keywords: internal methods programming
> 
> ### ** Examples
> 
>   print(getName(Object))   # "Object"
[1] "Object"
>   print(getName(Class))    # "Class"
[1] "Class"
> 
> 
> 
> cleanEx()
> nameEx("getName.environment")
> ### * getName.environment
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getName.environment
> ### Title: Gets the name of an environment
> ### Aliases: getName.environment
> ### Keywords: programming methods
> 
> ### ** Examples
> 
>   name <- getName(globalenv())
>   print(name)
[1] "R_GlobalEnv"
>   stopifnot(identical(name, "R_GlobalEnv"))
> 
>   getName(new.env())
[1] "0x563705ea6fc0"
> 
> 
> 
> cleanEx()
> nameEx("getPackage.Class")
> ### * getPackage.Class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getPackage.Class
> ### Title: Gets the package to which the class belongs
> ### Aliases: getPackage.Class Class.getPackage getPackage,Class-method
> ### Keywords: internal methods programming
> 
> ### ** Examples
> 
>   print(getPackage(Object))
[1] "R.oo"
> 
> 
> 
> cleanEx()
> nameEx("getPosition.Package")
> ### * getPosition.Package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getPosition.Package
> ### Title: Gets the search path position of the package
> ### Aliases: getPosition.Package Package.getPosition
> ###   getPosition,Package-method
> ### Keywords: internal methods
> 
> ### ** Examples
> 
>   pkg <- Package("base")
>   print(getPosition(pkg))
[1] 12
> 
> 
> 
> cleanEx()
> nameEx("getRccUrl.RccViolationException")
> ### * getRccUrl.RccViolationException
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: RccViolationException$getRccUrl
> ### Title: Static method to get a URL where the RCC can be found
> ### Aliases: RccViolationException$getRccUrl
> ###   getRccUrl.RccViolationException RccViolationException.getRccUrl
> ###   getRccUrl,RccViolationException-method
> ### Keywords: programming methods error internal methods
> 
> ### ** Examples
> ## Not run: For a complete example see help(RccViolationException).
> 
> 
> cleanEx()
> nameEx("getStackTrace.Exception")
> ### * getStackTrace.Exception
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getStackTrace.Exception
> ### Title: Gets the stack trace saved when the exception was created
> ### Aliases: getStackTrace.Exception Exception.getStackTrace
> ###   getStackTrace,Exception-method
> ### Keywords: programming methods error internal methods
> 
> ### ** Examples
> ## Not run: For a complete example see help(Exception).
> 
> 
> cleanEx()
> nameEx("getStaticInstance.Class")
> ### * getStaticInstance.Class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getStaticInstance.Class
> ### Title: Gets the static instance of this class
> ### Aliases: getStaticInstance.Class Class.getStaticInstance
> ###   getStaticInstance,Class-method
> ### Keywords: internal methods programming
> 
> ### ** Examples
> 
>   obj <- getStaticInstance(Object)
> 
> 
> 
> cleanEx()
> nameEx("getStaticInstance.Object")
> ### * getStaticInstance.Object
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getStaticInstance.Object
> ### Title: Gets the static instance of this objects class
> ### Aliases: getStaticInstance.Object Object.getStaticInstance
> ###   getStaticInstance,Object-method
> ### Keywords: programming methods internal methods
> 
> ### ** Examples
> 
>   ex <- Exception("Oops!")
>   obj <- getStaticInstance(ex)
> 
> 
> 
> cleanEx()
> nameEx("getSuperclasses.Class")
> ### * getSuperclasses.Class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getSuperclasses.Class
> ### Title: Gets the super classes of this class
> ### Aliases: getSuperclasses.Class Class.getSuperclasses
> ###   getSuperclasses,Class-method
> ### Keywords: internal methods programming
> 
> ### ** Examples
> 
>   print(getSuperclasses(RccViolationException))
[1] "Exception"   "simpleError" "error"       "condition"   "try-error"  
[6] "Object"     
>   ## Not run: 
> ##D   returns
> ##D   [1] "Exception" "try-error" "Object"
> ##D   
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getTitle.Package")
> ### * getTitle.Package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getTitle.Package
> ### Title: Gets the Title of this package
> ### Aliases: getTitle.Package Package.getTitle getTitle,Package-method
> ### Keywords: internal methods
> 
> ### ** Examples
> 
>   pkg <- Package("R.oo")
>   print(getTitle(pkg))
[1] "R Object-Oriented Programming with or without References"
> 
> 
> 
> cleanEx()
> nameEx("getUrl.Package")
> ### * getUrl.Package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getUrl.Package
> ### Title: Gets the URL of this package
> ### Aliases: getUrl.Package Package.getUrl getUrl,Package-method
> ### Keywords: internal methods
> 
> ### ** Examples
> 
>   pkg <- Package("R.oo")
>   print(getUrl(pkg))
[1] "https://github.com/HenrikBengtsson/R.oo"
> 
> 
> 
> cleanEx()
> nameEx("getWhen.Exception")
> ### * getWhen.Exception
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getWhen.Exception
> ### Title: Gets the time when the Exception was created
> ### Aliases: getWhen.Exception Exception.getWhen getWhen,Exception-method
> ### Keywords: programming methods error internal methods
> 
> ### ** Examples
> ## Not run: For a complete example see help(Exception).
> 
> 
> cleanEx()
> nameEx("hasField.Object")
> ### * hasField.Object
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hasField.Object
> ### Title: Checks if a field exists or not
> ### Aliases: hasField.Object Object.hasField hasField,Object-method
> ### Keywords: programming methods internal methods
> 
> ### ** Examples
> 
>   obj <- Object()
>   obj$x <- 1:100
>   obj$y <- 100:1
>   hasField(obj, c("x", "a", "b", "y"))
[1]  TRUE FALSE FALSE  TRUE
> 
>   ## Not run: 
> ##D   gives:
> ##D 
> ##D   [1] TRUE FALSE FALSE TRUE
> ##D   
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("hashCode.Object")
> ### * hashCode.Object
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hashCode.Object
> ### Title: Gets a hash code for the Object
> ### Aliases: hashCode.Object Object.hashCode hashCode,Object-method
> ### Keywords: programming methods internal methods
> 
> ### ** Examples
> 
>   obj <- Object()
>   hashCode(obj)          # 26979608
[1] 9.479432e+13
> 
> 
> 
> cleanEx()
> nameEx("intToChar")
> ### * intToChar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: intToChar
> ### Title: Converts a vector of integers into a vector of ASCII characters
> ### Aliases: intToChar.default intToChar
> ### Keywords: character internal
> 
> ### ** Examples
> 
>   i <- charToInt(unlist(strsplit("Hello world!", split=NULL)))
>   # Gives: 72 101 108 108 111  32 119 111 114 108 100  33
>   ch <- intToChar(c(72,101,108,108,111,32,119,111,114,108,100,33))
>   # Gives: "H" "e" "l" "l" "o" " " "w" "o" "r" "l" "d" "!"
> 
> 
> 
> cleanEx()
> nameEx("isAbstract.Class")
> ### * isAbstract.Class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isAbstract.Class
> ### Title: Checks if a class is abstract or not
> ### Aliases: isAbstract.Class Class.isAbstract isAbstract,Class-method
> ### Keywords: internal methods programming
> 
> ### ** Examples
> 
>   if (isAbstract(RccViolationException))
+     throw("The class RccViolationException should NOT be abstract.")
> 
> 
> 
> cleanEx()
> nameEx("isBeingCreated.Class")
> ### * isBeingCreated.Class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isBeingCreated.Class
> ### Title: Checks if a class is currently being initiated initiated
> ### Aliases: isBeingCreated.Class Class.isBeingCreated
> ###   isBeingCreated,Class-method
> ### Keywords: internal methods programming
> 
> ### ** Examples
> 
> setConstructorS3("Car", function(brand=NULL, nbrOfWheels=0) {
+   if(!isBeingCreated(Car)) {
+     if (is.null(brand))
+       throw("A car must have a brand")
+      
+     if (nbrOfWheels <= 0)
+       throw("A car must have one or more wheels: ", nbrOfWheels)
+   }
+ 
+   extend(Object(), "Car",
+     .brand = brand,
+     .nbrOfWheels = nbrOfWheels
+   )
+ })
> 
> setMethodS3("as.character", "Car", function(this, ...) {
+   cat(class(this)[1], ":", this$.brand, " with ",
+                      this$.nbrOfWheels, " wheels.", sep="")
+ })
NULL
> 
> print(Car("Volvo", 4))
Car:Volvo with 4 wheels.NULL
> print(Car("BMW", 4))
Car:BMW with 4 wheels.NULL
> print(Car("Tyrrell P34", 6))
Car:Tyrrell P34 with 6 wheels.NULL
> print(Car("T-Rex", 3))
Car:T-Rex with 3 wheels.NULL
> 
> 
> 
> cleanEx()
> nameEx("isLoaded.Package")
> ### * isLoaded.Package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isLoaded.Package
> ### Title: Checks if the package is installed on the search path or not
> ### Aliases: isLoaded.Package Package.isLoaded isLoaded,Package-method
> ### Keywords: internal methods
> 
> ### ** Examples
> 
>   pkg <- Package("base")
>   print(isLoaded(pkg))       # TRUE
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("isPrivate.Class")
> ### * isPrivate.Class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isPrivate.Class
> ### Title: Checks if a class is defined private or not
> ### Aliases: isPrivate.Class Class.isPrivate isPrivate,Class-method
> ### Keywords: internal methods programming
> 
> ### ** Examples
> 
>   if (isPrivate(RccViolationException))
+     throw("The class RccViolationException should NOT be private.")
> 
> 
> 
> cleanEx()
> nameEx("isProtected.Class")
> ### * isProtected.Class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isProtected.Class
> ### Title: Checks if a class is defined protected or not
> ### Aliases: isProtected.Class Class.isProtected isProtected,Class-method
> ### Keywords: internal methods programming
> 
> ### ** Examples
> 
>   if (isProtected(RccViolationException))
+     throw("The class RccViolationException should NOT be protected.")
> 
> 
> 
> cleanEx()
> nameEx("isPublic.Class")
> ### * isPublic.Class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isPublic.Class
> ### Title: Checks if a class is defined public or not
> ### Aliases: isPublic.Class Class.isPublic isPublic,Class-method
> ### Keywords: internal methods programming
> 
> ### ** Examples
> 
>   if (!isPublic(RccViolationException))
+     throw("The class RccViolationException should be public.")
> 
> 
> 
> cleanEx()
> nameEx("isStatic.Class")
> ### * isStatic.Class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isStatic.Class
> ### Title: Checks if a class is static or not
> ### Aliases: isStatic.Class Class.isStatic isStatic,Class-method
> ### Keywords: internal methods programming
> 
> ### ** Examples
> 
>   if (!isStatic(RccViolationException))
+     throw("RccViolationException should be static because Exception is.")
> 
> 
> 
> cleanEx()
> nameEx("ll.Object")
> ### * ll.Object
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ll.Object
> ### Title: Generates a list of informative properties of all members of an
> ###   Object
> ### Aliases: ll.Object Object.ll ll,Object-method
> ### Keywords: programming methods internal methods
> 
> ### ** Examples
> 
>   obj <- Object()
>   obj$x <- 1:100
>   obj$y <- 100:1
>   ll(obj)
  member data.class dimension objectSize
1      x    numeric       100        448
2      y    numeric       100        448
> 
>   ## Not run: 
> ##D   gives:
> ##D 
> ##D     member data.class dimension objectSize
> ##D   1      x    numeric       100        424
> ##D   2      y    numeric       100        424
> ##D   
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("ll.Package")
> ### * ll.Package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ll.Package
> ### Title: Generates a list of informative properties of all members of the
> ###   package
> ### Aliases: ll.Package Package.ll ll,Package-method
> ### Keywords: internal methods
> 
> ### ** Examples
> 
>   ## Not run: ll(R.oo)
> 
> 
> 
> cleanEx()
> nameEx("ll")
> ### * ll
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ll
> ### Title: Generates a list of informative properties of all members of an
> ###   environment
> ### Aliases: ll.default ll
> ### Keywords: utilities
> 
> ### ** Examples
> 
>   ## Not run: 
> ##D    To list all objects in .GlobalEnv:
> ##D    > ll()
> ##D    		     member data.class dimension objectSize
> ##D    1                *tmp*     Person         1         428
> ##D    2  as.character.Person   function      NULL        1208
> ##D    3              country  character         1          44
> ##D    4        equals.Person   function      NULL        2324
> ##D    5             filename  character         1          84
> ##D    6               getAge   function      NULL         372
> ##D    7        getAge.Person   function      NULL         612
> ##D    8       getName.Person   function      NULL         628
> ##D    9      hashCode.Person   function      NULL        1196
> ##D    10        last.warning       list         1         192
> ##D    11                 obj     Person         1         428
> ##D    12              Person      Class      NULL        2292
> ##D    13              setAge   function      NULL         372
> ##D    14       setAge.Person   function      NULL        2088
> ##D    15             setName   function      NULL         372
> ##D    16      setName.Person   function      NULL         760
> ##D    17   staticCode.Person   function      NULL        2372
> ##D 
> ##D    To list all functions in the methods package:
> ##D    ll(mode="function", envir="methods")
> ##D 
> ##D    To list all numeric and character object in the base package:
> ##D    ll(mode=c("numeric", "character"), envir="base")
> ##D 
> ##D    To list all objects in the base package greater than 40kb:
> ##D    subset(ll(envir="base"), objectSize > 40000)
> ##D   
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("load.Object")
> ### * load.Object
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Object$load
> ### Title: Static method to load an Object from a file or a connection
> ### Aliases: Object$load load.Object Object.load load,Object-method
> ### Keywords: programming methods IO internal methods
> 
> ### ** Examples
> ## Not run: For a complete example see help(Object).
> 
> 
> cleanEx()
> nameEx("load.Package")
> ### * load.Package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: load.Package
> ### Title: Loads a package
> ### Aliases: load.Package Package.load load,Package-method
> ### Keywords: internal methods
> 
> ### ** Examples
> 
>   pkg <- Package("base")
>   print(load(pkg))
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("newInstance.Class")
> ### * newInstance.Class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: newInstance.Class
> ### Title: Creates a new instance of this class
> ### Aliases: newInstance.Class Class.newInstance newInstance,Class-method
> ### Keywords: internal methods programming
> 
> ### ** Examples
> 
>   obj <- newInstance(Object, NA)
> 
>   # equivalent to
> 
>   obj <- Object(NA)
> 
> 
> 
> cleanEx()
> nameEx("objectSize.Object")
> ### * objectSize.Object
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: objectSize.Object
> ### Title: Gets the size of the Object in bytes
> ### Aliases: objectSize.Object Object.objectSize objectSize,Object-method
> ### Keywords: programming methods internal methods
> 
> ### ** Examples
> 
>   obj <- Object()
>   obj$x <- 1:100
>   obj$y <- 100:1
>   objectSize(obj)   # 856
952 bytes
> 
> 
> 
> cleanEx()
> nameEx("print.Class")
> ### * print.Class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.Class
> ### Title: Prints detailed information about the class and its fields and
> ###   methods
> ### Aliases: print.Class Class.print print,Class-method
> ### Keywords: internal methods programming
> 
> ### ** Examples
> 
>   print(Object)
Object
  public attach(private=FALSE, pos=2, ...)
  public attachLocally(private=FALSE, fields=NULL, excludeFields=NULL, overwrite=TRUE, envir=parent.frame(), ...)
  public clearCache(recursive=TRUE, gc=FALSE, ...)
  public detach(...)
  public equals(other, ...)
  public finalize(...)
  public getFields(private=FALSE, ...)
  public getInstantiationTime(...)
  public hasField(field, ...)
  public hashCode(...)
  public static load(file, path=NULL, ...)
  public save(file=NULL, path=NULL, compress=TRUE, ..., safe=TRUE)
}
> 
> 
> 
> cleanEx()
> nameEx("print.Exception")
> ### * print.Exception
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.Exception
> ### Title: Prints the Exception
> ### Aliases: print.Exception Exception.print print,Exception-method
> ### Keywords: programming methods error internal methods
> 
> ### ** Examples
> ## Not run: For a complete example see help(Exception).
> 
> 
> cleanEx()
> nameEx("print.Object")
> ### * print.Object
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.Object
> ### Title: Prints an Object
> ### Aliases: print.Object Object.print print,Object-method
> ### Keywords: programming methods internal methods
> 
> ### ** Examples
> ## Not run: For a complete example see help(Object).
> 
> 
> cleanEx()
> nameEx("printStackTrace.Exception")
> ### * printStackTrace.Exception
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: printStackTrace.Exception
> ### Title: Prints the stack trace saved when the exception was created
> ### Aliases: printStackTrace.Exception Exception.printStackTrace
> ###   printStackTrace,Exception-method
> ### Keywords: programming methods error internal methods
> 
> ### ** Examples
> ## Not run: For a complete example see help(Exception).
> 
> 
> cleanEx()
> nameEx("save.Object")
> ### * save.Object
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: save.Object
> ### Title: Saves an Object to a file or a connection
> ### Aliases: save.Object Object.save save,Object-method
> ### Keywords: programming methods IO internal methods
> 
> ### ** Examples
> ## Not run: For a complete example see help(Object).
> 
> 
> cleanEx()
> nameEx("setConstructorS3")
> ### * setConstructorS3
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setConstructorS3
> ### Title: Defines a class in S3/UseMethod style
> ### Aliases: setConstructorS3.default setConstructorS3
> ### Keywords: programming methods
> 
> ### ** Examples
> ## Not run: For a complete example see help(Object).
> 
> 
> cleanEx()
> nameEx("staticCode.Object")
> ### * staticCode.Object
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: staticCode.Object
> ### Title: Method that will be call each time a new instance of a class is
> ###   created
> ### Aliases: staticCode.Object Object.staticCode staticCode,Object-method
> ### Keywords: programming methods internal methods
> 
> ### ** Examples
> ## Not run: For a complete example see help(Object).
> 
> 
> cleanEx()
> nameEx("throw.Exception")
> ### * throw.Exception
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: throw.Exception
> ### Title: Throws an Exception that can be caught
> ### Aliases: throw.Exception Exception.throw throw,Exception-method
> ### Keywords: programming methods error internal methods
> 
> ### ** Examples
> ## Not run: For a complete example see help(Exception).
> 
> 
> cleanEx()
> nameEx("throw")
> ### * throw
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: throw
> ### Title: Throws an Exception
> ### Aliases: throw.default throw
> ### Keywords: error
> 
> ### ** Examples
> 
>   rbern <- function(n=1, prob=1/2) {
+     if (prob < 0 || prob > 1)
+       throw("Argument 'prob' is out of range: ", prob)
+     rbinom(n=n, size=1, prob=prob)
+   }
> 
>   rbern(10, 0.4)
 [1] 0 0 0 1 0 1 1 1 1 0
>   # [1] 0 1 0 0 0 1 0 0 1 0
>   tryCatch(rbern(10, 10*0.4),
+     error=function(ex) {}
+   )
NULL
> 
> 
> 
> cleanEx()
> nameEx("unload.Package")
> ### * unload.Package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: unload.Package
> ### Title: Unloads a package
> ### Aliases: unload.Package Package.unload unload,Package-method
> ### Keywords: internal methods
> 
> ### ** Examples
> ## Not run: 
> ##D pkg <- Package("boot")
> ##D load(pkg)
> ##D print(isLoaded(pkg))
> ##D unload(pkg)
> ##D print(isLoaded(pkg))
> ##D 
> ## End(Not run)
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.447 0.034 0.481 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
