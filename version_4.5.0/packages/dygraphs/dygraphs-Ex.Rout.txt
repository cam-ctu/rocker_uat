
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "dygraphs"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('dygraphs')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Plotters")
> ### * Plotters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dyCandlestick
> ### Title: Employ a dygraph plotter on a series, a group of series, or the
> ###   whole dygraph
> ### Aliases: dyCandlestick Plotters dyBarChart dyStackedBarChart
> ###   dyMultiColumn dyBarSeries dyStemSeries dyShadow dyFilledLine
> ###   dyErrorFill dyMultiColumnGroup dyCandlestickGroup dyStackedBarGroup
> ###   dyStackedLineGroup dyStackedRibbonGroup
> 
> ### ** Examples
> 
> ## The following two examples will results in the same dygraph:
> 
> dygraph(mdeaths) %>% 
+   dyBarChart()
>  
> lungDeaths <- cbind(mdeaths, fdeaths)
> dygraph(lungDeaths) %>%
+   dyMultiColumn()
>   
> 
> ## Per-series plotters:
> 
> lungDeaths <- cbind(mdeaths, fdeaths)
> dygraph(lungDeaths) %>%
+   dyBarSeries('fdeaths')
> 
> lungDeaths <- cbind(mdeaths, fdeaths)
> dygraph(lungDeaths) %>%
+   dyStemSeries('fdeaths')
>   
> lungDeaths <- cbind(mdeaths, fdeaths)
> dygraph(lungDeaths) %>%
+   dyShadow('fdeaths')
> 
> lungDeaths <- cbind(mdeaths, fdeaths)
> dygraph(lungDeaths) %>%
+   dyFilledLine('fdeaths')
> 
> ## A bunch of different plotters together:
> 
> lungDeaths <- cbind(fdeaths, mdeaths, ldeaths, foo = fdeaths/2, bar = fdeaths/3)
> dygraph(lungDeaths) %>%
+   dyRangeSelector() %>%
+   dyBarSeries('bar') %>% 
+   dyStemSeries('mdeaths') %>% 
+   dyShadow('foo') %>% 
+   dyFilledLine('fdeaths')
> 
> ## Group-based plotters:
>   
> 
> ## Candlestick plotters:
>   
> library(xts)
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

> data(sample_matrix)
> library(dygraphs)
> dygraph(sample_matrix) %>%
+   dyCandlestick()
>   
> sample<-data.frame(sample_matrix)
> sample_2<-sample*2
> names(sample_2)<-c('O', 'H', 'L', 'C')
> sample<-cbind(sample, sample_2)
> dygraph(sample) %>% 
+   dyOptions(stackedGraph = TRUE) %>% 
+   dyCandlestickGroup(c('Open', 'High', 'Low', 'Close')) %>% 
+   dyCandlestickGroup(c('O', 'H', 'L', 'C'))
Warning in dyGroup(dygraph = list(x = list(attrs = list(labels = c("day",  :
  dyGroup is incompatible with stackedGraph... stackedGraph now FALSE
> 
> ## Stacked Bar and Ribbon Graphs:  
> 
> dygraph(lungDeaths) %>% 
+   dySeries('mdeaths', axis = 'y2') %>%
+   dyAxis('y', valueRange = c(-100, 1000)) %>% 
+   dyStackedBarGroup(c('ldeaths', 'fdeaths'))
>   
> lungDeaths <- cbind(ldeaths, fdeaths, mdeaths, 
+                     additive = rep.int(200, length(ldeaths)),
+                     line = rep.int(3000, length(ldeaths)))
> dygraph(lungDeaths) %>% 
+   dySeries('line', strokePattern = 'dashed') %>% 
+   dySeries('ldeaths', stepPlot = TRUE) %>% 
+   dyStackedBarGroup(c('additive', 'mdeaths')) %>% 
+   dyStackedRibbonGroup(c('fdeaths', 'ldeaths'))
> 
> 
> 
> cleanEx()

detaching ‘package:xts’, ‘package:zoo’

> nameEx("dyAnnotation")
> ### * dyAnnotation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dyAnnotation
> ### Title: Annotation for dygraph chart
> ### Aliases: dyAnnotation
> 
> ### ** Examples
> 
> library(dygraphs)
>   
> dygraph(presidents, main = "Presidential Approval") %>%
+   dyAxis("y", valueRange = c(0, 100)) %>%
+   dyAnnotation("1950-7-1", text = "A", tooltip = "Korea") %>%
+   dyAnnotation("1965-1-1", text = "B", tooltip = "Vietnam")   
>   
> 
> 
> 
> cleanEx()
> nameEx("dyAxis")
> ### * dyAxis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dyAxis
> ### Title: dygraph axis
> ### Aliases: dyAxis
> 
> ### ** Examples
> 
> library(dygraphs)
> 
> dygraph(nhtemp, main = "New Haven Temperatures") %>%
+   dyAxis("y", label = "Temp (F)", valueRange = c(40, 60)) %>%
+   dyOptions(axisLineWidth = 1.5, fillGraph = TRUE, drawGrid = FALSE)
>     
> 
> 
> 
> cleanEx()
> nameEx("dyCrosshair")
> ### * dyCrosshair
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dyCrosshair
> ### Title: The dyCrosshair plugin draws a crosshair line over the point
> ###   closest to the mouse when the user hovers over the graph. It has a
> ###   "direction" option which is provided in the R wrapper function and
> ###   then forwarded to the plugin using the "options" argument to
> ###   dyPlugin.
> ### Aliases: dyCrosshair
> 
> ### ** Examples
> 
> library(dygraphs)
> dygraph(ldeaths) %>%
+   dyRangeSelector() %>%
+   dyCrosshair(direction = "vertical")
> 
> 
> 
> 
> cleanEx()
> nameEx("dyEvent")
> ### * dyEvent
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dyEvent
> ### Title: dygraph event line
> ### Aliases: dyEvent
> 
> ### ** Examples
> 
> library(dygraphs)
> 
> dygraph(presidents, main = "Presidential Approval") %>%
+   dyAxis("y", valueRange = c(0, 100)) %>%
+   dyEvent("1950-6-30", "Korea", labelLoc = "bottom") %>%
+   dyEvent("1965-2-09", "Vietnam", labelLoc = "bottom")
> dygraph(presidents, main = "Presidential Approval") %>%
+   dyAxis("y", valueRange = c(0, 100)) %>%
+   dyEvent(c("1950-6-30", "1965-2-09"), c("Korea", "Vietnam"), labelLoc = "bottom") 
>  
> 
> 
> 
> cleanEx()
> nameEx("dyGroup")
> ### * dyGroup
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dyGroup
> ### Title: dygraph series group
> ### Aliases: dyGroup
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(dygraphs)
> ##D 
> ##D lungDeaths <- cbind(ldeaths, mdeaths, fdeaths)
> ##D 
> ##D dygraph(lungDeaths, main = "Deaths from Lung Disease (UK)") %>%
> ##D   dySeries("fdeaths", stepPlot = TRUE, color = "red") %>% 
> ##D   dyGroup(c("mdeaths", "ldeaths"), drawPoints = TRUE, color = c("blue", "green"))
> ## End(Not run)
>    
> 
> 
> 
> 
> cleanEx()
> nameEx("dyHighlight")
> ### * dyHighlight
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dyHighlight
> ### Title: dygraph series mouse-over highlighting
> ### Aliases: dyHighlight
> 
> ### ** Examples
> 
> library(dygraphs)
> lungDeaths <- cbind(ldeaths, mdeaths, fdeaths)
> dygraph(lungDeaths, main = "Deaths from Lung Disease (UK)") %>%
+   dyHighlight(highlightCircleSize = 5, 
+               highlightSeriesBackgroundAlpha = 0.2,
+               hideOnMouseOut = FALSE)   
>  
> 
> 
> 
> cleanEx()
> nameEx("dyLegend")
> ### * dyLegend
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dyLegend
> ### Title: dygraph legend
> ### Aliases: dyLegend
> 
> ### ** Examples
> 
> library(dygraphs)
> 
> dygraph(nhtemp, main = "New Haven Temperatures") %>% 
+   dySeries("V1", label = "Temperature (F)") %>%
+   dyLegend(show = "always", hideOnMouseOut = FALSE)   
>     
> 
> 
> 
> cleanEx()
> nameEx("dyLimit")
> ### * dyLimit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dyLimit
> ### Title: dygraph limit line
> ### Aliases: dyLimit
> 
> ### ** Examples
> 
> library(dygraphs)
> 
> dygraph(presidents, main = "Presidential Approval") %>%
+   dyAxis("y", valueRange = c(0, 100)) %>% 
+   dyLimit(max(presidents, na.rm = TRUE), "Max",
+           strokePattern = "solid", color = "blue")
>  
> 
> 
> 
> cleanEx()
> nameEx("dyRangeSelector")
> ### * dyRangeSelector
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dyRangeSelector
> ### Title: dygraph interactive range selection and zooming
> ### Aliases: dyRangeSelector
> 
> ### ** Examples
> 
> library(dygraphs)
> 
> dygraph(nhtemp, main = "New Haven Temperatures") %>% 
+   dyRangeSelector()   
>  
> dygraph(nhtemp, main = "New Haven Temperatures") %>% 
+   dyRangeSelector(dateWindow = c("1920-01-01", "1960-01-01"))   
>     
> dygraph(nhtemp, main = "New Haven Temperatures") %>% 
+   dyRangeSelector(height = 20, strokeColor = "")     
> 
> 
> 
> 
> cleanEx()
> nameEx("dyRebase")
> ### * dyRebase
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dyRebase
> ### Title: Rebase data handler for straw broom charts with Dygraph
> ### Aliases: dyRebase
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(quantmod)
> ##D tickers <- c("AAPL", "MSFT")
> ##D getSymbols(tickers)
> ##D closePrices <- do.call(merge, lapply(tickers, function(x) Cl(get(x))))
> ##D dateWindow <- c("2008-01-01", "2009-01-01")
> ##D dygraph(closePrices, main = "Value", group = "stock") %>%
> ##D   dyRebase(value = 100) %>%
> ##D   dyRangeSelector(dateWindow = dateWindow)
> ##D dygraph(closePrices, main = "Percent", group = "stock") %>%
> ##D   dyRebase(percent = TRUE) %>%
> ##D   dyRangeSelector(dateWindow = dateWindow)
> ##D dygraph(closePrices, main = "None", group = "stock") %>%
> ##D   dyRangeSelector(dateWindow = dateWindow)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("dyRibbon")
> ### * dyRibbon
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dyRibbon
> ### Title: dyRibbon plugin adds a horizontal band of colors that runs
> ###   through the chart. It can be useful to visualize categorical
> ###   variables (http://en.wikipedia.org/wiki/Categorical_variable) that
> ###   change over time (along the x-axis).
> ### Aliases: dyRibbon
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(quantmod)
> ##D 
> ##D getSymbols("SPY", from = "2016-12-01", auto.assign=TRUE)
> ##D 
> ##D difference <- SPY[, "SPY.Open"] - SPY[, "SPY.Close"]
> ##D decreasing <- which(difference < 0)
> ##D increasing <- which(difference > 0)
> ##D 
> ##D dyData <- SPY[, "SPY.Close"]
> ##D 
> ##D ribbonData <- rep(0, nrow(dyData))
> ##D ribbonData[decreasing] <- 0.5
> ##D ribbonData[increasing] <- 1
> ##D 
> ##D dygraph(dyData) %>%
> ##D     dyRibbon(data = ribbonData, top = 0.1, bottom = 0.02)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("dyRoller")
> ### * dyRoller
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dyRoller
> ### Title: dygraph rolling average period text box
> ### Aliases: dyRoller
> 
> ### ** Examples
> 
> library(dygraphs)
> 
> dygraph(discoveries, main = "Important Discoveries") %>% 
+   dyRoller(rollPeriod = 5)
> 
> 
> 
> 
> cleanEx()
> nameEx("dySeries")
> ### * dySeries
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dySeries
> ### Title: dygraph data series
> ### Aliases: dySeries
> 
> ### ** Examples
> 
> library(dygraphs)
> 
> lungDeaths <- cbind(ldeaths, mdeaths, fdeaths)
> 
> dygraph(lungDeaths, main = "Deaths from Lung Disease (UK)") %>%
+   dySeries("mdeaths", drawPoints = TRUE, color = "blue") %>%
+   dySeries("fdeaths", stepPlot = TRUE, color = "red")   
>   
> 
> 
> 
> cleanEx()
> nameEx("dyShading")
> ### * dyShading
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dyShading
> ### Title: dygraph region shading
> ### Aliases: dyShading
> 
> ### ** Examples
> 
> library(dygraphs)
> 
> dygraph(nhtemp, main = "New Haven Temperatures") %>% 
+   dyShading(from = "1920-1-1", to = "1930-1-1") %>%
+   dyShading(from = "1940-1-1", to = "1950-1-1")
>   
> dygraph(nhtemp, main = "New Haven Temperatures") %>% 
+   dyShading(from = "48", to = "52", axis = "y") %>%
+   dyShading(from = "50", to = "50.1", axis = "y", color = "black")
>     
> 
> 
> 
> cleanEx()
> nameEx("dyUnzoom")
> ### * dyUnzoom
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dyUnzoom
> ### Title: The dyUnzoom plugin adds an "Unzoom" button to the graph when
> ###   it's displaying in a zoomed state (this is a bit more discoverable
> ###   than the default double- click gesture for unzooming).
> ### Aliases: dyUnzoom
> 
> ### ** Examples
> 
> library(dygraphs)
> dygraph(ldeaths) %>%
+   dyRangeSelector() %>%
+   dyUnzoom()
> 
> 
> 
> 
> cleanEx()
> nameEx("dygraph")
> ### * dygraph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dygraph
> ### Title: dygraph interactive plot for time series data
> ### Aliases: dygraph
> 
> ### ** Examples
> 
> library(dygraphs)
> lungDeaths <- cbind(mdeaths, fdeaths)
> dygraph(lungDeaths)
> 
> indoConc <- Indometh[Indometh$Subject == 1, c("time", "conc")]
> dygraph(indoConc)
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.736 0.132 0.868 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
