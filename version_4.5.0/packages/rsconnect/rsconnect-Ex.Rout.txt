
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "rsconnect"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('rsconnect')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("addLinter")
> ### * addLinter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: addLinter
> ### Title: Add a Linter
> ### Aliases: addLinter
> 
> ### ** Examples
> 
> addLinter("no.capitals", linter(
+ 
+   ## Identify lines containing capital letters -- either by name or by index
+   apply = function(content, ...) {
+     grep("[A-Z]", content)
+   },
+ 
+   ## Only use this linter on R files (paths ending with .r or .R)
+   takes = function(paths) {
+     grep("[rR]$", paths)
+   },
+ 
+   # Use the default message constructor
+   message = function(content, lines, ...) {
+     makeLinterMessage("Capital letters found on the following lines", content, lines)
+   },
+ 
+   # Give a suggested prescription
+   suggest = "Do not use capital letters in these documents."
+ ))
> addLinter("no.capitals", linter(
+ 
+   ## Identify lines containing capital letters -- either by name or by index
+   apply = function(content, ...) {
+     grep("[A-Z]", content)
+   },
+ 
+   ## Only use this linter on R files (paths ending with .r or .R)
+   takes = function(paths) {
+     grep("[rR]$", paths)
+   },
+ 
+   # Use the default message constructor
+   message = function(content, lines, ...) {
+     makeLinterMessage("Capital letters found on the following lines", content, lines)
+   },
+ 
+   # Give a suggested prescription
+   suggest = "Do not use capital letters in these documents."
+ ))
> 
> 
> 
> cleanEx()
> nameEx("addServer")
> ### * addServer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: addServer
> ### Title: Server management
> ### Aliases: addServer removeServer addServerCertificate
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # register a local server
> ##D addServer("http://myrsconnect/", "myserver")
> ##D 
> ##D # list servers
> ##D servers(local = TRUE)
> ##D 
> ##D # connect to an account on the server
> ##D connectUser(server = "myserver")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("appDependencies")
> ### * appDependencies
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: appDependencies
> ### Title: Detect application dependencies
> ### Aliases: appDependencies
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # dependencies for the app in the current working dir
> ##D appDependencies()
> ##D 
> ##D # dependencies for an app in another directory
> ##D appDependencies("~/projects/shiny/app1")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("applications")
> ### * applications
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: applications
> ### Title: List Deployed Applications
> ### Aliases: applications
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # list all applications for the default account
> ##D applications()
> ##D 
> ##D # list all applications for a specific account
> ##D applications("myaccount")
> ##D 
> ##D # view the list of applications in the data viewer
> ##D View(applications())
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("configureApp")
> ### * configureApp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: configureApp
> ### Title: Configure an Application
> ### Aliases: configureApp
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # set instance size for an application
> ##D configureApp("myapp", size="xlarge")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("deployApp")
> ### * deployApp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: deployApp
> ### Title: Deploy an Application
> ### Aliases: deployApp
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # deploy the application in the current working dir
> ##D deployApp()
> ##D 
> ##D # deploy an application in another directory
> ##D deployApp("~/projects/shiny/app1")
> ##D 
> ##D # deploy using an alternative application name and title
> ##D deployApp("~/projects/shiny/app1", appName = "myapp",
> ##D           appTitle = "My Application")
> ##D 
> ##D # deploy specifying an explicit account name, then
> ##D # redeploy with no arguments (will automatically use
> ##D # the previously specified account)
> ##D deployApp(account = "jsmith")
> ##D deployApp()
> ##D 
> ##D # deploy but don't launch a browser when completed
> ##D deployApp(launch.browser = FALSE)
> ##D 
> ##D # deploy a Quarto website, using the quarto package to
> ##D # find the Quarto binary
> ##D deployApp("~/projects/quarto/site1")
> ##D 
> ##D # deploy application with environment variables
> ##D # (e.g., `SECRET_PASSWORD=XYZ` is set via an ~/.Renviron file)
> ##D rsconnect::deployApp(envVars = c("SECRET_PASSWORD"))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("deployDoc")
> ### * deployDoc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: deployDoc
> ### Title: Deploy a single document
> ### Aliases: deployDoc
> 
> ### ** Examples
> 
> ## Not run: 
> ##D deployDoc("my-report.Rmd")
> ##D deployDoc("static-file.html")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("deployments")
> ### * deployments
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: deployments
> ### Title: List Application Deployments
> ### Aliases: deployments
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # Return all deployments of the ~/r/myapp directory made with the 'abc'
> ##D # account
> ##D deployments("~/r/myapp", accountFilter="abc")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("generateAppName")
> ### * generateAppName
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: generateAppName
> ### Title: Generate Application Name
> ### Aliases: generateAppName
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Generate a short name for a sample application
> ##D generateAppName("My Father's Country", "~/fathers-country", "myacct")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("linter")
> ### * linter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: linter
> ### Title: Create a Linter
> ### Aliases: linter
> 
> ### ** Examples
> 
> addLinter("no.capitals", linter(
+ 
+   ## Identify lines containing capital letters -- either by name or by index
+   apply = function(content, ...) {
+     grep("[A-Z]", content)
+   },
+ 
+   ## Only use this linter on R files (paths ending with .r or .R)
+   takes = function(paths) {
+     grep("[rR]$", paths)
+   },
+ 
+   # Use the default message constructor
+   message = function(content, lines, ...) {
+     makeLinterMessage("Capital letters found on the following lines", content, lines)
+   },
+ 
+   # Give a suggested prescription
+   suggest = "Do not use capital letters in these documents."
+ ))
> addLinter("no.capitals", linter(
+ 
+   ## Identify lines containing capital letters -- either by name or by index
+   apply = function(content, ...) {
+     grep("[A-Z]", content)
+   },
+ 
+   ## Only use this linter on R files (paths ending with .r or .R)
+   takes = function(paths) {
+     grep("[rR]$", paths)
+   },
+ 
+   # Use the default message constructor
+   message = function(content, lines, ...) {
+     makeLinterMessage("Capital letters found on the following lines", content, lines)
+   },
+ 
+   # Give a suggested prescription
+   suggest = "Do not use capital letters in these documents."
+ ))
> 
> 
> 
> cleanEx()
> nameEx("options")
> ### * options
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rsconnectOptions
> ### Title: Package Options
> ### Aliases: rsconnectOptions
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # use curl for http connections
> ##D options(rsconnect.http = "curl")
> ##D 
> ##D # trace http requests
> ##D options(rsconnect.http.trace = TRUE)
> ##D 
> ##D # print verbose output for http requests
> ##D options(rsconnect.http.verbose = TRUE)
> ##D 
> ##D # print JSON content
> ##D options(rsconnect.http.trace.json = TRUE)
> ##D 
> ##D # don't automatically launch a browser after deployment
> ##D options(rsconnect.launch.browser = FALSE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("purgeApp")
> ### * purgeApp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: purgeApp
> ### Title: Purge an Application
> ### Aliases: purgeApp
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # purge an application
> ##D purgeApp("myapp")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("restartApp")
> ### * restartApp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: restartApp
> ### Title: Restart an Application
> ### Aliases: restartApp
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # restart an application
> ##D restartApp("myapp")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("rpubsUpload")
> ### * rpubsUpload
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rpubsUpload
> ### Title: Upload a file to RPubs
> ### Aliases: rpubsUpload
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # upload a document
> ##D result <- rpubsUpload("My document title", "Document.html")
> ##D if (!is.null(result$continueUrl))
> ##D    browseURL(result$continueUrl)
> ##D else
> ##D    stop(result$error)
> ##D 
> ##D # update the same document with a new title
> ##D updateResult <- rpubsUpload("My updated title", "Document.html",
> ##D                             id = result$id)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("servers")
> ### * servers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: servers
> ### Title: Server metadata
> ### Aliases: servers serverInfo
> 
> ### ** Examples
> 
> # List all registered servers
> servers()
          name                         url          certificate
1 shinyapps.io https://api.shinyapps.io/v1 Amazon... (redacted)
2  posit.cloud  https://api.posit.cloud/v1 Amazon... (redacted)
> 
> # Get information about a server
> serverInfo("posit.cloud")
$name
[1] "posit.cloud"

$url
[1] "https://api.posit.cloud/v1"

$certificate
[1] "Amazon... (redacted)"

> 
> 
> 
> cleanEx()
> nameEx("setAccountInfo")
> ### * setAccountInfo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setAccountInfo
> ### Title: Register account on shinyapps.io or posit.cloud
> ### Aliases: setAccountInfo
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # register an account
> ##D setAccountInfo("user", "token", "secret")
> ##D 
> ##D # remove the same account
> ##D removeAccount("user")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("setProperty")
> ### * setProperty
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setProperty
> ### Title: Set Application property
> ### Aliases: setProperty
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # set instance size for an application
> ##D setProperty("application.instances.count", 1)
> ##D 
> ##D # disable application package cache
> ##D setProperty("application.package.cache", FALSE)
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("taskLog")
> ### * taskLog
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: taskLog
> ### Title: Show task log
> ### Aliases: taskLog
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # write task log to stdout
> ##D taskLog(12345)
> ##D 
> ##D # write task log to stderr
> ##D taskLog(12345, output="stderr")
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("tasks")
> ### * tasks
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tasks
> ### Title: List Tasks
> ### Aliases: tasks
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # list tasks for the default account
> ##D tasks()
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("terminateApp")
> ### * terminateApp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: terminateApp
> ### Title: Terminate an Application
> ### Aliases: terminateApp
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # terminate an application
> ##D terminateApp("myapp")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("unsetProperty")
> ### * unsetProperty
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: unsetProperty
> ### Title: Unset Application property
> ### Aliases: unsetProperty
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # unset application package cache property to revert to default
> ##D unsetProperty("application.package.cache")
> ##D 
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.166 0.01 0.176 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
