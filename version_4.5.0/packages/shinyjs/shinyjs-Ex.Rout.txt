
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "shinyjs"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('shinyjs')

Attaching package: ‘shinyjs’

The following objects are masked from ‘package:methods’:

    removeClass, show

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("classFuncs")
> ### * classFuncs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: classFuncs
> ### Title: Add/remove CSS class
> ### Aliases: classFuncs addClass addCssClass removeClass removeCssClass
> ###   toggleClass toggleCssClass
> 
> ### ** Examples
> 
> if (interactive()) {
+   library(shiny)
+ 
+   shinyApp(
+     ui = fluidPage(
+       useShinyjs(),  # Set up shinyjs
+       # Add a CSS class for red text colour
+       inlineCSS(list(.red = "background: red")),
+       actionButton("btn", "Click me"),
+       p(id = "element", "Watch what happens to me")
+     ),
+     server = function(input, output) {
+       observeEvent(input$btn, {
+         # Change the following line for more examples
+         toggleClass("element", "red")
+       })
+     }
+   )
+ }
> ## Not run: 
> ##D   # The shinyjs function call in the above app can be replaced by
> ##D   # any of the following examples to produce similar Shiny apps
> ##D   toggleClass(class = "red", id = "element")
> ##D   addClass("element", "red")
> ##D   removeClass("element", "red")
> ## End(Not run)
> 
> ## toggleClass can be given an optional `condition` argument, which
> ## determines if to add or remove the class
> if (interactive()) {
+   shinyApp(
+     ui = fluidPage(
+       useShinyjs(),
+       inlineCSS(list(.red = "background: red")),
+       checkboxInput("checkbox", "Make it red"),
+       p(id = "element", "Watch what happens to me")
+     ),
+     server = function(input, output) {
+       observe({
+         toggleClass(id = "element", class = "red",
+                     condition = input$checkbox)
+       })
+     }
+   )
+ }
> 
> 
> 
> cleanEx()
> nameEx("click")
> ### * click
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: click
> ### Title: Click on a Shiny button
> ### Aliases: click
> 
> ### ** Examples
> 
> if (interactive()) {
+   library(shiny)
+ 
+   shinyApp(
+     ui = fluidPage(
+       useShinyjs(),  # Set up shinyjs
+       "Count:", textOutput("number", inline = TRUE), br(),
+       actionButton("btn", "Click me"), br(),
+       "The button will be pressed automatically every 3 seconds"
+     ),
+     server = function(input, output) {
+       output$number <- renderText({
+         input$btn
+       })
+       observe({
+         click("btn")
+         invalidateLater(3000)
+       })
+     }
+   )
+ }
> 
> 
> 
> cleanEx()
> nameEx("delay")
> ### * delay
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: delay
> ### Title: Execute R code after a specified number of milliseconds has
> ###   elapsed
> ### Aliases: delay
> 
> ### ** Examples
> 
> if (interactive()) {
+   library(shiny)
+   shinyApp(
+     ui = fluidPage(
+       useShinyjs(),
+       p(id = "text", "This text will disappear after 3 seconds"),
+       actionButton("close", "Close the app in half a second")
+     ),
+     server = function(input, output) {
+       delay(3000, hide("text"))
+       observeEvent(input$close, {
+         delay(500, stopApp())
+       })
+     }
+   )
+ }
> 
> 
> 
> cleanEx()
> nameEx("disabled")
> ### * disabled
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: disabled
> ### Title: Initialize a Shiny input as disabled
> ### Aliases: disabled
> 
> ### ** Examples
> 
> if (interactive()) {
+   library(shiny)
+   shinyApp(
+     ui = fluidPage(
+       useShinyjs(),  # Set up shinyjs
+       actionButton("btn", "Click me"),
+       disabled(
+         textInput("element", NULL, "I was born disabled")
+       )
+     ),
+     server = function(input, output) {
+       observeEvent(input$btn, {
+         enable("element")
+       })
+     }
+   )
+ }
> 
> library(shiny)

Attaching package: ‘shiny’

The following object is masked from ‘package:shinyjs’:

    runExample

> disabled(numericInput("num", NULL, 5), dateInput("date", NULL))
[[1]]
<div class="form-group shiny-input-container shinyjs-disabled">
  <label class="control-label shiny-label-null" for="num" id="num-label"></label>
  <input id="num" type="number" class="shiny-input-number form-control" value="5"/>
</div>

[[2]]
<div class="shiny-date-input form-group shiny-input-container shinyjs-disabled" id="date">
  <label class="control-label shiny-label-null" for="date" id="date-label"></label>
  <input type="text" class="form-control" aria-labelledby="date-label" title="Date format: yyyy-mm-dd" data-date-language="en" data-date-week-start="0" data-date-format="yyyy-mm-dd" data-date-start-view="month" data-date-autoclose="true" data-date-dates-disabled="null" data-date-days-of-week-disabled="null"/>
</div>

> 
> 
> 
> cleanEx()

detaching ‘package:shiny’

> nameEx("extendShinyjs")
> ### * extendShinyjs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extendShinyjs
> ### Title: Extend shinyjs by calling your own JavaScript functions
> ### Aliases: extendShinyjs
> 
> ### ** Examples
> 
> ## Not run: 
> ##D   # Example 1:
> ##D   # Change the page background to a certain colour when a button is clicked.
> ##D 
> ##D     jsCode <- "shinyjs.pageCol = function(params){$('body').css('background', params);}"
> ##D 
> ##D     shinyApp(
> ##D       ui = fluidPage(
> ##D         useShinyjs(),
> ##D         extendShinyjs(text = jsCode, functions = c("pageCol")),
> ##D         selectInput("col", "Colour:",
> ##D                     c("white", "yellow", "red", "blue", "purple"))
> ##D       ),
> ##D       server = function(input, output) {
> ##D         observeEvent(input$col, {
> ##D           js$pageCol(input$col)
> ##D         })
> ##D       }
> ##D     )
> ##D 
> ##D   # ==============
> ##D 
> ##D   # Example 2:
> ##D   # Change the background colour of an element, using "red" as default
> ##D 
> ##D     jsCode <- '
> ##D     shinyjs.backgroundCol = function(params) {
> ##D       var defaultParams = {
> ##D         id : null,
> ##D         col : "red"
> ##D       };
> ##D       params = shinyjs.getParams(params, defaultParams);
> ##D 
> ##D       var el = $("#" + params.id);
> ##D       el.css("background-color", params.col);
> ##D     }'
> ##D 
> ##D     shinyApp(
> ##D       ui = fluidPage(
> ##D         useShinyjs(),
> ##D         extendShinyjs(text = jsCode, functions = c("backgroundCol")),
> ##D         p(id = "name", "My name is Dean"),
> ##D         p(id = "sport", "I like soccer"),
> ##D         selectInput("col", "Colour",
> ##D                     c("green", "yellow", "red", "blue", "white")),
> ##D         selectInput("selector", "Element", c("sport", "name", "button")),
> ##D         actionButton("button", "Go")
> ##D       ),
> ##D       server = function(input, output) {
> ##D         observeEvent(input$button, {
> ##D           js$backgroundCol(input$selector, input$col)
> ##D         })
> ##D       }
> ##D     )
> ##D 
> ##D   # ==============
> ##D 
> ##D   # Example 3:
> ##D   # Create an `increment` function that increments the number inside an HTML
> ##D   # tag (increment by 1 by default, with an optional parameter). Use a separate
> ##D   # file instead of providing the JS code in a string.
> ##D 
> ##D   # Create a JavaScript file "myfuncs.js" in a "www/" directory:
> ##D     shinyjs.increment = function(params) {
> ##D       var defaultParams = {
> ##D         id : null,
> ##D         num : 1
> ##D       };
> ##D       params = shinyjs.getParams(params, defaultParams);
> ##D 
> ##D       var el = $("#" + params.id);
> ##D       el.text(parseInt(el.text()) + params.num);
> ##D     }
> ##D 
> ##D   # And a shiny app that uses the custom function we just defined. Note how
> ##D   # the arguments can be either passed as named or unnamed, and how default
> ##D   # values are set if no value is given to a parameter.
> ##D 
> ##D       library(shiny)
> ##D       shinyApp(
> ##D         ui = fluidPage(
> ##D           useShinyjs(),
> ##D           extendShinyjs("myfuncs.js", functions = c("increment")),
> ##D           p(id = "number", 0),
> ##D           actionButton("add", "js$increment('number')"),
> ##D           actionButton("add5", "js$increment('number', 5)"),
> ##D           actionButton("add10", "js$increment(num = 10, id = 'number')")
> ##D         ),
> ##D         server = function(input, output) {
> ##D           observeEvent(input$add, {
> ##D             js$increment('number')
> ##D           })
> ##D           observeEvent(input$add5, {
> ##D             js$increment('number', 5)
> ##D           })
> ##D           observeEvent(input$add10, {
> ##D             js$increment(num = 10, id = 'number')
> ##D           })
> ##D         }
> ##D       )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("hidden")
> ### * hidden
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hidden
> ### Title: Initialize a Shiny tag as hidden
> ### Aliases: hidden
> 
> ### ** Examples
> 
> if (interactive()) {
+   library(shiny)
+   shinyApp(
+     ui = fluidPage(
+       useShinyjs(),  # Set up shinyjs
+       actionButton("btn", "Click me"),
+       hidden(
+         p(id = "element", "I was born invisible")
+       )
+     ),
+     server = function(input, output) {
+       observeEvent(input$btn, {
+         show("element")
+       })
+     }
+   )
+ }
> 
> library(shiny)

Attaching package: ‘shiny’

The following object is masked from ‘package:shinyjs’:

    runExample

> hidden(span(id = "a"), div(id = "b"))
[[1]]
<span id="a" class="shinyjs-hide"></span>

[[2]]
<div id="b" class="shinyjs-hide"></div>

> hidden(tagList(span(id = "a"), div(id = "b")))
[[1]]
<span id="a" class="shinyjs-hide"></span>

[[2]]
<div id="b" class="shinyjs-hide"></div>

> hidden(list(span(id = "a"), div(id = "b")))
[[1]]
<span id="a" class="shinyjs-hide"></span>

[[2]]
<div id="b" class="shinyjs-hide"></div>

> 
> 
> 
> cleanEx()

detaching ‘package:shiny’

> nameEx("html")
> ### * html
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: html
> ### Title: Change the HTML (or text) inside an element
> ### Aliases: html
> 
> ### ** Examples
> 
> if (interactive()) {
+   library(shiny)
+ 
+   shinyApp(
+     ui = fluidPage(
+       useShinyjs(),  # Set up shinyjs
+       actionButton("btn", "Click me"),
+       p(id = "element", "Watch what happens to me")
+     ),
+     server = function(input, output) {
+       observeEvent(input$btn, {
+         # Change the following line for more examples
+         html("element", paste0("The date is ", date()))
+       })
+     }
+   )
+ }
> ## Not run: 
> ##D   # The shinyjs function call in the above app can be replaced by
> ##D   # any of the following examples to produce similar Shiny apps
> ##D   html("element", "Hello!")
> ##D   html("element", " Hello!", TRUE)
> ##D   html("element", "<strong>bold</strong> that was achieved with HTML")
> ##D   local({val <- "some text"; html("element", val)})
> ##D   html(id = "element", add = TRUE, html = input$btn)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("inlineCSS")
> ### * inlineCSS
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: inlineCSS
> ### Title: Add inline CSS
> ### Aliases: inlineCSS
> 
> ### ** Examples
> 
> if (interactive()) {
+   library(shiny)
+ 
+   # Method 1 - passing a string of valid CSS
+   shinyApp(
+     ui = fluidPage(
+       inlineCSS("#big { font-size:30px; }
+                  .red { color: red; border: 1px solid black;}"),
+       p(id = "big", "This will be big"),
+       p(class = "red", "This will be red and bordered")
+     ),
+     server = function(input, output) {}
+   )
+ 
+   # Method 2 - passing a list of CSS selectors/declarations
+   # where each declaration is a full declaration block
+   shinyApp(
+     ui = fluidPage(
+       inlineCSS(list(
+         "#big" = "font-size:30px",
+         ".red" = "color: red; border: 1px solid black;"
+       )),
+       p(id = "big", "This will be big"),
+       p(class = "red", "This will be red and bordered")
+     ),
+     server = function(input, output) {}
+   )
+ 
+   # Method 3 - passing a list of CSS selectors/declarations
+   # where each declaration is a vector of declarations
+   shinyApp(
+     ui = fluidPage(
+       inlineCSS(list(
+         "#big" = "font-size:30px",
+         ".red" = c("color: red", "border: 1px solid black")
+       )),
+       p(id = "big", "This will be big"),
+       p(class = "red", "This will be red and bordered")
+     ),
+     server = function(input, output) {}
+   )
+ }
> 
> 
> 
> cleanEx()
> nameEx("messageFuncs")
> ### * messageFuncs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: messageFuncs
> ### Title: Show a message
> ### Aliases: messageFuncs alert info logjs
> 
> ### ** Examples
> 
> if (interactive()) {
+   library(shiny)
+   shinyApp(
+     ui = fluidPage(
+       useShinyjs(),  # Set up shinyjs
+       actionButton("btn", "Click me")
+     ),
+     server = function(input, output) {
+       observeEvent(input$btn, {
+         # Change the following line for more examples
+         alert(paste0("The date is ", date()))
+       })
+     }
+   )
+ }
> ## Not run: 
> ##D   # The shinyjs function call in the above app can be replaced by
> ##D   # any of the following examples to produce similar Shiny apps
> ##D   alert("Hello!")
> ##D   alert(text = R.Version())
> ##D   logjs(R.Version())
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("onevent")
> ### * onevent
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: onevent
> ### Title: Run R code when an event is triggered on an element
> ### Aliases: onevent onclick
> 
> ### ** Examples
> 
> if (interactive()) {
+   library(shiny)
+ 
+   shinyApp(
+     ui = fluidPage(
+       useShinyjs(),  # Set up shinyjs
+       p(id = "date", "Click me to see the date"),
+       p(id = "coords", "Click me to see the mouse coordinates"),
+       p(id = "disappear", "Move your mouse here to make the text below disappear"),
+       p(id = "text", "Hello")
+     ),
+     server = function(input, output) {
+       onclick("date", alert(date()))
+       onclick("coords", function(event) { alert(event) })
+       onevent("mouseenter", "disappear", hide("text"))
+       onevent("mouseleave", "disappear", show("text"))
+     }
+   )
+ }
> ## Not run: 
> ##D   # The shinyjs function call in the above app can be replaced by
> ##D   # any of the following examples to produce similar Shiny apps
> ##D   onclick("disappear", toggle("text"))
> ##D   onclick(expr = text("date", date()), id = "date")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("refresh")
> ### * refresh
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: refresh
> ### Title: Refresh the page
> ### Aliases: refresh
> 
> ### ** Examples
> 
> if (interactive()) {
+   library(shiny)
+   ui <- fluidPage(
+     useShinyjs(),
+     textInput("text", "Text", "text"),
+     actionButton("refresh", "Refresh")
+   )
+ 
+   server <- function(input, output, session) {
+     observeEvent(input$refresh, {
+       refresh()
+     })
+   }
+ 
+  shinyApp(ui, server)
+ }
> 
> 
> 
> 
> cleanEx()
> nameEx("removeEvent")
> ### * removeEvent
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: removeEvent
> ### Title: Remove an event that was added to an element
> ### Aliases: removeEvent
> 
> ### ** Examples
> 
> if (interactive()) {
+   library(shiny)
+ 
+   shinyApp(
+     ui = fluidPage(
+       useShinyjs(),  # Set up shinyjs
+       p(id = "myel", "Hover over me to see the date, the time, and a random integer"),
+       actionButton("remove_date", "Remove date hover event"),
+       actionButton("remove_all", "Remove all hover events")
+     ),
+     server = function(input, output) {
+       onevent("hover", "myel", print(format(Sys.time(), "%H:%M:%S")))
+       onevent("hover", "myel", print(sample(100, 1)), add = TRUE)
+       date_event_id <- onevent("hover", "myel", print(as.character(Sys.Date())), add = TRUE)
+ 
+       observeEvent(input$remove_all, {
+         removeEvent("hover", "myel")
+       })
+       observeEvent(input$remove_date, {
+         removeEvent(date_event_id, "myel")
+       })
+     }
+   )
+ }
> 
> 
> 
> cleanEx()
> nameEx("reset")
> ### * reset
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reset
> ### Title: Reset input elements to their original values
> ### Aliases: reset
> 
> ### ** Examples
> 
> if (interactive()) {
+   library(shiny)
+ 
+   shinyApp(
+     ui = fluidPage(
+       useShinyjs(),
+       div(
+         id = "form",
+         textInput("name", "Name", "Dean"),
+         radioButtons("gender", "Gender", c("Male", "Female")),
+         selectInput("letter", "Favourite letter", LETTERS)
+       ),
+       actionButton("resetAll", "Reset all"),
+       actionButton("resetName", "Reset name"),
+       actionButton("resetGender", "Reset Gender"),
+       actionButton("resetLetter", "Reset letter")
+     ),
+     server = function(input, output) {
+       observeEvent(input$resetName, {
+         reset("name")
+       })
+       observeEvent(input$resetGender, {
+         reset("gender")
+       })
+       observeEvent(input$resetLetter, {
+         reset("letter")
+       })
+       observeEvent(input$resetAll, {
+         reset("form")
+       })
+     }
+   )
+ }
> 
> 
> 
> cleanEx()
> nameEx("runExample")
> ### * runExample
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: runExample
> ### Title: Run shinyjs examples
> ### Aliases: runExample
> 
> ### ** Examples
> 
> ## Only run this example in interactive R sessions
> if (interactive()) {
+   # List all available example apps
+   runExample()
+ 
+   runExample("sandbox")
+   runExample("demo")
+ }
> 
> 
> 
> cleanEx()
> nameEx("runcode")
> ### * runcode
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: runcode
> ### Title: Construct to let you run arbitrary R code live in a Shiny app
> ### Aliases: runcode runcodeUI runcodeServer
> 
> ### ** Examples
> 
> if (interactive()) {
+   library(shiny)
+ 
+   shinyApp(
+     ui = fluidPage(
+       useShinyjs(),  # Set up shinyjs
+       runcodeUI(code = "shinyjs::alert('Hello!')")
+     ),
+     server = function(input, output) {
+       runcodeServer()
+     }
+   )
+ }
> 
> 
> 
> cleanEx()
> nameEx("runjs")
> ### * runjs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: runjs
> ### Title: Run JavaScript code
> ### Aliases: runjs
> 
> ### ** Examples
> 
> if (interactive()) {
+   library(shiny)
+   shinyApp(
+     ui = fluidPage(
+       useShinyjs(),  # Set up shinyjs
+       actionButton("btn", "Click me")
+     ),
+     server = function(input, output) {
+       observeEvent(input$btn, {
+         # Run JS code that simply shows a message
+         runjs("var today = new Date(); alert(today);")
+       })
+     }
+   )
+ }
> 
> 
> 
> cleanEx()
> nameEx("showLog")
> ### * showLog
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: showLog
> ### Title: Print any JavaScript console.log messages in the R console
> ### Aliases: showLog
> 
> ### ** Examples
> 
> if (interactive()) {
+   library(shiny)
+ 
+   shinyApp(
+     ui = fluidPage(
+       useShinyjs(),
+       textInput("text", "Type something")
+     ),
+     server = function(input, output) {
+       showLog()
+       logjs("App started")
+       observe({
+         logjs(paste("Length of text:", nchar(input$text)))
+       })
+     }
+   )
+ }
> 
> 
> 
> cleanEx()
> nameEx("stateFuncs")
> ### * stateFuncs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stateFuncs
> ### Title: Enable/disable an input element
> ### Aliases: stateFuncs enable disable toggleState
> 
> ### ** Examples
> 
> if (interactive()) {
+   library(shiny)
+ 
+   shinyApp(
+     ui = fluidPage(
+       useShinyjs(),  # Set up shinyjs
+       actionButton("btn", "Click me"),
+       textInput("element", "Watch what happens to me")
+     ),
+     server = function(input, output) {
+       observeEvent(input$btn, {
+         # Change the following line for more examples
+         toggleState("element")
+       })
+     }
+   )
+ }
> ## Not run: 
> ##D   # The shinyjs function call in the above app can be replaced by
> ##D   # any of the following examples to produce similar Shiny apps
> ##D   toggleState(id = "element")
> ##D   enable("element")
> ##D   disable("element")
> ##D 
> ##D   # Similarly, the "element" text input can be changed to many other
> ##D   # input tags, such as the following examples
> ##D   actionButton("element", "I'm a button")
> ##D   fileInput("element", "Choose a file")
> ##D   selectInput("element", "I'm a select box", 1:10)
> ## End(Not run)
> 
> ## toggleState can be given an optional `condition` argument, which
> ## determines if to enable or disable the input
> if (interactive()) {
+   shinyApp(
+     ui = fluidPage(
+       useShinyjs(),
+       textInput("text", "Please type at least 3 characters"),
+       actionButton("element", "Submit")
+     ),
+     server = function(input, output) {
+       observe({
+         toggleState(id = "element", condition = nchar(input$text) >= 3)
+       })
+     }
+   )
+ }
> 
> 
> 
> cleanEx()
> nameEx("useShinyjs")
> ### * useShinyjs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: useShinyjs
> ### Title: Set up a Shiny app to use shinyjs
> ### Aliases: useShinyjs
> 
> ### ** Examples
> 
> if (interactive()) {
+   library(shiny)
+ 
+   shinyApp(
+     ui = fluidPage(
+       useShinyjs(),  # Set up shinyjs
+       actionButton("btn", "Click me"),
+       textInput("element", "Watch what happens to me")
+     ),
+     server = function(input, output) {
+       observeEvent(input$btn, {
+         # Run a simply shinyjs function
+         toggle("element")
+       })
+     }
+   )
+ }
> 
> 
> 
> cleanEx()
> nameEx("visibilityFuncs")
> ### * visibilityFuncs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visibilityFuncs
> ### Title: Display/hide an element
> ### Aliases: visibilityFuncs show showElement hide hideElement toggle
> ###   toggleElement
> 
> ### ** Examples
> 
> if (interactive()) {
+   library(shiny)
+ 
+   shinyApp(
+     ui = fluidPage(
+       useShinyjs(),  # Set up shinyjs
+       actionButton("btn", "Click me"),
+       textInput("text", "Text")
+     ),
+     server = function(input, output) {
+       observeEvent(input$btn, {
+         # Change the following line for more examples
+         toggle("text")
+       })
+     }
+   )
+ }
> ## Not run: 
> ##D   # The shinyjs function call in the above app can be replaced by
> ##D   # any of the following examples to produce similar Shiny apps
> ##D   toggle(id = "text")
> ##D   delay(1000, toggle(id = "text")) # toggle in 1 second
> ##D   toggle("text", TRUE)
> ##D   toggle("text", TRUE, "fade", 2)
> ##D   toggle(id = "text", time = 1, anim = TRUE, animType = "slide")
> ##D   show("text")
> ##D   show(id = "text", anim = TRUE)
> ##D   hide("text")
> ##D   hide(id = "text", anim = TRUE)
> ## End(Not run)
> 
> ## toggle can be given an optional `condition` argument, which
> ## determines if to show or hide the element
> if (interactive()) {
+   shinyApp(
+     ui = fluidPage(
+       useShinyjs(),
+       checkboxInput("checkbox", "Show the text", TRUE),
+       p(id = "element", "Watch what happens to me")
+     ),
+     server = function(input, output) {
+       observe({
+         toggle(id = "element", condition = input$checkbox)
+       })
+     }
+   )
+ }
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.383 0.027 0.41 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
