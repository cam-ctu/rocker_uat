
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "mice"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('mice')

Attaching package: ‘mice’

The following object is masked from ‘package:stats’:

    filter

The following objects are masked from ‘package:base’:

    cbind, rbind

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("D1")
> ### * D1
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: D1
> ### Title: Compare two nested models using D1-statistic
> ### Aliases: D1
> 
> ### ** Examples
> 
> # Compare two linear models:
> imp <- mice(nhanes2, seed = 51009, print = FALSE)
> mi1 <- with(data = imp, expr = lm(bmi ~ age + hyp + chl))
> mi0 <- with(data = imp, expr = lm(bmi ~ age + hyp))
> D1(mi1, mi0)
   test statistic df1 df2 dfcom    p.value      riv
 1 ~~ 2   5.28351   1   4    20 0.08306791 0.671799
> ## Not run: 
> ##D # Compare two logistic regression models
> ##D imp <- mice(boys, maxit = 2, print = FALSE)
> ##D fit1 <- with(imp, glm(gen > levels(gen)[1] ~ hgt + hc + reg, family = binomial))
> ##D fit0 <- with(imp, glm(gen > levels(gen)[1] ~ hgt + hc, family = binomial))
> ##D D1(fit1, fit0)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("D2")
> ### * D2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: D2
> ### Title: Compare two nested models using D2-statistic
> ### Aliases: D2
> 
> ### ** Examples
> 
> # Compare two linear models:
> imp <- mice(nhanes2, seed = 51009, print = FALSE)
> mi1 <- with(data = imp, expr = lm(bmi ~ age + hyp + chl))
> mi0 <- with(data = imp, expr = lm(bmi ~ age + hyp))
> D2(mi1, mi0)
   test statistic df1      df2 dfcom    p.value      riv
 1 ~~ 2  3.649642   1 11.69791    NA 0.08089545 1.408231
> ## Not run: 
> ##D # Compare two logistic regression models
> ##D imp <- mice(boys, maxit = 2, print = FALSE)
> ##D fit1 <- with(imp, glm(gen > levels(gen)[1] ~ hgt + hc + reg, family = binomial))
> ##D fit0 <- with(imp, glm(gen > levels(gen)[1] ~ hgt + hc, family = binomial))
> ##D D2(fit1, fit0)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("D3")
> ### * D3
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: D3
> ### Title: Compare two nested models using D3-statistic
> ### Aliases: D3
> 
> ### ** Examples
> 
> # Compare two linear models:
> imp <- mice(nhanes2, seed = 51009, print = FALSE)
> mi1 <- with(data = imp, expr = lm(bmi ~ age + hyp + chl))
> mi0 <- with(data = imp, expr = lm(bmi ~ age + hyp))
> D3(mi1, mi0)
   test statistic df1      df2 dfcom  p.value      riv
 1 ~~ 2  2.917381   1 8.764849    20 0.122711 2.082143
> ## Not run: 
> ##D # Compare two logistic regression models
> ##D imp <- mice(boys, maxit = 2, print = FALSE)
> ##D fit1 <- with(imp, glm(gen > levels(gen)[1] ~ hgt + hc + reg, family = binomial))
> ##D fit0 <- with(imp, glm(gen > levels(gen)[1] ~ hgt + hc, family = binomial))
> ##D D3(fit1, fit0)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("ampute")
> ### * ampute
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ampute
> ### Title: Generate missing data for simulation purposes
> ### Aliases: ampute
> 
> ### ** Examples
> 
> # start with a complete data set
> compl_boys <- cc(boys)[1:3]
> 
> # Perform amputation with default settings
> mads_boys <- ampute(data = compl_boys)
> mads_boys$amp
        age   hgt   wgt
3279  8.859 124.8  31.0
3283  8.867 145.0    NA
3296  8.908 137.8  30.0
3321  8.999 136.3  26.9
3323  9.004 151.2  48.2
3327  9.021 141.4  29.4
3357  9.119 140.0  28.0
3388  9.201 125.8    NA
3398  9.234 139.8  35.6
3409  9.270 140.4  32.0
3416  9.303 142.2  31.6
3422  9.316 147.4  31.4
3429     NA 132.7  25.9
3442  9.407 134.4  27.0
3449     NA 146.0  36.5
3455  9.451 136.0    NA
3460  9.459 142.7  30.8
3481     NA 144.5  30.3
3484  9.514 140.3    NA
3486  9.514 138.0  31.0
3494  9.524 140.9  32.7
3525  9.582 134.0  27.5
3533  9.604 139.7  32.6
3547  9.631 139.7  28.7
3609  9.834 142.0  30.3
3651  9.990 149.0  37.3
3664 10.020 137.2  31.7
3710 10.132 134.0  26.5
3721     NA 139.3  30.6
3724 10.160 141.3    NA
3727 10.171 135.2  31.9
3805 10.398 149.8  34.7
3814 10.422 158.8    NA
3827 10.447 148.7  41.0
3834 10.477 142.6  32.5
3841 10.499 148.6  38.6
3865     NA 146.3  40.4
3873 10.568    NA  36.6
3880 10.581 141.2  33.8
3929 10.724 144.1  29.5
3975 10.888 147.0  33.8
3988 10.945 149.0  45.6
3991     NA 145.1  36.2
3994 10.967 137.4  29.6
3995 10.970 151.2  39.2
4006 11.003 134.3  29.1
4009 11.011    NA  44.2
4059 11.126 139.6  32.7
4066 11.143 135.1  25.0
4067 11.143 148.3  41.5
4070 11.156 163.0  44.5
4072     NA 144.5  49.7
4102 11.222 151.8    NA
4122 11.288    NA  43.4
4173 11.446 147.9  42.2
4174 11.446 152.8  43.1
4186 11.482 148.7  37.2
4211 11.545 153.2    NA
4238 11.605 155.2    NA
4240 11.611 151.0  33.8
4253     NA 160.6  44.4
4255 11.665 144.5  30.8
4266 11.690 148.0  35.2
4293 11.759    NA  42.8
4301 11.789 135.4    NA
4302 11.791    NA  43.5
4312 11.811 145.9    NA
4318     NA 151.0  33.0
4332 11.874 152.0  32.5
4349 11.926 156.5  44.5
4399 12.071 151.1  34.5
4465     NA 156.6  43.3
4481 12.292 145.8  39.2
4487 12.303 161.4    NA
4505 12.375 157.2  61.0
4532 12.457 161.4  52.6
4552 12.501 170.5  53.4
4561 12.520 162.1    NA
4579 12.574 163.8  51.6
4585     NA 163.3  52.6
4591 12.599 155.0    NA
4646     NA 172.0  79.5
4682 12.821 170.2  56.0
4721 12.933 169.5  54.8
4727     NA 157.0  41.2
4745 12.991 148.7  31.1
4748 12.993 155.9  42.3
4752 12.996    NA  49.1
4809 13.108 164.0  61.7
4823 13.127    NA  65.1
4824 13.127 180.0  57.8
4825 13.130 156.4  40.8
4847 13.188 168.1  53.4
4848 13.190 155.4  42.1
4887 13.275 161.2  37.0
4892     NA 165.5  41.9
4961 13.489 161.3    NA
4994 13.552 157.7  46.2
5039 13.631 179.0  54.9
5044 13.642 153.4  40.6
5048 13.656 175.4    NA
5064 13.686 168.7    NA
5085 13.749 155.5  36.5
5113 13.839 162.1  44.9
5126 13.883 176.2    NA
5130 13.891 174.6  54.2
5133 13.897    NA  61.9
5147 13.924 144.8  35.1
5159     NA 156.9  50.0
5206 14.045 170.0    NA
5219 14.069 170.6  59.2
5228     NA 172.1  50.9
5247 14.121 159.2  42.7
5288 14.209 170.9    NA
5293 14.220    NA  48.0
5327 14.297 153.2  44.3
5335     NA 171.0  56.0
5343 14.332 164.1  49.1
5367 14.412 165.5  54.2
5410 14.527 160.7    NA
5415     NA 182.4  76.0
5416 14.543 173.7  69.5
5417 14.543 176.4  51.0
5420 14.546 167.3  61.0
5478     NA 182.9  57.2
5496 14.721 169.1    NA
5509 14.762 168.6    NA
5520 14.811 173.8  61.7
5522 14.811    NA  66.5
5539 14.844 172.7    NA
5551 14.863 169.1    NA
5567 14.926 177.4  58.3
5585 14.967 174.1  88.0
5598 14.997 181.2    NA
5602     NA 188.0  91.6
5610 15.025 185.5    NA
5612 15.028 178.5    NA
5642 15.099 178.1    NA
5654 15.129 176.9  58.6
5675 15.162 176.8  54.8
5710     NA 188.0  89.0
5714 15.266 175.2  62.5
5763 15.411 173.3  54.1
5764 15.416 187.2  80.6
5789     NA 192.2  80.2
5806 15.504 172.0    NA
5823 15.542 171.0  50.0
5830 15.556 183.3  61.5
5856 15.622    NA  70.5
5857 15.630 174.3  52.6
5858 15.633 186.0  67.0
5879 15.663 172.7    NA
5880 15.668    NA  63.8
5883 15.674 176.6    NA
5947 15.838 177.0    NA
5964 15.893 168.6  56.0
5971 15.906 176.2    NA
5975 15.912 180.0  65.2
5986 15.926 167.8  62.2
6005 15.989    NA  64.8
6029 16.049 186.7  70.6
6033     NA 183.9  61.5
6036 16.065 184.4    NA
6037     NA 186.5  70.7
6064     NA 194.3 113.0
6083 16.235 185.4    NA
6085 16.246    NA  76.0
6092 16.273 177.9    NA
6117     NA 171.0  59.1
6132 16.402 173.6    NA
6138 16.427 195.5    NA
6141     NA 175.1  64.5
6166     NA 188.0  62.5
6185 16.544 178.0  65.7
6251 16.717 180.2    NA
6253     NA 192.8  88.3
6262 16.741 189.8    NA
6283     NA 184.3  77.0
6343 16.966 182.4    NA
6361     NA 179.0  68.1
6372 17.018    NA  65.5
6416 17.117    NA  69.3
6482     NA 180.3  76.8
6483 17.336 183.9    NA
6528     NA 171.4  71.7
6539 17.467    NA  55.5
6567     NA 186.5  71.2
6611     NA 176.4  72.8
6641 17.749 174.0  94.9
6647 17.757 196.2  81.0
6686 17.911 181.2  86.8
6700 17.957 172.2    NA
6756 18.121    NA  58.4
6782     NA 177.9  63.4
6789 18.220    NA  79.0
6831 18.349 193.6    NA
6858 18.453 170.5  53.5
6892     NA 193.0  71.7
6923 18.617 188.0  61.9
6963     NA 191.0  81.3
6964 18.743    NA  99.0
6977 18.773    NA  69.6
6981 18.792 174.8    NA
7001 18.850    NA  62.6
7032 18.959    NA  76.2
7066 19.060 180.8    NA
7068 19.063 175.0    NA
7073 19.077    NA  70.0
7101 19.148 186.5  71.9
7141     NA 177.1  60.1
7152     NA 178.0  78.1
7161 19.408    NA 100.1
7173     NA 191.0  87.1
7200     NA 195.0  88.9
7221     NA 182.1  75.0
7240 19.707 172.5  70.6
7247 19.739 177.0    NA
7293     NA 192.3 117.4
7297     NA 181.8  76.2
7319 20.010 170.0    NA
7328 20.030    NA  71.0
7362 20.117    NA  89.4
7396 20.281    NA  81.1
> 
> # Change default matrices as desired
> my_patterns <- mads_boys$patterns
> my_patterns[1:3, 2] <- 0
> 
> my_weights <- mads_boys$weights
> my_weights[2, 1] <- 2
> my_weights[3, 1] <- 0.5
> 
> # Rerun amputation
> my_mads_boys <- ampute(
+   data = compl_boys, patterns = my_patterns, freq =
+     c(0.3, 0.3, 0.4), weights = my_weights, type = c("RIGHT", "TAIL", "LEFT")
+ )
> my_mads_boys$amp
        age   hgt   wgt
3279  8.859    NA  31.0
3283  8.867 145.0  38.2
3296  8.908 137.8  30.0
3321  8.999 136.3  26.9
3323  9.004    NA  48.2
3327  9.021    NA  29.4
3357  9.119    NA    NA
3388  9.201 125.8  22.0
3398  9.234    NA    NA
3409     NA    NA  32.0
3416  9.303 142.2  31.6
3422  9.316    NA    NA
3429  9.368    NA    NA
3442  9.407 134.4  27.0
3449  9.426    NA    NA
3455  9.451 136.0  27.5
3460  9.459 142.7  30.8
3481  9.511 144.5  30.3
3484  9.514    NA    NA
3486  9.514 138.0  31.0
3494  9.524 140.9  32.7
3525  9.582    NA  27.5
3533  9.604    NA  32.6
3547  9.631    NA    NA
3609  9.834 142.0  30.3
3651  9.990    NA    NA
3664 10.020 137.2  31.7
3710 10.132 134.0  26.5
3721 10.154    NA    NA
3724 10.160    NA    NA
3727 10.171    NA    NA
3805 10.398 149.8  34.7
3814     NA    NA  39.8
3827     NA    NA  41.0
3834 10.477    NA    NA
3841 10.499 148.6  38.6
3865 10.554    NA  40.4
3873 10.568 151.0  36.6
3880 10.581    NA  33.8
3929 10.724    NA  29.5
3975 10.888 147.0  33.8
3988 10.945    NA  45.6
3991 10.954    NA    NA
3994 10.967    NA  29.6
3995 10.970 151.2  39.2
4006 11.003    NA  29.1
4009 11.011 148.8  44.2
4059 11.126    NA  32.7
4066 11.143    NA    NA
4067 11.143 148.3  41.5
4070 11.156    NA  44.5
4072 11.159 144.5  49.7
4102 11.222    NA    NA
4122 11.288    NA    NA
4173 11.446 147.9  42.2
4174 11.446    NA  43.1
4186     NA    NA  37.2
4211 11.545    NA  42.5
4238 11.605 155.2  36.7
4240 11.611 151.0  33.8
4253 11.655    NA  44.4
4255 11.665    NA    NA
4266 11.690    NA    NA
4293 11.759 153.2  42.8
4301 11.789    NA    NA
4302 11.791 152.8  43.5
4312 11.811 145.9  34.8
4318     NA    NA  33.0
4332 11.874    NA    NA
4349     NA    NA  44.5
4399 12.071 151.1  34.5
4465 12.265    NA    NA
4481 12.292    NA    NA
4487 12.303 161.4  44.0
4505 12.375    NA    NA
4532 12.457 161.4  52.6
4552 12.501 170.5  53.4
4561 12.520 162.1  44.1
4579 12.574    NA  51.6
4585     NA    NA  52.6
4591     NA    NA  39.0
4646 12.741 172.0  79.5
4682     NA    NA  56.0
4721 12.933    NA    NA
4727 12.944 157.0  41.2
4745 12.991 148.7  31.1
4748 12.993    NA    NA
4752     NA    NA  49.1
4809 13.108 164.0  61.7
4823     NA    NA  65.1
4824 13.127 180.0  57.8
4825     NA    NA  40.8
4847 13.188 168.1  53.4
4848 13.190    NA    NA
4887 13.275 161.2  37.0
4892 13.300 165.5  41.9
4961 13.489 161.3  41.4
4994 13.552    NA  46.2
5039     NA    NA  54.9
5044 13.642    NA    NA
5048 13.656 175.4  74.8
5064 13.686 168.7  46.1
5085 13.749 155.5  36.5
5113 13.839 162.1  44.9
5126 13.883 176.2  48.1
5130 13.891 174.6  54.2
5133 13.897 181.7  61.9
5147 13.924    NA    NA
5159 13.938 156.9  50.0
5206 14.045 170.0  54.7
5219 14.069    NA  59.2
5228 14.083    NA    NA
5247 14.121 159.2  42.7
5288 14.209 170.9  54.8
5293 14.220 165.5  48.0
5327 14.297    NA  44.3
5335 14.308 171.0  56.0
5343 14.332 164.1  49.1
5367 14.412 165.5  54.2
5410     NA    NA  52.0
5415 14.540    NA    NA
5416 14.543 173.7  69.5
5417 14.543 176.4  51.0
5420 14.546    NA  61.0
5478 14.669 182.9  57.2
5496 14.721 169.1  50.7
5509 14.762 168.6  47.6
5520 14.811 173.8  61.7
5522 14.811 179.0  66.5
5539 14.844    NA    NA
5551 14.863 169.1  66.3
5567 14.926 177.4  58.3
5585 14.967 174.1  88.0
5598     NA    NA  65.1
5602 15.003 188.0  91.6
5610 15.025    NA    NA
5612 15.028 178.5  54.1
5642 15.099 178.1  74.5
5654 15.129 176.9  58.6
5675 15.162    NA  54.8
5710 15.249 188.0  89.0
5714 15.266 175.2  62.5
5763     NA    NA  54.1
5764 15.416    NA  80.6
5789     NA    NA  80.2
5806 15.504 172.0  52.3
5823 15.542    NA  50.0
5830 15.556 183.3  61.5
5856     NA    NA  70.5
5857 15.630 174.3  52.6
5858 15.633 186.0  67.0
5879 15.663 172.7  58.6
5880     NA    NA  63.8
5883 15.674 176.6  56.9
5947 15.838    NA    NA
5964 15.893 168.6  56.0
5971 15.906    NA  57.5
5975 15.912 180.0  65.2
5986     NA    NA  62.2
6005 15.989    NA  64.8
6029     NA    NA  70.6
6033     NA    NA  61.5
6036 16.065    NA    NA
6037 16.068 186.5  70.7
6064 16.156 194.3 113.0
6083 16.235    NA  60.0
6085 16.246    NA    NA
6092 16.273 177.9  57.0
6117 16.355 171.0  59.1
6132 16.402 173.6  54.5
6138 16.427    NA    NA
6141 16.435    NA  64.5
6166     NA    NA  62.5
6185 16.544 178.0  65.7
6251     NA    NA  66.4
6253 16.720    NA  88.3
6262 16.741 189.8  70.3
6283 16.807 184.3  77.0
6343 16.966    NA    NA
6361 16.999    NA    NA
6372 17.018 183.0  65.5
6416     NA    NA  69.3
6482     NA    NA  76.8
6483 17.336    NA  66.3
6528     NA    NA  71.7
6539 17.467 173.6  55.5
6567 17.560    NA  71.2
6611     NA    NA  72.8
6641 17.749 174.0  94.9
6647 17.757 196.2  81.0
6686 17.911    NA  86.8
6700 17.957    NA    NA
6756 18.121 171.6  58.4
6782 18.209 177.9  63.4
6789 18.220 187.4  79.0
6831 18.349    NA    NA
6858 18.453    NA    NA
6892 18.551 193.0  71.7
6923 18.617 188.0  61.9
6963     NA    NA  81.3
6964 18.743 192.0  99.0
6977 18.773 189.4  69.6
6981 18.792    NA    NA
7001     NA    NA  62.6
7032     NA    NA  76.2
7066     NA    NA  93.8
7068 19.063 175.0  72.4
7073 19.077    NA    NA
7101 19.148 186.5  71.9
7141 19.310 177.1  60.1
7152 19.367 178.0  78.1
7161 19.408 192.7 100.1
7173 19.471    NA  87.1
7200 19.575    NA  88.9
7221 19.633 182.1  75.0
7240     NA    NA  70.6
7247     NA    NA  65.5
7293 19.926    NA 117.4
7297 19.934    NA  76.2
7319 20.010 170.0  68.8
7328     NA    NA  71.0
7362 20.117    NA  89.4
7396 20.281 185.1  81.1
> 
> 
> 
> cleanEx()
> nameEx("as.mids")
> ### * as.mids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.mids
> ### Title: Converts an imputed dataset (long format) into a 'mids' object
> ### Aliases: as.mids
> ### Keywords: mids
> 
> ### ** Examples
> 
> # impute the nhanes dataset
> imp <- mice(nhanes, print = FALSE)
> # extract the data in long format
> X <- complete(imp, action = "long", include = TRUE)
> # create dataset with .imp variable as numeric
> X2 <- X
> 
> # nhanes example without .id
> test1 <- as.mids(X)
> is.mids(test1)
[1] TRUE
> identical(complete(test1, action = "long", include = TRUE), X)
[1] TRUE
> 
> # nhanes example without .id where .imp is numeric
> test2 <- as.mids(X2)
> is.mids(test2)
[1] TRUE
> identical(complete(test2, action = "long", include = TRUE), X)
[1] TRUE
> 
> # nhanes example, where we explicitly specify .id as column 2
> test3 <- as.mids(X, .id = ".id")
> is.mids(test3)
[1] TRUE
> identical(complete(test3, action = "long", include = TRUE), X)
[1] TRUE
> 
> # nhanes example with .id where .imp is numeric
> test4 <- as.mids(X2, .id = 6)
> is.mids(test4)
[1] TRUE
> identical(complete(test4, action = "long", include = TRUE), X)
[1] TRUE
> 
> # example without an .id variable
> # variable .id not preserved
> X3 <- X[, -6]
> test5 <- as.mids(X3)
> is.mids(test5)
[1] TRUE
> identical(complete(test5, action = "long", include = TRUE)[, -6], X[, -6])
[1] TRUE
> 
> # where argument copies also observed data into $imp element
> where <- matrix(TRUE, nrow = nrow(nhanes), ncol = ncol(nhanes))
> colnames(where) <- colnames(nhanes)
> test11 <- as.mids(X, where = where)
> identical(complete(test11, action = "long", include = TRUE), X)
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("boys")
> ### * boys
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: boys
> ### Title: Growth of Dutch boys
> ### Aliases: boys
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> # create two imputed data sets
> imp <- mice(boys, m = 1, maxit = 2)

 iter imp variable
  1   1  hgt  wgt  bmi  hc  gen  phb  tv  reg
  2   1  hgt  wgt  bmi  hc  gen  phb  tv  reg
> z <- complete(imp, 1)
> 
> # create imputations for age <8yrs
> plot(z$age, z$gen,
+   col = mdc(1:2)[1 + is.na(boys$gen)],
+   xlab = "Age (years)", ylab = "Tanner Stage Genital"
+ )
> 
> # figure to show that the default imputation method does not impute BMI
> # consistently
> plot(z$bmi, z$wgt / (z$hgt / 100)^2,
+   col = mdc(1:2)[1 + is.na(boys$bmi)],
+   xlab = "Imputed BMI", ylab = "Calculated BMI"
+ )
> 
> # also, BMI distributions are somewhat different
> oldpar <- par(mfrow = c(1, 2))
> MASS::truehist(z$bmi[!is.na(boys$bmi)],
+   h = 1, xlim = c(10, 30), ymax = 0.25,
+   col = mdc(1), xlab = "BMI observed"
+ )
> MASS::truehist(z$bmi[is.na(boys$bmi)],
+   h = 1, xlim = c(10, 30), ymax = 0.25,
+   col = mdc(2), xlab = "BMI imputed"
+ )
> par(oldpar)
> 
> # repair the inconsistency problem by passive imputation
> meth <- imp$meth
> meth["bmi"] <- "~I(wgt/(hgt/100)^2)"
> pred <- imp$predictorMatrix
> pred["hgt", "bmi"] <- 0
> pred["wgt", "bmi"] <- 0
> imp2 <- mice(boys, m = 1, maxit = 2, meth = meth, pred = pred)

 iter imp variable
  1   1  hgt  wgt  hc  gen  phb  tv  reg  bmi
  2   1  hgt  wgt  hc  gen  phb  tv  reg  bmi
> z2 <- complete(imp2, 1)
> 
> # show that new imputations are consistent
> plot(z2$bmi, z2$wgt / (z2$hgt / 100)^2,
+   col = mdc(1:2)[1 + is.na(boys$bmi)],
+   ylab = "Calculated BMI"
+ )
> 
> # and compare distributions
> oldpar <- par(mfrow = c(1, 2))
> MASS::truehist(z2$bmi[!is.na(boys$bmi)],
+   h = 1, xlim = c(10, 30), ymax = 0.25, col = mdc(1),
+   xlab = "BMI observed"
+ )
> MASS::truehist(z2$bmi[is.na(boys$bmi)],
+   h = 1, xlim = c(10, 30), ymax = 0.25, col = mdc(2),
+   xlab = "BMI imputed"
+ )
> par(oldpar)
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("bwplot.mids")
> ### * bwplot.mids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bwplot.mids
> ### Title: Box-and-whisker plot of observed and imputed data
> ### Aliases: bwplot.mids bwplot
> ### Keywords: hplot
> 
> ### ** Examples
> 
> imp <- mice(boys, maxit = 1)

 iter imp variable
  1   1  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   2  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   3  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   4  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   5  hgt  wgt  bmi  hc  gen  phb  tv  reg
> 
> ### box-and-whisker plot per imputation of all numerical variables
> bwplot(imp)
> 
> ### tv (testicular volume), conditional on region
> bwplot(imp, tv ~ .imp | reg)
> 
> ### same data, organized in a different way
> bwplot(imp, tv ~ reg | .imp, theme = list())
> 
> 
> 
> cleanEx()
> nameEx("cbind")
> ### * cbind
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cbind
> ### Title: Combine R objects by rows and columns
> ### Aliases: cbind rbind
> ### Keywords: manip
> 
> ### ** Examples
> 
> # --- cbind ---
> # impute four variables at once (default)
> imp <- mice(nhanes, m = 1, maxit = 1, print = FALSE)
> imp$predictorMatrix
    age bmi hyp chl
age   0   1   1   1
bmi   1   0   1   1
hyp   1   1   0   1
chl   1   1   1   0
> 
> # impute two by two
> data1 <- nhanes[, c("age", "bmi")]
> data2 <- nhanes[, c("hyp", "chl")]
> imp1 <- mice(data1, m = 2, maxit = 1, print = FALSE)
> imp2 <- mice(data2, m = 2, maxit = 1, print = FALSE)
> 
> # Append two solutions
> imp12 <- cbind(imp1, imp2)
> 
> # This is a different imputation model
> imp12$predictorMatrix
    age bmi hyp chl
age   0   1   0   0
bmi   1   0   0   0
hyp   0   0   0   1
chl   0   0   1   0
> 
> # Append the other way around
> imp21 <- cbind(imp2, imp1)
> imp21$predictorMatrix
    hyp chl age bmi
hyp   0   1   0   0
chl   1   0   0   0
age   0   0   0   1
bmi   0   0   1   0
> 
> # Append 'forgotten' variable chl
> data3 <- nhanes[, 1:3]
> imp3 <- mice(data3, maxit = 1, m = 2, print = FALSE)
> imp4 <- cbind(imp3, chl = nhanes$chl)
> 
> # Of course, chl was not imputed
> head(complete(imp4))
  age  bmi hyp chl
1   1 22.0   1  NA
2   2 22.7   1 187
3   1 22.0   1 187
4   3 26.3   2  NA
5   1 20.4   1 113
6   3 35.3   1 184
> 
> # Combine mids object with data frame
> imp5 <- cbind(imp3, nhanes2)
> head(complete(imp5))
  age  bmi hyp age.1 bmi.1 hyp.1 chl
1   1 22.0   1 20-39    NA  <NA>  NA
2   2 22.7   1 40-59  22.7    no 187
3   1 22.0   1 20-39    NA    no 187
4   3 26.3   2 60-99    NA  <NA>  NA
5   1 20.4   1 20-39  20.4    no 113
6   3 35.3   1 60-99    NA  <NA> 184
> 
> # --- rbind ---
> imp1 <- mice(nhanes[1:13, ], m = 2, maxit = 1, print = FALSE)
Warning: Number of logged events: 1
> imp5 <- mice(nhanes[1:13, ], m = 2, maxit = 2, print = FALSE)
Warning: Number of logged events: 1
> mylist <- list(age = NA, bmi = NA, hyp = NA, chl = NA)
> 
> nrow(complete(rbind(imp1, imp5)))
Warning: iterations differ, so no convergence diagnostics calculated
[1] 26
> nrow(complete(rbind(imp1, mylist)))
[1] 14
> 
> nrow(complete(rbind(imp1, data.frame(mylist))))
[1] 14
> nrow(complete(rbind(imp1, complete(imp5))))
[1] 26
> 
> 
> 
> cleanEx()
> nameEx("cc")
> ### * cc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cc
> ### Title: Select complete cases
> ### Aliases: cc
> ### Keywords: univar
> 
> ### ** Examples
> 
> 
> # cc(nhanes)   # get the 13 complete cases
> # cc(nhanes$bmi) # extract complete bmi
> 
> 
> 
> cleanEx()
> nameEx("cci")
> ### * cci
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cci
> ### Title: Complete case indicator
> ### Aliases: cci
> ### Keywords: univar
> 
> ### ** Examples
> 
> cci(nhanes) # indicator for 13 complete cases
 [1] FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE
[13]  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE
[25]  TRUE
> cci(mice(nhanes, maxit = 0))
 [1] FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE
[13]  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE
[25]  TRUE
> f <- cci(nhanes[, c("bmi", "hyp")]) # complete data for bmi and hyp
> nhanes[f, ] # obtain all data from those with complete bmi and hyp
   age  bmi hyp chl
2    2 22.7   1 187
5    1 20.4   1 113
7    1 22.5   1 118
8    1 30.1   1 187
9    2 22.0   1 238
13   3 21.7   1 206
14   2 28.7   2 204
15   1 29.6   1  NA
17   3 27.2   2 284
18   2 26.3   2 199
19   1 35.3   1 218
20   3 25.5   2  NA
22   1 33.2   1 229
23   1 27.5   1 131
24   3 24.9   1  NA
25   2 27.4   1 186
> 
> 
> 
> cleanEx()
> nameEx("complete.mids")
> ### * complete.mids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: complete.mids
> ### Title: Extracts the completed data from a 'mids' object
> ### Aliases: complete.mids complete
> ### Keywords: manip
> 
> ### ** Examples
> 
> 
> # obtain first imputed data set
> sum(is.na(nhanes2))
[1] 27
> imp <- mice(nhanes2, print = FALSE, maxit = 1)
> dat <- complete(imp)
> sum(is.na(dat))
[1] 0
> 
> # obtain stacked third and fifth imputation
> dat <- complete(imp, c(3, 5))
> 
> # obtain all datasets, with additional identifiers
> head(complete(imp, "long"))
    age  bmi hyp chl .imp .id
1 20-39 30.1  no 199    1   1
2 40-59 22.7  no 187    1   2
3 20-39 30.1  no 187    1   3
4 60-99 22.5 yes 187    1   4
5 20-39 20.4  no 113    1   5
6 60-99 27.5 yes 184    1   6
> 
> # same, but now as list, mild object
> dslist <- complete(imp, "all")
> length(dslist)
[1] 5
> 
> # same, but also include the original data
> dslist <- complete(imp, "all", include = TRUE)
> length(dslist)
[1] 6
> 
> # select original + 3 + 5, store as mild
> dslist <- complete(imp, c(0, 3, 5), mild = TRUE)
> names(dslist)
[1] "0" "3" "5"
> 
> 
> 
> cleanEx()
> nameEx("construct.blocks")
> ### * construct.blocks
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: construct.blocks
> ### Title: Construct blocks from 'formulas' and 'predictorMatrix'
> ### Aliases: construct.blocks
> 
> ### ** Examples
> 
> form <- list(bmi + hyp ~ chl + age, chl ~ bmi)
> pred <- make.predictorMatrix(nhanes[, c("age", "chl")])
> construct.blocks(formulas = form, pred = pred)
$F1
[1] "bmi" "hyp"

$chl
[1] "chl"

$age
[1] "age"

> 
> 
> 
> cleanEx()
> nameEx("convergence")
> ### * convergence
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: convergence
> ### Title: Computes convergence diagnostics for a 'mids' object
> ### Aliases: convergence
> ### Keywords: none
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # obtain imputed data set
> ##D imp <- mice(nhanes2, print = FALSE)
> ##D # compute convergence diagnostics
> ##D convergence(imp)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("densityplot.mids")
> ### * densityplot.mids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: densityplot.mids
> ### Title: Density plot of observed and imputed data
> ### Aliases: densityplot.mids densityplot
> ### Keywords: hplot
> 
> ### ** Examples
> 
> imp <- mice(boys, maxit = 1)

 iter imp variable
  1   1  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   2  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   3  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   4  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   5  hgt  wgt  bmi  hc  gen  phb  tv  reg
> 
> ### density plot of head circumference per imputation
> ### blue is observed, red is imputed
> densityplot(imp, ~ hc | .imp)
> 
> ### All combined in one panel.
> densityplot(imp, ~hc)
> 
> 
> 
> cleanEx()
> nameEx("fdd")
> ### * fdd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fdd
> ### Title: SE Fireworks disaster data
> ### Aliases: fdd fdd.pred
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> 
> data <- fdd
> md.pattern(fdd)
  id trt pp sex etn age ypf1 ypf2 ypf3 ypp2 ypp3 ycf1 ycf2 ycf3 ycp2 ycp3 trtp
8  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
2  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
8  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
9  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
2  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    0
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    0
   0   0  0   0   0   0    0    0    0    0    0    0    0    0    0    0    2
  prop1 prs1 trauma ypp1 ypa1 ypb1 ypc1 yp1 prop2 prs2 ypa2 ypb2 ypc2 yp2 prop3
8     1    1      1    1    1    1    1   1     1    1    1    1    1   1     1
2     1    1      1    1    1    1    1   1     1    1    1    1    1   1     1
1     1    1      1    1    1    1    1   1     1    1    1    1    1   1     1
8     1    1      1    1    1    1    1   1     1    1    1    1    1   1     1
1     1    1      1    1    1    1    1   1     1    1    1    1    1   1     1
1     1    1      1    1    1    1    1   1     1    1    1    1    1   1     1
1     1    1      1    1    1    1    1   1     1    1    1    1    1   1     1
1     1    1      1    1    1    1    1   1     1    1    1    1    1   1     1
9     1    1      1    1    1    1    1   1     1    1    1    1    1   1     1
1     1    1      1    1    1    1    1   1     1    1    1    1    1   1     1
1     1    1      1    1    1    1    1   1     1    1    1    1    1   1     1
2     1    1      1    1    1    1    1   1     1    1    1    1    1   1     1
1     1    1      1    1    1    1    1   1     1    1    1    1    1   1     0
1     1    1      1    1    1    1    1   1     1    1    1    1    1   1     0
1     1    1      1    1    1    1    1   1     1    1    1    1    1   1     0
1     1    1      1    1    1    1    1   1     0    0    0    0    0   0     1
1     1    1      1    1    1    1    1   1     0    0    0    0    0   0     0
1     1    1      1    1    1    1    1   1     0    0    0    0    0   0     0
1     1    1      1    1    1    1    1   1     0    0    0    0    0   0     0
1     1    1      1    1    0    0    0   0     0    0    0    0    0   0     0
1     1    1      0    0    0    0    0   0     1    1    1    1    1   1     1
1     1    1      0    0    0    0    0   0     1    1    1    1    1   1     1
1     1    1      0    0    0    0    0   0     0    0    0    0    0   0     0
1     1    0      1    1    1    1    1   1     1    1    1    1    1   1     1
1     0    1      1    1    1    1    1   1     1    1    1    1    1   1     1
1     0    1      0    0    0    0    0   0     0    0    0    0    0   0     0
1     1    1      0    0    0    0    0   0     0    0    0    0    0   0     0
1     1    0      1    1    1    1    1   1     1    1    1    1    1   1     1
      2    2      5    5    6    6    6   6     8    8    8    8    8   8    10
  ypa3 ypb3 ypc3 yp3 cbcl1 cbin1 cbex1 crop1 bir1 cbcl3 cbin3 cbex3 yca1 ycb1
8    1    1    1   1     1     1     1     1    1     1     1     1    1    1
2    1    1    1   1     1     1     1     1    1     1     1     1    1    1
1    1    1    1   1     1     1     1     1    1     1     1     1    1    1
8    1    1    1   1     1     1     1     1    1     1     1     1    1    1
1    1    1    1   1     1     1     1     1    1     1     1     1    1    1
1    1    1    1   1     1     1     1     1    1     1     1     1    1    1
1    1    1    1   1     1     1     1     1    1     1     1     1    0    0
1    1    1    1   1     1     1     1     1    1     0     0     0    1    1
9    1    1    1   1     1     1     1     0    0     1     1     1    0    0
1    1    1    1   1     0     0     0     1    1     0     0     0    1    1
1    1    1    1   1     0     0     0     1    1     0     0     0    1    1
2    1    1    1   1     0     0     0     0    0     0     0     0    0    0
1    0    0    0   0     1     1     1     1    1     1     1     1    1    1
1    0    0    0   0     1     1     1     1    1     1     1     1    1    1
1    0    0    0   0     1     1     1     1    1     0     0     0    1    1
1    1    1    1   1     1     1     1     1    1     1     1     1    1    1
1    0    0    0   0     1     1     1     1    1     0     0     0    1    1
1    0    0    0   0     0     0     0     1    1     0     0     0    1    1
1    0    0    0   0     0     0     0     1    0     0     0     0    0    0
1    0    0    0   0     0     0     0     1    1     0     0     0    1    1
1    1    1    1   1     1     1     1     1    1     1     1     1    1    1
1    1    1    1   1     0     0     0     1    1     0     0     0    1    1
1    0    0    0   0     0     0     0     1    1     1     1     1    0    0
1    1    1    1   1     1     1     1     1    1     0     0     0    1    1
1    1    1    1   1     1     1     1     0    0     1     1     1    0    0
1    0    0    0   0     0     0     0     1    1     0     0     0    1    1
1    0    0    0   0     1     1     1     1    1     0     0     0    1    1
1    1    1    1   1     0     0     0     0    0     0     0     0    0    0
    10   10   10  10    11    11    11    13   14    15    15    15   16   16
  ycc1 yc1 ycp1 masc1 crop2 crop3 yca2 ycb2 ycc2 yc2 bir2 bir3 prs3 yca3 ycb3
8    1   1    1     1     1     1    1    1    1   1    1    1    1    1    1
2    1   1    1     1     1     1    1    1    1   1    1    1    1    1    1
1    1   1    1     1     1     1    1    1    1   1    1    1    1    0    0
8    1   1    1     1     1     1    1    1    1   1    1    1    0    1    1
1    1   1    1     1     1     1    1    1    1   1    1    1    0    1    1
1    1   1    1     1     0     1    1    1    1   1    1    1    0    1    1
1    0   0    0     1     1     1    1    1    1   1    1    1    1    1    1
1    1   1    1     1     1     1    1    1    1   1    1    1    0    1    1
9    0   0    0     0     0     0    0    0    0   0    0    0    1    0    0
1    1   1    1     1     1     1    1    1    1   1    1    1    0    1    1
1    1   1    1     1     1     1    0    0    0   0    1    1    1    1    1
2    0   0    0     0     0     0    0    0    0   0    0    0    1    0    0
1    1   1    1     1     1     0    1    1    1   1    1    0    0    0    0
1    1   1    1     0     1     0    1    1    1   1    1    0    0    0    0
1    1   1    1     1     1     1    1    1    1   1    1    1    0    1    1
1    1   1    1     1     0     1    0    0    0   0    0    1    0    1    1
1    1   1    1     1     0     0    0    0    0   0    0    0    0    0    0
1    1   1    1     1     0     0    0    0    0   0    0    0    0    0    0
1    0   0    0     0     0     0    0    0    0   0    0    0    0    0    0
1    1   1    1     0     0     0    0    0    0   0    0    0    0    0    0
1    1   1    1     1     1     1    1    1    1   1    1    1    1    1    1
1    1   1    1     1     1     1    1    1    1   1    1    1    1    1    1
1    0   0    0     1     0     0    0    0    0   0    0    0    0    0    0
1    1   1    1     1     1     1    1    1    1   1    0    1    1    0    0
1    0   0    0     0     0     0    0    0    0   0    0    0    1    0    0
1    1   1    1     0     0     0    0    0    0   0    0    0    0    0    0
1    1   1    1     1     0     0    0    0    0   0    0    0    0    0    0
1    0   0    0     0     0     0    0    0    0   0    0    0    1    0    0
    16  16   16    17    22    22   22   22   22  22   22   22   23   24   24
  ycc3 yc3 masc2 masc3    
8    1   1     1     1   0
2    1   1     0     0   2
1    0   0     1     1   4
8    1   1     1     1   1
1    1   1     0     0   3
1    1   1     1     1   2
1    1   1     1     1   5
1    1   1     1     1   4
9    0   0     0     0  22
1    1   1     1     1   7
1    1   1     1     1  10
2    0   0     0     0  28
1    0   0     0     0  14
1    0   0     0     0  15
1    1   1     1     1   9
1    1   1     0     0  15
1    0   0     0     0  29
1    0   0     0     0  32
1    0   0     0     0  39
1    0   0     0     0  37
1    1   1     1     1   6
1    1   1     1     0  13
1    0   0     0     0  40
1    0   0     0     1  10
1    0   0     0     0  23
1    0   0     0     0  40
1    0   0     0     0  36
1    0   0     0     0  30
    24  24    27    27 689
> 
> 
> 
> cleanEx()
> nameEx("fdgs")
> ### * fdgs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fdgs
> ### Title: Fifth Dutch growth study 2009
> ### Aliases: fdgs
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> 
> data <- data(fdgs)
> summary(data)
   Length     Class      Mode 
        1 character character 
> 
> 
> 
> cleanEx()
> nameEx("filter.mids")
> ### * filter.mids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: filter.mids
> ### Title: Subset rows of a 'mids' object
> ### Aliases: filter.mids
> ### Keywords: manip
> 
> ### ** Examples
> 
> imp <- mice(nhanes, m = 2, maxit = 1, print = FALSE)
> 
> # example with external logical vector
> imp_f <- filter(imp, c(rep(TRUE, 13), rep(FALSE, 12)))
> 
> nrow(complete(imp))
[1] 25
> nrow(complete(imp_f))
[1] 13
> 
> # example with calculated include vector
> imp_f2 <- filter(imp, age >= 2 & hyp == 1)
> nrow(complete(imp_f2)) # should be 5
[1] 5
> 
> 
> 
> cleanEx()
> nameEx("fix.coef")
> ### * fix.coef
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fix.coef
> ### Title: Fix coefficients and update model
> ### Aliases: fix.coef
> 
> ### ** Examples
> 
> model0 <- lm(Volume ~ Girth + Height, data = trees)
> formula(model0)
Volume ~ Girth + Height
> coef(model0)
(Intercept)       Girth      Height 
-57.9876589   4.7081605   0.3392512 
> deviance(model0)
[1] 421.9214
> 
> # refit same model
> model1 <- fix.coef(model0)
> formula(model1)
Volume ~ 1
> coef(model1)
(Intercept) 
1.17136e-14 
> deviance(model1)
[1] 421.9214
> 
> # change the beta's
> model2 <- fix.coef(model0, beta = c(-50, 5, 1))
> coef(model2)
(Intercept) 
  -62.07097 
> deviance(model2)
[1] 1098.984
> 
> # compare predictions
> plot(predict(model0), predict(model1))
> abline(0, 1)
> plot(predict(model0), predict(model2))
> abline(0, 1)
> 
> # compare proportion explained variance
> cor(predict(model0), predict(model0) + residuals(model0))^2
[1] 0.94795
> cor(predict(model1), predict(model1) + residuals(model1))^2
[1] 0.94795
> cor(predict(model2), predict(model2) + residuals(model2))^2
[1] 0.9228528
> 
> # extract offset from constrained model
> summary(model2$offset)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  57.00   82.00   87.00   92.24  102.25  140.00 
> 
> # it also works with factors and missing data
> model0 <- lm(bmi ~ age + hyp + chl, data = nhanes2)
> model1 <- fix.coef(model0)
> model2 <- fix.coef(model0, beta = c(15, -8, -8, 2, 0.2))
> 
> 
> 
> cleanEx()
> nameEx("futuremice")
> ### * futuremice
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: futuremice
> ### Title: Wrapper function that runs MICE in parallel
> ### Aliases: futuremice
> 
> ### ** Examples
> 
> # 150 imputations in dataset nhanes, performed by 3 cores
> ## Not run: 
> ##D imp1 <- futuremice(data = nhanes, m = 150, n.core = 3)
> ##D # Making use of arguments in mice.
> ##D imp2 <- futuremice(data = nhanes, m = 100, method = "norm.nob")
> ##D imp2$method
> ##D fit <- with(imp2, lm(bmi ~ hyp))
> ##D pool(fit)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("getfit")
> ### * getfit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getfit
> ### Title: Extract list of fitted models
> ### Aliases: getfit
> ### Keywords: manip
> 
> ### ** Examples
> 
> imp <- mice(nhanes, print = FALSE, seed = 21443)
> fit <- with(imp, lm(bmi ~ chl + hyp))
> f1 <- getfit(fit)
> class(f1)
[1] "mira" "list"
> f2 <- getfit(fit, 2)
> class(f2)
[1] "lm"
> 
> 
> 
> cleanEx()
> nameEx("glm.mids")
> ### * glm.mids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glm.mids
> ### Title: Generalized linear model for 'mids' object
> ### Aliases: glm.mids
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> 
> imp <- mice(nhanes)

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
  3   1  bmi  hyp  chl
  3   2  bmi  hyp  chl
  3   3  bmi  hyp  chl
  3   4  bmi  hyp  chl
  3   5  bmi  hyp  chl
  4   1  bmi  hyp  chl
  4   2  bmi  hyp  chl
  4   3  bmi  hyp  chl
  4   4  bmi  hyp  chl
  4   5  bmi  hyp  chl
  5   1  bmi  hyp  chl
  5   2  bmi  hyp  chl
  5   3  bmi  hyp  chl
  5   4  bmi  hyp  chl
  5   5  bmi  hyp  chl
> 
> # logistic regression on the imputed data
> fit <- glm.mids((hyp == 2) ~ bmi + chl, data = imp, family = binomial)
Warning in glm.mids((hyp == 2) ~ bmi + chl, data = imp, family = binomial) :
  Use with(imp, glm(yourmodel)).
> fit
call :
glm.mids(formula = (hyp == 2) ~ bmi + chl, family = binomial, 
    data = imp)

call1 :
mice(data = nhanes)

nmis :
age bmi hyp chl 
  0   9   8  10 

analyses :
[[1]]

Call:  glm(formula = formula, family = family, data = complete(data, 
    i))

Coefficients:
(Intercept)          bmi          chl  
   -7.81160     -0.01238      0.03142  

Degrees of Freedom: 24 Total (i.e. Null);  22 Residual
Null Deviance:	    21.98 
Residual Deviance: 19.15 	AIC: 25.15

[[2]]

Call:  glm(formula = formula, family = family, data = complete(data, 
    i))

Coefficients:
(Intercept)          bmi          chl  
   -1.81537     -0.17411      0.02468  

Degrees of Freedom: 24 Total (i.e. Null);  22 Residual
Null Deviance:	    25.02 
Residual Deviance: 21.76 	AIC: 27.76

[[3]]

Call:  glm(formula = formula, family = family, data = complete(data, 
    i))

Coefficients:
(Intercept)          bmi          chl  
  -5.529984     0.094281     0.009989  

Degrees of Freedom: 24 Total (i.e. Null);  22 Residual
Null Deviance:	    29.65 
Residual Deviance: 27.77 	AIC: 33.77

[[4]]

Call:  glm(formula = formula, family = family, data = complete(data, 
    i))

Coefficients:
(Intercept)          bmi          chl  
   -5.68329      0.02747      0.01804  

Degrees of Freedom: 24 Total (i.e. Null);  22 Residual
Null Deviance:	    25.02 
Residual Deviance: 23.07 	AIC: 29.07

[[5]]

Call:  glm(formula = formula, family = family, data = complete(data, 
    i))

Coefficients:
(Intercept)          bmi          chl  
   -6.74948     -0.01075      0.02716  

Degrees of Freedom: 24 Total (i.e. Null);  22 Residual
Null Deviance:	    25.02 
Residual Deviance: 22.1 	AIC: 28.1


> 
> 
> 
> cleanEx()
> nameEx("ibind")
> ### * ibind
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ibind
> ### Title: Enlarge number of imputations by combining 'mids' objects
> ### Aliases: ibind
> ### Keywords: manip
> 
> ### ** Examples
> 
> data(nhanes)
> imp1 <- mice(nhanes, m = 1, maxit = 2, print = FALSE)
> imp1$m
[1] 1
> 
> imp2 <- mice(nhanes, m = 3, maxit = 3, print = FALSE)
> imp2$m
[1] 3
> 
> imp12 <- ibind(imp1, imp2)
> imp12$m
[1] 4
> plot(imp12)
> 
> 
> 
> cleanEx()
> nameEx("ic")
> ### * ic
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ic
> ### Title: Select incomplete cases
> ### Aliases: ic
> ### Keywords: univar
> 
> ### ** Examples
> 
> 
> ic(nhanes) # get the 12 rows with incomplete cases
   age  bmi hyp chl
1    1   NA  NA  NA
3    1   NA   1 187
4    3   NA  NA  NA
6    3   NA  NA 184
10   2   NA  NA  NA
11   1   NA  NA  NA
12   2   NA  NA  NA
15   1 29.6   1  NA
16   1   NA  NA  NA
20   3 25.5   2  NA
21   1   NA  NA  NA
24   3 24.9   1  NA
> ic(nhanes[1:10, ]) # incomplete cases within the first ten rows
   age bmi hyp chl
1    1  NA  NA  NA
3    1  NA   1 187
4    3  NA  NA  NA
6    3  NA  NA 184
10   2  NA  NA  NA
> ic(nhanes[, c("bmi", "hyp")]) # restrict extraction to variables bmi and hyp
   bmi hyp
1   NA  NA
3   NA   1
4   NA  NA
6   NA  NA
10  NA  NA
11  NA  NA
12  NA  NA
16  NA  NA
21  NA  NA
> 
> 
> 
> cleanEx()
> nameEx("ici")
> ### * ici
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ici
> ### Title: Incomplete case indicator
> ### Aliases: ici ici,data.frame-method ici,matrix-method ici,mids-method
> ### Keywords: univar
> 
> ### ** Examples
> 
> 
> ici(nhanes) # indicator for 12 rows with incomplete cases
 [1]  TRUE FALSE  TRUE  TRUE FALSE  TRUE FALSE FALSE FALSE  TRUE  TRUE  TRUE
[13] FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE
[25] FALSE
> 
> 
> 
> cleanEx()
> nameEx("lm.mids")
> ### * lm.mids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lm.mids
> ### Title: Linear regression for 'mids' object
> ### Aliases: lm.mids
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> imp <- mice(nhanes)

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
  3   1  bmi  hyp  chl
  3   2  bmi  hyp  chl
  3   3  bmi  hyp  chl
  3   4  bmi  hyp  chl
  3   5  bmi  hyp  chl
  4   1  bmi  hyp  chl
  4   2  bmi  hyp  chl
  4   3  bmi  hyp  chl
  4   4  bmi  hyp  chl
  4   5  bmi  hyp  chl
  5   1  bmi  hyp  chl
  5   2  bmi  hyp  chl
  5   3  bmi  hyp  chl
  5   4  bmi  hyp  chl
  5   5  bmi  hyp  chl
> fit <- lm.mids(bmi ~ hyp + chl, data = imp)
Warning in lm.mids(bmi ~ hyp + chl, data = imp) :
  Use with(imp, lm(yourmodel)).
> fit
call :
lm.mids(formula = bmi ~ hyp + chl, data = imp)

call1 :
mice(data = nhanes)

nmis :
age bmi hyp chl 
  0   9   8  10 

analyses :
[[1]]

Call:
lm(formula = formula, data = complete(data, i))

Coefficients:
(Intercept)          hyp          chl  
    19.7067      -0.5110       0.0372  


[[2]]

Call:
lm(formula = formula, data = complete(data, i))

Coefficients:
(Intercept)          hyp          chl  
   18.68095     -2.48031      0.05583  


[[3]]

Call:
lm(formula = formula, data = complete(data, i))

Coefficients:
(Intercept)          hyp          chl  
   21.57623      2.02489      0.01493  


[[4]]

Call:
lm(formula = formula, data = complete(data, i))

Coefficients:
(Intercept)          hyp          chl  
    19.7303       0.2588       0.0321  


[[5]]

Call:
lm(formula = formula, data = complete(data, i))

Coefficients:
(Intercept)          hyp          chl  
   21.55578     -0.47486      0.02713  



> 
> 
> 
> cleanEx()
> nameEx("make.blocks")
> ### * make.blocks
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make.blocks
> ### Title: Creates a 'blocks' argument
> ### Aliases: make.blocks
> 
> ### ** Examples
> 
> make.blocks(nhanes)
$age
[1] "age"

$bmi
[1] "bmi"

$hyp
[1] "hyp"

$chl
[1] "chl"

> make.blocks(c("age", "sex", "edu"))
$age
[1] "age"

$sex
[1] "sex"

$edu
[1] "edu"

> 
> 
> 
> cleanEx()
> nameEx("make.blots")
> ### * make.blots
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make.blots
> ### Title: Creates a 'blots' argument
> ### Aliases: make.blots
> 
> ### ** Examples
> 
> make.predictorMatrix(nhanes)
    age bmi hyp chl
age   0   1   1   1
bmi   1   0   1   1
hyp   1   1   0   1
chl   1   1   1   0
> make.blots(nhanes, blocks = name.blocks(c("age", "hyp"), "xxx"))
$age
list()

$hyp
list()

> 
> 
> 
> cleanEx()
> nameEx("make.calltype")
> ### * make.calltype
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make.calltype
> ### Title: Create calltype of the imputation model
> ### Aliases: make.calltype
> 
> ### ** Examples
> 
> # Example predictorMatrix
> predictorMatrix <- matrix(1, nrow = 3, ncol = 3,
+  dimnames = list(c("block1", "block2", "block3"), c("x1", "x2", "y")))
> predictorMatrix[1, 3] <- 0
> 
> # Case 1: No calltype or formulas specified
> make.calltype(NULL, predictorMatrix, NULL)
block1 block2 block3 
"pred" "pred" "pred" 
> 
> # Case 2: Formulas provided
> formulas <- list(
+   NULL,
+   y ~ x1 + x2,
+   NULL
+ )
> make.calltype(NULL, predictorMatrix, formulas)
block1 block2 block3 
"pred" "pred" "pred" 
> 
> # Case 3: Custom calltype
> calltype <- c("pred", "formula", "pred")
> make.calltype(calltype, predictorMatrix, NULL)
   block1    block2    block3 
   "pred" "formula"    "pred" 
> 
> 
> 
> 
> cleanEx()
> nameEx("make.formulas")
> ### * make.formulas
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make.formulas
> ### Title: Creates a 'formulas' argument
> ### Aliases: make.formulas
> 
> ### ** Examples
> 
> f1 <- make.formulas(nhanes)
> f1
$age
age ~ bmi + hyp + chl
<environment: 0x5583d17502b8>

$bmi
bmi ~ age + hyp + chl
<environment: 0x5583d17502b8>

$hyp
hyp ~ age + bmi + chl
<environment: 0x5583d17502b8>

$chl
chl ~ age + bmi + hyp
<environment: 0x5583d17502b8>

> f2 <- make.formulas(nhanes, blocks = make.blocks(nhanes, "collect"))
> f2
$collect
age + bmi + hyp + chl ~ `0`
<environment: 0x5583d17afdf8>

> 
> # for editing, it may be easier to work with the character vector
> c1 <- as.character(f1)
> c1
[1] "age ~ bmi + hyp + chl" "bmi ~ age + hyp + chl" "hyp ~ age + bmi + chl"
[4] "chl ~ age + bmi + hyp"
> 
> # fold it back into a formula list
> f3 <- name.formulas(lapply(c1, as.formula))
> f3
$age
age ~ bmi + hyp + chl
<environment: 0x5583d17bb058>

$bmi
bmi ~ age + hyp + chl
<environment: 0x5583d17bb058>

$hyp
hyp ~ age + bmi + chl
<environment: 0x5583d17bb058>

$chl
chl ~ age + bmi + hyp
<environment: 0x5583d17bb058>

> 
> 
> 
> cleanEx()
> nameEx("make.method")
> ### * make.method
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make.method
> ### Title: Creates a 'method' argument
> ### Aliases: make.method
> 
> ### ** Examples
> 
> make.method(nhanes2)
     age      bmi      hyp      chl 
      ""    "pmm" "logreg"    "pmm" 
> 
> 
> 
> cleanEx()
> nameEx("make.post")
> ### * make.post
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make.post
> ### Title: Creates a 'post' argument
> ### Aliases: make.post
> 
> ### ** Examples
> 
> make.post(nhanes2)
age bmi hyp chl 
 ""  ""  ""  "" 
> 
> 
> 
> cleanEx()
> nameEx("make.predictorMatrix")
> ### * make.predictorMatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make.predictorMatrix
> ### Title: Creates a 'predictorMatrix' argument
> ### Aliases: make.predictorMatrix
> 
> ### ** Examples
> 
> make.predictorMatrix(nhanes)
    age bmi hyp chl
age   0   1   1   1
bmi   1   0   1   1
hyp   1   1   0   1
chl   1   1   1   0
> make.predictorMatrix(nhanes, blocks = make.blocks(nhanes, "collect"))
        age bmi hyp chl
collect   1   1   1   1
> 
> 
> 
> cleanEx()
> nameEx("make.visitSequence")
> ### * make.visitSequence
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make.visitSequence
> ### Title: Creates a 'visitSequence' argument
> ### Aliases: make.visitSequence
> 
> ### ** Examples
> 
> make.visitSequence(nhanes)
[1] "age" "bmi" "hyp" "chl"
> 
> 
> 
> cleanEx()
> nameEx("make.where")
> ### * make.where
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make.where
> ### Title: Creates a 'where' argument
> ### Aliases: make.where
> 
> ### ** Examples
> 
> head(make.where(nhanes), 3)
    age   bmi   hyp   chl
1 FALSE  TRUE  TRUE  TRUE
2 FALSE FALSE FALSE FALSE
3 FALSE  TRUE FALSE FALSE
> 
> # create & analyse synthetic data
> where <- make.where(nhanes2, "all")
> imp <- mice(nhanes2,
+   m = 10, where = where,
+   print = FALSE, seed = 123
+ )
> fit <- with(imp, lm(chl ~ bmi + age + hyp))
> summary(pool.syn(fit))
         term   estimate std.error statistic         df    p.value
1 (Intercept) 131.574797 63.262279 2.0798302  970.66355 0.03780306
2         bmi   1.774018  2.298282 0.7718887  795.99667 0.44040943
3    age40-59  18.895593 20.771314 0.9096966 1513.73872 0.36312737
4    age60-99  29.884250 20.936150 1.4273995  655.88704 0.15394068
5      hypyes   8.784214 21.349328 0.4114515   91.38507 0.68170484
> 
> 
> 
> cleanEx()
> nameEx("mammalsleep")
> ### * mammalsleep
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mammalsleep
> ### Title: Mammal sleep data
> ### Aliases: mammalsleep sleep
> ### Keywords: datasets
> 
> ### ** Examples
> 
> sleep <- data(mammalsleep)
> 
> 
> 
> cleanEx()
> nameEx("matchindex")
> ### * matchindex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: matchindex
> ### Title: Find index of matched donor units
> ### Aliases: matchindex
> 
> ### ** Examples
> 
> set.seed(1)
> 
> # Inputs need not be sorted
> d <- c(-5, 5, 0, 10, 12)
> t <- c(-6, -4, 0, 2, 4, -2, 6)
> 
> # Index (in vector a) of closest match
> idx <- matchindex(d, t, 1)
> idx
[1] 1 1 3 3 2 3 2
> 
> # To check: show values of closest match
> 
> # Random draw among indices of the 5 closest predictors
> matchindex(d, t)
[1] 3 1 5 5 2 3 1
> 
> # An example
> train <- mtcars[1:20, ]
> test <- mtcars[21:32, ]
> fit <- lm(mpg ~ disp + cyl, data = train)
> d <- fitted.values(fit)
> t <- predict(fit, newdata = test)  # note: not using mpg
> idx <- matchindex(d, t)
> 
> # Borrow values from train to produce 12 synthetic values for mpg in test.
> # Synthetic values are plausible values that could have been observed if
> # they had been measured.
> train$mpg[idx]
 [1] 22.8 15.2 16.4 18.7 14.3 30.4 22.8 22.8 18.7 21.0 17.3 24.4
> 
> # Exercise: Create a distribution of 1000 plausible values for each of the
> # twelve mpg entries in test, and count how many times the true value
> # (which we know here) is located within the inter-quartile range of each
> # distribution. Is your count anywhere close to 500? Why? Why not?
> 
> 
> 
> cleanEx()
> nameEx("mcar")
> ### * mcar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mcar
> ### Title: Jamshidian and Jalal's Non-Parametric MCAR Test
> ### Aliases: mcar
> ### Keywords: internal
> 
> ### ** Examples
> 
> res <- mcar(nhanes)

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
  3   1  bmi  hyp  chl
  3   2  bmi  hyp  chl
  3   3  bmi  hyp  chl
  3   4  bmi  hyp  chl
  3   5  bmi  hyp  chl
  4   1  bmi  hyp  chl
  4   2  bmi  hyp  chl
  4   3  bmi  hyp  chl
  4   4  bmi  hyp  chl
  4   5  bmi  hyp  chl
  5   1  bmi  hyp  chl
  5   2  bmi  hyp  chl
  5   3  bmi  hyp  chl
  5   4  bmi  hyp  chl
  5   5  bmi  hyp  chl
> # Examine test results
> res

Missing data patterns: 2 used, 3 removed.
Cases used: 20 

Hawkins' test: median chi^2 (4) = 1.54733, median p = 0.8182258


Interpretation of results:
 Hawkins' test is not significant; there is no evidence to reject the assumptions of multivariate normality and MCAR.
> # Plot p-values across imputed data sets
> plot(res)
> # Plot md patterns used for the test
> plot(res, type = "md.pattern")
> # Note difference with the raw md.patterns:
> md.pattern(nhanes)
   age hyp bmi chl   
13   1   1   1   1  0
3    1   1   1   0  1
1    1   1   0   1  1
1    1   0   0   1  2
7    1   0   0   0  3
     0   8   9  10 27
> 
> 
> 
> cleanEx()
> nameEx("md.pairs")
> ### * md.pairs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: md.pairs
> ### Title: Missing data pattern by variable pairs
> ### Aliases: md.pairs
> ### Keywords: univar
> 
> ### ** Examples
> 
> pat <- md.pairs(nhanes)
> pat
$rr
    age bmi hyp chl
age  25  16  17  15
bmi  16  16  16  13
hyp  17  16  17  14
chl  15  13  14  15

$rm
    age bmi hyp chl
age   0   9   8  10
bmi   0   0   0   3
hyp   0   1   0   3
chl   0   2   1   0

$mr
    age bmi hyp chl
age   0   0   0   0
bmi   9   0   1   2
hyp   8   0   0   1
chl  10   3   3   0

$mm
    age bmi hyp chl
age   0   0   0   0
bmi   0   9   8   7
hyp   0   8   8   7
chl   0   7   7  10

> 
> # show that these four matrices decompose the total sample size
> # for each pair
> pat$rr + pat$rm + pat$mr + pat$mm
    age bmi hyp chl
age  25  25  25  25
bmi  25  25  25  25
hyp  25  25  25  25
chl  25  25  25  25
> 
> # percentage of usable cases to impute row variable from column variable
> round(100 * pat$mr / (pat$mr + pat$mm))
    age bmi hyp chl
age NaN NaN NaN NaN
bmi 100   0  11  22
hyp 100   0   0  12
chl 100  30  30   0
> 
> 
> 
> cleanEx()
> nameEx("md.pattern")
> ### * md.pattern
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: md.pattern
> ### Title: Missing data pattern
> ### Aliases: md.pattern
> ### Keywords: univar
> 
> ### ** Examples
> 
> md.pattern(nhanes)
   age hyp bmi chl   
13   1   1   1   1  0
3    1   1   1   0  1
1    1   1   0   1  1
1    1   0   0   1  2
7    1   0   0   0  3
     0   8   9  10 27
> #     age hyp bmi chl
> #  13   1   1   1   1  0
> #   1   1   1   0   1  1
> #   3   1   1   1   0  1
> #   1   1   0   0   1  2
> #   7   1   0   0   0  3
> #   0   8   9  10 27
> 
> 
> 
> cleanEx()
> nameEx("mdc")
> ### * mdc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mdc
> ### Title: Graphical parameter for missing data plots
> ### Aliases: mdc
> ### Keywords: hplot
> 
> ### ** Examples
> 
> # all six colors
> mdc(1:6)
[1] "#006CC2B3" "#B61A51B3" "gray50"    "#006CC2CC" "#B61A51CC" "gray50"   
> 
> # lines color for observed and missing data
> mdc(c("obs", "mis"), "lin")
[1] "#006CC2CC" "#B61A51CC"
> 
> 
> 
> cleanEx()
> nameEx("mice")
> ### * mice
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mice
> ### Title: 'mice': Multivariate Imputation by Chained Equations
> ### Aliases: mice mice-package
> ### Keywords: internal iteration
> 
> ### ** Examples
> 
> # do default multiple imputation on a numeric matrix
> imp <- mice(nhanes)

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
  3   1  bmi  hyp  chl
  3   2  bmi  hyp  chl
  3   3  bmi  hyp  chl
  3   4  bmi  hyp  chl
  3   5  bmi  hyp  chl
  4   1  bmi  hyp  chl
  4   2  bmi  hyp  chl
  4   3  bmi  hyp  chl
  4   4  bmi  hyp  chl
  4   5  bmi  hyp  chl
  5   1  bmi  hyp  chl
  5   2  bmi  hyp  chl
  5   3  bmi  hyp  chl
  5   4  bmi  hyp  chl
  5   5  bmi  hyp  chl
> imp
Class: mids
Number of multiple imputations:  5 
Imputation methods:
  age   bmi   hyp   chl 
   "" "pmm" "pmm" "pmm" 
PredictorMatrix:
    age bmi hyp chl
age   0   1   1   1
bmi   1   0   1   1
hyp   1   1   0   1
chl   1   1   1   0
> 
> # list the actual imputations for BMI
> imp$imp$bmi
      1    2    3    4    5
1  27.2 35.3 27.2 29.6 24.9
3  28.7 27.2 35.3 30.1 29.6
4  25.5 20.4 22.0 20.4 25.5
6  24.9 21.7 22.7 24.9 27.4
10 28.7 22.7 20.4 20.4 22.7
11 30.1 29.6 35.3 22.7 29.6
12 22.0 27.2 26.3 27.4 22.5
16 22.0 27.2 35.3 22.7 24.9
21 26.3 29.6 27.2 29.6 27.2
> 
> # first completed data matrix
> complete(imp)
   age  bmi hyp chl
1    1 27.2   1 199
2    2 22.7   1 187
3    1 28.7   1 187
4    3 25.5   1 218
5    1 20.4   1 113
6    3 24.9   1 184
7    1 22.5   1 118
8    1 30.1   1 187
9    2 22.0   1 238
10   2 28.7   1 206
11   1 30.1   1 199
12   2 22.0   1 187
13   3 21.7   1 206
14   2 28.7   2 204
15   1 29.6   1 206
16   1 22.0   1 187
17   3 27.2   2 284
18   2 26.3   2 199
19   1 35.3   1 218
20   3 25.5   2 199
21   1 26.3   1 229
22   1 33.2   1 229
23   1 27.5   1 131
24   3 24.9   1 206
25   2 27.4   1 186
> 
> # imputation on mixed data with a different method per column
> mice(nhanes2, meth = c("sample", "pmm", "logreg", "norm"))

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
  3   1  bmi  hyp  chl
  3   2  bmi  hyp  chl
  3   3  bmi  hyp  chl
  3   4  bmi  hyp  chl
  3   5  bmi  hyp  chl
  4   1  bmi  hyp  chl
  4   2  bmi  hyp  chl
  4   3  bmi  hyp  chl
  4   4  bmi  hyp  chl
  4   5  bmi  hyp  chl
  5   1  bmi  hyp  chl
  5   2  bmi  hyp  chl
  5   3  bmi  hyp  chl
  5   4  bmi  hyp  chl
  5   5  bmi  hyp  chl
Class: mids
Number of multiple imputations:  5 
Imputation methods:
     age      bmi      hyp      chl 
      ""    "pmm" "logreg"   "norm" 
PredictorMatrix:
    age bmi hyp chl
age   0   1   1   1
bmi   1   0   1   1
hyp   1   1   0   1
chl   1   1   1   0
> 
> ## Not run: 
> ##D # example where we fit the imputation model on the train data
> ##D # and apply the model to impute the test data
> ##D set.seed(123)
> ##D ignore <- sample(c(TRUE, FALSE), size = 25, replace = TRUE, prob = c(0.3, 0.7))
> ##D 
> ##D # scenario 1: train and test in the same dataset
> ##D imp <- mice(nhanes2, m = 2, ignore = ignore, print = FALSE, seed = 22112)
> ##D imp.test1 <- filter(imp, ignore)
> ##D imp.test1$data
> ##D complete(imp.test1, 1)
> ##D complete(imp.test1, 2)
> ##D 
> ##D # scenario 2: train and test in separate datasets
> ##D traindata <- nhanes2[!ignore, ]
> ##D testdata <- nhanes2[ignore, ]
> ##D imp.train <- mice(traindata, m = 2, print = FALSE, seed = 22112)
> ##D imp.test2 <- mice.mids(imp.train, newdata = testdata)
> ##D complete(imp.test2, 1)
> ##D complete(imp.test2, 2)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("mice.impute.2l.bin")
> ### * mice.impute.2l.bin
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mice.impute.2l.bin
> ### Title: Imputation by a two-level logistic model using 'glmer'
> ### Aliases: mice.impute.2l.bin
> ### Keywords: datagen
> 
> ### ** Examples
> 
> library(tidyr)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> data("toenail2")
> data <- tidyr::complete(toenail2, patientID, visit) %>%
+   tidyr::fill(treatment) %>%
+   dplyr::select(-time) %>%
+   dplyr::mutate(patientID = as.integer(patientID))
> ## Not run: 
> ##D pred <- mice(data, print = FALSE, maxit = 0, seed = 1)$pred
> ##D pred["outcome", "patientID"] <- -2
> ##D imp <- mice(data, method = "2l.bin", pred = pred, maxit = 1, m = 1, seed = 1)
> ## End(Not run)
> 
> 
> 
> cleanEx()

detaching ‘package:dplyr’, ‘package:tidyr’

> nameEx("mice.impute.2l.pan")
> ### * mice.impute.2l.pan
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mice.impute.2l.pan
> ### Title: Imputation by a two-level normal model using 'pan'
> ### Aliases: mice.impute.2l.pan 2l.pan
> 
> ### ** Examples
> 
> # simulate some data
> # two-level regression model with fixed slope
> 
> # number of groups
> G <- 250
> # number of persons
> n <- 20
> # regression parameter
> beta <- .3
> # intraclass correlation
> rho <- .30
> # correlation with missing response
> rho.miss <- .10
> # missing proportion
> missrate <- .50
> y1 <- rep(rnorm(G, sd = sqrt(rho)), each = n) + rnorm(G * n, sd = sqrt(1 - rho))
> x <- rnorm(G * n)
> y <- y1 + beta * x
> dfr0 <- dfr <- data.frame("group" = rep(1:G, each = n), "x" = x, "y" = y)
> dfr[rho.miss * x + rnorm(G * n, sd = sqrt(1 - rho.miss)) < qnorm(missrate), "y"] <- NA
> 
> # empty imputation in mice
> imp0 <- mice(as.matrix(dfr), maxit = 0)
> predM <- imp0$predictorMatrix
> impM <- imp0$method
> 
> # specify predictor matrix and method
> predM1 <- predM
> predM1["y", "group"] <- -2
> predM1["y", "x"] <- 1 # fixed x effects imputation
> impM1 <- impM
> impM1["y"] <- "2l.pan"
> 
> # multilevel imputation
> imp1 <- mice(as.matrix(dfr),
+   m = 1, predictorMatrix = predM1,
+   method = impM1, maxit = 1
+ )

 iter imp variable
  1   1  y
> 
> # multilevel analysis
> library(lme4)
Loading required package: Matrix
> mod <- lmer(y ~ (1 + x | group) + x, data = complete(imp1))
> summary(mod)
Linear mixed model fit by REML ['lmerMod']
Formula: y ~ (1 + x | group) + x
   Data: complete(imp1)

REML criterion at convergence: 13203.2

Scaled residuals: 
    Min      1Q  Median      3Q     Max 
-3.6721 -0.6551 -0.0039  0.6652  3.3324 

Random effects:
 Groups   Name        Variance Std.Dev. Corr 
 group    (Intercept) 0.289377 0.5379        
          x           0.001705 0.0413   -0.34
 Residual             0.733158 0.8562        
Number of obs: 5000, groups:  group, 250

Fixed effects:
            Estimate Std. Error t value
(Intercept)  0.03861    0.03612   1.069
x            0.27882    0.01274  21.882

Correlation of Fixed Effects:
  (Intr)
x -0.063
> 
> # Examples of predictorMatrix specification
> 
> # random x effects
> # predM1["y","x"] <- 2
> 
> # fixed x effects and group mean of x
> # predM1["y","x"] <- 3
> 
> # random x effects and group mean of x
> # predM1["y","x"] <- 4
> 
> 
> 
> cleanEx()

detaching ‘package:lme4’, ‘package:Matrix’

> nameEx("mice.impute.2lonly.norm")
> ### * mice.impute.2lonly.norm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mice.impute.2lonly.norm
> ### Title: Imputation at level 2 by Bayesian linear regression
> ### Aliases: mice.impute.2lonly.norm 2lonly.norm
> 
> ### ** Examples
> 
> # simulate some data
> # x,y ... level 1 variables
> # v,w ... level 2 variables
> 
> G <- 250 # number of groups
> n <- 20 # number of persons
> beta <- .3 # regression coefficient
> rho <- .30 # residual intraclass correlation
> rho.miss <- .10 # correlation with missing response
> missrate <- .50 # missing proportion
> y1 <- rep(rnorm(G, sd = sqrt(rho)), each = n) + rnorm(G * n, sd = sqrt(1 - rho))
> w <- rep(round(rnorm(G), 2), each = n)
> v <- rep(round(runif(G, 0, 3)), each = n)
> x <- rnorm(G * n)
> y <- y1 + beta * x + .2 * w + .1 * v
> dfr0 <- dfr <- data.frame("group" = rep(1:G, each = n), "x" = x, "y" = y, "w" = w, "v" = v)
> dfr[rho.miss * x + rnorm(G * n, sd = sqrt(1 - rho.miss)) < qnorm(missrate), "y"] <- NA
> dfr[rep(rnorm(G), each = n) < qnorm(missrate), "w"] <- NA
> dfr[rep(rnorm(G), each = n) < qnorm(missrate), "v"] <- NA
> 
> # empty mice imputation
> imp0 <- mice(as.matrix(dfr), maxit = 0)
> predM <- imp0$predictorMatrix
> impM <- imp0$method
> 
> # multilevel imputation
> predM1 <- predM
> predM1[c("w", "y", "v"), "group"] <- -2
> predM1["y", "x"] <- 1 # fixed x effects imputation
> impM1 <- impM
> impM1[c("y", "w", "v")] <- c("2l.pan", "2lonly.norm", "2lonly.pmm")
> 
> # y ... imputation using pan
> # w ... imputation at level 2 using norm
> # v ... imputation at level 2 using pmm
> 
> imp1 <- mice(as.matrix(dfr),
+   m = 1, predictorMatrix = predM1,
+   method = impM1, maxit = 1, paniter = 500
+ )

 iter imp variable
  1   1  y  w  v
> 
> # Demonstration that 2lonly.norm aborts for partial missing data.
> # Better use 2lonly.mean for repair.
> data <- data.frame(
+   patid = rep(1:4, each = 5),
+   sex = rep(c(1, 2, 1, 2), each = 5),
+   crp = c(
+     68, 78, 93, NA, 143,
+     5, 7, 9, 13, NA,
+     97, NA, 56, 52, 34,
+     22, 30, NA, NA, 45
+   )
+ )
> pred <- make.predictorMatrix(data)
> pred[, "patid"] <- -2
> # only missing value (out of five) for patid == 1
> data[3, "sex"] <- NA
> ## Not run: 
> ##D # The following fails because 2lonly.norm found partially missing
> ##D # level-2 data
> ##D # imp <- mice(data, method = c("", "2lonly.norm", "2l.pan"),
> ##D #             predictorMatrix = pred, maxit = 1, m = 2)
> ##D # > iter imp variable
> ##D # > 1   1  sex  crpError in .imputation.level2(y = y, ... :
> ##D # >   Method 2lonly.norm found the following clusters with partially missing
> ##D # >    level-2 data: 1
> ##D # > Method 2lonly.mean can fix such inconsistencies.
> ## End(Not run)
> 
> # In contrast, if all sex values are missing for patid == 1, it runs fine,
> # except on r-patched-solaris-x86. I used dontrun to evade CRAN errors.
> ## Not run: 
> ##D data[1:5, "sex"] <- NA
> ##D imp <- mice(data,
> ##D   method = c("", "2lonly.norm", "2l.pan"),
> ##D   predictorMatrix = pred, maxit = 1, m = 2
> ##D )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("mice.impute.2lonly.pmm")
> ### * mice.impute.2lonly.pmm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mice.impute.2lonly.pmm
> ### Title: Imputation at level 2 by predictive mean matching
> ### Aliases: mice.impute.2lonly.pmm 2lonly.pmm
> 
> ### ** Examples
> 
> # simulate some data
> # x,y ... level 1 variables
> # v,w ... level 2 variables
> 
> G <- 250 # number of groups
> n <- 20 # number of persons
> beta <- .3 # regression coefficient
> rho <- .30 # residual intraclass correlation
> rho.miss <- .10 # correlation with missing response
> missrate <- .50 # missing proportion
> y1 <- rep(rnorm(G, sd = sqrt(rho)), each = n) + rnorm(G * n, sd = sqrt(1 - rho))
> w <- rep(round(rnorm(G), 2), each = n)
> v <- rep(round(runif(G, 0, 3)), each = n)
> x <- rnorm(G * n)
> y <- y1 + beta * x + .2 * w + .1 * v
> dfr0 <- dfr <- data.frame("group" = rep(1:G, each = n), "x" = x, "y" = y, "w" = w, "v" = v)
> dfr[rho.miss * x + rnorm(G * n, sd = sqrt(1 - rho.miss)) < qnorm(missrate), "y"] <- NA
> dfr[rep(rnorm(G), each = n) < qnorm(missrate), "w"] <- NA
> dfr[rep(rnorm(G), each = n) < qnorm(missrate), "v"] <- NA
> 
> # empty mice imputation
> imp0 <- mice(as.matrix(dfr), maxit = 0)
> predM <- imp0$predictorMatrix
> impM <- imp0$method
> 
> # multilevel imputation
> predM1 <- predM
> predM1[c("w", "y", "v"), "group"] <- -2
> predM1["y", "x"] <- 1 # fixed x effects imputation
> impM1 <- impM
> impM1[c("y", "w", "v")] <- c("2l.pan", "2lonly.norm", "2lonly.pmm")
> 
> # turn v into a categorical variable
> dfr$v <- as.factor(dfr$v)
> levels(dfr$v) <- LETTERS[1:4]
> 
> # y ... imputation using pan
> # w ... imputation at level 2 using norm
> # v ... imputation at level 2 using pmm
> 
> # skip imputation on solaris
> is.solaris <- function() grepl("SunOS", Sys.info()["sysname"])
> if (!is.solaris()) {
+   imp <- mice(dfr,
+     m = 1, predictorMatrix = predM1,
+     method = impM1, maxit = 1, paniter = 500
+   )
+ }

 iter imp variable
  1   1  y  w  v
> 
> 
> 
> cleanEx()
> nameEx("mice.impute.cart")
> ### * mice.impute.cart
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mice.impute.cart
> ### Title: Imputation by classification and regression trees
> ### Aliases: mice.impute.cart cart
> ### Keywords: datagen
> 
> ### ** Examples
> 
> imp <- mice(nhanes2, meth = "cart", minbucket = 4)

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
  3   1  bmi  hyp  chl
  3   2  bmi  hyp  chl
  3   3  bmi  hyp  chl
  3   4  bmi  hyp  chl
  3   5  bmi  hyp  chl
  4   1  bmi  hyp  chl
  4   2  bmi  hyp  chl
  4   3  bmi  hyp  chl
  4   4  bmi  hyp  chl
  4   5  bmi  hyp  chl
  5   1  bmi  hyp  chl
  5   2  bmi  hyp  chl
  5   3  bmi  hyp  chl
  5   4  bmi  hyp  chl
  5   5  bmi  hyp  chl
> plot(imp)
> 
> 
> 
> cleanEx()
> nameEx("mice.impute.jomoImpute")
> ### * mice.impute.jomoImpute
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mice.impute.jomoImpute
> ### Title: Multivariate multilevel imputation using 'jomo'
> ### Aliases: mice.impute.jomoImpute
> ### Keywords: datagen
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Note: Requires mitml 0.3-5.7
> ##D blocks <- list(c("bmi", "chl", "hyp"), "age")
> ##D method <- c("jomoImpute", "pmm")
> ##D ini <- mice(nhanes, blocks = blocks, method = method, maxit = 0)
> ##D pred <- ini$pred
> ##D pred["B1", "hyp"] <- -2
> ##D imp <- mice(nhanes, blocks = blocks, method = method, pred = pred, maxit = 1)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("mice.impute.midastouch")
> ### * mice.impute.midastouch
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mice.impute.midastouch
> ### Title: Imputation by predictive mean matching with distance aided donor
> ###   selection
> ### Aliases: mice.impute.midastouch
> ### Keywords: datagen
> 
> ### ** Examples
> 
> # do default multiple imputation on a numeric matrix
> imp <- mice(nhanes, method = "midastouch")

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
  3   1  bmi  hyp  chl
  3   2  bmi  hyp  chl
  3   3  bmi  hyp  chl
  3   4  bmi  hyp  chl
  3   5  bmi  hyp  chl
  4   1  bmi  hyp  chl
  4   2  bmi  hyp  chl
  4   3  bmi  hyp  chl
  4   4  bmi  hyp  chl
  4   5  bmi  hyp  chl
  5   1  bmi  hyp  chl
  5   2  bmi  hyp  chl
  5   3  bmi  hyp  chl
  5   4  bmi  hyp  chl
  5   5  bmi  hyp  chl
> imp
Class: mids
Number of multiple imputations:  5 
Imputation methods:
         age          bmi          hyp          chl 
          "" "midastouch" "midastouch" "midastouch" 
PredictorMatrix:
    age bmi hyp chl
age   0   1   1   1
bmi   1   0   1   1
hyp   1   1   0   1
chl   1   1   1   0
> 
> # list the actual imputations for BMI
> imp$imp$bmi
      1    2    3    4    5
1  29.6 29.6 29.6 29.6 33.2
3  29.6 29.6 30.1 29.6 30.1
4  24.9 20.4 21.7 25.5 25.5
6  24.9 21.7 21.7 25.5 25.5
10 22.7 33.2 22.5 20.4 27.4
11 22.7 29.6 30.1 30.1 29.6
12 29.6 24.9 26.3 22.0 27.4
16 33.2 29.6 30.1 29.6 33.2
21 29.6 29.6 30.1 22.5 33.2
> 
> # first completed data matrix
> complete(imp)
   age  bmi hyp chl
1    1 29.6   1 187
2    2 22.7   1 187
3    1 29.6   1 187
4    3 24.9   1 284
5    1 20.4   1 113
6    3 24.9   2 184
7    1 22.5   1 118
8    1 30.1   1 187
9    2 22.0   1 238
10   2 22.7   1 187
11   1 22.7   1 118
12   2 29.6   2 229
13   3 21.7   1 206
14   2 28.7   2 204
15   1 29.6   1 187
16   1 33.2   1 229
17   3 27.2   2 284
18   2 26.3   2 199
19   1 35.3   1 218
20   3 25.5   2 229
21   1 29.6   1 187
22   1 33.2   1 229
23   1 27.5   1 131
24   3 24.9   1 284
25   2 27.4   1 186
> 
> # imputation on mixed data with a different method per column
> mice(nhanes2, method = c("sample", "midastouch", "logreg", "norm"))

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
  3   1  bmi  hyp  chl
  3   2  bmi  hyp  chl
  3   3  bmi  hyp  chl
  3   4  bmi  hyp  chl
  3   5  bmi  hyp  chl
  4   1  bmi  hyp  chl
  4   2  bmi  hyp  chl
  4   3  bmi  hyp  chl
  4   4  bmi  hyp  chl
  4   5  bmi  hyp  chl
  5   1  bmi  hyp  chl
  5   2  bmi  hyp  chl
  5   3  bmi  hyp  chl
  5   4  bmi  hyp  chl
  5   5  bmi  hyp  chl
Class: mids
Number of multiple imputations:  5 
Imputation methods:
         age          bmi          hyp          chl 
          "" "midastouch"     "logreg"       "norm" 
PredictorMatrix:
    age bmi hyp chl
age   0   1   1   1
bmi   1   0   1   1
hyp   1   1   0   1
chl   1   1   1   0
> 
> 
> 
> cleanEx()
> nameEx("mice.impute.mnar")
> ### * mice.impute.mnar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mice.impute.mnar.logreg
> ### Title: Imputation under MNAR mechanism by NARFCS
> ### Aliases: mice.impute.mnar.logreg mice.impute.mnar.norm mnar.norm
> ###   mnar.logreg
> ### Keywords: datagen
> 
> ### ** Examples
> 
> # 1: Example with no auxiliary data: only pass unidentifiable model specification (ums)
> 
> # Specify argument to pass on to mnar imputation functions via "blots" argument
> mnar.blot <- list(X = list(ums = "-4"), Y = list(ums = "2+1*ZCat1-3*ZCat2"))
> 
> # Run NARFCS by using mnar imputation methods and passing argument via blots
> impNARFCS <- mice(mnar_demo_data,
+   method = c("mnar.logreg", "mnar.norm", ""),
+   blots = mnar.blot, seed = 234235, print = FALSE
+ )
> 
> # Obtain MI results: Note they coincide with those from old version at
> # https://github.com/moreno-betancur/NARFCS
> pool(with(impNARFCS, lm(Y ~ X + Z)))$pooled$estimate
[1]  19.368813   3.039045 -14.643202 -28.586061
> 
> # 2: Example passing also auxiliary data to MNAR procedure (umx)
> # Assumptions:
> # - Auxiliary data are complete, no missing values
> # - Auxiliary data are a numeric matrix
> # - Auxiliary data have same number of rows as x
> # - Auxiliary data have no overlapping variable names with x
> 
> # Specify argument to pass on to mnar imputation functions via "blots" argument
> aux <- matrix(0:1, nrow = nrow(mnar_demo_data))
> dimnames(aux) <- list(NULL, "even")
> mnar.blot <- list(
+   X = list(ums = "-4"),
+   Y = list(ums = "2+1*ZCat1-3*ZCat2+0.5*even", umx = aux)
+ )
> 
> # Run NARFCS by using mnar imputation methods and passing argument via blots
> impNARFCS <- mice(mnar_demo_data,
+   method = c("mnar.logreg", "mnar.norm", ""),
+   blots = mnar.blot, seed = 234235, print = FALSE
+ )
> 
> # Obtain MI results: As expected they differ (slightly) from those
> # from old version at https://github.com/moreno-betancur/NARFCS
> pool(with(impNARFCS, lm(Y ~ X + Z)))$pooled$estimate
[1]  19.521134   2.952546 -14.729454 -28.699292
> 
> 
> 
> cleanEx()
> nameEx("mice.impute.mpmm")
> ### * mice.impute.mpmm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mice.impute.mpmm
> ### Title: Imputation by multivariate predictive mean matching
> ### Aliases: mice.impute.mpmm mpmm
> ### Keywords: datagen
> 
> ### ** Examples
> 
> # simulate data
> beta2 <- beta1 <- .5
> x <- rnorm(1000)
> e <- rnorm(1000, 0, 1)
> y <- beta1 * x + beta2 * x^2 + e
> dat <- data.frame(y = y, x = x, x2 = x^2)
> m <- as.logical(rbinom(1000, 1, 0.25))
> dat[m, c("x", "x2")] <- NA
> 
> # impute
> blk <- list("y", c("x", "x2"))
> meth <- c("", "mpmm")
> imp <- mice(dat, blocks = blk, method = meth, print = FALSE,
+     m = 2, maxit = 2)
> 
> # analyse and check
> summary(pool(with(imp, lm(y ~ x + x2))))
         term    estimate  std.error  statistic       df      p.value
1 (Intercept) -0.02689631 0.04092850 -0.6571535 919.6974 5.112466e-01
2           x  0.49553271 0.03253896 15.2289032 504.9185 2.279904e-43
3          x2  0.51239779 0.02206678 23.2203260 749.8550 2.732764e-90
> with(dat, plot(x, x2, col = mdc(1)))
> with(complete(imp), points(x[m], x2[m], col = mdc(2)))
> 
> 
> 
> cleanEx()
> nameEx("mice.impute.panImpute")
> ### * mice.impute.panImpute
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mice.impute.panImpute
> ### Title: Impute multilevel missing data using 'pan'
> ### Aliases: mice.impute.panImpute
> ### Keywords: datagen
> 
> ### ** Examples
> 
> blocks <- list(c("bmi", "chl", "hyp"), "age")
> method <- c("panImpute", "pmm")
> ini <- mice(nhanes, blocks = blocks, method = method, maxit = 0)
> pred <- ini$pred
> pred["B1", "hyp"] <- -2
> imp <- mice(nhanes, blocks = blocks, method = method, pred = pred, maxit = 1)

 iter imp variable
  1   1  bmi chl hyp
  1   2  bmi chl hyp
  1   3  bmi chl hyp
  1   4  bmi chl hyp
  1   5  bmi chl hyp
> 
> 
> 
> cleanEx()
> nameEx("mice.impute.pmm")
> ### * mice.impute.pmm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mice.impute.pmm
> ### Title: Imputation by predictive mean matching
> ### Aliases: mice.impute.pmm pmm
> ### Keywords: datagen
> 
> ### ** Examples
> 
> # We normally call mice.impute.pmm() from within mice()
> # But we may call it directly as follows (not recommended)
> 
> set.seed(53177)
> xname <- c("age", "hgt", "wgt")
> r <- stats::complete.cases(boys[, xname])
> x <- boys[r, xname]
> y <- boys[r, "tv"]
> ry <- !is.na(y)
> table(ry)
ry
FALSE  TRUE 
  503   224 
> 
> # percentage of missing data in tv
> sum(!ry) / length(ry)
[1] 0.6918845
> 
> # Impute missing tv data
> yimp <- mice.impute.pmm(y, ry, x)
> length(yimp)
[1] 503
> hist(yimp, xlab = "Imputed missing tv")
> 
> # Impute all tv data
> yimp <- mice.impute.pmm(y, ry, x, wy = rep(TRUE, length(y)))
> length(yimp)
[1] 727
> hist(yimp, xlab = "Imputed missing and observed tv")
> plot(jitter(y), jitter(yimp),
+   main = "Predictive mean matching on age, height and weight",
+   xlab = "Observed tv (n = 224)",
+   ylab = "Imputed tv (n = 224)"
+ )
> abline(0, 1)
> cor(y, yimp, use = "pair")
[1] 0.7415001
> 
> # Use blots to exclude different values per column
> # Create blots object
> blots <- make.blots(boys)
> # Exclude ml 1 through 5 from tv donor pool
> blots$tv$exclude <- c(1:5)
> # Exclude 100 random observed heights from tv donor pool
> blots$hgt$exclude <- sample(unique(boys$hgt), 100)
> imp <- mice(boys, method = "pmm", print = FALSE, blots = blots, seed=123)
> blots$hgt$exclude %in% unlist(c(imp$imp$hgt)) # MUST be all FALSE
  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [85] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [97] FALSE FALSE FALSE FALSE
> blots$tv$exclude %in% unlist(c(imp$imp$tv)) # MUST be all FALSE
[1] FALSE FALSE FALSE FALSE FALSE
> 
> # Factor quantification
> xname <- c("age", "hgt", "wgt")
> br <- boys[c(1:10, 101:110, 501:510, 601:620, 701:710), ]
> r <- stats::complete.cases(br[, xname])
> x <- br[r, xname]
> y <- factor(br[r, "tv"])
> ry <- !is.na(y)
> table(y)
y
 6  8 10 12 13 15 16 20 25 
 1  2  1  1  1  4  1  4  7 
> 
> # impute factor by optimizing canonical correlation y, x
> mice.impute.pmm(y, ry, x)
 [1] 25 25 25 20 25 25 20 25 25 25 15 25 25 25 25 25 15 15 25 15 20 15 8  25 8 
[26] 25 20 20 15 25 25 15 15 25 25 15 20 8 
Levels: 6 8 10 12 13 15 16 20 25
> 
> # only categories with at least 2 cases can be donor
> mice.impute.pmm(y, ry, x, trim = 2L)
 [1] 8  25 25 8  8  20 15 20 20 8  8  8  15 8  20 20 15 8  20 25 20 25 20 15 20
[26] 20 20 20 15 20 15 25 20 25 25 20 20 20
Levels: 6 8 10 12 13 15 16 20 25
> 
> # in addition, eliminate category 20
> mice.impute.pmm(y, ry, x, trim = 2L, exclude = 20)
 [1] 8  25 15 25 15 8  8  25 25 25 8  15 15 8  8  8  25 25 25 25 15 8  8  15 15
[26] 25 15 8  15 15 25 25 15 25 25 15 25 25
Levels: 6 8 10 12 13 15 16 20 25
> 
> # to get old behavior: as.integer(y))
> mice.impute.pmm(y, ry, x, quantify = FALSE)
 [1] 8  6  10 15 12 8  6  15 15 10 10 6  8  10 8  15 8  15 8  15 15 12 15 8  20
[26] 25 12 25 15 25 25 13 8  20 16 20 20 20
Levels: 6 8 10 12 13 15 16 20 25
> 
> 
> 
> cleanEx()
> nameEx("mice.impute.quadratic")
> ### * mice.impute.quadratic
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mice.impute.quadratic
> ### Title: Imputation of quadratic terms
> ### Aliases: mice.impute.quadratic quadratic
> ### Keywords: datagen
> 
> ### ** Examples
> 
> # Create Data
> B1 <- .5
> B2 <- .5
> X <- rnorm(1000)
> XX <- X^2
> e <- rnorm(1000, 0, 1)
> Y <- B1 * X + B2 * XX + e
> dat <- data.frame(x = X, xx = XX, y = Y)
> 
> # Impose 25 percent MCAR Missingness
> dat[0 == rbinom(1000, 1, 1 - .25), 1:2] <- NA
> 
> # Prepare data for imputation
> ini <- mice(dat, maxit = 0)
> meth <- c("quadratic", "~I(x^2)", "")
> pred <- ini$pred
> pred[, "xx"] <- 0
> 
> # Impute data
> imp <- mice(dat, meth = meth, pred = pred, quad.outcome = "y")

 iter imp variable
  1   1  x  xx
  1   2  x  xx
  1   3  x  xx
  1   4  x  xx
  1   5  x  xx
  2   1  x  xx
  2   2  x  xx
  2   3  x  xx
  2   4  x  xx
  2   5  x  xx
  3   1  x  xx
  3   2  x  xx
  3   3  x  xx
  3   4  x  xx
  3   5  x  xx
  4   1  x  xx
  4   2  x  xx
  4   3  x  xx
  4   4  x  xx
  4   5  x  xx
  5   1  x  xx
  5   2  x  xx
  5   3  x  xx
  5   4  x  xx
  5   5  x  xx
> 
> # Pool results
> pool(with(imp, lm(y ~ x + xx)))
Class: mipo    m = 5 
         term m    estimate         ubar            b            t dfcom
1 (Intercept) 5 -0.03566707 0.0016379958 5.830233e-06 0.0016449921   997
2           x 5  0.51711115 0.0010138354 4.326657e-05 0.0010657553   997
3          xx 5  0.52559459 0.0004721526 6.405920e-05 0.0005490236   997
        df         riv      lambda        fmi
1 986.3549 0.004271244 0.004253078 0.00626600
2 606.1296 0.051211356 0.048716517 0.05183994
3 164.7546 0.162809738 0.140014082 0.15026698
> 
> # Plot results
> stripplot(imp)
> plot(dat$x, dat$xx, col = mdc(1), xlab = "x", ylab = "xx")
> cmp <- complete(imp)
> points(cmp$x[is.na(dat$x)], cmp$xx[is.na(dat$x)], col = mdc(2))
> 
> 
> 
> cleanEx()
> nameEx("mice.impute.rf")
> ### * mice.impute.rf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mice.impute.rf
> ### Title: Imputation by random forests
> ### Aliases: mice.impute.rf
> ### Keywords: datagen
> 
> ### ** Examples
> 
> ## Not run: 
> ##D imp <- mice(nhanes2, meth = "rf", ntree = 3)
> ##D plot(imp)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("mice.mids")
> ### * mice.mids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mice.mids
> ### Title: Multivariate Imputation by Chained Equations (Iteration Step)
> ### Aliases: mice.mids
> ### Keywords: iteration
> 
> ### ** Examples
> 
> imp1 <- mice(nhanes, maxit = 1, seed = 123)

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
> imp2 <- mice.mids(imp1)

 iter imp variable
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
> 
> # yields the same result as
> imp <- mice(nhanes, maxit = 2, seed = 123)

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
> 
> # verification
> identical(imp$imp, imp2$imp)
[1] TRUE
> #
> 
> 
> 
> cleanEx()
> nameEx("mids")
> ### * mids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mids
> ### Title: Multiply imputed data set ('mids')
> ### Aliases: mids mids-class plot.mids print.mids summary.mids
> ### Keywords: classes
> 
> ### ** Examples
> 
> data <- data.frame(a = c(1, NA, 3), b = c(NA, 2, 3))
> q <- list(
+   a = structure(
+     list(`1` = 3, `2` = 3, `3` = 3, `4` = 3, `5` = 3),
+          row.names = "2", class = "data.frame"),
+   b = structure(
+     list(`1` = 3, `2` = 3, `3` = 2, `4` = 2, `5` = 3),
+          row.names = "1", class = "data.frame"))
> 
> imp <- mids(
+   data = data,
+   imp = q,
+   m = 5,
+   where = is.na(data),
+   blocks = list(a = "a", b = "b"),
+   nmis = colSums(is.na(data)),
+   method = c(a = "mean", b = "norm"),
+   predictorMatrix = matrix(1, nrow = 2, ncol = 2, dimnames = list(c("a", "b"), c("a", "b"))),
+   visitSequence = c("a", "b"),
+   formulas = list(a = a ~ b, b = b ~ a),
+   post = NULL,
+   blots = NULL,
+   ignore = logical(nrow(data)),
+   seed = 123,
+   iteration = 1,
+   chainMean = list(a = c(1, 2, 3), b = c(3, 2, 1)),
+   chainVar = list(a = c(1.1, 1.2, 1.3), b = c(0.9, 1.0, 1.1)),
+   loggedEvents = NULL)
> 
> print(imp)
Class: mids
Number of multiple imputations:  5 
Imputation methods:
     a      b 
"mean" "norm" 
PredictorMatrix:
  a b
a 1 1
b 1 1
> imp <- mice(nhanes, print = FALSE)
> plot(imp, bmi + chl ~ .it | .ms, layout = c(2, 1))
> 
> 
> 
> cleanEx()
> nameEx("name.blocks")
> ### * name.blocks
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: name.blocks
> ### Title: Name imputation blocks
> ### Aliases: name.blocks
> 
> ### ** Examples
> 
> blocks <- list(c("hyp", "chl"), AGE = "age", c("bmi", "hyp"), "edu")
> name.blocks(blocks)
$B1
[1] "hyp" "chl"

$AGE
[1] "age"

$B2
[1] "bmi" "hyp"

$edu
[1] "edu"

> 
> 
> 
> cleanEx()
> nameEx("name.formulas")
> ### * name.formulas
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: name.formulas
> ### Title: Name formula list elements
> ### Aliases: name.formulas
> 
> ### ** Examples
> 
> # fully conditionally specified main effects model
> form1 <- list(
+   bmi ~ age + chl + hyp,
+   hyp ~ age + bmi + chl,
+   chl ~ age + bmi + hyp
+ )
> form1 <- name.formulas(form1)
> imp1 <- mice(nhanes, formulas = form1, print = FALSE, m = 1, seed = 12199)
> 
> # same model using dot notation
> form2 <- list(bmi ~ ., hyp ~ ., chl ~ .)
> form2 <- name.formulas(form2)
> imp2 <- mice(nhanes, formulas = form2, print = FALSE, m = 1, seed = 12199)
> identical(complete(imp1), complete(imp2))
[1] FALSE
> 
> # same model using repeated multivariate imputation
> form3 <- name.blocks(list(all = bmi + hyp + chl ~ .))
> imp3 <- mice(nhanes, formulas = form3, print = FALSE, m = 1, seed = 12199)
> cmp3 <- complete(imp3)
> identical(complete(imp1), complete(imp3))
[1] FALSE
> 
> # same model using predictorMatrix
> imp4 <- mice(nhanes, print = FALSE, m = 1, seed = 12199, auxiliary = TRUE)
> identical(complete(imp1), complete(imp4))
[1] FALSE
> 
> # different model: multivariate imputation for chl and bmi
> form5 <- list(chl + bmi ~ ., hyp ~ bmi + age)
> form5 <- name.formulas(form5)
> imp5 <- mice(nhanes, formulas = form5, print = FALSE, m = 1, seed = 71712)
> 
> 
> 
> cleanEx()
> nameEx("ncc")
> ### * ncc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ncc
> ### Title: Number of complete cases
> ### Aliases: ncc
> 
> ### ** Examples
> 
> ncc(nhanes) # 13 complete cases
[1] 13
> 
> 
> 
> cleanEx()
> nameEx("nelsonaalen")
> ### * nelsonaalen
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nelsonaalen
> ### Title: Cumulative hazard rate or Nelson-Aalen estimator
> ### Aliases: nelsonaalen hazard
> ### Keywords: misc
> 
> ### ** Examples
> 
> require(MASS)
Loading required package: MASS
> 
> leuk$status <- 1 ## no censoring occurs in leuk data (MASS)
> ch <- nelsonaalen(leuk, time, status)
> plot(x = leuk$time, y = ch, ylab = "Cumulative hazard", xlab = "Time")
> 
> ### See example on http://www.engineeredsoftware.com/lmar/pe_cum_hazard_function.htm
> time <- c(43, 67, 92, 94, 149, rep(149, 7))
> status <- c(rep(1, 5), rep(0, 7))
> eng <- data.frame(time, status)
> ch <- nelsonaalen(eng, time, status)
> plot(x = time, y = ch, ylab = "Cumulative hazard", xlab = "Time")
> 
> 
> 
> cleanEx()

detaching ‘package:MASS’

> nameEx("nhanes")
> ### * nhanes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nhanes
> ### Title: NHANES example - all variables numerical
> ### Aliases: nhanes
> ### Keywords: datasets
> 
> ### ** Examples
> 
> # create 5 imputed data sets
> imp <- mice(nhanes)

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
  3   1  bmi  hyp  chl
  3   2  bmi  hyp  chl
  3   3  bmi  hyp  chl
  3   4  bmi  hyp  chl
  3   5  bmi  hyp  chl
  4   1  bmi  hyp  chl
  4   2  bmi  hyp  chl
  4   3  bmi  hyp  chl
  4   4  bmi  hyp  chl
  4   5  bmi  hyp  chl
  5   1  bmi  hyp  chl
  5   2  bmi  hyp  chl
  5   3  bmi  hyp  chl
  5   4  bmi  hyp  chl
  5   5  bmi  hyp  chl
> 
> # print the first imputed data set
> complete(imp)
   age  bmi hyp chl
1    1 27.2   1 199
2    2 22.7   1 187
3    1 28.7   1 187
4    3 25.5   1 218
5    1 20.4   1 113
6    3 24.9   1 184
7    1 22.5   1 118
8    1 30.1   1 187
9    2 22.0   1 238
10   2 28.7   1 206
11   1 30.1   1 199
12   2 22.0   1 187
13   3 21.7   1 206
14   2 28.7   2 204
15   1 29.6   1 206
16   1 22.0   1 187
17   3 27.2   2 284
18   2 26.3   2 199
19   1 35.3   1 218
20   3 25.5   2 199
21   1 26.3   1 229
22   1 33.2   1 229
23   1 27.5   1 131
24   3 24.9   1 206
25   2 27.4   1 186
> 
> 
> 
> cleanEx()
> nameEx("nhanes2")
> ### * nhanes2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nhanes2
> ### Title: NHANES example - mixed numerical and discrete variables
> ### Aliases: nhanes2
> ### Keywords: datasets
> 
> ### ** Examples
> 
> # create 5 imputed data sets
> imp <- mice(nhanes2)

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
  3   1  bmi  hyp  chl
  3   2  bmi  hyp  chl
  3   3  bmi  hyp  chl
  3   4  bmi  hyp  chl
  3   5  bmi  hyp  chl
  4   1  bmi  hyp  chl
  4   2  bmi  hyp  chl
  4   3  bmi  hyp  chl
  4   4  bmi  hyp  chl
  4   5  bmi  hyp  chl
  5   1  bmi  hyp  chl
  5   2  bmi  hyp  chl
  5   3  bmi  hyp  chl
  5   4  bmi  hyp  chl
  5   5  bmi  hyp  chl
> 
> # print the first imputed data set
> complete(imp)
     age  bmi hyp chl
1  20-39 25.5  no 187
2  40-59 22.7  no 187
3  20-39 28.7  no 187
4  60-99 22.5 yes 204
5  20-39 20.4  no 113
6  60-99 25.5  no 184
7  20-39 22.5  no 118
8  20-39 30.1  no 187
9  40-59 22.0  no 238
10 40-59 25.5  no 186
11 20-39 28.7  no 187
12 40-59 22.5 yes 184
13 60-99 21.7  no 206
14 40-59 28.7 yes 204
15 20-39 29.6  no 187
16 20-39 33.2  no 218
17 60-99 27.2 yes 284
18 40-59 26.3 yes 199
19 20-39 35.3  no 218
20 60-99 25.5 yes 199
21 20-39 35.3 yes 204
22 20-39 33.2  no 229
23 20-39 27.5  no 131
24 60-99 24.9  no 229
25 40-59 27.4  no 186
> 
> 
> 
> cleanEx()
> nameEx("nic")
> ### * nic
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nic
> ### Title: Number of incomplete cases
> ### Aliases: nic
> 
> ### ** Examples
> 
> nic(nhanes) # the remaining 12 rows
[1] 12
> nic(nhanes[, c("bmi", "hyp")]) # number of cases with incomplete bmi and hyp
[1] 9
> 
> 
> 
> cleanEx()
> nameEx("nimp")
> ### * nimp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nimp
> ### Title: Number of imputations per block
> ### Aliases: nimp
> 
> ### ** Examples
> 
> where <- is.na(nhanes)
> 
> # standard FCS
> nimp(where)
age bmi hyp chl 
  0   9   8  10 
> 
> # user-defined blocks
> nimp(where, blocks = name.blocks(list(c("bmi", "hyp"), "age", "chl")))
 B1 age chl 
 17   0  10 
> 
> 
> 
> cleanEx()
> nameEx("parlmice")
> ### * parlmice
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: parlmice
> ### Title: Wrapper function that runs MICE in parallel
> ### Aliases: parlmice
> 
> ### ** Examples
> 
> # 150 imputations in dataset nhanes, performed by 3 cores
> ## Not run: 
> ##D imp1 <- parlmice(data = nhanes, n.core = 3, n.imp.core = 50)
> ##D # Making use of arguments in mice.
> ##D imp2 <- parlmice(data = nhanes, method = "norm.nob", m = 100)
> ##D imp2$method
> ##D fit <- with(imp2, lm(bmi ~ hyp))
> ##D pool(fit)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("pattern")
> ### * pattern
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pattern
> ### Title: Datasets with various missing data patterns
> ### Aliases: pattern pattern1 pattern2 pattern3 pattern4
> ### Keywords: datasets
> 
> ### ** Examples
> 
> pattern4
    A  B  C
25 26 88 32
26 42 66 21
27 86 54 NA
28  9 92 NA
29 20 83 NA
30 89 NA 41
31 NA NA 35
32 NA NA 33
> 
> data <- rbind(pattern1, pattern2, pattern3, pattern4)
> mdpat <- cbind(expand.grid(rec = 8:1, pat = 1:4, var = 1:3), r = as.numeric(as.vector(is.na(data))))
> 
> types <- c("Univariate", "Monotone", "File matching", "General")
> tp41 <- lattice::levelplot(r ~ var + rec | as.factor(pat),
+   data = mdpat,
+   as.table = TRUE, aspect = "iso",
+   shrink = c(0.9),
+   col.regions = mdc(1:2),
+   colorkey = FALSE,
+   scales = list(draw = FALSE),
+   xlab = "", ylab = "",
+   between = list(x = 1, y = 0),
+   strip = lattice::strip.custom(
+     bg = "grey95", style = 1,
+     factor.levels = types
+   )
+ )
> print(tp41)
> 
> md.pattern(pattern4)
  A B C  
2 1 1 1 0
3 1 1 0 1
1 1 0 1 1
2 0 0 1 2
  2 3 3 8
> p <- md.pairs(pattern4)
> p
$rr
  A B C
A 6 5 3
B 5 5 2
C 3 2 5

$rm
  A B C
A 0 1 3
B 0 0 3
C 2 3 0

$mr
  A B C
A 0 0 2
B 1 0 3
C 3 3 0

$mm
  A B C
A 2 2 0
B 2 3 0
C 0 0 3

> 
> ### proportion of usable cases
> p$mr / (p$mr + p$mm)
          A B C
A 0.0000000 0 1
B 0.3333333 0 1
C 1.0000000 1 0
> 
> ### outbound statistics
> p$rm / (p$rm + p$rr)
    A         B   C
A 0.0 0.1666667 0.5
B 0.0 0.0000000 0.6
C 0.4 0.6000000 0.0
> 
> 
> fluxplot(pattern2)
> 
> 
> 
> cleanEx()
> nameEx("pool")
> ### * pool
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pool
> ### Title: Combine estimates by pooling rules
> ### Aliases: pool pool.syn
> 
> ### ** Examples
> 
> # impute missing data, analyse and pool using the classic MICE workflow
> imp <- mice(nhanes, maxit = 2, m = 2)

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
> fit <- with(data = imp, exp = lm(bmi ~ hyp + chl))
> summary(pool(fit))
         term    estimate  std.error  statistic        df    p.value
1 (Intercept) 23.22562988 5.94655201  3.9057306  2.921654 0.03126244
2         hyp -0.28251878 2.15607152 -0.1310340 18.749318 0.89714415
3         chl  0.01871978 0.03028623  0.6180954  2.893734 0.58174049
> 
> # generate fully synthetic data, analyse and pool
> imp <- mice(cars,
+   maxit = 2, m = 2,
+   where = matrix(TRUE, nrow(cars), ncol(cars))
+ )

 iter imp variable
  1   1  speed  dist
  1   2  speed  dist
  2   1  speed  dist
  2   2  speed  dist
> fit <- with(data = imp, exp = lm(speed ~ dist))
> summary(pool.syn(fit))
         term  estimate  std.error statistic          df      p.value
1 (Intercept) 9.7653453 1.11757488  8.737979 573929.9764 2.379375e-18
2        dist 0.1215079 0.02298396  5.286637    258.1255 2.655092e-07
> 
> # use a custom pooling rule for the total variance about the estimate
> # e.g. use t = b + b/m instead of t = ubar + b + b/m
> imp <- mice(nhanes, maxit = 2, m = 2)

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
> fit <- with(data = imp, exp = lm(bmi ~ hyp + chl))
> pool(fit, custom.t = ".data$b + .data$b / .data$m")
Class: mipo    m = 2 
         term m    estimate         ubar            b            t dfcom df
1 (Intercept) 2 19.54637171 1.722431e+01 5.866887e+00 8.800331e+00    22  0
2         hyp 2  0.19143306 4.535393e+00 3.423761e-01 5.135642e-01    22  0
3         chl 2  0.03269398 4.450057e-04 5.216166e-05 7.824249e-05    22  0
        riv lambda       fmi
1 0.5109249      1 0.7793846
2 0.1132348      1 0.7005723
3 0.1758236      1 0.7165108
> 
> 
> 
> 
> cleanEx()
> nameEx("pool.r.squared")
> ### * pool.r.squared
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pool.r.squared
> ### Title: Pools R^2 of m models fitted to multiply-imputed data
> ### Aliases: pool.r.squared
> ### Keywords: htest
> 
> ### ** Examples
> 
> imp <- mice(nhanes, print = FALSE, seed = 16117)
> fit <- with(imp, lm(chl ~ age + hyp + bmi))
> 
> # input: mira object
> pool.r.squared(fit)
          est      lo 95     hi 95       fmi
R^2 0.4338408 0.06503877 0.7513683 0.4176739
> pool.r.squared(fit, adjusted = TRUE)
              est      lo 95     hi 95       fmi
adj R^2 0.3507643 0.01771032 0.7091501 0.4617807
> 
> # input: mipo object
> est <- pool(fit)
> pool.r.squared(est)
          est      lo 95     hi 95       fmi
R^2 0.4338408 0.06503877 0.7513683 0.4176739
> pool.r.squared(est, adjusted = TRUE)
              est      lo 95     hi 95       fmi
adj R^2 0.3507643 0.01771032 0.7091501 0.4617807
> 
> 
> 
> cleanEx()
> nameEx("pool.scalar")
> ### * pool.scalar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pool.scalar
> ### Title: Multiple imputation pooling: univariate version
> ### Aliases: pool.scalar pool.scalar.syn
> 
> ### ** Examples
> 
> # missing data imputation with with manual pooling
> imp <- mice(nhanes, maxit = 2, m = 2, print = FALSE, seed = 18210)
> fit <- with(data = imp, lm(bmi ~ age))
> 
> # manual pooling
> summary(fit$analyses[[1]])

Call:
lm(formula = bmi ~ age)

Residuals:
    Min      1Q  Median      3Q     Max 
-6.1587 -3.0674  0.9413  2.3870  8.7413 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept)  28.1043     1.8853   14.91 2.61e-13 ***
age          -1.5457     0.9723   -1.59    0.126    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 3.957 on 23 degrees of freedom
Multiple R-squared:  0.099,	Adjusted R-squared:  0.05983 
F-statistic: 2.527 on 1 and 23 DF,  p-value: 0.1255

> summary(fit$analyses[[2]])

Call:
lm(formula = bmi ~ age)

Residuals:
    Min      1Q  Median      3Q     Max 
-7.3611 -3.6333  0.9389  2.3389  7.5389 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept)   29.189      2.019  14.460 4.92e-13 ***
age           -1.428      1.041  -1.371    0.183    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 4.236 on 23 degrees of freedom
Multiple R-squared:  0.0756,	Adjusted R-squared:  0.03541 
F-statistic: 1.881 on 1 and 23 DF,  p-value: 0.1835

> pool.scalar(Q = c(-1.5457, -1.428), U = c(0.9723^2, 1.041^2), n = 25, k = 2)
$m
[1] 2

$qhat
[1] -1.5457 -1.4280

$u
[1] 0.9453673 1.0836810

$qbar
[1] -1.48685

$ubar
[1] 1.014524

$b
[1] 0.006926645

$t
[1] 1.024914

$df
[1] 20.97025

$r
[1] 0.01024122

$fmi
[1] 0.09272831

> 
> # check: automatic pooling using broom
> pool(fit)
Class: mipo    m = 2 
         term m  estimate     ubar           b        t dfcom       df
1 (Intercept) 2 28.646618 3.814682 0.588114658 4.696854    23 10.72144
2         age 2 -1.486715 1.014543 0.006947187 1.024964    23 20.96937
        riv     lambda        fmi
1 0.2312570 0.18782190 0.30620278
2 0.0102714 0.01016697 0.09275848
> 
> # manual pooling for synthetic data created from complete data
> imp <- mice(cars,
+   maxit = 2, m = 2, print = FALSE, seed = 18210,
+   where = matrix(TRUE, nrow(cars), ncol(cars))
+ )
> fit <- with(data = imp, lm(speed ~ dist))
> 
> # manual pooling: extract Q and U
> summary(fit$analyses[[1]])

Call:
lm(formula = speed ~ dist)

Residuals:
    Min      1Q  Median      3Q     Max 
-6.9740 -2.3144 -0.1494  3.1287  7.4115 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept) 10.15208    1.06236   9.556 1.10e-12 ***
dist         0.12182    0.02121   5.744 6.15e-07 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 3.618 on 48 degrees of freedom
Multiple R-squared:  0.4074,	Adjusted R-squared:  0.395 
F-statistic:    33 on 1 and 48 DF,  p-value: 6.147e-07

> summary(fit$analyses[[2]])

Call:
lm(formula = speed ~ dist)

Residuals:
    Min      1Q  Median      3Q     Max 
-7.5830 -3.1680 -0.3479  3.3928  8.1902 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept)  9.46952    1.31136   7.221 3.37e-09 ***
dist         0.13209    0.02516   5.250 3.43e-06 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 4.271 on 48 degrees of freedom
Multiple R-squared:  0.3647,	Adjusted R-squared:  0.3515 
F-statistic: 27.56 on 1 and 48 DF,  p-value: 3.428e-06

> pool.scalar.syn(Q = c(0.12182, 0.13209), U = c(0.02121^2, 0.02516^2), n = 50, k = 2)
$m
[1] 2

$qhat
[1] 0.12182 0.13209

$u
[1] 0.0004498641 0.0006330256

$qbar
[1] 0.126955

$ubar
[1] 0.0005414448

$b
[1] 5.273645e-05

$t
[1] 0.0005678131

$df
[1] 463.7127

$r
[1] 0.1460992

$fmi
[1] NA

> 
> # check: automatic pooling using broom
> pool.syn(fit)
Class: mipo    m = 2 
         term m  estimate         ubar            b            t dfcom       df
1 (Intercept) 2 9.8108000 1.4241330840 2.329428e-01 1.5406044600    48 174.9621
2        dist 2 0.1269552 0.0005414288 5.273011e-05 0.0005677938    48 463.7928
        riv lambda fmi
1 0.2453522     NA  NA
2 0.1460860     NA  NA
> 
> 
> 
> cleanEx()
> nameEx("pool.table")
> ### * pool.table
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pool.table
> ### Title: Combines estimates from a tidy table
> ### Aliases: pool.table
> 
> ### ** Examples
> 
> # conventional mice workflow
> imp <- mice(nhanes2, m = 2, maxit = 2, seed = 1, print = FALSE)
> fit <- with(imp, lm(chl ~ age + bmi + hyp))
> pld1 <- pool(fit)
> pld1$pooled
         term m  estimate        ubar            b           t dfcom       df
1 (Intercept) 2  2.979488 3081.702712  16.77783124 3106.869459    20 18.09145
2    age40-59 2 52.005346  367.726421  13.68301760  388.250947    20 16.49810
3    age60-99 2 70.077449  498.129498 112.28149168  666.551735    20  7.29272
4         bmi 2  6.006762    3.897692   0.02197335    3.930652    20 18.08472
5      hypyes 2 -4.347543  408.567912   6.75735741  418.703948    20 17.63466
          riv      lambda       fmi
1 0.008166507 0.008100355 0.1021574
2 0.055814663 0.052864073 0.1500157
3 0.338109344 0.252676917 0.3978908
4 0.008456294 0.008385384 0.1024454
5 0.024808694 0.024208122 0.1187861
> 
> # using pool.table() on tidy table
> tbl <- summary(fit)[, c("term", "estimate", "std.error", "df.residual")]
> tbl
# A tibble: 10 × 4
   term        estimate std.error df.residual
   <chr>          <dbl>     <dbl>       <dbl>
 1 (Intercept)   0.0831     58.1           20
 2 age40-59     49.4        19.8           20
 3 age60-99     62.6        22.7           20
 4 bmi           5.90        2.07          20
 5 hypyes       -2.51       22.1           20
 6 (Intercept)   5.88       52.8           20
 7 age40-59     54.6        18.6           20
 8 age60-99     77.6        21.9           20
 9 bmi           6.11        1.87          20
10 hypyes       -6.19       18.1           20
> pld2 <- pool.table(tbl, type = "minimal")
> pld2
         term m  estimate        ubar            b           t dfcom       df
1 (Intercept) 2  2.979488 3081.702712  16.77783124 3106.869459    20 18.09145
2    age40-59 2 52.005346  367.726421  13.68301760  388.250947    20 16.49810
3    age60-99 2 70.077449  498.129498 112.28149168  666.551735    20  7.29272
4         bmi 2  6.006762    3.897692   0.02197335    3.930652    20 18.08472
5      hypyes 2 -4.347543  408.567912   6.75735741  418.703948    20 17.63466
          riv      lambda       fmi
1 0.008166507 0.008100355 0.1021574
2 0.055814663 0.052864073 0.1500157
3 0.338109344 0.252676917 0.3978908
4 0.008456294 0.008385384 0.1024454
5 0.024808694 0.024208122 0.1187861
> 
> identical(pld1$pooled, pld2)
[1] TRUE
> 
> # conventional workflow: all numerical output
> all1 <- summary(pld1, type = "all", conf.int = TRUE)
> all1
         term m  estimate std.error   statistic       df     p.value
1 (Intercept) 2  2.979488 55.739299  0.05345398 18.09145 0.957956041
2    age40-59 2 52.005346 19.704085  2.63931807 16.49810 0.017526719
3    age60-99 2 70.077449 25.817663  2.71432191  7.29272 0.028863238
4         bmi 2  6.006762  1.982587  3.02975940 18.08472 0.007175381
5      hypyes 2 -4.347543 20.462257 -0.21246647 17.63466 0.834179684
        2.5 %    97.5 %    conf.low conf.high         riv      lambda       fmi
1 -114.082019 120.04099 -114.082019 120.04099 0.008166507 0.008100355 0.1021574
2   10.336814  93.67388   10.336814  93.67388 0.055814663 0.052864073 0.1500157
3    9.521628 130.63327    9.521628 130.63327 0.338109344 0.252676917 0.3978908
4    1.842899  10.17062    1.842899  10.17062 0.008456294 0.008385384 0.1024454
5  -47.401078  38.70599  -47.401078  38.70599 0.024808694 0.024208122 0.1187861
         ubar            b           t dfcom
1 3081.702712  16.77783124 3106.869459    20
2  367.726421  13.68301760  388.250947    20
3  498.129498 112.28149168  666.551735    20
4    3.897692   0.02197335    3.930652    20
5  408.567912   6.75735741  418.703948    20
> 
> # pool.table workflow: all numerical output
> all2 <- pool.table(tbl)
> all2
         term m  estimate std.error   statistic       df     p.value
1 (Intercept) 2  2.979488 55.739299  0.05345398 18.09145 0.957956041
2    age40-59 2 52.005346 19.704085  2.63931807 16.49810 0.017526719
3    age60-99 2 70.077449 25.817663  2.71432191  7.29272 0.028863238
4         bmi 2  6.006762  1.982587  3.02975940 18.08472 0.007175381
5      hypyes 2 -4.347543 20.462257 -0.21246647 17.63466 0.834179684
        2.5 %    97.5 %    conf.low conf.high         riv      lambda       fmi
1 -114.082019 120.04099 -114.082019 120.04099 0.008166507 0.008100355 0.1021574
2   10.336814  93.67388   10.336814  93.67388 0.055814663 0.052864073 0.1500157
3    9.521628 130.63327    9.521628 130.63327 0.338109344 0.252676917 0.3978908
4    1.842899  10.17062    1.842899  10.17062 0.008456294 0.008385384 0.1024454
5  -47.401078  38.70599  -47.401078  38.70599 0.024808694 0.024208122 0.1187861
         ubar            b           t dfcom
1 3081.702712  16.77783124 3106.869459    20
2  367.726421  13.68301760  388.250947    20
3  498.129498 112.28149168  666.551735    20
4    3.897692   0.02197335    3.930652    20
5  408.567912   6.75735741  418.703948    20
> 
> class(all1) <- "data.frame"
> identical(all1, all2)
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("popmis")
> ### * popmis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: popmis
> ### Title: Hox pupil popularity data with missing popularity scores
> ### Aliases: popmis
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> popmis[1:3, ]
  pupil school popular sex texp const teachpop
1     1      1      NA   1   24     1        7
2     2      1      NA   0   24     1        7
3     3      1       7   1   24     1        6
> 
> 
> 
> cleanEx()
> nameEx("pops")
> ### * pops
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pops
> ### Title: Project on preterm and small for gestational age infants (POPS)
> ### Aliases: pops pops.pred
> ### Keywords: datasets
> 
> ### ** Examples
> 
> pops <- data(pops)
> 
> 
> 
> cleanEx()
> nameEx("potthoffroy")
> ### * potthoffroy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: potthoffroy
> ### Title: Potthoff-Roy data
> ### Aliases: potthoffroy
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### create missing values at age 10 as in Little and Rubin (1987)
> 
> phr <- potthoffroy
> idmis <- c(3, 6, 9, 10, 13, 16, 23, 24, 27)
> phr[idmis, 4] <- NA
> phr
   id sex   d8  d10  d12  d14
1   1   F 21.0 20.0 21.5 23.0
2   2   F 21.0 21.5 24.0 25.5
3   3   F 20.5   NA 24.5 26.0
4   4   F 23.5 24.5 25.0 26.5
5   5   F 21.5 23.0 22.5 23.5
6   6   F 20.0   NA 21.0 22.5
7   7   F 21.5 22.5 23.0 25.0
8   8   F 23.0 23.0 23.5 24.0
9   9   F 20.0   NA 22.0 21.5
10 10   F 16.5   NA 19.0 19.5
11 11   F 24.5 25.0 28.0 28.0
12 12   M 26.0 25.0 29.0 31.0
13 13   M 21.5   NA 23.0 26.5
14 14   M 23.0 22.5 24.0 27.5
15 15   M 25.5 27.5 26.5 27.0
16 16   M 20.0   NA 22.5 26.0
17 17   M 24.5 25.5 27.0 28.5
18 18   M 22.0 22.0 24.5 26.5
19 19   M 24.0 21.5 24.5 25.5
20 20   M 23.0 20.5 31.0 26.0
21 21   M 27.5 28.0 31.0 31.5
22 22   M 23.0 23.0 23.5 25.0
23 23   M 21.5   NA 24.0 28.0
24 24   M 17.0   NA 26.0 29.5
25 25   M 22.5 25.5 25.5 26.0
26 26   M 23.0 24.5 26.0 30.0
27 27   M 22.0   NA 23.5 25.0
> 
> md.pattern(phr)
   id sex d8 d12 d14 d10  
18  1   1  1   1   1   1 0
9   1   1  1   1   1   0 1
    0   0  0   0   0   9 9
> 
> 
> 
> cleanEx()
> nameEx("quickpred")
> ### * quickpred
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: quickpred
> ### Title: Quick selection of predictors from the data
> ### Aliases: quickpred
> ### Keywords: misc
> 
> ### ** Examples
> 
> # default: include all predictors with absolute correlation over 0.1
> quickpred(nhanes)
    age bmi hyp chl
age   0   0   0   0
bmi   1   0   1   1
hyp   1   0   0   1
chl   1   1   1   0
> 
> # all predictors with absolute correlation over 0.4
> quickpred(nhanes, mincor = 0.4)
    age bmi hyp chl
age   0   0   0   0
bmi   0   0   0   0
hyp   1   0   0   1
chl   1   0   1   0
> 
> # include age and bmi, exclude chl
> quickpred(nhanes, mincor = 0.4, inc = c("age", "bmi"), exc = "chl")
    age bmi hyp chl
age   0   0   0   0
bmi   1   0   0   0
hyp   1   1   0   0
chl   1   1   1   0
> 
> # only include predictors with at least 30% usable cases
> quickpred(nhanes, minpuc = 0.3)
    age bmi hyp chl
age   0   0   0   0
bmi   1   0   0   0
hyp   1   0   0   0
chl   1   1   1   0
> 
> # use low threshold for bmi, and high thresholds for hyp and chl
> pred <- quickpred(nhanes, mincor = c(0, 0.1, 0.5, 0.5))
> pred
    age bmi hyp chl
age   0   0   0   0
bmi   1   0   1   1
hyp   1   0   0   0
chl   1   0   0   0
> 
> # use it directly from mice
> imp <- mice(nhanes, pred = quickpred(nhanes, minpuc = 0.25, include = "age"))

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
  3   1  bmi  hyp  chl
  3   2  bmi  hyp  chl
  3   3  bmi  hyp  chl
  3   4  bmi  hyp  chl
  3   5  bmi  hyp  chl
  4   1  bmi  hyp  chl
  4   2  bmi  hyp  chl
  4   3  bmi  hyp  chl
  4   4  bmi  hyp  chl
  4   5  bmi  hyp  chl
  5   1  bmi  hyp  chl
  5   2  bmi  hyp  chl
  5   3  bmi  hyp  chl
  5   4  bmi  hyp  chl
  5   5  bmi  hyp  chl
> 
> 
> 
> cleanEx()
> nameEx("selfreport")
> ### * selfreport
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: selfreport
> ### Title: Self-reported and measured BMI
> ### Aliases: selfreport mgg
> ### Keywords: datasets
> 
> ### ** Examples
> 
> md.pattern(selfreport[, c("age", "sex", "hm", "hr", "wm", "wr")])
     age sex hr wr  hm  wm     
1257   1   1  1  1   1   1    0
803    1   1  1  1   0   0    2
       0   0  0  0 803 803 1606
> 
> ### FIMD Section 7.3.5 Application
> 
> bmi <- function(h, w) {
+   return(w / (h / 100)^2)
+ }
> init <- mice(selfreport, maxit = 0)
Warning: Number of logged events: 2
> meth <- init$meth
> meth["bm"] <- "~bmi(hm,wm)"
> pred <- init$pred
> pred[, c("src", "id", "web", "bm", "br")] <- 0
> imp <- mice(selfreport, pred = pred, meth = meth, seed = 66573, maxit = 2, m = 1)

 iter imp variable
  1   1  hm  wm  edu  etn  bm
  2   1  hm  wm  edu  etn  bm
Warning: Number of logged events: 6
> ## imp <- mice(selfreport, pred=pred, meth=meth, seed=66573, maxit=20, m=10)
> 
> ### Like FIMD Figure 7.6
> 
> cd <- complete(imp, 1)
> xy <- xy.coords(cd$bm, cd$br - cd$bm)
> plot(xy,
+   col = mdc(2), xlab = "Measured BMI", ylab = "Reported - Measured BMI",
+   xlim = c(17, 45), ylim = c(-5, 5), type = "n", lwd = 0.7
+ )
> polygon(x = c(30, 20, 30), y = c(0, 10, 10), col = "grey95", border = NA)
> polygon(x = c(30, 40, 30), y = c(0, -10, -10), col = "grey95", border = NA)
> abline(0, 0, lty = 2, lwd = 0.7)
> 
> idx <- cd$src == "krul"
> xyc <- xy
> xyc$x <- xy$x[idx]
> xyc$y <- xy$y[idx]
> xys <- xy
> xys$x <- xy$x[!idx]
> xys$y <- xy$y[!idx]
> points(xyc, col = mdc(1), cex = 0.7)
> points(xys, col = mdc(2), cex = 0.7)
> lines(lowess(xyc), col = mdc(4), lwd = 2)
> lines(lowess(xys), col = mdc(5), lwd = 2)
> text(1:4, x = c(40, 28, 20, 32), y = c(4, 4, -4, -4), cex = 3)
> box(lwd = 1)
> 
> 
> 
> cleanEx()
> nameEx("stripplot.mids")
> ### * stripplot.mids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stripplot.mids
> ### Title: Stripplot of observed and imputed data
> ### Aliases: stripplot.mids stripplot
> ### Keywords: hplot
> 
> ### ** Examples
> 
> imp <- mice(boys, maxit = 1)

 iter imp variable
  1   1  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   2  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   3  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   4  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   5  hgt  wgt  bmi  hc  gen  phb  tv  reg
> 
> ### stripplot, all numerical variables
> ## Not run: 
> ##D stripplot(imp)
> ## End(Not run)
> 
> ### same, but with improved display
> ## Not run: 
> ##D stripplot(imp, col = c("grey", mdc(2)), pch = c(1, 20))
> ## End(Not run)
> 
> ### distribution per imputation of height, weight and bmi
> ### labeled by their own missingness
> ## Not run: 
> ##D stripplot(imp, hgt + wgt + bmi ~ .imp,
> ##D   cex = c(2, 4), pch = c(1, 20), jitter = FALSE,
> ##D   layout = c(3, 1)
> ##D )
> ## End(Not run)
> 
> ### same, but labeled with the missingness of wgt (just four cases)
> ## Not run: 
> ##D stripplot(imp, hgt + wgt + bmi ~ .imp,
> ##D   na = wgt, cex = c(2, 4), pch = c(1, 20), jitter = FALSE,
> ##D   layout = c(3, 1)
> ##D )
> ## End(Not run)
> 
> ### distribution of age and height, labeled by missingness in height
> ### most height values are missing for those around
> ### the age of two years
> ### some additional missings occur in region WEST
> ## Not run: 
> ##D stripplot(imp, age + hgt ~ .imp | reg, hgt,
> ##D   col = c(grDevices::hcl(0, 0, 40, 0.2), mdc(2)), pch = c(1, 20)
> ##D )
> ## End(Not run)
> 
> ### heavily jitted relation between two categorical variables
> ### labeled by missingness of gen
> ### aggregated over all imputed data sets
> ## Not run: 
> ##D stripplot(imp, gen ~ phb, factor = 2, cex = c(8, 1), hor = TRUE)
> ## End(Not run)
> 
> ### circle fun
> stripplot(imp, gen ~ .imp,
+   na = wgt, factor = 2, cex = c(8.6),
+   hor = FALSE, outer = TRUE, scales = "free", pch = c(1, 19)
+ )
> 
> 
> 
> cleanEx()
> nameEx("supports.transparent")
> ### * supports.transparent
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: supports.transparent
> ### Title: Supports semi-transparent foreground colors?
> ### Aliases: supports.transparent transparent
> ### Keywords: hplot
> 
> ### ** Examples
> 
> 
> supports.transparent()
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("tbc")
> ### * tbc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tbc
> ### Title: Terneuzen birth cohort
> ### Aliases: tbc tbc.target terneuzen
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data <- tbc
> md.pattern(data)
     id occ nocc first typ age sex wgt.z hgt.z bmi.z   ao     
1202  1   1    1     1   1   1   1     1     1     1    1    0
1886  1   1    1     1   1   1   1     1     1     1    0    1
331   1   1    1     1   1   1   1     1     0     0    1    2
522   1   1    1     1   1   1   1     1     0     0    0    3
3     1   1    1     1   1   1   1     0     1     0    1    2
7     1   1    1     1   1   1   1     0     1     0    0    3
      0   0    0     0   0   0   0    10   853   863 2415 4141
> 
> 
> 
> cleanEx()
> nameEx("version")
> ### * version
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: version
> ### Title: Echoes the package version number
> ### Aliases: version
> ### Keywords: misc
> 
> ### ** Examples
> 
> version()
[1] "mice 3.18.0 2025-05-27 /usr/local/lib/R/site-library"
> version("base")
[1] "base 4.5.0  /usr/local/lib/R/library"
> 
> 
> 
> cleanEx()
> nameEx("walking")
> ### * walking
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: walking
> ### Title: Walking disability data
> ### Aliases: walking
> ### Keywords: datasets
> 
> ### ** Examples
> 
> md.pattern(walking)
    sex age src  YA  YB    
290   1   1   1   1   1   0
300   1   1   1   1   0   1
294   1   1   1   0   1   1
6     1   1   1   0   0   2
      0   0   0 300 306 606
> 
> micemill <- function(n) {
+   for (i in 1:n) {
+     imp <<- mice.mids(imp) # global assignment
+     cors <- with(imp, cor(as.numeric(YA),
+       as.numeric(YB),
+       method = "kendall"
+     ))
+     tau <<- rbind(tau, unlist(cors$analyses)) # global assignment
+   }
+ }
> 
> plotit <- function() {
+   matplot(
+     x = 1:nrow(tau), y = tau,
+     ylab = expression(paste("Kendall's ", tau)),
+     xlab = "Iteration", type = "l", lwd = 1,
+     lty = 1:10, col = "black"
+   )
+ }
> 
> tau <- NULL
> imp <- mice(walking, max = 0, m = 10, seed = 92786)
> pred <- imp$pred
> pred[, c("src", "age", "sex")] <- 0
> imp <- mice(walking, max = 0, m = 3, seed = 92786, pred = pred)
> micemill(5)

 iter imp variable
  1   1  YA  YB
  1   2  YA  YB
  1   3  YA  YB

 iter imp variable
  2   1  YA  YB
  2   2  YA  YB
  2   3  YA  YB

 iter imp variable
  3   1  YA  YB
  3   2  YA  YB
  3   3  YA  YB

 iter imp variable
  4   1  YA  YB
  4   2  YA  YB
  4   3  YA  YB

 iter imp variable
  5   1  YA  YB
  5   2  YA  YB
  5   3  YA  YB
> plotit()
> 
> ### to get figure 9.8 van Buuren (2018) use m=10 and micemill(20)
> 
> 
> 
> cleanEx()
> nameEx("windspeed")
> ### * windspeed
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: windspeed
> ### Title: Subset of Irish wind speed data
> ### Aliases: windspeed
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> windspeed[1:3, ]
  RochePt Rosslare Shannon Dublin Clones MalinHead
1    4.92     7.29    3.67   3.71   2.71      7.83
2   22.50    19.41   16.13  16.08  16.58     19.67
3    7.54     9.29   11.00   1.71   9.71     15.37
> 
> 
> 
> cleanEx()
> nameEx("with.mids")
> ### * with.mids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: with.mids
> ### Title: Evaluate an expression in multiple imputed datasets
> ### Aliases: with.mids with
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> imp <- mice(nhanes2, m = 2, print = FALSE, seed = 14221)
> 
> # descriptive statistics
> getfit(with(imp, table(hyp, age)))
Component 1 :
     age
hyp   20-39 40-59 60-99
  no     12     4     3
  yes     0     3     3

Component 2 :
     age
hyp   20-39 40-59 60-99
  no     11     4     4
  yes     1     3     2

> 
> # model fitting and testing
> fit1 <- with(imp, lm(bmi ~ age + hyp + chl))
> fit2 <- with(imp, glm(hyp ~ age + chl, family = binomial))
> fit3 <- with(imp, anova(lm(bmi ~ age + chl)))
> 
> 
> 
> cleanEx()
> nameEx("xyplot.mids")
> ### * xyplot.mids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: xyplot.mids
> ### Title: Scatterplot of observed and imputed data
> ### Aliases: xyplot.mids xyplot
> ### Keywords: hplot
> 
> ### ** Examples
> 
> imp <- mice(boys, maxit = 1)

 iter imp variable
  1   1  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   2  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   3  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   4  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   5  hgt  wgt  bmi  hc  gen  phb  tv  reg
> 
> # xyplot: scatterplot by imputation number
> # observe the erroneous outlying imputed values
> # (caused by imputing hgt from bmi)
> xyplot(imp, hgt ~ age | .imp, pch = c(1, 20), cex = c(1, 1.5))
> 
> # same, but label with missingness of wgt (four cases)
> xyplot(imp, hgt ~ age | .imp, na.group = wgt, pch = c(1, 20), cex = c(1, 1.5))
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  19.772 18.696 17.401 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
