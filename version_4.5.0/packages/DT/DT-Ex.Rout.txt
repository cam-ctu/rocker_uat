
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "DT"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('DT')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("coerceValue")
> ### * coerceValue
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: coerceValue
> ### Title: Coerce a character string to the same type as a target value
> ### Aliases: coerceValue
> 
> ### ** Examples
> 
> library(DT)
> coerceValue("100", 1L)
[1] 100
> coerceValue("1.23", 3.1416)
[1] 1.23
> coerceValue("2018-02-14", Sys.Date())
[1] "2018-02-14"
> coerceValue("2018-02-14T22:18:52Z", Sys.time())
[1] "2018-02-14 22:18:52 UTC"
> coerceValue("setosa", iris$Species)
[1] "setosa"
> coerceValue("setosa2", iris$Species)  # NA
Warning in coerceValue("setosa2", iris$Species) :
  New value(s) "setosa2" not in the original factor levels: "setosa, versicolor, virginica"; will be coerced to NA.
[1] NA
> coerceValue("FALSE", TRUE)  # not supported
Warning in coerceValue("FALSE", TRUE) :
  The data type is not supported: logical
[1] "FALSE"
> 
> 
> 
> cleanEx()
> nameEx("dataTableAjax")
> ### * dataTableAjax
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dataTableAjax
> ### Title: Register a data object in a shiny session for DataTables
> ### Aliases: dataTableAjax
> 
> ### ** Examples
> 
> DTApp = function(data, ..., options = list()) {
+   library(shiny)
+   library(DT)
+   shinyApp(
+     ui = fluidPage(
+       title = 'Server-side processing of DataTables',
+       fluidRow(
+         DT::dataTableOutput('tbl')
+       )
+     ),
+     server = function(input, output, session) {
+       options$serverSide = TRUE
+       options$ajax = list(url = dataTableAjax(session, data, outputId = 'tbl'))
+       # create a widget using an Ajax URL created above
+       widget = datatable(data, ..., options = options)
+       output$tbl = DT::renderDataTable(widget)
+     }
+   )
+ }
> 
> if (interactive()) DTApp(iris)
> if (interactive()) DTApp(iris, filter = 'top')
> 
> 
> 
> cleanEx()
> nameEx("dataTableOutput")
> ### * dataTableOutput
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dataTableOutput
> ### Title: Helper functions for using DT in Shiny
> ### Aliases: dataTableOutput DTOutput renderDataTable renderDT
> 
> ### ** Examples
> 
> if (interactive()) {
+   library(shiny)
+   library(DT)
+   shinyApp(
+     ui = fluidPage(fluidRow(column(12, DTOutput('tbl')))),
+     server = function(input, output) {
+       output$tbl = renderDT(
+         iris, options = list(lengthChange = FALSE)
+       )
+     }
+   )
+ }
> 
> 
> 
> cleanEx()
> nameEx("datatable")
> ### * datatable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: datatable
> ### Title: Create an HTML table widget using the DataTables library
> ### Aliases: datatable
> 
> ### ** Examples
> 
> library(DT)
> 
> # see the package vignette for examples and the link to website
> vignette('DT', package = 'DT')
starting httpd help server ... done
> 
> # some boring edge cases for testing purposes
> m = matrix(nrow = 0, ncol = 5, dimnames = list(NULL, letters[1:5]))
> datatable(m)  # zero rows
sh: 1: xdg-open: not found
> datatable(as.data.frame(m))
> 
> m = matrix(1, dimnames = list(NULL, 'a'))
> datatable(m)  # one row and one column
> datatable(as.data.frame(m))
> 
> m = data.frame(a = 1, b = 2, c = 3)
> datatable(m)
> datatable(as.matrix(m))
> 
> # dates
> datatable(data.frame(
+   date = seq(as.Date("2015-01-01"), by = "day", length.out = 5), x = 1:5
+ ))
> datatable(data.frame(x = Sys.Date()))
> datatable(data.frame(x = Sys.time()))
> 
> 
> 
> cleanEx()
> nameEx("doColumnSearch")
> ### * doColumnSearch
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: doColumnSearch
> ### Title: Server-side searching
> ### Aliases: doColumnSearch doGlobalSearch
> 
> ### ** Examples
> 
> doGlobalSearch(iris, "versi")
 [1]  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69
[20]  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88
[39]  89  90  91  92  93  94  95  96  97  98  99 100
> doGlobalSearch(iris, "v.r.i", options = list(regex = TRUE))
  [1]  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68
 [19]  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86
 [37]  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104
 [55] 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122
 [73] 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140
 [91] 141 142 143 144 145 146 147 148 149 150
> 
> doColumnSearch(iris$Species, "[\"versicolor\"]")
 [1]  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69
[20]  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88
[39]  89  90  91  92  93  94  95  96  97  98  99 100
> doColumnSearch(iris$Sepal.Length, "4 ... 5")
 [1]   2   3   4   5   7   8   9  10  12  13  14  23  25  26  27  30  31  35  36
[20]  38  39  41  42  43  44  46  48  50  58  61  94 107
> 
> 
> 
> cleanEx()
> nameEx("formatCurrency")
> ### * formatCurrency
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: formatCurrency
> ### Title: Format table columns
> ### Aliases: formatCurrency formatString formatPercentage formatRound
> ###   formatSignif formatDate formatStyle
> 
> ### ** Examples
> 
> library(DT)
> m = cbind(matrix(rnorm(120, 1e5, 1e6), 40), runif(40), rnorm(40, 100))
> colnames(m) = head(LETTERS, ncol(m))
> m
                 A           B           C          D         E
 [1,]  -526453.811   -64523.60  -468668.73 0.30644326  98.08564
 [2,]   283643.324  -153361.68   -35178.62 0.57835394 101.17658
 [3,]  -735628.612   796963.38  1278087.00 0.91037030  98.33503
 [4,]  1695280.802   656663.20 -1423566.80 0.14260408  99.53647
 [5,]   429507.772  -588755.69   693946.19 0.41504763  98.88408
 [6,]  -720468.384  -607495.16   432950.37 0.21092575  99.24918
 [7,]   587429.052   464581.96  1163099.84 0.42875037 102.08717
 [8,]   838324.705   868532.92  -204183.92 0.13268998 100.01740
 [9,]   675781.352   -12346.21   470018.81 0.46009645  98.71370
[10,]  -205388.387   981107.73   367098.79 0.94295706  98.35939
[11,]  1611781.168   498105.88  -442520.03 0.76197386 100.45019
[12,]   489843.236  -512026.39  1307867.81 0.93290983  99.98144
[13,]  -521240.581   441119.69  1260402.62 0.47067850  99.68193
[14,] -2114699.887 -1029363.10   800213.65 0.60358807  99.07064
[15,]  1224930.918  1533023.70  1686833.45 0.48498968  98.51254
[16,]    55066.391  2080399.90   658486.43 0.10880632  98.92481
[17,]    83809.737  -267221.48 -1176592.21 0.24772683 101.00003
[18,]  1043836.211  -944134.63  -473265.41 0.49851453  99.37873
[19,]   921221.195   669719.63 -1124612.61 0.37286671  98.61557
[20,]   693901.321   -35054.60  -373400.64 0.93469137 101.86929
[21,]  1018977.372  2501617.76  -520366.68 0.52398608 100.42510
[22,]   882136.301    60760.00   142115.87 0.31714467  99.76135
[23,]   174564.983   789739.36  -810921.65 0.27796603 101.05848
[24,] -1889351.696   128002.16   258028.77 0.78754051 100.88642
[25,]   719825.748  -643273.21  -554584.64 0.70246251  99.38076
[26,]    43871.260   288792.30  1867287.27 0.16502764 102.20610
[27,]   -55795.507 -1704958.63   816707.48 0.06445754  99.74497
[28,] -1370752.384  1565554.86  1010174.23 0.75470562  98.57551
[29,]  -378150.055   253253.34   484185.36 0.62041003  99.85560
[30,]   517941.560  2272611.67  1782176.08 0.16957677 100.20754
[31,]  1458679.552   575509.53  -535736.45 0.06221405 102.30798
[32,]    -2787.727  -609946.43  -361644.73 0.10902927 100.10580
[33,]   487671.612   710726.35  1532282.24 0.38171635 100.45700
[34,]    46194.959  -834097.63  -550696.35 0.16931091  99.92285
[35,] -1277059.557 -1153633.40  -107380.74 0.29865254  99.66600
[36,]  -314994.563   391446.24  -292807.93 0.19220954  99.96527
[37,]  -294289.954  -343291.87  -219992.87 0.25717002 100.78764
[38,]    40686.603   101105.35  -179113.30 0.18123182 102.07525
[39,]  1200025.372   174341.32   594188.33 0.47731371 101.02739
[40,]   863175.748  -489520.95   -77330.48 0.77073704 101.20791
> 
> # format the columns A and C as currency, and D as percentages
> datatable(m) %>% formatCurrency(c('A', 'C')) %>% formatPercentage('D', 2)
> 
> # the first two columns are Euro currency, and round column E to 3 decimal places
> datatable(m) %>% formatCurrency(1:2, '\U20AC') %>% formatRound('E', 3)
> 
> # render vapor pressure with only two significant figures.
> datatable(pressure) %>% formatSignif('pressure',2)
> 
> # apply CSS styles to columns
> datatable(iris) %>%
+   formatStyle('Sepal.Length', fontWeight = styleInterval(5, c('bold', 'weight'))) %>%
+   formatStyle('Sepal.Width',
+     color = styleInterval(3.4, c('red', 'white')),
+     backgroundColor = styleInterval(3.4, c('yellow', 'gray'))
+   )
> 
> 
> 
> cleanEx()
> nameEx("tableHeader")
> ### * tableHeader
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tableHeader
> ### Title: Generate a table header or footer from column names
> ### Aliases: tableHeader tableFooter
> 
> ### ** Examples
> 
> library(DT)
> tableHeader(iris)  # or equivalently,
<thead>
  <tr>
    <th>Sepal.Length</th>
    <th>Sepal.Width</th>
    <th>Petal.Length</th>
    <th>Petal.Width</th>
    <th>Species</th>
  </tr>
</thead>
> tableHeader(colnames(iris))
<thead>
  <tr>
    <th>Sepal.Length</th>
    <th>Sepal.Width</th>
    <th>Petal.Length</th>
    <th>Petal.Width</th>
    <th>Species</th>
  </tr>
</thead>
> tableFooter(iris)  # footer
<tfoot>
  <tr>
    <th>Sepal.Length</th>
    <th>Sepal.Width</th>
    <th>Petal.Length</th>
    <th>Petal.Width</th>
    <th>Species</th>
  </tr>
</tfoot>
> 
> library(htmltools)
> tags$table(tableHeader(iris), tableFooter(iris))
<table>
  <thead>
    <tr>
      <th>Sepal.Length</th>
      <th>Sepal.Width</th>
      <th>Petal.Length</th>
      <th>Petal.Width</th>
      <th>Species</th>
    </tr>
  </thead>
  <tfoot>
    <tr>
      <th>Sepal.Length</th>
      <th>Sepal.Width</th>
      <th>Petal.Length</th>
      <th>Petal.Width</th>
      <th>Species</th>
    </tr>
  </tfoot>
</table>
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:htmltools’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.497 0.086 0.585 0 0.001 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
