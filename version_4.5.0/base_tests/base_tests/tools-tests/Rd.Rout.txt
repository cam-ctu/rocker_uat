
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> require("tools")
Loading required package: tools
> 
> # -------------------------------------------------------------------
> # prepare_Rd() is OK with a top level \Sexpr that is yet to be rendered
> 
> txt <- "
+ \\name{foo}
+ \\title{Title}
+ \\description{Desc.}
+ \\Sexpr[stage=render,results=rd]{\"\\\\\\details{This is dynamic.}\"}
+ "
> 
> rd <- parse_Rd(con <- textConnection(txt)); close(con)
> 
> warn <- NULL
> withCallingHandlers(
+   rd2 <- tools:::prepare_Rd(rd),
+   warning = function(w) { warn <<- w; invokeRestart("muffleWarning") }
+ )
> stopifnot(is.null(warn))
> stopifnot("\\Sexpr" %in% tools:::RdTags(rd2))
> 
> 
> ## \Sexpr[stage=build, results=hide]{ <a dozen "empty" lines> }
> tf <- textConnection("RdTeX", "w")
> Rd2latex("Rd-Sexpr-hide-empty.Rd", tf, stages="build")
> tex <- textConnectionValue(tf); close(tf); rm(tf)
> (H2end <- tex[grep("^Hello", tex):length(tex)])
[1] "Hello"          ""               "\\end{Details}"
> stopifnot((n <- length(H2end)) <= 4, # currently '3'; was 13 in R < 4.2.0
+           H2end[-c(1L,n)] == "")     # also had \\AsIs{ .. }  " "  "   "
> 
> 
> ## checkRd() gives file name and correct line number of \Sexpr[results=rd] chunk
> stopifnot(grepl("Rd-Sexpr-warning.Rd:5:",
+                 print(checkRd("Rd-Sexpr-warning.Rd", stages = "build")),
+                 fixed = TRUE))
checkRd: (7) Rd-Sexpr-warning.Rd:5: Tag \strong is invalid in a \code block
> 
> ## processRdChunk() gives file name and location of eval error
> (msg <- tryCatch(checkRd(file_path_as_absolute("Rd-Sexpr-error.Rd")),
+                  error = conditionMessage))
[1] "Rd-Sexpr-error.Rd:4-7: non-numeric argument to binary operator"
> stopifnot(startsWith(msg, "Rd-Sexpr-error.Rd:4-7:"),
+           length(checkRd("Rd-Sexpr-error.Rd", stages = NULL)) == 0)
> ## file name and line numbers were missing in R < 4.2.0
> 
> 
> ## \doi with hash symbol or Rd specials
> rd <- parse_Rd("doi.Rd")
> writeLines(out <- capture.output(Rd2txt(rd, stages = "build")))
_T_e_s_t \_d_o_i _w_i_t_h _h_a_s_h _o_r _R_d _s_p_e_c_i_a_l_s

_D_e_s_c_r_i_p_t_i_o_n:

     doi:10.1000/456#789 <https://doi.org/10.1000/456%23789>

     doi:10.1000/{} <https://doi.org/10.1000/%7B%7D>

> stopifnot(grepl("10.1000/456#789", out[5], fixed = TRUE),
+           grepl("doi.org/10.1000/456%23789", out[5], fixed = TRUE),
+           grepl("10.1000/{}", out[7], fixed = TRUE),
+           grepl("doi.org/10.1000/%7B%7D", out[7], fixed = TRUE))
> ## R < 4.2.0 failed to encode the hash and lost {}
> 
> 
> ## \title and \section name should not end in a period
> rd <- parse_Rd(textConnection(r"(
+ \name{test}
+ \title{title.}
+ \description{description}
+ \section{section.}{nothing}
+ )"))
> stopifnot(identical(endsWith(print(checkRd(rd)), "end in a period"),
+                     rep(TRUE, 2)))
checkRd: (-5) <connection>:3: \title should not end in a period
checkRd: (-5) <connection>:5: \section name should not end in a period
> 
> ## checkRd() with duplicated \name (is documented to fail from prepare_Rd)
> assertError(checkRd(parse_Rd(textConnection(r"(
+ \name{test}\title{test}\name{test2}
+ )"))), verbose = TRUE)
Asserted error: <connection>: Sections \title, and \name must exist and be unique in Rd files
> ## no error in R < 4.4.0
> 
> ## prepared NEWS should check cleanly
> NEWS_Rd <- readRDS(file.path(R.home("doc"), "NEWS.rds"))
> stopifnot(inherits(NEWS_Rd, "Rd"),
+           length(print(checkRd(NEWS_Rd))) == 0L)
> ## "Must have a \description" in R < 4.4.0, now moved to checkRdContents()
> 
> ## checkRd() raises some instances of "lost braces"
> Sys.setenv("_R_CHECK_RD_NOTE_LOST_BRACES_" = TRUE)
> bad <- function (Rd) sum(startsWith(checkRd(Rd), "checkRd: (-1) "))
> stopifnot(bad("Rd-braces_ignored.Rd") == 0L,
+           bad("Rd-braces_reported.Rd") == 10L)
> 
> 
> ## An unmatched un-escaped '{' in a comment in \examples{} ... should *NOT* trip up, but does
> 
> txt <- r"(\title{Commented left-brace in Example}
+ \name{ex-comm-brace}
+ \examples{
+   if(1 <= 11) { # if(require("MASS")) \{  << only works when escaped with '\\'
+     fractions(355, 112)
+   }% if(.)
+ }
+ \keyword{misc})"
> ## these all work fine:
> 
> (rd1 <- parse_Rd(con <- textConnection(txt))); close(con)
\title{Commented left-brace in Example}
\name{ex-comm-brace}
\examples{
  if(1 <= 11) { # if(require("MASS")) {  << only works when escaped with '\'
    fractions(355, 112)
  }% if(.)
}
\keyword{misc}
> Rd2ex(rd1)
### Name: ex-comm-brace
### Title: Commented left-brace in Example
### Keywords: misc

### ** Examples

  if(1 <= 11) { # if(require("MASS")) {  << only works when escaped with '\'
    fractions(355, 112)
  }



> Rd2txt(rd1)
_C_o_m_m_e_n_t_e_d _l_e_f_t-_b_r_a_c_e _i_n _E_x_a_m_p_l_e

_E_x_a_m_p_l_e_s:

       if(1 <= 11) { # if(require("MASS")) {  << only works when escaped with '\'
         fractions(355, 112)
       }
     
> ## etc
> 
> ## however: When I try the bare "{" instead of  "\{"
> txt0 <- sub("\\{", "{", txt, fixed=TRUE)
> stopifnot(nchar(txt0) == nchar(txt) - 1)
> ## This currently gives a warning .. and later problems {-> package checking etc}
> rd0 <- parse_Rd(con0 <- textConnection(txt0)); close(con0)
Warning message:
In parse_Rd(con0 <- textConnection(txt0)) :
  <connection>:8: unexpected section header '\keyword'
> ## Warning message:
> ## In parse_Rd(con0) : <connection>:8: unexpected section header '\keyword'
> checkRd(rd0)
> Rd2ex(rd0) # shows extra "}" and "{misc}"
### Name: ex-comm-brace
### Title: Commented left-brace in Example

### ** Examples

  if(1 <= 11) { # if(require("MASS")) {  << only works when escaped with '\'
    fractions(355, 112)
  }
}
{misc}



> 
