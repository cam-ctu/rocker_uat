
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## some tests of inverse-gaussian GLMs based on a file supplied by
> ## David Firth, Feb 2009.
> 
> options(digits=5)
> have_MASS <- requireNamespace('MASS', quietly = TRUE)
> 
> ##  Data from Whitmore, G A (1986), Inverse Gaussian Ratio Estimation.
> ##  Applied Statistics 35(1), 8-15.
> ##
> ##  A "real, but disguised" set of data (Whitmore, 1986, p8).
> ##
> ##  For each of 20 products, x is projected sales and y is actual sales.
> 
> x <- c(5959, 3534, 2641, 1965, 1738, 1182, 667, 613, 610, 549,
+        527, 353, 331, 290, 253, 193, 156, 133, 122, 114)
> y <- c(5673, 3659, 2565, 2182, 1839, 1236, 918, 902, 756, 500,
+        487, 463, 225, 257, 311, 212, 166, 123, 198, 99)
> 
> ## Whitmore's model (2.4) is
> 
> fit <- glm(y ~ x - 1, weights = x^2,
+            family = inverse.gaussian(link = "identity"),
+            epsilon = 1e-12)
> fit

Call:  glm(formula = y ~ x - 1, family = inverse.gaussian(link = "identity"), 
    weights = x^2, epsilon = 1e-12)

Coefficients:
   x  
1.04  

Degrees of Freedom: 20 Total (i.e. Null);  19 Residual
Null Deviance:	    Inf 
Residual Deviance: 343 	AIC: 1.01e+09
> coef(summary(fit))
  Estimate Std. Error t value   Pr(>|t|)
x   1.0383   0.032173  32.274 4.6324e-18
> ##  Alternatively, use the explicit formula that's available for the MLE
> ##  in this example.  It's just a ratio estimate:
> (beta.exact <- sum(y)/sum(x))
[1] 1.0383
> stopifnot(all.equal(beta.exact, as.vector(coef(fit))))
> ## and for a confidence interval via confint
> if(have_MASS) {
+     ci <- confint(fit, 1, level = 0.95)
+     print(ci)
+ }
Waiting for profiling to be done...
  2.5 %  97.5 % 
0.97891 1.10549 
> ## and via asymptotic normality
> sterr <- coef(summary(fit))[, "Std. Error"]
> coef(fit) + (1.96 * sterr * c(-1, 1))
[1] 0.97529 1.10141
> 
> ## David suggested the use of an inverse link
> 
> fit2 <- glm(y ~ I(1/x) - 1, weights = x^2,
+             family = inverse.gaussian(link = "inverse"),
+             epsilon = 1e-12)
> coef(summary(fit2))
       Estimate Std. Error t value   Pr(>|t|)
I(1/x)  0.96307    0.02984  32.274 4.6324e-18
> ## which gives the same CIs both ways
> if(have_MASS) {
+     ci1 <- rev(1/(confint(fit2, 1, level = 0.95)))
+     print(ci1)
+     sterr <- (summary(fit2)$coefficients)[, "Std. Error"]
+     ci2 <- 1/(coef(fit2) - (1.96 * sterr * c(-1, 1)))
+     print(ci2)
+     stopifnot(all.equal(as.vector(ci), as.vector(ci1), tolerance = 1e-5),
+               all.equal(as.vector(ci), ci2, tolerance = 1e-3))
+ }
Waiting for profiling to be done...
97.5 %  2.5 % 
0.9789 1.1055 
[1] 0.9789 1.1055
> ##  because the log likelihood for 1/beta is exactly quadratic.
> 
> ##  The approximate intervals above differ slightly from the exact
> ##  confidence interval given in Whitmore (1986) -- as is to be
> ##  expected (they are based on asymptotic approximations, not the
> ##  exact pivot).
> 
> 
> ## Now simulate from this model
> if(requireNamespace("SuppDists")) {
+     print( ys <- simulate(fit, nsim = 3, seed = 1) )
+     for(i in seq_len(3))
+         print(coef(summary(update(fit, ys[, i] ~ .))))
+ }
Loading required namespace: SuppDists
using weights as inverse variances
     sim_1    sim_2    sim_3
1  6422.26 6255.435 6502.585
2  3258.51 3942.121 3753.956
3  2668.52 2396.265 2648.475
4  1978.13 2129.138 2094.326
5  1975.31 1926.534 1996.648
6  1366.32 1218.010 1147.562
7   898.73  636.190  643.026
8   689.72  564.367  728.204
9   681.52  640.411  516.503
10  510.80  521.699  484.429
11  475.11  508.760  637.972
12  343.48  334.332  203.643
13  239.91  209.628  377.033
14  214.58  331.668  300.226
15  260.59  325.391  277.405
16  217.53  196.126  199.137
17  202.63  115.122  102.608
18  131.78   96.261  242.847
19  133.99   78.023   67.955
20  181.10  133.257  201.796
  Estimate Std. Error t value   Pr(>|t|)
x    1.042   0.026361  39.527 1.0388e-19
  Estimate Std. Error t value   Pr(>|t|)
x   1.0287   0.023123  44.487 1.1249e-20
  Estimate Std. Error t value   Pr(>|t|)
x   1.0546   0.030472  34.607 1.2564e-18
> 
